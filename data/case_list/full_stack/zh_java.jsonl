{"canonical_solution": "import java.util.Arrays;\npublic class AverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n        if (numbers == null || numbers.length == 0) {\n            throw new IllegalArgumentException(\"数组不能为空\");\n        }\n        return Arrays.stream(numbers).average().orElse(Double.NaN);\n    }\n    public static void main(String[] args) {\n        int[] testData = {1, 2, 3, 4, 5};\n        double average = calculateAverage(testData);\n        System.out.println(\"平均值为: \" + average);\n        check(calculateAverage(new int[]{10, 20, 30}), 20.0);\n        check(calculateAverage(new int[]{5, 5, 5, 5}), 5.0);\n        check(calculateAverage(new int[]{1, -1, 3, -3, 5, -5}), 0.0);\n    }\n    private static void check(double actual, double expected) {\n        if (Math.abs(actual - expected) < 0.0001) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败: 期望 \" + expected + \", 实际 \" + actual);\n        }\n    }\n}", "content": "编写一个Java程序，用于计算一组数据的平均值。请确保你的程序能够接受一个整型数组作为输入，并返回这组数据的平均值。为了验证你的程序，你需要实现一个名为`calculateAverage`的方法，该方法接受一个`int[]`类型的参数，并返回一个`double`类型的结果，代表输入数组的平均值。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\npublic class AverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n    }\n}\n```", "id": 1459, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\npublic class AverageCalculatorTest {\n    @Test\n    public void testCalculateAverage_withValidInput() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        double result = AverageCalculator.calculateAverage(numbers);\n        assertEquals(3.0, result, 0.0001);\n    }\n    @Test\n    public void testCalculateAverage_withNegativeNumbers() {\n        int[] numbers = {1, -1, 3, -3, 5, -5};\n        double result = AverageCalculator.calculateAverage(numbers);\n        assertEquals(0.0, result, 0.0001);\n    }\n    @Test\n    public void testCalculateAverage_withEmptyArray() {\n        int[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            AverageCalculator.calculateAverage(numbers);\n        });\n    }\n    @Test\n    public void testCalculateAverage_withNullArray() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            AverageCalculator.calculateAverage(null);\n        });\n    }\n    @Test\n    public void testCalculateAverage_withSameNumbers() {\n        int[] numbers = {5, 5, 5, 5};\n        double result = AverageCalculator.calculateAverage(numbers);\n        assertEquals(5.0, result, 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nclass StudentDTO {\n    private Long id;\n    private String name;\n    private List<Long> courseIds;\n    public StudentDTO(Long id, String name, List<Long> courseIds) {\n        this.id = id;\n        this.name = name;\n        this.courseIds = courseIds;\n    }\n    public Long getId() {\n        return id;\n    }\n    public String getName() {\n        return name;\n    }\n    public List<Long> getCourseIds() {\n        return courseIds;\n    }\n}\nclass Course {\n    private Long courseId;\n    public Course(Long courseId) {\n        this.courseId = courseId;\n    }\n    public void setCourseId(Long courseId) {\n        this.courseId = courseId;\n    }\n    public Long getCourseId() {\n        return courseId;\n    }\n}\nclass Student {\n    private Long id;\n    private String name;\n    private List<Course> courses;\n    public Student(Long id, String name, List<Course> courses) {\n        this.id = id;\n        this.name = name;\n        this.courses = courses;\n    }\n    public Long getId() {\n        return id;\n    }\n    public String getName() {\n        return name;\n    }\n    public List<Course> getCourses() {\n        return courses;\n    }\n}\npublic class DTOToEntityConverter {\n    public static Student toStudent(StudentDTO studentDTO) {\n        List<Course> courses = new ArrayList<>();\n        List<Long> courseIds = studentDTO.getCourseIds();\n        if (courseIds != null) {\n            for (Long courseId : courseIds) {\n                Course course = new Course(courseId);\n                courses.add(course);\n            }\n        }\n        return new Student(studentDTO.getId(), studentDTO.getName(), courses);\n    }\n    public static void main(String[] args) {\n        List<Long> courseIds = new ArrayList<>();\n        courseIds.add(101L);\n        courseIds.add(102L);\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        Student student = toStudent(studentDTO);\n        System.out.println(\"学生ID: \" + student.getId() + \", 名字: \" + student.getName() + \", 课程数量: \" + student.getCourses().size());\n    }\n}", "content": "请编写一个Java函数，该函数能够将一个学生的数据传输对象（DTO）转换为学生实体对象。学生DTO包含学生的基本信息和他们所选课程的ID列表。学生实体对象除了包含基本信息外，还需要包含课程实体对象的列表。课程实体对象仅包含课程ID。注意，如果课程ID列表为空，则学生实体对象中的课程列表也应为空。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass StudentDTO {\n    private Long id;\n    private String name;\n    private List<Long> courseIds;\n    public StudentDTO(Long id, String name, List<Long> courseIds) {\n    }\n    public Long getId() {\n    }\n    public String getName() {\n    }\n    public List<Long> getCourseIds() {\n    }\n}\nclass Course {\n    private Long courseId;\n    public Course(Long courseId) {\n    }\n    public void setCourseId(Long courseId) {\n    }\n    public Long getCourseId() {\n    }\n}\nclass Student {\n    private Long id;\n    private String name;\n    private List<Course> courses;\n    public Student(Long id, String name, List<Course> courses) {\n    }\n    public Long getId() {\n    }\n    public String getName() {\n    }\n    public List<Course> getCourses() {\n    }\n}\npublic class DTOToEntityConverter {\n    public static Student toStudent(StudentDTO studentDTO) {\n    }\n}\n```", "id": 1460, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\nclass StudentDTOTest {\n    @Test\n    void testGetId() {\n        List<Long> courseIds = new ArrayList<>();\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        assertEquals(1L, studentDTO.getId());\n    }\n    @Test\n    void testGetName() {\n        List<Long> courseIds = new ArrayList<>();\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        assertEquals(\"张三\", studentDTO.getName());\n    }\n    @Test\n    void testGetCourseIds() {\n        List<Long> courseIds = new ArrayList<>();\n        courseIds.add(101L);\n        courseIds.add(102L);\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        assertEquals(2, studentDTO.getCourseIds().size());\n        assertTrue(studentDTO.getCourseIds().contains(101L));\n        assertTrue(studentDTO.getCourseIds().contains(102L));\n    }\n}\nclass CourseTest {\n    @Test\n    void testGetCourseId() {\n        Course course = new Course(101L);\n        assertEquals(101L, course.getCourseId());\n    }\n    @Test\n    void testSetCourseId() {\n        Course course = new Course(101L);\n        course.setCourseId(102L);\n        assertEquals(102L, course.getCourseId());\n    }\n}\nclass StudentTest {\n    @Test\n    void testGetId() {\n        List<Course> courses = new ArrayList<>();\n        Student student = new Student(1L, \"张三\", courses);\n        assertEquals(1L, student.getId());\n    }\n    @Test\n    void testGetName() {\n        List<Course> courses = new ArrayList<>();\n        Student student = new Student(1L, \"张三\", courses);\n        assertEquals(\"张三\", student.getName());\n    }\n    @Test\n    void testGetCourses() {\n        List<Course> courses = new ArrayList<>();\n        courses.add(new Course(101L));\n        courses.add(new Course(102L));\n        Student student = new Student(1L, \"张三\", courses);\n        assertEquals(2, student.getCourses().size());\n        assertEquals(101L, student.getCourses().get(0).getCourseId());\n        assertEquals(102L, student.getCourses().get(1).getCourseId());\n    }\n}\nclass DTOToEntityConverterTest {\n    @Test\n    void testToStudent() {\n        List<Long> courseIds = new ArrayList<>();\n        courseIds.add(101L);\n        courseIds.add(102L);\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        Student student = DTOToEntityConverter.toStudent(studentDTO);\n        assertNotNull(student);\n        assertEquals(1L, student.getId());\n        assertEquals(\"张三\", student.getName());\n        assertEquals(2, student.getCourses().size());\n        assertEquals(101L, student.getCourses().get(0).getCourseId());\n        assertEquals(102L, student.getCourses().get(1).getCourseId());\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class SimpleTextEditor {\n    private ArrayList<String> textHistory = new ArrayList<>();\n    private String currentText = \"\";\n    public void addText(String text) {\n        textHistory.add(currentText); \n        currentText += text;\n    }\n    public void undo() {\n        if (!textHistory.isEmpty()) {\n            currentText = textHistory.remove(textHistory.size() - 1); \n        }\n    }\n    public String getText() {\n        return currentText;\n    }\n    public static void main(String[] args) {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        System.out.println(editor.getText()); \n        editor.undo();\n        System.out.println(editor.getText()); \n        editor.undo();\n        System.out.println(editor.getText()); \n    }\n}", "content": "请编写一个Java程序，实现一个简单的文本编辑器的撤销功能。这个文本编辑器只支持添加文字和撤销操作。具体要求如下：\n\n- 编辑器初始时为空。\n- 提供一个方法 `addText`，接受一个字符串参数，将其追加到编辑器的现有文本中。\n- 提供一个方法 `undo`，撤销最近一次的 `addText` 操作。\n- 提供一个方法 `getText`，返回编辑器当前的文本内容。\n- 使用 `ArrayList<String>` 来存储每次添加的文本，以支持撤销操作。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\npublic class SimpleTextEditor {\n    private ArrayList<String> textHistory = new ArrayList<>();\n    private String currentText = \"\";\n    public void addText(String text) {\n    }\n    public void undo() {\n    }\n    public String getText() {\n    }\n}\n```", "id": 1461, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SimpleTextEditorTest {\n    @Test\n    public void testAddText() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        assertEquals(\"Hello\", editor.getText());\n    }\n    @Test\n    public void testAddTextMultipleTimes() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        assertEquals(\"Hello, World!\", editor.getText());\n    }\n    @Test\n    public void testUndo() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        editor.undo();\n        assertEquals(\"Hello\", editor.getText());\n    }\n    @Test\n    public void testUndoMultipleTimes() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        editor.undo();\n        editor.undo();\n        assertEquals(\"\", editor.getText());\n    }\n    @Test\n    public void testUndoEmptyHistory() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.undo();\n        assertEquals(\"\", editor.getText());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass Book {\n    String title;\n    String author;\n    int year;\n    public Book(String title, String author, int year) {\n        this.title = title;\n        this.author = author;\n        this.year = year;\n    }\n    @Override\n    public String toString() {\n        return \"书名: \" + title + \", 作者: \" + author + \", 出版年份: \" + year;\n    }\n}\npublic class LibrarySystem {\n    private Map<Integer, Book> bookDatabase;\n    public LibrarySystem() {\n        bookDatabase = new HashMap<>();\n        bookDatabase.put(1, new Book(\"Java编程思想\", \"Bruce Eckel\", 2006));\n        bookDatabase.put(2, new Book(\"Effective Java\", \"Joshua Bloch\", 2008));\n        bookDatabase.put(3, new Book(\"深入理解Java虚拟机\", \"周志明\", 2013));\n    }\n    public String findBookDetails(int bookId) {\n        if (bookDatabase.containsKey(bookId)) {\n            return bookDatabase.get(bookId).toString();\n        } else {\n            return \"抱歉，找不到ID为 \" + bookId + \" 的图书。\";\n        }\n    }\n    public static void main(String[] args) {\n        LibrarySystem library = new LibrarySystem();\n        System.out.println(library.findBookDetails(1)); \n        System.out.println(library.findBookDetails(4)); \n    }\n}", "content": "请编写一个Java程序，用于模拟一个图书馆系统中的图书查询功能。该功能应允许用户根据图书ID查询图书的详细信息，包括书名、作者和出版年份。请确保程序能够处理异常情况，例如当给定的图书ID不存在时，应返回一个友好的错误信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass Book {\n    String title;\n    String author;\n    int year;\n    public Book(String title, String author, int year) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class LibrarySystem {\n    private Map<Integer, Book> bookDatabase;\n    public LibrarySystem() {\n    }\n    public String findBookDetails(int bookId) {\n    }\n}\n```", "id": 1462, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class LibrarySystemTest {\n    private LibrarySystem library;\n    @Before\n    public void setUp() {\n        library = new LibrarySystem();\n    }\n    @Test\n    public void testFindBookDetails_ValidID() {\n        String expected = \"书名: Java编程思想, 作者: Bruce Eckel, 出版年份: 2006\";\n        String actual = library.findBookDetails(1);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_InvalidID() {\n        String expected = \"抱歉，找不到ID为 4 的图书。\";\n        String actual = library.findBookDetails(4);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_AnotherValidID() {\n        String expected = \"书名: Effective Java, 作者: Joshua Bloch, 出版年份: 2008\";\n        String actual = library.findBookDetails(2);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_YetAnotherValidID() {\n        String expected = \"书名: 深入理解Java虚拟机, 作者: 周志明, 出版年份: 2013\";\n        String actual = library.findBookDetails(3);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_DifferentInvalidID() {\n        String expected = \"抱歉，找不到ID为 5 的图书。\";\n        String actual = library.findBookDetails(5);\n        assertEquals(expected, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private static Map<Long, String> bookDatabase = new HashMap<>();\n    static {\n        bookDatabase.put(1L, \"张三\");\n        bookDatabase.put(2L, \"李四\");\n    }\n    public static String fetchAuthorName(Long bookId) {\n        String authorName = bookDatabase.get(bookId);\n        if (authorName == null) {\n            return \"图书ID不存在\";\n        }\n        return authorName;\n    }\n    public static void checkFunction() {\n        System.out.println(fetchAuthorName(1L).equals(\"张三\") ? \"测试1通过\" : \"测试1失败\");\n        System.out.println(fetchAuthorName(2L).equals(\"李四\") ? \"测试2通过\" : \"测试2失败\");\n        System.out.println(fetchAuthorName(3L).equals(\"图书ID不存在\") ? \"测试3通过\" : \"测试3失败\");\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java函数，该函数用于从一个简单的图书管理系统中获取指定图书的作者名字。假设我们有一个`Book`类，其中包含图书的ID（`bookId`）和作者名字（`authorName`）。你需要实现一个名为`fetchAuthorName`的函数，该函数接收一个图书ID作为参数，并返回对应图书的作者名字。如果该图书ID不存在，则返回一个明确的提示字符串，比如\"图书ID不存在\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class BookManager {\n    private static Map<Long, String> bookDatabase = new HashMap<>();\n    static {\n        bookDatabase.put(1L, \"张三\");\n        bookDatabase.put(2L, \"李四\");\n    }\n    public static String fetchAuthorName(Long bookId) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1463, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class BookManagerTest {\n    @Test\n    public void testFetchAuthorName_ValidBookId1() {\n        String result = BookManager.fetchAuthorName(1L);\n        assertEquals(\"张三\", result);\n    }\n    @Test\n    public void testFetchAuthorName_ValidBookId2() {\n        String result = BookManager.fetchAuthorName(2L);\n        assertEquals(\"李四\", result);\n    }\n    @Test\n    public void testFetchAuthorName_InvalidBookId() {\n        String result = BookManager.fetchAuthorName(3L);\n        assertEquals(\"图书ID不存在\", result);\n    }\n    @Test\n    public void testFetchAuthorName_NullBookId() {\n        String result = BookManager.fetchAuthorName(null);\n        assertEquals(\"图书ID不存在\", result);\n    }\n    @Test\n    public void testFetchAuthorName_DifferentInvalidBookId() {\n        String result = BookManager.fetchAuthorName(99L);\n        assertEquals(\"图书ID不存在\", result);\n    }\n}"}}
{"canonical_solution": "import javax.swing.JComponent;\nimport javax.swing.JLabel;\npublic class DataViewUpdater {\n    public void updateViewStatus(JComponent errorDisplay, JComponent dataDisplay, boolean isDataRequestSuccessful) {\n        if (isDataRequestSuccessful) {\n            errorDisplay.setVisible(false);\n            dataDisplay.setVisible(true);\n        } else {\n            errorDisplay.setVisible(true);\n            dataDisplay.setVisible(false);\n        }\n    }\n    public static void main(String[] args) {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, true);\n        System.out.println(\"数据请求成功时的可见性状态：\");\n        System.out.println(\"错误消息可见性：\" + errorLabel.isVisible());\n        System.out.println(\"数据视图可见性：\" + dataLabel.isVisible());\n        updater.updateViewStatus(errorLabel, dataLabel, false);\n        System.out.println(\"数据请求失败时的可见性状态：\");\n        System.out.println(\"错误消息可见性：\" + errorLabel.isVisible());\n        System.out.println(\"数据视图可见性：\" + dataLabel.isVisible());\n    }\n}", "content": "请编写一个Java方法，用于在图形用户界面中切换显示状态。当用户请求数据时，我们需要隐藏错误消息，并显示数据视图。请确保你的代码能够根据提供的指令动态地更新UI组件的可见性状态。你的方法应该名为`updateViewStatus`，并且接收两个参数：`errorDisplay`和`dataDisplay`，这两个参数分别代表错误消息和数据视图的UI组件。请使用Java Swing库中的`JComponent`类来代表这些UI组件，并且在方法中，你需要根据情况设置这些组件的可见性。如果数据请求成功，隐藏错误消息并显示数据视图；如果数据请求失败，执行相反的操作。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport javax.swing.JComponent;\nimport javax.swing.JLabel;\npublic class DataViewUpdater {\n    public void updateViewStatus(JComponent errorDisplay, JComponent dataDisplay, boolean isDataRequestSuccessful) {\n    }\n}\n```", "id": 1464, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import javax.swing.JComponent;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DataViewUpdaterTest {\n    @Test\n    public void testUpdateViewStatus_DataRequestSuccessful() {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, true);\n        assertFalse(errorLabel.isVisible());\n        assertTrue(dataLabel.isVisible());\n    }\n    @Test\n    public void testUpdateViewStatus_DataRequestFailed() {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, false);\n        assertTrue(errorLabel.isVisible());\n        assertFalse(dataLabel.isVisible());\n    }\n    @Test\n    public void testUpdateViewStatus_InitiaVisibility() {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        errorLabel.setVisible(true);\n        dataLabel.setVisible(false);\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, true);\n        assertFalse(errorLabel.isVisible());\n        assertTrue(dataLabel.isVisible());\n        updater.updateViewStatus(errorLabel, dataLabel, false);\n        assertTrue(errorLabel.isVisible());\n        assertFalse(dataLabel.isVisible());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class EntityTypeInformation {\n    public static String getEntityTypeInformation(String projectName, String entityTypeName) {\n        EntityTypeFetcher entityTypeFetcher = new EntityTypeFetcher();\n        return entityTypeFetcher.fetchEntityType(projectName, entityTypeName);\n    }\n    static class EntityTypeFetcher {\n        public String fetchEntityType(String projectName, String entityTypeName) {\n            Map<String, String> mockData = new HashMap<>();\n            mockData.put(\"ProjectA:EntityType1\", \"信息1\");\n            mockData.put(\"ProjectB:EntityType2\", \"信息2\");\n            return mockData.getOrDefault(projectName + \":\" + entityTypeName, \"未找到信息\");\n        }\n    }\n    public static void checkFunction() {\n        String result1 = getEntityTypeInformation(\"ProjectA\", \"EntityType1\");\n        System.out.println(\"查询结果1: \" + result1);\n        assert \"信息1\".equals(result1) : \"测试1失败\";\n        String result2 = getEntityTypeInformation(\"ProjectB\", \"EntityType2\");\n        System.out.println(\"查询结果2: \" + result2);\n        assert \"信息2\".equals(result2) : \"测试2失败\";\n        String result3 = getEntityTypeInformation(\"ProjectC\", \"EntityType3\");\n        System.out.println(\"查询结果3: \" + result3);\n        assert \"未找到信息\".equals(result3) : \"测试3失败\";\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java方法，该方法能够查询并返回一个特定项目中的实体类型信息。该方法应该接收两个字符串参数：`项目名`和`实体类型名`，并返回一个表示实体类型信息的字符串。假设你已经有了一个名为`EntityTypeFetcher`的客户端类，该类有一个名为`fetchEntityType`的方法，该方法接受一个项目名和实体类型名作为参数，并返回关于该实体类型的信息。请确保在你的解决方案中导入必要的包。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class EntityTypeInformation {\n    public static String getEntityTypeInformation(String projectName, String entityTypeName) {\n    }\n    static class EntityTypeFetcher {\n        public String fetchEntityType(String projectName, String entityTypeName) {\n        }\n    }\n}\n```", "id": 1465, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class EntityTypeInformationTest {\n    @Test\n    public void testGetEntityTypeInformation_ExistingProjectAndEntityType() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectA\", \"EntityType1\");\n        assertEquals(\"信息1\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_ExistingProjectAndDifferentEntityType() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectB\", \"EntityType2\");\n        assertEquals(\"信息2\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_NonExistingProjectAndEntityType() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectC\", \"EntityType3\");\n        assertEquals(\"未找到信息\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_EmptyProjectName() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"\", \"EntityType1\");\n        assertEquals(\"未找到信息\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_EmptyEntityTypeName() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectA\", \"\");\n        assertEquals(\"未找到信息\", result);\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class RectangleCalculator {\n    public static int calculateArea(int width, int height) {\n        if (width < 0 || height < 0) {\n            throw new IllegalArgumentException(\"宽度和高度必须非负。\");\n        }\n        return width * height;\n    }\n    public static void main(String[] args) {\n        int width = 5;\n        int height = 10;\n        int area = calculateArea(width, height);\n        System.out.println(\"矩形的面积是: \" + area);\n        checkCalculateArea();\n    }\n    private static void checkCalculateArea() {\n        assert calculateArea(5, 10) == 50 : \"计算错误\";\n        assert calculateArea(0, 0) == 0 : \"计算错误\";\n        try {\n            calculateArea(-1, 10);\n            System.out.println(\"应该抛出异常，但没有抛出。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"正确抛出异常，因为输入了负值。\");\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个名为`RectangleCalculator`的类，该类中包含一个方法`calculateArea`，用于计算矩形的面积。方法接收两个整型参数：矩形的宽`width`和高`height`，并返回计算得到的面积。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class RectangleCalculator {\n    public static int calculateArea(int width, int height) {\n    }\n}\n```", "id": 1466, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class RectangleCalculatorTest {\n    @Test\n    public void testCalculateAreaPositiveValues() {\n        int width = 5;\n        int height = 10;\n        int expectedArea = 50;\n        int actualArea = RectangleCalculator.calculateArea(width, height);\n        assertEquals(expectedArea, actualArea);\n    }\n    @Test\n    public void testCalculateAreaZeroValues() {\n        int width = 0;\n        int height = 0;\n        int expectedArea = 0;\n        int actualArea = RectangleCalculator.calculateArea(width, height);\n        assertEquals(expectedArea, actualArea);\n    }\n    @Test\n    public void testCalculateAreaNegativeWidth() {\n        int width = -1;\n        int height = 10;\n        assertThrows(IllegalArgumentException.class, () -> {\n            RectangleCalculator.calculateArea(width, height);\n        });\n    }\n    @Test\n    public void testCalculateAreaNegativeHeight() {\n        int width = 10;\n        int height = -1;\n        assertThrows(IllegalArgumentException.class, () -> {\n            RectangleCalculator.calculateArea(width, height);\n        });\n    }\n    @Test\n    public void testCalculateAreaBothNegative() {\n        int width = -5;\n        int height = -10;\n        assertThrows(IllegalArgumentException.class, () -> {\n            RectangleCalculator.calculateArea(width, height);\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\nclass UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class UserCheckService {\n    private List<Long> existingUserIds = Arrays.asList(1001L, 1002L, 1003L, 1004L);\n    public void checkUserExistence(long userId) {\n        if (!existingUserIds.contains(userId)) {\n            throw new UserNotFoundException(\"用户记录未找到，ID: \" + userId);\n        }\n    }\n    public static void main(String[] args) {\n        UserCheckService service = new UserCheckService();\n        try {\n            service.checkUserExistence(1005L); \n        } catch (UserNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            service.checkUserExistence(1002L); \n            System.out.println(\"用户存在检查通过\");\n        } catch (UserNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "假设你正在开发一个电商平台的后端服务，你需要编写一个方法来检查用户是否存在于数据库中。如果用户不存在，你的方法应该抛出一个自定义的异常，提示“用户记录未找到”。请根据这个需求，设计一个Java方法，并确保包含必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nclass UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String message) {\n    }\n}\npublic class UserCheckService {\n    private List<Long> existingUserIds = Arrays.asList(1001L, 1002L, 1003L, 1004L);\n    public void checkUserExistence(long userId) {\n    }\n}\n```", "id": 1467, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class UserCheckServiceTest {\n    private final UserCheckService service = new UserCheckService();\n    @Test\n    public void testUserExists() {\n        Assertions.assertDoesNotThrow(() -> service.checkUserExistence(1001L));\n    }\n    @Test\n    public void testUserNotFoundThrowsException() {\n        Assertions.assertThrows(UserNotFoundException.class, () -> service.checkUserExistence(1005L));\n    }\n    @Test\n    public void testUserNotFoundExceptionMessage() {\n        UserNotFoundException exception = Assertions.assertThrows(UserNotFoundException.class, () -> service.checkUserExistence(1006L));\n        Assertions.assertEquals(\"用户记录未找到，ID: 1006\", exception.getMessage());\n    }\n    @Test\n    public void testUserExistenceOnBoundary() {\n        Assertions.assertDoesNotThrow(() -> service.checkUserExistence(1004L));\n    }\n    @Test\n    public void testUserExistenceForNonExistingIdNegative() {\n        Assertions.assertThrows(UserNotFoundException.class, () -> service.checkUserExistence(-1L));\n    }\n}"}}
{"canonical_solution": "import java.lang.Math;\npublic class ImageScaler {\n    public static int computeScaleFactor(int originalWidth, int originalHeight, int targetWidth, int targetHeight) {\n        int scaleFactor = 1;\n        if (originalHeight > targetHeight || originalWidth > targetWidth) {\n            int halfHeight = originalHeight / 2;\n            int halfWidth = originalWidth / 2;\n            while ((halfHeight / scaleFactor) >= targetHeight && (halfWidth / scaleFactor) >= targetWidth) {\n                scaleFactor *= 2;\n            }\n        }\n        return scaleFactor;\n    }\n    public static void main(String[] args) {\n        int scaleFactor = computeScaleFactor(4000, 3000, 800, 600);\n        System.out.println(\"Recommended scale factor: \" + scaleFactor);\n    }\n}", "content": "如何设计一个Java方法来计算加载到内存中的图片的合适缩放比例？假设你需要加载一张图片，但是为了节省内存，你希望根据图片的原始尺寸和目标显示尺寸来计算一个缩放比例。这个缩放比例应该是2的幂（例如，1、2、4、8...），以确保图片在缩放时不会失去太多的质量。同时，计算出的缩放比例应该能够确保缩放后的图片的宽度和高度都不会小于目标尺寸。请你设计一个方法来实现这个功能。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.Math;\npublic class ImageScaler {\n    public static int computeScaleFactor(int originalWidth, int originalHeight, int targetWidth, int targetHeight) {\n    }\n}\n```", "id": 1468, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ImageScalerTest {\n    @Test\n    public void testComputeScaleFactor_NoScalingNeeded() {\n        int result = ImageScaler.computeScaleFactor(800, 600, 800, 600);\n        assertEquals(1, result);\n    }\n    @Test\n    public void testComputeScaleFactor_ScalingDown() {\n        int result = ImageScaler.computeScaleFactor(4000, 3000, 800, 600);\n        assertEquals(4, result);\n    }\n    @Test\n    public void testComputeScaleFactor_ScalingDownToDifferentAspectRatio() {\n        int result = ImageScaler.computeScaleFactor(4000, 3000, 1000, 800);\n        assertEquals(2, result);\n    }\n    @Test\n    public void testComputeScaleFactor_ExactFit() {\n        int result = ImageScaler.computeScaleFactor(2000, 1000, 1000, 500);\n        assertEquals(2, result);\n    }\n    @Test\n    public void testComputeScaleFactor_OneDimensionFits() {\n        int result = ImageScaler.computeScaleFactor(2000, 1000, 2000, 500);\n        assertEquals(1, result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class UserProfile {\n    private String description;\n    public UserProfile(String description) {\n        this.description = description;\n    }\n    public String getDescription() {\n        if (Objects.isNull(description)) {\n            setDescription(\"暂无描述\");\n        }\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    public static void checkDescription() {\n        UserProfile userWithDescription = new UserProfile(\"爱好编程\");\n        UserProfile userWithoutDescription = new UserProfile(null);\n        System.out.println(\"有描述的用户描述信息: \" + userWithDescription.getDescription()); \n        System.out.println(\"无描述的用户描述信息: \" + userWithoutDescription.getDescription()); \n    }\n    public static void main(String[] args) {\n        checkDescription();\n    }\n}", "content": "请编写一个Java方法，该方法用于处理用户的个人描述信息。在我们的应用中，用户的描述信息可能尚未设置，即可能为null。如果用户的描述信息为null，我们希望自动为其生成一个默认的描述信息“暂无描述”。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class UserProfile {\n    private String description;\n    public UserProfile(String description) {\n    }\n    public String getDescription() {\n    }\n    public void setDescription(String description) {\n    }\n    public static void checkDescription() {\n    }\n}\n```", "id": 1469, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class UserProfileTest {\n    @Test\n    public void testGetDescription_whenDescriptionIsNotNull() {\n        UserProfile userProfile = new UserProfile(\"爱好编程\");\n        assertEquals(\"爱好编程\", userProfile.getDescription());\n    }\n    @Test\n    public void testGetDescription_whenDescriptionIsNull() {\n        UserProfile userProfile = new UserProfile(null);\n        assertEquals(\"暂无描述\", userProfile.getDescription());\n    }\n    @Test\n    public void testSetDescription() {\n        UserProfile userProfile = new UserProfile(null);\n        userProfile.setDescription(\"新描述\");\n        assertEquals(\"新描述\", userProfile.getDescription());\n    }\n    @Test\n    public void testGetDescription_afterSettingDescription() {\n        UserProfile userProfile = new UserProfile(null);\n        userProfile.setDescription(\"新的描述\");\n        assertEquals(\"新的描述\", userProfile.getDescription());\n    }\n    @Test\n    public void testGetDescription_initialNonNullThenSetNull() {\n        UserProfile userProfile = new UserProfile(\"原描述\");\n        userProfile.setDescription(null);\n        assertEquals(\"暂无描述\", userProfile.getDescription());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass ProductService {\n    private Map<String, Double> productPrices = new HashMap<>();\n    public ProductService() {\n        productPrices.put(\"A123\", 99.99);\n        productPrices.put(\"B456\", 199.99);\n        productPrices.put(\"C789\", 299.99);\n    }\n    public void updateProductPrice(String productId, double newPrice) {\n        if (newPrice < 0) {\n            throw new IllegalArgumentException(\"价格不能为负数。\");\n        }\n        productPrices.put(productId, newPrice);\n    }\n    public double getProductPrice(String productId) {\n        return productPrices.getOrDefault(productId, -1.0);\n    }\n}\npublic class UpdatePriceDemo {\n    public static void main(String[] args) {\n        ProductService productService = new ProductService();\n        try {\n            productService.updateProductPrice(\"A123\", 109.99);\n            System.out.println(\"更新后的价格: \" + productService.getProductPrice(\"A123\"));\n            productService.updateProductPrice(\"B456\", -99.99);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，用于更新一个在线商店的商品价格信息。该方法应该接收两个参数：一个是商品的ID（字符串类型），另一个是新的价格（浮点数类型）。假设我们已经有了一个名为`ProductService`的类，该类中有一个名为`updateProductPrice`的方法，可以用来更新商品价格。此外，还需要确保在更新价格之前，新的价格不是负数。如果价格是负数，方法应该抛出一个`IllegalArgumentException`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass ProductService {\n    private Map<String, Double> productPrices = new HashMap<>();\n    public ProductService() {\n    }\n    public void updateProductPrice(String productId, double newPrice) {\n    }\n    public double getProductPrice(String productId) {\n    }\n}\n```", "id": 1470, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nclass ProductServiceTest {\n    private ProductService productService;\n    @BeforeEach\n    public void setUp() {\n        productService = new ProductService();\n    }\n    @Test\n    public void testUpdateProductPriceSuccessfully() {\n        productService.updateProductPrice(\"A123\", 109.99);\n        assertEquals(109.99, productService.getProductPrice(\"A123\"));\n    }\n    @Test\n    public void testUpdateProductPriceWithNegativeValue() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            productService.updateProductPrice(\"B456\", -99.99);\n        });\n        assertEquals(\"价格不能为负数。\", exception.getMessage());\n    }\n    @Test\n    public void testGetProductPriceForNonExistingProduct() {\n        assertEquals(-1.0, productService.getProductPrice(\"X999\"));\n    }\n    @Test\n    public void testInitialProductPrice() {\n        assertEquals(99.99, productService.getProductPrice(\"A123\"));\n        assertEquals(199.99, productService.getProductPrice(\"B456\"));\n        assertEquals(299.99, productService.getProductPrice(\"C789\"));\n    }\n    @Test\n    public void testUpdatePriceMultipleTimes() {\n        productService.updateProductPrice(\"A123\", 109.99);\n        productService.updateProductPrice(\"A123\", 119.99);\n        assertEquals(119.99, productService.getProductPrice(\"A123\"));\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nclass ImageConfig {\n    private boolean centerCrop;\n    private int priority; \n    public ImageConfig() {\n    }\n    public ImageConfig centerCrop() {\n        this.centerCrop = true;\n        return this;\n    }\n    public ImageConfig priority(int priority) {\n        this.priority = priority;\n        return this;\n    }\n    public boolean isCenterCrop() {\n        return centerCrop;\n    }\n    public int getPriority() {\n        return priority;\n    }\n}\npublic class ImageLoader {\n    private static ImageConfig imageConfig;\n    private static final Lock lock = new ReentrantLock();\n    public static ImageConfig getImageConfig() {\n        if (imageConfig == null) {\n            lock.lock();\n            try {\n                if (imageConfig == null) {\n                    imageConfig = new ImageConfig()\n                            .centerCrop()\n                            .priority(1); \n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return imageConfig;\n    }\n    public static void main(String[] args) {\n        ImageConfig config = ImageLoader.getImageConfig();\n        System.out.println(\"CenterCrop: \" + config.isCenterCrop());\n        System.out.println(\"Priority: \" + config.getPriority());\n    }\n}", "content": "请编写一个Java方法，该方法用于创建并返回一个配置了图像加载参数的`ImageConfig`对象。如果该对象已经被创建，则方法应直接返回现有的对象，否则应创建一个新的对象，并设置以下参数：将图像裁剪为适应视图的中心，并设置加载优先级为普通。请确保该方法是线程安全的。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nclass ImageConfig {\n    private boolean centerCrop;\n    private int priority; \n    public ImageConfig() {\n    }\n    public ImageConfig centerCrop() {\n        return this;\n    }\n    public ImageConfig priority(int priority) {\n        return this;\n    }\n    public boolean isCenterCrop() {\n        return centerCrop;\n    }\n    public int getPriority() {\n        return priority;\n    }\n}\npublic class ImageLoader {\n    private static ImageConfig imageConfig;\n    private static final Lock lock = new ReentrantLock();\n    public static ImageConfig getImageConfig() {\n        return imageConfig;\n    }\n}\n```", "id": 1471, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nclass ImageLoaderTest {\n    @BeforeEach\n    void resetConfig() {\n        try {\n            java.lang.reflect.Field field = ImageLoader.class.getDeclaredField(\"imageConfig\");\n            field.setAccessible(true);\n            field.set(null, null);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n    @Test\n    void testGetImageConfigNotNull() {\n        ImageConfig config = ImageLoader.getImageConfig();\n        Assertions.assertNotNull(config);\n    }\n    @Test\n    void testGetImageConfigCenterCrop() {\n        ImageConfig config = ImageLoader.getImageConfig();\n        Assertions.assertTrue(config.isCenterCrop());\n    }\n    @Test\n    void testGetImageConfigPriority() {\n        ImageConfig config = ImageLoader.getImageConfig();\n        Assertions.assertEquals(1, config.getPriority());\n    }\n    @Test\n    void testGetImageConfigSingleton() {\n        ImageConfig config1 = ImageLoader.getImageConfig();\n        ImageConfig config2 = ImageLoader.getImageConfig();\n        Assertions.assertSame(config1, config2);\n    }\n    @Test\n    void testGetImageConfigThreadSafety() throws InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        for (int i = 0; i < 10; i++) {\n            executorService.execute(() -> {\n                ImageConfig config = ImageLoader.getImageConfig();\n                Assertions.assertTrue(config.isCenterCrop());\n                Assertions.assertEquals(1, config.getPriority());\n            });\n        }\n        executorService.shutdown();\n        while (!executorService.isTerminated()) {\n            Thread.sleep(100);\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass AppInstallAdMapper {\n    private String title;\n    public AppInstallAdMapper(String title) {\n        this.title = title;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\npublic class Advertisement {\n    private AppInstallAdMapper adMapper;\n    public Advertisement(AppInstallAdMapper adMapper) {\n        this.adMapper = adMapper;\n    }\n    public String getAdTitle() {\n        return adMapper.getTitle();\n    }\n}\nclass Main {\n    public static void main(String[] args) {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"安装最新游戏\");\n        Advertisement ad = new Advertisement(mapper);\n        checkAdTitle(ad.getAdTitle(), \"安装最新游戏\");\n    }\n    public static void checkAdTitle(String actualTitle, String expectedTitle) {\n        if (Objects.equals(actualTitle, expectedTitle)) {\n            System.out.println(\"广告标题检查通过: \" + actualTitle);\n        } else {\n            System.out.println(\"广告标题检查失败: 实际标题 - \" + actualTitle + \", 预期标题 - \" + expectedTitle);\n        }\n    }\n}", "content": "请编写一个Java程序，其中包含一个名为`Advertisement`的类，该类用于管理应用安装广告的信息。该类应该有一个私有成员变量`adMapper`，它是`AppInstallAdMapper`类的实例。`AppInstallAdMapper`类有一个方法`getTitle()`，用于获取广告的标题。在`Advertisement`类中，实现一个公共方法`getAdTitle()`，该方法调用`adMapper`的`getTitle()`方法并返回广告标题。\n\n请确保你的代码包含所有必要的导入语句，并提供一个`checkAdTitle`函数来验证`getAdTitle`方法的正确性。给定的数据点是广告标题为\"安装最新游戏\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass AppInstallAdMapper {\n    private String title;\n    public AppInstallAdMapper(String title) {\n    }\n    public String getTitle() {\n    }\n}\npublic class Advertisement {\n    private AppInstallAdMapper adMapper;\n    public Advertisement(AppInstallAdMapper adMapper) {\n    }\n    public String getAdTitle() {\n    }\n}\n```", "id": 1472, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nclass AppInstallAdMapperTest {\n    @Test\n    void testGetTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"测试标题1\");\n        assertEquals(\"测试标题1\", mapper.getTitle());\n    }\n}\nclass AdvertisementTest {\n    @Test\n    void testGetAdTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"广告标题1\");\n        Advertisement ad = new Advertisement(mapper);\n        assertEquals(\"广告标题1\", ad.getAdTitle());\n    }\n    @Test\n    void testGetAdTitleWithDifferentTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"广告标题2\");\n        Advertisement ad = new Advertisement(mapper);\n        assertEquals(\"广告标题2\", ad.getAdTitle());\n    }\n    @Test\n    void testGetAdTitleWithEmptyTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"\");\n        Advertisement ad = new Advertisement(mapper);\n        assertEquals(\"\", ad.getAdTitle());\n    }\n}"}}
{"canonical_solution": "import java.lang.reflect.Field;\nclass Employee {\n    private double salary;\n    public Employee(double salary) {\n        this.salary = salary;\n    }\n    public double getSalary() {\n        return salary;\n    }\n}\npublic class SalaryModifier {\n    public static void modifySalary(Employee employee, double newSalary) {\n        try {\n            Class<?> employeeClass = employee.getClass();\n            Field salaryField = employeeClass.getDeclaredField(\"salary\");\n            salaryField.setAccessible(true);\n            salaryField.set(employee, newSalary);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void check() {\n        Employee employee = new Employee(3000.0);\n        System.out.println(\"原始薪资: \" + employee.getSalary());\n        modifySalary(employee, 5000.0);\n        System.out.println(\"修改后薪资: \" + employee.getSalary());\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "请设计一个Java程序，用于演示如何通过反射机制修改一个类的私有成员变量的值。在这个例子中，我们有一个名为`Employee`的类，它有一个私有成员变量`salary`。请编写一个方法，该方法能够修改任意`Employee`对象的`salary`字段的值。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.reflect.Field;\nclass Employee {\n    private double salary;\n    public Employee(double salary) {\n        \n    }\n    public double getSalary() {\n        \n    }\n}\npublic class SalaryModifier {\n    public static void modifySalary(Employee employee, double newSalary) {\n        \n    }\n    public static void check() {\n        \n    }\n}\n```", "id": 1473, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SalaryModifierTest {\n    @Test\n    public void testModifySalary() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 5000.0);\n        assertEquals(5000.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryToZero() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 0.0);\n        assertEquals(0.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryToNegative() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, -1000.0);\n        assertEquals(-1000.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryTwice() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 5000.0);\n        assertEquals(5000.0, employee.getSalary(), 0.001);\n        SalaryModifier.modifySalary(employee, 8000.0);\n        assertEquals(8000.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryWithLargeValue() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 1_000_000.0);\n        assertEquals(1_000_000.0, employee.getSalary(), 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class StudentScoreFinder {\n    public String findScoreById(Map<String, Integer> scores, String studentId) {\n        if (scores.containsKey(studentId)) {\n            int score = scores.get(studentId);\n            return String.format(\"{\\\"id\\\": \\\"%s\\\", \\\"score\\\": \\\"%d\\\"}\", studentId, score);\n        } else {\n            return \"{\\\"error\\\": \\\"Student not found\\\"}\";\n        }\n    }\n    public static void main(String[] args) {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        scores.put(\"1002\", 85);\n        scores.put(\"1003\", 95);\n        System.out.println(finder.findScoreById(scores, \"1001\")); \n        System.out.println(finder.findScoreById(scores, \"1004\")); \n    }\n}", "content": "请编写一个Java方法，该方法接收两个参数：一个是学生的成绩列表，另一个是要查询的学生ID。该方法的目的是找到特定学生的成绩并以JSON格式返回。如果找到该学生的成绩，返回的JSON应包含学生的ID和成绩；如果没有找到，返回的JSON应说明未找到该学生的成绩。请注意，所有的键和值都应该用双引号括起来。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentScoreFinder {\n    public String findScoreById(Map<String, Integer> scores, String studentId) {\n    }\n}\n```", "id": 1474, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentScoreFinderTest {\n    @Test\n    public void testFindScoreById_studentExists() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        String result = finder.findScoreById(scores, \"1001\");\n        assertEquals(\"{\\\"id\\\": \\\"1001\\\", \\\"score\\\": \\\"90\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_studentNotFound() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        String result = finder.findScoreById(scores, \"1004\");\n        assertEquals(\"{\\\"error\\\": \\\"Student not found\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_anotherStudentExists() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        scores.put(\"1002\", 85);\n        String result = finder.findScoreById(scores, \"1002\");\n        assertEquals(\"{\\\"id\\\": \\\"1002\\\", \\\"score\\\": \\\"85\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_emptyMap() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        String result = finder.findScoreById(scores, \"1001\");\n        assertEquals(\"{\\\"error\\\": \\\"Student not found\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_multipleStudents() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        scores.put(\"1002\", 85);\n        scores.put(\"1003\", 95);\n        String result1 = finder.findScoreById(scores, \"1001\");\n        String result2 = finder.findScoreById(scores, \"1002\");\n        String result3 = finder.findScoreById(scores, \"1003\");\n        assertEquals(\"{\\\"id\\\": \\\"1001\\\", \\\"score\\\": \\\"90\\\"}\", result1);\n        assertEquals(\"{\\\"id\\\": \\\"1002\\\", \\\"score\\\": \\\"85\\\"}\", result2);\n        assertEquals(\"{\\\"id\\\": \\\"1003\\\", \\\"score\\\": \\\"95\\\"}\", result3);\n    }\n}"}}
{"canonical_solution": "import java.io.*;\npublic class UserInfoProcessor {\n    public void processUsername(String username) {\n        switch (username != null ? 1 : 0) {\n            case 1:\n                System.out.println(username.length());\n                break;\n            case 0:\n                System.out.println(\"用户名为空\");\n                break;\n            default:\n                System.out.println(\"未知情况\");\n                break;\n        }\n    }\n    public static void main(String[] args) {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        processor.processUsername(null); \n        processor.processUsername(\"Alice\"); \n    }\n}", "content": "请编写一个Java程序，该程序包含一个名为`UserInfoProcessor`的类和一个名为`processUsername`的方法。该方法应该接受一个可能为`null`的字符串作为用户名，并根据用户名是否为`null`来执行不同的操作。如果用户名不为`null`，则输出用户名的长度；如果用户名为`null`，则输出提示信息“用户名为空”。请确保代码能够处理潜在的空指针异常，并且在方法中使用`switch`语句来模拟不同的情况。\n\n```java\nimport java.io.*;\n\npublic class UserInfoProcessor {\n    \n    public void processUsername(String username) {\n        // 方法实现\n    }\n}\n```\n\n请确保你的程序能够正确地执行上述功能。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.*;\npublic class UserInfoProcessor {\n    public void processUsername(String username) {\n    }\n}\n```", "id": 1475, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.io.*;\npublic class UserInfoProcessorTest {\n    @Test\n    public void testProcessUsernameWithNull() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(null);\n        assertEquals(\"用户名为空\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithValidUsername() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"Alice\");\n        assertEquals(\"5\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithEmptyString() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"\");\n        assertEquals(\"0\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithSpecialCharacters() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"!@#\");\n        assertEquals(\"3\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithWhitespace() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"   \");\n        assertEquals(\"3\\n\", outContent.toString());\n    }\n}"}}
{"canonical_solution": "import java.text.DecimalFormat;\npublic class TemperatureConverter {\n    public double convertToFahrenheit(double celsius) {\n        return celsius * 9 / 5 + 32;\n    }\n    public static void checkConversion() {\n        TemperatureConverter converter = new TemperatureConverter();\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        double[][] testData = {{0, 32}, {-40, -40}, {100, 212}};\n        for (double[] testPair : testData) {\n            double celsius = testPair[0];\n            double expectedFahrenheit = testPair[1];\n            double actualFahrenheit = converter.convertToFahrenheit(celsius);\n            assert df.format(actualFahrenheit).equals(df.format(expectedFahrenheit)) : \n                \"测试失败: 输入摄氏温度 \" + celsius + \" 应该转换为华氏温度 \" + expectedFahrenheit + \", 但得到 \" + actualFahrenheit;\n        }\n        System.out.println(\"所有测试通过！\");\n    }\n    public static void main(String[] args) {\n        checkConversion();\n    }\n}", "content": "请编写一个Java程序，实现一个名为`TemperatureConverter`的类，该类中包含一个方法`convertToFahrenheit(double celsius)`，该方法接收一个摄氏温度值作为参数，并返回其对应的华氏温度值。华氏温度应该按照以下公式计算：华氏温度 = 摄氏温度 * 9/5 + 32。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.text.DecimalFormat;\npublic class TemperatureConverter {\n    public double convertToFahrenheit(double celsius) {\n    }\n    public static void checkConversion() {\n    }\n}\n```", "id": 1476, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class TemperatureConverterTest {\n    @Test\n    public void testConvertToFahrenheit() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(32.0, converter.convertToFahrenheit(0), 0.01);\n        assertEquals(-40.0, converter.convertToFahrenheit(-40), 0.01);\n        assertEquals(212.0, converter.convertToFahrenheit(100), 0.01);\n    }\n    @Test\n    public void testConvertToFahrenheitEdgeCase1() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(98.6, converter.convertToFahrenheit(37), 0.01);\n    }\n    @Test\n    public void testConvertToFahrenheitEdgeCase2() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(-459.67, converter.convertToFahrenheit(-273.15), 0.01);\n    }\n    @Test\n    public void testConvertToFahrenheitEdgeCase3() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(134.06, converter.convertToFahrenheit(56.7), 0.01);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class LoginChecker {\n    public static boolean checkLogin(String username, String password) {\n        String queryResult = simulateDatabaseQuery(username, password);\n        return Objects.nonNull(queryResult);\n    }\n    private static String simulateDatabaseQuery(String username, String password) {\n        if (\"admin\".equals(username) && \"123456\".equals(password)) {\n            return \"查询结果\";\n        } else {\n            return null;\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(checkLogin(\"admin\", \"123456\")); \n        System.out.println(checkLogin(\"user\", \"password\")); \n    }\n}", "content": "请设计一个Java方法，用于检查用户是否可以成功登录。在这个场景中，我们假设有一个数据库表`users`，其中包含用户名（`username`）和密码（`password`）字段。你需要编写一个方法`checkLogin`，它接收两个字符串参数：`username`和`password`。这个方法应该返回一个布尔值，表示给定的用户名和密码是否与数据库中的记录匹配。为了简化问题，我们不会真的连接数据库，而是模拟数据库查询的过程。如果用户名和密码组合正确，假设查询将返回一个非空字符串；如果不正确，则返回`null`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class LoginChecker {\n    public static boolean checkLogin(String username, String password) {\n    }\n    private static String simulateDatabaseQuery(String username, String password) {\n    }\n}\n```", "id": 1477, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class LoginCheckerTest {\n    @Test\n    public void testValidLogin() {\n        assertTrue(LoginChecker.checkLogin(\"admin\", \"123456\"));\n    }\n    @Test\n    public void testInvalidUsername() {\n        assertFalse(LoginChecker.checkLogin(\"invalidUser\", \"123456\"));\n    }\n    @Test\n    public void testInvalidPassword() {\n        assertFalse(LoginChecker.checkLogin(\"admin\", \"wrongPassword\"));\n    }\n    @Test\n    public void testInvalidUsernameAndPassword() {\n        assertFalse(LoginChecker.checkLogin(\"invalidUser\", \"wrongPassword\"));\n    }\n    @Test\n    public void testNullInputs() {\n        assertFalse(LoginChecker.checkLogin(null, null));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class Validator {\n    public static <T> T ensureNotNull(T object, String errorMessageTemplate, Object... errorMessageArgs) {\n        if (object == null) {\n            throw new IllegalArgumentException(String.format(errorMessageTemplate, errorMessageArgs));\n        }\n        return object;\n    }\n    public static void main(String[] args) {\n        try {\n            ensureNotNull(null, \"传入的对象不能为null, 参数：%s\", \"测试参数\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            String result = ensureNotNull(\"非空字符串\", \"传入的对象不能为null\");\n            System.out.println(\"检查通过，返回值：\" + result);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于验证传入的对象是否为非空。如果对象为空，则抛出一个带有自定义错误信息的`IllegalArgumentException`异常。该方法应该能够接受任意类型的对象，并允许用户自定义错误信息模板及其参数。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class Validator {\n    public static <T> T ensureNotNull(T object, String errorMessageTemplate, Object... errorMessageArgs) {\n    }\n}\n```", "id": 1478, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class ValidatorTest {\n    @Test\n    public void testEnsureNotNull_withNullObject_shouldThrowException() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Validator.ensureNotNull(null, \"传入的对象不能为null, 参数：%s\", \"测试参数\");\n        });\n    }\n    @Test\n    public void testEnsureNotNull_withValidObject_shouldReturnObject() {\n        String input = \"非空字符串\";\n        String result = Validator.ensureNotNull(input, \"传入的对象不能为null\");\n        assertEquals(input, result);\n    }\n    @Test\n    public void testEnsureNotNull_withNullObjectAndNoArgs_shouldThrowException() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Validator.ensureNotNull(null, \"传入的对象不能为null\");\n        });\n    }\n    @Test\n    public void testEnsureNotNull_withEmptyErrorMessage_shouldReturnObject() {\n        String input = \"任意字符串\";\n        String result = Validator.ensureNotNull(input, \"\");\n        assertEquals(input, result);\n    }\n    @Test\n    public void testEnsureNotNull_withValidObjectAndArguments_shouldReturnObject() {\n        String input = \"有效对象\";\n        String result = Validator.ensureNotNull(input, \"传入的对象不能为null, 参数：%s\", \"任意参数\");\n        assertEquals(input, result);\n    }\n}"}}
{"canonical_solution": "import java.math.BigDecimal;\nclass UserAddress {\n    private String floor;\n    private String fullAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public void setFloor(String floor) {\n        this.floor = floor;\n    }\n    public void setFullAddress(String fullAddress) {\n        this.fullAddress = fullAddress;\n    }\n    public void setInstruction(String instruction) {\n        this.instruction = instruction;\n    }\n    public void setTag(String tag) {\n        this.tag = tag;\n    }\n    public void setLatitude(BigDecimal latitude) {\n        this.latitude = latitude;\n    }\n    public void setLongitude(BigDecimal longitude) {\n        this.longitude = longitude;\n    }\n    public String getFloor() {\n        return floor;\n    }\n    public String getFullAddress() {\n        return fullAddress;\n    }\n    public String getInstruction() {\n        return instruction;\n    }\n    public String getTag() {\n        return tag;\n    }\n    public BigDecimal getLatitude() {\n        return latitude;\n    }\n    public BigDecimal getLongitude() {\n        return longitude;\n    }\n}\nclass UserAddressUpdateInfo {\n    private String floor;\n    private String completeAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public UserAddressUpdateInfo(String floor, String completeAddress, String instruction, String tag, BigDecimal latitude, BigDecimal longitude) {\n        this.floor = floor;\n        this.completeAddress = completeAddress;\n        this.instruction = instruction;\n        this.tag = tag;\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n    public String getFloor() {\n        return floor;\n    }\n    public String getCompleteAddress() {\n        return completeAddress;\n    }\n    public String getInstruction() {\n        return instruction;\n    }\n    public String getTag() {\n        return tag;\n    }\n    public BigDecimal getLatitude() {\n        return latitude;\n    }\n    public BigDecimal getLongitude() {\n        return longitude;\n    }\n}\npublic class AddressUpdater {\n    public static UserAddress updateAddress(UserAddressUpdateInfo updateInfo, UserAddress currentAddress) {\n        currentAddress.setFloor(updateInfo.getFloor());\n        currentAddress.setFullAddress(updateInfo.getCompleteAddress());\n        currentAddress.setInstruction(updateInfo.getInstruction());\n        currentAddress.setTag(updateInfo.getTag());\n        currentAddress.setLatitude(updateInfo.getLatitude());\n        currentAddress.setLongitude(updateInfo.getLongitude());\n        return currentAddress;\n    }\n    public static void main(String[] args) {\n        UserAddress currentAddress = new UserAddress();\n        UserAddressUpdateInfo updateInfo = new UserAddressUpdateInfo(\"12\", \"1234 Main St, Anytown\", \"Leave at door\", \"Home\", new BigDecimal(\"40.712776\"), new BigDecimal(\"-74.005974\"));\n        UserAddress updatedAddress = updateAddress(updateInfo, currentAddress);\n        System.out.println(\"Floor: \" + updatedAddress.getFloor());\n        System.out.println(\"Full Address: \" + updatedAddress.getFullAddress());\n        System.out.println(\"Instruction: \" + updatedAddress.getInstruction());\n        System.out.println(\"Tag: \" + updatedAddress.getTag());\n        System.out.println(\"Latitude: \" + updatedAddress.getLatitude());\n        System.out.println(\"Longitude: \" + updatedAddress.getLongitude());\n    }\n}", "content": "请编写一个Java方法，用于将一个用户的地址更新信息应用到用户的现有地址记录上。这个方法应该接受两个参数：一个是包含更新信息的`UserAddressUpdateInfo`对象，另一个是用户当前的`UserAddress`对象。更新信息中可能包含楼层、完整地址、备注、标签、纬度和经度。请确保你的方法能够更新所有提供的信息，并返回更新后的`UserAddress`对象。\n\n注意：不需要处理送货时间偏好字段。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.math.BigDecimal;\nclass UserAddress {\n    private String floor;\n    private String fullAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public void setFloor(String floor) {\n    }\n    public void setFullAddress(String fullAddress) {\n    }\n    public void setInstruction(String instruction) {\n    }\n    public void setTag(String tag) {\n    }\n    public void setLatitude(BigDecimal latitude) {\n    }\n    public void setLongitude(BigDecimal longitude) {\n    }\n    public String getFloor() {\n        return null;\n    }\n    public String getFullAddress() {\n        return null;\n    }\n    public String getInstruction() {\n        return null;\n    }\n    public String getTag() {\n        return null;\n    }\n    public BigDecimal getLatitude() {\n        return null;\n    }\n    public BigDecimal getLongitude() {\n        return null;\n    }\n}\nclass UserAddressUpdateInfo {\n    private String floor;\n    private String completeAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public UserAddressUpdateInfo(String floor, String completeAddress, String instruction, String tag, BigDecimal latitude, BigDecimal longitude) {\n    }\n    public String getFloor() {\n        return null;\n    }\n    public String getCompleteAddress() {\n        return null;\n    }\n    public String getInstruction() {\n        return null;\n    }\n    public String getTag() {\n        return null;\n    }\n    public BigDecimal getLatitude() {\n        return null;\n    }\n    public BigDecimal getLongitude() {\n        return null;\n    }\n}\npublic class AddressUpdater {\n    public static UserAddress updateAddress(UserAddressUpdateInfo updateInfo, UserAddress currentAddress) {\n        return null;\n    }\n}\n```", "id": 1479, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.math.BigDecimal;\nclass UserAddressTest {\n    private UserAddress userAddress;\n    @BeforeEach\n    void setUp() {\n        userAddress = new UserAddress();\n    }\n    @Test\n    void testSetAndGetFloor() {\n        userAddress.setFloor(\"10\");\n        assertEquals(\"10\", userAddress.getFloor());\n    }\n    @Test\n    void testSetAndGetFullAddress() {\n        userAddress.setFullAddress(\"1234 Main St, Anytown\");\n        assertEquals(\"1234 Main St, Anytown\", userAddress.getFullAddress());\n    }\n    @Test\n    void testSetAndGetInstruction() {\n        userAddress.setInstruction(\"Leave at door\");\n        assertEquals(\"Leave at door\", userAddress.getInstruction());\n    }\n    @Test\n    void testSetAndGetTag() {\n        userAddress.setTag(\"Home\");\n        assertEquals(\"Home\", userAddress.getTag());\n    }\n    @Test\n    void testSetAndGetLatitude() {\n        BigDecimal latitude = new BigDecimal(\"40.712776\");\n        userAddress.setLatitude(latitude);\n        assertEquals(latitude, userAddress.getLatitude());\n    }\n    @Test\n    void testSetAndGetLongitude() {\n        BigDecimal longitude = new BigDecimal(\"-74.005974\");\n        userAddress.setLongitude(longitude);\n        assertEquals(longitude, userAddress.getLongitude());\n    }\n}\nclass UserAddressUpdateInfoTest {\n    private UserAddressUpdateInfo updateInfo;\n    @BeforeEach\n    void setUp() {\n        updateInfo = new UserAddressUpdateInfo(\"12\", \"1234 Main St, Anytown\", \"Leave at door\", \"Home\", new BigDecimal(\"40.712776\"), new BigDecimal(\"-74.005974\"));\n    }\n    @Test\n    void testGetFloor() {\n        assertEquals(\"12\", updateInfo.getFloor());\n    }\n    @Test\n    void testGetCompleteAddress() {\n        assertEquals(\"1234 Main St, Anytown\", updateInfo.getCompleteAddress());\n    }\n    @Test\n    void testGetInstruction() {\n        assertEquals(\"Leave at door\", updateInfo.getInstruction());\n    }\n    @Test\n    void testGetTag() {\n        assertEquals(\"Home\", updateInfo.getTag());\n    }\n    @Test\n    void testGetLatitude() {\n        assertEquals(new BigDecimal(\"40.712776\"), updateInfo.getLatitude());\n    }\n    @Test\n    void testGetLongitude() {\n        assertEquals(new BigDecimal(\"-74.005974\"), updateInfo.getLongitude());\n    }\n}\nclass AddressUpdaterTest {\n    @Test\n    void testUpdateAddress() {\n        UserAddress currentAddress = new UserAddress();\n        UserAddressUpdateInfo updateInfo = new UserAddressUpdateInfo(\"12\", \"1234 Main St, Anytown\", \"Leave at door\", \"Home\", new BigDecimal(\"40.712776\"), new BigDecimal(\"-74.005974\"));\n        UserAddress updatedAddress = AddressUpdater.updateAddress(updateInfo, currentAddress);\n        assertEquals(\"12\", updatedAddress.getFloor());\n        assertEquals(\"1234 Main St, Anytown\", updatedAddress.getFullAddress());\n        assertEquals(\"Leave at door\", updatedAddress.getInstruction());\n        assertEquals(\"Home\", updatedAddress.getTag());\n        assertEquals(new BigDecimal(\"40.712776\"), updatedAddress.getLatitude());\n        assertEquals(new BigDecimal(\"-74.005974\"), updatedAddress.getLongitude());\n    }\n}"}}
{"canonical_solution": "public class CurrencyConverter {\n    public static double convertUsdToEur(double usdAmount) {\n        final double exchangeRate = 0.85; \n        return usdAmount * exchangeRate;\n    }\n    public static void main(String[] args) {\n        double usdAmount1 = 100; \n        double usdAmount2 = 50;  \n        System.out.println(\"100美元等于\" + convertUsdToEur(usdAmount1) + \"欧元\");\n        System.out.println(\"50美元等于\" + convertUsdToEur(usdAmount2) + \"欧元\");\n    }\n}", "content": "请编写一个Java程序，实现一个简单的货币转换器。该转换器应该能够将美元转换成欧元。假设1美元等于0.85欧元。请定义一个名为`CurrencyConverter`的类，并在其中实现一个名为`convertUsdToEur`的方法，该方法接收一个表示美元金额的`double`类型参数，并返回转换后的欧元金额。\n\n请遵循以下指导原则：\n- 使用清晰的变量命名。\n- 确保代码自包含且清晰。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\npublic class CurrencyConverter {\n    public static double convertUsdToEur(double usdAmount) {\n    }\n}\n```", "id": 1480, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CurrencyConverterTest {\n    @Test\n    public void testConvertUsdToEur_withPositiveAmount() {\n        double usdAmount = 100;\n        double expectedEurAmount = 85; \n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount));\n    }\n    @Test\n    public void testConvertUsdToEur_withZeroAmount() {\n        double usdAmount = 0;\n        double expectedEurAmount = 0;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount));\n    }\n    @Test\n    public void testConvertUsdToEur_withNegativeAmount() {\n        double usdAmount = -50;\n        double expectedEurAmount = -42.5;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount));\n    }\n    @Test\n    public void testConvertUsdToEur_withFractionalAmount() {\n        double usdAmount = 123.45;\n        double expectedEurAmount = 104.9325;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount), 0.0001);\n    }\n    @Test\n    public void testConvertUsdToEur_withSmallAmount() {\n        double usdAmount = 0.01;\n        double expectedEurAmount = 0.0085;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount), 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books = new HashMap<>();\n    public BookManager() {\n        books.put(\"978-3-16-148410-0\", \"Java编程思想\");\n        books.put(\"978-4-16-148410-1\", \"Effective Java\");\n        books.put(\"978-5-16-148410-2\", \"深入理解Java虚拟机\");\n    }\n    public boolean removeBookByIsbn(String isbn) {\n        if (books.containsKey(isbn)) {\n            books.remove(isbn); \n            return true;\n        } else {\n            return false; \n        }\n    }\n    public static void checkFunction() {\n        BookManager manager = new BookManager();\n        System.out.println(\"删除存在的图书（预期返回true）：\" + manager.removeBookByIsbn(\"978-3-16-148410-0\"));\n        System.out.println(\"删除不存在的图书（预期返回false）：\" + manager.removeBookByIsbn(\"978-0-00-000000-0\"));\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统中的图书删除功能。该系统应该允许用户通过输入图书的ISBN号来删除图书。如果图书存在并且成功删除，则返回`true`；如果图书不存在，则返回`false`。请确保你的代码是自包含的，并且所有使用到的包都在代码片段的开头导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books = new HashMap<>();\n    public BookManager() {\n    }\n    public boolean removeBookByIsbn(String isbn) {\n    }\n}\n```", "id": 1481, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    @Test\n    public void testRemoveBookByIsbn_BookExists() {\n        BookManager manager = new BookManager();\n        assertTrue(manager.removeBookByIsbn(\"978-3-16-148410-0\"));\n    }\n    @Test\n    public void testRemoveBookByIsbn_BookDoesNotExist() {\n        BookManager manager = new BookManager();\n        assertFalse(manager.removeBookByIsbn(\"978-0-00-000000-0\"));\n    }\n    @Test\n    public void testRemoveBookByIsbn_RemoveTwice() {\n        BookManager manager = new BookManager();\n        manager.removeBookByIsbn(\"978-3-16-148410-0\");\n        assertFalse(manager.removeBookByIsbn(\"978-3-16-148410-0\"));\n    }\n    @Test\n    public void testRemoveBookByIsbn_NullIsbn() {\n        BookManager manager = new BookManager();\n        assertFalse(manager.removeBookByIsbn(null));\n    }\n    @Test\n    public void testRemoveBookByIsbn_EmptyIsbn() {\n        BookManager manager = new BookManager();\n        assertFalse(manager.removeBookByIsbn(\"\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class BookSearchSystem {\n    private List<Book> booksDatabase = new ArrayList<>();\n    public BookSearchSystem() {\n        booksDatabase.add(new Book(\"Java编程思想\", \"科技\", \"Bruce Eckel\"));\n        booksDatabase.add(new Book(\"三体\", \"小说\", \"刘慈欣\"));\n        booksDatabase.add(new Book(\"Effective Java\", \"科技\", \"Joshua Bloch\"));\n        booksDatabase.add(new Book(\"教育心理学\", \"教育\", \"某教育学者\"));\n    }\n    public List<Book> searchBooks(String type, String keyword, int page, int limit) {\n        return booksDatabase.stream()\n                .filter(book -> book.getType().equals(type) && (book.getName().contains(keyword) || book.getAuthor().contains(keyword)))\n                .skip((long) (page - 1) * limit)\n                .limit(limit)\n                .collect(Collectors.toList());\n    }\n    public void check() {\n        System.out.println(\"搜索结果1: \" + searchBooks(\"科技\", \"Java\", 1, 2));\n        System.out.println(\"搜索结果2: \" + searchBooks(\"小说\", \"三体\", 1, 1));\n    }\n    public static void main(String[] args) {\n        new BookSearchSystem().check();\n    }\n    static class Book {\n        private String name;\n        private String type;\n        private String author;\n        public Book(String name, String type, String author) {\n            this.name = name;\n            this.type = type;\n            this.author = author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"name='\" + name + '\\'' +\n                    \", type='\" + type + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n        public String getName() {\n            return name;\n        }\n        public String getType() {\n            return type;\n        }\n        public String getAuthor() {\n            return author;\n        }\n    }\n}", "content": "请编写关于图书搜索功能要求的描述课题：\n\n实现一个简单的图书管理系统中的图书搜索功能。该功能需要根据图书的类型和关键字进行搜索，并支持分页显示结果。具体要求如下：\n\n- 能够根据图书的类别（例如：小说、科技、教育等）和关键字（如书名或作者名的一部分）对图书进行搜索。\n- 搜索结果应支持分页显示，即每页显示固定数量的图书信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class BookSearchSystem {\n    private List<Book> booksDatabase = new ArrayList<>();\n    public BookSearchSystem() {\n    }\n    public List<Book> searchBooks(String type, String keyword, int page, int limit) {\n    }\n    public void check() {\n    }\n    static class Book {\n        private String name;\n        private String type;\n        private String author;\n        public Book(String name, String type, String author) {\n        }\n        @Override\n        public String toString() {\n        }\n        public String getName() {\n        }\n        public String getType() {\n        }\n        public String getAuthor() {\n        }\n    }\n}\n```", "id": 1482, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.util.List;\npublic class BookSearchSystemTest {\n    @Test\n    public void testSearchBooksTechnologyByJavaKeyword() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"科技\", \"Java\", 1, 2);\n        assertEquals(2, result.size());\n        assertTrue(result.stream().allMatch(book -> book.getType().equals(\"科技\")));\n    }\n    @Test\n    public void testSearchBooksNovelByThreeBodyKeyword() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"小说\", \"三体\", 1, 1);\n        assertEquals(1, result.size());\n        assertEquals(\"三体\", result.get(0).getName());\n    }\n    @Test\n    public void testSearchBooksEducationByKeyword() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"教育\", \"某教育学者\", 1, 1);\n        assertEquals(1, result.size());\n        assertEquals(\"教育心理学\", result.get(0).getName());\n    }\n    @Test\n    public void testSearchExceedingLimit() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"科技\", \"Java\", 1, 3);\n        assertEquals(2, result.size());\n    }\n    @Test\n    public void testSearchWithPagination() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"科技\", \"Java\", 2, 1);\n        assertEquals(1, result.size());\n        assertEquals(\"Effective Java\", result.get(0).getName());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class DiscountCategoryDecider {\n    public static String determineDiscountCategory(int age, boolean isMember) {\n        if (isMember) {\n            return age > 60 ? \"高级折扣\" : \"普通折扣\";\n        } else {\n            return \"无折扣\";\n        }\n    }\n    public static void main(String[] args) {\n        Map<String, Object> testCases = new HashMap<>();\n        testCases.put(\"高级折扣\", new Object[]{65, true});\n        testCases.put(\"普通折扣\", new Object[]{45, true});\n        testCases.put(\"无折扣\", new Object[]{70, false});\n        testCases.forEach((expected, params) -> {\n            Object[] arr = (Object[]) params;\n            int age = (int) arr[0];\n            boolean isMember = (boolean) arr[1];\n            String result = determineDiscountCategory(age, isMember);\n            System.out.println(\"预期结果: \" + expected + \", 实际结果: \" + result + \"。测试\" + (expected.equals(result) ? \"通过\" : \"未通过\"));\n        });\n    }\n}", "content": "请根据用户的年龄和会员状态决定他们的折扣类别。如果用户是会员并且年龄超过60岁，则他们应该被归类到高级折扣类别。否则，如果他们是会员但年龄不超过60岁，则归为普通折扣类别。非会员不享受任何折扣。请确保能够根据提供的用户信息返回正确的折扣类别。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DiscountCategoryDecider {\n    public static String determineDiscountCategory(int age, boolean isMember) {\n    }\n}\n```", "id": 1483, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class DiscountCategoryDeciderTest {\n    @Test\n    public void testSeniorMemberDiscount() {\n        assertEquals(\"高级折扣\", DiscountCategoryDecider.determineDiscountCategory(65, true));\n    }\n    @Test\n    public void testRegularMemberDiscount() {\n        assertEquals(\"普通折扣\", DiscountCategoryDecider.determineDiscountCategory(45, true));\n    }\n    @Test\n    public void testNoMemberSeniorDiscount() {\n        assertEquals(\"无折扣\", DiscountCategoryDecider.determineDiscountCategory(70, false));\n    }\n    @Test\n    public void testNonSeniorMemberDiscount() {\n        assertEquals(\"普通折扣\", DiscountCategoryDecider.determineDiscountCategory(30, true));\n    }\n    @Test\n    public void testNonSeniorNonMemberDiscount() {\n        assertEquals(\"无折扣\", DiscountCategoryDecider.determineDiscountCategory(30, false));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Objects;\nclass BookEntry {\n    String title;\n    String author;\n    public BookEntry(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof BookEntry)) return false;\n        BookEntry bookEntry = (BookEntry) o;\n        return Objects.equals(title, bookEntry.title) &&\n                Objects.equals(author, bookEntry.author);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(title, author);\n    }\n}\npublic class BookManager {\n    ArrayList<BookEntry> bookEntries = new ArrayList<>();\n    public void manageBooks(ArrayList<BookEntry> newEntries, boolean update) {\n        if (update) {\n            bookEntries.clear();\n            bookEntries.addAll(newEntries);\n        } else {\n            for (BookEntry entry : newEntries) {\n                if (!bookEntries.contains(entry)) {\n                    bookEntries.add(entry);\n                }\n            }\n        }\n    }\n    public static void checkFunction() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        System.out.println(\"After first addition: \" + manager.bookEntries.size()); \n        ArrayList<BookEntry> newEntries = new ArrayList<>();\n        newEntries.add(new BookEntry(\"Book1\", \"Author1\")); \n        newEntries.add(new BookEntry(\"Book3\", \"Author3\"));\n        manager.manageBooks(newEntries, false);\n        System.out.println(\"After second addition without update: \" + manager.bookEntries.size()); \n        manager.manageBooks(newEntries, true);\n        System.out.println(\"After update: \" + manager.bookEntries.size()); \n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统。在这个系统中，你需要管理一系列的图书条目。每个图书条目包含书名和作者名。你需要实现一个方法，该方法接收一个新的图书条目列表和一个布尔值。如果布尔值为真，则更新现有条目；如果为假，则只添加不存在的条目。确保你的实现能够避免重复添加相同的条目。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.Objects;\nclass BookEntry {\n    String title;\n    String author;\n    public BookEntry(String title, String author) {\n    }\n    @Override\n    public boolean equals(Object o) {\n    }\n    @Override\n    public int hashCode() {\n    }\n}\npublic class BookManager {\n    ArrayList<BookEntry> bookEntries = new ArrayList<>();\n    public void manageBooks(ArrayList<BookEntry> newEntries, boolean update) {\n    }\n}\n```", "id": 1484, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nclass BookEntryTest {\n    @Test\n    void testEqualsAndHashCode() {\n        BookEntry entry1 = new BookEntry(\"Title1\", \"Author1\");\n        BookEntry entry2 = new BookEntry(\"Title1\", \"Author1\");\n        BookEntry entry3 = new BookEntry(\"Title2\", \"Author2\");\n        assertEquals(entry1, entry2);\n        assertNotEquals(entry1, entry3);\n        assertEquals(entry1.hashCode(), entry2.hashCode());\n        assertNotEquals(entry1.hashCode(), entry3.hashCode());\n    }\n}\nclass BookManagerTest {\n    @Test\n    void testManageBooksAddWithoutUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        assertEquals(2, manager.bookEntries.size());\n    }\n    @Test\n    void testManageBooksAddWithDuplicatesWithoutUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        ArrayList<BookEntry> newEntries = new ArrayList<>();\n        newEntries.add(new BookEntry(\"Book1\", \"Author1\"));\n        newEntries.add(new BookEntry(\"Book3\", \"Author3\"));\n        manager.manageBooks(newEntries, false);\n        assertEquals(3, manager.bookEntries.size());\n    }\n    @Test\n    void testManageBooksWithUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        ArrayList<BookEntry> newEntries = new ArrayList<>();\n        newEntries.add(new BookEntry(\"Book1\", \"Author1\"));\n        newEntries.add(new BookEntry(\"Book3\", \"Author3\"));\n        manager.manageBooks(newEntries, true);\n        assertEquals(2, manager.bookEntries.size());\n        assertEquals(new BookEntry(\"Book1\", \"Author1\"), manager.bookEntries.get(0));\n        assertEquals(new BookEntry(\"Book3\", \"Author3\"), manager.bookEntries.get(1));\n    }\n    @Test\n    void testEmptyManageBooksWithUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        manager.manageBooks(entries, true);\n        assertEquals(0, manager.bookEntries.size());\n    }\n    @Test\n    void testInitialEmptyManager() {\n        BookManager manager = new BookManager();\n        assertEquals(0, manager.bookEntries.size());\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nclass VoteButton {\n    String text; \n    String callbackData; \n    public VoteButton(String text, String callbackData) {\n        this.text = text;\n        this.callbackData = callbackData;\n    }\n    public void setCallbackData(String callbackData) {\n        this.callbackData = callbackData;\n    }\n    public String getText() {\n        return text;\n    }\n    public String getCallbackData() {\n        return callbackData;\n    }\n}\nclass VoteSystem {\n    public List<List<VoteButton>> generateVoteButtons() {\n        VoteButton agree = new VoteButton(\"赞成\", \"voteYes\");\n        VoteButton disagree = new VoteButton(\"反对\", \"voteNo\");\n        return List.of(List.of(agree, disagree)); \n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        VoteSystem voteSystem = new VoteSystem();\n        List<List<VoteButton>> buttons = voteSystem.generateVoteButtons();\n        for (List<VoteButton> buttonList : buttons) {\n            for (VoteButton button : buttonList) {\n                System.out.println(\"按钮文本: \" + button.getText() + \", 回调数据: \" + button.getCallbackData());\n            }\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于生成一个简单的投票系统，允许用户通过点击按钮来选择“赞成”或“反对”。该方法应返回一个包含两个按钮（\"赞成\"和\"反对\"）的对象。每个按钮都应该有一个标记，分别为\"voteYes\"和\"voteNo\"，以便于后续处理用户的选择。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.List;\nclass VoteButton {\n    String text; \n    String callbackData; \n    public VoteButton(String text, String callbackData) {\n    }\n    public void setCallbackData(String callbackData) {\n    }\n    public String getText() {\n        return null;\n    }\n    public String getCallbackData() {\n        return null;\n    }\n}\nclass VoteSystem {\n    public List<List<VoteButton>> generateVoteButtons() {\n        return null;\n    }\n}\n```", "id": 1485, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nclass VoteButtonTest {\n    @Test\n    void testVoteButtonConstructor() {\n        VoteButton button = new VoteButton(\"测试文本\", \"测试回调\");\n        assertEquals(\"测试文本\", button.getText());\n        assertEquals(\"测试回调\", button.getCallbackData());\n    }\n    @Test\n    void testSetCallbackData() {\n        VoteButton button = new VoteButton(\"测试文本\", \"初始回调\");\n        button.setCallbackData(\"修改后的回调\");\n        assertEquals(\"修改后的回调\", button.getCallbackData());\n    }\n    @Test\n    void testGetText() {\n        VoteButton button = new VoteButton(\"测试文本\", \"测试回调\");\n        assertEquals(\"测试文本\", button.getText());\n    }\n    @Test\n    void testGetCallbackData() {\n        VoteButton button = new VoteButton(\"测试文本\", \"测试回调\");\n        assertEquals(\"测试回调\", button.getCallbackData());\n    }\n}\nclass VoteSystemTest {\n    @Test\n    void testGenerateVoteButtons() {\n        VoteSystem voteSystem = new VoteSystem();\n        List<List<VoteButton>> buttons = voteSystem.generateVoteButtons();\n        assertEquals(1, buttons.size());\n        assertEquals(2, buttons.get(0).size());\n        VoteButton agree = buttons.get(0).get(0);\n        assertEquals(\"赞成\", agree.getText());\n        assertEquals(\"voteYes\", agree.getCallbackData());\n        VoteButton disagree = buttons.get(0).get(1);\n        assertEquals(\"反对\", disagree.getText());\n        assertEquals(\"voteNo\", disagree.getCallbackData());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class StudentInfoManager {\n    private Map<String, Integer> studentScores;\n    public StudentInfoManager() {\n        studentScores = new HashMap<>();\n    }\n    public void addOrUpdateStudent(String name, Integer score) {\n        studentScores.put(name, score);\n    }\n    public Integer queryScoreByName(String name) {\n        return studentScores.get(name);\n    }\n    public void deleteStudent(String name) {\n        studentScores.remove(name);\n    }\n    public static void main(String[] args) {\n        StudentInfoManager manager = new StudentInfoManager();\n        manager.addOrUpdateStudent(\"张三\", 90);\n        manager.addOrUpdateStudent(\"李四\", 85);\n        System.out.println(\"张三的成绩: \" + manager.queryScoreByName(\"张三\")); \n        manager.addOrUpdateStudent(\"张三\", 95);\n        System.out.println(\"张三更新后的成绩: \" + manager.queryScoreByName(\"张三\")); \n        manager.deleteStudent(\"李四\");\n        System.out.println(\"删除李四后，查询李四的成绩: \" + manager.queryScoreByName(\"李四\")); \n    }\n}", "content": "请设计一个名为`学生信息管理系统`的Java类，该类能够实现以下功能：\n\n- 添加学生信息，包括学生姓名和成绩。\n- 根据学生姓名查询成绩。\n- 更新学生的成绩。\n- 删除学生信息。\n\n请确保你的代码能够处理学生信息的添加、查询、更新和删除操作。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentInfoManager {\n    private Map<String, Integer> studentScores;\n    public StudentInfoManager() {\n    }\n    public void addOrUpdateStudent(String name, Integer score) {\n    }\n    public Integer queryScoreByName(String name) {\n    }\n    public void deleteStudent(String name) {\n    }\n}\n```", "id": 1486, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StudentInfoManagerTest {\n    private StudentInfoManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new StudentInfoManager();\n    }\n    @Test\n    public void testAddOrUpdateStudent() {\n        manager.addOrUpdateStudent(\"张三\", 90);\n        Integer score = manager.queryScoreByName(\"张三\");\n        assertEquals(90, score);\n    }\n    @Test\n    public void testUpdateExistingStudent() {\n        manager.addOrUpdateStudent(\"张三\", 90);\n        manager.addOrUpdateStudent(\"张三\", 95);\n        Integer score = manager.queryScoreByName(\"张三\");\n        assertEquals(95, score);\n    }\n    @Test\n    public void testQueryScoreByName() {\n        manager.addOrUpdateStudent(\"李四\", 85);\n        Integer score = manager.queryScoreByName(\"李四\");\n        assertEquals(85, score);\n    }\n    @Test\n    public void testDeleteStudent() {\n        manager.addOrUpdateStudent(\"李四\", 85);\n        manager.deleteStudent(\"李四\");\n        Integer score = manager.queryScoreByName(\"李四\");\n        assertNull(score);\n    }\n    @Test\n    public void testDeleteNonExistingStudent() {\n        manager.deleteStudent(\"王五\");\n        Integer score = manager.queryScoreByName(\"王五\");\n        assertNull(score);\n    }\n}"}}
{"canonical_solution": "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileCopier {\n    public static void copyTextFile(String sourcePath, String targetPath) throws IOException {\n        FileReader fileReader = null;\n        FileWriter fileWriter = null;\n        try {\n            fileReader = new FileReader(sourcePath);\n            fileWriter = new FileWriter(targetPath);\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                fileWriter.write(character);\n            }\n        } finally {\n            if (fileReader != null) {\n                fileReader.close();\n            }\n            if (fileWriter != null) {\n                fileWriter.close();\n            }\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            copyTextFile(\"source.txt\", \"target.txt\");\n            System.out.println(\"文件复制成功！\");\n        } catch (IOException e) {\n            System.out.println(\"在复制文件时发生错误：\" + e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，用于将一个文本文件的内容复制到另一个新的文本文件中。该方法应接收两个参数：源文件路径和目标文件路径。确保在复制过程中，如果目标文件不存在，则自动创建该文件。请注意，需要处理可能出现的所有IO异常，并确保所有使用的资源在操作完成后都被正确关闭。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileCopier {\n    public static void copyTextFile(String sourcePath, String targetPath) throws IOException {\n    }\n}\n```", "id": 1487, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileCopierTest {\n    @Test\n    public void testCopyTextFile_Success() throws IOException {\n        String sourcePath = \"testSource.txt\";\n        String targetPath = \"testTarget.txt\";\n        try (FileWriter fileWriter = new FileWriter(sourcePath)) {\n            fileWriter.write(\"Hello World!\");\n        }\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        StringBuilder content = new StringBuilder();\n        try (FileReader fileReader = new FileReader(targetPath)) {\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                content.append((char) character);\n            }\n        }\n        assertEquals(\"Hello World!\", content.toString());\n    }\n    @Test\n    public void testCopyTextFile_EmptyFile() throws IOException {\n        String sourcePath = \"testEmptySource.txt\";\n        String targetPath = \"testEmptyTarget.txt\";\n        new File(sourcePath).createNewFile();\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        File targetFile = new File(targetPath);\n        assertTrue(targetFile.exists());\n        assertEquals(0, targetFile.length());\n    }\n    @Test\n    public void testCopyTextFile_NonExistingSourceFile() {\n        String sourcePath = \"nonExistingSource.txt\";\n        String targetPath = \"shouldNotExist.txt\";\n        assertThrows(IOException.class, () -> {\n            FileCopier.copyTextFile(sourcePath, targetPath);\n        });\n    }\n    @Test\n    public void testCopyTextFile_TargetFileExists() throws IOException {\n        String sourcePath = \"testSourceOverwrite.txt\";\n        String targetPath = \"testTargetOverwrite.txt\";\n        try (FileWriter sourceWriter = new FileWriter(sourcePath)) {\n            sourceWriter.write(\"New Content\");\n        }\n        try (FileWriter targetWriter = new FileWriter(targetPath)) {\n            targetWriter.write(\"Old Content\");\n        }\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        StringBuilder content = new StringBuilder();\n        try (FileReader fileReader = new FileReader(targetPath)) {\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                content.append((char) character);\n            }\n        }\n        assertEquals(\"New Content\", content.toString());\n    }\n    @Test\n    public void testCopyTextFile_SpecialCharacters() throws IOException {\n        String sourcePath = \"testSpecialCharactersSource.txt\";\n        String targetPath = \"testSpecialCharactersTarget.txt\";\n        String specialContent = \"Spécial Chârâctèrs! 中文字符\";\n        try (FileWriter fileWriter = new FileWriter(sourcePath)) {\n            fileWriter.write(specialContent);\n        }\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        StringBuilder content = new StringBuilder();\n        try (FileReader fileReader = new FileReader(targetPath)) {\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                content.append((char) character);\n            }\n        }\n        assertEquals(specialContent, content.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.UUID;\nimport java.util.regex.Pattern;\npublic class UserIdentifierGenerator {\n    public static String generateUserId(String email, String phone) {\n        if (email != null && !email.isEmpty() && isValidEmail(email)) {\n            return email;\n        } else if (phone != null && !phone.isEmpty()) {\n            return phone;\n        } else {\n            String uuid = UUID.randomUUID().toString();\n            return uuid.replaceAll(\"-\", \"\");\n        }\n    }\n    private static boolean isValidEmail(String email) {\n        String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        Pattern pattern = Pattern.compile(emailRegex);\n        return pattern.matcher(email).matches();\n    }\n    public static void main(String[] args) {\n        System.out.println(generateUserId(\"example@example.com\", \"1234567890\")); \n        System.out.println(generateUserId(\"\", \"1234567890\")); \n        System.out.println(generateUserId(\"\", \"\")); \n        System.out.println(generateUserId(null, null)); \n        System.out.println(generateUserId(\"invalidEmail@\", \"1234567890\")); \n    }\n}", "content": "请编写一个Java函数，该函数用于生成一个唯一的用户标识符。如果可能，首先尝试使用用户的邮箱地址作为标识符。如果邮箱地址为空或者格式不正确，那么请使用用户的手机号码。如果手机号码也不可用，那么生成一个随机的UUID作为用户标识符。请确保UUID中不包含任何短横线。请在实现中考虑到异常处理，并且确保返回的标识符是一个非空的字符串。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.UUID;\nimport java.util.regex.Pattern;\npublic class UserIdentifierGenerator {\n    public static String generateUserId(String email, String phone) {\n    }\n    private static boolean isValidEmail(String email) {\n    }\n}\n```", "id": 1488, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class UserIdentifierGeneratorTest {\n    @Test\n    public void testGenerateUserIdWithValidEmail() {\n        String email = \"example@example.com\";\n        String phone = \"1234567890\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertEquals(email, result);\n    }\n    @Test\n    public void testGenerateUserIdWithInvalidEmailAndValidPhone() {\n        String email = \"invalidEmail@\";\n        String phone = \"1234567890\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertEquals(phone, result);\n    }\n    @Test\n    public void testGenerateUserIdWithEmptyEmailAndPhone() {\n        String email = \"\";\n        String phone = \"\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertNotNull(result);\n        assertNotEquals(email, result);\n        assertNotEquals(phone, result);\n    }\n    @Test\n    public void testGenerateUserIdWithNullEmailAndPhone() {\n        String email = null;\n        String phone = null;\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertNotNull(result);\n    }\n    @Test\n    public void testGenerateUserIdWithEmptyEmailAndValidPhone() {\n        String email = \"\";\n        String phone = \"1234567890\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertEquals(phone, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ColumnValueConverter {\n    private Map<Integer, Object> columnData;\n    public ColumnValueConverter() {\n        columnData = new HashMap<>();\n    }\n    public void setColumnValue(int col, Object value) {\n        columnData.put(col, value);\n    }\n    public int getIntegerFromColumn(int col) {\n        Object value = columnData.get(col);\n        if (value == null) {\n            return 0;\n        }\n        if (value instanceof Boolean) {\n            return (Boolean) value ? 1 : 0;\n        }\n        try {\n            return Integer.parseInt(value.toString());\n        } catch (NumberFormatException e) {\n            try {\n                return (int) Double.parseDouble(value.toString());\n            } catch (NumberFormatException ex) {\n                throw new IllegalArgumentException(\"无法将列值转换为整数。\");\n            }\n        }\n    }\n    public static void main(String[] args) {\n        ColumnValueConverter converter = new ColumnValueConverter();\n        converter.setColumnValue(1, null);\n        converter.setColumnValue(2, true);\n        converter.setColumnValue(3, false);\n        converter.setColumnValue(4, \"123\");\n        converter.setColumnValue(5, \"123.456\");\n        converter.setColumnValue(6, \"非数字\");\n        assert converter.getIntegerFromColumn(1) == 0 : \"列值为null时应返回0\";\n        assert converter.getIntegerFromColumn(2) == 1 : \"列值为true时应返回1\";\n        assert converter.getIntegerFromColumn(3) == 0 : \"列值为false时应返回0\";\n        assert converter.getIntegerFromColumn(4) == 123 : \"列值为数字字符串时应转换为整数\";\n        assert converter.getIntegerFromColumn(5) == 123 : \"列值为浮点数字符串时应转换为整数\";\n        try {\n            converter.getIntegerFromColumn(6);\n            assert false : \"列值为非数字字符串时应抛出异常\";\n        } catch (IllegalArgumentException e) {\n            assert true : \"列值为非数字字符串时应抛出异常\";\n        }\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "请编写一个Java方法，该方法接收一个表示列索引的整数参数，并返回该列的值转换为整数的结果。如果列值为null，返回0。如果列值是布尔类型，返回1（true）或0（false）。如果列值是其他类型，尝试将其转换为整数。如果无法直接转换，尝试将其转换为双精度浮点数，然后转换为整数。请确保代码能够处理可能出现的异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ColumnValueConverter {\n    private Map<Integer, Object> columnData;\n    public ColumnValueConverter() {\n    }\n    public void setColumnValue(int col, Object value) {\n    }\n    public int getIntegerFromColumn(int col) {\n    }\n}\n```", "id": 1489, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class ColumnValueConverterTest {\n    private ColumnValueConverter converter;\n    @BeforeEach\n    public void setUp() {\n        converter = new ColumnValueConverter();\n    }\n    @Test\n    public void testColumnValueIsNull() {\n        converter.setColumnValue(1, null);\n        Assertions.assertEquals(0, converter.getIntegerFromColumn(1), \"列值为null时应返回0\");\n    }\n    @Test\n    public void testColumnValueIsTrue() {\n        converter.setColumnValue(2, true);\n        Assertions.assertEquals(1, converter.getIntegerFromColumn(2), \"列值为true时应返回1\");\n    }\n    @Test\n    public void testColumnValueIsFalse() {\n        converter.setColumnValue(3, false);\n        Assertions.assertEquals(0, converter.getIntegerFromColumn(3), \"列值为false时应返回0\");\n    }\n    @Test\n    public void testColumnValueIsIntegerString() {\n        converter.setColumnValue(4, \"123\");\n        Assertions.assertEquals(123, converter.getIntegerFromColumn(4), \"列值为数字字符串时应转换为整数\");\n    }\n    @Test\n    public void testColumnValueIsDoubleString() {\n        converter.setColumnValue(5, \"123.456\");\n        Assertions.assertEquals(123, converter.getIntegerFromColumn(5), \"列值为浮点数字符串时应转换为整数\");\n    }\n    @Test\n    public void testColumnValueIsNonNumericString() {\n        converter.setColumnValue(6, \"非数字\");\n        Assertions.assertThrows(IllegalArgumentException.class, () -> converter.getIntegerFromColumn(6), \"列值为非数字字符串时应抛出异常\");\n    }\n}"}}
{"canonical_solution": "import java.lang.StringBuilder;\npublic class AdRequestGenerator {\n    public static String generateAdRequestParams(String adUnitType, String adUnitID, int adUnitPrice) {\n        StringBuilder params = new StringBuilder();\n        params.append(\"packageName=yourPackageName\");\n        params.append(\"&deviceID=yourDeviceID\");\n        params.append(\"&googleAID=yourGoogleAID\");\n        params.append(\"&networkType=yourNetworkType\");\n        params.append(\"&adType=\").append(adUnitType);\n        params.append(\"&adID=\").append(adUnitID);\n        params.append(\"&priceLevel=\").append(adUnitPrice);\n        return params.toString();\n    }\n    public static void main(String[] args) {\n        String adUnitType = \"video\";\n        String adUnitID = \"ad123\";\n        int adUnitPrice = 5;\n        String requestParams = generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        System.out.println(requestParams);\n    }\n}", "content": "请编写一个Java方法，用于生成并返回一个特定格式的字符串。该字符串是基于传入的广告单元信息（包括广告单元类型、广告单元ID和广告单元价格）以及一些固定的参数。这个字符串主要用于网络请求的参数。请确保你的代码满足以下要求：\n\n- 方法名为`generateAdRequestParams`。\n- 方法接收三个参数：`adUnitType`（广告单元类型，类型为`String`）、`adUnitID`（广告单元ID，类型为`String`）、`adUnitPrice`（广告单元价格，类型为`int`）。\n- 字符串格式如下：`\"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=adUnitType&adID=adUnitID&priceLevel=adUnitPrice\"`。其中`yourPackageName`、`yourDeviceID`、`yourGoogleAID`、`yourNetworkType`是固定的字符串值，而`adUnitType`、`adUnitID`和`adUnitPrice`则是根据方法参数动态生成的。\n- 使用`&`符号连接每个参数。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.StringBuilder;\npublic class AdRequestGenerator {\n    public static String generateAdRequestParams(String adUnitType, String adUnitID, int adUnitPrice) {\n    }\n}\n```", "id": 1490, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class AdRequestGeneratorTest {\n    @Test\n    public void testGenerateAdRequestParams_ValidInput() {\n        String adUnitType = \"banner\";\n        String adUnitID = \"123abc\";\n        int adUnitPrice = 10;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=banner&adID=123abc&priceLevel=10\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_EmptyAdType() {\n        String adUnitType = \"\";\n        String adUnitID = \"123abc\";\n        int adUnitPrice = 10;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=&adID=123abc&priceLevel=10\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_EmptyAdID() {\n        String adUnitType = \"video\";\n        String adUnitID = \"\";\n        int adUnitPrice = 5;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=video&adID=&priceLevel=5\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_NegativePrice() {\n        String adUnitType = \"native\";\n        String adUnitID = \"ad123\";\n        int adUnitPrice = -1;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=native&adID=ad123&priceLevel=-1\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_ZeroPrice() {\n        String adUnitType = \"interstitial\";\n        String adUnitID = \"ad456\";\n        int adUnitPrice = 0;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=interstitial&adID=ad456&priceLevel=0\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.ArrayList;\npublic class StringListProcessor {\n    public String getStringAtIndex(List<String> stringList, String indexStr) {\n        try {\n            int index = Integer.parseInt(indexStr);\n            return stringList.get(index);\n        } catch (NumberFormatException e) {\n            return \"错误：索引不是有效的数字。\";\n        } catch (IndexOutOfBoundsException e) {\n            return \"错误：索引超出范围。\";\n        }\n    }\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        System.out.println(processor.getStringAtIndex(list, \"1\")); \n        System.out.println(processor.getStringAtIndex(list, \"5\")); \n        System.out.println(processor.getStringAtIndex(list, \"abc\")); \n    }\n}", "content": "请编写一个Java方法，该方法接收一个字符串列表和一个字符串索引，然后返回列表中对应索引的字符串。如果索引无效（例如，超出范围或不是数字），方法应该捕获异常并返回一个特定的错误消息。请确保你的代码能够优雅地处理这些潜在的异常情况。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\npublic class StringListProcessor {\n    public String getStringAtIndex(List<String> stringList, String indexStr) {\n    }\n}\n```", "id": 1491, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class StringListProcessorTest {\n    @Test\n    public void testGetStringAtIndex_validIndex() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"Python\", processor.getStringAtIndex(list, \"1\"));\n    }\n    @Test\n    public void testGetStringAtIndex_indexOutOfBound() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"错误：索引超出范围。\", processor.getStringAtIndex(list, \"5\"));\n    }\n    @Test\n    public void testGetStringAtIndex_invalidIndex() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"错误：索引不是有效的数字。\", processor.getStringAtIndex(list, \"abc\"));\n    }\n    @Test\n    public void testGetStringAtIndex_zeroIndex() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"Java\", processor.getStringAtIndex(list, \"0\"));\n    }\n    @Test\n    public void testGetStringAtIndex_emptyList() {\n        List<String> list = new ArrayList<>();\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"错误：索引超出范围。\", processor.getStringAtIndex(list, \"0\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class LibraryManager {\n    private List<Book> books;\n    public LibraryManager() {\n        this.books = new ArrayList<>();\n    }\n    public String addBook(String title, String author) {\n        for (Book book : books) {\n            if (book.getTitle().equals(title) && book.getAuthor().equals(author)) {\n                return \"书籍已存在。\";\n            }\n        }\n        books.add(new Book(title, author));\n        return \"书籍添加成功。\";\n    }\n    private static class Book {\n        private String title;\n        private String author;\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n        public String getTitle() {\n            return title;\n        }\n        public String getAuthor() {\n            return author;\n        }\n    }\n    public static void main(String[] args) {\n        LibraryManager libraryManager = new LibraryManager();\n        System.out.println(libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\")); \n        System.out.println(libraryManager.addBook(\"Effective Java\", \"Joshua Bloch\")); \n        System.out.println(libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\")); \n    }\n}", "content": "请设计一段描述，用于管理一个图书馆的书籍信息。每本书包含书名和作者名。你需要实现一个方法，该方法接受书名和作者名作为参数，如果这本书已经存在于图书馆中，则返回一个提示信息表示书籍已存在；如果不存在，则将书籍添加到图书馆中，并返回一个提示信息表示添加成功。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class LibraryManager {\n    private List<Book> books;\n    public LibraryManager() {\n    }\n    public String addBook(String title, String author) {\n    }\n    private static class Book {\n        private String title;\n        private String author;\n        public Book(String title, String author) {\n        }\n        public String getTitle() {\n        }\n        public String getAuthor() {\n        }\n    }\n}\n```", "id": 1492, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class LibraryManagerTest {\n    @Test\n    void testAddBookOnce() {\n        LibraryManager libraryManager = new LibraryManager();\n        String result = libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n    @Test\n    void testAddBookTwiceDifferent() {\n        LibraryManager libraryManager = new LibraryManager();\n        libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String result = libraryManager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n    @Test\n    void testAddDuplicateBook() {\n        LibraryManager libraryManager = new LibraryManager();\n        libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String result = libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"书籍已存在。\", result);\n    }\n    @Test\n    void testAddBookWithDifferentAuthor() {\n        LibraryManager libraryManager = new LibraryManager();\n        libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String result = libraryManager.addBook(\"Java编程思想\", \"Another Author\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n    @Test\n    void testAddBookWithoutTitle() {\n        LibraryManager libraryManager = new LibraryManager();\n        String result = libraryManager.addBook(\"\", \"Some Author\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n}"}}
{"canonical_solution": "public class StringEditor {\n    private StringBuilder content;\n    public StringEditor() {\n        this.content = new StringBuilder();\n    }\n    public void addText(String text) {\n        content.append(text);\n    }\n    public void replaceChar(int index, char newChar) {\n        if (index >= 0 && index < content.length()) {\n            content.setCharAt(index, newChar);\n        }\n    }\n    public void deleteChar(int index) {\n        if (index >= 0 && index < content.length()) {\n            content.deleteCharAt(index);\n        }\n    }\n    @Override\n    public String toString() {\n        return content.toString();\n    }\n    public static void main(String[] args) {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        System.out.println(editor); \n        editor.replaceChar(1, 'a');\n        System.out.println(editor); \n        editor.deleteChar(4);\n        System.out.println(editor); \n    }\n}", "content": "请编写一个Java程序，实现一个简单的文本编辑器功能，该编辑器能够进行文本的添加、替换和删除操作。具体要求如下：\n\n1. 使用`StringEditor`类来实现这个文本编辑器。\n2. 在`StringEditor`类中，使用`StringBuilder`来存储和操作文本字符串。\n3. 实现`addText`方法，该方法接受一个字符串参数，并将其添加到当前文本的末尾。\n4. 实现`replaceChar`方法，该方法接受两个参数：要替换的字符位置（从0开始计数）和新的字符，然后在指定位置替换字符。\n5. 实现`deleteChar`方法，该方法接受一个参数：要删除的字符位置（从0开始计数），然后删除该位置的字符。\n\n请注意，所有的操作都应该尽可能高效。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\npublic class StringEditor {\n    private StringBuilder content;\n    public StringEditor() {}\n    public void addText(String text) {}\n    public void replaceChar(int index, char newChar) {}\n    public void deleteChar(int index) {}\n    @Override\n    public String toString() {}\n}\n```", "id": 1493, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class StringEditorTest {\n    @Test\n    void testAddText() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        assertEquals(\"hello\", editor.toString());\n    }\n    @Test\n    void testReplaceChar() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.replaceChar(1, 'a');\n        assertEquals(\"hallo\", editor.toString());\n    }\n    @Test\n    void testReplaceCharOutOfBounds() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.replaceChar(5, 'a'); \n        assertEquals(\"hello\", editor.toString());\n    }\n    @Test\n    void testDeleteChar() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.deleteChar(4);\n        assertEquals(\"hell\", editor.toString());\n    }\n    @Test\n    void testDeleteCharOutOfBounds() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.deleteChar(5);\n        assertEquals(\"hello\", editor.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class CsvUtil {\n    public static String prepareForCsv(String input) {\n        if (input == null) {\n            return \"\";\n        }\n        String escapedInput = input.replace(\"\\\"\", \"\\\"\\\"\");\n        return \"\\\"\" + escapedInput + \"\\\"\";\n    }\n    public static void main(String[] args) {\n        System.out.println(checkPrepareForCsv(null, \"\"));\n        System.out.println(checkPrepareForCsv(\"\", \"\\\"\\\"\"));\n        System.out.println(checkPrepareForCsv(\"Hello\", \"\\\"Hello\\\"\"));\n        System.out.println(checkPrepareForCsv(\"Hello\\\"World\", \"\\\"Hello\\\"\\\"World\\\"\"));\n    }\n    private static boolean checkPrepareForCsv(String input, String expected) {\n        return Objects.equals(prepareForCsv(input), expected);\n    }\n}", "content": "请编写一个Java方法，该方法用于处理字符串，使其适合CSV文件格式。具体来说，如果字符串中包含特殊字符（如双引号），则需要对这些字符进行转义。同时，无论字符串是否包含特殊字符，都需要在字符串的前后添加双引号。请遵循以下规则：\n\n1. 如果输入字符串为null，返回一个空字符串。\n2. 如果输入字符串为空，返回两个双引号（\"\"）。\n3. 如果输入字符串中包含双引号（\"），则需要将每个双引号替换为两个双引号（\"\"）。\n4. 在处理完上述规则后，将整个字符串用一对双引号包裹。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class CsvUtil {\n    public static String prepareForCsv(String input) {\n    }\n}\n```", "id": 1494, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class CsvUtilTest {\n    @Test\n    public void testPrepareForCsv_NullInput() {\n        String result = CsvUtil.prepareForCsv(null);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_EmptyString() {\n        String result = CsvUtil.prepareForCsv(\"\");\n        assertEquals(\"\\\"\\\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_SimpleString() {\n        String result = CsvUtil.prepareForCsv(\"Hello\");\n        assertEquals(\"\\\"Hello\\\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_StringWithQuote() {\n        String result = CsvUtil.prepareForCsv(\"Hello\\\"World\");\n        assertEquals(\"\\\"Hello\\\"\\\"World\\\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_OnlyQuotes() {\n        String result = CsvUtil.prepareForCsv(\"\\\"\\\"\");\n        assertEquals(\"\\\"\\\"\\\"\\\"\\\"\\\"\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public static int calculate(int num1, int num2, char operator) {\n        switch (operator) {\n            case '+':\n                return num1 + num2;\n            case '-':\n                return num1 - num2;\n            case '*':\n                return num1 * num2;\n            case '/':\n                if (num2 == 0) {\n                    throw new IllegalArgumentException(\"除数不能为0\");\n                }\n                return num1 / num2;\n            default:\n                throw new IllegalArgumentException(\"无效的运算符: \" + operator);\n        }\n    }\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入第一个整数:\");\n        int num1 = scanner.nextInt();\n        System.out.println(\"请输入第二个整数:\");\n        int num2 = scanner.nextInt();\n        System.out.println(\"请输入运算符('+', '-', '*', '/'):\");\n        char operator = scanner.next().charAt(0);\n        try {\n            int result = calculate(num1, num2, operator);\n            System.out.println(\"运算结果是: \" + result);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个计算器需要包含一个方法`calculate`，该方法接收三个参数：两个整数`num1`和`num2`，以及一个字符`operator`。根据`operator`指定的运算符('+', '-', '*', '/')，对`num1`和`num2`进行相应的算术运算，并返回运算结果。如果`operator`是无效的运算符，方法应该抛出一个`IllegalArgumentException`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public static int calculate(int num1, int num2, char operator) {\n    }\n}\n```", "id": 1495, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddition() {\n        int result = SimpleCalculator.calculate(3, 5, '+');\n        assertEquals(8, result);\n    }\n    @Test\n    public void testSubtraction() {\n        int result = SimpleCalculator.calculate(10, 4, '-');\n        assertEquals(6, result);\n    }\n    @Test\n    public void testMultiplication() {\n        int result = SimpleCalculator.calculate(6, 7, '*');\n        assertEquals(42, result);\n    }\n    @Test\n    public void testDivision() {\n        int result = SimpleCalculator.calculate(20, 4, '/');\n        assertEquals(5, result);\n    }\n    @Test\n    public void testDivisionByZero() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            SimpleCalculator.calculate(10, 0, '/');\n        });\n        assertEquals(\"除数不能为0\", exception.getMessage());\n    }\n    @Test\n    public void testInvalidOperator() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            SimpleCalculator.calculate(10, 5, '%');\n        });\n        assertEquals(\"无效的运算符: %\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Arrays;\npublic class FileReaderUtil {\n    public static String readUntilChar(String filePath, char[] stopChars) throws IOException {\n        StringBuilder content = new StringBuilder();\n        FileReader reader = null;\n        try {\n            reader = new FileReader(filePath);\n            int c;\n            while ((c = reader.read()) != -1) {\n                if (Arrays.binarySearch(stopChars, (char) c) >= 0) {\n                    break;\n                }\n                content.append((char) c);\n            }\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }\n        return content.toString();\n    }\n    public static void checkFunction() {\n        String testFilePath = \"testFile.txt\"; \n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'}; \n        try {\n            String result = readUntilChar(testFilePath, stopChars);\n            System.out.println(\"读取的内容（直到遇到指定字符）: \" + result);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java方法，该方法用于从一个文本文件中读取字符，直到遇到指定的字符之一为止。该方法应该返回一个字符串，包含从文件开始到遇到指定字符之一为止的所有字符。如果文件中不包含任何指定的字符，则返回文件的全部内容。\n\n请遵循以下指导原则：\n- 方法应该接受两个参数：一个是表示文件路径的字符串，另一个是包含指定停止字符的字符数组。\n- 使用异常处理来处理可能的文件读取错误。\n- 确保在结束读取后关闭文件。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Arrays;\npublic class FileReaderUtil {\n    public static String readUntilChar(String filePath, char[] stopChars) throws IOException {\n    }\n}\n```", "id": 1496, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.io.*;\npublic class FileReaderUtilTest {\n    @Test\n    public void testReadUntilCharStopCharFound() throws IOException {\n        String content = \"hello world\";\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        try (FileWriter writer = new FileWriter(tempFile)) {\n            writer.write(content);\n        }\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(\"h\", result);\n    }\n    @Test\n    public void testReadUntilCharNoStopChar() throws IOException {\n        String content = \"bcdfg\";\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        try (FileWriter writer = new FileWriter(tempFile)) {\n            writer.write(content);\n        }\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(content, result);\n    }\n    @Test\n    public void testReadUntilCharEmptyFile() throws IOException {\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testReadUntilCharImmediateStopChar() throws IOException {\n        String content = \"ahello world\";\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        try (FileWriter writer = new FileWriter(tempFile)) {\n            writer.write(content);\n        }\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testReadUntilCharIOException() {\n        String filePath = \"nonexistentfile.txt\";\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        assertThrows(IOException.class, () -> {\n            FileReaderUtil.readUntilChar(filePath, stopChars);\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookSearchManager {\n    private List<String> allBooks;\n    private List<String> filteredBooks;\n    public BookSearchManager() {\n        allBooks = new ArrayList<>();\n        allBooks.add(\"Java编程思想\");\n        allBooks.add(\"深入理解Java虚拟机\");\n        allBooks.add(\"Effective Java\");\n        allBooks.add(\"Python编程从入门到实践\");\n        allBooks.add(\"算法导论\");\n    }\n    public List<String> searchBooks(String keyword) {\n        if (keyword == null || keyword.trim().isEmpty()) {\n            return allBooks;\n        } else {\n            filteredBooks = new ArrayList<>();\n            for (String book : allBooks) {\n                if (book.toLowerCase().contains(keyword.toLowerCase())) {\n                    filteredBooks.add(book);\n                }\n            }\n            return filteredBooks;\n        }\n    }\n    public static void main(String[] args) {\n        BookSearchManager manager = new BookSearchManager();\n        System.out.println(\"搜索 'Java': \" + manager.searchBooks(\"Java\"));\n        System.out.println(\"搜索空字符串: \" + manager.searchBooks(\"\"));\n    }\n}", "content": "请设计一个Java程序，用于管理一个图书馆的书籍搜索功能。当用户输入一个搜索关键字时，程序应该能够返回所有包含该关键字的书籍标题。如果用户没有输入任何内容（即输入为空字符串），则应返回所有书籍。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookSearchManager {\n    private List<String> allBooks;\n    private List<String> filteredBooks;\n    public BookSearchManager() {\n    }\n    public List<String> searchBooks(String keyword) {\n    }\n}\n```", "id": 1497, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Test;\nimport java.util.List;\npublic class BookSearchManagerTest {\n    @Test\n    public void testSearchBooksWithKeyword() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"Java\");\n        Assert.assertEquals(3, result.size());\n        Assert.assertTrue(result.contains(\"Java编程思想\"));\n        Assert.assertTrue(result.contains(\"深入理解Java虚拟机\"));\n        Assert.assertTrue(result.contains(\"Effective Java\"));\n    }\n    @Test\n    public void testSearchBooksWithEmptyString() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"\");\n        Assert.assertEquals(5, result.size());\n    }\n    @Test\n    public void testSearchBooksWithNull() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(null);\n        Assert.assertEquals(5, result.size());\n    }\n    @Test\n    public void testSearchBooksWithNonExistingKeyword() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"C++\");\n        Assert.assertTrue(result.isEmpty());\n    }\n    @Test\n    public void testSearchBooksCaseInsensitiveKeyword() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"java\");\n        Assert.assertEquals(3, result.size());\n        Assert.assertTrue(result.contains(\"Java编程思想\"));\n        Assert.assertTrue(result.contains(\"深入理解Java虚拟机\"));\n        Assert.assertTrue(result.contains(\"Effective Java\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class TextEditor {\n    private String fontSize = \"12\"; \n    public void changeFontSize() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"------------------------\");\n        System.out.print(\"请输入新的字体大小: \");\n        String newFontSize = scanner.nextLine();\n        if (newFontSize.equals(fontSize)) {\n            System.out.println(\"------------------------\");\n            System.out.println(\"字体大小未改变。\");\n            System.out.println(\"========================\");\n        } else {\n            fontSize = newFontSize;\n            System.out.println(\"------------------------\");\n            System.out.println(\"字体大小已更新为: \" + fontSize);\n            System.out.println(\"========================\");\n        }\n    }\n    public static void main(String[] args) {\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize(); \n    }\n}", "content": "请编写一个Java程序，实现一个简单的文本编辑器中字体大小设置的功能。用户可以通过输入来改变文本的字体大小。如果用户输入的字体大小与当前设置相同，则程序应通知用户没有变化发生。否则，应更新字体大小并通知用户字体大小已更改。请确保你的程序能够处理用户输入，并且在更改字体大小之前和之后都有清晰的提示信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class TextEditor {\n    private String fontSize = \"12\"; \n    public void changeFontSize() {\n    }\n}\n```", "id": 1498, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\npublic class TextEditorTest {\n    @Test\n    public void testChangeFontSizeNoChange() {\n        String simulatedInput = \"12\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeChange() {\n        String simulatedInput = \"14\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeInvalidInput() {\n        String simulatedInput = \"abc\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeEmptyInput() {\n        String simulatedInput = \"\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeLargeInput() {\n        String simulatedInput = \"1000\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass Book {\n    private Date addedDate; \n    public Book(Date addedDate) {\n        this.addedDate = addedDate;\n    }\n    public Date getAddedDate() {\n        return addedDate;\n    }\n}\npublic class Library {\n    private List<Book> books = new ArrayList<>();\n    public void addBook(Book book) {\n        books.add(book);\n    }\n    public int countBooksAddedBetween(Date start, Date end) {\n        int count = 0;\n        for (Book book : books) {\n            Date addedDate = book.getAddedDate();\n            if (!addedDate.before(start) && !addedDate.after(end)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 5, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        System.out.println(\"新增图书数量: \" + count); \n    }\n}", "content": "请编写一个Java程序，用于统计一个在线图书馆在特定时间段内新增的图书数量。图书馆的每本图书都有一个入库日期，你需要根据这个日期来判断图书是否在给定的时间段内新增。请确保你的程序能够接受两个日期作为输入（开始日期和结束日期），并返回这段时间内新增图书的数量。注意，开始日期和结束日期是包含在内的，即如果图书的入库日期等于开始日期或结束日期，也应该被计算在内。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass Book {\n    private Date addedDate; \n    public Book(Date addedDate) {\n    }\n    public Date getAddedDate() {\n    }\n}\npublic class Library {\n    private List<Book> books = new ArrayList<>();\n    public void addBook(Book book) {\n    }\n    public int countBooksAddedBetween(Date start, Date end) {\n    }\n}\n```", "id": 1499, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Date;\npublic class LibraryTest {\n    @Test\n    public void testAddBook() {\n        Library library = new Library();\n        library.addBook(new Book(new Date()));\n        assertEquals(1, library.countBooksAddedBetween(new Date(Long.MIN_VALUE), new Date()));\n    }\n    @Test\n    public void testCountBooksAddedBetween() {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 5, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(2, count);\n    }\n    @Test\n    public void testCountBooksAddedBetweenNoBooks() {\n        Library library = new Library();\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 5, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(0, count);\n    }\n    @Test\n    public void testCountBooksAddedBetweenAllBooks() {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 6, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(3, count);\n    }\n    @Test\n    public void testCountBooksAddedBetweenEdgeCases() {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 5, 10);\n        Date end = new Date(122, 6, 20);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(2, count);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class FileUtil {\n    public static boolean isImageType(String fileName) {\n        List<String> supportedTypes = Arrays.asList(\".jpg\", \".png\", \".gif\", \".bmp\");\n        String extension = \"\";\n        int i = fileName.lastIndexOf('.');\n        if (i > 0) {\n            extension = fileName.substring(i).toLowerCase();\n        }\n        return supportedTypes.contains(extension);\n    }\n    public static void check() {\n        System.out.println(isImageType(\"photo.jpg\") == true ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"document.pdf\") == false ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"image.png\") == true ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"animation.gif\") == true ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"archive.rar\") == false ? \"正确\" : \"错误\");\n    }\n    public static void main(String[] args) {\n        check(); \n    }\n}", "content": "请编写一个Java方法，用于检查给定的文件扩展名是否表示一个图像文件。支持的图像文件类型包括`.jpg`, `.png`, `.gif`, 和 `.bmp`。如果文件扩展名匹配这些类型之一，则方法应返回`true`，否则返回`false`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class FileUtil {\n    public static boolean isImageType(String fileName) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1500, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\npublic class FileUtilTest {\n    @Test\n    public void testIsImageType_WithJpgExtension_ShouldReturnTrue() {\n        assertTrue(FileUtil.isImageType(\"photo.jpg\"));\n    }\n    @Test\n    public void testIsImageType_WithPngExtension_ShouldReturnTrue() {\n        assertTrue(FileUtil.isImageType(\"image.png\"));\n    }\n    @Test\n    public void testIsImageType_WithGifExtension_ShouldReturnTrue() {\n        assertTrue(FileUtil.isImageType(\"animation.gif\"));\n    }\n    @Test\n    public void testIsImageType_WithPdfExtension_ShouldReturnFalse() {\n        assertFalse(FileUtil.isImageType(\"document.pdf\"));\n    }\n    @Test\n    public void testIsImageType_WithRarExtension_ShouldReturnFalse() {\n        assertFalse(FileUtil.isImageType(\"archive.rar\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Calendar;\nimport java.util.TimeZone;\npublic class DateManager {\n    public static long[] resetTimeMarkers() {\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        long todayStart = calendar.getTimeInMillis();\n        calendar.add(Calendar.DAY_OF_MONTH, -1);\n        long yesterdayStart = calendar.getTimeInMillis();\n        calendar.set(Calendar.MONTH, Calendar.JANUARY);\n        calendar.set(Calendar.DAY_OF_MONTH, 1);\n        long yearStart = calendar.getTimeInMillis();\n        return new long[]{todayStart, yesterdayStart, yearStart};\n    }\n    public static void checkTimeMarkers(long[] timeMarkers) {\n        Calendar calendar = Calendar.getInstance();\n        for (long timeMarker : timeMarkers) {\n            calendar.setTimeInMillis(timeMarker);\n            System.out.println(calendar.getTime());\n        }\n    }\n    public static void main(String[] args) {\n        long[] timeMarkers = resetTimeMarkers();\n        checkTimeMarkers(timeMarkers);\n    }\n}", "content": "请编写一个Java程序，该程序包含一个名为`DateManager`的类，该类中有一个静态方法`resetTimeMarkers`。该方法用于计算并返回一个包含三个时间点的`long`类型数组：今天开始时刻、昨天开始时刻和今年开始时刻。这三个时间点都是以毫秒为单位的时间戳，分别代表当前年份的今天0点、昨天0点和1月1日0点。请确保返回的时间戳是准确的，并且考虑到时区的影响。\n\n请按照以下要求实现代码：\n\n1. 使用`java.util.Calendar`类来获取和设置时间。\n2. 方法返回的数组中，第一个元素是今天开始时刻的时间戳，第二个元素是昨天开始时刻的时间戳，第三个元素是今年开始时刻的时间戳。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Calendar;\nimport java.util.TimeZone;\npublic class DateManager {\n    public static long[] resetTimeMarkers() {\n    }\n    public static void checkTimeMarkers(long[] timeMarkers) {\n    }\n}\n```", "id": 1501, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DateManagerTest {\n    @Test\n    public void testResetTimeMarkersTodayStart() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        assertEquals(calendar.getTimeInMillis(), timeMarkers[0]);\n    }\n    @Test\n    public void testResetTimeMarkersYesterdayStart() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        calendar.add(Calendar.DAY_OF_MONTH, -1);\n        assertEquals(calendar.getTimeInMillis(), timeMarkers[1]);\n    }\n    @Test\n    public void testResetTimeMarkersYearStart() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.MONTH, Calendar.JANUARY);\n        calendar.set(Calendar.DAY_OF_MONTH, 1);\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        assertEquals(calendar.getTimeInMillis(), timeMarkers[2]);\n    }\n    @Test\n    public void testCheckTimeMarkers() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance();\n        for (long timeMarker : timeMarkers) {\n            calendar.setTimeInMillis(timeMarker);\n            assertNotNull(calendar.getTime());\n        }\n    }\n}"}}
{"canonical_solution": "import java.io.UnsupportedEncodingException;\npublic class StringEncoder {\n    public String convertEncoding(String originalString, String desiredEncoding) throws UnsupportedEncodingException {\n        byte[] bytes = originalString.getBytes(desiredEncoding);\n        return new String(bytes, desiredEncoding);\n    }\n    public static void main(String[] args) {\n        StringEncoder encoder = new StringEncoder();\n        try {\n            String originalString = \"这是一个测试字符串\";\n            String desiredEncoding = \"ISO-8859-1\";\n            String convertedString = encoder.convertEncoding(originalString, desiredEncoding);\n            System.out.println(\"转换后的字符串: \" + convertedString);\n        } catch (UnsupportedEncodingException e) {\n            System.err.println(\"不支持的编码格式: \" + e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java程序，用于处理字符串中的特定编码转换。具体来说，你需要实现一个名为`StringEncoder`的类，该类中包含一个名为`convertEncoding`的方法。该方法接收两个字符串参数：第一个参数`originalString`代表原始字符串，第二个参数`desiredEncoding`代表希望转换到的编码格式（如\"UTF-8\"、\"ISO-8859-1\"等）。如果转换成功，方法应返回转换后的字符串；如果转换失败，应抛出一个`UnsupportedEncodingException`异常。\n\n请确保实现满足以下要求：\n- 必须导入必要的包。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.UnsupportedEncodingException;\npublic class StringEncoder {\n    public String convertEncoding(String originalString, String desiredEncoding) throws UnsupportedEncodingException {\n    }\n}\n```", "id": 1502, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StringEncoderTest {\n    @Test\n    public void testConvertEncoding_validEncoding() throws UnsupportedEncodingException {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"这是一个测试字符串\";\n        String desiredEncoding = \"UTF-8\";\n        String encodedString = encoder.convertEncoding(originalString, desiredEncoding);\n        assertNotNull(encodedString);\n    }\n    @Test\n    public void testConvertEncoding_invalidEncoding() {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"这是一个测试字符串\";\n        String desiredEncoding = \"INVALID_ENCODING\";\n        assertThrows(UnsupportedEncodingException.class, () -> {\n            encoder.convertEncoding(originalString, desiredEncoding);\n        });\n    }\n    @Test\n    public void testConvertEncoding_emptyString() throws UnsupportedEncodingException {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"\";\n        String desiredEncoding = \"UTF-8\";\n        String encodedString = encoder.convertEncoding(originalString, desiredEncoding);\n        assertEquals(\"\", encodedString);\n    }\n    @Test\n    public void testConvertEncoding_differentEncodings() throws UnsupportedEncodingException {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"这是一个测试字符串\";\n        String utf8Encoded = encoder.convertEncoding(originalString, \"UTF-8\");\n        String isoEncoded = encoder.convertEncoding(utf8Encoded, \"ISO-8859-1\");\n        assertNotNull(isoEncoded);\n    }\n    @Test\n    public void testConvertEncoding_nullString() {\n        StringEncoder encoder = new StringEncoder();\n        String desiredEncoding = \"UTF-8\";\n        Exception exception = assertThrows(NullPointerException.class, () -> {\n            encoder.convertEncoding(null, desiredEncoding);\n        });\n    }\n}"}}
{"canonical_solution": "import java.lang.UnsupportedOperationException;\npublic class ImageProcessor {\n    public void initializePorts() {\n        throw new UnsupportedOperationException(\"该方法尚未实现。\");\n    }\n    public static void checkFunction() {\n        ImageProcessor processor = new ImageProcessor();\n        try {\n            processor.initializePorts();\n        } catch (UnsupportedOperationException e) {\n            System.out.println(\"方法抛出了预期的异常：\" + e.getMessage());\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java方法，该方法用于在图像处理过滤器中设置输入和输出端口。该方法应该在一个名为`ImageProcessor`的类中，并且该类应该有一个名为`initializePorts`的公共方法。该方法不需要接受任何参数，并且应该抛出一个`UnsupportedOperationException`异常，表示该功能尚未实现。请确保包含所有必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.UnsupportedOperationException;\npublic class ImageProcessor {\n    public void initializePorts() {\n    }\n}\n```", "id": 1503, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.lang.UnsupportedOperationException;\npublic class ImageProcessorTest {\n    @Test\n    public void testInitializePortsThrowsException() {\n        ImageProcessor processor = new ImageProcessor();\n        Assertions.assertThrows(UnsupportedOperationException.class, processor::initializePorts);\n    }\n    @Test\n    public void testInitializePortsThrowsExceptionWithMessage() {\n        ImageProcessor processor = new ImageProcessor();\n        UnsupportedOperationException exception = Assertions.assertThrows(UnsupportedOperationException.class, processor::initializePorts);\n        Assertions.assertEquals(\"该方法尚未实现。\", exception.getMessage());\n    }\n    @Test\n    public void testCheckFunctionCatchesException() {\n        try {\n            ImageProcessor.checkFunction();\n        } catch (Exception e) {\n            Assertions.fail(\"checkFunction方法不应抛出任何异常，但抛出了: \" + e);\n        }\n    }\n    @Test\n    public void testNewInstance() {\n        ImageProcessor processor = new ImageProcessor();\n        Assertions.assertNotNull(processor, \"创建的ImageProcessor实例不应为null\");\n    }\n}"}}
{"canonical_solution": "import java.util.Locale;\ninterface Metric {}\ninterface Counting extends Metric {\n    long getCount();\n}\ninterface Gauge<T> extends Metric {\n    T getValue();\n}\ninterface Sampling extends Metric {\n    double getSampleRate();\n}\nclass Counter implements Counting {\n    private long count;\n    public Counter(long count) { this.count = count; }\n    public long getCount() { return count; }\n}\nclass GaugeDouble implements Gauge<Double> {\n    private double value;\n    public GaugeDouble(double value) { this.value = value; }\n    public Double getValue() { return value; }\n}\nclass Sample implements Sampling {\n    private double sampleRate;\n    public Sample(double sampleRate) { this.sampleRate = sampleRate; }\n    public double getSampleRate() { return sampleRate; }\n}\npublic class PerformanceSummary {\n    public static void displayMetricInfo(StringBuilder sb, Metric[] metrics) {\n        for (Metric metric : metrics) {\n            if (metric instanceof Counting) {\n                sb.append(String.format(Locale.US, \"Count: %d\\n\", ((Counting) metric).getCount()));\n            }\n            if (metric instanceof Gauge) {\n                sb.append(String.format(Locale.US, \"Value: %.2f\\n\", ((Gauge<?>) metric).getValue()));\n            }\n            if (metric instanceof Sampling) {\n                sb.append(String.format(Locale.US, \"Sample Rate: %.2f%%\\n\", ((Sampling) metric).getSampleRate() * 100));\n            }\n        }\n    }\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] {\n            new Counter(150),\n            new GaugeDouble(99.99),\n            new Sample(0.85)\n        };\n        displayMetricInfo(sb, metrics);\n        System.out.println(sb.toString());\n    }\n}", "content": "请编写一个Java程序，用于展示不同类型的性能指标信息。你需要定义一个名为`PerformanceSummary`的类，其中包含一个名为`displayMetricInfo`的方法。该方法接收一个`StringBuilder`对象和一个实现了`Metric`接口的对象数组。你需要根据不同的指标类型（计数、测量值、采样率）向`StringBuilder`中添加相应的信息。请确保程序能够处理不同类型的指标，并且格式整洁、易于阅读。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Locale;\ninterface Metric {}\ninterface Counting extends Metric {\n    long getCount();\n}\ninterface Gauge<T> extends Metric {\n    T getValue();\n}\ninterface Sampling extends Metric {\n    double getSampleRate();\n}\nclass Counter implements Counting {\n    private long count;\n    public Counter(long count) {}\n    public long getCount() {}\n}\nclass GaugeDouble implements Gauge<Double> {\n    private double value;\n    public GaugeDouble(double value) {}\n    public Double getValue() {}\n}\nclass Sample implements Sampling {\n    private double sampleRate;\n    public Sample(double sampleRate) {}\n    public double getSampleRate() {}\n}\npublic class PerformanceSummary {\n    public static void displayMetricInfo(StringBuilder sb, Metric[] metrics) {}\n}\n```", "id": 1504, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class PerformanceSummaryTest {\n    @Test\n    public void testDisplayMetricInfo_withCounter() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { new Counter(150) };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Count: 150\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withGaugeDouble() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { new GaugeDouble(99.99) };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Value: 99.99\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withSample() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { new Sample(0.85) };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Sample Rate: 85.00%\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withMixedMetrics() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { \n            new Counter(150), \n            new GaugeDouble(99.99), \n            new Sample(0.85) \n        };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Count: 150\\nValue: 99.99\\nSample Rate: 85.00%\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withEmptyMetrics() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] {};\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"\", sb.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.regex.Pattern;\npublic class PasswordStrengthValidator {\n    public static boolean validatePasswordStrength(String password) {\n        if (password.length() < 8) {\n            return false;\n        }\n        if (!Pattern.compile(\"[a-z]\").matcher(password).find()) {\n            return false;\n        }\n        if (!Pattern.compile(\"[A-Z]\").matcher(password).find()) {\n            return false;\n        }\n        if (!Pattern.compile(\"[0-9]\").matcher(password).find()) {\n            return false;\n        }\n        if (!Pattern.compile(\"[^a-zA-Z0-9]\").matcher(password).find()) {\n            return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n        checkPasswordStrength(\"WeakPass\", false);\n        checkPasswordStrength(\"StrongPass1!\", true);\n        checkPasswordStrength(\"NoSpecialChar1\", false);\n        checkPasswordStrength(\"Short1!\", false);\n        checkPasswordStrength(\"ValidPassword1@\", true);\n    }\n    private static void checkPasswordStrength(String password, boolean expected) {\n        boolean isValid = validatePasswordStrength(password);\n        assert isValid == expected : \"Password validation for \\\"\" + password + \"\\\" failed. Expected: \" + expected + \", but got: \" + isValid;\n        System.out.println(\"Password \\\"\" + password + \"\\\" is \" + (isValid ? \"strong\" : \"weak\") + \".\");\n    }\n}", "content": "请编写一个Java程序，用于验证用户密码的强度。密码必须满足以下条件才被认为是有效的：\n- 至少包含8个字符。\n- 至少包含一个小写字母。\n- 至少包含一个大写字母。\n- 至少包含一个数字。\n- 至少包含一个特殊字符（非字母数字字符）。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.regex.Pattern;\npublic class PasswordStrengthValidator {\n    public static boolean validatePasswordStrength(String password) {\n    }\n}\n```", "id": 1505, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class PasswordStrengthValidatorTest {\n    @Test\n    public void testShortPassword() {\n        assertEquals(false, PasswordStrengthValidator.validatePasswordStrength(\"Short1!\"));\n    }\n    @Test\n    public void testNoSpecialCharacterPassword() {\n        assertEquals(false, PasswordStrengthValidator.validatePasswordStrength(\"NoSpecialChar1\"));\n    }\n    @Test\n    public void testWeakPassword() {\n        assertEquals(false, PasswordStrengthValidator.validatePasswordStrength(\"WeakPass\"));\n    }\n    @Test\n    public void testStrongPassword() {\n        assertEquals(true, PasswordStrengthValidator.validatePasswordStrength(\"StrongPass1!\"));\n    }\n    @Test\n    public void testValidPasswordWithSpecialCharacter() {\n        assertEquals(true, PasswordStrengthValidator.validatePasswordStrength(\"ValidPassword1@\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ErrorInfoProvider {\n    public static String getErrorMessage(int errorCode) {\n        Map<Integer, String> errorMap = new HashMap<>();\n        errorMap.put(1, \"网络连接失败\");\n        errorMap.put(2, \"用户认证失败\");\n        errorMap.put(3, \"数据格式错误\");\n        errorMap.put(4, \"权限不足\");\n        errorMap.put(5, \"服务器内部错误\");\n        errorMap.put(6, \"数据更新失败\");\n        errorMap.put(7, \"资源未找到\");\n        return errorMap.getOrDefault(errorCode, \"未知错误\");\n    }\n    public static void check() {\n        assert \"网络连接失败\".equals(getErrorMessage(1));\n        assert \"用户认证失败\".equals(getErrorMessage(2));\n        assert \"数据格式错误\".equals(getErrorMessage(3));\n        assert \"权限不足\".equals(getErrorMessage(4));\n        assert \"服务器内部错误\".equals(getErrorMessage(5));\n        assert \"数据更新失败\".equals(getErrorMessage(6));\n        assert \"资源未找到\".equals(getErrorMessage(7));\n        assert \"未知错误\".equals(getErrorMessage(8)); \n    }\n    public static void main(String[] args) {\n        check(); \n    }\n}", "content": "请设计一个Java方法，该方法接收一个整型参数`errorCode`，根据不同的错误代码返回相应的错误信息。错误代码和对应的错误信息如下：\n\n- 1: \"网络连接失败\"\n- 2: \"用户认证失败\"\n- 3: \"数据格式错误\"\n- 4: \"权限不足\"\n- 5: \"服务器内部错误\"\n- 6: \"数据更新失败\"\n- 7: \"资源未找到\"\n\n如果传入的错误代码不在上述列表中，请返回\"未知错误\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ErrorInfoProvider {\n    public static String getErrorMessage(int errorCode) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1506, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class ErrorInfoProviderTest {\n    @Test\n    public void testGetErrorMessageForKnownErrorCodes() {\n        assertEquals(\"网络连接失败\", ErrorInfoProvider.getErrorMessage(1));\n        assertEquals(\"用户认证失败\", ErrorInfoProvider.getErrorMessage(2));\n        assertEquals(\"数据格式错误\", ErrorInfoProvider.getErrorMessage(3));\n        assertEquals(\"权限不足\", ErrorInfoProvider.getErrorMessage(4));\n        assertEquals(\"服务器内部错误\", ErrorInfoProvider.getErrorMessage(5));\n    }\n    @Test\n    public void testGetErrorMessageForUnknownErrorCode() {\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(999));\n    }\n    @Test\n    public void testGetErrorMessageForBoundaryErrorCode() {\n        assertEquals(\"网络连接失败\", ErrorInfoProvider.getErrorMessage(1));\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(0));\n    }\n    @Test\n    public void testGetErrorMessageForNegativeErrorCode() {\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(-1));\n    }\n    @Test\n    public void testGetErrorMessageForNonMappedErrorCode() {\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(10));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentService {\n    public static void initiatePayment(String userOpenId, String serverIp, String orderAmount, String merchantOrderNo) throws Exception {\n        HashMap<String, String> paymentData = new HashMap<>();\n        paymentData.put(\"partner_trade_no\", merchantOrderNo); \n        paymentData.put(\"openid\", userOpenId); \n        paymentData.put(\"check_name\", \"NO_CHECK\"); \n        paymentData.put(\"amount\", orderAmount); \n        paymentData.put(\"desc\", \"提现\"); \n        paymentData.put(\"spbill_create_ip\", serverIp); \n    }\n    public static boolean checkPaymentData(Map<String, String> data) {\n        return data.containsKey(\"partner_trade_no\") &&\n               data.containsKey(\"openid\") &&\n               data.containsKey(\"check_name\") &&\n               data.containsKey(\"amount\") &&\n               data.containsKey(\"desc\") &&\n               data.containsKey(\"spbill_create_ip\");\n    }\n    public static void main(String[] args) {\n        try {\n            String openId = \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\";\n            String ip = \"192.168.0.1\";\n            String amount = \"200\";\n            String orderNo = \"123456789\";\n            initiatePayment(openId, ip, amount, orderNo);\n            HashMap<String, String> paymentData = new HashMap<>();\n            paymentData.put(\"partner_trade_no\", orderNo);\n            paymentData.put(\"openid\", openId);\n            paymentData.put(\"check_name\", \"NO_CHECK\");\n            paymentData.put(\"amount\", amount);\n            paymentData.put(\"desc\", \"提现\");\n            paymentData.put(\"spbill_create_ip\", ip);\n            boolean isDataValid = checkPaymentData(paymentData);\n            System.out.println(\"Payment data is valid: \" + isDataValid);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于处理向用户发起微信企业付款的请求。该方法应接收用户的OpenID和服务器的IP地址作为参数，并构建一个包必要信息的数据集合，以便发起付款。请注意，付款金额和商户订单号应作为参数传递给该方法，而不是编码在代码中。此外，需要实现一个检查函数来验证付款请求是否包含所有必要的信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentService {\n    public static void initiatePayment(String userOpenId, String serverIp, String orderAmount, String merchantOrderNo) throws Exception {\n    }\n    public static boolean checkPaymentData(Map<String, String> data) {\n        return false;\n    }\n}\n```", "id": 1507, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentServiceTest {\n    @Test\n    public void testInitiatePaymentWithValidData() throws Exception {\n        String openId = \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\";\n        String ip = \"192.168.0.1\";\n        String amount = \"200\";\n        String orderNo = \"123456789\";\n        WeChatPaymentService.initiatePayment(openId, ip, amount, orderNo);\n        Map<String, String> expectedData = new HashMap<>();\n        expectedData.put(\"partner_trade_no\", orderNo);\n        expectedData.put(\"openid\", openId);\n        expectedData.put(\"check_name\", \"NO_CHECK\");\n        expectedData.put(\"amount\", amount);\n        expectedData.put(\"desc\", \"提现\");\n        expectedData.put(\"spbill_create_ip\", ip);\n        assertTrue(WeChatPaymentService.checkPaymentData(expectedData));\n    }\n    @Test\n    public void testCheckPaymentDataWithValidData() {\n        Map<String, String> validData = new HashMap<>();\n        validData.put(\"partner_trade_no\", \"123456789\");\n        validData.put(\"openid\", \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\");\n        validData.put(\"check_name\", \"NO_CHECK\");\n        validData.put(\"amount\", \"200\");\n        validData.put(\"desc\", \"提现\");\n        validData.put(\"spbill_create_ip\", \"192.168.0.1\");\n        assertTrue(WeChatPaymentService.checkPaymentData(validData));\n    }\n    @Test\n    public void testCheckPaymentDataWithMissingField() {\n        Map<String, String> invalidData = new HashMap<>();\n        invalidData.put(\"partner_trade_no\", \"123456789\");\n        invalidData.put(\"openid\", \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\");\n        invalidData.put(\"check_name\", \"NO_CHECK\");\n        invalidData.put(\"amount\", \"200\");\n        invalidData.put(\"spbill_create_ip\", \"192.168.0.1\");\n        assertFalse(WeChatPaymentService.checkPaymentData(invalidData));\n    }\n    @Test\n    public void testCheckPaymentDataWithEmptyMap() {\n        Map<String, String> emptyData = new HashMap<>();\n        assertFalse(WeChatPaymentService.checkPaymentData(emptyData));\n    }\n    @Test\n    public void testCheckPaymentDataWithInvalidField() {\n        Map<String, String> invalidFieldData = new HashMap<>();\n        invalidFieldData.put(\"partner_trade_no\", \"123456789\");\n        invalidFieldData.put(\"openid\", \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\");\n        invalidFieldData.put(\"check_name\", \"NO_CHECK\");\n        invalidFieldData.put(\"amount\", \"200\");\n        invalidFieldData.put(\"desc\", \"提现\");\n        invalidFieldData.put(\"invalid_field\", \"invalid_value\");\n        assertFalse(WeChatPaymentService.checkPaymentData(invalidFieldData));\n    }\n}"}}
{"canonical_solution": "import java.lang.Exception;\nclass InvalidIntegerException extends Exception {\n    public InvalidIntegerException(String message) {\n        super(message);\n    }\n}\npublic class StringToIntConverter {\n    public static int convertStringToInt(String str) throws InvalidIntegerException {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            throw new InvalidIntegerException(\"无效的整数: \" + str);\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            System.out.println(convertStringToInt(\"123\")); \n            System.out.println(convertStringToInt(\"abc\")); \n        } catch (InvalidIntegerException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法接收一个字符串参数，该字符串代表一个整数。方法的目的是将这个字符串转换为整数并返回。如果输入的字符串不是一个有效的整数，方法应该抛出一个自定义异常，异常信息为\"无效的整数: \"加上原始输入字符串。请确保你的代码能够处理异常情况，并且在方法签名中明确声明可能抛出的异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.Exception;\nclass InvalidIntegerException extends Exception {\n    public InvalidIntegerException(String message) {\n        super(message);\n    }\n}\npublic class StringToIntConverter {\n    public static int convertStringToInt(String str) throws InvalidIntegerException {\n    }\n}\n```", "id": 1508, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StringToIntConverterTest {\n    @Test\n    void testConvertStringToIntValid() {\n        try {\n            assertEquals(123, StringToIntConverter.convertStringToInt(\"123\"));\n            assertEquals(-456, StringToIntConverter.convertStringToInt(\"-456\"));\n        } catch (InvalidIntegerException e) {\n            fail(\"Exception should not have been thrown\");\n        }\n    }\n    @Test\n    void testConvertStringToIntInvalid() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(\"abc\");\n        });\n    }\n    @Test\n    void testConvertStringToIntEmptyString() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(\"\");\n        });\n    }\n    @Test\n    void testConvertStringToIntNull() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(null);\n        });\n    }\n    @Test\n    void testConvertStringToIntWhiteSpace() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(\" \");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.function.BiFunction;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n    public int subtract(int a, int b) {\n        return a - b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        check(\"加法\", 5, 3, 8, calculator::add);\n        check(\"减法\", 5, 3, 2, calculator::subtract);\n    }\n    private static void check(String testName, int a, int b, int expected, BiFunction<Integer, Integer, Integer> operation) {\n        int result = operation.apply(a, b);\n        assert result == expected : testName + \"失败\";\n        System.out.println(testName + \"成功\");\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个计算器需要包含两个方法：`add`和`subtract`，分别用于计算两个整数的和与差。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.function.BiFunction;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n    }\n    public int subtract(int a, int b) {\n    }\n}\n```", "id": 1509, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAdd() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8, calculator.add(5, 3));\n        assertEquals(0, calculator.add(2, -2));\n        assertEquals(-10, calculator.add(-5, -5));\n    }\n    @Test\n    public void testSubtract() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(2, calculator.subtract(5, 3));\n        assertEquals(4, calculator.subtract(2, -2));\n        assertEquals(0, calculator.subtract(-5, -5));\n    }\n    @Test\n    public void testAddEdgeCases() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(0, calculator.add(0, 0));\n        assertEquals(Integer.MAX_VALUE, calculator.add(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MIN_VALUE, calculator.add(Integer.MIN_VALUE, 0));\n    }\n    @Test\n    public void testSubtractEdgeCases() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(0, calculator.subtract(0, 0));\n        assertEquals(Integer.MAX_VALUE, calculator.subtract(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MIN_VALUE, calculator.subtract(Integer.MIN_VALUE, 0));\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\npublic class OptionalExample {\n    public void processOptionalString(Optional<String> input) {\n        input.ifPresentOrElse(\n            value -> System.out.println(value), \n            () -> System.out.println(\"未提供值\") \n        );\n    }\n    public static void main(String[] args) {\n        OptionalExample example = new OptionalExample();\n        Optional<String> nonEmptyOptional = Optional.of(\"Hello, World!\");\n        example.processOptionalString(nonEmptyOptional);\n        Optional<String> emptyOptional = Optional.empty();\n        example.processOptionalString(emptyOptional);\n    }\n}", "content": "请编写一个功能，该功能接收一个可能为空的字符串，并对其进行处理。如果字符串存在，则打印该字符串；如果字符串不存在，则打印“未提供值”。请使用`Optional`类来实现这一逻辑。提供一个检查函数来验证你的实现是否正确处理了给定的数据点。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Optional;\npublic class OptionalExample {\n    public void processOptionalString(Optional<String> input) {\n    }\n}\n```", "id": 1510, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.Optional;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class OptionalExampleTest {\n    private OptionalExample example;\n    @BeforeEach\n    public void setUp() {\n        example = new OptionalExample();\n    }\n    @Test\n    public void testProcessOptionalStringWithNonEmptyOptional() {\n        Optional<String> nonEmptyOptional = Optional.of(\"Test String\");\n        example.processOptionalString(nonEmptyOptional);\n    }\n    @Test\n    public void testProcessOptionalStringWithEmptyOptional() {\n        Optional<String> emptyOptional = Optional.empty();\n        example.processOptionalString(emptyOptional);\n    }\n    @Test\n    public void testProcessOptionalStringWithNullValue() {\n        Optional<String> nullOptional = Optional.ofNullable(null);\n        example.processOptionalString(nullOptional);\n    }\n    @Test\n    public void testProcessOptionalStringWithWhitespaceString() {\n        Optional<String> whitespaceString = Optional.of(\" \");\n        example.processOptionalString(whitespaceString);\n    }\n    @Test\n    public void testProcessOptionalStringWithSpecialCharacters() {\n        Optional<String> specialCharacters = Optional.of(\"!@#$%^&*()\");\n        example.processOptionalString(specialCharacters);\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\npublic class DefaultValueGetter {\n    public static int getNumberOrDefault(Integer number) {\n        Optional<Integer> optionalNumber = Optional.ofNullable(number);\n        return optionalNumber.orElse(100);\n    }\n    public static void checkFunction() {\n        Integer test1 = null; \n        Integer test2 = 50;   \n        System.out.println(\"Test1 (Expected: 100): \" + getNumberOrDefault(test1));\n        System.out.println(\"Test2 (Expected: 50): \" + getNumberOrDefault(test2));\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java函数，该函数接收一个可能为null的整数值，如果该值不为null，则直接返回该值；如果为null，则返回一个默认值100。请使用`Optional`类来实现这个逻辑，确保代码的健壮性。请遵循Java的最佳实践，包括合适的包导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Optional;\npublic class DefaultValueGetter {\n    public static int getNumberOrDefault(Integer number) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1511, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class DefaultValueGetterTest {\n    @Test\n    public void testGetNumberOrDefault_withNull() {\n        Integer testInput = null;\n        int expectedOutput = 100;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withNonNull() {\n        Integer testInput = 50;\n        int expectedOutput = 50;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withNegativeValue() {\n        Integer testInput = -10;\n        int expectedOutput = -10;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withZero() {\n        Integer testInput = 0;\n        int expectedOutput = 0;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withPositiveValue() {\n        Integer testInput = 200;\n        int expectedOutput = 200;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass ProductNotFoundException extends RuntimeException {\n    public ProductNotFoundException(String message) {\n        super(message);\n    }\n}\nclass Product {\n    private String id;\n    private int status; \n    public Product(String id, int status) {\n        this.id = id;\n        this.status = status;\n    }\n    public String getId() {\n        return id;\n    }\n    public int getStatus() {\n        return status;\n    }\n}\nclass ProductRepository {\n    private Map<String, Product> productMap = new HashMap<>();\n    public ProductRepository() {\n        productMap.put(\"123\", new Product(\"123\", 1));\n        productMap.put(\"456\", new Product(\"456\", 0));\n    }\n    public Product findById(String id) {\n        return productMap.get(id);\n    }\n}\npublic class ProductFinder {\n    private ProductRepository productRepo = new ProductRepository();\n    public Product findActiveProductById(String id) {\n        Product product = productRepo.findById(id);\n        if (product != null && product.getStatus() == 1) {\n            return product;\n        } else {\n            throw new ProductNotFoundException(\"Product not found or not active\");\n        }\n    }\n    public static void main(String[] args) {\n        ProductFinder finder = new ProductFinder();\n        try {\n            Product product = finder.findActiveProductById(\"123\");\n            System.out.println(\"Found product: \" + product.getId());\n        } catch (ProductNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            finder.findActiveProductById(\"456\");\n        } catch (ProductNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请设计一个Java方法，该方法用于检索并返回一个特定状态的商品信息。如果商品存在且其状态为激活（状态码为1），则返回该商品信息；如果商品不存在或状态不是激活状态，则抛出一个异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass ProductNotFoundException extends RuntimeException {\n    public ProductNotFoundException(String message) {\n    }\n}\nclass Product {\n    private String id;\n    private int status; \n    public Product(String id, int status) {\n    }\n    public String getId() {\n    }\n    public int getStatus() {\n    }\n}\nclass ProductRepository {\n    private Map<String, Product> productMap = new HashMap<>();\n    public ProductRepository() {\n    }\n    public Product findById(String id) {\n    }\n}\npublic class ProductFinder {\n    private ProductRepository productRepo = new ProductRepository();\n    public Product findActiveProductById(String id) {\n    }\n}\n```", "id": 1512, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass ProductFinderTest {\n    @Test\n    void testFindActiveProductById_ProductExistsAndIsActive() {\n        ProductFinder finder = new ProductFinder();\n        Product product = finder.findActiveProductById(\"123\");\n        assertNotNull(product);\n        assertEquals(\"123\", product.getId());\n    }\n    @Test\n    void testFindActiveProductById_ProductExistsButNotActive() {\n        ProductFinder finder = new ProductFinder();\n        assertThrows(ProductNotFoundException.class, () -> {\n            finder.findActiveProductById(\"456\");\n        });\n    }\n    @Test\n    void testFindActiveProductById_ProductDoesNotExist() {\n        ProductFinder finder = new ProductFinder();\n        assertThrows(ProductNotFoundException.class, () -> {\n            finder.findActiveProductById(\"789\");\n        });\n    }\n    @Test\n    void testFindActiveProductById_ProductRepositoryIsInitializedCorrectly() {\n        ProductFinder finder = new ProductFinder();\n        Product product1 = finder.findActiveProductById(\"123\");\n        assertNotNull(product1);\n        assertEquals(1, product1.getStatus());\n        assertThrows(ProductNotFoundException.class, () -> {\n            finder.findActiveProductById(\"456\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ProjectManagementServiceFactory {\n    private Map<String, ProjectManagementService> services = new HashMap<>();\n    public ProjectManagementServiceFactory() {\n        services.put(\"jiraServer\", new JiraServerService());\n        services.put(\"jiraCloud\", new JiraCloudService());\n    }\n    public ProjectManagementService getService(String tokenIdentifier) {\n        for (String key : services.keySet()) {\n            ProjectManagementService service = services.get(key);\n            if (service.containsToken(tokenIdentifier)) {\n                return service;\n            }\n        }\n        return null;\n    }\n    public static void main(String[] args) {\n        ProjectManagementServiceFactory factory = new ProjectManagementServiceFactory();\n        ProjectManagementService service = factory.getService(\"someToken\");\n        if (service != null) {\n            System.out.println(\"获取到的服务实例: \" + service.getClass().getSimpleName());\n        } else {\n            System.out.println(\"没有找到匹配的服务实例\");\n        }\n    }\n}\ninterface ProjectManagementService {\n    boolean containsToken(String token);\n}\nclass JiraServerService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return \"jiraServerToken\".equals(token);\n    }\n}\nclass JiraCloudService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return \"jiraCloudToken\".equals(token);\n    }\n}", "content": "假设你正在开发一个项目管理系统，该系统需要支持多种项目管理工具，例如Jira服务器版和Jira云版。系统中有一个功能是根据提供的令牌标识符来获取相应的项目管理工具服务。请描述一个方法的设计，该方法接收一个令牌标识符作为参数，然后根据该标识符返回对应的项目管理工具服务实例。如果系统中没有匹配的服务，则返回null。请确保你的设计能够轻松扩展，以便将来可以支持更多的项目管理工具。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ProjectManagementServiceFactory {\n    private Map<String, ProjectManagementService> services = new HashMap<>();\n    public ProjectManagementServiceFactory() {\n    }\n    public ProjectManagementService getService(String tokenIdentifier) {\n        return null;\n    }\n}\ninterface ProjectManagementService {\n    boolean containsToken(String token);\n}\nclass JiraServerService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return false;\n    }\n}\nclass JiraCloudService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return false;\n    }\n}\n```", "id": 1513, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ProjectManagementServiceFactoryTest {\n    private ProjectManagementServiceFactory factory;\n    @Before\n    public void setUp() {\n        factory = new ProjectManagementServiceFactory();\n    }\n    @Test\n    public void testGetServiceWithJiraServerToken() {\n        ProjectManagementService service = factory.getService(\"jiraServerToken\");\n        assertNotNull(service);\n        assertTrue(service instanceof JiraServerService);\n    }\n    @Test\n    public void testGetServiceWithJiraCloudToken() {\n        ProjectManagementService service = factory.getService(\"jiraCloudToken\");\n        assertNotNull(service);\n        assertTrue(service instanceof JiraCloudService);\n    }\n    @Test\n    public void testGetServiceWithInvalidToken() {\n        ProjectManagementService service = factory.getService(\"invalidToken\");\n        assertNull(service);\n    }\n    @Test\n    public void testGetServiceWithEmptyToken() {\n        ProjectManagementService service = factory.getService(\"\");\n        assertNull(service);\n    }\n    @Test\n    public void testGetServiceWithNullToken() {\n        ProjectManagementService service = factory.getService(null);\n        assertNull(service);\n    }\n}"}}
{"canonical_solution": "import java.util.UUID;\nclass ResultVO {\n    private boolean success;\n    private String message;\n    private String data;\n    public ResultVO(boolean success, String message, String data) {\n        this.success = success;\n        this.message = message;\n        this.data = data;\n    }\n    public static ResultVO setSuccess(String message, String data) {\n        return new ResultVO(true, message, data);\n    }\n    public boolean isSuccess() {\n        return success;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public String getData() {\n        return data;\n    }\n}\nclass Book {\n    private String bookId;\n    private String title;\n    public Book(String title) {\n        this.bookId = UUID.randomUUID().toString();\n        this.title = title;\n    }\n    public String getBookId() {\n        return bookId;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\nclass LibrarySystem {\n    public ResultVO addNewBook(Book newBook) {\n        System.out.println(\"Adding book: \" + newBook.getTitle());\n        return ResultVO.setSuccess(\"添加成功\", newBook.getBookId());\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        LibrarySystem librarySystem = new LibrarySystem();\n        Book newBook = new Book(\"Java编程思想\");\n        ResultVO result = librarySystem.addNewBook(newBook);\n        System.out.println(\"操作是否成功: \" + result.isSuccess());\n        System.out.println(\"消息: \" + result.getMessage());\n        System.out.println(\"新书ID: \" + result.getData());\n    }\n}", "content": "请编写一个Java方法，用于处理图书馆中新书的添加。该方法应接收一个图书对象作为参数，并将其保存到数据库中。如果添加成功，方法应返回一个包含成功信息和新书ID的结果对象。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.UUID;\nclass ResultVO {\n    private boolean success;\n    private String message;\n    private String data;\n    public ResultVO(boolean success, String message, String data) {\n    }\n    public static ResultVO setSuccess(String message, String data) {\n        return null;\n    }\n    public boolean isSuccess() {\n        return false;\n    }\n    public String getMessage() {\n        return null;\n    }\n    public String getData() {\n        return null;\n    }\n}\nclass Book {\n    private String bookId;\n    private String title;\n    public Book(String title) {\n    }\n    public String getBookId() {\n        return null;\n    }\n    public String getTitle() {\n        return null;\n    }\n}\nclass LibrarySystem {\n    public ResultVO addNewBook(Book newBook) {\n        return null;\n    }\n}\n```", "id": 1514, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nclass ResultVOTest {\n    private ResultVO resultVO;\n    @BeforeEach\n    void setUp() {\n        resultVO = new ResultVO(true, \"Test Message\", \"TestData\");\n    }\n    @Test\n    void testSetSuccess() {\n        ResultVO result = ResultVO.setSuccess(\"Success\", \"Data\");\n        Assertions.assertTrue(result.isSuccess());\n        Assertions.assertEquals(\"Success\", result.getMessage());\n        Assertions.assertEquals(\"Data\", result.getData());\n    }\n    @Test\n    void testIsSuccess() {\n        Assertions.assertTrue(resultVO.isSuccess());\n    }\n    @Test\n    void testGetMessage() {\n        Assertions.assertEquals(\"Test Message\", resultVO.getMessage());\n    }\n    @Test\n    void testGetData() {\n        Assertions.assertEquals(\"TestData\", resultVO.getData());\n    }\n}\nclass BookTest {\n    private Book book;\n    @BeforeEach\n    void setUp() {\n        book = new Book(\"Test Title\");\n    }\n    @Test\n    void testGetBookId() {\n        String bookId = book.getBookId();\n        Assertions.assertNotNull(bookId);\n    }\n    @Test\n    void testGetTitle() {\n        Assertions.assertEquals(\"Test Title\", book.getTitle());\n    }\n}\nclass LibrarySystemTest {\n    private LibrarySystem librarySystem;\n    private Book book;\n    @BeforeEach\n    void setUp() {\n        librarySystem = new LibrarySystem();\n        book = new Book(\"Test Book\");\n    }\n    @Test\n    void testAddNewBook() {\n        ResultVO result = librarySystem.addNewBook(book);\n        Assertions.assertTrue(result.isSuccess());\n        Assertions.assertEquals(\"添加成功\", result.getMessage());\n        Assertions.assertEquals(book.getBookId(), result.getData());\n    }\n}"}}
{"canonical_solution": "import java.lang.Math;\npublic class WeatherDataValidator {\n    public boolean checkWeatherData(float temperature, float humidity, int windSpeed) {\n        return checkTemperature(temperature) && checkHumidity(humidity) && checkWindSpeed(windSpeed);\n    }\n    private boolean checkTemperature(float temperature) {\n        return Math.abs(temperature) <= 100; \n    }\n    private boolean checkHumidity(float humidity) {\n        return humidity >= 0 && humidity <= 100; \n    }\n    private boolean checkWindSpeed(int windSpeed) {\n        return windSpeed >= 0 && windSpeed <= 150; \n    }\n    public static void main(String[] args) {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        System.out.println(validator.checkWeatherData(25.5f, 65.0f, 20)); \n        System.out.println(validator.checkWeatherData(-101.0f, 65.0f, 20)); \n        System.out.println(validator.checkWeatherData(25.5f, -1.0f, 20)); \n        System.out.println(validator.checkWeatherData(25.5f, 65.0f, 151)); \n    }\n}", "content": "请编写一个Java方法，用于检查气象站收集的气象数据是否在合理范围内。该方法将接收三个参数：温度（浮点数）、湿度（浮点数）和风速（整数）。如果所有参数都在预定的有效范围内，则方法返回`true`，否则返回`false`。假设你已经有了三个辅助方法：`checkTemperature`、`checkHumidity`和`checkWindSpeed`，分别用于验证温度、湿度和风速的有效性。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.Math;\npublic class WeatherDataValidator {\n    public boolean checkWeatherData(float temperature, float humidity, int windSpeed) {\n    }\n    private boolean checkTemperature(float temperature) {\n    }\n    private boolean checkHumidity(float humidity) {\n    }\n    private boolean checkWindSpeed(int windSpeed) {\n    }\n}\n```", "id": 1515, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class WeatherDataValidatorTest {\n    @Test\n    public void testCheckWeatherData_ValidData() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertTrue(validator.checkWeatherData(25.5f, 65.0f, 20));\n    }\n    @Test\n    public void testCheckWeatherData_InvalidTemperature() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertFalse(validator.checkWeatherData(-101.0f, 65.0f, 20));\n    }\n    @Test\n    public void testCheckWeatherData_InvalidHumidity() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertFalse(validator.checkWeatherData(25.5f, -1.0f, 20));\n    }\n    @Test\n    public void testCheckWeatherData_InvalidWindSpeed() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertFalse(validator.checkWeatherData(25.5f, 65.0f, 151));\n    }\n    @Test\n    public void testCheckWeatherData_UpperBoundaryValues() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertTrue(validator.checkWeatherData(100.0f, 100.0f, 150));\n    }\n}"}}
{"canonical_solution": "import java.util.LinkedList;\npublic class MessageQueueManager {\n    private LinkedList<String> queue = new LinkedList<>();\n    public synchronized void addMessage(String message) {\n        queue.addLast(message);\n        notifyAll();\n    }\n    public synchronized String getMessage() throws InterruptedException {\n        while (queue.isEmpty()) {\n            wait();\n        }\n        return queue.removeFirst();\n    }\n    public static void main(String[] args) throws InterruptedException {\n        MessageQueueManager manager = new MessageQueueManager();\n        manager.addMessage(\"Hello\");\n        manager.addMessage(\"World\");\n        System.out.println(manager.getMessage()); \n        System.out.println(manager.getMessage()); \n    }\n}", "content": "请编写一个Java程序，实现一个简单的消息队列管理系统。该系统应该能够让用户添加消息到队列中，并且能够按照先进先出（FIFO）的原则获取并移除队列中的消息。请确保你的实现是线程安全的。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.LinkedList;\npublic class MessageQueueManager {\n    private LinkedList<String> queue = new LinkedList<>();\n    public synchronized void addMessage(String message) {\n    }\n    public synchronized String getMessage() throws InterruptedException {\n        return null;\n    }\n}\n```", "id": 1516, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class MessageQueueManagerTest {\n    private MessageQueueManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new MessageQueueManager();\n    }\n    @Test\n    public void testAddMessage() throws InterruptedException {\n        manager.addMessage(\"TestMessage\");\n        assertEquals(\"TestMessage\", manager.getMessage());\n    }\n    @Test\n    public void testGetMessageWithMultipleMessages() throws InterruptedException {\n        manager.addMessage(\"Message1\");\n        manager.addMessage(\"Message2\");\n        assertEquals(\"Message1\", manager.getMessage());\n        assertEquals(\"Message2\", manager.getMessage());\n    }\n    @Test\n    public void testGetMessageWhenQueueIsEmpty() {\n        Thread thread = new Thread(() -> {\n            try {\n                manager.getMessage();\n                fail(\"Expected InterruptedException was not thrown\");\n            } catch (InterruptedException e) {\n            }\n        });\n        thread.start();\n        thread.interrupt();\n    }\n    @Test\n    public void testNotifyAllAfterAddMessage() throws InterruptedException {\n        Thread thread = new Thread(() -> {\n            try {\n                assertEquals(\"Message1\", manager.getMessage());\n            } catch (InterruptedException e) {\n                fail(e.getMessage());\n            }\n        });\n        thread.start();\n        manager.addMessage(\"Message1\");\n        thread.join(); \n    }\n    @Test\n    public void testQueueOrderIsMaintained() throws InterruptedException {\n        manager.addMessage(\"First\");\n        manager.addMessage(\"Second\");\n        manager.addMessage(\"Third\");\n        assertEquals(\"First\", manager.getMessage());\n        assertEquals(\"Second\", manager.getMessage());\n        assertEquals(\"Third\", manager.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class LibraryBorrowingService {\n    public static void processBorrowingRequest(String[] args) {\n        if (args.length != 4) {\n            System.out.println(\"输入格式错误，请按照以下格式输入：图书ID 借阅者姓名 借阅日期 预计归还日期\");\n            return;\n        }\n        String bookId = args[0];\n        String borrowerName = args[1];\n        String borrowDateStr = args[2];\n        String returnDateStr = args[3];\n        LocalDate borrowDate;\n        LocalDate returnDate;\n        try {\n            borrowDate = LocalDate.parse(borrowDateStr, DateTimeFormatter.ISO_LOCAL_DATE);\n            returnDate = LocalDate.parse(returnDateStr, DateTimeFormatter.ISO_LOCAL_DATE);\n        } catch (DateTimeParseException e) {\n            System.out.println(\"日期格式错误，请使用YYYY-MM-DD格式。\");\n            return;\n        }\n        if (!returnDate.isAfter(borrowDate)) {\n            System.out.println(\"预计归还日期应该在借阅日期之后。\");\n            return;\n        }\n        System.out.println(\"图书借阅成功。图书ID: \" + bookId + \", 借阅者: \" + borrowerName + \", 借阅日期: \" + borrowDateStr + \", 预计归还日期: \" + returnDateStr);\n    }\n    public static void main(String[] args) {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\", \"2023-04-15\"};\n        processBorrowingRequest(testData);\n    }\n}", "content": "请设计一个Java程序，用于处理图书馆中图书的借阅。程序应该能够接受一个字符串数组作为参数，该数组包含图书的ID、借阅者的姓名、借阅日期和预计归还日期。如果输入参数不符合要求（即参数数量不是4），程序应该提示用户输入格式错误，并提供正确的格式示例。如果输入正确，程序应该检查借阅日期和预计归还日期的有效性（预计归还日期应该在借阅日期之后）。如果日期无效，程序应该提示用户并结束。如果一切正常，程序应该确认图书借阅成功。请注意，你需要自行设计一个简单的方法来验证日期的有效性。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class LibraryBorrowingService {\n    public static void processBorrowingRequest(String[] args) {\n    }\n}\n```", "id": 1517, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.time.LocalDate;\npublic class LibraryBorrowingServiceTest {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n    @org.junit.jupiter.api.AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n    @Test\n    public void testCorrectInput() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\", \"2023-04-15\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"图书借阅成功\"));\n    }\n    @Test\n    public void testIncorrectInputLength() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"输入格式错误\"));\n    }\n    @Test\n    public void testInvalidDateFormat() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\", \"2023/04/15\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"日期格式错误\"));\n    }\n    @Test\n    public void testReturnDateBeforeBorrowDate() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-15\", \"2023-04-01\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"预计归还日期应该在借阅日期之后\"));\n    }\n    @Test\n    public void testBorrowDateEqualsReturnDate() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-15\", \"2023-04-15\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"预计归还日期应该在借阅日期之后\"));\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\npublic class ImmutableCircle {\n    private final Color color;\n    public ImmutableCircle(Color color) {\n        this.color = color;\n    }\n    public void changeColor(Color newColor) {\n        throw new UnsupportedOperationException(\"圆形是不可变的，不能改变颜色\");\n    }\n    public Color getColor() {\n        return color;\n    }\n}\nclass CheckImmutableCircle {\n    public static void main(String[] args) {\n        ImmutableCircle circle = new ImmutableCircle(Color.RED);\n        try {\n            circle.changeColor(Color.BLUE);\n            System.out.println(\"错误：不应该能够改变颜色\");\n        } catch (UnsupportedOperationException e) {\n            System.out.println(\"正确：抛出了不支持操作的异常，因为圆形是不可变的\");\n        }\n        if (circle.getColor().equals(Color.RED)) {\n            System.out.println(\"正确：圆形的颜色没有改变\");\n        } else {\n            System.out.println(\"错误：圆形的颜色不应该改变\");\n        }\n    }\n}", "content": "请编写一个Java类`ImmutableCircle`，该类代表一个不可变的圆。该类应该包含一个方法`changeColor(Color newColor)`，尝试改变圆的颜色。然而，由于圆是不可变的，这个方法应该抛出一个异常，提示用户这个对象是只读的，不能改变颜色。请确保你的代码包含了必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.awt.Color;\npublic class ImmutableCircle {\n    private final Color color;\n    public ImmutableCircle(Color color) {}\n    public void changeColor(Color newColor) {}\n    public Color getColor() {}\n}\n```", "id": 1518, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.awt.Color;\npublic class ImmutableCircleTest {\n    @Test\n    public void testGetColor() {\n        ImmutableCircle circle = new ImmutableCircle(Color.RED);\n        assertEquals(Color.RED, circle.getColor());\n    }\n    @Test\n    public void testChangeColor() {\n        ImmutableCircle circle = new ImmutableCircle(Color.RED);\n        assertThrows(UnsupportedOperationException.class, () -> {\n            circle.changeColor(Color.BLUE);\n        });\n    }\n    @Test\n    public void testConstructor() {\n        ImmutableCircle circle = new ImmutableCircle(Color.GREEN);\n        assertNotNull(circle);\n    }\n    @Test\n    public void testColorIsImmutable() {\n        ImmutableCircle circle = new ImmutableCircle(Color.YELLOW);\n        assertThrows(UnsupportedOperationException.class, () -> {\n            circle.changeColor(Color.BLACK);\n        });\n        assertEquals(Color.YELLOW, circle.getColor());\n    }\n    @Test\n    public void testUnsupportedOperationExceptionMessage() {\n        ImmutableCircle circle = new ImmutableCircle(Color.BLUE);\n        UnsupportedOperationException exception = assertThrows(UnsupportedOperationException.class, () -> {\n            circle.changeColor(Color.WHITE);\n        });\n        assertEquals(\"圆形是不可变的，不能改变颜色\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import org.junit.jupiter.api.Assertions;\npublic class SchoolManagement {\n    static class Course {\n        private String code;\n        private String name;\n        private int semester;\n        private int credits;\n        public Course(String code, String name, int semester, int credits) {\n            this.code = code;\n            this.name = name;\n            this.semester = semester;\n            this.credits = credits;\n        }\n        public String getCode() {\n            return code;\n        }\n    }\n    public static void testCourseGetCode() {\n        Course course = new Course(\"ENG101\", \"English Basics\", 1, 4);\n        Assertions.assertEquals(\"ENG101\", course.getCode());\n    }\n    public static void main(String[] args) {\n        testCourseGetCode();\n    }\n}", "content": "请编写一个Java程序，用于管理学校的课程信息。具体要求如下：\n\n- 需要有一个课程类（Course），包含课程代码（code）、课程名称（name）、学期（semester）和学分（credits）四个属性。\n- 为课程类提供一个构造函数，可以初始化这四个属性。\n- 提供一个方法`getCode()`，用于获取课程代码。\n- 编写一个测试方法`testCourseGetCode()`，创建一个课程实例，并使用`getCode()`方法获取课程代码，然后验证获取的课程代码是否正确。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport org.junit.jupiter.api.Assertions;\npublic class SchoolManagement {\n    static class Course {\n        private String code;\n        private String name;\n        private int semester;\n        private int credits;\n        public Course(String code, String name, int semester, int credits) {\n        }\n        public String getCode() {\n            return code;\n        }\n    }\n}\n```", "id": 1519, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class SchoolManagementTest {\n    @Test\n    public void testCourseConstructorAndGetters() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"ENG101\", \"English Basics\", 1, 4);\n        Assertions.assertEquals(\"ENG101\", course.getCode());\n        Assertions.assertNotNull(course);\n        Assertions.assertEquals(\"ENG101\", course.getCode());\n    }\n    @Test\n    public void testCourseCode() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"CS101\", \"Computer Science Basics\", 1, 3);\n        Assertions.assertEquals(\"CS101\", course.getCode());\n    }\n    @Test\n    public void testInvalidCourseCode() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"MAT101\", \"Mathematics Basics\", 1, 3);\n        Assertions.assertNotEquals(\"PHY101\", course.getCode());\n    }\n    @Test\n    public void testCourseWithDifferentSemester() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"HIS101\", \"History Basics\", 2, 3);\n        Assertions.assertEquals(\"HIS101\", course.getCode());\n    }\n    @Test\n    public void testCourseWithDifferentCredits() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"BIO101\", \"Biology Basics\", 1, 5);\n        Assertions.assertEquals(\"BIO101\", course.getCode());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private static Map<String, String[]> booksDatabase = new HashMap<>();\n    static {\n        booksDatabase.put(\"001\", new String[]{\"Java基础\", \"张三\"});\n        booksDatabase.put(\"002\", new String[]{\"算法导论\", \"李四\"});\n        booksDatabase.put(\"003\", new String[]{\"操作系统\", \"王五\"});\n    }\n    public static String getBookDetails(String bookId) {\n        if (booksDatabase.containsKey(bookId)) {\n            String[] details = booksDatabase.get(bookId);\n            return \"书名: \" + details[0] + \", 作者: \" + details[1];\n        } else {\n            return \"错误：图书ID不存在。\";\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(getBookDetails(\"001\")); \n        System.out.println(getBookDetails(\"004\")); \n    }\n}", "content": "请编写一个Java方法，该方法能够查询并返回一个特定的图书信息。假设我们有一个图书管理系统，每本图书都有一个唯一的ID、书名和作者。现在我们需要根据图书的ID获取图书的详细信息。请实现一个名为`getBookDetails`的方法，该方法接收图书ID作为参数，并返回一个包含书名和作者的字符串。如果图书ID不存在，则返回一个指定的错误信息字符串。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private static Map<String, String[]> booksDatabase = new HashMap<>();\n    static {\n        booksDatabase.put(\"001\", new String[]{\"Java基础\", \"张三\"});\n        booksDatabase.put(\"002\", new String[]{\"算法导论\", \"李四\"});\n        booksDatabase.put(\"003\", new String[]{\"操作系统\", \"王五\"});\n    }\n    public static String getBookDetails(String bookId) {\n    }\n}\n```", "id": 1520, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Assert;\npublic class BookFinderTest {\n    @Test\n    public void testValidBookId() {\n        String bookId = \"001\";\n        String expected = \"书名: Java基础, 作者: 张三\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testValidBookId2() {\n        String bookId = \"002\";\n        String expected = \"书名: 算法导论, 作者: 李四\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testInvalidBookId() {\n        String bookId = \"004\";\n        String expected = \"错误：图书ID不存在。\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testValidBookId3() {\n        String bookId = \"003\";\n        String expected = \"书名: 操作系统, 作者: 王五\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testEmptyBookId() {\n        String bookId = \"\";\n        String expected = \"错误：图书ID不存在。\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.Set;\nimport java.util.HashSet;\nclass DefaultTask {\n    public static final java.util.Map<String, Set<String>> DEFAULT_TOOLS = new java.util.HashMap<>();\n    static {\n        Set<String> toolsForTaskA = new HashSet<>();\n        toolsForTaskA.add(\"Tool1\");\n        toolsForTaskA.add(\"Tool2\");\n        DEFAULT_TOOLS.put(\"TaskA\", toolsForTaskA);\n        Set<String> toolsForTaskB = new HashSet<>();\n        toolsForTaskB.add(\"Tool3\");\n        DEFAULT_TOOLS.put(\"TaskB\", toolsForTaskB);\n    }\n}\nclass CustomTask {\n    public static final java.util.Map<String, Set<String>> CUSTOM_TOOLS = new java.util.HashMap<>();\n    static {\n        Set<String> toolsForTaskC = new HashSet<>();\n        toolsForTaskC.add(\"Tool4\");\n        CUSTOM_TOOLS.put(\"TaskC\", toolsForTaskC);\n    }\n}\npublic class TaskToolFinder {\n    public static Set<String> getRequiredTools(final String taskName) {\n        if (DefaultTask.DEFAULT_TOOLS.containsKey(taskName)) {\n            Set<String> requiredTools = new HashSet<>(DefaultTask.DEFAULT_TOOLS.get(taskName));\n            requiredTools.add(taskName);\n            return requiredTools;\n        } else if (CustomTask.CUSTOM_TOOLS.containsKey(taskName)) {\n            Set<String> requiredTools = new HashSet<>(CustomTask.CUSTOM_TOOLS.get(taskName));\n            requiredTools.add(taskName);\n            return requiredTools;\n        } else {\n            throw new IllegalArgumentException(String.format(\"%s is not a supported task.\", taskName));\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(getRequiredTools(\"TaskA\")); \n        System.out.println(getRequiredTools(\"TaskC\")); \n        try {\n            System.out.println(getRequiredTools(\"TaskX\")); \n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，用于获取指定任务所需的所有工具名称。假设我们有两种类型的任务：默认任务和自定义任务，每种任务都需要一组特定的工具来完成。默认任务的工具需求在`DefaultTask`类的`DEFAULT_TOOLS`常量中定义，而自定义任务的工具需求在`CustomTask`类的`CUSTOM_TOOLS`常量中定义。方法应该接受一个任务名称作为输入参数，并返回一个包含该任务及其所有依赖工具名称的集合。如果给定的任务名称既不是默认任务也不是自定义任务，则应抛出`IllegalArgumentException`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Set;\nimport java.util.HashSet;\nclass DefaultTask {\n    public static final java.util.Map<String, Set<String>> DEFAULT_TOOLS = new java.util.HashMap<>();\n    static {\n    }\n}\nclass CustomTask {\n    public static final java.util.Map<String, Set<String>> CUSTOM_TOOLS = new java.util.HashMap<>();\n    static {\n    }\n}\npublic class TaskToolFinder {\n    public static Set<String> getRequiredTools(final String taskName) {\n    }\n}\n```", "id": 1521, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Map;\nclass TaskToolFinderTest {\n    @Test\n    public void testGetRequiredToolsForTaskA() {\n        Set<String> expectedTools = new HashSet<>();\n        expectedTools.add(\"Tool1\");\n        expectedTools.add(\"Tool2\");\n        expectedTools.add(\"TaskA\");\n        assertEquals(expectedTools, TaskToolFinder.getRequiredTools(\"TaskA\"));\n    }\n    @Test\n    public void testGetRequiredToolsForTaskC() {\n        Set<String> expectedTools = new HashSet<>();\n        expectedTools.add(\"Tool4\");\n        expectedTools.add(\"TaskC\");\n        assertEquals(expectedTools, TaskToolFinder.getRequiredTools(\"TaskC\"));\n    }\n    @Test\n    public void testGetRequiredToolsForUnsupportedTask() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            TaskToolFinder.getRequiredTools(\"TaskX\");\n        });\n    }\n    @Test\n    public void testGetRequiredToolsForTaskB() {\n        Set<String> expectedTools = new HashSet<>();\n        expectedTools.add(\"Tool3\");\n        expectedTools.add(\"TaskB\");\n        assertEquals(expectedTools, TaskToolFinder.getRequiredTools(\"TaskB\"));\n    }\n    @Test\n    public void testGetRequiredToolsForAnotherUnsupportedTask() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            TaskToolFinder.getRequiredTools(\"TaskD\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public double divide(double a, double b) throws ArithmeticException {\n        if (b == 0) {\n            throw new ArithmeticException(\"不能除以零\");\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入两个数字和一个操作符（+、-、*、/），例如：3 4 +\");\n        double num1 = scanner.nextDouble();\n        double num2 = scanner.nextDouble();\n        char operator = scanner.next().charAt(0);\n        try {\n            switch (operator) {\n                case '+':\n                    System.out.println(\"结果是：\" + calculator.add(num1, num2));\n                    break;\n                case '-':\n                    System.out.println(\"结果是：\" + calculator.subtract(num1, num2));\n                    break;\n                case '*':\n                    System.out.println(\"结果是：\" + calculator.multiply(num1, num2));\n                    break;\n                case '/':\n                    System.out.println(\"结果是：\" + calculator.divide(num1, num2));\n                    break;\n                default:\n                    System.out.println(\"未知的操作符：\" + operator);\n            }\n        } catch (ArithmeticException e) {\n            System.out.println(\"错误：\" + e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个类应该能够执行基本的算术运算：加法、减法、乘法和除法。请确保你的程序能够处理除以零的情况，抛出一个`ArithmeticException`异常，并附带错误信息\"不能除以零\"。请遵循以下指导原则：\n\n- 代码必须包含所有必要的导入语句。\n- 类和方法的命名应该清晰、简洁。\n- 使用注释和文档字符串来增强代码的可读性。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n        \n    }\n    public double subtract(double a, double b) {\n        \n    }\n    public double multiply(double a, double b) {\n        \n    }\n    public double divide(double a, double b) throws ArithmeticException {\n        \n    }\n}\n```", "id": 1522, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    private SimpleCalculator calculator;\n    @BeforeEach\n    public void setup() {\n        calculator = new SimpleCalculator();\n    }\n    @Test\n    public void testAdd() {\n        assertEquals(5.0, calculator.add(2.0, 3.0));\n        assertEquals(-1.0, calculator.add(-2.0, 1.0));\n        assertEquals(0.0, calculator.add(2.0, -2.0));\n    }\n    @Test\n    public void testSubtract() {\n        assertEquals(-1.0, calculator.subtract(2.0, 3.0));\n        assertEquals(-3.0, calculator.subtract(-2.0, 1.0));\n        assertEquals(4.0, calculator.subtract(2.0, -2.0));\n    }\n    @Test\n    public void testMultiply() {\n        assertEquals(6.0, calculator.multiply(2.0, 3.0));\n        assertEquals(-2.0, calculator.multiply(-2.0, 1.0));\n        assertEquals(-4.0, calculator.multiply(2.0, -2.0));\n    }\n    @Test\n    public void testDivide() {\n        assertEquals(2.0, calculator.divide(6.0, 3.0));\n        assertEquals(-2.0, calculator.divide(-6.0, 3.0));\n        assertEquals(-1.0, calculator.divide(2.0, -2.0));\n    }\n    @Test\n    public void testDivideByZero() {\n        Exception exception = assertThrows(ArithmeticException.class, () -> {\n            calculator.divide(1.0, 0.0);\n        });\n        assertEquals(\"不能除以零\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class DirectionConverter {\n    public static String convertToChineseName(int directionCode) {\n        switch (directionCode) {\n            case 1:\n                return \"上\";\n            case 2:\n                return \"下\";\n            case 3:\n                return \"左\";\n            case 4:\n                return \"右\";\n            default:\n                throw new IllegalArgumentException(\"无效的方向代码\");\n        }\n    }\n    public static void checkFunction() {\n        assert \"上\".equals(convertToChineseName(1)) : \"代码1应该返回上\";\n        assert \"下\".equals(convertToChineseName(2)) : \"代码2应该返回下\";\n        assert \"左\".equals(convertToChineseName(3)) : \"代码3应该返回左\";\n        assert \"右\".equals(convertToChineseName(4)) : \"代码4应该返回右\";\n        try {\n            convertToChineseName(0);\n            assert false : \"无效的方向代码应该抛出异常\";\n        } catch (IllegalArgumentException e) {\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "请编写一个Java方法`convertToChineseName`，该方法接收一个整数参数`directionCode`，并根据该参数返回相应的中文方向名称。具体要求如下：\n\n- 如果`directionCode`为1，返回\"上\"。\n- 如果`directionCode`为2，返回\"下\"。\n- 如果`directionCode`为3，返回\"左\"。\n- 如果`directionCode`为4，返回\"右\"。\n- 如果`directionCode`不是1、2、3、4中的任何一个，抛出`IllegalArgumentException`异常，并提示\"无效的方向代码\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class DirectionConverter {\n    public static String convertToChineseName(int directionCode) {\n    }\n}\n```", "id": 1523, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DirectionConverterTest {\n    @Test\n    public void testConvertToChineseName_Up() {\n        assertEquals(\"上\", DirectionConverter.convertToChineseName(1));\n    }\n    @Test\n    public void testConvertToChineseName_Down() {\n        assertEquals(\"下\", DirectionConverter.convertToChineseName(2));\n    }\n    @Test\n    public void testConvertToChineseName_Left() {\n        assertEquals(\"左\", DirectionConverter.convertToChineseName(3));\n    }\n    @Test\n    public void testConvertToChineseName_Right() {\n        assertEquals(\"右\", DirectionConverter.convertToChineseName(4));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testConvertToChineseName_InvalidCode() {\n        DirectionConverter.convertToChineseName(0);\n    }\n}"}}
{"canonical_solution": "import javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\nimport java.util.List;\npublic class ScoreLoader {\n    private JTable studentScoreTable;\n    public ScoreLoader(JTable table) {\n        this.studentScoreTable = table;\n    }\n    public void loadScoresToTable(List<Student> students) {\n        DefaultTableModel model = (DefaultTableModel) studentScoreTable.getModel();\n        model.setColumnIdentifiers(new Object[]{\"姓名\", \"分数\"});\n        for (Student student : students) {\n            model.addRow(new Object[]{student.getName(), student.getScore()});\n        }\n    }\n    public static class Student {\n        private String name;\n        private int score;\n        public Student(String name, int score) {\n            this.name = name;\n            this.score = score;\n        }\n        public String getName() {\n            return name;\n        }\n        public int getScore() {\n            return score;\n        }\n    }\n    public static void main(String[] args) {\n        JTable table = new JTable();\n        ScoreLoader loader = new ScoreLoader(table);\n        loader.loadScoresToTable(List.of(\n                new Student(\"张三\", 88),\n                new Student(\"李四\", 92),\n                new Student(\"王五\", 76)\n        ));\n        System.out.println(table.getModel().getValueAt(0, 0).equals(\"张三\") &&\n                           (int)table.getModel().getValueAt(0, 1) == 88);\n        System.out.println(table.getModel().getValueAt(1, 0).equals(\"李四\") &&\n                           (int)table.getModel().getValueAt(1, 1) == 92);\n        System.out.println(table.getModel().getValueAt(2, 0).equals(\"王五\") &&\n                           (int)table.getModel().getValueAt(2, 1) == 76);\n    }\n}", "content": "请编写一个Java方法，该方法用于将一组学生的成绩加载到一个图形用户界面（GUI）表格中。假设你已经有一个名为`StudentScoreTable`的表格，你需要将学生姓名和他们的分数填充到这个表格中。学生信息是通过一个学生对象列表提供的，每个学生对象包含学生的姓名和分数。请确保你的方法能够创建一个适当的表格模型，并将学生数据正确填充到表格中。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\nimport java.util.List;\npublic class ScoreLoader {\n    private JTable studentScoreTable;\n    public ScoreLoader(JTable table) {\n    }\n    public void loadScoresToTable(List<Student> students) {\n    }\n    public static class Student {\n        private String name;\n        private int score;\n        public Student(String name, int score) {\n        }\n        public String getName() {\n        }\n        public int getScore() {\n        }\n    }\n}\n```", "id": 1524, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class ScoreLoaderTest {\n    private JTable table;\n    private ScoreLoader loader;\n    @BeforeEach\n    public void setUp() {\n        table = new JTable();\n        loader = new ScoreLoader(table);\n    }\n    @Test\n    public void testLoadScoresToTable() {\n        List<ScoreLoader.Student> students = List.of(\n                new ScoreLoader.Student(\"张三\", 88),\n                new ScoreLoader.Student(\"李四\", 92),\n                new ScoreLoader.Student(\"王五\", 76)\n        );\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(\"张三\", model.getValueAt(0, 0));\n        assertEquals(88, model.getValueAt(0, 1));\n        assertEquals(\"李四\", model.getValueAt(1, 0));\n        assertEquals(92, model.getValueAt(1, 1));\n        assertEquals(\"王五\", model.getValueAt(2, 0));\n        assertEquals(76, model.getValueAt(2, 1));\n    }\n    @Test\n    public void testEmptyStudentList() {\n        List<ScoreLoader.Student> students = new ArrayList<>();\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(0, model.getRowCount());\n    }\n    @Test\n    public void testNullStudentList() {\n        assertThrows(NullPointerException.class, () -> {\n            loader.loadScoresToTable(null);\n        });\n    }\n    @Test\n    public void testSingleStudent() {\n        List<ScoreLoader.Student> students = List.of(\n                new ScoreLoader.Student(\"单一学生\", 100)\n        );\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(\"单一学生\", model.getValueAt(0, 0));\n        assertEquals(100, model.getValueAt(0, 1));\n    }\n    @Test\n    public void testLoadMultipleStudent() {\n        List<ScoreLoader.Student> students = List.of(\n                new ScoreLoader.Student(\"学生A\", 80),\n                new ScoreLoader.Student(\"学生B\", 90)\n        );\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(\"学生A\", model.getValueAt(0, 0));\n        assertEquals(80, model.getValueAt(0, 1));\n        assertEquals(\"学生B\", model.getValueAt(1, 0));\n        assertEquals(90, model.getValueAt(1, 1));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\npublic class BookManager {\n    private final List<Book> books;\n    public BookManager() {\n        books = new ArrayList<>();\n    }\n    public void addBook(String name, String author) {\n        books.add(new Book(name, author));\n    }\n    public Optional<Book> findBookByName(String name) {\n        return books.stream()\n                .filter(book -> book.getName().equals(name))\n                .findFirst();\n    }\n    static class Book {\n        private final String name;\n        private final String author;\n        public Book(String name, String author) {\n            this.name = name;\n            this.author = author;\n        }\n        public String getName() {\n            return name;\n        }\n        public String getAuthor() {\n            return author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"name='\" + name + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        manager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        check(manager);\n    }\n    private static void check(BookManager manager) {\n        System.out.println(\"查询 'Java编程思想': \" + manager.findBookByName(\"Java编程思想\").orElse(null));\n        System.out.println(\"查询 'Effective Java': \" + manager.findBookByName(\"Effective Java\").orElse(null));\n        System.out.println(\"查询 '不存在的书': \" + manager.findBookByName(\"不存在的书\").orElse(null));\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统。该系统应该能够让用户添加图书信息，并且能够根据图书的名称查询图书信息。每本图书的信息包括图书的名称和作者。请确保你的代码是自包含的，并且所有使用到的包都在代码片段的开始部分被导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\npublic class BookManager {\n    private final List<Book> books;\n    public BookManager() {\n    }\n    public void addBook(String name, String author) {\n    }\n    public Optional<Book> findBookByName(String name) {\n    }\n    static class Book {\n        private final String name;\n        private final String author;\n        public Book(String name, String author) {\n        }\n        public String getName() {\n        }\n        public String getAuthor() {\n        }\n        @Override\n        public String toString() {\n        }\n    }\n}\n```", "id": 1525, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Optional;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @BeforeEach\n    void setUp() {\n        bookManager = new BookManager();\n    }\n    @Test\n    void testAddBookAndFindBookByName() {\n        bookManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        Optional<BookManager.Book> result = bookManager.findBookByName(\"Java编程思想\");\n        assertTrue(result.isPresent());\n        assertEquals(\"Java编程思想\", result.get().getName());\n        assertEquals(\"Bruce Eckel\", result.get().getAuthor());\n    }\n    @Test\n    void testFindBookByNameWhenBookDoesNotExist() {\n        Optional<BookManager.Book> result = bookManager.findBookByName(\"不存在的书\");\n        assertFalse(result.isPresent());\n    }\n    @Test\n    void testAddMultipleBooksAndFindEachByName() {\n        bookManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        bookManager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        Optional<BookManager.Book> result1 = bookManager.findBookByName(\"Java编程思想\");\n        assertTrue(result1.isPresent());\n        assertEquals(\"Java编程思想\", result1.get().getName());\n        assertEquals(\"Bruce Eckel\", result1.get().getAuthor());\n        Optional<BookManager.Book> result2 = bookManager.findBookByName(\"Effective Java\");\n        assertTrue(result2.isPresent());\n        assertEquals(\"Effective Java\", result2.get().getName());\n        assertEquals(\"Joshua Bloch\", result2.get().getAuthor());\n    }\n    @Test\n    void testBookToString() {\n        BookManager.Book book = new BookManager.Book(\"Java编程思想\", \"Bruce Eckel\");\n        String expectedString = \"Book{name='Java编程思想', author='Bruce Eckel'}\";\n        assertEquals(expectedString, book.toString());\n    }\n    @Test\n    void testGettersForBook() {\n        BookManager.Book book = new BookManager.Book(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> bookStatusMap;\n    public BookManager() {\n        bookStatusMap = new HashMap<>();\n    }\n    public void updateBookStatus(String bookId, String newStatus) {\n        bookStatusMap.put(bookId, newStatus);\n    }\n    public String checkStatus(String bookId) {\n        return bookStatusMap.getOrDefault(bookId, \"UNKNOWN\");\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.updateBookStatus(\"123\", \"AVAILABLE\");\n        manager.updateBookStatus(\"456\", \"BORROWED\");\n        manager.updateBookStatus(\"789\", \"UNDER_REPAIR\");\n        System.out.println(\"书籍123的状态: \" + manager.checkStatus(\"123\")); \n        System.out.println(\"书籍456的状态: \" + manager.checkStatus(\"456\")); \n        System.out.println(\"书籍789的状态: \" + manager.checkStatus(\"789\")); \n        System.out.println(\"书籍000的状态: \" + manager.checkStatus(\"000\")); \n    }\n}", "content": "请设计一个简单的Java程序，用于管理一个图书馆的书籍借阅状态。图书馆中的每本书都可以处于三种状态之一：可借阅（AVAILABLE）、已借出（BORROWED）、或维修中（UNDER_REPAIR）。你需要实现一个名为`BookManager`的类，其中包含一个名为`updateBookStatus`的方法。该方法接收两个参数：`bookId`（书籍的唯一标识符）和`newStatus`（书籍的新状态），并根据这些信息更新书籍的状态。\n\n请确保在设计中考虑所有必要的包。此外，提供一个`checkStatus`方法来返回书籍当前的状态。`checkStatus`方法应该接收一个书籍的标识符，并返回该书籍当前的状态。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> bookStatusMap;\n    public BookManager() {\n    }\n    public void updateBookStatus(String bookId, String newStatus) {\n    }\n    public String checkStatus(String bookId) {\n    }\n}\n```", "id": 1526, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @Before\n    public void setUp() {\n        bookManager = new BookManager();\n    }\n    @Test\n    public void testUpdateBookStatus() {\n        bookManager.updateBookStatus(\"123\", \"AVAILABLE\");\n        String status = bookManager.checkStatus(\"123\");\n        Assert.assertEquals(\"AVAILABLE\", status);\n    }\n    @Test\n    public void testCheckStatusWithUnknownBook() {\n        String status = bookManager.checkStatus(\"000\");\n        Assert.assertEquals(\"UNKNOWN\", status);\n    }\n    @Test\n    public void testUpdateBookStatusMultipleUpdates() {\n        bookManager.updateBookStatus(\"456\", \"BORROWED\");\n        bookManager.updateBookStatus(\"456\", \"AVAILABLE\");\n        String status = bookManager.checkStatus(\"456\");\n        Assert.assertEquals(\"AVAILABLE\", status);\n    }\n    @Test\n    public void testCheckStatusUnderRepair() {\n        bookManager.updateBookStatus(\"789\", \"UNDER_REPAIR\");\n        String status = bookManager.checkStatus(\"789\");\n        Assert.assertEquals(\"UNDER_REPAIR\", status);\n    }\n    @Test\n    public void testUpdateDifferentBooks() {\n        bookManager.updateBookStatus(\"123\", \"AVAILABLE\");\n        bookManager.updateBookStatus(\"456\", \"BORROWED\");\n        bookManager.updateBookStatus(\"789\", \"UNDER_REPAIR\");\n        Assert.assertEquals(\"AVAILABLE\", bookManager.checkStatus(\"123\"));\n        Assert.assertEquals(\"BORROWED\", bookManager.checkStatus(\"456\"));\n        Assert.assertEquals(\"UNDER_REPAIR\", bookManager.checkStatus(\"789\"));\n    }\n}"}}
{"canonical_solution": "import java.text.DecimalFormat;\npublic class BankAccount {\n    public double calculateInterest(double amount, int duration) {\n        double annualInterestRate = 0.05; \n        double interest = amount * annualInterestRate * duration;\n        return interest;\n    }\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(10000, 2); \n        DecimalFormat df = new DecimalFormat(\"#.00\");\n        System.out.println(\"计算得到的利息为: \" + df.format(interest) + \"元\");\n        check(interest);\n    }\n    public static void check(double calculatedInterest) {\n        double expectedInterest = 1000.0; \n        if (Math.abs(calculatedInterest - expectedInterest) < 0.01) {\n            System.out.println(\"计算结果正确。\");\n        } else {\n            System.out.println(\"计算结果不正确，预期的利息为: \" + expectedInterest + \"元，但计算得到: \" + calculatedInterest + \"元。\");\n        }\n    }\n}", "content": "请编写一个Java程序，用于计算银行账户的利息。程序应包含一个名为`BankAccount`的类，该类中包含一个名为`calculateInterest`的方法。该方法接收两个参数：`amount`（本金金额）和`duration`（存款期限，以年为单位），并返回计算得到的利息值。假设年利率为5%。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.text.DecimalFormat;\npublic class BankAccount {\n    public double calculateInterest(double amount, int duration) {\n    }\n}\n```", "id": 1527, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class BankAccountTest {\n    @Test\n    public void testCalculateInterest_10000_2() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(10000, 2);\n        assertEquals(1000.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_5000_1() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(5000, 1);\n        assertEquals(250.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_20000_3() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(20000, 3);\n        assertEquals(3000.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_0_Any() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(0, 5);\n        assertEquals(0.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_NegativeAmount() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(-10000, 2);\n        assertEquals(-1000.0, interest, 0.01);\n    }\n}"}}
{"canonical_solution": "import java.awt.Component;\nimport java.awt.Cursor;\npublic class CursorUpdater {\n    private Component uiComponent;\n    public CursorUpdater(Component uiComponent) {\n        this.uiComponent = uiComponent;\n    }\n    public void updateCursorStyle(Cursor newCursor) {\n        if (newCursor == null) {\n            uiComponent.setCursor(Cursor.getDefaultCursor());\n        } else {\n            uiComponent.setCursor(newCursor);\n        }\n    }\n    public static void main(String[] args) {\n        Component dummyComponent = new Component() {};\n        CursorUpdater cursorUpdater = new CursorUpdater(dummyComponent);\n        cursorUpdater.updateCursorStyle(null);\n        assert dummyComponent.getCursor().getType() == Cursor.DEFAULT_CURSOR : \"光标应该设置为默认光标\";\n        Cursor customCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\n        cursorUpdater.updateCursorStyle(customCursor);\n        assert dummyComponent.getCursor().getType() == Cursor.HAND_CURSOR : \"光标应该设置为手形光标\";\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "请编写一个Java方法，用于更新用户界面组件的鼠标光标样式。如果传入的光标对象是`null`，则应将组件的光标设置为默认光标。否则，应将组件的光标设置为传入的光标样式。请确保代码能够处理类型转换，并且在设置光标时不会引发异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.awt.Component;\nimport java.awt.Cursor;\npublic class CursorUpdater {\n    private Component uiComponent;\n    public CursorUpdater(Component uiComponent) {\n    }\n    public void updateCursorStyle(Cursor newCursor) {\n    }\n}\n```", "id": 1528, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.awt.Component;\nimport java.awt.Cursor;\npublic class CursorUpdaterTest {\n    private Component dummyComponent;\n    private CursorUpdater cursorUpdater;\n    @BeforeEach\n    public void setUp() {\n        dummyComponent = new Component() {};\n        cursorUpdater = new CursorUpdater(dummyComponent);\n    }\n    @Test\n    public void testUpdateCursorStyleWithNull() {\n        cursorUpdater.updateCursorStyle(null);\n        assertEquals(Cursor.getDefaultCursor(), dummyComponent.getCursor(), \"光标应该设置为默认光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithHandCursor() {\n        Cursor customCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\n        cursorUpdater.updateCursorStyle(customCursor);\n        assertEquals(customCursor, dummyComponent.getCursor(), \"光标应该设置为手形光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithWaitCursor() {\n        Cursor waitCursor = Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);\n        cursorUpdater.updateCursorStyle(waitCursor);\n        assertEquals(waitCursor, dummyComponent.getCursor(), \"光标应该设置为等待光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithCrosshairCursor() {\n        Cursor crosshairCursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);\n        cursorUpdater.updateCursorStyle(crosshairCursor);\n        assertEquals(crosshairCursor, dummyComponent.getCursor(), \"光标应该设置为十字光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithMoveCursor() {\n        Cursor moveCursor = Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR);\n        cursorUpdater.updateCursorStyle(moveCursor);\n        assertEquals(moveCursor, dummyComponent.getCursor(), \"光标应该设置为移动光标\");\n    }\n}"}}
{"canonical_solution": "import java.util.Map;\npublic class LibraryReportGenerator {\n    public static String generateReport(Map<String, Integer> bookStats) {\n        StringBuilder report = new StringBuilder();\n        bookStats.forEach((type, quantity) -> report.append(type).append(\": \").append(quantity).append(\"\\n\"));\n        return report.toString();\n    }\n    public static void main(String[] args) {\n        Map<String, Integer> bookStats = Map.of(\n            \"小说\", 150,\n            \"科幻\", 90,\n            \"历史\", 120\n        );\n        String report = generateReport(bookStats);\n        System.out.println(report);\n        checkReport(report);\n    }\n    private static void checkReport(String report) {\n        assert report.contains(\"小说: 150\");\n        assert report.contains(\"科幻: 90\");\n        assert report.contains(\"历史: 120\");\n        System.out.println(\"报告生成正确！\");\n    }\n}", "content": "请编写一个Java方法，用于生成一个简单的报告，该报告显示了一个虚拟图书馆中不同类型书籍的数量。报告应该以文本形式返回，格式为\"类型: 数量\"，每种类型一行。书籍的类型和数量通过一个`Map<String, Integer>`参数传入，其中键是书籍的类型，值是对应类型的书籍数量。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Map;\npublic class LibraryReportGenerator {\n    public static String generateReport(Map<String, Integer> bookStats) {\n    }\n}\n```", "id": 1529, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Map;\npublic class LibraryReportGeneratorTest {\n    @Test\n    public void testGenerateReportWithValidData() {\n        Map<String, Integer> bookStats = Map.of(\n            \"小说\", 150,\n            \"科幻\", 90,\n            \"历史\", 120\n        );\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertTrue(report.contains(\"小说: 150\"));\n        assertTrue(report.contains(\"科幻: 90\"));\n        assertTrue(report.contains(\"历史: 120\"));\n    }\n    @Test\n    public void testGenerateReportWithEmptyData() {\n        Map<String, Integer> bookStats = Map.of();\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertEquals(\"\", report);\n    }\n    @Test\n    public void testGenerateReportWithSingleEntry() {\n        Map<String, Integer> bookStats = Map.of(\"文学\", 75);\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertEquals(\"文学: 75\\n\", report);\n    }\n    @Test\n    public void testGenerateReportWithMultipleEntries() {\n        Map<String, Integer> bookStats = Map.of(\n            \"文学\", 75,\n            \"艺术\", 55,\n            \"科学\", 100\n        );\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertTrue(report.contains(\"文学: 75\"));\n        assertTrue(report.contains(\"艺术: 55\"));\n        assertTrue(report.contains(\"科学: 100\"));\n    }\n    @Test\n    public void testGenerateReportWithZeroQuantity() {\n        Map<String, Integer> bookStats = Map.of(\n            \"文学\", 0,\n            \"艺术\", 0\n        );\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertTrue(report.contains(\"文学: 0\"));\n        assertTrue(report.contains(\"艺术: 0\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class ShoppingCart {\n    private ArrayList<String> items;\n    public void addItem(String itemName) {\n        if (items == null) {\n            items = new ArrayList<>();\n        }\n        items.add(itemName);\n    }\n    public void removeItem(String itemName) {\n        if (items != null) {\n            items.remove(itemName);\n            if (items.isEmpty()) {\n                items = null;\n            }\n        }\n    }\n    public boolean isEmpty() {\n        return items == null;\n    }\n}\nclass ShoppingCartTest {\n    public static void main(String[] args) {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.addItem(\"香蕉\");\n        cart.removeItem(\"苹果\");\n        cart.removeItem(\"香蕉\");\n        if (cart.isEmpty()) {\n            System.out.println(\"测试成功：购物车为空。\");\n        } else {\n            System.out.println(\"测试失败：购物车不应该有商品。\");\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的购物车功能。在这个购物车中，用户可以添加商品名称到购物车列表中，也可以从列表中删除指定的商品名称。如果购物车变为空，则需要将其设置为null，表示购物车是空的。请确保你的代码是自包含的，并且包含了所有必要的包导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\npublic class ShoppingCart {\n    private ArrayList<String> items;\n    public void addItem(String itemName) {\n    }\n    public void removeItem(String itemName) {\n    }\n    public boolean isEmpty() {\n    }\n}\n```", "id": 1530, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass ShoppingCartTest {\n    @Test\n    void testAddItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        assertFalse(cart.isEmpty());\n    }\n    @Test\n    void testRemoveLastItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.removeItem(\"苹果\");\n        assertTrue(cart.isEmpty());\n    }\n    @Test\n    void testRemoveItemFromMultiple() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.addItem(\"香蕉\");\n        cart.removeItem(\"苹果\");\n        assertFalse(cart.isEmpty());\n    }\n    @Test\n    void testRemoveNonExistentItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.removeItem(\"香蕉\");\n        assertFalse(cart.isEmpty());\n    }\n    @Test\n    void testIsEmptyWhenNew() {\n        ShoppingCart cart = new ShoppingCart();\n        assertTrue(cart.isEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.Date;\nclass Order {\n    private String orderId;\n    private String status;\n    private long cancellationTimestamp;\n    public Order(String orderId, String status) {\n        this.orderId = orderId;\n        this.status = status;\n        this.cancellationTimestamp = 0;\n    }\n    public String getOrderId() {\n        return orderId;\n    }\n    public String getStatus() {\n        return status;\n    }\n    public void setStatus(String status) {\n        this.status = status;\n    }\n    public long getCancellationTimestamp() {\n        return cancellationTimestamp;\n    }\n    public void setCancellationTimestamp(long cancellationTimestamp) {\n        this.cancellationTimestamp = cancellationTimestamp;\n    }\n}\npublic class OrderCancellation {\n    public Order cancelOrder(Order order) {\n        if (!\"CANCELLED\".equals(order.getStatus())) {\n            order.setStatus(\"CANCELLED\");\n            order.setCancellationTimestamp(System.currentTimeMillis());\n        }\n        return order;\n    }\n    public static void main(String[] args) {\n        OrderCancellation orderCancellation = new OrderCancellation();\n        Order order = new Order(\"12345\", \"PROCESSING\");\n        System.out.println(\"订单取消前的状态: \" + order.getStatus());\n        order = orderCancellation.cancelOrder(order);\n        System.out.println(\"订单取消后的状态: \" + order.getStatus());\n        System.out.println(\"订单取消的时间戳: \" + new Date(order.getCancellationTimestamp()));\n    }\n}", "content": "请设计一个Java程序，用于处理在线购物订单的取消操作。在一个电商平台上，当用户决定取消订单时，系统需要执行一系列的操作来更新订单状态，并且记录取消的时间戳。请实现一个名为`OrderCancellation`的类，其中包含一个名为`cancelOrder`的方法。该方法接收一个订单对象`Order`作为参数，并返回更新后的订单对象。如果订单已经被取消，则不执行任何操作直接返回原订单对象。订单取消后，需要将订单状态更新为\"CANCELLED\"，并记录取消的时间戳。\n\n请遵循以下指导原则：\n- 方法应该处理订单已经被取消的情况，即如果订单状态已经是\"CANCELLED\"，则直接返回订单对象不做任何修改。\n- 订单取消后，需要更新订单状态为\"CANCELLED\"，并记录取消的时间戳。\n- 使用`System.currentTimeMillis()`获取当前时间戳。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Date;\nclass Order {\n    private String orderId;\n    private String status;\n    private long cancellationTimestamp;\n    public Order(String orderId, String status) {\n    }\n    public String getOrderId() {\n    }\n    public String getStatus() {\n    }\n    public void setStatus(String status) {\n    }\n    public long getCancellationTimestamp() {\n    }\n    public void setCancellationTimestamp(long cancellationTimestamp) {\n    }\n}\npublic class OrderCancellation {\n    public Order cancelOrder(Order order) {\n    }\n}\n```", "id": 1531, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\nclass OrderTest {\n    @Test\n    void testInitialStatusAndOrderId() {\n        Order order = new Order(\"12345\", \"PROCESSING\");\n        assertEquals(\"PROCESSING\", order.getStatus());\n        assertEquals(\"12345\", order.getOrderId());\n    }\n    @Test\n    void testCancelOrderChangesStatusAndTimestamp() {\n        Order order = new Order(\"12345\", \"PROCESSING\");\n        OrderCancellation orderCancellation = new OrderCancellation();\n        orderCancellation.cancelOrder(order);\n        assertEquals(\"CANCELLED\", order.getStatus());\n        assertNotEquals(0, order.getCancellationTimestamp());\n        assertTrue(order.getCancellationTimestamp() > 0);\n    }\n    @Test\n    void testCancelAlreadyCancelledOrder() {\n        Order order = new Order(\"12345\", \"CANCELLED\");\n        OrderCancellation orderCancellation = new OrderCancellation();\n        long originalTimestamp = order.getCancellationTimestamp();\n        orderCancellation.cancelOrder(order);\n        assertEquals(\"CANCELLED\", order.getStatus());\n        assertEquals(originalTimestamp, order.getCancellationTimestamp());\n    }\n    @Test\n    void testSetAndGetOrderStatus() {\n        Order order = new Order(\"12345\", \"PENDING\");\n        order.setStatus(\"SHIPPED\");\n        assertEquals(\"SHIPPED\", order.getStatus());\n    }\n    @Test\n    void testSetAndGetCancellationTimestamp() {\n        Order order = new Order(\"12345\", \"PENDING\");\n        long currentTime = System.currentTimeMillis();\n        order.setCancellationTimestamp(currentTime);\n        assertEquals(currentTime, order.getCancellationTimestamp());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class WeatherSystem {\n    private Map<String, String> weatherData;\n    public WeatherSystem() {\n        weatherData = new HashMap<>();\n        weatherData.put(\"北京\", \"晴天\");\n        weatherData.put(\"上海\", \"多云\");\n        weatherData.put(\"广州\", \"雨天\");\n    }\n    public String getWeather(String cityName) {\n        if (weatherData.containsKey(cityName)) {\n            return weatherData.get(cityName);\n        } else {\n            return \"城市名称无效\";\n        }\n    }\n    public static void checkWeather() {\n        WeatherSystem system = new WeatherSystem();\n        System.out.println(\"北京的天气状况是：\" + system.getWeather(\"北京\")); \n        System.out.println(\"上海的天气状况是：\" + system.getWeather(\"上海\")); \n        System.out.println(\"广州的天气状况是：\" + system.getWeather(\"广州\")); \n        System.out.println(\"深圳的天气状况是：\" + system.getWeather(\"深圳\")); \n    }\n    public static void main(String[] args) {\n        checkWeather();\n    }\n}", "content": "请设计一个简单的Java程序，用于模拟一个简易的天气系统。在这个系统中，我们需要能够根据不同的城市名称，返回该城市当前的天气状况。为了简化问题，我们假设只有三个城市：北京、上海和广州，它们的天气状况分别是晴天、多云和雨天。请实现一个名为`WeatherSystem`的类，其中包含一个名为`getWeather`的方法，该方法接受一个字符串参数（城市名称），并返回对应城市的天气状况。如果输入的城市不在我们的列表中，请返回一个提示信息，告知用户城市名称无效。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeatherSystem {\n    private Map<String, String> weatherData;\n    public WeatherSystem() {\n    }\n    public String getWeather(String cityName) {\n    }\n    public static void checkWeather() {\n    }\n}\n```", "id": 1532, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class WeatherSystemTest {\n    private WeatherSystem weatherSystem;\n    @Before\n    public void setUp() {\n        weatherSystem = new WeatherSystem();\n    }\n    @Test\n    public void testGetWeather_Beijing() {\n        String result = weatherSystem.getWeather(\"北京\");\n        assertEquals(\"晴天\", result);\n    }\n    @Test\n    public void testGetWeather_Shanghai() {\n        String result = weatherSystem.getWeather(\"上海\");\n        assertEquals(\"多云\", result);\n    }\n    @Test\n    public void testGetWeather_Guangzhou() {\n        String result = weatherSystem.getWeather(\"广州\");\n        assertEquals(\"雨天\", result);\n    }\n    @Test\n    public void testGetWeather_InvalidCity() {\n        String result = weatherSystem.getWeather(\"深圳\");\n        assertEquals(\"城市名称无效\", result);\n    }\n    @Test\n    public void testGetWeather_NullCity() {\n        String result = weatherSystem.getWeather(null);\n        assertEquals(\"城市名称无效\", result);\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\npublic class TaskManager {\n    private double priority;\n    public TaskManager() {\n        this.priority = 5.0;\n    }\n    public void boostTaskPriority(double priorityBoost) {\n        this.priority += priorityBoost;\n        if (this.priority > 10) {\n            this.priority = 10;\n        }\n    }\n    public double getPriority() {\n        return this.priority;\n    }\n    public void checkPriorityBoost(double priorityBoost) {\n        System.out.println(\"提升前的优先级: \" + this.getPriority());\n        this.boostTaskPriority(priorityBoost);\n        System.out.println(\"提升后的优先级: \" + this.getPriority());\n    }\n    public static void main(String[] args) {\n        TaskManager taskManager = new TaskManager();\n        taskManager.checkPriorityBoost(3.5); \n        taskManager.checkPriorityBoost(5); \n    }\n}", "content": "请编写一个Java程序，实现一个`TaskManager`类，该类中包含一个方法`boostTaskPriority`，用于提高任务的优先级。方法接收一个`double`类型的参数`priorityBoost`，表示需要增加的优先级数值。如果提升后的优先级超过了最大值10，则将优先级设置为10。此外，该类还应包含一个`getPriority`方法，用于获取当前任务的优先级。\n\n请按照以下要求完成编程任务：\n\n- 使用合适的访问修饰符确保封装性。\n- 初始化时，任务的默认优先级为5。\n- 提供一个检查方法`checkPriorityBoost`，用于验证`boostTaskPriority`方法的正确性。该方法应该打印出提升前后的优先级。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.System;\npublic class TaskManager {\n    private double priority;\n    public TaskManager() {}\n    public void boostTaskPriority(double priorityBoost) {}\n    public double getPriority() {\n        return 0;\n    }\n    public void checkPriorityBoost(double priorityBoost) {}\n}\n```", "id": 1533, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class TaskManagerTest {\n    private TaskManager taskManager;\n    @Before\n    public void setUp() {\n        taskManager = new TaskManager();\n    }\n    @Test\n    public void testInitialPriority() {\n        assertEquals(5.0, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityWithinLimit() {\n        taskManager.boostTaskPriority(3.5);\n        assertEquals(8.5, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityBeyondLimit() {\n        taskManager.boostTaskPriority(6.0);\n        assertEquals(10.0, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityToExactLimit() {\n        taskManager.boostTaskPriority(5.0);\n        assertEquals(10.0, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityMultipleTimes() {\n        taskManager.boostTaskPriority(3.0);\n        taskManager.boostTaskPriority(2.0);\n        assertEquals(10.0, taskManager.getPriority(), 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class EmailValidator {\n    private Email email;\n    public EmailValidator(Email email) {\n        this.email = email;\n    }\n    public void validateSubject(String expectedSubject) {\n        if (this.email == null) {\n            throw new IllegalArgumentException(\"Email object is null.\");\n        }\n        String actualSubject = this.email.getSubject();\n        if (!Objects.equals(actualSubject, expectedSubject)) {\n            throw new IllegalArgumentException(String.format(\n                \"Expected email subject to be \\\"%s\\\" but was \\\"%s\\\".\",\n                expectedSubject, actualSubject));\n        }\n    }\n    public static class Email {\n        private String subject;\n        public Email(String subject) {\n            this.subject = subject;\n        }\n        public String getSubject() {\n            return subject;\n        }\n    }\n    public static void main(String[] args) {\n        Email email = new Email(\"Hello World\");\n        EmailValidator validator = new EmailValidator(email);\n        try {\n            validator.validateSubject(\"Hello World\");\n            System.out.println(\"验证成功，主题符合预期。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            validator.validateSubject(\"Goodbye World\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"验证失败：\" + e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，用于验证一个电子邮件对象是否包含特定的主题。如果电子邮件的主题与给定的主题不匹配，应抛出一个异常，异常信息需要明确指出预期的主题和实际的主题。请确保你的代码是自包含的，并且所有需要的包都已经导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    private Email email;\n    public EmailValidator(Email email) {\n    }\n    public void validateSubject(String expectedSubject) {\n    }\n    public static class Email {\n        private String subject;\n        public Email(String subject) {\n        }\n        public String getSubject() {\n        }\n    }\n}\n```", "id": 1534, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\npublic class EmailValidatorTest {\n    @Test\n    public void testValidateSubject_Success() {\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello World\");\n        EmailValidator validator = new EmailValidator(email);\n        validator.validateSubject(\"Hello World\");\n    }\n    @Test\n    public void testValidateSubject_Failure() {\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello World\");\n        EmailValidator validator = new EmailValidator(email);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Goodbye World\");\n        });\n    }\n    @Test\n    public void testValidateSubject_NullEmail() {\n        EmailValidator validator = new EmailValidator(null);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Hello World\");\n        });\n    }\n    @Test\n    public void testValidateSubject_EmptySubject() {\n        EmailValidator.Email email = new EmailValidator.Email(\"\");\n        EmailValidator validator = new EmailValidator(email);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Hello World\");\n        });\n    }\n    @Test\n    public void testValidateSubject_NullSubject() {\n        EmailValidator.Email email = new EmailValidator.Email(null);\n        EmailValidator validator = new EmailValidator(email);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Hello World\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class SimpleLibrarySystem {\n    private List<Book> books;\n    public SimpleLibrarySystem() {\n        this.books = new ArrayList<>();\n    }\n    public void addBook(String title, String author) {\n        books.add(new Book(title, author));\n    }\n    public void removeBook(String title) {\n        books.removeIf(book -> book.title.equals(title));\n    }\n    public Book findBook(String title) {\n        return books.stream()\n                .filter(book -> book.title.equals(title))\n                .findFirst()\n                .orElse(null);\n    }\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"title='\" + title + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void main(String[] args) {\n        SimpleLibrarySystem library = new SimpleLibrarySystem();\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        library.addBook(\"Effective Java\", \"Joshua Bloch\");\n        System.out.println(library.findBook(\"Java编程思想\"));\n        library.removeBook(\"Effective Java\");\n        System.out.println(library.findBook(\"Effective Java\")); \n    }\n}", "content": "请设计一个Java程序，用于管理一个简易的图书馆系统。在这个系统中，我们需要能够添加图书、删除图书和查找图书。每本图书包含书名和作者名。请实现以下功能：\n\n1. 添加图书：当添加一本新书时，系统应该记录下这本书的书名和作者。\n2. 删除图书：通过书名可以从系统中删除一本书。\n3. 查找图书：通过书名可以查找一本书，并返回这本书的详细信息（书名和作者）。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class SimpleLibrarySystem {\n    private List<Book> books;\n    public SimpleLibrarySystem() {\n    }\n    public void addBook(String title, String author) {\n    }\n    public void removeBook(String title) {\n    }\n    public Book findBook(String title) {\n    }\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n        }\n        @Override\n        public String toString() {\n        }\n    }\n}\n```", "id": 1535, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleLibrarySystemTest {\n    private SimpleLibrarySystem library;\n    @BeforeEach\n    public void setUp() {\n        library = new SimpleLibrarySystem();\n    }\n    @Test\n    public void testAddBook() {\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Java编程思想\");\n        assertNotNull(book);\n        assertEquals(\"Java编程思想\", book.title);\n        assertEquals(\"Bruce Eckel\", book.author);\n    }\n    @Test\n    public void testRemoveBook() {\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        library.addBook(\"Effective Java\", \"Joshua Bloch\");\n        library.removeBook(\"Effective Java\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Effective Java\");\n        assertNull(book);\n    }\n    @Test\n    public void testFindBookExists() {\n        library.addBook(\"Effective Java\", \"Joshua Bloch\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Effective Java\");\n        assertNotNull(book);\n        assertEquals(\"Effective Java\", book.title);\n        assertEquals(\"Joshua Bloch\", book.author);\n    }\n    @Test\n    public void testFindBookDoesNotExist() {\n        SimpleLibrarySystem.Book book = library.findBook(\"不存在的书名\");\n        assertNull(book);\n    }\n    @Test\n    public void testRemoveBookNonExistent() {\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        library.removeBook(\"不存在的书名\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Java编程思想\");\n        assertNotNull(book);\n        assertEquals(\"Java编程思想\", book.title);\n        assertEquals(\"Bruce Eckel\", book.author);\n    }\n}"}}
{"canonical_solution": "import java.util.function.Predicate;\nimport java.util.regex.Pattern;\nclass InvalidPhoneNumberException extends Exception {\n    public InvalidPhoneNumberException(String message) {\n        super(message);\n    }\n}\npublic class PhoneNumberValidator {\n    private static final String PHONE_NUMBER_PATTERN = \"^(13|14|15|17|18)\\\\d{9}$\";\n    public boolean validatePhoneNumber(String phoneNumber) throws InvalidPhoneNumberException {\n        Predicate<String> validatePhoneNumber = n -> n.matches(PHONE_NUMBER_PATTERN);\n        boolean result = validatePhoneNumber.test(phoneNumber);\n        if (result) {\n            return true;\n        } else {\n            throw new InvalidPhoneNumberException(\"无效的手机号码\");\n        }\n    }\n    public static void main(String[] args) {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        try {\n            System.out.println(validator.validatePhoneNumber(\"13812345678\")); \n            System.out.println(validator.validatePhoneNumber(\"11812345678\")); \n        } catch (InvalidPhoneNumberException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java程序，用于验证用户输入的手机号码是否符合特定的格式要求。手机号码的格式要求如下：必须以\"13\", \"14\", \"15\", \"17\", 或 \"18\"开头，后面跟着9位数字。如果手机号码符合格式要求，则函数返回`true`；如果不符合，则抛出一个自定义的异常`InvalidPhoneNumberException`，异常信息为\"无效的手机号码\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.function.Predicate;\nimport java.util.regex.Pattern;\nclass InvalidPhoneNumberException extends Exception {\n    public InvalidPhoneNumberException(String message) {\n    }\n}\npublic class PhoneNumberValidator {\n    private static final String PHONE_NUMBER_PATTERN = \"^(13|14|15|17|18)\\\\d{9}$\";\n    public boolean validatePhoneNumber(String phoneNumber) throws InvalidPhoneNumberException {\n    }\n}\n```", "id": 1536, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\npublic class PhoneNumberValidatorTest {\n    @Test\n    public void testValidPhoneNumber() throws InvalidPhoneNumberException {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        boolean isValid = validator.validatePhoneNumber(\"13812345678\");\n        Assertions.assertTrue(isValid);\n    }\n    @Test\n    public void testInvalidPhoneNumber() {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        Assertions.assertThrows(InvalidPhoneNumberException.class, () -> {\n            validator.validatePhoneNumber(\"11812345678\");\n        });\n    }\n    @Test\n    public void testValidPhoneNumberWithDifferentPrefix() throws InvalidPhoneNumberException {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        boolean isValid = validator.validatePhoneNumber(\"15112345678\");\n        Assertions.assertTrue(isValid);\n    }\n    @Test\n    public void testShortInvalidPhoneNumber() {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        Assertions.assertThrows(InvalidPhoneNumberException.class, () -> {\n            validator.validatePhoneNumber(\"138123\");\n        });\n    }\n    @Test\n    public void testEmptyPhoneNumber() {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        Assertions.assertThrows(InvalidPhoneNumberException.class, () -> {\n            validator.validatePhoneNumber(\"\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Scanner;\npublic class BookSearchSystem {\n    private static Scanner scanner = new Scanner(System.in);\n    private static HashMap<Integer, String[]> books = new HashMap<>();\n    public static void initializeBooks() {\n        books.put(1, new String[]{\"Java基础\", \"张三\"});\n        books.put(2, new String[]{\"Python入门\", \"李四\"});\n        books.put(3, new String[]{\"数据结构\", \"王五\"});\n    }\n    public static void searchBook() {\n        System.out.println(\"请输入图书编号：\");\n        int bookId = scanner.nextInt();\n        if (books.containsKey(bookId)) {\n            String[] bookInfo = books.get(bookId);\n            System.out.println(\"图书名称：\" + bookInfo[0] + \", 作者：\" + bookInfo[1]);\n        } else {\n            System.out.println(\"错误：图书编号不存在。\");\n        }\n    }\n    public static void main(String[] args) {\n        initializeBooks();\n        searchBook();\n    }\n}", "content": "请设计一个Java程序，实现一个简单的图书管理系统中的图书查询功能。用户可以通过输入图书的编号来查询图书的信息，包括图书的名称和作者。如果输入的编号不存在，则显示相应的错误消息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class BookSearchSystem {\n    private static Scanner scanner = new Scanner(System.in);\n    private static HashMap<Integer, String[]> books = new HashMap<>();\n    public static void initializeBooks() {\n    }\n    public static void searchBook() {\n    }\n}\n```", "id": 1537, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.HashMap;\nimport java.util.Scanner;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookSearchSystemTest {\n    private static HashMap<Integer, String[]> books;\n    @BeforeAll\n    public static void initializeBooks() {\n        books = new HashMap<>();\n        books.put(1, new String[]{\"Java基础\", \"张三\"});\n        books.put(2, new String[]{\"Python入门\", \"李四\"});\n        books.put(3, new String[]{\"数据结构\", \"王五\"});\n    }\n    @Test\n    public void testInitializeBooks() {\n        assertEquals(3, books.size());\n        assertArrayEquals(new String[]{\"Java基础\", \"张三\"}, books.get(1));\n        assertArrayEquals(new String[]{\"Python入门\", \"李四\"}, books.get(2));\n        assertArrayEquals(new String[]{\"数据结构\", \"王五\"}, books.get(3));\n    }\n    @Test\n    public void testValidBookId() {\n        int bookId = 1;\n        assertTrue(books.containsKey(bookId));\n        String[] bookInfo = books.get(bookId);\n        assertAll(\"bookInfo\",\n            () -> assertEquals(\"Java基础\", bookInfo[0]),\n            () -> assertEquals(\"张三\", bookInfo[1]));\n    }\n    @Test\n    public void testInvalidBookId() {\n        int bookId = 4;\n        assertFalse(books.containsKey(bookId));\n    }\n    @Test\n    public void testAnotherValidBookId() {\n        int bookId = 3;\n        assertTrue(books.containsKey(bookId));\n        String[] bookInfo = books.get(bookId);\n        assertAll(\"bookInfo\",\n            () -> assertEquals(\"数据结构\", bookInfo[0]),\n            () -> assertEquals(\"王五\", bookInfo[1]));\n    }\n    @Test\n    public void testAnotherInvalidBookId() {\n        int bookId = 10;\n        assertFalse(books.containsKey(bookId));\n    }\n}"}}
{"canonical_solution": "import java.math.BigDecimal;\npublic class Departamento {\n    private BigDecimal orcamentoFolha;\n    public Departamento(BigDecimal orcamentoFolha) {\n        this.orcamentoFolha = orcamentoFolha;\n    }\n    public BigDecimal getOrcamentoFolha() {\n        return orcamentoFolha;\n    }\n    public void ajustaOrcamento(BigDecimal valor) {\n        orcamentoFolha = orcamentoFolha.add(valor);\n    }\n}\npublic class Empregado {\n    private Departamento departamento;\n    private BigDecimal salario;\n    public Empregado(Departamento departamento, BigDecimal salario) {\n        this.departamento = departamento;\n        this.salario = salario;\n    }\n    public Departamento getDepartamento() {\n        return departamento;\n    }\n    public BigDecimal getSalario() {\n        return salario;\n    }\n}\npublic class TransferenciaService {\n    public boolean tentarTransferencia(Empregado empregadoNovo, Empregado empregadoAtual) {\n        Departamento departamentoNovo = empregadoNovo.getDepartamento();\n        if (empregadoNovo.getSalario().compareTo(departamentoNovo.getOrcamentoFolha()) <= 0) {\n            Departamento departamentoAtual = empregadoAtual.getDepartamento();\n            departamentoAtual.ajustaOrcamento(empregadoAtual.getSalario());\n            departamentoNovo.ajustaOrcamento(empregadoNovo.getSalario().negate());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"20000\"));\n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\"));\n        TransferenciaService service = new TransferenciaService();\n        boolean resultado = service.tentarTransferencia(empregadoNovo, empregadoAtual);\n        System.out.println(\"Transferência foi \" + (resultado ? \"成功\" : \"失败\"));\n    }\n}", "content": "请编写一个Java方法，该方法用于处理员工从一个部门转移到另一个部门的情况，并根据员工的新薪资和新部门预算情况来决定是否可以进行转移。如果新部门的预算足以支付员工的薪资，则转移可以进行，并且需要更新两个部门的预算情。如果预算不足，则转移不会发生。\n\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.math.BigDecimal;\npublic class Departamento {\n    private BigDecimal orcamentoFolha;\n    public Departamento(BigDecimal orcamentoFolha) {\n    }\n    public BigDecimal getOrcamentoFolha() {\n    }\n    public void ajustaOrcamento(BigDecimal valor) {\n    }\n}\npublic class Empregado {\n    private Departamento departamento;\n    private BigDecimal salario;\n    public Empregado(Departamento departamento, BigDecimal salario) {\n    }\n    public Departamento getDepartamento() {\n    }\n    public BigDecimal getSalario() {\n    }\n}\npublic class TransferenciaService {\n    public boolean tentarTransferencia(Empregado empregadoNovo, Empregado empregadoAtual) {\n    }\n}\n```", "id": 1538, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.math.BigDecimal;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass DepartamentoTest {\n    @Test\n    void getOrcamentoFolhaTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        assertEquals(new BigDecimal(\"10000\"), departamento.getOrcamentoFolha());\n    }\n    @Test\n    void ajustaOrcamentoPositivoTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        departamento.ajustaOrcamento(new BigDecimal(\"5000\"));\n        assertEquals(new BigDecimal(\"15000\"), departamento.getOrcamentoFolha());\n    }\n    @Test\n    void ajustaOrcamentoNegativoTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        departamento.ajustaOrcamento(new BigDecimal(\"-3000\"));\n        assertEquals(new BigDecimal(\"7000\"), departamento.getOrcamentoFolha());\n    }\n}\nclass EmpregadoTest {\n    @Test\n    void getDepartamentoTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        Empregado empregado = new Empregado(departamento, new BigDecimal(\"3000\"));\n        assertEquals(departamento, empregado.getDepartamento());\n    }\n    @Test\n    void getSalarioTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        Empregado empregado = new Empregado(departamento, new BigDecimal(\"3000\"));\n        assertEquals(new BigDecimal(\"3000\"), empregado.getSalario());\n    }\n}\nclass TransferenciaServiceTest {\n    @Test\n    void tentarTransferenciaBemSucedidaTest() {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"20000\"));\n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\"));\n        TransferenciaService service = new TransferenciaService();\n        assertTrue(service.tentarTransferencia(empregadoNovo, empregadoAtual));\n    }\n    @Test\n    void tentarTransferenciaFalhaTest() {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"2000\")); \n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\")); \n        TransferenciaService service = new TransferenciaService();\n        assertFalse(service.tentarTransferencia(empregadoNovo, empregadoAtual));\n    }\n    @Test\n    void ajustarOrcamentosAposTransferenciaTest() {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"20000\"));\n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\"));\n        TransferenciaService service = new TransferenciaService();\n        service.tentarTransferencia(empregadoNovo, empregadoAtual);\n        assertEquals(new BigDecimal(\"13000\"), departamentoAtual.getOrcamentoFolha());\n        assertEquals(new BigDecimal(\"16000\"), departamentoNovo.getOrcamentoFolha());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Student {\n    private int id;\n    private String name;\n    public Student() {}\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\nclass StudentView {\n    private String name;\n    private String email;\n    public StudentView() {}\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\npublic class StudentConverter {\n    public static Student convertViewToModel(StudentView sv) {\n        Student student = new Student();\n        student.setName(sv.getName()); \n        return student;\n    }\n    public static void checkConversion() {\n        StudentView sv = new StudentView();\n        sv.setName(\"张三\");\n        sv.setEmail(\"zhangsan@example.com\");\n        Student student = convertViewToModel(sv);\n        if (Objects.equals(student.getName(), \"张三\")) {\n            System.out.println(\"转换正确！\");\n        } else {\n            System.out.println(\"转换错误！\");\n        }\n    }\n    public static void main(String[] args) {\n        checkConversion(); \n    }\n}", "content": "请编写一个Java函数，该函数用于将一个学生的视图对象转换为模型对象。假设我们有一个学生追踪系统，其中`Student`类代表模型层，而`StudentView`类代表视图层。`Student`类包含学生的ID和姓名，而`StudentView`类则包含学生的视图信息，如姓名和邮箱。你需要完成一个名为`convertViewToModel`的函数，该函数接收一个`StudentView`对象作为参数，并返回一个`Student`对象。请注意，你需要从`StudentView`对象中获取学生的姓名，并将其设置到`Student`对象的相应属性中。确保所有必要的包都已经导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass Student {\n    private int id;\n    private String name;\n    public Student() {}\n    public int getId() {}\n    public void setId(int id) {}\n    public String getName() {}\n    public void setName(String name) {}\n}\nclass StudentView {\n    private String name;\n    private String email;\n    public StudentView() {}\n    public String getName() {}\n    public void setName(String name) {}\n    public String getEmail() {}\n    public void setEmail(String email) {}\n}\npublic class StudentConverter {\n    public static Student convertViewToModel(StudentView sv) {}\n}\n```", "id": 1539, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentTest {\n    @Test\n    void getId() {\n        Student student = new Student();\n        student.setId(1);\n        assertEquals(1, student.getId());\n    }\n    @Test\n    void getName() {\n        Student student = new Student();\n        student.setName(\"张三\");\n        assertEquals(\"张三\", student.getName());\n    }\n    @Test\n    void setName() {\n        Student student = new Student();\n        student.setName(\"李四\");\n        assertEquals(\"李四\", student.getName());\n    }\n}\nclass StudentViewTest {\n    @Test\n    void getName() {\n        StudentView studentView = new StudentView();\n        studentView.setName(\"张三\");\n        assertEquals(\"张三\", studentView.getName());\n    }\n    @Test\n    void getEmail() {\n        StudentView studentView = new StudentView();\n        studentView.setEmail(\"zhangsan@example.com\");\n        assertEquals(\"zhangsan@example.com\", studentView.getEmail());\n    }\n}\nclass StudentConverterTest {\n    @Test\n    void convertViewToModel() {\n        StudentView studentView = new StudentView();\n        studentView.setName(\"张三\");\n        Student student = StudentConverter.convertViewToModel(studentView);\n        assertEquals(\"张三\", student.getName());\n    }\n    @Test\n    void convertViewToModelWithNullName() {\n        StudentView studentView = new StudentView();\n        studentView.setName(null);\n        Student student = StudentConverter.convertViewToModel(studentView);\n        assertNull(student.getName());\n    }\n    @Test\n    void checkConversion() {\n        StudentView studentView = new StudentView();\n        studentView.setName(\"张三\");\n        studentView.setEmail(\"zhangsan@example.com\");\n        Student student = StudentConverter.convertViewToModel(studentView);\n        assertEquals(\"张三\", student.getName());\n    }\n}"}}
{"canonical_solution": "import javax.swing.JComponent;\nimport java.awt.Rectangle;\npublic static Rectangle getComponentBounds(JComponent component) {\n    Rectangle bounds = component.getBounds();\n    return bounds;\n}\npublic static void checkFunction() {\n    JComponent fakeComponent = new JComponent() {\n        @Override\n        public Rectangle getBounds() {\n            return new Rectangle(10, 10, 200, 100);\n        }\n    };\n    Rectangle result = getComponentBounds(fakeComponent);\n    assert result.x == 10 : \"X坐标不正确\";\n    assert result.y == 10 : \"Y坐标不正确\";\n    assert result.width == 200 : \"宽度不正确\";\n    assert result.height == 100 : \"高度不正确\";\n}\npublic static void main(String[] args) {\n    checkFunction();\n}", "content": "请编写一个Java方法，该方法接收一个Swing组件作为参数，并返回该组件在其父容器中的位置和大小。该方法应返回一个`Rectangle`对象，其中包含组件的x坐标、y坐标、宽度和高度。请确保你的方法能处理任何类型的Swing组件。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport javax.swing.JComponent;\nimport java.awt.Rectangle;\npublic static Rectangle getComponentBounds(JComponent component) {\n}\npublic static void checkFunction() {\n}\n```", "id": 1540, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport javax.swing.JComponent;\nimport java.awt.Rectangle;\npublic class ComponentBoundsTest {\n    private Rectangle getComponentBounds(JComponent component) {\n        Rectangle bounds = component.getBounds();\n        return bounds;\n    }\n    @Test\n    void testGetComponentBounds() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(10, 10, 200, 100);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(10, result.x);\n        assertEquals(10, result.y);\n        assertEquals(200, result.width);\n        assertEquals(100, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithDifferentValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(5, 5, 150, 75);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(5, result.x);\n        assertEquals(5, result.y);\n        assertEquals(150, result.width);\n        assertEquals(75, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithZeroValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(0, 0, 0, 0);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(0, result.x);\n        assertEquals(0, result.y);\n        assertEquals(0, result.width);\n        assertEquals(0, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithNegativeValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(-10, -10, -200, -100);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(-10, result.x);\n        assertEquals(-10, result.y);\n        assertEquals(-200, result.width);\n        assertEquals(-100, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithMixedValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(-5, 5, 50, -25);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(-5, result.x);\n        assertEquals(5, result.y);\n        assertEquals(50, result.width);\n        assertEquals(-25, result.height);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nclass Book {\n    private Long id;\n    private String title;\n    public Book(Long id, String title) {\n        this.id = id;\n        this.title = title;\n    }\n    public Long getId() {\n        return id;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\nclass Library {\n    private List<Book> books;\n    public Library() {\n        this.books = new ArrayList<>();\n    }\n    public List<Book> getBooks() {\n        return books;\n    }\n    public void addBookToCollection(Long bookId, String bookTitle) {\n        Optional<Book> existingBook = books.stream()\n                                            .filter(book -> book.getId().equals(bookId))\n                                            .findFirst();\n        if (!existingBook.isPresent()) {\n            books.add(new Book(bookId, bookTitle));\n        }\n    }\n}\npublic class LibraryManagement {\n    public static void main(String[] args) {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(2L, \"Effective Java\");\n        library.addBookToCollection(1L, \"Java编程思想\"); \n        checkBooks(library.getBooks());\n    }\n    private static void checkBooks(List<Book> books) {\n        if (books.size() == 2) {\n            System.out.println(\"书籍添加正确！\");\n        } else {\n            System.out.println(\"书籍添加出现错误。\");\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于将一本书添加到图书馆的收藏中。假设我们有两个实体：`Library`和`Book`。每个`Library`对象都有一个书籍列表，表示该图书馆收藏的书籍。书籍通过其唯一ID被添加到图书馆中。如果图书馆中已经有了这本书，则不会重复添加。请确保你的代码能够处理`Optional`类型，避免出现`NullPointerException`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nclass Book {\n    private Long id;\n    private String title;\n    public Book(Long id, String title) {\n    }\n    public Long getId() {\n        return null;\n    }\n    public String getTitle() {\n        return null;\n    }\n}\nclass Library {\n    private List<Book> books;\n    public Library() {\n    }\n    public List<Book> getBooks() {\n        return null;\n    }\n    public void addBookToCollection(Long bookId, String bookTitle) {\n    }\n}\n```", "id": 1541, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.util.List;\nclass LibraryTest {\n    @Test\n    void testAddNewBook() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        List<Book> books = library.getBooks();\n        assertEquals(1, books.size());\n        assertEquals(\"Java编程思想\", books.get(0).getTitle());\n    }\n    @Test\n    void testAddDuplicateBook() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(1L, \"Java编程思想\");\n        List<Book> books = library.getBooks();\n        assertEquals(1, books.size());\n    }\n    @Test\n    void testAddMultipleBooks() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(2L, \"Effective Java\");\n        List<Book> books = library.getBooks();\n        assertEquals(2, books.size());\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(1L)));\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(2L)));\n    }\n    @Test\n    void testAddDifferentBooksSameTitle() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(2L, \"Java编程思想\");\n        List<Book> books = library.getBooks();\n        assertEquals(2, books.size());\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(1L)));\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(2L)));\n    }\n    @Test\n    void testLibraryInitialization() {\n        Library library = new Library();\n        List<Book> books = library.getBooks();\n        assertTrue(books.isEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class ShoppingCart {\n    private int selectedItemIndex = -1; \n    public void selectItem(int index) {\n        this.selectedItemIndex = index;\n    }\n    public int getSelectedItemIndex() {\n        return selectedItemIndex;\n    }\n    public static void main(String[] args) {\n        checkFunctionality();\n    }\n    public static void checkFunctionality() {\n        ShoppingCart cart = new ShoppingCart();\n        assert cart.getSelectedItemIndex() == -1 : \"没有商品被选择时，应该返回-1。\";\n        cart.selectItem(2);\n        assert cart.getSelectedItemIndex() == 2 : \"选择了索引为2的商品，应该返回2。\";\n        cart.selectItem(5);\n        assert cart.getSelectedItemIndex() == 5 : \"更改选择到索引为5的商品，应该返回5。\";\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "请编写一个Java方法，用于处理购物车中商品的选择状态。当用户选择了一个商品后，该商品的位置（索引）会被记录下来。如果用户没有选择任何商品，索引值将会是-1。你需要实现一个方法，该方法返回当前选择的商品索引。如果没有商品被选择，返回-1。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\npublic class ShoppingCart {\n    private int selectedItemIndex = -1; \n    public void selectItem(int index) {\n    }\n    public int getSelectedItemIndex() {\n    }\n}\n```", "id": 1542, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ShoppingCartTest {\n    @Test\n    public void testInitialSelectedItemIndex() {\n        ShoppingCart cart = new ShoppingCart();\n        assertEquals(-1, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testSelectItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(2);\n        assertEquals(2, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testChangeSelectedItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(2);\n        cart.selectItem(5);\n        assertEquals(5, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testSelectItemNegativeIndex() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(-3);\n        assertEquals(-3, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testSelectItemZeroIndex() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(0);\n        assertEquals(0, cart.getSelectedItemIndex());\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class LineCounter {\n    public static int countLines(String filePath) throws IOException {\n        int lines = 0;\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            while (reader.readLine() != null) {\n                lines++;\n            }\n        }\n        return lines;\n    }\n    public static void main(String[] args) {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"第一行文本\\n第二行文本\\n第三行文本\");\n            }\n            int lineCount = countLines(tempFile.getAbsolutePath());\n            System.out.println(\"文件中的行数为: \" + lineCount);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete(); \n            }\n        }\n    }\n}", "content": "请编写一个Java程序，用于演示如何使用`BufferedReader`来逐行读取文本文件的内容。请确保你的程序能够处理异常，并且在读取文件之后正确地关闭资源。此外，你的程序应该能够计算并打印出文件中包含的行数。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class LineCounter {\n    public static int countLines(String filePath) throws IOException {\n    }\n}\n```", "id": 1543, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class LineCounterTest {\n    @Test\n    public void testCountLinesWithThreeLines() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"第一行文本\\n第二行文本\\n第三行文本\");\n            }\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(3, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n    @Test\n    public void testCountLinesWithEmptyFile() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(0, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n    @Test\n    public void testCountLinesWithOneLine() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"只有一行文本\");\n            }\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(1, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n    @Test(expected = IOException.class)\n    public void testCountLinesWithNonexistentFile() throws IOException {\n        LineCounter.countLines(\"nonexistentFile.txt\");\n    }\n    @Test\n    public void testCountLinesWithMultipleNewLines() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"\\n\\n\\n\");\n            }\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(3, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class PermissionNotifier {\n    public void notifyPermissionChange(int permissionCode, String appName) throws IllegalArgumentException {\n        if (permissionCode < 0 || appName == null || appName.isEmpty()) {\n            throw new IllegalArgumentException(\"非法的权限代码或应用名称\");\n        }\n    }\n    public static void main(String[] args) {\n        PermissionNotifier notifier = new PermissionNotifier();\n        try {\n            notifier.notifyPermissionChange(100, \"SampleApp\");\n            System.out.println(\"权限变更通知成功。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"捕获到非法参数异常：\" + e.getMessage());\n        }\n        try {\n            notifier.notifyPermissionChange(-1, \"InvalidApp\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"捕获到非法参数异常：\" + e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法模拟了一个简化的权限变更通知系统。当一个应用的操作权限发生变化时需要通知相应的监听器。具体来说，你需要实现一个名为`PermissionNotifier`的类，其中包含一个名为`notifyPermissionChange`的方法。该方法接收两个参数：一个整数`permissionCode`代表权限代码，和一个字符串`appName`代表应用名称。如果权限代码或应用名称不合，方法应抛出一个`IllegalArgumentException`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class PermissionNotifier {\n    public void notifyPermissionChange(int permissionCode, String appName) throws IllegalArgumentException {\n    }\n}\n```", "id": 1544, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport java.lang.IllegalArgumentException;\npublic class PermissionNotifierTest {\n    @Test\n    public void testNotifyPermissionChange_ValidInputs() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertDoesNotThrow(() -> notifier.notifyPermissionChange(100, \"ValidApp\"));\n    }\n    @Test\n    public void testNotifyPermissionChange_InvalidPermissionCode() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertThrows(IllegalArgumentException.class, () -> notifier.notifyPermissionChange(-1, \"App\"));\n    }\n    @Test\n    public void testNotifyPermissionChange_NullAppName() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertThrows(IllegalArgumentException.class, () -> notifier.notifyPermissionChange(100, null));\n    }\n    @Test\n    public void testNotifyPermissionChange_EmptyAppName() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertThrows(IllegalArgumentException.class, () -> notifier.notifyPermissionChange(100, \"\"));\n    }\n    @Test\n    public void testNotifyPermissionChange_ZeroPermissionCode() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertDoesNotThrow(() -> notifier.notifyPermissionChange(0, \"AppWithZeroPermissionCode\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public void calculate(double num1, double num2, String operation) {\n        switch (operation) {\n            case \"add\":\n                System.out.println(\"结果: \" + (num1 + num2));\n                break;\n            case \"subtract\":\n                System.out.println(\"结果: \" + (num1 - num2));\n                break;\n            case \"multiply\":\n                System.out.println(\"结果: \" + (num1 * num2));\n                break;\n            case \"divide\":\n                if (num2 == 0) {\n                    System.out.println(\"错误: 除数不能为0\");\n                } else {\n                    System.out.println(\"结果: \" + (num1 / num2));\n                }\n                break;\n            default:\n                System.out.println(\"错误: 不支持的运算类型\");\n        }\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入第一个数:\");\n        double num1 = scanner.nextDouble();\n        System.out.println(\"请输入第二个数:\");\n        double num2 = scanner.nextDouble();\n        scanner.nextLine(); \n        System.out.println(\"请输入运算类型（add, subtract, multiply, divide）:\");\n        String operation = scanner.nextLine();\n        calculator.calculate(num1, num2, operation);\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器功能。该计算器能够根据用户的输入执行加法、减法、乘法和除法运算。具体要求如下：\n\n- 程序应包含一个名为`SimpleCalculator`的类。\n- 类中应包含一个名为`calculate`的方法，该方法接受三个参数：两个`double`类型的数`num1`和`num2`，以及一个`String`类型的参数`operation`，表示要执行的运算类型（\"add\"、\"subtract\"、\"multiply\"、\"divide\"）。\n- 根据`operation`的值，`calculate`方法应执行相应的运算，并打印出运算结果。\n- 如果`operation`不是这四种运算之一，程序应打印出错误信息。\n- 请确保在除法运算中，如果`num2`为0，则打印出错误信息，避免除以零的情况。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public void calculate(double num1, double num2, String operation) {\n    }\n}\n```", "id": 1545, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass SimpleCalculatorTest {\n    @Test\n    void testAddition() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 5.0;\n        double num2 = 3.0;\n        String operation = \"add\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testSubtraction() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 5.0;\n        double num2 = 3.0;\n        String operation = \"subtract\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testMultiplication() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 5.0;\n        double num2 = 3.0;\n        String operation = \"multiply\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testDivision() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 6.0;\n        double num2 = 3.0;\n        String operation = \"divide\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testDivisionByZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 6.0;\n        double num2 = 0.0;\n        String operation = \"divide\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testUnsupportedOperation() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 6.0;\n        double num2 = 3.0;\n        String operation = \"modulus\";\n        calculator.calculate(num1, num2, operation);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.Comparator;\npublic class StringCounter {\n    public List<Map.Entry<String, Integer>> countAndSortStrings(List<Map.Entry<String, Integer>> entries) {\n        HashMap<String, Integer> countMap = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : entries) {\n            String key = entry.getKey();\n            Integer value = entry.getValue();\n            countMap.put(key, countMap.getOrDefault(key, 0) + value);\n        }\n        List<Map.Entry<String, Integer>> sortedList = new ArrayList<>(countMap.entrySet());\n        Collections.sort(sortedList, new Comparator<Map.Entry<String, Integer>>() {\n            @Override\n            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {\n                return o1.getKey().compareTo(o2.getKey());\n            }\n        });\n        return sortedList;\n    }\n    public static void main(String[] args) {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 2));\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 3));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        for (Map.Entry<String, Integer> entry : result) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个功能，该功能能够统计一组数据中每个唯一字符串出现的次数，并按照字符串的自然顺序输出结果。请确保你的程序能够处理一个包含字符串和对应次数的列表，并将统计结果以字符串和次数的形式输出。此外，输出的字符串应该按照自然顺序排序。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.Comparator;\npublic class StringCounter {\n    public List<Map.Entry<String, Integer>> countAndSortStrings(List<Map.Entry<String, Integer>> entries) {\n    }\n}\n```", "id": 1546, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class StringCounterTest {\n    @Test\n    public void testCountAndSortStrings_singleEntry() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 2));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(1, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(2), result.get(0).getValue());\n    }\n    @Test\n    public void testCountAndSortStrings_multipleEntriesSameKey() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 2));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(1, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(3), result.get(0).getValue());\n    }\n    @Test\n    public void testCountAndSortStrings_multipleEntriesDifferentKeys() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 3));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(2, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(1), result.get(0).getValue());\n        assertEquals(\"banana\", result.get(1).getKey());\n        assertEquals(Integer.valueOf(3), result.get(1).getValue());\n    }\n    @Test\n    public void testCountAndSortStrings_emptyList() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertTrue(result.isEmpty());\n    }\n    @Test\n    public void testCountAndSortStrings_mixedEntries() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 3));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 2));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(2, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(1), result.get(0).getValue());\n        assertEquals(\"banana\", result.get(1).getKey());\n        assertEquals(Integer.valueOf(5), result.get(1).getValue());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    static class Book {\n        String id;\n        String title;\n        String author;\n        public Book(String id, String title, String author) {\n            this.id = id;\n            this.title = title;\n            this.author = author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"id='\" + id + '\\'' +\n                    \", title='\" + title + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void updateBook(Book book, String fieldMask) {\n        String[] fieldsToUpdate = fieldMask.split(\",\");\n        Map<String, String> updates = new HashMap<>();\n        for (String field : fieldsToUpdate) {\n            String[] keyValue = field.split(\"=\");\n            if (keyValue.length == 2) {\n                updates.put(keyValue[0].trim(), keyValue[1].trim());\n            }\n        }\n        if (updates.containsKey(\"title\")) {\n            book.title = updates.get(\"title\");\n        }\n        if (updates.containsKey(\"author\")) {\n            book.author = updates.get(\"author\");\n        }\n    }\n    public static void main(String[] args) {\n        Book book = new Book(\"1\", \"Old Title\", \"Old Author\");\n        System.out.println(\"Before update: \" + book);\n        updateBook(book, \"title=New Title, author=New Author\");\n        System.out.println(\"After update: \" + book);\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统中的图书更新功能。在这个系统中，每本图书都有一个唯一的ID、书名和作者名。你需要实现一个方法，该方法接受一个图书对象和一个更新掩码（FieldMask），然后根据更新掩码指定的字段来更新图书信息。更新掩码是一个字符串，包含需要更新的字段名，字段名之间用逗号分隔。如果更新掩码为空，则不更新任何字段。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    static class Book {\n        String id;\n        String title;\n        String author;\n        public Book(String id, String title, String author) {\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"id='\" + id + '\\'' +\n                    \", title='\" + title + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void updateBook(Book book, String fieldMask) {\n    }\n}\n```", "id": 1547, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    @Test\n    public void testUpdateTitleAndAuthor() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"title=New Title, author=New Author\");\n        assertEquals(\"New Title\", book.title);\n        assertEquals(\"New Author\", book.author);\n    }\n    @Test\n    public void testUpdateTitleOnly() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"title=New Title\");\n        assertEquals(\"New Title\", book.title);\n        assertEquals(\"Old Author\", book.author);\n    }\n    @Test\n    public void testUpdateAuthorOnly() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"author=New Author\");\n        assertEquals(\"Old Title\", book.title);\n        assertEquals(\"New Author\", book.author);\n    }\n    @Test\n    public void testUpdateNoChanges() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"\"); \n        assertEquals(\"Old Title\", book.title);\n        assertEquals(\"Old Author\", book.author);\n    }\n    @Test\n    public void testUpdateWithInvalidMask() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"title=New Title, invalidField=invalid\"); \n        assertEquals(\"New Title\", book.title);\n        assertEquals(\"Old Author\", book.author);\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class RightAlignedTriangle {\n    public static String generatePattern(int height) {\n        StringBuilder pattern = new StringBuilder();\n        for (int row = 0; row < height; row++) {\n            for (int space = 0; space < height - row - 1; space++) {\n                pattern.append(\" \");\n            }\n            for (int star = 0; star <= row; star++) {\n                pattern.append(\"*\");\n            }\n            pattern.append(System.lineSeparator());\n        }\n        return pattern.toString();\n    }\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入三角形的高度：\");\n        int height = scanner.nextInt();\n        String trianglePattern = generatePattern(height);\n        System.out.println(trianglePattern);\n    }\n    public static boolean checkPattern(int height, String expectedPattern) {\n        String generatedPattern = generatePattern(height);\n        return generatedPattern.equals(expectedPattern);\n    }\n}", "content": "请编写一个Java程序，用于生成一个右对齐的三角形图案。该三角形的高度由用户输入决定，每一行的图案由字符`*`组成，且每一行的字符数量逐渐增加。例如，如果用户输入高度为4，那么输出的图案应该如下所示：\n\n```\n   *\n  **\n ***\n****\n```\n\n请确保你的程序满足以下要求：\n- 使用Java编程语言。\n- 程序中包含一个名为`RightAlignedTriangle`的类和一个名为`generatePattern`的方法。\n- `generatePattern`方法接收一个整型参数`height`，表示三角形的高度，并返回一个字符串，该字符串包含了整个三角形图案。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class RightAlignedTriangle {\n    public static String generatePattern(int height) {\n    }\n    public static boolean checkPattern(int height, String expectedPattern) {\n    }\n}\n```", "id": 1548, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class RightAlignedTriangleTest {\n    @Test\n    void generatePattern_heightZero_shouldReturnEmptyString() {\n        int height = 0;\n        String expectedPattern = \"\";\n        String actualPattern = RightAlignedTriangle.generatePattern(height);\n        assertEquals(expectedPattern, actualPattern);\n    }\n    @Test\n    void generatePattern_heightOne_shouldReturnSingleAsterisk() {\n        int height = 1;\n        String expectedPattern = \"*\\n\";\n        String actualPattern = RightAlignedTriangle.generatePattern(height);\n        assertEquals(expectedPattern, actualPattern);\n    }\n    @Test\n    void generatePattern_heightThree_shouldReturnTriangle() {\n        int height = 3;\n        String expectedPattern = \"  *\\n **\\n***\\n\";\n        String actualPattern = RightAlignedTriangle.generatePattern(height);\n        assertEquals(expectedPattern, actualPattern);\n    }\n    @Test\n    void checkPattern_correctPattern_shouldReturnTrue() {\n        int height = 3;\n        String expectedPattern = \"  *\\n **\\n***\\n\";\n        assertTrue(RightAlignedTriangle.checkPattern(height, expectedPattern));\n    }\n    @Test\n    void checkPattern_incorrectPattern_shouldReturnFalse() {\n        int height = 3;\n        String incorrectPattern = \"  *\\n **\\n*** \\n\";\n        assertFalse(RightAlignedTriangle.checkPattern(height, incorrectPattern));\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nclass Book {\n    boolean isBorrowed;\n    public Book(boolean isBorrowed) {\n        this.isBorrowed = isBorrowed;\n    }\n    public void setBorrowed(boolean isBorrowed) {\n        this.isBorrowed = isBorrowed;\n    }\n    public boolean isBorrowed() {\n        return this.isBorrowed;\n    }\n}\nclass Library {\n    Book[] books;\n    public Library(Book[] books) {\n        this.books = books;\n    }\n    public void resetBooksStatus() {\n        for (Book book : books) {\n            book.setBorrowed(false);\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Book[] books = {\n            new Book(true),\n            new Book(false),\n            new Book(true),\n            new Book(true)\n        };\n        Library library = new Library(books);\n        library.resetBooksStatus();\n        check(books);\n    }\n    public static void check(Book[] books) {\n        for (Book book : books) {\n            if (book.isBorrowed()) {\n                System.out.println(\"错误：存在未正确重置的图书。\");\n                return;\n            }\n        }\n        System.out.println(\"所有图书的状态已正确重置为未借出。\");\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统中的一个功能：重置所有图书的状态为未借出。在这个系统中，每本图书都有一个状态，表示该图书是否被借出。我们使用一个`Book`类来表示每本图书，其中包含一个布尔类型的成员变量`isBorrowed`，表示图书的借出状态（`true`表示已借出，`false`表示未借出）。你需要编写一个名为`Library`的类，其中包含一个方法`resetBooksStatus`，该方法将库存中所有图书的状态重置为未借出。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nclass Book {\n    boolean isBorrowed;\n    public Book(boolean isBorrowed) {\n    }\n    public void setBorrowed(boolean isBorrowed) {\n    }\n    public boolean isBorrowed() {\n    }\n}\nclass Library {\n    Book[] books;\n    public Library(Book[] books) {\n    }\n    public void resetBooksStatus() {\n    }\n}\n```", "id": 1549, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nclass BookTest {\n    @Test\n    public void testSetBorrowed() {\n        Book book = new Book(false);\n        book.setBorrowed(true);\n        Assertions.assertTrue(book.isBorrowed());\n    }\n    @Test\n    public void testIsBorrowed() {\n        Book book = new Book(true);\n        Assertions.assertTrue(book.isBorrowed());\n    }\n    @Test\n    public void testConstructor() {\n        Book book = new Book(false);\n        Assertions.assertFalse(book.isBorrowed());\n    }\n}\nclass LibraryTest {\n    @Test\n    public void testResetBooksStatus() {\n        Book[] books = {\n            new Book(true),\n            new Book(true),\n            new Book(true)\n        };\n        Library library = new Library(books);\n        library.resetBooksStatus();\n        for (Book book : books) {\n            Assertions.assertFalse(book.isBorrowed());\n        }\n    }\n    @Test\n    public void testResetBooksStatusWithMixedStatus() {\n        Book[] books = {\n            new Book(true),\n            new Book(false),\n            new Book(true),\n            new Book(false)\n        };\n        Library library = new Library(books);\n        library.resetBooksStatus();\n        for (Book book : books) {\n            Assertions.assertFalse(book.isBorrowed());\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Random;\npublic class SongSelector {\n    private HashMap<String, List<String>> genreToSongsMap;\n    private Random random;\n    public SongSelector() {\n        genreToSongsMap = new HashMap<>();\n        random = new Random();\n    }\n    public void addSong(String genre, String song) {\n        genreToSongsMap.computeIfAbsent(genre, k -> new ArrayList<>()).add(song);\n    }\n    public String getRandomSongFromGenre(String genre) {\n        List<String> songs = genreToSongsMap.get(genre);\n        if (songs == null || songs.isEmpty()) {\n            return null;\n        }\n        int index = random.nextInt(songs.size());\n        return songs.get(index);\n    }\n    public static void main(String[] args) {\n        SongSelector selector = new SongSelector();\n        selector.addSong(\"Pop\", \"Song A\");\n        selector.addSong(\"Pop\", \"Song B\");\n        selector.addSong(\"Rock\", \"Song C\");\n        System.out.println(\"Random Pop Song: \" + selector.getRandomSongFromGenre(\"Pop\"));\n        System.out.println(\"Random Rock Song: \" + selector.getRandomSongFromGenre(\"Rock\"));\n        System.out.println(\"Random Jazz Song: \" + selector.getRandomSongFromGenre(\"Jazz\")); \n    }\n}", "content": "假设你正在开发一个音乐播放器应用，你需要实现一个功能，从给定的歌曲集合中随机选择一首歌曲进行播放。每首歌曲都属于一个特定的流派（如流行、摇滚、爵士等），用户可以选择一个流派，然后应用会从该流派中随机选择一首歌曲播放。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Random;\npublic class SongSelector {\n    private HashMap<String, List<String>> genreToSongsMap;\n    private Random random;\n    public SongSelector() {\n    }\n    public void addSong(String genre, String song) {\n    }\n    public String getRandomSongFromGenre(String genre) {\n    }\n}\n```", "id": 1550, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SongSelectorTest {\n    private SongSelector songSelector;\n    @Before\n    public void setUp() {\n        songSelector = new SongSelector();\n    }\n    @Test\n    public void testAddSong() {\n        songSelector.addSong(\"Pop\", \"Song A\");\n        String song = songSelector.getRandomSongFromGenre(\"Pop\");\n        assertNotNull(song);\n    }\n    @Test\n    public void testGetRandomSongFromGenreWithSingleSong() {\n        songSelector.addSong(\"Rock\", \"Song C\");\n        String song = songSelector.getRandomSongFromGenre(\"Rock\");\n        assertEquals(\"Song C\", song);\n    }\n    @Test\n    public void testGetRandomSongFromGenreWithMultipleSongs() {\n        songSelector.addSong(\"Pop\", \"Song A\");\n        songSelector.addSong(\"Pop\", \"Song B\");\n        String song = songSelector.getRandomSongFromGenre(\"Pop\");\n        assertTrue(song.equals(\"Song A\") || song.equals(\"Song B\"));\n    }\n    @Test\n    public void testGetRandomSongFromGenreWithNoSongs() {\n        String song = songSelector.getRandomSongFromGenre(\"Jazz\");\n        assertNull(song);\n    }\n    @Test\n    public void testGetRandomSongFromEmptyGenre() {\n        songSelector.addSong(\"Classical\", \"Song D\");\n        songSelector.getRandomSongFromGenre(\"Classical\"); \n        String song = songSelector.getRandomSongFromGenre(\"EmptyGenre\");\n        assertNull(song);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class DataNotifier {\n    private List<Object> dataList;\n    private List<Object> initDataList() {\n        return new ArrayList<>();\n    }\n    public void addElementsAndNotify(List<Object> newElements) {\n        if (dataList == null) {\n            dataList = initDataList();\n        }\n        if (newElements == null) {\n            newElements = new ArrayList<>();\n        }\n        if (newElements.isEmpty()) {\n            return;\n        }\n        dataList.addAll(newElements);\n        notifyDataChanged();\n    }\n    private void notifyDataChanged() {\n        System.out.println(\"数据已更改。\");\n    }\n    public static void main(String[] args) {\n        DataNotifier notifier = new DataNotifier();\n        List<Object> elementsToAdd = new ArrayList<>();\n        elementsToAdd.add(\"Java\");\n        elementsToAdd.add(\"Python\");\n        notifier.addElementsAndNotify(elementsToAdd); \n        notifier.addElementsAndNotify(null); \n        List<Object> emptyList = new ArrayList<>();\n        notifier.addElementsAndNotify(emptyList); \n    }\n}", "content": "请编写一个Java方法，用于向自定义的数据集合中添加一系列元素，并在添加后通知数据已更改。该方法应满足以下要求：\n\n1. 如果传入的集合为`null`，则应创建一个新的空集合。\n2. 如果传入的集合为空，则不执行任何操作。\n3. 在添加元素后，应调用一个方法来通知数据已更改。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DataNotifier {\n    private List<Object> dataList;\n    private List<Object> initDataList() {\n    }\n    public void addElementsAndNotify(List<Object> newElements) {\n    }\n    private void notifyDataChanged() {\n    }\n}\n```", "id": 1551, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Before;\nimport java.util.ArrayList;\nimport java.util.List;\nimport static org.junit.Assert.*;\npublic class DataNotifierTest {\n    private DataNotifier dataNotifier;\n    @Before\n    public void setUp() {\n        dataNotifier = new DataNotifier();\n    }\n    @Test\n    public void testAddElementsAndNotify_WithNonNullElements() {\n        List<Object> elementsToAdd = new ArrayList<>();\n        elementsToAdd.add(\"Java\");\n        elementsToAdd.add(\"Python\");\n        dataNotifier.addElementsAndNotify(elementsToAdd);\n    }\n    @Test\n    public void testAddElementsAndNotify_WithNullElements() {\n        dataNotifier.addElementsAndNotify(null);\n    }\n    @Test\n    public void testAddElementsAndNotify_WithEmptyList() {\n        List<Object> emptyList = new ArrayList<>();\n        dataNotifier.addElementsAndNotify(emptyList);\n    }\n    @Test\n    public void testAddElementsAndNotify_NoPriorInitialization() {\n        List<Object> elementsToAdd = new ArrayList<>();\n        elementsToAdd.add(\"Java\");\n        elementsToAdd.add(\"Python\");\n        dataNotifier.addElementsAndNotify(elementsToAdd);\n    }\n    @Test\n    public void testAddElementsAndNotify_MultipleCalls() {\n        List<Object> firstBatch = new ArrayList<>();\n        firstBatch.add(\"Java\");\n        List<Object> secondBatch = new ArrayList<>();\n        secondBatch.add(\"Python\");\n        dataNotifier.addElementsAndNotify(firstBatch);\n        dataNotifier.addElementsAndNotify(secondBatch);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookLoanManager {\n    private Map<Long, Long> bookBorrowTimes;\n    public BookLoanManager() {\n        bookBorrowTimes = new HashMap<>();\n    }\n    public void setBorrowTime(Long bookId, Long borrowTime) {\n        bookBorrowTimes.put(bookId, borrowTime);\n    }\n    public Long getLastBorrowedTime(Long bookId) {\n        return bookBorrowTimes.getOrDefault(bookId, null);\n    }\n    public static void main(String[] args) {\n        BookLoanManager manager = new BookLoanManager();\n        manager.setBorrowTime(1001L, 1625140800000L); \n        manager.setBorrowTime(1002L, 1625227200000L); \n        check(manager.getLastBorrowedTime(1001L) == 1625140800000L, \"书籍1001的借阅时间检查失败\");\n        check(manager.getLastBorrowedTime(1002L) == 1625227200000L, \"书籍1002的借阅时间检查失败\");\n        check(manager.getLastBorrowedTime(1003L) == null, \"书籍1003的借阅时间检查失败\");\n    }\n    private static void check(boolean condition, String message) {\n        if (!condition) {\n            throw new AssertionError(message);\n        }\n    }\n}", "content": "请编写一个Java程序，用于管理图书馆中书籍的借阅信息。具体来说，需要实现一个方法，该方法接收一个书籍ID作为参数，并返回该书籍的最后借阅时间。如果书籍未被借阅过，则返回null。确保代码片段包含所有必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookLoanManager {\n    private Map<Long, Long> bookBorrowTimes;\n    public BookLoanManager() {\n    }\n    public void setBorrowTime(Long bookId, Long borrowTime) {\n    }\n    public Long getLastBorrowedTime(Long bookId) {\n    }\n}\n```", "id": 1552, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookLoanManagerTest {\n    private BookLoanManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new BookLoanManager();\n    }\n    @Test\n    public void testSetAndGetBorrowTime() {\n        manager.setBorrowTime(1001L, 1625140800000L);\n        Long borrowTime = manager.getLastBorrowedTime(1001L);\n        assertEquals(1625140800000L, borrowTime);\n    }\n    @Test\n    public void testGetLastBorrowedTime_NotSet() {\n        Long borrowTime = manager.getLastBorrowedTime(1003L);\n        assertNull(borrowTime);\n    }\n    @Test\n    public void testSetBorrowTime_Overwrite() {\n        manager.setBorrowTime(1001L, 1625140800000L);\n        manager.setBorrowTime(1001L, 1625301600000L);\n        Long borrowTime = manager.getLastBorrowedTime(1001L);\n        assertEquals(1625301600000L, borrowTime);\n    }\n    @Test\n    public void testMultipleBooksBorrowTimes() {\n        manager.setBorrowTime(1001L, 1625140800000L);\n        manager.setBorrowTime(1002L, 1625227200000L);\n        assertEquals(1625140800000L, manager.getLastBorrowedTime(1001L));\n        assertEquals(1625227200000L, manager.getLastBorrowedTime(1002L));\n    }\n    @Test\n    public void testGetLastBorrowedTime_WithBorrowTimeSetToNull() {\n        manager.setBorrowTime(1004L, null);\n        assertNull(manager.getLastBorrowedTime(1004L));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class WeekdayFinder {\n    public static String getWeekdayName(int num) {\n        Map<Integer, String> weekDays = new HashMap<>();\n        weekDays.put(1, \"星期一\");\n        weekDays.put(2, \"星期二\");\n        weekDays.put(3, \"星期三\");\n        weekDays.put(4, \"星期四\");\n        weekDays.put(5, \"星期五\");\n        weekDays.put(6, \"星期六\");\n        weekDays.put(7, \"星期日\");\n        return weekDays.getOrDefault(num, \"无效输入\");\n    }\n    public static void main(String[] args) {\n        assert \"星期一\".equals(getWeekdayName(1));\n        assert \"星期二\".equals(getWeekdayName(2));\n        assert \"星期三\".equals(getWeekdayName(3));\n        assert \"星期四\".equals(getWeekdayName(4));\n        assert \"星期五\".equals(getWeekdayName(5));\n        assert \"星期六\".equals(getWeekdayName(6));\n        assert \"星期日\".equals(getWeekdayName(7));\n        assert \"无效输入\".equals(getWeekdayName(8));\n        assert \"无效输入\".equals(getWeekdayName(0));\n        System.out.println(\"所有测试用例都通过了！\");\n    }\n}", "content": "请编写一个Java方法，该方法接收一个整数参数`num`，并根据该参数的值返回对应的星期名称。如果`num`的值在1到7之间，分别返回“星期一”到“星期日”；如果`num`超出这个范围，返回“无效输入”。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeekdayFinder {\n    public static String getWeekdayName(int num) {\n    }\n}\n```", "id": 1553, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class WeekdayFinderTest {\n    @Test\n    public void testWeekdayMonday() {\n        assertEquals(\"星期一\", WeekdayFinder.getWeekdayName(1));\n    }\n    @Test\n    public void testWeekdayTuesday() {\n        assertEquals(\"星期二\", WeekdayFinder.getWeekdayName(2));\n    }\n    @Test\n    public void testWeekdayWednesday() {\n        assertEquals(\"星期三\", WeekdayFinder.getWeekdayName(3));\n    }\n    @Test\n    public void testWeekdaySaturday() {\n        assertEquals(\"星期六\", WeekdayFinder.getWeekdayName(6));\n    }\n    @Test\n    public void testInvalidInput() {\n        assertEquals(\"无效输入\", WeekdayFinder.getWeekdayName(0));\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.io.FileNotFoundException;\npublic class DirectoryExplorer {\n        public static void exploreDirectory(File directory) throws FileNotFoundException {\n        if (!directory.exists()) {\n            throw new FileNotFoundException(\"目录不存在: \" + directory.getAbsolutePath());\n        }\n        File[] fileEntries = directory.listFiles();\n        if (fileEntries != null) {\n            for (File fileEntry : fileEntries) {\n                if (fileEntry.isDirectory()) {\n                    exploreDirectory(fileEntry);\n                } else {\n                    System.out.println(fileEntry.getName());\n                }\n            }\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            File startingDirectory = new File(\"path/to/start/directory\");\n            exploreDirectory(startingDirectory);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "请编写一个Java程序，该程序能够遍历指定目录下的所有文件和子目录，并打印出所有文件的名称。如果遇到子目录，则需要递归地遍历该子目录下的文件。确保程序能够正确处理空目录和不存在的目录。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\npublic class DirectoryExplorer {\n        public static void exploreDirectory(File directory) throws FileNotFoundException {\n    }\n}\n```", "id": 1554, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.io.File;\nimport java.io.FileNotFoundException;\npublic class DirectoryExplorerTest {\n    @Test\n    public void testDirectoryNotExist() {\n        File nonExistingDirectory = new File(\"non/existent/path\");\n        assertThrows(FileNotFoundException.class, () -> {\n            DirectoryExplorer.exploreDirectory(nonExistingDirectory);\n        });\n    }\n    @Test\n    public void testEmptyDirectory() throws FileNotFoundException {\n        File emptyDirectory = new File(\"path/to/empty/directory\");\n        if (!emptyDirectory.exists()) {\n            emptyDirectory.mkdirs();\n        }\n        DirectoryExplorer.exploreDirectory(emptyDirectory);\n    }\n    @Test\n    public void testDirectoryWithFiles() throws FileNotFoundException {\n        File directoryWithFiles = new File(\"path/to/directory/with/files\");\n        if (!directoryWithFiles.exists()) {\n            directoryWithFiles.mkdirs();\n        }\n        File file1 = new File(directoryWithFiles, \"file1.txt\");\n        File file2 = new File(directoryWithFiles, \"file2.txt\");\n        try {\n            file1.createNewFile();\n            file2.createNewFile();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        DirectoryExplorer.exploreDirectory(directoryWithFiles);\n    }\n    @Test\n    public void testNestedDirectories() throws FileNotFoundException {\n        File nestedDirectory = new File(\"path/to/nested/directory\");\n        if (!nestedDirectory.exists()) {\n            nestedDirectory.mkdirs();\n        }\n        File subDirectory = new File(nestedDirectory, \"subdirectory\");\n        if (!subDirectory.exists()) {\n            subDirectory.mkdirs();\n        }\n        File file = new File(subDirectory, \"file.txt\");\n        try {\n            file.createNewFile();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        DirectoryExplorer.exploreDirectory(nestedDirectory);\n    }\n    @Test\n    public void testDirectoryWithMixedContent() throws FileNotFoundException {\n        File mixedDirectory = new File(\"path/to/mixed/content\");\n        if (!mixedDirectory.exists()) {\n            mixedDirectory.mkdirs();\n        }\n        File subDirectory1 = new File(mixedDirectory, \"subdirectory1\");\n        if (!subDirectory1.exists()) {\n            subDirectory1.mkdirs();\n        }\n        File subDirectory2 = new File(mixedDirectory, \"subdirectory2\");\n        if (!subDirectory2.exists()) {\n            subDirectory2.mkdirs();\n        }\n        File file1 = new File(subDirectory1, \"file1.txt\");\n        File file2 = new File(subDirectory2, \"file2.txt\");\n        try {\n            file1.createNewFile();\n            file2.createNewFile();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        DirectoryExplorer.exploreDirectory(mixedDirectory);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nclass NeuralLayer {\n    float[][] weights;\n    float[][] biases;\n    float[][] dWeights;\n    float[][] dBiases;\n    float[][] weightMomentums;\n    float[][] biasMomentums;\n    float[][] weightVelocities;\n    float[][] biasVelocities;\n    public NeuralLayer(int inputSize, int size) {\n        weights = new float[size][inputSize];\n        biases = new float[size][1];\n        for (float[] row : weights) {\n            Arrays.fill(row, 0.1f);\n        }\n        for (float[] row : biases) {\n            Arrays.fill(row, 0.1f);\n        }\n    }\n    public void updateWeightsAndBiases(float learningRate, float beta1, float beta2, float epsilon, int iteration) {\n        if (weightMomentums == null) {\n            weightMomentums = new float[weights.length][weights[0].length];\n            biasMomentums = new float[biases.length][biases[0].length];\n            weightVelocities = new float[weights.length][weights[0].length];\n            biasVelocities = new float[biases.length][biases[0].length];\n        }\n        for (int i = 0; i < weights.length; i++) {\n            for (int j = 0; j < weights[0].length; j++) {\n                weightMomentums[i][j] = beta1 * weightMomentums[i][j] + (1 - beta1) * dWeights[i][j];\n                float weightMomentumsCorrected = weightMomentums[i][j] / (1 - (float)Math.pow(beta1, iteration + 1));\n                weightVelocities[i][j] = beta2 * weightVelocities[i][j] + (1 - beta2) * (dWeights[i][j] * dWeights[i][j]);\n                float weightVelocitiesCorrected = weightVelocities[i][j] / (1 - (float)Math.pow(beta2, iteration + 1));\n                weights[i][j] -= learningRate * weightMomentumsCorrected / (Math.sqrt(weightVelocitiesCorrected) + epsilon);\n            }\n        }\n        for (int i = 0; i < biases.length; i++) {\n            for (int j = 0; j < biases[0].length; j++) {\n                biasMomentums[i][j] = beta1 * biasMomentums[i][j] + (1 - beta1) * dBiases[i][j];\n                float biasMomentumsCorrected = biasMomentums[i][j] / (1 - (float)Math.pow(beta1, iteration + 1));\n                biasVelocities[i][j] = beta2 * biasVelocities[i][j] + (1 - beta2) * (dBiases[i][j] * dBiases[i][j]);\n                float biasVelocitiesCorrected = biasVelocities[i][j] / (1 - (float)Math.pow(beta2, iteration + 1));\n                biases[i][j] -= learningRate * biasMomentumsCorrected / (Math.sqrt(biasVelocitiesCorrected) + epsilon);\n            }\n        }\n    }\n}\npublic class AdamOptimizerExample {\n    public static void main(String[] args) {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, 1);\n        System.out.println(\"Updated Weights:\");\n        for (float[] row : layer.weights) {\n            System.out.println(Arrays.toString(row));\n        }\n        System.out.println(\"Updated Biases:\");\n        for (float[] row : layer.biases) {\n            System.out.println(Arrays.toString(row));\n        }\n    }\n}", "content": "请实现一个Java方法，该方法用于更新神经网络中的参数，采用Adam优化算法。给定一个神经网络层对象，该对象包含权重、偏置及其梯度（dWeights和dBiases），以及用于Adam算法的动量（momentums）和速度（velocities）。你需要根据Adam算法更新这个层的权重和偏置。请注意，你需要首先检查是否已经初始化了动量和速度的存储空间，如果没有，则需要初始化为与权重和偏置同形状的零矩阵。此外，确保你的方法能够处理不同的学习率、beta1、beta2和epsilon值。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nclass NeuralLayer {\n    float[][] weights;\n    float[][] biases;\n    float[][] dWeights;\n    float[][] dBiases;\n    float[][] weightMomentums;\n    float[][] biasMomentums;\n    float[][] weightVelocities;\n    float[][] biasVelocities;\n    public NeuralLayer(int inputSize, int size) {\n    }\n    public void updateWeightsAndBiases(float learningRate, float beta1, float beta2, float epsilon, int iteration) {\n    }\n}\n```", "id": 1555, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Machine Learning", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass NeuralLayerTest {\n    @Test\n    void testInitialization() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        for (float[] row : layer.weights) {\n            for (float value : row) {\n                assertEquals(0.1f, value);\n            }\n        }\n        for (float[] row : layer.biases) {\n            for (float value : row) {\n                assertEquals(0.1f, value);\n            }\n        }\n    }\n    @Test\n    void testUpdateWeightsAndBiases() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, 1);\n        assertNotNull(layer.weights);\n        assertNotNull(layer.biases);\n    }\n    @Test\n    void testUpdateWeightsAndBiasesMultipleIterations() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        for (int i = 1; i <= 5; i++) {\n            layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, i);\n        }\n        assertNotNull(layer.weights);\n        assertNotNull(layer.biases);\n    }\n    @Test\n    void testInitialMomentumAndVelocitiesAreNull() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        assertNull(layer.weightMomentums);\n        assertNull(layer.biasMomentums);\n        assertNull(layer.weightVelocities);\n        assertNull(layer.biasVelocities);\n    }\n    @Test\n    void testMomentumAndVelocitiesAfterUpdate() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, 1);\n        assertNotNull(layer.weightMomentums);\n        assertNotNull(layer.biasMomentums);\n        assertNotNull(layer.weightVelocities);\n        assertNotNull(layer.biasVelocities);\n    }\n}"}}
{"canonical_solution": "import java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentUpdateService {\n    private static Map<Integer, StudentEntity> studentDatabase = new HashMap<>();\n    static {\n        studentDatabase.put(1, new StudentEntity(1, \"张三\", new Date()));\n        studentDatabase.put(2, new StudentEntity(2, \"李四\", new Date()));\n    }\n    public static Callback updateStudent(StudentEntity studentEntity) {\n        Date now = new Date();\n        for (StudentEntity entity : studentDatabase.values()) {\n            if (entity.getName().equals(studentEntity.getName()) && !entity.getId().equals(studentEntity.getId())) {\n                return Callback.error(\"学生姓名已经存在!\");\n            }\n        }\n        studentEntity.setUpdateTime(now);\n        studentDatabase.put(studentEntity.getId(), studentEntity);\n        return Callback.success(true);\n    }\n    public static void main(String[] args) {\n        Callback result1 = updateStudent(new StudentEntity(3, \"王五\", null));\n        System.out.println(result1.getMessage()); \n        Callback result2 = updateStudent(new StudentEntity(2, \"张三\", null));\n        System.out.println(result2.getMessage()); \n    }\n}\nclass StudentEntity {\n    private Integer id;\n    private String name;\n    private Date updateTime;\n    public StudentEntity(Integer id, String name, Date updateTime) {\n        this.id = id;\n        this.name = name;\n        this.updateTime = updateTime;\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Date getUpdateTime() {\n        return updateTime;\n    }\n    public void setUpdateTime(Date updateTime) {\n        this.updateTime = updateTime;\n    }\n}\nclass Callback {\n    private boolean success;\n    private String message;\n    private Callback(boolean success, String message) {\n        this.success = success;\n        this.message = message;\n    }\n    public static Callback success(boolean success) {\n        return new Callback(success, \"更新成功!\");\n    }\n    public static Callback error(String message) {\n        return new Callback(false, message);\n    }\n    public boolean isSuccess() {\n        return success;\n    }\n    public String getMessage() {\n        return message;\n    }\n}", "content": "请编写一个Java方法，用于更新学生信息。该方法接收一个学生实体作为参数，如果学生的姓名在数据库中已存在，则不更新信息并返回一个错误信息；如果学生的姓名不存在，则更新学生信息，并记录更新时间。更新成功后，返回成功的消息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentUpdateService {\n    private static Map<Integer, StudentEntity> studentDatabase = new HashMap<>();\n    static {\n    }\n    public static Callback updateStudent(StudentEntity studentEntity) {\n    }\n}\nclass StudentEntity {\n    private Integer id;\n    private String name;\n    private Date updateTime;\n    public StudentEntity(Integer id, String name, Date updateTime) {\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n    }\n    public Date getUpdateTime() {\n        return updateTime;\n    }\n    public void setUpdateTime(Date updateTime) {\n    }\n}\nclass Callback {\n    private boolean success;\n    private String message;\n    private Callback(boolean success, String message) {\n    }\n    public static Callback success(boolean success) {\n    }\n    public static Callback error(String message) {\n    }\n    public boolean isSuccess() {\n        return success;\n    }\n    public String getMessage() {\n        return message;\n    }\n}\n```", "id": 1556, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Date;\npublic class StudentUpdateServiceTest {\n    @Test\n    public void testUpdateStudent_Success_NewStudent() {\n        StudentEntity newStudent = new StudentEntity(3, \"王五\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n    }\n    @Test\n    public void testUpdateStudent_Error_NameExists() {\n        StudentEntity newStudent = new StudentEntity(2, \"张三\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertFalse(result.isSuccess());\n        assertEquals(\"学生姓名已经存在!\", result.getMessage());\n    }\n    @Test\n    public void testUpdateStudent_Success_UpdateExistingStudent() {\n        StudentEntity existingStudent = new StudentEntity(1, \"张三\", null);\n        Callback result = StudentUpdateService.updateStudent(existingStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n        assertNotNull(existingStudent.getUpdateTime());\n    }\n    @Test\n    public void testUpdateStudent_Success_UpdateDifferentName() {\n        StudentEntity newStudent = new StudentEntity(2, \"刘备\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n    }\n    @Test\n    public void testUpdateStudent_Success_AddAnotherStudent() {\n        StudentEntity newStudent = new StudentEntity(4, \"赵六\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class DatabaseConfigGenerator {\n    public Map<String, String> generateHibernateConfig() {\n        HashMap<String, String> config = new HashMap<>();\n        config.put(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5Dialect\");\n        config.put(\"hibernate.physical_naming_strategy\", \"org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\");\n        return config;\n    }\n    public static void main(String[] args) {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        boolean correct = \"org.hibernate.dialect.MySQL5Dialect\".equals(config.get(\"hibernate.dialect\")) &&\n                          \"org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\".equals(config.get(\"hibernate.physical_naming_strategy\"));\n        System.out.println(\"配置信息生成\" + (correct ? \"正确\" : \"错误\"));\n    }\n}", "content": "请编写一个Java方法，该方法用于生成数据库配置信息。这些配置信息将被用于配置Hibernate框架以适应特定的数据库方言和命名策略。请确保返回一个包含数据库方言和命名策略的Map对象。我们需要关注以下两个配置项：\n\n1. 数据库方言（hibernate.dialect），假设我们使用的是MySQL5方言。\n2. 命名策略（hibernate.naming.physical_strategy），假设我们使用的是Spring框架提供的物理命名策略。\n\n请确保你的代码完全独立，包括必要的包导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DatabaseConfigGenerator {\n    public Map<String, String> generateHibernateConfig() {\n    }\n}\n```", "id": 1557, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Map;\nimport java.util.HashMap;\npublic class DatabaseConfigGeneratorTest {\n    @Test\n    public void testGenerateHibernateConfig_NotNull() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertNotNull(config, \"Config map should not be null\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_ContainsDialect() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertEquals(\"org.hibernate.dialect.MySQL5Dialect\", config.get(\"hibernate.dialect\"), \"Config should contain correct hibernate.dialect\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_ContainsNamingStrategy() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertEquals(\"org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\", config.get(\"hibernate.physical_naming_strategy\"), \"Config should contain correct hibernate.physical_naming_strategy\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_MapSize() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertEquals(2, config.size(), \"Config map should contain exactly 2 entries\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_NoExtraKeys() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertTrue(config.containsKey(\"hibernate.dialect\") && config.containsKey(\"hibernate.physical_naming_strategy\"), \"Config should only contain specific keys\");\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class EvenNumbersFilter {\n    public static int[] filterEvenNumbers(int[] numbers) {\n        ArrayList<Integer> evenNumbersList = new ArrayList<>();\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                evenNumbersList.add(number);\n            }\n        }\n        int[] evenNumbers = new int[evenNumbersList.size()];\n        for (int i = 0; i < evenNumbersList.size(); i++) {\n            evenNumbers[i] = evenNumbersList.get(i);\n        }\n        return evenNumbers;\n    }\n    public static void main(String[] args) {\n        int[] inputNumbers = {1, 2, 3, 4, 5, 6};\n        int[] expectedOutput = {2, 4, 6};\n        int[] actualOutput = filterEvenNumbers(inputNumbers);\n        boolean isCorrect = expectedOutput.length == actualOutput.length;\n        for (int i = 0; i < expectedOutput.length && isCorrect; i++) {\n            if (expectedOutput[i] != actualOutput[i]) {\n                isCorrect = false;\n            }\n        }\n        if (isCorrect) {\n            System.out.println(\"解决方案正确！\");\n        } else {\n            System.out.println(\"解决方案不正确。\");\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个方法，该方法接收一个整数数组作为输入，并返回一个表示该数组中所有偶数的新数组。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\npublic class EvenNumbersFilter {\n    public static int[] filterEvenNumbers(int[] numbers) {\n    }\n}\n```", "id": 1558, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\npublic class EvenNumbersFilterTest {\n    @Test\n    public void testFilterEvenNumbers_withMixedNumbers() {\n        int[] inputNumbers = {1, 2, 3, 4, 5, 6};\n        int[] expectedOutput = {2, 4, 6};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withAllEvenNumbers() {\n        int[] inputNumbers = {2, 4, 6, 8, 10};\n        int[] expectedOutput = {2, 4, 6, 8, 10};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withAllOddNumbers() {\n        int[] inputNumbers = {1, 3, 5, 7, 9};\n        int[] expectedOutput = {};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withNoNumbers() {\n        int[] inputNumbers = {};\n        int[] expectedOutput = {};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withNegativeNumbers() {\n        int[] inputNumbers = {-3, -2, -1, 0, 1, 2};\n        int[] expectedOutput = {-2, 0, 2};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class LibraryService {\n    private Map<String, Boolean> bookCatalog = new HashMap<>();\n    public LibraryService() {\n        bookCatalog.put(\"B001\", false);\n        bookCatalog.put(\"B002\", false);\n        bookCatalog.put(\"B003\", false);\n    }\n    public String borrowBookById(String bookId) {\n        Boolean isBorrowed = bookCatalog.get(bookId);\n        if (isBorrowed == null) {\n            return \"错误：书籍ID不存在。\";\n        } else if (isBorrowed) {\n            return \"书籍已被借出。\";\n        } else {\n            bookCatalog.put(bookId, true);\n            return \"书籍成功借出。\";\n        }\n    }\n    public static void main(String[] args) {\n        LibraryService libraryService = new LibraryService();\n        System.out.println(libraryService.borrowBookById(\"B001\")); \n        System.out.println(libraryService.borrowBookById(\"B004\")); \n        System.out.println(libraryService.borrowBookById(\"B001\")); \n    }\n}", "content": "请编写一个Java方法，用于处理图书馆中书籍的借阅。当一个用户想要借阅一本书时，该方法将根据书籍的ID来更新书籍的状态，表示该书已被借出。如果操作成功，返回一个字符串消息表示书籍已成功借出，否则返回一个错误消息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class LibraryService {\n    private Map<String, Boolean> bookCatalog = new HashMap<>();\n    public LibraryService() {\n    }\n    public String borrowBookById(String bookId) {\n    }\n}\n```", "id": 1559, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class LibraryServiceTest {\n    private LibraryService libraryService;\n    @BeforeEach\n    void setUp() {\n        libraryService = new LibraryService();\n    }\n    @Test\n    void testBorrowBookById_Success() {\n        String result = libraryService.borrowBookById(\"B001\");\n        assertEquals(\"书籍成功借出。\", result);\n    }\n    @Test\n    void testBorrowBookById_BookDoesNotExist() {\n        String result = libraryService.borrowBookById(\"B004\");\n        assertEquals(\"错误：书籍ID不存在。\", result);\n    }\n    @Test\n    void testBorrowBookById_AlreadyBorrowed() {\n        libraryService.borrowBookById(\"B002\"); \n        String result = libraryService.borrowBookById(\"B002\");\n        assertEquals(\"书籍已被借出。\", result);\n    }\n    @Test\n    void testBorrowBookById_Null() {\n        String result = libraryService.borrowBookById(\"B003\");\n        assertEquals(\"书籍成功借出。\", result);\n    }\n    @Test\n    void testBorrowBookById_SuccessWithDifferentBookId() {\n        String result = libraryService.borrowBookById(\"B003\");\n        assertEquals(\"书籍成功借出。\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public double divide(double a, double b) {\n        if (b == 0) {\n            return Double.NaN;\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        List<Double> results = Arrays.asList(\n                calculator.add(5, 3),\n                calculator.subtract(10, 4),\n                calculator.multiply(2, 3),\n                calculator.divide(8, 2),\n                calculator.divide(5, 0) \n        );\n        System.out.println(\"计算结果：\" + results);\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个类应该能够执行基本的算术运算：加法、减法、乘法和除法。每个运算都应该通过一个方法实现，接收两个`double`类型的参数，并返回一个`double`类型的结果。请确保除法方法能够处理除数为零的情况，此时应返回`Double.NaN`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n    }\n    public double subtract(double a, double b) {\n    }\n    public double multiply(double a, double b) {\n    }\n    public double divide(double a, double b) {\n    }\n}\n```", "id": 1560, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAdd() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8.0, calculator.add(5, 3));\n        assertEquals(14.0, calculator.add(10, 4));\n    }\n    @Test\n    public void testSubtract() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(6.0, calculator.subtract(10, 4));\n        assertEquals(1.0, calculator.subtract(5, 4));\n    }\n    @Test\n    public void testMultiply() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(6.0, calculator.multiply(2, 3));\n        assertEquals(0.0, calculator.multiply(0, 5));\n    }\n    @Test\n    public void testDivide() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(4.0, calculator.divide(8, 2));\n        assertTrue(Double.isNaN(calculator.divide(5, 0)));\n    }\n    @Test\n    public void testDivideByZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertTrue(Double.isNaN(calculator.divide(5, 0)));\n        assertTrue(Double.isNaN(calculator.divide(-5, 0)));\n    }\n}"}}
{"canonical_solution": "import java.lang.Math;\npublic class Rectangle {\n    private double length;\n    private double width;\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n    public double calculateArea() {\n        return length * width;\n    }\n    public static void main(String[] args) {\n        Rectangle rect1 = new Rectangle(5.0, 4.0);\n        Rectangle rect2 = new Rectangle(7.5, 3.5);\n        System.out.println(\"矩形1的面积: \" + rect1.calculateArea());\n        System.out.println(\"矩形2的面积: \" + rect2.calculateArea());\n    }\n}", "content": "编写一个Java程序，用于计算一个矩形的面积。请确保你的程序满足以下要求：\n\n- 你的程序应该包含一个名为`Rectangle`的类。\n- 在`Rectangle`类中，应该有两个属性：`length`和`width`，分别用于存储矩形的长度和宽度。\n- 类应该有一个构造函数，接受两个参数（长度和宽度），并据此初始化对象。\n- 类中应该包含一个名为`calculateArea`的方法，该方法用于计算并返回矩形的面积。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.Math;\npublic class Rectangle {\n    private double length;\n    private double width;\n    public Rectangle(double length, double width) {\n    }\n    public double calculateArea() {\n    }\n}\n```", "id": 1561, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class RectangleTest {\n    @Test\n    public void testCalculateAreaPositiveNumbers() {\n        Rectangle rect = new Rectangle(5.0, 4.0);\n        assertEquals(20.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaZeroLength() {\n        Rectangle rect = new Rectangle(0, 4.0);\n        assertEquals(0.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaZeroWidth() {\n        Rectangle rect = new Rectangle(5.0, 0);\n        assertEquals(0.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaNegativeNumbers() {\n        Rectangle rect = new Rectangle(-5.0, 4.0);\n        assertEquals(-20.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaDecimalNumbers() {\n        Rectangle rect = new Rectangle(7.5, 3.5);\n        assertEquals(26.25, rect.calculateArea(), 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\npublic class StudentScoreManager {\n    private HashMap<String, Integer> studentScores;\n    public StudentScoreManager() {\n        studentScores = new HashMap<>();\n    }\n    public void addStudentScore(String name, int score) {\n        studentScores.put(name, score);\n    }\n    public int getStudentScore(String name) {\n        return studentScores.getOrDefault(name, -1);\n    }\n    public static void main(String[] args) {\n        StudentScoreManager manager = new StudentScoreManager();\n        manager.addStudentScore(\"张三\", 90);\n        manager.addStudentScore(\"李四\", 85);\n        System.out.println(\"张三的分数是：\" + manager.getStudentScore(\"张三\")); \n        System.out.println(\"李四的分数是：\" + manager.getStudentScore(\"李四\")); \n        System.out.println(\"王五的分数是：\" + manager.getStudentScore(\"王五\")); \n    }\n}", "content": "请设计一个Java程序，实现一个简单的学生信息管理系统。该系统应该能够让用户存储学生的姓名和他们的分数，并且能够根据学生的姓名查询他们的分数。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\npublic class StudentScoreManager {\n    private HashMap<String, Integer> studentScores;\n    public StudentScoreManager() {}\n    public void addStudentScore(String name, int score) {}\n    public int getStudentScore(String name) { return 0; }\n}\n```", "id": 1562, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class StudentScoreManagerTest {\n    private StudentScoreManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new StudentScoreManager();\n    }\n    @Test\n    public void testAddStudentScoreAndRetrieve() {\n        manager.addStudentScore(\"张三\", 90);\n        assertEquals(90, manager.getStudentScore(\"张三\"));\n    }\n    @Test\n    public void testGetStudentScoreForNonexistentStudent() {\n        assertEquals(-1, manager.getStudentScore(\"王五\"));\n    }\n    @Test\n    public void testUpdateStudentScore() {\n        manager.addStudentScore(\"李四\", 85);\n        manager.addStudentScore(\"李四\", 95);\n        assertEquals(95, manager.getStudentScore(\"李四\"));\n    }\n    @Test\n    public void testAddMultipleStudentScores() {\n        manager.addStudentScore(\"张三\", 90);\n        manager.addStudentScore(\"李四\", 85);\n        assertEquals(90, manager.getStudentScore(\"张三\"));\n        assertEquals(85, manager.getStudentScore(\"李四\"));\n    }\n    @Test\n    public void testNegativeScore() {\n        manager.addStudentScore(\"赵六\", -10);\n        assertEquals(-10, manager.getStudentScore(\"赵六\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\npublic class SafeAddToMap {\n    public static void safeAdd(HashMap<String, String> map, String key, String value) {\n        try {\n            map.put(key, value);\n        } catch (Exception e) {\n        }\n    }\n    public static void main(String[] args) {\n        HashMap<String, String> myMap = new HashMap<>();\n        safeAdd(myMap, \"key1\", \"value1\");\n        safeAdd(myMap, \"key2\", \"value2\");\n        System.out.println(myMap);\n    }\n}", "content": "请编写一个Java方法，该方法能够安全地向一个`HashMap`中添加键值对。如果在添加过程中遇到任何异常，方法应该捕获这些异常并且忽略它们，确保程序的继续运行。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\npublic class SafeAddToMap {\n    public static void safeAdd(HashMap<String, String> map, String key, String value) {\n    }\n}\n```", "id": 1563, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.HashMap;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class SafeAddToMapTest {\n    @Test\n    public void testSafeAdd_NormalCase() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, \"testKey\", \"testValue\");\n        assertEquals(\"testValue\", map.get(\"testKey\"));\n    }\n    @Test\n    public void testSafeAdd_NullKey() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, null, \"testValue\");\n        assertEquals(\"testValue\", map.get(null));\n    }\n    @Test\n    public void testSafeAdd_NullValue() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, \"testKey\", null);\n        assertNull(map.get(\"testKey\"));\n    }\n    @Test\n    public void testSafeAdd_NullMap() {\n        HashMap<String, String> map = null;\n        assertDoesNotThrow(() -> SafeAddToMap.safeAdd(map, \"testKey\", \"testValue\"));\n    }\n    @Test\n    public void testSafeAdd_DuplicateKey() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, \"testKey\", \"initialValue\");\n        SafeAddToMap.safeAdd(map, \"testKey\", \"newValue\");\n        assertEquals(\"newValue\", map.get(\"testKey\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nclass UserInfoUpdater {\n    static class UserInfo {\n        String productName;\n        int productQuantity;\n        String shippedId;\n        List<Integer> shippedInfo;\n        int airNumber;\n        List<Integer> airInformation;\n        public UserInfo(String productName, int productQuantity, String shippedId, List<Integer> shippedInfo, int airNumber, List<Integer> airInformation) {\n            this.productName = productName;\n            this.productQuantity = productQuantity;\n            this.shippedId = shippedId;\n            this.shippedInfo = shippedInfo;\n            this.airNumber = airNumber;\n            this.airInformation = airInformation;\n        }\n    }\n    public static List<UserInfo> updateUserInfo(List<UserInfo> users) {\n        for (UserInfo user : users) {\n            user.productName = user.productName.toUpperCase();\n            user.productQuantity += 10;\n            user.shippedId += \"A\";\n            user.shippedInfo.set(user.shippedInfo.size() - 1, user.shippedInfo.get(user.shippedInfo.size() - 1) + 10);\n            user.airNumber += 100;\n            user.airInformation.set(user.airInformation.size() - 1, user.airInformation.get(user.airInformation.size() - 1) + 10);\n        }\n        return users;\n    }\n    public static void main(String[] args) {\n        List<UserInfo> users = new ArrayList<>();\n        users.add(new UserInfo(\"laptop\", 20, \"ID123\", List.of(1, 2, 3), 500, List.of(100, 200, 300)));\n        users.add(new UserInfo(\"tablet\", 15, \"ID456\", List.of(4, 5, 6), 600, List.of(400, 500, 600)));\n        users = updateUserInfo(users);\n        for (UserInfo user : users) {\n            System.out.println(\"ProductName: \" + user.productName + \", ProductQuantity: \" + user.productQuantity + \", ShippedId: \" + user.shippedId + \", LastShippedInfo: \" + user.shippedInfo.get(user.shippedInfo.size() - 1) + \", AirNumber: \" + user.airNumber + \", LastAirInformation: \" + user.airInformation.get(user.airInformation.size() - 1));\n        }\n    }\n}", "content": "请设计一个流程，用于处理用户信息的一系列更新操作。给定一组用户信息，你需要按照以下步骤更新这些信息：\n\n1. 将所有用户的产品名称转换为大写。\n2. 所有用户的产品数量增加10。\n3. 所有用户的发货ID增加\"A\"。\n4. 所有用户的最后一个发货信息数组值增加10。\n5. 所有用户的航空编号增加100。\n6. 所有用户的最后一个航空信息数组值增加10。\n7. 提取所有用户的最后一个航空信息数组值。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass UserInfoUpdater {\n    static class UserInfo {\n        String productName;\n        int productQuantity;\n        String shippedId;\n        List<Integer> shippedInfo;\n        int airNumber;\n        List<Integer> airInformation;\n        public UserInfo(String productName, int productQuantity, String shippedId, List<Integer> shippedInfo, int airNumber, List<Integer> airInformation) {\n        }\n    }\n    public static List<UserInfo> updateUserInfo(List<UserInfo> users) {\n        return users;\n    }\n}\n```", "id": 1564, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nclass UserInfoUpdaterTest {\n    @Test\n    void testUpdateUserInfoIncrementsProductQuantity() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(30, updatedUsers.get(0).productQuantity);\n    }\n    @Test\n    void testUpdateUserInfoConvertsProductNameToUpperCase() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(\"LAPTOP\", updatedUsers.get(0).productName);\n    }\n    @Test\n    void testUpdateUserInfoAppendsToShippedId() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(\"ID123A\", updatedUsers.get(0).shippedId);\n    }\n    @Test\n    void testUpdateUserInfoIncrementsLastElementOfShippedInfo() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(13, updatedUsers.get(0).shippedInfo.get(2));\n    }\n    @Test\n    void testUpdateUserInfoIncrementsAirNumber() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(600, updatedUsers.get(0).airNumber);\n    }\n    @Test\n    void testUpdateUserInfoIncrementsLastElementOfAirInformation() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(310, updatedUsers.get(0).airInformation.get(2));\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.ArrayList;\nclass User {\n    private String name;\n    private List<Book> collection;\n    public User(String name) {\n        this.name = name;\n        this.collection = new ArrayList<>();\n    }\n    public void addBookToCollection(Book book) {\n        if (!collection.contains(book)) {\n            collection.add(book);\n        }\n    }\n    public List<Book> getCollection() {\n        return collection;\n    }\n    public void setCollection(List<Book> collection) {\n        this.collection = collection;\n    }\n}\nclass Book {\n    private String title;\n    public Book(String title) {\n        this.title = title;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\nclass CollectionManager {\n    public void deleteBookFromCollection(User user, Book book) {\n        List<Book> collection = user.getCollection();\n        if (collection.contains(book)) {\n            collection.remove(book);\n            user.setCollection(collection);\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        User user = new User(\"张三\");\n        Book book1 = new Book(\"Java编程思想\");\n        Book book2 = new Book(\"Effective Java\");\n        user.addBookToCollection(book1);\n        user.addBookToCollection(book2);\n        CollectionManager manager = new CollectionManager();\n        manager.deleteBookFromCollection(user, book1);\n        if (!user.getCollection().contains(book1) && user.getCollection().contains(book2)) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "假设你正在开发一个图书管理系统，其中包含一个功能是允许用户将图书从他们的收藏列表中删除。请编写一个Java方法来实现这个功能。该方法接收两个参数：一个是用户对象，另一个是要从收藏中删除的图书对象。你需要从用户的收藏列表中找到这本书，并将其删除。如果这本书在用户的收藏列表中不存在，则不执行任何操作。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\nclass User {\n    private String name;\n    private List<Book> collection;\n    public User(String name) {\n    }\n    public void addBookToCollection(Book book) {\n    }\n    public List<Book> getCollection() {\n    }\n    public void setCollection(List<Book> collection) {\n    }\n}\nclass Book {\n    private String title;\n    public Book(String title) {\n    }\n    public String getTitle() {\n    }\n}\nclass CollectionManager {\n    public void deleteBookFromCollection(User user, Book book) {\n    }\n}\n```", "id": 1565, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.ArrayList;\nclass UserTest {\n    private User user;\n    private Book book1;\n    private Book book2;\n    @BeforeEach\n    void setUp() {\n        user = new User(\"张三\");\n        book1 = new Book(\"Java编程思想\");\n        book2 = new Book(\"Effective Java\");\n    }\n    @Test\n    void testAddBookToCollection() {\n        user.addBookToCollection(book1);\n        assertTrue(user.getCollection().contains(book1));\n    }\n    @Test\n    void testGetCollection() {\n        user.addBookToCollection(book1);\n        user.addBookToCollection(book2);\n        List<Book> collection = user.getCollection();\n        assertEquals(2, collection.size());\n        assertTrue(collection.contains(book1));\n        assertTrue(collection.contains(book2));\n    }\n    @Test\n    void testSetCollection() {\n        List<Book> newCollection = new ArrayList<>();\n        newCollection.add(book1);\n        user.setCollection(newCollection);\n        assertEquals(newCollection, user.getCollection());\n    }\n}\nclass CollectionManagerTest {\n    private User user;\n    private Book book1;\n    private Book book2;\n    private CollectionManager manager;\n    @BeforeEach\n    void setUp() {\n        user = new User(\"张三\");\n        book1 = new Book(\"Java编程思想\");\n        book2 = new Book(\"Effective Java\");\n        manager = new CollectionManager();\n        user.addBookToCollection(book1);\n        user.addBookToCollection(book2);\n    }\n    @Test\n    void testDeleteBookFromCollection() {\n        manager.deleteBookFromCollection(user, book1);\n        assertFalse(user.getCollection().contains(book1));\n    }\n    @Test\n    void testDeleteBookFromCollectionNotInList() {\n        Book book3 = new Book(\"Java核心技术卷I\");\n        manager.deleteBookFromCollection(user, book3);\n        assertTrue(user.getCollection().contains(book1));\n        assertTrue(user.getCollection().contains(book2));\n    }\n    @Test\n    void testDeleteBookFromEmptyCollection() {\n        User newUser = new User(\"李四\");\n        manager.deleteBookFromCollection(newUser, book1);\n        assertTrue(newUser.getCollection().isEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\npublic class CustomThreadPoolCreator {\n    public ThreadPoolExecutor createCustomThreadPool(int corePoolSize, int maxPoolSize, int queueCapacity, String namePrefix) {\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(\n            corePoolSize, \n            maxPoolSize, \n            60L, TimeUnit.SECONDS, \n            new LinkedBlockingQueue<>(queueCapacity),\n            new CustomThreadFactory(namePrefix),\n            new ThreadPoolExecutor.CallerRunsPolicy());\n        return executor;\n    }\n    static class CustomThreadFactory implements java.util.concurrent.ThreadFactory {\n        private final String namePrefix;\n        private int threadId = 1;\n        public CustomThreadFactory(String namePrefix) {\n            this.namePrefix = namePrefix;\n        }\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r, namePrefix + \"-thread-\" + threadId++);\n            return t;\n        }\n    }\n    public static void main(String[] args) {\n        CustomThreadPoolCreator creator = new CustomThreadPoolCreator();\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        executor.execute(() -> System.out.println(Thread.currentThread().getName() + \" is running\"));\n        executor.shutdown();\n    }\n}", "content": "请设计一个Java方法，用于创建一个自定义的线程池。这个线程池需要能够根据传入的参数动态地设置其核心线程数、最大线程数、队列容量以及线程名称前缀。此外，当线程池达到最大容量时，应有一个策略来处理新的任务。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\npublic class CustomThreadPoolCreator {\n    public ThreadPoolExecutor createCustomThreadPool(int corePoolSize, int maxPoolSize, int queueCapacity, String namePrefix) {\n    }\n    static class CustomThreadFactory implements java.util.concurrent.ThreadFactory {\n        private final String namePrefix;\n        private int threadId = 1;\n        public CustomThreadFactory(String namePrefix) {\n        }\n        @Override\n        public Thread newThread(Runnable r) {\n        }\n    }\n}\n```", "id": 1566, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\npublic class CustomThreadPoolCreatorTest {\n    private CustomThreadPoolCreator creator;\n    @Before\n    public void setUp() {\n        creator = new CustomThreadPoolCreator();\n    }\n    @Test\n    public void testCreateCustomThreadPool_CorePoolSize() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertEquals(2, executor.getCorePoolSize());\n    }\n    @Test\n    public void testCreateCustomThreadPool_MaxPoolSize() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertEquals(4, executor.getMaximumPoolSize());\n    }\n    @Test\n    public void testCreateCustomThreadPool_QueueCapacity() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertEquals(10, executor.getQueue().remainingCapacity());\n    }\n    @Test\n    public void testCreateCustomThreadPool_NamePrefix() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        executor.execute(() -> {\n            String threadName = Thread.currentThread().getName();\n            assertEquals(true, threadName.startsWith(\"TestPool-thread-\"));\n        });\n    }\n    @Test\n    public void testCreateCustomThreadPool_NotNullExecutor() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertNotNull(executor);\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class LibrarySystem {\n    public static CompletableFuture<String> asyncUpdateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return CompletableFuture.supplyAsync(() -> {\n            boolean updateResult = updateBookInfo(bookId, newTitle, newAuthor);\n            if (updateResult) {\n                return \"Update successful\";\n            } else {\n                return \"Update failed\";\n            }\n        });\n    }\n    private static boolean updateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return true; \n    }\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = asyncUpdateBookInfo(\"123\", \"新标题\", \"新作者\");\n        String result = updateFuture.get();\n        System.out.println(result);\n    }\n}", "content": "假设你正在开发一个用于管理图书馆书籍的系统，你需要实现一个功能来更新图书信息。请编写一个Java方法，该方法能够异步更新图书的信息，并且在更新完成后返回一个表示操作结果的字符串。\n\n你需要实现的方法名为`asyncUpdateBookInfo`，它接受三个参数：`bookId`（图书的ID，类型为`String`），`newTitle`（图书的新标题，类型为`String`），和`newAuthor`（图书的新作者，类型为`String`）。该方法应该异步地更新图书信息，并在更新成功时返回`\"Update successful\"`，如果遇到任何错误则返回`\"Update failed\"`。\n\n请使用`CompletableFuture`来实现异步操作，并假设你已经有一个同步方法`updateBookInfo(String bookId, String newTitle, String newAuthor)`可以调用，该方法在更新成功时返回`true`，失败时返回`false`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class LibrarySystem {\n    public static CompletableFuture<String> asyncUpdateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return CompletableFuture.supplyAsync(() -> {\n        });\n    }\n    private static boolean updateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return true; \n    }\n}\n```", "id": 1567, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class LibrarySystemTest {\n    @Test\n    public void testAsyncUpdateBookInfoSuccessful() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"新标题\", \"新作者\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoDifferentBookId() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"456\", \"Another Title\", \"Another Author\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoEmptyTitle() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"\", \"新作者\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoEmptyAuthor() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"新标题\", \"\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoEmptyFields() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"\", \"\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.regex.Pattern;\npublic class EmailValidator {\n    public static boolean isValidEmail(String email) {\n        String emailRegex = \"^[\\\\w-\\\\.]+@[\\\\w-]+\\\\.[\\\\w-]{2,}$\";\n        Pattern pattern = Pattern.compile(emailRegex);\n        if (email == null) {\n            return false;\n        }\n        return pattern.matcher(email).matches();\n    }\n    public static void main(String[] args) {\n        System.out.println(isValidEmail(\"example@example.com\")); \n        System.out.println(isValidEmail(\"example@example\")); \n        System.out.println(isValidEmail(\"example@.com\")); \n        System.out.println(isValidEmail(\"example.com\")); \n        System.out.println(isValidEmail(\"@example.com\")); \n        System.out.println(isValidEmail(\" example@example.com \")); \n        System.out.println(isValidEmail(\"example@example.com.\")); \n        System.out.println(isValidEmail(\"exa mple@example.com\")); \n    }\n}", "content": "请编写一个Java方法，用于验证一个字符串是否符合电子邮件地址的格式要求。该方法应该接受一个字符串参数，如果该字符串是一个有效的电子邮件地址，则返回`true`，否则返回`false`。有效的电子邮件地址定义为：它必须包含`@`符号，且`@`符号前后都应有字符，同时，`@`符号后面必须有至少一个`.`符号，且`.`符号后也应有字符。请注意，电子邮件地址中不应包含空格。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.regex.Pattern;\npublic class EmailValidator {\n    public static boolean isValidEmail(String email) {\n    }\n}\n```", "id": 1568, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class EmailValidatorTest {\n    @Test\n    public void testValidEmail() {\n        Assertions.assertTrue(EmailValidator.isValidEmail(\"example@example.com\"));\n    }\n    @Test\n    public void testInvalidEmailWithoutDomain() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example@example\"));\n    }\n    @Test\n    public void testInvalidEmailWithoutUsername() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example@.com\"));\n    }\n    @Test\n    public void testInvalidEmailMissingAtSymbol() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example.com\"));\n    }\n    @Test\n    public void testInvalidEmailWhitespace() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\" example@example.com \"));\n    }\n    @Test\n    public void testInvalidEmailSpecialCharacter() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example@example.com.\"));\n    }\n    @Test\n    public void testInvalidEmailSpaceInAddress() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"exa mple@example.com\"));\n    }\n}"}}
{"canonical_solution": "import java.text.ParseException;\nimport java.text.SimpleDateFormat;\npublic class DateTimeFormatter {\n    public static String validateDateTime(String input) {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        formatter.setLenient(false); \n        try {\n            formatter.parse(input); \n            return \"输入有效\";\n        } catch (ParseException e) {\n            return \"输入格式错误，请重新输入\";\n        }\n    }\n    public static void main(String[] args) {\n        String[] testInputs = {\n            \"2023-04-01 12:00:00\",\n            \"2023-02-29 12:00:00\", \n            \"2023-04-01 25:00:00\", \n            \"2023/04/01 12:00:00\"  \n        };\n        for (String input : testInputs) {\n            System.out.println(validateDateTime(input));\n        }\n    }\n}", "content": "请编写一个Java程序，用于格式化用户输入的日期和时间。用户将以字符串形式输入日期和时间，格式应为\"yyyy-MM-dd HH:mm:ss\"。你需要确保输入的日期和时间是有效的，如果输入格式不正确，程序应返回一个特定的错误信息。请使用`SimpleDateFormat`和`ParseException`来完成这个任务，并且在验证过程中，如果日期和时间有效，返回\"输入有效\"，如果不有效，返回\"输入格式错误，请重新输入\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\npublic class DateTimeFormatter {\n    public static String validateDateTime(String input) {\n    }\n}\n```", "id": 1569, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DateTimeFormatterTest {\n    @Test\n    public void testValidDateTime() {\n        String input = \"2023-04-01 12:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入有效\", result);\n    }\n    @Test\n    public void testInvalidDateFormat() {\n        String input = \"2023/04/01 12:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入格式错误，请重新输入\", result);\n    }\n    @Test\n    public void testInvalidDateTimeHour() {\n        String input = \"2023-04-01 25:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入格式错误，请重新输入\", result);\n    }\n    @Test\n    public void testInvalidDateLeapYear() {\n        String input = \"2023-02-29 12:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入格式错误，请重新输入\", result);\n    }\n    @Test\n    public void testEdgeCaseValidDateTime() {\n        String input = \"2023-12-31 23:59:59\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入有效\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class LandClassification {\n    public static boolean isBuildingArea(int type) {\n        List<Integer> buildingTypes = Arrays.asList(1, 2, 3, 4); \n        return buildingTypes.contains(type);\n    }\n    public static void checkFunction() {\n        assert isBuildingArea(1) : \"住宅区应该被识别为建筑区域\";\n        assert isBuildingArea(2) : \"商业区应该被识别为建筑区域\";\n        assert isBuildingArea(3) : \"工业区应该被识别为建筑区域\";\n        assert isBuildingArea(4) : \"公共设施区应该被识别为建筑区域\";\n        assert !isBuildingArea(5) : \"绿地区域不应该被识别为建筑区域\";\n        assert !isBuildingArea(6) : \"道路不应该被识别为建筑区域\";\n        assert !isBuildingArea(0) : \"未分类区域不应该被识别为建筑区域\";\n        System.out.println(\"所有测试通过！\");\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java方法，用于判断一个地块是否属于建筑区域。地块的类型通过一个整数`type`来表示，其中：\n\n- `1` 表示住宅区\n- `2` 表示商业区\n- `3` 表示工业区\n- `4` 表示公共设施区\n- `5` 表示绿地区域\n- `6` 表示道路\n- 其他数字表示未分类区域\n\n如果地块属于住宅区、商业区、工业区或公共设施区，则认为该地块是建筑区域。请实现这个方法。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class LandClassification {\n    public static boolean isBuildingArea(int type) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1570, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class LandClassificationTest {\n    @Test\n    public void testIsBuildingArea_ForResidentialArea() {\n        assertTrue(LandClassification.isBuildingArea(1));\n    }\n    @Test\n    public void testIsBuildingArea_ForCommercialArea() {\n        assertTrue(LandClassification.isBuildingArea(2));\n    }\n    @Test\n    public void testIsBuildingArea_ForIndustrialArea() {\n        assertTrue(LandClassification.isBuildingArea(3));\n    }\n    @Test\n    public void testIsBuildingArea_ForUnknownArea() {\n        assertFalse(LandClassification.isBuildingArea(5));\n    }\n    @Test\n    public void testIsBuildingArea_ForRoads() {\n        assertFalse(LandClassification.isBuildingArea(6));\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\npublic class TokenValidator {\n    public Boolean validateAccessToken(String accessToken) {\n        if (!isTokenFormatValid(accessToken)) {\n            return false;\n        }\n        String storedToken = \"abc123\";\n        return accessToken.equals(storedToken);\n    }\n    private boolean isTokenFormatValid(String token) {\n        return token != null && token.length() > 5;\n    }\n    public static void main(String[] args) {\n        TokenValidator validator = new TokenValidator();\n        System.out.println(\"验证结果 (应为true): \" + validator.validateAccessToken(\"abc123\")); \n        System.out.println(\"验证结果 (应为false): \" + validator.validateAccessToken(\"abc\")); \n        System.out.println(\"验证结果 (应为false): \" + validator.validateAccessToken(null)); \n    }\n}", "content": "请编写一个Java方法，用于验证用户的访问令牌是否有效。该方法首先需要检查令牌的格式是否正确，然后需要与数据库中存储的令牌进行比较。如果令牌格式正确且与数据库中的令牌匹配，则返回true，否则返回false。请确保你的代码能够处理可能的异常，并且在数据库查询中使用了模拟的数据。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Optional;\npublic class TokenValidator {\n    public Boolean validateAccessToken(String accessToken) {\n    }\n    private boolean isTokenFormatValid(String token) {\n    }\n}\n```", "id": 1571, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.Test;\npublic class TokenValidatorTest {\n    @Test\n    public void testValidateAccessToken_ValidToken() {\n        TokenValidator validator = new TokenValidator();\n        assertTrue(validator.validateAccessToken(\"abc123\"));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_ShortLength() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(\"abc\"));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_Null() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(null));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_WrongToken() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(\"wrongToken\"));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_EmptyString() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(\"\"));\n    }\n}"}}
{"canonical_solution": "public class ParkingAssistant {\n    public void autoStop(double distance) {\n        if (distance <= 10.0) {\n            System.out.println(\"停车成功\");\n        } else {\n            System.out.println(\"继续行驶\");\n        }\n    }\n    public static void main(String[] args) {\n        ParkingAssistant assistant = new ParkingAssistant();\n        assistant.autoStop(5);  \n        assistant.autoStop(15); \n        assistant.autoStop(10); \n    }\n}", "content": "请编写一个Java程序，实现一个简单的停车辅助系统。当车辆接近障碍物至少10米时，系统应自动停止车辆。你需要完成以下任务：\n\n- 定义一个名为`ParkingAssistant`的类。\n- 在该类中，实现一个名为`autoStop`的方法，该方法接收一个参数表示车辆与障碍物的距离（单位：米）。\n- 如果距离小于或等于10米，方法应打印出\"停车成功\"，表示车辆已停止。\n- 否则，打印出\"继续行驶\"，表示车辆可以安全行驶。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\npublic class ParkingAssistant {\n    public void autoStop(double distance) {\n    }\n}\n```", "id": 1572, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\npublic class ParkingAssistantTest {\n    @Test\n    public void testAutoStopWhenDistanceEqualToFive() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(5);\n        assertTrue(outContent.toString().contains(\"停车成功\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceEqualToFifteen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(15);\n        assertTrue(outContent.toString().contains(\"继续行驶\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceEqualToTen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(10);\n        assertTrue(outContent.toString().contains(\"停车成功\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceLessThanTen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(7.5);\n        assertTrue(outContent.toString().contains(\"停车成功\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceGreaterThanTen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(12.5);\n        assertTrue(outContent.toString().contains(\"继续行驶\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nimport java.util.Optional;\nclass Book {\n    private String title;\n    private Optional<String> audiobook;\n    public Book(String title, Optional<String> audiobook) {\n        this.title = title;\n        this.audiobook = audiobook;\n    }\n    public Optional<String> getAudiobook() {\n        return audiobook;\n    }\n}\nclass AudiobookChecker {\n    public void checkAudiobook(Book book, Optional<String> expectedAudiobook) throws AudiobookMismatchException {\n        if (!Objects.equals(book.getAudiobook(), expectedAudiobook)) {\n            throw new AudiobookMismatchException(\"有声书版本不匹配\");\n        }\n    }\n}\nclass AudiobookMismatchException extends Exception {\n    public AudiobookMismatchException(String message) {\n        super(message);\n    }\n}\npublic class AudiobookCheckDemo {\n    public static void main(String[] args) {\n        Book book1 = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        Book book2 = new Book(\"Python Programming\", Optional.empty());\n        AudiobookChecker checker = new AudiobookChecker();\n        try {\n            checker.checkAudiobook(book1, Optional.of(\"Java Programming Audiobook\")); \n            System.out.println(\"书籍1有声书版本检查通过\");\n        } catch (AudiobookMismatchException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            checker.checkAudiobook(book2, Optional.empty()); \n            System.out.println(\"书籍2有声书版本检查通过\");\n        } catch (AudiobookMismatchException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            checker.checkAudiobook(book1, Optional.of(\"错误的有声书版本\")); \n        } catch (AudiobookMismatchException e) {\n            System.out.println(\"书籍1有声书版本检查未通过: \" + e.getMessage());\n        }\n    }\n}", "content": "假设你正在开发一个图书管理系统，需要实现一个功能来检查某本书是否有有声书版本。请编写一个方法，该方法接收一个书籍对象和一个有声书版本的可选信息，如果书籍对象中的有声书信息与提供的信息不匹配，抛出一个自定义异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nimport java.util.Optional;\nclass Book {\n    private String title;\n    private Optional<String> audiobook;\n    public Book(String title, Optional<String> audiobook) {\n    }\n    public Optional<String> getAudiobook() {\n        return null;\n    }\n}\nclass AudiobookChecker {\n    public void checkAudiobook(Book book, Optional<String> expectedAudiobook) throws AudiobookMismatchException {\n    }\n}\nclass AudiobookMismatchException extends Exception {\n    public AudiobookMismatchException(String message) {\n    }\n}\n```", "id": 1573, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.Optional;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testGetAudiobook() {\n        Book bookWithAudiobook = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        assertEquals(Optional.of(\"Java Programming Audiobook\"), bookWithAudiobook.getAudiobook());\n        Book bookWithoutAudiobook = new Book(\"Python Programming\", Optional.empty());\n        assertEquals(Optional.empty(), bookWithoutAudiobook.getAudiobook());\n    }\n}\nclass AudiobookCheckerTest {\n    @Test\n    void testCheckAudiobookMatch() throws AudiobookMismatchException {\n        Book book = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        AudiobookChecker checker = new AudiobookChecker();\n        checker.checkAudiobook(book, Optional.of(\"Java Programming Audiobook\"));\n    }\n    @Test\n    void testCheckAudiobookMismatch() {\n        Book book = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        AudiobookChecker checker = new AudiobookChecker();\n        assertThrows(AudiobookMismatchException.class, () -> {\n            checker.checkAudiobook(book, Optional.of(\"Wrong Audiobook\"));\n        });\n    }\n    @Test\n    void testCheckAudiobookEmptyMatch() throws AudiobookMismatchException {\n        Book book = new Book(\"Python Programming\", Optional.empty());\n        AudiobookChecker checker = new AudiobookChecker();\n        checker.checkAudiobook(book, Optional.empty());\n    }\n    @Test\n    void testCheckAudiobookEmptyMismatch() {\n        Book book = new Book(\"Python Programming\", Optional.empty());\n        AudiobookChecker checker = new AudiobookChecker();\n        assertThrows(AudiobookMismatchException.class, () -> {\n            checker.checkAudiobook(book, Optional.of(\"Some Audiobook\"));\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass StudentScore {\n    private int studentId;\n    private String studentName;\n    private int mathScore;\n    private int englishScore;\n    private int scienceScore;\n    public StudentScore(int studentId, String studentName, int mathScore, int englishScore, int scienceScore) {\n        this.studentId = studentId;\n        this.studentName = studentName;\n        this.mathScore = mathScore;\n        this.englishScore = englishScore;\n        this.scienceScore = scienceScore;\n    }\n    @Override\n    public String toString() {\n        return \"StudentScore{\" +\n                \"studentId=\" + studentId +\n                \", studentName='\" + studentName + '\\'' +\n                \", mathScore=\" + mathScore +\n                \", englishScore=\" + englishScore +\n                \", scienceScore=\" + scienceScore +\n                '}';\n    }\n}\npublic class ScoreProcessor {\n    public StudentScore generateStudentScore(Object[] objectArray) {\n        int studentId = Integer.parseInt(String.valueOf(objectArray[0]));\n        String studentName = String.valueOf(objectArray[1]);\n        int mathScore = Integer.parseInt(String.valueOf(objectArray[2]));\n        int englishScore = Integer.parseInt(String.valueOf(objectArray[3]));\n        int scienceScore = Integer.parseInt(String.valueOf(objectArray[4]));\n        return new StudentScore(studentId, studentName, mathScore, englishScore, scienceScore);\n    }\n    public static void main(String[] args) {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {1, \"张三\", \"90\", \"85\", \"88\"};\n        StudentScore score = processor.generateStudentScore(data);\n        System.out.println(score);\n    }\n}", "content": "请编写一个Java程序，用于处理学生的成绩信息。给定一个对象数组，每个对象代表一个学生的不同成绩信息，包括学生的ID、姓名、数学成绩、英语成绩、科学成绩等。你需要将这些信息封装到一个学生成绩对象中，并返回这个对象。请确保你的程序能够处理不同的数据类型，例如，数学成绩可能以字符串形式给出，需要转换为整型。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass StudentScore {\n    private int studentId;\n    private String studentName;\n    private int mathScore;\n    private int englishScore;\n    private int scienceScore;\n    public StudentScore(int studentId, String studentName, int mathScore, int englishScore, int scienceScore) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class ScoreProcessor {\n    public StudentScore generateStudentScore(Object[] objectArray) {\n    }\n}\n```", "id": 1574, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ScoreProcessorTest {\n    @Test(expected = ArrayIndexOutOfBoundsException.class)\n    public void testGenerateStudentScoreWithEmptyArray() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] emptyArray = {};\n        processor.generateStudentScore(emptyArray);\n    }\n    @Test(expected = NumberFormatException.class)\n    public void testGenerateStudentScoreWithInvalidDataType() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] invalidDataArray = {1, \"张三\", \"NotANumber\", \"85\", \"88\"};\n        processor.generateStudentScore(invalidDataArray);\n    }\n    @Test\n    public void testGenerateStudentScoreWithValidData(){\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {1, \"张三\", \"90\", \"85\", \"88\"};\n        StudentScore expected = new StudentScore(1, \"张三\", 90, 85, 88);\n        StudentScore actual = processor.generateStudentScore(data);\n        assertEquals(expected.toString(), actual.toString());\n    }\n    @Test\n    public void testGenerateStudentScoreWithNegativeScores() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {2, \"李四\", \"-10\", \"85\", \"88\"};\n        StudentScore expected = new StudentScore(2, \"李四\", -10, 85, 88);\n        StudentScore actual = processor.generateStudentScore(data);\n        assertEquals(expected.toString(), actual.toString());\n    }\n    @Test\n    public void testGenerateStudentScoreWithEmptyName() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {3, \"\", \"50\", \"75\", \"90\"};\n        StudentScore expected = new StudentScore(3, \"\", 50, 75, 90);\n        StudentScore actual = processor.generateStudentScore(data);\n        assertEquals(expected.toString(), actual.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public double divide(double a, double b) {\n        if (b == 0) {\n            System.out.println(\"错误：除数不能为0。\");\n            return 0;\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入两个数字和一个操作符（+、-、*、/），例如：3 + 4\");\n        double num1 = scanner.nextDouble();\n        String operator = scanner.next();\n        double num2 = scanner.nextDouble();\n        switch (operator) {\n            case \"+\":\n                System.out.println(\"结果是：\" + calculator.add(num1, num2));\n                break;\n            case \"-\":\n                System.out.println(\"结果是：\" + calculator.subtract(num1, num2));\n                break;\n            case \"*\":\n                System.out.println(\"结果是：\" + calculator.multiply(num1, num2));\n                break;\n            case \"/\":\n                System.out.println(\"结果是：\" + calculator.divide(num1, num2));\n                break;\n            default:\n                System.out.println(\"未知的操作符：\" + operator);\n                break;\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个类应该能够执行基本的算术运算：加法、减法、乘法和除法。请确保你的实现能够处理除以零的情况，并在这种情况下打印一条友好的错误消息，而不是让程序崩溃。确保你的代码易于理解，变量命名合理，并包含必要的注释。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n    }\n    public double subtract(double a, double b) {\n    }\n    public double multiply(double a, double b) {\n    }\n    public double divide(double a, double b) {\n    }\n}\n```", "id": 1575, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    private SimpleCalculator calculator;\n    @BeforeEach\n    public void setUp() {\n        calculator = new SimpleCalculator();\n    }\n    @Test\n    public void testAdd() {\n        double result = calculator.add(2, 3);\n        assertEquals(5, result, 0.001);\n    }\n    @Test\n    public void testSubtract() {\n        double result = calculator.subtract(5, 3);\n        assertEquals(2, result, 0.001);\n    }\n    @Test\n    public void testMultiply() {\n        double result = calculator.multiply(4, 3);\n        assertEquals(12, result, 0.001);\n    }\n    @Test\n    public void testDivide() {\n        double result = calculator.divide(6, 3);\n        assertEquals(2, result, 0.001);\n    }\n    @Test\n    public void testDivideByZero() {\n        double result = calculator.divide(6, 0);\n        assertEquals(0, result, 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class HealthAdvice {\n    public static String getHealthAdvice(int age) {\n        if (age < 12) {\n            return \"多喝水\";\n        } else if (age >= 12 && age <= 18) {\n            return \"保持适当的运动\";\n        } else if (age >= 19 && age <= 40) {\n            return \"保持健康饮食\";\n        } else if (age >= 41 && age <= 60) {\n            return \"定期体检\";\n        } else {\n            return \"保持积极的生活态度\";\n        }\n    }\n    public static void checkHealthAdvice() {\n        Map<Integer, String> testCases = new HashMap<>();\n        testCases.put(5, \"多喝水\");\n        testCases.put(15, \"保持适当的运动\");\n        testCases.put(30, \"保持健康饮食\");\n        testCases.put(50, \"定期体检\");\n        testCases.put(70, \"保持积极的生活态度\");\n        boolean isCorrect = true;\n        for (Map.Entry<Integer, String> entry : testCases.entrySet()) {\n            String advice = getHealthAdvice(entry.getKey());\n            if (!advice.equals(entry.getValue())) {\n                isCorrect = false;\n                System.out.println(\"错误: 对于年龄 \" + entry.getKey() + \" 的建议应该是 '\" + entry.getValue() + \"'，但你的方法返回了 '\" + advice + \"'\");\n            }\n        }\n        if (isCorrect) {\n            System.out.println(\"所有测试用例都通过了！\");\n        }\n    }\n    public static void main(String[] args) {\n        checkHealthAdvice();\n    }\n}", "content": "请编写一个Java方法，该方法根据用户的年龄返回相应的健康建议。具体要求如下：\n\n- 如果用户年龄小于12岁，建议\"多喝水\"。\n- 如果用户年龄在12岁到18岁之间（包括12岁和18岁），建议\"保持适当的运动\"。\n- 如果用户年龄在19岁到40岁之间（包括19岁和40岁），建议\"保持健康饮食\"。\n- 如果用户年龄在41岁到60岁之间（包括41岁和60岁），建议\"定期体检\"。\n- 如果用户年龄超过60岁，建议\"保持积极的生活态度\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class HealthAdvice {\n    public static String getHealthAdvice(int age) {\n    }\n    public static void checkHealthAdvice() {\n    }\n}\n```", "id": 1576, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class HealthAdviceTest {\n    @Test\n    public void testGetHealthAdviceUnder12() {\n        assertEquals(\"多喝水\", HealthAdvice.getHealthAdvice(5));\n    }\n    @Test\n    public void testGetHealthAdviceBetween12And18() {\n        assertEquals(\"保持适当的运动\", HealthAdvice.getHealthAdvice(15));\n    }\n    @Test\n    public void testGetHealthAdviceBetween19And40() {\n        assertEquals(\"保持健康饮食\", HealthAdvice.getHealthAdvice(30));\n    }\n    @Test\n    public void testGetHealthAdviceBetween41And60() {\n        assertEquals(\"定期体检\", HealthAdvice.getHealthAdvice(50));\n    }\n    @Test\n    public void testGetHealthAdviceAbove60() {\n        assertEquals(\"保持积极的生活态度\", HealthAdvice.getHealthAdvice(70));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class DataProcessor {\n    public List<String> processData(List<String> lines) {\n        List<String> result = new ArrayList<>();\n        for (String line : lines) {\n            if (!line.startsWith(\"#\")) {\n                result.add(line.toUpperCase());\n            }\n        }\n        return result;\n    }\n    public boolean checkResult(List<String> input, List<String> expected) {\n        List<String> output = processData(input);\n        return output.equals(expected);\n    }\n    public static void main(String[] args) {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"# This is a comment\", \"Hello, World!\", \"Java Programming\");\n        List<String> expected = List.of(\"HELLO, WORLD!\", \"JAVA PROGRAMMING\");\n        boolean isCorrect = processor.checkResult(input, expected);\n        System.out.println(\"The processData method is \" + (isCorrect ? \"correct\" : \"incorrect\"));\n    }\n}", "content": "请设计一个Java程序，用于处理文本文件中的数据，并将其转换为特定格式的输出。具体来说，你需要编写一个名为`DataProcessor`的类，该类包含一个名为`processData`的方法。该方法接收一个字符串列表作为输入，每个字符串代表文件中的一行数据。你需要将每行数据按照以下规则转换：如果一行数据以\"#\"开头，则忽略这一行；否则，将该行数据转换为大写，并添加到结果列表中。最后，`processData`方法返回转换后的数据列表。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DataProcessor {\n    public List<String> processData(List<String> lines) {\n    }\n    public boolean checkResult(List<String> input, List<String> expected) {\n    }\n}\n```", "id": 1577, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DataProcessorTest {\n    @Test\n    public void testProcessData_withComments() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"# This is a comment\", \"Hello, World!\", \"Java Programming\");\n        List<String> expected = List.of(\"HELLO, WORLD!\", \"JAVA PROGRAMMING\");\n        List<String> result = processor.processData(input);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testProcessData_withoutComments() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"Hello, World!\", \"Java Programming\");\n        List<String> expected = List.of(\"HELLO, WORLD!\", \"JAVA PROGRAMMING\");\n        List<String> result = processor.processData(input);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testProcessData_emptyList() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = new ArrayList<>();\n        List<String> expected = new ArrayList<>();\n        List<String> result = processor.processData(input);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testCheckResult_correct() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"Goodbye, World!\", \"Unit Testing\");\n        List<String> expected = List.of(\"GOODBYE, WORLD!\", \"UNIT TESTING\");\n        boolean result = processor.checkResult(input, expected);\n        assertTrue(result);\n    }\n    @Test\n    public void testCheckResult_incorrect() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"Goodbye, World!\", \"Unit Testing\");\n        List<String> expected = List.of(\"GOODBYE, WORLD!\");\n        boolean result = processor.checkResult(input, expected);\n        assertFalse(result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class Student {\n    private String name;\n    private int id;\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (!(obj instanceof Student)) return false;\n        Student other = (Student) obj;\n        return Objects.equals(name, other.name) && id == other.id;\n    }\n    public static void main(String[] args) {\n        Student student1 = new Student(\"张三\", 101);\n        Student student2 = new Student(\"张三\", 101);\n        Student student3 = new Student(\"李四\", 102);\n        System.out.println(\"student1 和 student2 是否相等: \" + student1.equals(student2)); \n        System.out.println(\"student1 和 student3 是否相等: \" + student1.equals(student3)); \n    }\n}", "content": "请设计一个Java程序，用于比较两个学生对象是否相等。学生对象包含姓名（String类型）和学号（int类型）。如果两个学生的姓名和学号都相同，则认为这两个学生对象是相等的。请实现一个方法`equals`来完成这个比较。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class Student {\n    private String name;\n    private int id;\n    public Student(String name, int id) {\n    }\n    @Override\n    public boolean equals(Object obj) {\n    }\n}\n```", "id": 1578, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StudentTest {\n    @Test\n    public void testEqualsSameObject() {\n        Student student = new Student(\"张三\", 101);\n        assertTrue(student.equals(student));\n    }\n    @Test\n    public void testEqualsDifferentType() {\n        Student student = new Student(\"张三\", 101);\n        Object obj = new Object();\n        assertFalse(student.equals(obj));\n    }\n    @Test\n    public void testEqualsEqualObjects() {\n        Student student1 = new Student(\"张三\", 101);\n        Student student2 = new Student(\"张三\", 101);\n        assertTrue(student1.equals(student2));\n    }\n    @Test\n    public void testEqualsDifferentObjects() {\n        Student student1 = new Student(\"张三\", 101);\n        Student student3 = new Student(\"李四\", 102);\n        assertFalse(student1.equals(student3));\n    }\n    @Test\n    public void testEqualsNullObject() {\n        Student student1 = new Student(\"张三\", 101);\n        assertFalse(student1.equals(null));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books;\n    public BookManager() {\n        books = new HashMap<>();\n        books.put(\"978-3-16-148410-0\", \"《Java编程思想》\");\n        books.put(\"978-4-16-148410-1\", \"《Effective Java》\");\n        books.put(\"978-5-16-148410-2\", \"《Java并发编程实战》\");\n    }\n    public String searchBookByISBN(String isbn) {\n        return books.getOrDefault(isbn, \"未找到图书\");\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        System.out.println(manager.searchBookByISBN(\"978-3-16-148410-0\")); \n        System.out.println(manager.searchBookByISBN(\"000-0-00-000000-0\")); \n    }\n}", "content": "请编写一个Java程序，用于管理图书馆中的书籍信息。你需要实现一个功能，允许用户通过图书的ISBN号查询图书详情，并将查询结果显示在控制台上。请确保程序能够处理查询不到图书的情况，此时应输出“未找到图书”。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books;\n    public BookManager() {\n    }\n    public String searchBookByISBN(String isbn) {\n    }\n}\n```", "id": 1579, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.*;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @Before\n    public void setUp() throws Exception {\n        bookManager = new BookManager();\n    }\n    @Test\n    public void testSearchBookByExistingISBN() {\n        String result = bookManager.searchBookByISBN(\"978-3-16-148410-0\");\n        assertEquals(\"《Java编程思想》\", result);\n    }\n    @Test\n    public void testSearchBookByNonExistingISBN() {\n        String result = bookManager.searchBookByISBN(\"000-0-00-000000-0\");\n        assertEquals(\"未找到图书\", result);\n    }\n    @Test\n    public void testSearchBookByAnotherExistingISBN() {\n        String result = bookManager.searchBookByISBN(\"978-4-16-148410-1\");\n        assertEquals(\"《Effective Java》\", result);\n    }\n    @Test\n    public void testSearchBookByAnotherExistingISBN2() {\n        String result = bookManager.searchBookByISBN(\"978-5-16-148410-2\");\n        assertEquals(\"《Java并发编程实战》\", result);\n    }\n    @Test\n    public void testSearchBookWithNullISBN() {\n        String result = bookManager.searchBookByISBN(null);\n        assertEquals(\"未找到图书\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class Book {\n    private String author;\n    public Book(String author) {\n        this.author = author;\n    }\n    public String getAuthorName() {\n        return author;\n    }\n    public static void main(String[] args) {\n        check(\"路遥\", new Book(\"路遥\").getAuthorName());\n        check(\"鲁迅\", new Book(\"鲁迅\").getAuthorName());\n    }\n    public static void check(String expected, String actual) {\n        if (Objects.equals(expected, actual)) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统中的一个功能：获取当前图书的作者名字。在这个系统中，每本图书都有一个作者。请定义一个`Book`类，其中包含一个私有成员变量`author`（作者名字的字符串表示），并提供一个公共方法`getAuthorName`来返回这个图书的作者名字。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class Book {\n    private String author;\n    public Book(String author) {\n    }\n    public String getAuthorName() {\n    }\n    public static void check(String expected, String actual) {\n    }\n}\n```", "id": 1580, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class BookTest {\n    @Test\n    public void testAuthorNameIsLuYao() {\n        Book book = new Book(\"路遥\");\n        assertEquals(\"路遥\", book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsLuXun() {\n        Book book = new Book(\"鲁迅\");\n        assertEquals(\"鲁迅\", book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsNull() {\n        Book book = new Book(null);\n        assertEquals(null, book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsEmpty() {\n        Book book = new Book(\"\");\n        assertEquals(\"\", book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsDifferent() {\n        Book book = new Book(\"韩寒\");\n        assertEquals(\"韩寒\", book.getAuthorName());\n    }\n}"}}
{"canonical_solution": "import java.io.*;\nclass Employee implements Serializable {\n    private String name;\n    private int id;\n    public Employee(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"name='\" + name + '\\'' +\n                \", id=\" + id +\n                '}';\n    }\n}\npublic class EmployeeSerializationDemo {\n    public static void serializeEmployee(Employee emp, String filePath) {\n        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filePath))) {\n            out.writeObject(emp);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static Employee deserializeEmployee(String filePath) {\n        Employee emp = null;\n        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(filePath))) {\n            emp = (Employee) in.readObject();\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return emp;\n    }\n    public static void main(String[] args) {\n        String filePath = \"employee.ser\";\n        Employee emp = new Employee(\"张三\", 12345);\n        serializeEmployee(emp, filePath);\n        System.out.println(\"Employee对象序列化成功\");\n        Employee deserializedEmp = deserializeEmployee(filePath);\n        System.out.println(\"反序列化的Employee对象: \" + deserializedEmp);\n    }\n}", "content": "请编写一个Java程序，实现将一个`Employee`对象序列化到文件中，然后再从该文件中反序列化出该对象。请确保你的程序能够处理可能出现的异常，并且在操作完成后正确关闭所有资源。你需要定义一个`Employee`类，该类应该包含至少两个属性：`name`（姓名）和`id`（员工编号），并且这个类必须实现`Serializable`接口。请提供一个`serializeEmployee`方法用于序列化对象，以及一个`deserializeEmployee`方法用于反序列化对象。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.*;\nclass Employee implements Serializable {\n    private String name;\n    private int id;\n    public Employee(String name, int id) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class EmployeeSerializationDemo {\n    public static void serializeEmployee(Employee emp, String filePath) {\n    }\n    public static Employee deserializeEmployee(String filePath) {\n    }\n}\n```", "id": 1581, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.*;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.io.*;\nclass EmployeeTest {\n    private final String filePath = \"employee_test.ser\";\n    private Employee emp;\n    @Before\n    public void setUp() {\n        emp = new Employee(\"张三\", 12345);\n    }\n    @After\n    public void tearDown() {\n        new File(filePath).delete();\n    }\n    @Test\n    public void testSerializeEmployeeNotNull() {\n        EmployeeSerializationDemo.serializeEmployee(emp, filePath);\n        assertNotNull(new File(filePath).exists());\n    }\n    @Test\n    public void testDeserializeEmployee() {\n        EmployeeSerializationDemo.serializeEmployee(emp, filePath);\n        Employee deserializedEmp = EmployeeSerializationDemo.deserializeEmployee(filePath);\n        assertEquals(emp.toString(), deserializedEmp.toString());\n    }\n    @Test\n    public void testDeserializeEmployeeFileNotFound() {\n        Employee deserializedEmp = EmployeeSerializationDemo.deserializeEmployee(\"non_existent_file.ser\");\n        assertNull(deserializedEmp);\n    }\n    @Test\n    public void testSerializeEmployeeIOException() {\n        String invalidPath = \"\";\n        EmployeeSerializationDemo.serializeEmployee(emp, invalidPath);\n        assertFalse(new File(invalidPath).exists());\n    }\n    @Test\n    public void testDeserializeEmployeeClassNotFound() {\n        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filePath))) {\n            out.writeObject(\"String object\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Employee deserializedEmp = EmployeeSerializationDemo.deserializeEmployee(filePath);\n        assertNull(deserializedEmp);\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\nimport java.awt.image.BufferedImage;\npublic class ColorInverter {\n    public static BufferedImage invertColors(BufferedImage originalImage) {\n        int width = originalImage.getWidth();\n        int height = originalImage.getHeight();\n        BufferedImage invertedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for (int y = 0; y < height; y++) {\n            for (int x = 0; x < width; x++) {\n                Color originalColor = new Color(originalImage.getRGB(x, y));\n                int red = 255 - originalColor.getRed();\n                int green = 255 - originalColor.getGreen();\n                int blue = 255 - originalColor.getBlue();\n                Color invertedColor = new Color(red, green, blue);\n                invertedImage.setRGB(x, y, invertedColor.getRGB());\n            }\n        }\n        return invertedImage;\n    }\n    public static void checkFunction() {\n        System.out.println(\"检查逻辑需要根据实际情况实现\");\n    }\n    public static void main(String[] args) {\n        BufferedImage originalImage = null; \n        BufferedImage resultImage = invertColors(originalImage);\n    }\n}", "content": "请编写一个Java程序，实现对一张图片进行色调反转处理。给定一张图片（假设为`MyPicture`类的实例），你需要将这张图片的每个像素的RGB值进行反转，即新的RGB值为`255 - 原始RGB值`。请确保处理后的图片不会有RGB值超出0到255的范围。你需要编写一个名为`invertColors`的方法，该方法接收一个`MyPicture`类型的图片对象作为输入，并返回一个新的`MyPicture`对象，该对象代表处理后的图片。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\npublic class ColorInverter {\n    public static BufferedImage invertColors(BufferedImage originalImage) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1582, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class ColorInverterTest {\n    private BufferedImage originalImage;\n    @BeforeEach\n    public void setUp() {\n        originalImage = new BufferedImage(2, 2, BufferedImage.TYPE_INT_RGB);\n        originalImage.setRGB(0, 0, new Color(100, 150, 200).getRGB());\n        originalImage.setRGB(0, 1, new Color(50, 50, 50).getRGB());\n        originalImage.setRGB(1, 0, new Color(0, 0, 0).getRGB());\n        originalImage.setRGB(1, 1, new Color(255, 255, 255).getRGB());\n    }\n    @Test\n    public void testInvertColors_NotNull() {\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertNotNull(invertedImage);\n    }\n    @Test\n    public void testInvertColors_Dimensions() {\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertEquals(originalImage.getWidth(), invertedImage.getWidth());\n        assertEquals(originalImage.getHeight(), invertedImage.getHeight());\n    }\n    @Test\n    public void testInvertColors_CorrectInversion() {\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        Color originalColor0_0 = new Color(originalImage.getRGB(0, 0));\n        Color invertedColor0_0 = new Color(invertedImage.getRGB(0, 0));\n        assertEquals(255 - originalColor0_0.getRed(), invertedColor0_0.getRed());\n        assertEquals(255 - originalColor0_0.getGreen(), invertedColor0_0.getGreen());\n        assertEquals(255 - originalColor0_0.getBlue(), invertedColor0_0.getBlue());\n        Color originalColor1_1 = new Color(originalImage.getRGB(1, 1));\n        Color invertedColor1_1 = new Color(invertedImage.getRGB(1, 1));\n        assertEquals(255 - originalColor1_1.getRed(), invertedColor1_1.getRed());\n        assertEquals(255 - originalColor1_1.getGreen(), invertedColor1_1.getGreen());\n        assertEquals(255 - originalColor1_1.getBlue(), invertedColor1_1.getBlue());\n    }\n    @Test\n    public void testInvertColors_BlackToWhite() {\n        originalImage.setRGB(0, 0, Color.BLACK.getRGB());\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertEquals(Color.WHITE.getRGB(), invertedImage.getRGB(0, 0));\n    }\n    @Test\n    public void testInvertColors_WhiteToBlack() {\n        originalImage.setRGB(0, 0, Color.WHITE.getRGB());\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertEquals(Color.BLACK.getRGB(), invertedImage.getRGB(0, 0));\n    }\n}"}}
{"canonical_solution": "import java.util.OptionalDouble;\npublic double retrieveGlobalStatistic(String statisticName, double fallbackValue) {\n    OptionalDouble result = GlobalStatsDatabase.queryStatistic(statisticName);\n    return result.orElse(fallbackValue);\n}\nclass GlobalStatsDatabase {\n    public static OptionalDouble queryStatistic(String name) {\n        if (\"playerCount\".equals(name)) {\n            return OptionalDouble.of(1000000.0);\n        } else if (\"averageScore\".equals(name)) {\n            return OptionalDouble.of(350.5);\n        }\n        return OptionalDouble.empty();\n    }\n}\npublic static void main(String[] args) {\n    double playerCount = retrieveGlobalStatistic(\"playerCount\", 0.0);\n    double averageScore = retrieveGlobalStatistic(\"averageScore\", 0.0);\n    double nonExistingStat = retrieveGlobalStatistic(\"nonExistingStat\", 10.0);\n    System.out.println(\"Player Count: \" + playerCount); \n    System.out.println(\"Average Score: \" + averageScore); \n    System.out.println(\"Non-existing Stat: \" + nonExistingStat); \n}", "content": "请编写一个Java方法，该方法用于从一个模拟的全球统计数据库中获取指定统计项的值。如果该统计项存在，则返回其值；如果不存在，则返回一个默认值。请按照以下要求实现该方法：\n\n- 方法名为`retrieveGlobalStatistic`\n- 接受两个参数：一个`String`类型的`statisticName`表示统计项的名称，一个`double`类型的`fallbackValue`表示默认值。\n- 假设有一个外部库提供了一个名为`GlobalStatsDatabase`的类，该类有一个静态方法`queryStatistic`，接受一个`String`类型的参数，并返回一个`OptionalDouble`类型的结果。\n- 如果`queryStatistic`返回的`OptionalDouble`有值，则返回该值；否则返回`fallbackValue`。\n\n请确保包含必要的导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.OptionalDouble;\npublic double retrieveGlobalStatistic(String statisticName, double fallbackValue) {\n}\nclass GlobalStatsDatabase {\n    public static OptionalDouble queryStatistic(String name) {\n    }\n}\n```", "id": 1583, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.OptionalDouble;\nclass GlobalStatsDatabaseTest {\n    public double retrieveGlobalStatistic(String statisticName, double fallbackValue) {\n        OptionalDouble result = GlobalStatsDatabase.queryStatistic(statisticName);\n        return result.orElse(fallbackValue);\n    }\n    static class GlobalStatsDatabase {\n        public static OptionalDouble queryStatistic(String name) {\n            if (\"playerCount\".equals(name)) {\n                return OptionalDouble.of(1000000.0);\n            } else if (\"averageScore\".equals(name)) {\n                return OptionalDouble.of(350.5);\n            }\n            return OptionalDouble.empty();\n        }\n    }\n    @Test\n    void testPlayerCount() {\n        double result = retrieveGlobalStatistic(\"playerCount\", 0.0);\n        assertEquals(1000000.0, result);\n    }\n    @Test\n    void testAverageScore() {\n        double result = retrieveGlobalStatistic(\"averageScore\", 0.0);\n        assertEquals(350.5, result);\n    }\n    @Test\n    void testNonExistingStat() {\n        double result = retrieveGlobalStatistic(\"nonExistingStat\", 10.0);\n        assertEquals(10.0, result);\n    }\n    @Test\n    void testFallbackValueForNonExistingStat() {\n        double result = retrieveGlobalStatistic(\"someRandomStat\", 5.5);\n        assertEquals(5.5, result);\n    }\n    @Test\n    void testFallbackValueForEmptyStringStat() {\n        double result = retrieveGlobalStatistic(\"\", 1.1);\n        assertEquals(1.1, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nclass Book {\n    String title;\n    String author;\n    String isbn;\n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n}\npublic class BookManager {\n    static HashMap<String, Book> libraryBooks = new HashMap<>();\n    static {\n        libraryBooks.put(\"123456789\", new Book(\"Java Programming\", \"John Doe\", \"123456789\"));\n        libraryBooks.put(\"987654321\", new Book(\"Python Programming\", \"Jane Doe\", \"987654321\"));\n    }\n    public static boolean isBookAvailable(String isbn) {\n        return libraryBooks.containsKey(isbn);\n    }\n    public static void checkAvailability(String[] isbns) {\n        for (String isbn : isbns) {\n            System.out.println(\"ISBN \" + isbn + \": \" + (isBookAvailable(isbn) ? \"Available\" : \"Not Available\"));\n        }\n    }\n    public static void main(String[] args) {\n        String[] testIsbns = {\"123456789\", \"987654321\", \"111111111\"};\n        checkAvailability(testIsbns);\n    }\n}", "content": "请编写一个Java程序，用于管理图书馆中的书籍信息。具体要求如下：\n\n- 需要有一个`Book`类，包含书名（`title`）、作者（`author`）和ISBN号（`isbn`）。\n- 在`BookManager`类中，实现一个方法`isBookAvailable`，该方法接收一个ISBN号作为参数，返回一个布尔值，表示图书馆中是否有这本书。\n- 为了简化问题，假设图书馆的书籍信息存储在一个静态的`HashMap`中，键为ISBN号，值为`Book`对象。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nclass Book {\n    String title;\n    String author;\n    String isbn;\n    public Book(String title, String author, String isbn) {\n    }\n}\npublic class BookManager {\n    static HashMap<String, Book> libraryBooks = new HashMap<>();\n    static {\n    }\n    public static boolean isBookAvailable(String isbn) {\n    }\n    public static void checkAvailability(String[] isbns) {\n    }\n}\n```", "id": 1584, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    @Test\n    public void testIsBookAvailableAvailable() {\n        assertTrue(BookManager.isBookAvailable(\"123456789\"));\n    }\n    @Test\n    public void testIsBookAvailableNotAvailable() {\n        assertFalse(BookManager.isBookAvailable(\"111111111\"));\n    }\n    @Test\n    public void testIsBookAvailableAnotherBook() {\n        assertTrue(BookManager.isBookAvailable(\"987654321\"));\n    }\n    @Test\n    public void testCheckAvailabilityWithOnlyAvailableBooks() {\n        String[] isbns = {\"123456789\", \"987654321\"};\n        BookManager.checkAvailability(isbns);\n    }\n    @Test\n    public void testCheckAvailabilityWithMixedBooks() {\n        String[] isbns = {\"123456789\", \"987654321\", \"111111111\"};\n        BookManager.checkAvailability(isbns);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ShoppingCart {\n    private Map<String, Integer> cart;\n    public ShoppingCart() {\n        cart = new HashMap<>();\n    }\n    public void addProduct(String productId, int quantity) {\n        cart.merge(productId, quantity, Integer::sum);\n    }\n    public void removeProduct(String productId) throws Exception {\n        if (!cart.containsKey(productId)) {\n            throw new Exception(\"Product not found in the cart.\");\n        }\n        cart.remove(productId);\n    }\n    public boolean checkProductExists(String productId) {\n        return cart.containsKey(productId);\n    }\n    public static void main(String[] args) {\n        ShoppingCart cart = new ShoppingCart();\n        try {\n            cart.addProduct(\"apple\", 2);\n            cart.addProduct(\"banana\", 3);\n            cart.addProduct(\"apple\", 1); \n            System.out.println(cart.checkProductExists(\"apple\")); \n            cart.removeProduct(\"banana\");\n            System.out.println(cart.checkProductExists(\"banana\")); \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "请设计一个Java程序，实现一个简单的购物车功能。在这个购物车中，用户可以添加商品到购物车，也可以从购物车中删除商品。每个商品都有一个唯一的标识符。如果用户尝试添加一个已经存在于购物车中的商品，程序应该更新该商品的数量而不是重复添加。同样地，如果用户尝试删除一个不存在于购物车中的商品，程序应该抛出一个异常提示用户。请确保你的程序能够处理这些逻辑，并且提供一个方法来检查特定商品是否存在于购物车中。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ShoppingCart {\n    private Map<String, Integer> cart;\n    public ShoppingCart() {\n    }\n    public void addProduct(String productId, int quantity) {\n    }\n    public void removeProduct(String productId) throws Exception {\n    }\n    public boolean checkProductExists(String productId) {\n    }\n}\n```", "id": 1585, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ShoppingCartTest {\n    private ShoppingCart cart;\n    @Before\n    public void setUp() {\n        cart = new ShoppingCart();\n    }\n    @Test\n    public void testAddProduct() {\n        cart.addProduct(\"apple\", 2);\n        assertTrue(cart.checkProductExists(\"apple\"));\n    }\n    @Test\n    public void testAddMultipleProducts() {\n        cart.addProduct(\"apple\", 2);\n        cart.addProduct(\"banana\", 3);\n        assertTrue(cart.checkProductExists(\"apple\"));\n        assertTrue(cart.checkProductExists(\"banana\"));\n    }\n    @Test\n    public void testRemoveProduct() throws Exception {\n        cart.addProduct(\"apple\", 2);\n        cart.removeProduct(\"apple\");\n        assertFalse(cart.checkProductExists(\"apple\"));\n    }\n    @Test(expected = Exception.class)\n    public void testRemoveProductNotFound() throws Exception {\n        cart.removeProduct(\"orange\");\n    }\n    @Test\n    public void testCheckProductExists() {\n        cart.addProduct(\"banana\", 3);\n        assertTrue(cart.checkProductExists(\"banana\"));\n        assertFalse(cart.checkProductExists(\"apple\"));\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\npublic class ProductTagValidator {\n    private List<String> productTags;\n    public ProductTagValidator(String... tags) {\n        this.productTags = new ArrayList<>(Arrays.asList(tags));\n    }\n    public void validateTagsDoNotContain(String... tagsToCheck) throws IllegalArgumentException {\n        if (tagsToCheck == null) {\n            throw new IllegalArgumentException(\"标签数组不能为null\");\n        }\n        for (String tag : tagsToCheck) {\n            if (productTags.contains(tag)) {\n                throw new IllegalArgumentException(\"商品的标签列表不应包含标签: \" + tag);\n            }\n        }\n    }\n    public static void main(String[] args) {\n        ProductTagValidator validator = new ProductTagValidator(\"电子\", \"书籍\", \"家具\");\n        try {\n            validator.validateTagsDoNotContain(\"电子\", \"食品\");\n            System.out.println(\"验证通过，商品标签列表不包含指定的标签。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请设计一个Java方法，该方法用于验证一个商品对象中的标签列表是否不包含指定的一组标签。如果商品的标签列表包含了这些指定的标签之一，方法应该抛出一个异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\npublic class ProductTagValidator {\n    private List<String> productTags;\n    public ProductTagValidator(String... tags) {}\n    public void validateTagsDoNotContain(String... tagsToCheck) throws IllegalArgumentException {}\n}\n```", "id": 1586, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Before;\nimport static org.junit.Assert.*;\nimport java.util.IllegalFormatException;\npublic class ProductTagValidatorTest {\n    private ProductTagValidator validator;\n    @Before\n    public void setUp() {\n        validator = new ProductTagValidator(\"电子\", \"书籍\", \"家具\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testTagsDoNotContain_throwsException_whenTagIsContained() {\n        validator.validateTagsDoNotContain(\"电子\", \"食品\");\n    }\n    @Test\n    public void testTagsDoNotContain_noException_whenTagsAreNotContained() {\n        validator.validateTagsDoNotContain(\"食品\", \"玩具\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testTagsDoNotContain_throwsException_whenOneTagIsContained() {\n        validator.validateTagsDoNotContain(\"书籍\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testTagsDoNotContain_throwsException_whenTagsToCheckIsNull() {\n        validator.validateTagsDoNotContain((String[]) null);\n    }\n    @Test\n    public void testTagsDoNotContain_noException_whenEmptyTagsToCheck() {\n        validator.validateTagsDoNotContain();\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileToStringConverter {\n    public static String fileContentToString(String filePath) throws IOException {\n        StringBuilder contentBuilder = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            String currentLine;\n            while ((currentLine = br.readLine()) != null) {\n                contentBuilder.append(currentLine).append(\"\\n\");\n            }\n        }\n        return contentBuilder.toString();\n    }\n    public static void main(String[] args) {\n        try {\n            String filePath = \"example.txt\"; \n            String content = fileContentToString(filePath);\n            System.out.println(content);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "请编写一个Java方法，该方法能够将文本文件的内容转换为字符串。请确保你的方法能够处理大文件，并且在读取文件时应该考虑到性能优化。此外，如果文件不存在或无法读取，你的方法应该抛出一个适当的异常。请遵循以下指导原则来实现你的解决方案：\n\n- 请使用必要的Java包。\n- 保证代码片段是完全独立的，并且清晰易懂。\n- 尽量避免与给定代码片段相似的实现。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileToStringConverter {\n    public static String fileContentToString(String filePath) throws IOException {\n    }\n}\n```", "id": 1587, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\npublic class FileToStringConverterTest {\n    @Test\n    public void testFileContentToString_validFile() throws IOException {\n        Path tempFile = Files.createTempFile(\"testFile\", \".txt\");\n        Files.write(tempFile, \"line1\\nline2\\nline3\".getBytes());\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"line1\\nline2\\nline3\\n\", result);\n        Files.delete(tempFile);\n    }\n    @Test\n    public void testFileContentToString_emptyFile() throws IOException {\n        Path tempFile = Files.createTempFile(\"emptyFile\", \".txt\");\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"\", result);\n        Files.delete(tempFile);\n    }\n    @Test\n    public void testFileContentToString_invalidFile() {\n        assertThrows(IOException.class, () -> {\n            FileToStringConverter.fileContentToString(\"non_existent_file.txt\");\n        });\n    }\n    @Test\n    public void testFileContentToString_singleLineFile() throws IOException {\n        Path tempFile = Files.createTempFile(\"singleLineFile\", \".txt\");\n        Files.write(tempFile, \"singleLine\".getBytes());\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"singleLine\\n\", result);\n        Files.delete(tempFile);\n    }\n    @Test\n    public void testFileContentToString_fileWithNewLines() throws IOException {\n        Path tempFile = Files.createTempFile(\"newLineFile\", \".txt\");\n        Files.write(tempFile, \"line1\\n\\nline2\\n\".getBytes());\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"line1\\n\\nline2\\n\", result);\n        Files.delete(tempFile);\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\nclass Book {\n    private String name;\n    private String author;\n    public void setBookInfo(String name, String author) {\n        this.name = name;\n        this.author = author;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getAuthor() {\n        return author;\n    }\n}\npublic class BookManager {\n    public void testSetBookInfo() {\n        System.out.println(\"测试设置图书信息\");\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", \"Bruce Eckel\");\n        System.out.println(\"书名: \" + book.getName() + \", 作者: \" + book.getAuthor());\n    }\n    public static void main(String[] args) {\n        new BookManager().testSetBookInfo();\n    }\n}", "content": "请设计一个Java程序，用于管理图书信息。具体要求如下：\n\n- 需要有一个`Book`类，包含书名（`name`）和作者（`author`）两个属性。\n- 在`Book`类中，实现一个方法`setBookInfo`，该方法接收两个字符串参数，分别用于设置书名和作者。\n- 此外，需要有一个`BookManager`类，其中包含一个方法`testSetBookInfo`，用于测试`Book`类的`setBookInfo`方法是否能正确设置书名和作者。\n- `testSetBookInfo`方法应打印出设置后的书名和作者，以验证设置是否成功。\n- 请确保代码完整、清晰，并且所有必要的包都已经导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.System;\nclass Book {\n    private String name;\n    private String author;\n    public void setBookInfo(String name, String author) {\n    }\n    public String getName() {\n        return null;\n    }\n    public String getAuthor() {\n        return null;\n    }\n}\npublic class BookManager {\n}\n```", "id": 1588, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\nclass BookTest {\n    @Test\n    void testSetBookInfoAndGetters() {\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithEmptyName() {\n        Book book = new Book();\n        book.setBookInfo(\"\", \"Bruce Eckel\");\n        assertEquals(\"\", book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithEmptyAuthor() {\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", \"\");\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(\"\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithNullName() {\n        Book book = new Book();\n        book.setBookInfo(null, \"Bruce Eckel\");\n        assertEquals(null, book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithNullAuthor() {\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", null);\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(null, book.getAuthor());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class ArrayAverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n        if (numbers == null || numbers.length == 0) {\n            return 0;\n        }\n        return Arrays.stream(numbers).average().orElse(0);\n    }\n    public static void check() {\n        int[] testData1 = {1, 2, 3, 4, 5};\n        int[] testData2 = {};\n        int[] testData3 = {10, 20, 30, 40, 50};\n        System.out.println(\"平均值 (应为3): \" + calculateAverage(testData1));\n        System.out.println(\"平均值 (应为0): \" + calculateAverage(testData2));\n        System.out.println(\"平均值 (应为30): \" + calculateAverage(testData3));\n    }\n    public static void main(String[] args) {\n        check(); \n    }\n}", "content": "请编写一个Java方法，用于计算并返回一个数组中所有元素的平均值。该方法应接收一个整型数组作为参数，并返回计算得到的平均值。如果数组为空，应返回0。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\npublic class ArrayAverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1589, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Test;\npublic class ArrayAverageCalculatorTest {\n    @Test\n    public void testCalculateAverageWithPositiveNumbers() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        double expected = 3.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithEmptyArray() {\n        int[] numbers = {};\n        double expected = 0.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithNullArray() {\n        int[] numbers = null;\n        double expected = 0.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithAnotherSetOfPositiveNumbers() {\n        int[] numbers = {10, 20, 30, 40, 50};\n        double expected = 30.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithSingleElement() {\n        int[] numbers = {7};\n        double expected = 7.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n    }\n    private List<Book> books;\n    public BookManager() {\n        this.books = new ArrayList<>();\n    }\n    public void addBook(String title, String author) {\n        books.add(new Book(title, author));\n    }\n    public String findAuthorByTitle(String title) {\n        for (Book book : books) {\n            if (book.title.equals(title)) {\n                return book.author;\n            }\n        }\n        return \"书籍不存在\";\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        manager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        System.out.println(manager.findAuthorByTitle(\"Java编程思想\")); \n        System.out.println(manager.findAuthorByTitle(\"未知书籍\")); \n    }\n}", "content": "请编写一个Java程序，用于管理一个图书馆的书籍信息。具体要求如下：\n\n- 需要有一个方法来添加书籍信息到一个列表中。每本书的信息包括书名和作者名。\n- 另外一个方法需要能够根据书名搜索并返回该书的作者名。如果书不存在，则返回一个特定的消息，比如“书籍不存在”。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n        }\n    }\n    private List<Book> books;\n    public BookManager() {\n    }\n    public void addBook(String title, String author) {\n    }\n    public String findAuthorByTitle(String title) {\n    }\n}\n```", "id": 1590, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    private BookManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new BookManager();\n    }\n    @Test\n    public void testAddBook() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"Bruce Eckel\", manager.findAuthorByTitle(\"Java编程思想\"));\n    }\n    @Test\n    public void testFindAuthorByTitle_ExistingBook() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String author = manager.findAuthorByTitle(\"Java编程思想\");\n        assertEquals(\"Bruce Eckel\", author);\n    }\n    @Test\n    public void testFindAuthorByTitle_NonExistingBook() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String author = manager.findAuthorByTitle(\"未知书籍\");\n        assertEquals(\"书籍不存在\", author);\n    }\n    @Test\n    public void testAddMultipleBooks() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        manager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        assertEquals(\"Joshua Bloch\", manager.findAuthorByTitle(\"Effective Java\"));\n    }\n    @Test\n    public void testFindAuthorByTitle_CaseSensitive() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String author = manager.findAuthorByTitle(\"java编程思想\");\n        assertEquals(\"书籍不存在\", author);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<Book> books = new ArrayList<>();\n    public String addBook(String title, String author, String isbn, int year) {\n        Book newBook = new Book(title, author, isbn, year);\n        books.add(newBook);\n        return \"Book added successfully!\";\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Java Programming\", \"John Doe\", \"123456789\", 2020);\n        System.out.println(result); \n    }\n    private static class Book {\n        String title;\n        String author;\n        String isbn;\n        int year;\n        public Book(String title, String author, String isbn, int year) {\n            this.title = title;\n            this.author = author;\n            this.isbn = isbn;\n            this.year = year;\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于在一个简单的图书管理系统中添加新的图书信息。该方法接收图书的标题、作者、ISBN号和出版年份作为参数，并将这些信息保存到系统中。请确保你的代码能够处理添加图书的基本逻辑，并且能够返回一个表示图书已成功添加的消息。\n\n请遵循以下指导原则来完成这个任务：\n\n- 问题描述应尽可能简短且流畅。\n- 代码片段应完全自包含且清晰。\n- 代码开头必须导入所有使用的包。\n- 请尽量使代码片段与给定的代码片段不同（包括类名、函数名、文档字符串和变量名）。\n- 问题和解决方案应该用中文书写（代码实现不得使用中文，代码注释应该用英文）。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<Book> books = new ArrayList<>();\n    public String addBook(String title, String author, String isbn, int year) {\n    }\n    private static class Book {\n        String title;\n        String author;\n        String isbn;\n        int year;\n        public Book(String title, String author, String isbn, int year) {\n        }\n    }\n}\n```", "id": 1591, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManagerTest {\n    @Test\n    public void testAddBook_ValidDetails_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Effective Java\", \"Joshua Bloch\", \"9780134685991\", 2018);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_TitleIsEmpty_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"\", \"Unknown Author\", \"0000000000\", 2021);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_AuthorNameIsEmpty_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Unknown Title\", \"\", \"0000000000\", 2021);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_EmptyISBN_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Some Book\", \"Some Author\", \"\", 2022);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_YearZero_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Ancient Book\", \"Ancient Author\", \"1111111111\", 0);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    private static class BookManager {\n        private List<Book> books = new ArrayList<>();\n        public String addBook(String title, String author, String isbn, int year) {\n            Book newBook = new Book(title, author, isbn, year);\n            books.add(newBook);\n            return \"Book added successfully!\";\n        }\n    }\n    private static class Book {\n        String title;\n        String author;\n        String isbn;\n        int year;\n        public Book(String title, String author, String isbn, int year) {\n            this.title = title;\n            this.author = author;\n            this.isbn = isbn;\n            this.year = year;\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private Map<Integer, String> books;\n    public BookFinder() {\n        books = new HashMap<>();\n        books.put(1, \"Java编程思想\");\n        books.put(2, \"Effective Java\");\n        books.put(3, \"深入理解Java虚拟机\");\n    }\n    public String findBookNameById(int bookId) {\n        return books.getOrDefault(bookId, \"未找到\");\n    }\n    public static void main(String[] args) {\n        BookFinder finder = new BookFinder();\n        check(finder.findBookNameById(1), \"Java编程思想\");\n        check(finder.findBookNameById(4), \"未找到\");\n    }\n    private static void check(String actual, String expected) {\n        if (actual.equals(expected)) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统中的图书查找功能。在这个系统中，每本图书都有一个唯一的ID和书名。你需要完成一个方法，通过图书的ID来查找图书的名称。如果找到了对应ID的图书，则返回该图书的名称；如果没有找到，则返回一个特定的字符串表示未找到。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private Map<Integer, String> books;\n    public BookFinder() {\n    }\n    public String findBookNameById(int bookId) {\n    }\n}\n```", "id": 1592, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class BookFinderTest {\n    @Test\n    public void testFindBookNameById_bookExists() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"Java编程思想\", finder.findBookNameById(1));\n    }\n    @Test\n    public void testFindBookNameById_bookExists2() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"Effective Java\", finder.findBookNameById(2));\n    }\n    @Test\n    public void testFindBookNameById_bookExists3() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"深入理解Java虚拟机\", finder.findBookNameById(3));\n    }\n    @Test\n    public void testFindBookNameById_bookNotExists() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"未找到\", finder.findBookNameById(4));\n    }\n    @Test\n    public void testFindBookNameById_bookNotExistsNegative() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"未找到\", finder.findBookNameById(-1));\n    }\n}"}}
{"canonical_solution": "import java.util.logging.Logger;\npublic class DatabaseErrorChecker {\n    private static final Logger logger = Logger.getLogger(DatabaseErrorChecker.class.getName());\n    public static void checkDbError(String operation, int errorCode) {\n        if (errorCode != 0) {\n            String errorMessage = operation + \": DbError \" + errorCode;\n            logger.severe(errorMessage);\n            throw new DatabaseOperationException(errorMessage);\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            checkDbError(\"UpdateUser\", 1001);\n        } catch (DatabaseOperationException e) {\n            System.out.println(\"Caught exception: \" + e.getMessage());\n        }\n    }\n}\nclass DatabaseOperationException extends RuntimeException {\n    public DatabaseOperationException(String message) {\n        super(message);\n    }\n}", "content": "请编写一个Java方法，用于检查数据库操作中是否存在错误，并记录错误信息。如果发现错误，该方法应该抛出一个异常，异常信息中包含操作名称和具体的错误代码。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.logging.Logger;\npublic class DatabaseErrorChecker {\n    private static final Logger logger = Logger.getLogger(DatabaseErrorChecker.class.getName());\n    public static void checkDbError(String operation, int errorCode) {\n    }\n}\nclass DatabaseOperationException extends RuntimeException {\n    public DatabaseOperationException(String message) {\n    }\n}\n```", "id": 1593, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DatabaseErrorCheckerTest {\n    @Test\n    public void testCheckDbErrorWithNoError() {\n        assertDoesNotThrow(() -> DatabaseErrorChecker.checkDbError(\"SelectUser\", 0));\n    }\n    @Test\n    public void testCheckDbErrorWithError() {\n        DatabaseOperationException exception = assertThrows(DatabaseOperationException.class, () -> {\n            DatabaseErrorChecker.checkDbError(\"UpdateUser\", 1001);\n        });\n        assertEquals(\"UpdateUser: DbError 1001\", exception.getMessage());\n    }\n    @Test\n    public void testCheckDbErrorAnotherOperationWithError() {\n        DatabaseOperationException exception = assertThrows(DatabaseOperationException.class, () -> {\n            DatabaseErrorChecker.checkDbError(\"DeleteUser\", 1002);\n        });\n        assertEquals(\"DeleteUser: DbError 1002\", exception.getMessage());\n    }\n    @Test\n    public void testCheckDbErrorWithZeroErrorCode() {\n        assertDoesNotThrow(() -> DatabaseErrorChecker.checkDbError(\"InsertUser\", 0));\n    }\n    @Test\n    public void testCheckDbErrorWithNegativeErrorCode() {\n        DatabaseOperationException exception = assertThrows(DatabaseOperationException.class, () -> {\n            DatabaseErrorChecker.checkDbError(\"FetchUser\", -1);\n        });\n        assertEquals(\"FetchUser: DbError -1\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class CoordinateMapper {\n    public static long[] map3DPoint(double longitude, double minLongitude, double maxLongitude, \n                                    double latitude, double minLatitude, double maxLatitude, \n                                    double timestamp, double minTimestamp, double maxTimestamp, \n                                    long maxValue) {\n        long x = mapValue(longitude, minLongitude, maxLongitude, maxValue);\n        long y = mapValue(latitude, minLatitude, maxLatitude, maxValue);\n        long z = mapValue(timestamp, minTimestamp, maxTimestamp, maxValue);\n        return new long[]{x, y, z};\n    }\n    private static long mapValue(double value, double minValue, double maxValue, long targetMaxValue) {\n        return Math.round((value - minValue) / (maxValue - minValue) * targetMaxValue);\n    }\n    public static void main(String[] args) {\n        double longitude = 116.4074, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.9042, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1588000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] mappedCoordinates = map3DPoint(longitude, minLongitude, maxLongitude, latitude, minLatitude, maxLatitude, timestamp, minTimestamp, maxTimestamp, maxValue);\n        System.out.println(\"映射后的坐标: \" + Arrays.toString(mappedCoordinates));\n    }\n}", "content": "请编写一个Java方法，用于将一个三维点的坐标（经度、纬度、时间）映射到一个三维空间的新坐标系中。新坐标系的每个维度的最大值由用户指定。具体来说，你需要根据给定的经度、纬度和时间的最小值和最大值，将原始的三维点映射到一个以0为最小值、用户指定的最大值为最大值的新坐标系中。请确保你的方法能够处理各种输入，并返回一个包含映射后的x、y、z坐标的长整型数组。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\npublic class CoordinateMapper {\n    public static long[] map3DPoint(double longitude, double minLongitude, double maxLongitude, \n                                    double latitude, double minLatitude, double maxLatitude, \n                                    double timestamp, double minTimestamp, double maxTimestamp, \n                                    long maxValue) {\n    }\n    private static long mapValue(double value, double minValue, double maxValue, long targetMaxValue) {\n    }\n}\n```", "id": 1594, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CoordinateMapperTest {\n    @Test\n    public void testMap3DPoint_withinBounds() {\n        double longitude = 116.4074, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.9042, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1588000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{407, 904, 500}, result);\n    }\n    @Test\n    public void testMap3DPoint_edgeValues() {\n        double longitude = 116.0, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 40.0, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1587000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{0, 1000, 0}, result);\n    }\n    @Test\n    public void testMap3DPoint_midRangeValues() {\n        double longitude = 116.5, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.5, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1588000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{500, 500, 500}, result);\n    }\n    @Test\n    public void testMap3DPoint_minValues() {\n        double longitude = 116.0, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.0, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1587000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{0, 0, 0}, result);\n    }\n    @Test\n    public void testMap3DPoint_maxValues() {\n        double longitude = 117.0, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 40.0, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1589000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{1000, 1000, 1000}, result);\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentComparator {\n    public static void compareTextFiles(File file1, File file2) {\n        try (BufferedReader reader1 = new BufferedReader(new FileReader(file1));\n             BufferedReader reader2 = new BufferedReader(new FileReader(file2))) {\n            String line1, line2;\n            boolean areFilesDifferent = false;\n            while ((line1 = reader1.readLine()) != null && (line2 = reader2.readLine()) != null) {\n                if (!line1.trim().equals(line2.trim())) {\n                    areFilesDifferent = true;\n                    break;\n                }\n            }\n            if (line1 != null || reader2.readLine() != null) {\n                areFilesDifferent = true;\n            }\n            if (areFilesDifferent) {\n                System.out.println(\"文件内容不同\");\n            } else {\n                System.out.println(\"文件内容相同\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        File file1 = new File(\"path/to/your/firstFile.txt\");\n        File file2 = new File(\"path/to/your/secondFile.txt\");\n        compareTextFiles(file1, file2);\n    }\n}", "content": "请编写一个Java程序，用于比较两个文本文件的内容是否完全相同。如果内容完全相同，程序应输出“文件内容相同”，如果不同，则输出“文件内容不同”。请确保你的程序能够有效处理文本文件，并且在比较文件内容时忽略行尾的空白字符。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentComparator {\n    public static void compareTextFiles(File file1, File file2) {\n    }\n}\n```", "id": 1595, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\npublic class FileContentComparatorTest {\n    @Test\n    public void testCompareTextFiles_SameContent() throws IOException {\n        File file1 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        File file2 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_DifferentContent() throws IOException {\n        File file1 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        File file2 = createTempFile(\"line1\\nline2\\ndifferent line\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_OneFileIsEmpty() throws IOException {\n        File file1 = createTempFile(\"\");\n        File file2 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_BothFilesEmpty() throws IOException {\n        File file1 = createTempFile(\"\");\n        File file2 = createTempFile(\"\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_FirstFileLonger() throws IOException {\n        File file1 = createTempFile(\"line1\\nline2\\nline3\\nline4\\n\");\n        File file2 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    private File createTempFile(String content) throws IOException {\n        Path tempFile = Files.createTempFile(\"testFile\", \".txt\");\n        FileWriter writer = new FileWriter(tempFile.toFile());\n        writer.write(content);\n        writer.close();\n        return tempFile.toFile();\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\npublic class EmailValidator {\n    private static final String ERROR_INVALID_EMAIL = \"INVALID_EMAIL\";\n    private List<String> errors = new ArrayList<>();\n    public void validateEmail(String email) {\n        String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        if (email == null || !Pattern.matches(emailRegex, email)) {\n            errors.add(ERROR_INVALID_EMAIL);\n        }\n    }\n    public List<String> getErrors() {\n        return errors;\n    }\n    public static void main(String[] args) {\n        EmailValidator validator = new EmailValidator();\n        validator.validateEmail(\"example@example.com\");\n        validator.validateEmail(\"invalid-email\");\n        validator.validateEmail(null);\n        System.out.println(\"Number of errors: \" + validator.getErrors().size());\n        for (String error : validator.getErrors()) {\n            System.out.println(error);\n        }\n    }\n}", "content": "请编写一个Java方法，用于检查传入的字符串是否为有效的电子邮件地址。如果不是，该方法应该将相应的错误信息添加到一个错误列表中。请确保你的代码能够处理null值的情况，并且在检查电子邮件有效性时，考虑到电子邮件地址通常包含用户名、\"@\"符号以及域名。如果电子邮件地址无效，应该使用特定的错误代码\"INVALID_EMAIL\"来标记。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\npublic class EmailValidator {\n    private static final String ERROR_INVALID_EMAIL = \"INVALID_EMAIL\";\n    private List<String> errors = new ArrayList<>();\n    public void validateEmail(String email) {\n    }\n    public List<String> getErrors() {\n        return null;\n    }\n}\n```", "id": 1596, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.*;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.List;\npublic class EmailValidatorTest {\n    private EmailValidator emailValidator;\n    @Before\n    public void setUp() {\n        emailValidator = new EmailValidator();\n    }\n    @Test\n    public void testValidEmail() {\n        emailValidator.validateEmail(\"example@example.com\");\n        List<String> errors = emailValidator.getErrors();\n        assertTrue(errors.isEmpty());\n    }\n    @Test\n    public void testInvalidEmail() {\n        emailValidator.validateEmail(\"invalid-email\");\n        List<String> errors = emailValidator.getErrors();\n        assertEquals(1, errors.size());\n        assertEquals(\"INVALID_EMAIL\", errors.get(0));\n    }\n    @Test\n    public void testNullEmail() {\n        emailValidator.validateEmail(null);\n        List<String> errors = emailValidator.getErrors();\n        assertEquals(1, errors.size());\n        assertEquals(\"INVALID_EMAIL\", errors.get(0));\n    }\n    @Test\n    public void testMultipleEmails() {\n        emailValidator.validateEmail(\"example@example.com\");\n        emailValidator.validateEmail(\"another@example.com\");\n        List<String> errors = emailValidator.getErrors();\n        assertTrue(errors.isEmpty());\n    }\n    @Test\n    public void testMultipleInvalidEmails() {\n        emailValidator.validateEmail(\"example@example.com\");\n        emailValidator.validateEmail(\"invalid-email\");\n        emailValidator.validateEmail(null);\n        List<String> errors = emailValidator.getErrors();\n        assertEquals(2, errors.size());\n        assertEquals(\"INVALID_EMAIL\", errors.get(0));\n        assertEquals(\"INVALID_EMAIL\", errors.get(1));\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\npublic class ColorParser {\n    public static Color parseColor(String colorStr, Color defaultColor) {\n        try {\n            String[] parts = colorStr.split(\",\");\n            if (parts.length != 3) {\n                return defaultColor;\n            }\n            int r = Integer.parseInt(parts[0]);\n            int g = Integer.parseInt(parts[1]);\n            int b = Integer.parseInt(parts[2]);\n            if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n                return defaultColor;\n            }\n            return new Color(r, g, b);\n        } catch (NumberFormatException e) {\n            return defaultColor;\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(parseColor(\"255,0,0\", Color.BLACK).equals(Color.RED)); \n        System.out.println(parseColor(\"255,0\", Color.BLACK).equals(Color.BLACK)); \n        System.out.println(parseColor(\"256,0,0\", Color.BLACK).equals(Color.BLACK)); \n    }\n}", "content": "请编写一个Java方法，用于解析一个特定格式的字符串，并根据这个字符串创建一个`Color`对象。字符串格式为\"R,G,B\"，其中R、G、B分别代表红色、绿色和蓝色的值，这些值的范围是0到255。如果字符串格式不正确或RGB值不在有效范围内，方法应返回一个默认的颜色对象。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.awt.Color;\npublic class ColorParser {\n    public static Color parseColor(String colorStr, Color defaultColor) {\n    }\n}\n```", "id": 1597, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.awt.Color;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ColorParserTest {\n    @Test\n    public void testValidColorString() {\n        Color actual = ColorParser.parseColor(\"255,0,0\", Color.BLACK);\n        assertEquals(new Color(255, 0, 0), actual);\n    }\n    @Test\n    public void testInvalidFormatString() {\n        Color actual = ColorParser.parseColor(\"255,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n    @Test\n    public void testValueOutOfRange() {\n        Color actual = ColorParser.parseColor(\"256,0,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n    @Test\n    public void testNegativeValue() {\n        Color actual = ColorParser.parseColor(\"255,-1,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n    @Test\n    public void testNonNumericValues() {\n        Color actual = ColorParser.parseColor(\"255,abc,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Arrays;\npublic class UpperCaseConverter {\n    public static ArrayList<String> convertToUpper(ArrayList<String> strings) {\n        ArrayList<String> upperCaseStrings = new ArrayList<>();\n        for (String str : strings) {\n            upperCaseStrings.add(str.toUpperCase());\n        }\n        return upperCaseStrings;\n    }\n    public static void main(String[] args) {\n        ArrayList<String> testStrings = new ArrayList<>(Arrays.asList(\"hello\", \"world\", \"java\"));\n        ArrayList<String> upperCaseStrings = convertToUpper(testStrings);\n        System.out.println(upperCaseStrings); \n        ArrayList<String> emptyList = new ArrayList<>();\n        ArrayList<String> resultForEmptyList = convertToUpper(emptyList);\n        System.out.println(resultForEmptyList); \n    }\n}", "content": "请编写一个Java方法，该方法用于处理字符串数组，将数组中的每个字符串转换为大写，并将这些大写字符串添加到一个新的ArrayList中。请确保你的方法能够处理空数组的情况，并且在方法的末尾返回这个新的ArrayList。请遵循以下指导原则来完成这个任务：\n\n- 方法应该是公开的和静态的。\n- 方法的参数应该是一个字符串数组。\n- 方法的返回类型应该是ArrayList<String>。\n- 请确保代码片段是完全独立的，并且在代码开始处导入了所有必要的包。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class UpperCaseConverter {\n    public static ArrayList<String> convertToUpper(ArrayList<String> strings) {\n    }\n}\n```", "id": 1598, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class UpperCaseConverterTest {\n    @Test\n    public void testConvertToUpper_withNormalStrings() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"hello\", \"world\", \"java\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_withEmptyList() {\n        ArrayList<String> input = new ArrayList<>();\n        ArrayList<String> expected = new ArrayList<>();\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_withMixCaseStrings() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"HelLo\", \"WOrLd\", \"JaVA\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_withAllUpperCaseStrings() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_singleElementList() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"single\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"SINGLE\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n}"}}
{"canonical_solution": "import java.math.BigDecimal;\npublic class ShoppingCartCalculator {\n    public static BigDecimal calculateTotalPrice(BigDecimal unitPrice, int quantity) {\n        return unitPrice.multiply(new BigDecimal(quantity));\n    }\n    public static void main(String[] args) {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"89.97\");\n        BigDecimal totalPrice = calculateTotalPrice(unitPrice, quantity);\n        if (totalPrice.compareTo(expectedTotalPrice) == 0) {\n            System.out.println(\"计算结果正确: \" + totalPrice);\n        } else {\n            System.out.println(\"计算结果错误: \" + totalPrice);\n        }\n    }\n}", "content": "请设计一个简单的Java函数，该函数用于处理购物车中商品的价格计算。给定一个商品的单价和数量，计算并返回该商品的总价。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.math.BigDecimal;\npublic class ShoppingCartCalculator {\n    public static BigDecimal calculateTotalPrice(BigDecimal unitPrice, int quantity) {\n    }\n}\n```", "id": 1599, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.math.BigDecimal;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class ShoppingCartCalculatorTest {\n    @Test\n    public void testCalculateTotalPrice_withPositiveQuantity() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"89.97\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withZeroQuantity() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = 0;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"0.00\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withNegativeQuantity() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = -3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"-89.97\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withHighPrecisionUnitPrice() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99999\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"89.99997\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withZeroUnitPrice() {\n        BigDecimal unitPrice = new BigDecimal(\"0.00\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"0.00\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Department {\n    String name;\n    Department(String name) {\n        this.name = name;\n    }\n}\nclass Position {\n    String title;\n    Position(String title) {\n        this.title = title;\n    }\n}\nclass Level {\n    String rank;\n    Level(String rank) {\n        this.rank = rank;\n    }\n}\nclass PriceInfo {\n    Department department;\n    Position position;\n    Level level;\n    PriceInfo(Department department, Position position, Level level) {\n        this.department = department;\n        this.position = position;\n        this.level = level;\n    }\n}\nclass Employee {\n    String id;\n    PriceInfo domesticPrice;\n    PriceInfo internationalPrice;\n    Department department;\n    Position position;\n    Level level;\n    Employee(String id, PriceInfo domesticPrice, PriceInfo internationalPrice) {\n        this.id = id;\n        this.domesticPrice = domesticPrice;\n        this.internationalPrice = internationalPrice;\n    }\n    void updateEmployeeDetails(boolean isDomestic) {\n        PriceInfo priceInfo = isDomestic ? this.domesticPrice : this.internationalPrice;\n        if (Objects.nonNull(priceInfo)) {\n            this.department = priceInfo.department;\n            this.position = priceInfo.position;\n            this.level = priceInfo.level;\n        }\n    }\n}\npublic class EmployeeUpdater {\n    public static void main(String[] args) {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        Department dept2 = new Department(\"市场部\");\n        Position pos2 = new Position(\"市场专员\");\n        Level lev2 = new Level(\"P1\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        PriceInfo international = new PriceInfo(dept2, pos2, lev2);\n        Employee emp = new Employee(\"001\", domestic, international);\n        emp.updateEmployeeDetails(true);\n        System.out.println(\"更新为国内信息后的部门：\" + emp.department.name);\n        emp.updateEmployeeDetails(false);\n        System.out.println(\"更新为国际信息后的部门：\" + emp.department.name);\n    }\n}", "content": "请编写一个Java方法，用于更新一个员工的详细信息。假设我们有一个`Employee`类，其中包含员工的基本信息和两种类型的价格信息：`domesticPrice`和`internationalPrice`。每种价格信息都包含多个属性，如`department`、`position`、`level`等。根据员工的价格类型（国内或国际），我们需要更新员工的部门、职位、级别等信息。如果员工的价格类型是国内的，我们就使用`domesticPrice`中的信息更新员工信息；如果是国际的，就使用`internationalPrice`中的信息更新。请注意，所有使用的类和方法都应该在代码片段中明确导入和定义。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass Department {\n    String name;\n    Department(String name) {\n    }\n}\nclass Position {\n    String title;\n    Position(String title) {\n    }\n}\nclass Level {\n    String rank;\n    Level(String rank) {\n    }\n}\nclass PriceInfo {\n    Department department;\n    Position position;\n    Level level;\n    PriceInfo(Department department, Position position, Level level) {\n    }\n}\nclass Employee {\n    String id;\n    PriceInfo domesticPrice;\n    PriceInfo internationalPrice;\n    Department department;\n    Position position;\n    Level level;\n    Employee(String id, PriceInfo domesticPrice, PriceInfo internationalPrice) {\n    }\n    void updateEmployeeDetails(boolean isDomestic) {\n    }\n}\npublic class EmployeeUpdater {\n}\n```", "id": 1600, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass DepartmentTest {\n    @Test\n    void testDepartmentConstructor() {\n        Department dept = new Department(\"研发部\");\n        assertEquals(\"研发部\", dept.name);\n    }\n}\nclass PositionTest {\n    @Test\n    void testPositionConstructor() {\n        Position pos = new Position(\"软件工程师\");\n        assertEquals(\"软件工程师\", pos.title);\n    }\n}\nclass LevelTest {\n    @Test\n    void testLevelConstructor() {\n        Level level = new Level(\"P2\");\n        assertEquals(\"P2\", level.rank);\n    }\n}\nclass PriceInfoTest {\n    @Test\n    void testPriceInfoConstructor() {\n        Department dept = new Department(\"研发部\");\n        Position pos = new Position(\"软件工程师\");\n        Level level = new Level(\"P2\");\n        PriceInfo priceInfo = new PriceInfo(dept, pos, level);\n        assertEquals(dept, priceInfo.department);\n        assertEquals(pos, priceInfo.position);\n        assertEquals(level, priceInfo.level);\n    }\n}\nclass EmployeeTest {\n    @Test\n    void testUpdateEmployeeDetailsDomestic() {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        Department dept2 = new Department(\"市场部\");\n        Position pos2 = new Position(\"市场专员\");\n        Level lev2 = new Level(\"P1\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        PriceInfo international = new PriceInfo(dept2, pos2, lev2);\n        Employee emp = new Employee(\"001\", domestic, international);\n        emp.updateEmployeeDetails(true);\n        assertEquals(dept1, emp.department);\n        assertEquals(pos1, emp.position);\n        assertEquals(lev1, emp.level);\n    }\n    @Test\n    void testUpdateEmployeeDetailsInternational() {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        Department dept2 = new Department(\"市场部\");\n        Position pos2 = new Position(\"市场专员\");\n        Level lev2 = new Level(\"P1\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        PriceInfo international = new PriceInfo(dept2, pos2, lev2);\n        Employee emp = new Employee(\"001\", domestic, international);\n        emp.updateEmployeeDetails(false);\n        assertEquals(dept2, emp.department);\n        assertEquals(pos2, emp.position);\n        assertEquals(lev2, emp.level);\n    }\n    @Test\n    void testUpdateEmployeeDetailsNullPriceInfo() {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        Employee emp = new Employee(\"001\", domestic, null);\n        emp.updateEmployeeDetails(false);\n        assertNull(emp.department);\n        assertNull(emp.position);\n        assertNull(emp.level);\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\nclass AuthorizationInfo {\n    private String modelId;\n    private String accessToken;\n    private LocalDateTime expiresOn;\n    private String resourceId;\n    private String resourceRegion;\n    public AuthorizationInfo(String modelId, String accessToken, LocalDateTime expiresOn, String resourceId, String resourceRegion) {\n        this.modelId = modelId;\n        this.accessToken = accessToken;\n        this.expiresOn = expiresOn;\n        this.resourceId = resourceId;\n        this.resourceRegion = resourceRegion;\n    }\n    public String getModelId() {\n        return modelId;\n    }\n    public String getAccessToken() {\n        return accessToken;\n    }\n    public LocalDateTime getExpiresOn() {\n        return expiresOn;\n    }\n    public String getResourceId() {\n        return resourceId;\n    }\n    public String getResourceRegion() {\n        return resourceRegion;\n    }\n}\npublic class AuthorizationGenerator {\n    public static void generateAuthorizationInfo() {\n        String modelId = \"model-123\";\n        String accessToken = \"access-token-abc\";\n        LocalDateTime expiresOn = LocalDateTime.now().plusDays(30); \n        String resourceId = \"resource-id-xyz\";\n        String resourceRegion = \"resource-region-789\";\n        AuthorizationInfo authorizationInfo = new AuthorizationInfo(modelId, accessToken, expiresOn, resourceId, resourceRegion);\n        System.out.printf(\"授权信息：模型ID: %s, 访问令牌: %s, 过期时间: %s, 目标资源ID: %s, 目标资源区域: %s%n\",\n                authorizationInfo.getModelId(),\n                authorizationInfo.getAccessToken(),\n                authorizationInfo.getExpiresOn(),\n                authorizationInfo.getResourceId(),\n                authorizationInfo.getResourceRegion()\n        );\n    }\n    public static void main(String[] args) {\n        generateAuthorizationInfo();\n    }\n}", "content": "请编写一个Java方法，该方法能够生成一个授权信息对象，并打印出该对象的详细信息。授权信息包括模型ID、访问令牌、过期时间、目标资源ID和目标资源区域。请确保你的方法包含所有必要的实现细节和包导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.time.LocalDateTime;\nclass AuthorizationInfo {\n    private String modelId;\n    private String accessToken;\n    private LocalDateTime expiresOn;\n    private String resourceId;\n    private String resourceRegion;\n    public AuthorizationInfo(String modelId, String accessToken, LocalDateTime expiresOn, String resourceId, String resourceRegion) {\n    }\n    public String getModelId() {\n    }\n    public String getAccessToken() {\n    }\n    public LocalDateTime getExpiresOn() {\n    }\n    public String getResourceId() {\n    }\n    public String getResourceRegion() {\n    }\n}\npublic class AuthorizationGenerator {\n    public static void generateAuthorizationInfo() {\n    }\n}\n```", "id": 1601, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.time.LocalDateTime;\nclass AuthorizationInfoTest {\n    @Test\n    public void testGetModelId() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"model-123\", authInfo.getModelId());\n    }\n    @Test\n    public void testGetAccessToken() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"access-token-abc\", authInfo.getAccessToken());\n    }\n    @Test\n    public void testGetExpiresOn() {\n        LocalDateTime futureDate = LocalDateTime.now().plusDays(30);\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", futureDate, \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(futureDate, authInfo.getExpiresOn());\n    }\n    @Test\n    public void testGetResourceId() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"resource-id-xyz\", authInfo.getResourceId());\n    }\n    @Test\n    public void testGetResourceRegion() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"resource-region-789\", authInfo.getResourceRegion());\n    }\n}\nclass AuthorizationGeneratorTest {\n    @Test\n    public void testGenerateAuthorizationInfo() {\n        AuthorizationGenerator.generateAuthorizationInfo(); \n    }\n}"}}
{"canonical_solution": "import java.util.IllegalFormatException;\npublic class SimpleCalculator {\n    public double addition(double a, double b) {\n        return a + b;\n    }\n    public double subtraction(double a, double b) {\n        return a - b;\n    }\n    public double multiplication(double a, double b) {\n        return a * b;\n    }\n    public double division(double a, double b) {\n        if (b == 0) {\n            throw new IllegalArgumentException(\"除数不能为零。\");\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        System.out.println(\"3 + 5 = \" + calculator.addition(3, 5));\n        System.out.println(\"10 - 2 = \" + calculator.subtraction(10, 2));\n        System.out.println(\"4 * 7 = \" + calculator.multiplication(4, 7));\n        try {\n            System.out.println(\"9 / 0 = \" + calculator.division(9, 0));\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"捕获到异常：\" + e.getMessage());\n        }\n        check(calculator.addition(3, 5) == 8, \"加法运算错误\");\n        check(calculator.subtraction(10, 2) == 8, \"减法运算错误\");\n        check(calculator.multiplication(4, 7) == 28, \"乘法运算错误\");\n        try {\n            calculator.division(9, 0);\n            check(false, \"除法运算错误，未抛出异常\");\n        } catch (IllegalArgumentException e) {\n            check(true, \"除法运算正确\");\n        }\n    }\n    private static void check(boolean condition, String message) {\n        if (!condition) {\n            throw new AssertionError(message);\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个计算器需要包含四个基本的数学运算方法：加法(addition)、减法(subtraction)、乘法(multiplication)和除法(division)。每个方法接收两个`double`类型的参数，返回一个`double`类型的结果。除法方法需要处理除数为零的情况，当除数为零时，应抛出一个`IllegalArgumentException`异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.IllegalFormatException;\npublic class SimpleCalculator {\n    public double addition(double a, double b) {\n    }\n    public double subtraction(double a, double b) {\n    }\n    public double multiplication(double a, double b) {\n    }\n    public double division(double a, double b) {\n    }\n}\n```", "id": 1602, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddition() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8, calculator.addition(3, 5));\n        assertEquals(0, calculator.addition(-1, 1));\n        assertEquals(-3, calculator.addition(-1, -2));\n    }\n    @Test\n    public void testSubtraction() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8, calculator.subtraction(10, 2));\n        assertEquals(-2, calculator.subtraction(-1, 1));\n        assertEquals(1, calculator.subtraction(0, -1));\n    }\n    @Test\n    public void testMultiplication() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(28, calculator.multiplication(4, 7));\n        assertEquals(-4, calculator.multiplication(-1, 4));\n        assertEquals(0, calculator.multiplication(0, 100));\n    }\n    @Test\n    public void testDivision() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(2, calculator.division(10, 5));\n        assertEquals(-2, calculator.division(-4, 2));\n        assertThrows(IllegalArgumentException.class, () -> {\n            calculator.division(1, 0);\n        });\n    }\n    @Test\n    public void testDivisionWithZeroNumerator() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(0, calculator.division(0, 5));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass BookLoan {\n    int bookId;\n    int borrowerId;\n    Date borrowDate;\n    public BookLoan(int bookId, int borrowerId, Date borrowDate) {\n        this.bookId = bookId;\n        this.borrowerId = borrowerId;\n        this.borrowDate = borrowDate;\n    }\n}\nclass BookLoanDAO {\n    public List<BookLoan> findAll() {\n        List<BookLoan> records = new ArrayList<>();\n        records.add(new BookLoan(1, 1001, new Date()));\n        records.add(new BookLoan(2, 1002, new Date()));\n        return records;\n    }\n}\nclass BookLoanService {\n    BookLoanDAO bookLoanDAO = new BookLoanDAO();\n    public List<BookLoan> fetchLoanRecordsByPage(int pageNumber, int pageSize) {\n        List<BookLoan> allRecords = bookLoanDAO.findAll();\n        int start = (pageNumber - 1) * pageSize;\n        int end = Math.min(start + pageSize, allRecords.size());\n        if (start > allRecords.size()) {\n            return new ArrayList<>();\n        }\n        return new ArrayList<>(allRecords.subList(start, end));\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page1 = service.fetchLoanRecordsByPage(1, 2);\n        System.out.println(\"第一页借阅记录数量：\" + page1.size());\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统中的图书借阅记录分页查询功能。考虑到数据库中可能存储了大量的借阅记录，需要通过分页的方式来优化查询。每次查询返回一页的借阅记录，每页包含固定数量的记录。具体要求如下：\n\n- 定义一个名为`BookLoan`的类，包含图书ID（`bookId`）、借阅者ID（`borrowerId`）和借阅日期（`borrowDate`）三个属性。\n- 实现一个名为`BookLoanService`的类，其中包含一个方法`fetchLoanRecordsByPage`，该方法接收两个参数：`pageNumber`（当前页码）和`pageSize`（每页记录数），并返回当前页的借阅记录列表。\n- 假设已有一个名为`BookLoanDAO`的类，其中包含一个方法`findAll`，该方法可以返回所有的借阅记录列表（在实际应用中，这可能是通过访问数据库获得的）。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass BookLoan {\n    int bookId;\n    int borrowerId;\n    Date borrowDate;\n    public BookLoan(int bookId, int borrowerId, Date borrowDate) {\n    }\n}\nclass BookLoanDAO {\n    public List<BookLoan> findAll() {\n    }\n}\nclass BookLoanService {\n    BookLoanDAO bookLoanDAO = new BookLoanDAO();\n    public List<BookLoan> fetchLoanRecordsByPage(int pageNumber, int pageSize) {\n    }\n}\n```", "id": 1603, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.util.Date;\nimport java.util.List;\nclass BookLoanTest {\n    @Test\n    void testBookLoanConstructor() {\n        Date now = new Date();\n        BookLoan bookLoan = new BookLoan(1, 101, now);\n        Assertions.assertEquals(1, bookLoan.bookId);\n        Assertions.assertEquals(101, bookLoan.borrowerId);\n        Assertions.assertEquals(now, bookLoan.borrowDate);\n    }\n}\nclass BookLoanDAOTest {\n    @Test\n    void testFindAll() {\n        BookLoanDAO dao = new BookLoanDAO();\n        List<BookLoan> loans = dao.findAll();\n        Assertions.assertNotNull(loans);\n        Assertions.assertEquals(2, loans.size());\n    }\n}\nclass BookLoanServiceTest {\n    @Test\n    void testFetchLoanRecordsByPage_firstPage() {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page1 = service.fetchLoanRecordsByPage(1, 2);\n        Assertions.assertEquals(2, page1.size());\n    }\n    @Test\n    void testFetchLoanRecordsByPage_secondPage() {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page2 = service.fetchLoanRecordsByPage(2, 2);\n        Assertions.assertEquals(0, page2.size());\n    }\n    @Test\n    void testFetchLoanRecordsByPage_invalidPage() {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page = service.fetchLoanRecordsByPage(3, 2);\n        Assertions.assertEquals(0, page.size());\n    }\n}"}}
{"canonical_solution": "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\ninterface DatabaseAccess {\n    List<String> scan(String pattern);\n}\nclass MockDatabase implements DatabaseAccess {\n    @Override\n    public List<String> scan(String pattern) {\n        List<String> allRecords = List.of(\"student:001\", \"student:002\", \"teacher:001\", \"student:003\");\n        List<String> matchedRecords = new ArrayList<>();\n        for (String record : allRecords) {\n            if (record.startsWith(pattern)) {\n                matchedRecords.add(record);\n            }\n        }\n        return matchedRecords;\n    }\n}\npublic class RecordFinder {\n    public static List<String> findRecordsWithPrefix(DatabaseAccess databaseAccess, String prefix) {\n        return databaseAccess.scan(prefix);\n    }\n    public static void main(String[] args) {\n        MockDatabase mockDatabase = new MockDatabase();\n        List<String> studentRecords = findRecordsWithPrefix(mockDatabase, \"student:\");\n        System.out.println(\"找到的学生记录有: \" + studentRecords);\n    }\n}", "content": "请编写一个Java方法，用于从一个模拟的数据库中查询出所有符合特定模式的记录。例如，我们想要查询所有以\"student:\"为前缀的记录。该方法应该能够高效地处理大量的数据，并确保在查询结束后释放所有资源，避免资源泄露。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\ninterface DatabaseAccess {\n    List<String> scan(String pattern);\n}\nclass MockDatabase implements DatabaseAccess {\n    @Override\n    public List<String> scan(String pattern) {\n    }\n}\npublic class RecordFinder {\n    public static List<String> findRecordsWithPrefix(DatabaseAccess databaseAccess, String prefix) {\n    }\n}\n```", "id": 1604, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nclass MockDatabaseTest {\n    DatabaseAccess databaseAccess = new MockDatabase();\n    @Test\n    void testScanWithStudentPrefix() {\n        List<String> results = databaseAccess.scan(\"student:\");\n        assertEquals(3, results.size());\n        assertTrue(results.contains(\"student:001\"));\n        assertTrue(results.contains(\"student:002\"));\n        assertTrue(results.contains(\"student:003\"));\n    }\n    @Test\n    void testScanWithTeacherPrefix() {\n        List<String> results = databaseAccess.scan(\"teacher:\");\n        assertEquals(1, results.size());\n        assertTrue(results.contains(\"teacher:001\"));\n    }\n    @Test\n    void testScanWithEmptyPrefix() {\n        List<String> results = databaseAccess.scan(\"\");\n        assertEquals(4, results.size());\n        assertTrue(results.contains(\"student:001\"));\n        assertTrue(results.contains(\"student:002\"));\n        assertTrue(results.contains(\"teacher:001\"));\n        assertTrue(results.contains(\"student:003\"));\n    }\n    @Test\n    void testScanWithNoMatchingPrefix() {\n        List<String> results = databaseAccess.scan(\"professor:\");\n        assertEquals(0, results.size());\n    }\n}\nclass RecordFinderTest {\n    DatabaseAccess databaseAccess = new MockDatabase();\n    @Test\n    void testFindRecordsWithStudentPrefix() {\n        List<String> results = RecordFinder.findRecordsWithPrefix(databaseAccess, \"student:\");\n        assertEquals(3, results.size());\n        assertTrue(results.contains(\"student:001\"));\n        assertTrue(results.contains(\"student:002\"));\n        assertTrue(results.contains(\"student:003\"));\n    }\n    @Test\n    void testFindRecordsWithTeacherPrefix() {\n        List<String> results = RecordFinder.findRecordsWithPrefix(databaseAccess, \"teacher:\");\n        assertEquals(1, results.size());\n        assertTrue(results.contains(\"teacher:001\"));\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class TextReader {\n    public String readTextWithoutNewlines(String filePath) throws IOException {\n        StringBuilder contentBuilder = new StringBuilder();\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new FileReader(filePath));\n            String currentLine;\n            while ((currentLine = reader.readLine()) != null) {\n                contentBuilder.append(currentLine);\n            }\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }\n        return contentBuilder.toString();\n    }\n    public static void main(String[] args) {\n        TextReader reader = new TextReader();\n        try {\n            String result = reader.readTextWithoutNewlines(\"example.txt\");\n            System.out.println(result);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "请编写一个Java方法，用于从文件中读取文本内容，并移除所有的换行符（'\\n'）。该方法接收一个文件路径作为参数，并返回一个不包含换行符的字符串。请确保在读取文件时正确处理资源关闭和异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class TextReader {\n    public String readTextWithoutNewlines(String filePath) throws IOException {\n    }\n}\n```", "id": 1605, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.io.TempDir;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\npublic class TextReaderTest {\n    private TextReader textReader;\n    @BeforeEach\n    public void setUp() {\n        textReader = new TextReader();\n    }\n    @TempDir\n    Path tempDir;\n    @Test\n    public void testReadTextWithoutNewlines_singleLine() throws IOException {\n        Path filePath = tempDir.resolve(\"singleLine.txt\");\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()))) {\n            writer.write(\"This is a single line without newlines.\");\n        }\n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"This is a single line without newlines.\", result);\n    }\n    @Test\n    public void testReadTextWithoutNewlines_multipleLines() throws IOException {\n        Path filePath = tempDir.resolve(\"multipleLines.txt\");\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()))) {\n            writer.write(\"Line1\\nLine2\\nLine3\\n\");\n        }\n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"Line1Line2Line3\", result);\n    }\n    @Test\n    public void testReadTextWithoutNewlines_fileDoesNotExist() {\n        assertThrows(IOException.class, () -> {\n            textReader.readTextWithoutNewlines(tempDir.resolve(\"nonExistentFile.txt\").toString());\n        });\n    }\n    @Test\n    public void testReadTextWithoutNewlines_emptyFile() throws IOException {\n        Path filePath = tempDir.resolve(\"emptyFile.txt\");\n        filePath.toFile().createNewFile(); \n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testReadTextWithoutNewlines_fileWithOnlyNewlines() throws IOException {\n        Path filePath = tempDir.resolve(\"onlyNewlines.txt\");\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()))) {\n            writer.write(\"\\n\\n\\n\");\n        }\n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"\", result);\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\npublic class SimpleLogger {\n    private String logFilePath;\n    public SimpleLogger(String logFilePath) {\n        this.logFilePath = logFilePath;\n    }\n    public void appendLog(String logInfo) {\n        if (logInfo == null) {\n            return;\n        }\n        File logFile = new File(logFilePath);\n        try (FileOutputStream out = new FileOutputStream(logFile, true)) {\n            out.write((logInfo + \"\\n\").getBytes());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        SimpleLogger logger = new SimpleLogger(\"log.txt\");\n        logger.appendLog(\"这是一条测试日志信息。\");\n        logger.appendLog(\"这是另一条测试日志信息。\");\n    }\n}", "content": "请编写一个Java程序，实现一个简单的日志记录功能。具体要求如下：\n\n- 需要有一个方法，该方法接受一个字符串参数作为日志信息。\n- 如果传入的日志信息为`null`，则方法不执行任何操作。\n- 方法应该将日志信息追加到一个指定的日志文件中。每条日志信息占一行，日志信息后应该跟着一个换行符。\n- 请确保在写入日志信息时，如果日志文件不存在，则自动创建该文件。\n- 请处理可能出现的所有异常，例如文件找不到或写入错误等，并打印出异常信息。\n\n请注意，你需要自行决定方法的名称、参数名等，使代码尽可能符合Java的编码习惯。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\npublic class SimpleLogger {\n    private String logFilePath;\n    public SimpleLogger(String logFilePath) {\n    }\n    public void appendLog(String logInfo) {\n    }\n}\n```", "id": 1606, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.io.IOException;\npublic class SimpleLoggerTest {\n    private SimpleLogger logger;\n    private static final String LOG_FILE_PATH = \"test_log.txt\";\n    @BeforeEach\n    public void setup() {\n        logger = new SimpleLogger(LOG_FILE_PATH);\n        File logFile = new File(LOG_FILE_PATH);\n        if (logFile.exists()) {\n            logFile.delete();\n        }\n    }\n    @Test\n    public void testAppendLog_createsFileIfNotExist() throws IOException {\n        logger.appendLog(\"Test log entry\");\n        File logFile = new File(LOG_FILE_PATH);\n        assertTrue(logFile.exists(), \"Log file should be created.\");\n    }\n    @Test\n    public void testAppendLog_appendsNewEntry() throws IOException {\n        logger.appendLog(\"First log entry\");\n        logger.appendLog(\"Second log entry\");\n        String logContent = new String(Files.readAllBytes(new File(LOG_FILE_PATH).toPath()));\n        assertTrue(logContent.contains(\"First log entry\"), \"First log entry should be in the log.\");\n        assertTrue(logContent.contains(\"Second log entry\"), \"Second log entry should be in the log.\");\n    }\n    @Test\n    public void testAppendLog_ignoresNullLogInfo() throws IOException {\n        logger.appendLog(null);\n        File logFile = new File(LOG_FILE_PATH);\n        assertFalse(logFile.exists(), \"Log file should not be created when log entry is null.\");\n    }\n    @Test\n    public void testAppendLog_handlesEmptyStringLogEntry() throws IOException {\n        logger.appendLog(\"\");\n        String logContent = new String(Files.readAllBytes(new File(LOG_FILE_PATH).toPath()));\n        assertEquals(\"\\n\", logContent, \"Log file should contain a single newline for empty log entry.\");\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Arrays;\nclass CustomListAdapter {\n    private ArrayList<String> dataList = new ArrayList<>();\n    public CustomListAdapter(String[] initialData) {\n        dataList.addAll(Arrays.asList(initialData));\n    }\n    public void clearDataAndNotify() {\n        dataList.clear();\n        notifyDataChanged();\n    }\n    private void notifyDataChanged() {\n        System.out.println(\"数据集已变化。\");\n    }\n    public boolean checkDataIsEmpty() {\n        return dataList.isEmpty();\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\", \"数据2\", \"数据3\"});\n        adapter.clearDataAndNotify();\n        if (adapter.checkDataIsEmpty()) {\n            System.out.println(\"数据列表已成功清空。\");\n        } else {\n            System.out.println(\"数据列表清空失败。\");\n        }\n    }\n}", "content": "请设计一个Java方法，用于清空一个ArrayList中的所有元素，并且通知数据集已经发生了变化。这个方法应该是一个自定义的适配器类中的一部分，用于处理列表数据。确保你的代码是完整的，并且可以独立运行。请遵循给定的指导原则来完成这个任务。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nclass CustomListAdapter {\n    private ArrayList<String> dataList = new ArrayList<>();\n    public CustomListAdapter(String[] initialData) {\n    }\n    public void clearDataAndNotify() {\n    }\n    private void notifyDataChanged() {\n    }\n    public boolean checkDataIsEmpty() {\n        return false;\n    }\n}\n```", "id": 1607, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass CustomListAdapterTest {\n    @Test\n    void testClearDataAndNotify() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\", \"数据2\", \"数据3\"});\n        adapter.clearDataAndNotify();\n        assertTrue(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testCheckDataIsEmptyWithNonEmptyData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\", \"数据2\", \"数据3\"});\n        assertFalse(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testCheckDataIsEmptyWithEmptyData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{});\n        assertTrue(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testConstructorWithEmptyInitialData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{});\n        assertTrue(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testConstructorWithNonEmptyInitialData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\"});\n        assertFalse(adapter.checkDataIsEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class StudentQueryService {\n    public static String queryStudentNameById(String studentId) {\n        Map<String, String> database = new HashMap<>();\n        database.put(\"S001\", \"张三\");\n        database.put(\"S002\", \"李四\");\n        database.put(\"S003\", \"王五\");\n        return database.getOrDefault(studentId, \"未找到学生信息\");\n    }\n    public static void check() {\n        System.out.println(queryStudentNameById(\"S001\").equals(\"张三\") ? \"测试通过\" : \"测试失败\");\n        System.out.println(queryStudentNameById(\"S004\").equals(\"未找到学生信息\") ? \"测试通过\" : \"测试失败\");\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "请编写一个Java方法，该方法能够查询并返回一个特定的数据库记录。假设我们有一个数据库表`Students`，其中包含学生的信息，如学生ID(`studentId`)和学生姓名(`name`)。编写一个方法`queryStudentNameById`，它接受一个学生ID作为参数，并返回对应学生的姓名。如果给定的学生ID在数据库中不存在，则返回一个字符串`\"未找到学生信息\"`。为了简化问题，我们将使用一个预定义的`HashMap`来模拟数据库的操作，其中键是学生ID，值是学生姓名。\n\n请确保你的代码片段包括必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentQueryService {\n    public static String queryStudentNameById(String studentId) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1608, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class StudentQueryServiceTest {\n    @Test\n    public void testQueryStudentNameById_ExistingIdS001() {\n        assertEquals(\"张三\", StudentQueryService.queryStudentNameById(\"S001\"));\n    }\n    @Test\n    public void testQueryStudentNameById_ExistingIdS002() {\n        assertEquals(\"李四\", StudentQueryService.queryStudentNameById(\"S002\"));\n    }\n    @Test\n    public void testQueryStudentNameById_ExistingIdS003() {\n        assertEquals(\"王五\", StudentQueryService.queryStudentNameById(\"S003\"));\n    }\n    @Test\n    public void testQueryStudentNameById_NonExistingIdS004() {\n        assertEquals(\"未找到学生信息\", StudentQueryService.queryStudentNameById(\"S004\"));\n    }\n    @Test\n    public void testQueryStudentNameById_EmptyId() {\n        assertEquals(\"未找到学生信息\", StudentQueryService.queryStudentNameById(\"\"));\n    }\n}"}}
{"canonical_solution": "import java.nio.ByteBuffer;\npublic class IntegerToBytesConverter {\n    public static byte[] convertIntToBigEndianBytes(int number) {\n        ByteBuffer buffer = ByteBuffer.allocate(4);\n        buffer.putInt(number);\n        return buffer.array();\n    }\n    public static void main(String[] args) {\n        int testNumber = 0x12345678;\n        byte[] expectedResult = {0x12, 0x34, 0x56, 0x78};\n        byte[] result = convertIntToBigEndianBytes(testNumber);\n        boolean isCorrect = true;\n        for (int i = 0; i < 4; i++) {\n            if (result[i] != expectedResult[i]) {\n                isCorrect = false;\n                break;\n            }\n        }\n        if (isCorrect) {\n            System.out.println(\"转换正确！\");\n        } else {\n            System.out.println(\"转换错误。\");\n        }\n    }\n}", "content": "请编写一个Java函数，该函数能够将一个整数转换为一个4字节的字节数组。整数的转换应该是大端序（即最高有效位在字节数组的最低地址）。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.nio.ByteBuffer;\npublic class IntegerToBytesConverter {\n    public static byte[] convertIntToBigEndianBytes(int number) {\n    }\n}\n```", "id": 1609, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport org.junit.jupiter.api.Test;\npublic class IntegerToBytesConverterTest {\n    @Test\n    public void testConvertIntToBigEndianBytes_PositiveNumber() {\n        int testNumber = 0x12345678;\n        byte[] expectedResult = {0x12, 0x34, 0x56, 0x78};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_NegativeNumber() {\n        int testNumber = 0x87654321;\n        byte[] expectedResult = {(byte)0x87, 0x65, 0x43, 0x21};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_Zero() {\n        int testNumber = 0x00000000;\n        byte[] expectedResult = {0x00, 0x00, 0x00, 0x00};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_MaxInt() {\n        int testNumber = 0x7FFFFFFF;\n        byte[] expectedResult = {0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_MinInt() {\n        int testNumber = 0x80000000;\n        byte[] expectedResult = {(byte)0x80, 0x00, 0x00, 0x00};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.ArrayList;\nclass User {\n    Long userId;\n    String userName;\n    public User(Long userId, String userName) {\n        this.userId = userId;\n        this.userName = userName;\n    }\n    public Long getUserId() {\n        return userId;\n    }\n    public void setUserId(Long userId) {\n        this.userId = userId;\n    }\n    public String getUserName() {\n        return userName;\n    }\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n}\nclass FollowRelation {\n    Long followerId;\n    Long followingId;\n    public FollowRelation(Long followerId, Long followingId) {\n        this.followerId = followerId;\n        this.followingId = followingId;\n    }\n    public Long getFollowerId() {\n        return followerId;\n    }\n    public void setFollowerId(Long followerId) {\n        this.followerId = followerId;\n    }\n    public Long getFollowingId() {\n        return followingId;\n    }\n    public void setFollowingId(Long followingId) {\n        this.followingId = followingId;\n    }\n}\npublic class UserFollowService {\n    private List<User> users = new ArrayList<>();\n    private List<FollowRelation> followRelations = new ArrayList<>();\n    public UserFollowService(List<User> users, List<FollowRelation> followRelations) {\n        this.users = users;\n        this.followRelations = followRelations;\n    }\n    public List<User> getFollowers(Long userId) {\n        return followRelations.stream()\n                .filter(relation -> relation.getFollowingId().equals(userId))\n                .map(relation -> users.stream()\n                        .filter(user -> user.getUserId().equals(relation.getFollowerId()))\n                        .findFirst().orElse(null))\n                .collect(Collectors.toList());\n    }\n    public static void main(String[] args) {\n        List<User> users = List.of(\n                new User(1L, \"Alice\"),\n                new User(2L, \"Bob\"),\n                new User(3L, \"Charlie\")\n        );\n        List<FollowRelation> followRelations = List.of(\n                new FollowRelation(1L, 2L),\n                new FollowRelation(3L, 2L)\n        );\n        UserFollowService service = new UserFollowService(users, followRelations);\n        List<User> followers = service.getFollowers(2L);\n        for (User user : followers) {\n            System.out.println(user.getUserName());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于获取指定用户的所有关注者信息。假设我们有一个用户表和一个关注关系表，每条关注关系记录了谁关注了谁。现在，给定一个用户ID，我们需要返回这个用户的所有关注者的信息。关注者信息应该包括用户ID和用户名。请确保你的代码是完全独立的，并且包含了所有必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.ArrayList;\nclass User {\n    Long userId;\n    String userName;\n    public User(Long userId, String userName) {\n    }\n    public Long getUserId() {\n        return userId;\n    }\n    public void setUserId(Long userId) {\n    }\n    public String getUserName() {\n        return userName;\n    }\n    public void setUserName(String userName) {\n    }\n}\nclass FollowRelation {\n    Long followerId;\n    Long followingId;\n    public FollowRelation(Long followerId, Long followingId) {\n    }\n    public Long getFollowerId() {\n        return followerId;\n    }\n    public void setFollowerId(Long followerId) {\n    }\n    public Long getFollowingId() {\n        return followingId;\n    }\n    public void setFollowingId(Long followingId) {\n    }\n}\npublic class UserFollowService {\n    private List<User> users = new ArrayList<>();\n    private List<FollowRelation> followRelations = new ArrayList<>();\n    public UserFollowService(List<User> users, List<FollowRelation> followRelations) {\n    }\n    public List<User> getFollowers(Long userId) {\n        return followRelations.stream()\n                .filter(relation -> relation.getFollowingId().equals(userId))\n                .map(relation -> users.stream()\n                        .filter(user -> user.getUserId().equals(relation.getFollowerId()))\n                        .findFirst().orElse(null))\n                .collect(Collectors.toList());\n    }\n}\n```", "id": 1610, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.ArrayList;\nclass UserFollowServiceTest {\n    private UserFollowService service;\n    private List<User> users;\n    private List<FollowRelation> followRelations;\n    @BeforeEach\n    void setUp() {\n        users = List.of(\n                new User(1L, \"Alice\"),\n                new User(2L, \"Bob\"),\n                new User(3L, \"Charlie\"),\n                new User(4L, \"David\")\n        );\n        followRelations = List.of(\n                new FollowRelation(1L, 2L),\n                new FollowRelation(3L, 2L),\n                new FollowRelation(4L, 3L)\n        );\n        service = new UserFollowService(users, followRelations);\n    }\n    @Test\n    void testGetFollowers_UserWithFollowers() {\n        List<User> followers = service.getFollowers(2L);\n        assertEquals(2, followers.size());\n        assertTrue(followers.stream().anyMatch(user -> user.getUserName().equals(\"Alice\")));\n        assertTrue(followers.stream().anyMatch(user -> user.getUserName().equals(\"Charlie\")));\n    }\n    @Test\n    void testGetFollowers_UserWithSingleFollower() {\n        List<User> followers = service.getFollowers(3L);\n        assertEquals(1, followers.size());\n        assertEquals(\"David\", followers.get(0).getUserName());\n    }\n    @Test\n    void testGetFollowers_UserWithNoFollowers() {\n        List<User> followers = service.getFollowers(1L);\n        assertEquals(0, followers.size());\n    }\n    @Test\n    void testGetFollowers_UserNotInList() {\n        List<User> followers = service.getFollowers(5L);\n        assertEquals(0, followers.size());\n    }\n    @Test\n    void testGetFollowers_EmptyFollowRelations() {\n        UserFollowService emptyService = new UserFollowService(users, new ArrayList<>());\n        List<User> followers = emptyService.getFollowers(2L);\n        assertEquals(0, followers.size());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass ResponseObject {\n    private boolean isSuccessful;\n    private int statusCode;\n    private String message;\n    public ResponseObject(boolean isSuccessful, int statusCode, String message) {\n        this.isSuccessful = isSuccessful;\n        this.statusCode = statusCode;\n        this.message = message;\n    }\n    public boolean isSuccessful() {\n        return isSuccessful;\n    }\n    public void setSuccessful(boolean successful) {\n        isSuccessful = successful;\n    }\n    public int getStatusCode() {\n        return statusCode;\n    }\n    public void setStatusCode(int statusCode) {\n        this.statusCode = statusCode;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public void setMessage(String message) {\n        this.message = message;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof ResponseObject)) return false;\n        ResponseObject that = (ResponseObject) o;\n        return isSuccessful == that.isSuccessful &&\n                statusCode == that.statusCode &&\n                Objects.equals(message, that.message);\n    }\n}\npublic class ResponseUtil {\n    public static ResponseObject createResponse(int statusCode, String responseMessage) {\n        boolean isSuccessful = statusCode >= 0;\n        return new ResponseObject(isSuccessful, statusCode, responseMessage);\n    }\n    public static void checkResponse() {\n        ResponseObject test1 = createResponse(200, \"操作成功\");\n        ResponseObject expected1 = new ResponseObject(true, 200, \"操作成功\");\n        ResponseObject test2 = createResponse(-1, \"操作失败\");\n        ResponseObject expected2 = new ResponseObject(false, -1, \"操作失败\");\n        assert test1.equals(expected1) : \"测试1失败\";\n        assert test2.equals(expected2) : \"测试2失败\";\n    }\n    public static void main(String[] args) {\n        checkResponse(); \n        System.out.println(\"所有测试通过\");\n    }\n}", "content": "请编写一个Java方法，该方法接收一个整数`statusCode`和一个字符串`responseMessage`作为参数，返回一个`ResponseObject`对象。这个对象包含三个属性：`isSuccessful`（布尔类型，表示操作是否成功），`statusCode`（整数类型，表示状态码），和`message`（字符串类型，表示返回的消息）。如果传入的状态码大于等于0，则认为操作成功，`isSuccessful`应该设置为`true`；否则，设置为`false`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass ResponseObject {\n    private boolean isSuccessful;\n    private int statusCode;\n    private String message;\n    public ResponseObject(boolean isSuccessful, int statusCode, String message) {\n    }\n    public boolean isSuccessful() {\n    }\n    public void setSuccessful(boolean successful) {\n    }\n    public int getStatusCode() {\n    }\n    public void setStatusCode(int statusCode) {\n    }\n    public String getMessage() {\n    }\n    public void setMessage(String message) {\n    }\n    @Override\n    public boolean equals(Object o) {\n    }\n}\npublic class ResponseUtil {\n    public static ResponseObject createResponse(int statusCode, String responseMessage) {\n    }\n}\n```", "id": 1611, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ResponseUtilTest {\n    @Test\n    void testCreateResponseSuccess() {\n        ResponseObject response = ResponseUtil.createResponse(200, \"操作成功\");\n        assertTrue(response.isSuccessful());\n        assertEquals(200, response.getStatusCode());\n        assertEquals(\"操作成功\", response.getMessage());\n    }\n    @Test\n    void testCreateResponseFailure() {\n        ResponseObject response = ResponseUtil.createResponse(-1, \"操作失败\");\n        assertFalse(response.isSuccessful());\n        assertEquals(-1, response.getStatusCode());\n        assertEquals(\"操作失败\", response.getMessage());\n    }\n    @Test\n    void testSettersAndGetters() {\n        ResponseObject response = new ResponseObject(true, 200, \"初始消息\");\n        response.setSuccessful(false);\n        response.setStatusCode(-1);\n        response.setMessage(\"更新消息\");\n        assertFalse(response.isSuccessful());\n        assertEquals(-1, response.getStatusCode());\n        assertEquals(\"更新消息\", response.getMessage());\n    }\n    @Test\n    void testEqualsMethodTrue() {\n        ResponseObject response1 = new ResponseObject(true, 200, \"消息\");\n        ResponseObject response2 = new ResponseObject(true, 200, \"消息\");\n        assertEquals(response1, response2);\n    }\n    @Test\n    void testEqualsMethodFalse() {\n        ResponseObject response1 = new ResponseObject(true, 200, \"消息\");\n        ResponseObject response2 = new ResponseObject(false, 404, \"不同消息\");\n        assertNotEquals(response1, response2);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class EmailValidator {\n    public void validateEmailContent(Email email, String expectedContent) {\n        if (email == null) {\n            throw new NullPointerException(\"Email对象不能为null\");\n        }\n        String errorMessage = \"\\n预期的内容为:\\n  <%s>\\n实际的内容为:\\n  <%s>\\nEmail详情:\\n  <%s>\";\n        String actualContent = email.getContent();\n        if (!Objects.equals(actualContent, expectedContent)) {\n            throw new IllegalArgumentException(String.format(errorMessage, expectedContent, actualContent, email));\n        }\n    }\n    public static class Email {\n        private String content;\n        public Email(String content) {\n            this.content = content;\n        }\n        public String getContent() {\n            return content;\n        }\n        @Override\n        public String toString() {\n            return \"Email{content='\" + content + \"'}\";\n        }\n    }\n    public static void main(String[] args) {\n        EmailValidator validator = new EmailValidator();\n        Email email = new EmailValidator.Email(\"Hello, World!\");\n        try {\n            validator.validateEmailContent(email, \"Hello, World!\");\n            System.out.println(\"验证通过：内容匹配\");\n        } catch (Exception e) {\n            System.out.println(\"验证失败：\" + e.getMessage());\n        }\n        try {\n            validator.validateEmailContent(email, \"Goodbye, World!\");\n        } catch (Exception e) {\n            System.out.println(\"验证失败：\" + e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于验证一个`Email`对象的内容是否与预期的内容相匹配。如果内容不匹配，应抛出一个异常，并提供详细的错误信息。请遵循以下指导原则：\n\n- 方法应该首先检查`Email`对象是否为`null`，如果是，则抛出`NullPointerException`。\n- 如果`Email`对象的内容与预期不符，应该使用自定义的错误信息格式抛出`IllegalArgumentException`。\n- 错误信息应该包含预期的内容、实际的内容以及`Email`对象的详细信息。\n- 方法应该能够安全地处理`null`内容的情况。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    public void validateEmailContent(Email email, String expectedContent) {\n    }\n    public static class Email {\n        private String content;\n        public Email(String content) {\n        }\n        public String getContent() {\n        }\n        @Override\n        public String toString() {\n        }\n    }\n}\n```", "id": 1612, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class EmailValidatorTest {\n    @Test(expected = NullPointerException.class)\n    public void testValidateEmailContent_NullEmail() {\n        EmailValidator validator = new EmailValidator();\n        validator.validateEmailContent(null, \"Expected Content\");\n    }\n    @Test\n    public void testValidateEmailContent_CorrectContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello, World!\");\n        validator.validateEmailContent(email, \"Hello, World!\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testValidateEmailContent_IncorrectContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello, World!\");\n        validator.validateEmailContent(email, \"Goodbye, World!\");\n    }\n    @Test\n    public void testValidateEmailContent_EmptyContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"\");\n        validator.validateEmailContent(email, \"\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testValidateEmailContent_DifferentStringContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello, World!\");\n        validator.validateEmailContent(email, \"Hello\");\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class DataTypeConverter {\n    private static Map<String, Integer> typeCodeMap = new HashMap<>();\n    static {\n        typeCodeMap.put(\"int\", 1);\n        typeCodeMap.put(\"varchar\", 2);\n        typeCodeMap.put(\"boolean\", 3);\n    }\n    public static int convertToCode(String dataTypeName) {\n        String cleanTypeName = dataTypeName.toLowerCase().replaceAll(\"\\\\(.*\\\\)\", \"\");\n        return typeCodeMap.getOrDefault(cleanTypeName, -1);\n    }\n    public static void checkFunction() {\n        assert convertToCode(\"INT(11)\") == 1 : \"Test 1 failed\";\n        assert convertToCode(\"varchar(255)\") == 2 : \"Test 2 failed\";\n        assert convertToCode(\"BOOLEAN\") == 3 : \"Test 3 failed\";\n        assert convertToCode(\"float\") == -1 : \"Test 4 failed\"; \n        System.out.println(\"所有测试通过！\");\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java函数，该函数能够将传入的数据类型名称字符串转换为与之对应的整数代码。数据类型名称可能包含额外的信息，如长度或精度，这些信息会以括号的形式出现在类型名称后面。例如，`\"int(11)\"` 应该被视为 `\"int\"` 类型。我们假设有一个预先定义的映射 `typeCodeMap`，它将不带额外信息的数据类型名称映射到整数代码。请确保在转换过程中忽略类型名称的大小写，并移除任何括号及其内容。\n\n要求：\n\n1. 编写一个函数，该函数接受一个字符串参数 `dataTypeName`，并返回一个整数。\n2. 使用一个预先定义的映射 `typeCodeMap` 来查找对应的整数代码。\n3. 忽略传入的数据类型名称的大小写，并移除名称中的括号及其内容。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DataTypeConverter {\n    private static Map<String, Integer> typeCodeMap = new HashMap<>();\n    static {\n        typeCodeMap.put(\"int\", 1);\n        typeCodeMap.put(\"varchar\", 2);\n        typeCodeMap.put(\"boolean\", 3);\n    }\n    public static int convertToCode(String dataTypeName) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1613, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\npublic class DataTypeConverterTest {\n    @Test\n    public void testConvertToCodeInt() {\n        int result = DataTypeConverter.convertToCode(\"INT(11)\");\n        assertEquals(1, result);\n    }\n    @Test\n    public void testConvertToCodeVarchar() {\n        int result = DataTypeConverter.convertToCode(\"varchar(255)\");\n        assertEquals(2, result);\n    }\n    @Test\n    public void testConvertToCodeBoolean() {\n        int result = DataTypeConverter.convertToCode(\"BOOLEAN\");\n        assertEquals(3, result);\n    }\n    @Test\n    public void testConvertToCodeUnknownType() {\n        int result = DataTypeConverter.convertToCode(\"float\");\n        assertEquals(-1, result);\n    }\n    @Test\n    public void testConvertToCodeEmptyString() {\n        int result = DataTypeConverter.convertToCode(\"\");\n        assertEquals(-1, result);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class StudentManager {\n    private List<Student> studentList = new ArrayList<>();\n    public StudentManager() {\n        studentList.add(new Student(1, \"张三\"));\n        studentList.add(new Student(2, \"李四\"));\n        studentList.add(new Student(3, \"王五\"));\n    }\n    public String deleteStudent(int studentId) {\n        for (Student student : studentList) {\n            if (student.getId() == studentId) {\n                studentList.remove(student);\n                return \"删除成功\";\n            }\n        }\n        return \"学生不存在\";\n    }\n    static class Student {\n        private int id;\n        private String name;\n        public Student(int id, String name) {\n            this.id = id;\n            this.name = name;\n        }\n        public int getId() {\n            return id;\n        }\n        public String getName() {\n            return name;\n        }\n    }\n    public static void main(String[] args) {\n        StudentManager manager = new StudentManager();\n        System.out.println(manager.deleteStudent(2)); \n        System.out.println(manager.deleteStudent(4)); \n    }\n}", "content": "请编写一个Java方法，用于从一个存储学生信息的列表中删除指定ID的学生。如果找到并成功删除该学生，方法应返回\"删除成功\"；如果在列表中找不到该ID的学生，应返回\"学生不存在\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class StudentManager {\n    private List<Student> studentList = new ArrayList<>();\n    public StudentManager() {\n    }\n    public String deleteStudent(int studentId) {\n    }\n    static class Student {\n        private int id;\n        private String name;\n        public Student(int id, String name) {\n        }\n        public int getId() {\n        }\n        public String getName() {\n        }\n    }\n}\n```", "id": 1614, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class StudentManagerTest {\n    private StudentManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new StudentManager();\n    }\n    @Test\n    public void testDeleteExistingStudent() {\n        String result = manager.deleteStudent(2);\n        Assertions.assertEquals(\"删除成功\", result);\n    }\n    @Test\n    public void testDeleteNonExistingStudent() {\n        String result = manager.deleteStudent(4);\n        Assertions.assertEquals(\"学生不存在\", result);\n    }\n    @Test\n    public void testDeleteFirstStudent() {\n        String result = manager.deleteStudent(1);\n        Assertions.assertEquals(\"删除成功\", result);\n    }\n    @Test\n    public void testDeleteLastStudent() {\n        String result = manager.deleteStudent(3);\n        Assertions.assertEquals(\"删除成功\", result);\n    }\n    @Test\n    public void testDeleteStudentTwice() {\n        manager.deleteStudent(2);\n        String result = manager.deleteStudent(2);\n        Assertions.assertEquals(\"学生不存在\", result);\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentReader {\n    public static void readAndPrintFileContent(String directoryPath, String fileName) {\n        File file = new File(directoryPath, fileName);\n        if (!file.exists()) {\n            System.out.println(\"文件不存在: \" + file.getPath());\n            return;\n        }\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new FileReader(file));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            System.out.println(\"读取文件时发生错误: \" + file.getPath());\n            e.printStackTrace();\n        } finally {\n            try {\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    public static void main(String[] args) {\n        readAndPrintFileContent(\"C:/storage\", \"test.txt\");\n    }\n}", "content": "请编写描述一个Java程序的功能，该程序用于读取指定目录下的特定文件内容，并将其输出到控制台。确保程序能够处理文件不存在的情况，并能够优雅地处理任何潜在的输入输出异常。此外，程序应该能够处理不同的字符编码，特别是UTF-8编码的文件。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentReader {\n    public static void readAndPrintFileContent(String directoryPath, String fileName) {\n    }\n}\n```", "id": 1615, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileContentReaderTest {\n    @TempDir\n    File tempDir;\n    @Test\n    void testFileDoesNotExist() {\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"nonexistent.txt\");\n    }\n    @Test\n    void testFileIsEmpty() throws IOException {\n        File emptyFile = new File(tempDir, \"empty.txt\");\n        emptyFile.createNewFile();\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"empty.txt\");\n    }\n    @Test\n    void testFileWithContent() throws IOException {\n        File file = new File(tempDir, \"content.txt\");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n        writer.write(\"Hello, World!\");\n        writer.newLine();\n        writer.write(\"This is a test file.\");\n        writer.close();\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"content.txt\");\n    }\n    @Test\n    void testFileWithSpecialCharacters() throws IOException {\n        File file = new File(tempDir, \"special_chars.txt\");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n        writer.write(\"你好，世界！\");\n        writer.newLine();\n        writer.write(\"这是一个测试文件。\");\n        writer.close();\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"special_chars.txt\");\n    }\n    @Test\n    void testIOExceptionHandling() {\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), tempDir.getName());\n    }\n}"}}
{"canonical_solution": "import javax.swing.JOptionPane;\npublic class CoffeeOrderSystem {\n    public static void main(String[] args) {\n        String customerName = JOptionPane.showInputDialog(\"请输入您的名字:\");\n        String quantityStr = JOptionPane.showInputDialog(\"您想要几杯咖啡？\");\n        int quantity = Integer.parseInt(quantityStr);\n        int totalPrice = calculateTotalPrice(quantity);\n        String orderSummary = generateOrderSummary(customerName, totalPrice);\n        simulateEmailSending(customerName, orderSummary);\n    }\n    public static int calculateTotalPrice(int quantity) {\n        final int PRICE_PER_CUP = 5;\n        return quantity * PRICE_PER_CUP;\n    }\n    public static String generateOrderSummary(String customerName, int totalPrice) {\n        return \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n    }\n    public static void simulateEmailSending(String customerName, String orderSummary) {\n        System.out.println(\"正在发送订单摘要给 \" + customerName + \"...\\n\" + orderSummary);\n    }\n}", "content": "请编写一个程序，用于处理咖啡订单。用户可以输入他们的名字，并选择他们想要的咖啡数量。每杯咖啡的价格是5元。程序应该计算总价，并生成一个订单摘要，然后通过电子邮件发送给用户。请确保能够接收用户的名字和咖啡数量，计算总价，生成订单摘要，并模拟发送电子邮件的过程（实际发送电子邮件的功能不需要实现）。请遵循以下指导原则来完成这个任务：\n\n- 使用合适的方法。\n- 程序应该是自包含的。\n- 确保程序的可读性和清晰度。\n- 使用不同于给定代码片段的变量名和函数名。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport javax.swing.JOptionPane;\npublic class CoffeeOrderSystem {\n    public static int calculateTotalPrice(int quantity) {\n    }\n    public static String generateOrderSummary(String customerName, int totalPrice) {\n    }\n    public static void simulateEmailSending(String customerName, String orderSummary) {\n    }\n}\n```", "id": 1616, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class CoffeeOrderSystemTest {\n    @Test\n    public void testCalculateTotalPrice() {\n        int quantity = 3;\n        int expectedTotalPrice = 15;\n        int actualTotalPrice = CoffeeOrderSystem.calculateTotalPrice(quantity);\n        assertEquals(expectedTotalPrice, actualTotalPrice);\n    }\n    @Test\n    public void testCalculateTotalPriceZeroQuantity() {\n        int quantity = 0;\n        int expectedTotalPrice = 0;\n        int actualTotalPrice = CoffeeOrderSystem.calculateTotalPrice(quantity);\n        assertEquals(expectedTotalPrice, actualTotalPrice);\n    }\n    @Test\n    public void testGenerateOrderSummary() {\n        String customerName = \"Alice\";\n        int totalPrice = 20;\n        String expectedOrderSummary = \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n        String actualOrderSummary = CoffeeOrderSystem.generateOrderSummary(customerName, totalPrice);\n        assertEquals(expectedOrderSummary, actualOrderSummary);\n    }\n    @Test\n    public void testGenerateOrderSummaryEmptyName() {\n        String customerName = \"\";\n        int totalPrice = 10;\n        String expectedOrderSummary = \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n        String actualOrderSummary = CoffeeOrderSystem.generateOrderSummary(customerName, totalPrice);\n        assertEquals(expectedOrderSummary, actualOrderSummary);\n    }\n    @Test\n    public void testGenerateOrderSummaryZeroTotalPrice() {\n        String customerName = \"Bob\";\n        int totalPrice = 0;\n        String expectedOrderSummary = \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n        String actualOrderSummary = CoffeeOrderSystem.generateOrderSummary(customerName, totalPrice);\n        assertEquals(expectedOrderSummary, actualOrderSummary);\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class YearMonthFormatter {\n    public static String formatYearMonth(LocalDateTime dateTime) {\n        String formattedDate = \"\";\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM\");\n        try {\n            formattedDate = dateTime.format(formatter);\n        } catch (DateTimeParseException e) {\n            System.err.println(\"日期转换失败: \" + e.getMessage());\n        }\n        return formattedDate;\n    }\n    public static void main(String[] args) {\n        LocalDateTime dateTime1 = LocalDateTime.of(2023, 4, 15, 10, 34);\n        LocalDateTime dateTime2 = LocalDateTime.of(2020, 12, 25, 5, 30);\n        System.out.println(\"测试1: \" + formatYearMonth(dateTime1).equals(\"2023-04\"));\n        System.out.println(\"测试2: \" + formatYearMonth(dateTime2).equals(\"2020-12\"));\n    }\n}", "content": "请编写一个Java函数，该函数接收一个`LocalDateTime`对象作为参数，并返回一个格式化的字符串，该字符串仅包含年份和月份信息。格式应为\"yyyy-MM\"。请确保你的代码能够妥善处理任何异常，并在发生异常时返回一个空字符串。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class YearMonthFormatter {\n    public static String formatYearMonth(LocalDateTime dateTime) {\n    }\n}\n```", "id": 1617, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.time.LocalDateTime;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class YearMonthFormatterTest {\n    @Test\n    public void testFormatYearMonth_NormalDate1() {\n        LocalDateTime dateTime = LocalDateTime.of(2023, 4, 15, 10, 34);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2023-04\", result);\n    }\n    @Test\n    public void testFormatYearMonth_NormalDate2() {\n        LocalDateTime dateTime = LocalDateTime.of(2020, 12, 25, 5, 30);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2020-12\", result);\n    }\n    @Test\n    public void testFormatYearMonth_BeginningOfYear() {\n        LocalDateTime dateTime = LocalDateTime.of(2022, 1, 1, 0, 0);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2022-01\", result);\n    }\n    @Test\n    public void testFormatYearMonth_EndOfMonth() {\n        LocalDateTime dateTime = LocalDateTime.of(2021, 5, 31, 23, 59);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2021-05\", result);\n    }\n    @Test\n    public void testFormatYearMonth_EndOfYear() {\n        LocalDateTime dateTime = LocalDateTime.of(2022, 12, 31, 23, 59);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2022-12\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class TaskFormatter {\n    public static String formatTaskName(String projectName, String taskName) {\n        if (isNullOrBlank(projectName)) {\n            return taskName;\n        }\n        if (isNullOrBlank(taskName)) {\n            return null;\n        }\n        return projectName.trim() + \"/\" + taskName.trim();\n    }\n    private static boolean isNullOrBlank(String str) {\n        return str == null || str.trim().isEmpty();\n    }\n    public static void main(String[] args) {\n        System.out.println(formatTaskName(null, \"任务1\")); \n        System.out.println(formatTaskName(\" \", \"任务2\")); \n        System.out.println(formatTaskName(\"项目A\", null)); \n        System.out.println(formatTaskName(\"项目B\", \" \")); \n        System.out.println(formatTaskName(\"项目C\", \"任务3\")); \n    }\n}", "content": "请编写一个Java方法，该方法接受两个字符串参数：`项目名称`和`任务名称`。该方法的目的是生成一个格式化的字符串，表示特定项目中的任务。遵循以下规则：\n\n1. 如果`项目名称`为`null`或空白字符串，只返回`任务名称`。\n2. 如果`任务名称`为`null`或空白字符串，返回`null`。\n3. 如果两个参数都非空且非空白字符串，返回的格式应为`\"项目名称/任务名称\"`。\n\n请确保你的方法能够正确处理上述所有情况。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class TaskFormatter {\n    public static String formatTaskName(String projectName, String taskName) {\n    }\n    private static boolean isNullOrBlank(String str) {\n    }\n}\n```", "id": 1618, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class TaskFormatterTest {\n    @Test\n    public void testFormatTaskName_WhenProjectNameIsNull() {\n        String result = TaskFormatter.formatTaskName(null, \"任务1\");\n        assertEquals(\"任务1\", result);\n    }\n    @Test\n    public void testFormatTaskName_WhenProjectNameIsBlank() {\n        String result = TaskFormatter.formatTaskName(\" \", \"任务2\");\n        assertEquals(\"任务2\", result);\n    }\n    @Test\n    public void testFormatTaskName_WhenTaskNameIsNull() {\n        String result = TaskFormatter.formatTaskName(\"项目A\", null);\n        assertNull(result);\n    }\n    @Test\n    public void testFormatTaskName_WhenTaskNameIsBlank() {\n        String result = TaskFormatter.formatTaskName(\"项目B\", \" \");\n        assertNull(result);\n    }\n    @Test\n    public void testFormatTaskName_WithValidInputs() {\n        String result = TaskFormatter.formatTaskName(\"项目C\", \"任务3\");\n        assertEquals(\"项目C/任务3\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class LoginValidator {\n    public boolean checkLogin(String username, String password) {\n        final String validUsername = \"admin\";\n        final String validPassword = \"123456\";\n        return Objects.equals(username, validUsername) && Objects.equals(password, validPassword);\n    }\n    public static void main(String[] args) {\n        LoginValidator validator = new LoginValidator();\n        boolean test1 = validator.checkLogin(\"admin\", \"123456\"); \n        boolean test2 = validator.checkLogin(\"user\", \"password\"); \n        boolean test3 = validator.checkLogin(\"admin\", \"654321\"); \n        System.out.println(\"测试1: \" + (test1 ? \"通过\" : \"失败\"));\n        System.out.println(\"测试2: \" + (test2 ? \"通过\" : \"失败\"));\n        System.out.println(\"测试3: \" + (test3 ? \"通过\" : \"失败\"));\n    }\n}", "content": "请设计一个Java方法，用于检查用户是否可以成功登录。该方法接收两个字符串参数：用户名和密码。如果用户名为\"admin\"且密码为\"123456\"，则认为登录成功，返回`true`；否则，返回`false`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class LoginValidator {\n    public boolean checkLogin(String username, String password) {\n    }\n}\n```", "id": 1619, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Objects;\npublic class LoginValidatorTest {\n    @Test\n    public void testCheckLoginValidCredentials() {\n        LoginValidator validator = new LoginValidator();\n        assertTrue(validator.checkLogin(\"admin\", \"123456\"));\n    }\n    @Test\n    public void testCheckLoginInvalidUsername() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"user\", \"123456\"));\n    }\n    @Test\n    public void testCheckLoginInvalidPassword() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"admin\", \"654321\"));\n    }\n    @Test\n    public void testCheckLoginInvalidCredentials() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"user\", \"password\"));\n    }\n    @Test\n    public void testCheckLoginEmptyCredentials() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"\", \"\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class ResourceAccessChecker {\n    public boolean canAccess(String userRole) {\n        return Objects.equals(userRole, \"管理员\");\n    }\n    public static void main(String[] args) {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        checkAccess(checker.canAccess(\"管理员\"), true); \n        checkAccess(checker.canAccess(\"访客\"), false); \n    }\n    public static void checkAccess(boolean actual, boolean expected) {\n        if (actual == expected) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "请编写一个Java程序，用于检查用户是否有权限访问某个资源。资源访问权限基于用户的角色。我们有两种角色：`管理员`和`访客`。请实现一个名为`ResourceAccessChecker`的类，其中包含一个方法`canAccess`。该方法接收一个字符串参数`userRole`，表示用户的角色，如果用户角色为`管理员`，则返回`true`，表示允许访问；如果用户角色为`访客`，则返回`false`，表示禁止访问。请确保代码完整且自包含，并提供一个`checkAccess`方法来验证你的实现是否正确。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class ResourceAccessChecker {\n    public boolean canAccess(String userRole) {\n    }\n}\n```", "id": 1620, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ResourceAccessCheckerTest {\n    @Test\n    public void testCanAccessAdmin() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertTrue(checker.canAccess(\"管理员\"));\n    }\n    @Test\n    public void testCanAccessGuest() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(\"访客\"));\n    }\n    @Test\n    public void testCanAccessEmptyString() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(\"\"));\n    }\n    @Test\n    public void testCanAccessNull() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(null));\n    }\n    @Test\n    public void testCanAccessUser() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(\"用户\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class RobotArmController {\n    private double armPower = 0;\n    private Map<String, Boolean> controller1 = new HashMap<>();\n    private Map<String, Boolean> controller2 = new HashMap<>();\n    public RobotArmController() {\n        controller1.put(\"up\", false);\n        controller1.put(\"down\", false);\n        controller2.put(\"up\", false);\n        controller2.put(\"down\", false);\n    }\n    public void updateArmPower() {\n        if (controller1.get(\"up\") || controller2.get(\"up\")) {\n            armPower = 1; \n        } else if (controller1.get(\"down\") || controller2.get(\"down\")) {\n            armPower = -1; \n        } else {\n            armPower = 0; \n        }\n    }\n    public void setControllerInput(int controllerNum, String button, boolean pressed) {\n        if (controllerNum == 1) {\n            controller1.put(button, pressed);\n        } else if (controllerNum == 2) {\n            controller2.put(button, pressed);\n        }\n    }\n    public double getArmPower() {\n        return armPower;\n    }\n    public static void main(String[] args) {\n        RobotArmController controller = new RobotArmController();\n        controller.setControllerInput(1, \"up\", true);\n        controller.updateArmPower();\n        System.out.println(\"手臂动力（向前移动）: \" + controller.getArmPower());\n        controller.setControllerInput(1, \"up\", false);\n        controller.setControllerInput(2, \"down\", true);\n        controller.updateArmPower();\n        System.out.println(\"手臂动力（向后移动）: \" + controller.getArmPower());\n        controller.setControllerInput(2, \"down\", false);\n        controller.updateArmPower();\n        System.out.println(\"手臂动力（停止）: \" + controller.getArmPower());\n    }\n}", "content": "请编写一个Java程序，用于控制一个简单的机器人手臂的移动。机器人手臂可以向前移动、向后移动或停止。我们将使用两个不同的控制器（控制器1和控制器2）来控制机器人手臂的移动。如果任一控制器的向上按钮被按下，机器人手臂应该向前移动；如果任一控制器的向下按钮被按下，机器人手臂应该向后移动；如果没有按钮被按下，机器人手臂应该停止。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class RobotArmController {\n    private double armPower = 0;\n    private Map<String, Boolean> controller1 = new HashMap<>();\n    private Map<String, Boolean> controller2 = new HashMap<>();\n    public RobotArmController() {\n    }\n    public void updateArmPower() {\n    }\n    public void setControllerInput(int controllerNum, String button, boolean pressed) {\n    }\n    public double getArmPower() {\n    }\n}\n```", "id": 1621, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class RobotArmControllerTest {\n    private RobotArmController controller;\n    @BeforeEach\n    public void setup() {\n        controller = new RobotArmController();\n    }\n    @Test\n    public void testUpdateArmPowerUp() {\n        controller.setControllerInput(1, \"up\", true);\n        controller.updateArmPower();\n        assertEquals(1.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testUpdateArmPowerDown() {\n        controller.setControllerInput(2, \"down\", true);\n        controller.updateArmPower();\n        assertEquals(-1.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testUpdateArmPowerStopAfterUp() {\n        controller.setControllerInput(1, \"up\", true);\n        controller.updateArmPower();\n        controller.setControllerInput(1, \"up\", false);\n        controller.updateArmPower();\n        assertEquals(0.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testUpdateArmPowerStopAfterDown() {\n        controller.setControllerInput(2, \"down\", true);\n        controller.updateArmPower();\n        controller.setControllerInput(2, \"down\", false);\n        controller.updateArmPower();\n        assertEquals(0.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testNoControllerInput() {\n        controller.updateArmPower();\n        assertEquals(0.0, controller.getArmPower(), 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Book {\n    private String title;\n    private String author;\n    private int pages;\n    public Book(String title, String author, int pages) {\n        this.title = title;\n        this.author = author;\n        this.pages = pages;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public String getAuthor() {\n        return author;\n    }\n    public int getPages() {\n        return pages;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n    public void setPages(int pages) {\n        this.pages = pages;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Book)) return false;\n        Book book = (Book) o;\n        return pages == book.pages &&\n                Objects.equals(title, book.title) &&\n                Objects.equals(author, book.author);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(title, author, pages);\n    }\n}\npublic class BookCloner {\n    public static Book cloneBook(final Book book) {\n        return new Book(book.getTitle(), book.getAuthor(), book.getPages());\n    }\n    public static void check() {\n        Book originalBook = new Book(\"Java Programming\", \"Y. Daniel Liang\", 1345);\n        Book clonedBook = cloneBook(originalBook);\n        if (originalBook.equals(clonedBook) && originalBook != clonedBook) {\n            System.out.println(\"方法正确实现了功能。\");\n        } else {\n            System.out.println(\"方法实现有误。\");\n        }\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "请编写一个Java方法，该方法接受一个`Book`对象作为参数，并返回一个新的`Book`对象，新对象的内容与传入的`Book`对象完全相同。确保在创建新对象时，所有的属性都被正确复制。\n\n要求：\n- 请在方法的文档字符串中简要描述问题。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass Book {\n    private String title;\n    private String author;\n    private int pages;\n    public Book(String title, String author, int pages) {\n    }\n    public String getTitle() {\n    }\n    public String getAuthor() {\n    }\n    public int getPages() {\n    }\n    public void setTitle(String title) {\n    }\n    public void setAuthor(String author) {\n    }\n    public void setPages(int pages) {\n    }\n    @Override\n    public boolean equals(Object o) {\n    }\n    @Override\n    public int hashCode() {\n    }\n}\npublic class BookCloner {\n    public static Book cloneBook(final Book book) {\n    }\n}\n```", "id": 1622, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testGetTitle() {\n        Book book = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        assertEquals(\"Effective Java\", book.getTitle());\n    }\n    @Test\n    void testSetTitle() {\n        Book book = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        book.setTitle(\"Java Concurrency in Practice\");\n        assertEquals(\"Java Concurrency in Practice\", book.getTitle());\n    }\n    @Test\n    void testEquals() {\n        Book book1 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        Book book2 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        assertTrue(book1.equals(book2));\n    }\n    @Test\n    void testHashCode() {\n        Book book1 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        Book book2 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        assertEquals(book1.hashCode(), book2.hashCode());\n    }\n    @Test\n    void testCloneBook() {\n        Book originalBook = new Book(\"Clean Code\", \"Robert C. Martin\", 464);\n        Book clonedBook = BookCloner.cloneBook(originalBook);\n        assertEquals(originalBook, clonedBook);\n        assertNotSame(originalBook, clonedBook);\n    }\n}"}}
{"canonical_solution": "import java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\npublic class DynamicExecutor {\n    public static void executeDynamicMethod(String className, String methodName, Object[] args) {\n        try {\n            Class<?> clazz = Class.forName(className);\n            Class<?>[] parameterTypes = new Class[args.length];\n            for (int i = 0; i < args.length; i++) {\n                parameterTypes[i] = args[i].getClass();\n            }\n            Method method = clazz.getMethod(methodName, parameterTypes);\n            method.invoke(null, args);\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"类未找到: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            System.out.println(\"方法未找到: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            System.out.println(\"非法访问: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            System.out.println(\"调用目标异常: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"printMessage\", new Object[]{\"Hello, Dynamic Execution!\"});\n    }\n}", "content": "请编写一个Java方法，该方法用于动态加载并执行指定类的指定方法。假设我们有一个名为`DynamicExecutor`的类，其中包含一个名为`executeDynamicMethod`的静态方法。该方法接收三个参数：第一个参数是类的全名（包括包名），第二个参数是要执行的方法名，第三个参数是该方法的参数，类型为`Object`数组。如果类或方法不存在，或者执行过程中出现任何异常，方法应该捕获这些异常并打印堆栈跟踪，而不是让异常传播。请注意，执行的方法应该是静态方法，并且没有返回值。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\npublic class DynamicExecutor {\n    public static void executeDynamicMethod(String className, String methodName, Object[] args) {\n    }\n}\n```", "id": 1623, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.lang.reflect.InvocationTargetException;\npublic class DynamicExecutorTest {\n    @Test\n    public void testExecuteDynamicMethod_validMethod() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"printMessage\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_classNotFound() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"NonExistentClass\", \"printMessage\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_methodNotFound() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"nonExistentMethod\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_illegalAccess() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"privateMethod\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_invocationTargetException() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"exceptionThrowingMethod\", args);\n    }\n    public static class TestMethods {\n        public static void printMessage(String message) {\n            System.out.println(message);\n        }\n        private static void privateMethod(String message) {\n            System.out.println(\"Private: \" + message);\n        }\n        public static void exceptionThrowingMethod(String message) throws Exception {\n            throw new Exception(\"Test Exception\");\n        }\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\npublic class TimezoneConverter {\n    public static String convertToUTC(String localDate, String localTime, String timezoneOffset) {\n        LocalDateTime localDateTime = LocalDateTime.parse(localDate + \"T\" + localTime);\n        ZoneOffset offset = ZoneOffset.of(fixOffsetFormat(timezoneOffset));\n        OffsetDateTime offsetDateTime = localDateTime.atOffset(offset);\n        ZonedDateTime utcDateTime = offsetDateTime.toZonedDateTime().withZoneSameInstant(ZoneOffset.UTC);\n        return utcDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n    private static String fixOffsetFormat(String offset) {\n        if (!offset.matches(\"^[+-]\\\\d{2}:\\\\d{2}$\")) {\n            return \"+00:00\"; \n        }\n        return offset;\n    }\n    public static void main(String[] args) {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"+05:30\"; \n        String utcTime = convertToUTC(date, time, offset);\n        System.out.println(\"UTC时间: \" + utcTime);\n        String expectedUTC = \"2023-04-01 09:30:00\";\n        assert utcTime.equals(expectedUTC) : \"转换结果不正确\";\n    }\n}", "content": "请编写一个Java方法，该方法能够将给定的日期和时间从一个特定的时区转换为UTC时间。你需要处理的日期格式为\"yyyy-MM-dd\"，时间格式为\"HH:mm:ss\"，而时区偏移量的格式为\"+HH:mm\"或\"-HH:mm\"。如果提供的时区偏移量不符合预期格式，你的方法应该能够自动修正它，确保转换过程不会因为格式错误而失败。请确保你的方法能够自包含并且清晰地实现上述功能。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.time.LocalDateTime;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\npublic class TimezoneConverter {\n    public static String convertToUTC(String localDate, String localTime, String timezoneOffset) {\n    }\n    private static String fixOffsetFormat(String offset) {\n    }\n}\n```", "id": 1624, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class TimezoneConverterTest {\n    @Test\n    public void testConvertToUTC_PositiveOffset() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"+05:30\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 09:30:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_NegativeOffset() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"-04:00\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 19:00:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_ZeroOffset() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"+00:00\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 15:00:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_InvalidOffsetFormat() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"invalid_offset\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 15:00:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_LeapYearDate() {\n        String date = \"2020-02-29\";\n        String time = \"23:00:00\";\n        String offset = \"+01:00\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2020-02-29 22:00:00\";\n        assertEquals(expected, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class RequestConfigurator {\n    public static Map<String, Integer> getRequestConfig(String requestType) {\n        Map<String, Integer> config = new HashMap<>();\n        switch (requestType.toUpperCase()) {\n            case \"GET\":\n                config.put(\"timeout\", 5000); \n                config.put(\"retries\", 2); \n                break;\n            case \"POST\":\n                config.put(\"timeout\", 8000); \n                config.put(\"retries\", 3); \n                break;\n            default:\n                config.put(\"timeout\", 3000); \n                config.put(\"retries\", 1); \n                break;\n        }\n        return config;\n    }\n    public static void main(String[] args) {\n        Map<String, Integer> getConfig = getRequestConfig(\"GET\");\n        System.out.println(\"GET请求配置：\" + getConfig);\n        Map<String, Integer> postConfig = getRequestConfig(\"POST\");\n        System.out.println(\"POST请求配置：\" + postConfig);\n        Map<String, Integer> defaultConfig = getRequestConfig(\"DELETE\");\n        System.out.println(\"默认请求配置：\" + defaultConfig);\n    }\n}", "content": "请设计一个Java方法，用于配置网络请求的参数。这个方法应该能够根据不同的请求类型（如GET, POST等），返回相应的配置对象。配置对象中应包含请求的基本信息，比如超时时间、重试次数等。请确保你的代码是独立的，并且包含了所有必要的包导入语句。此外，还需要提供一个检查函数，用于验证你的方法是否正确处理了提供的数据点。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class RequestConfigurator {\n    public static Map<String, Integer> getRequestConfig(String requestType) {\n    }\n}\n```", "id": 1625, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\npublic class RequestConfiguratorTest {\n    @Test\n    void testGetRequestConfigWithGet() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"GET\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(5000, config.get(\"timeout\"));\n        assertEquals(2, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigWithPost() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"POST\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(8000, config.get(\"timeout\"));\n        assertEquals(3, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigWithUnknownType() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"DELETE\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(3000, config.get(\"timeout\"));\n        assertEquals(1, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigCaseInsensitive() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"get\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(5000, config.get(\"timeout\"));\n        assertEquals(2, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigEmptyType() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(3000, config.get(\"timeout\"));\n        assertEquals(1, config.get(\"retries\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass StudentInfo {\n    String name;\n    int age;\n    String major;\n    public StudentInfo(String name, int age, String major) {\n        this.name = name;\n        this.age = age;\n        this.major = major;\n    }\n    @Override\n    public String toString() {\n        return \"姓名: \" + name + \", 年龄: \" + age + \", 专业: \" + major;\n    }\n}\npublic class StudentDatabase {\n    private static Map<Long, StudentInfo> studentDB = new HashMap<>();\n    static {\n        studentDB.put(1L, new StudentInfo(\"张三\", 20, \"计算机科学与技术\"));\n        studentDB.put(2L, new StudentInfo(\"李四\", 22, \"软件工程\"));\n        studentDB.put(3L, new StudentInfo(\"王五\", 19, \"信息安全\"));\n    }\n    public static StudentInfo getStudentDetails(Long studentId) {\n        if (studentDB.containsKey(studentId)) {\n            return studentDB.get(studentId);\n        } else {\n            return null;\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(getStudentDetails(1L)); \n        System.out.println(getStudentDetails(4L)); \n    }\n}", "content": "请编写一个Java方法，该方法接收一个学生的ID作为参数，然后返回该学生的详细信息。如果数据库中不存在该学生的信息，方法应该返回null。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass StudentInfo {\n    String name;\n    int age;\n    String major;\n    public StudentInfo(String name, int age, String major) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class StudentDatabase {\n    private static Map<Long, StudentInfo> studentDB = new HashMap<>();\n    static {\n    }\n    public static StudentInfo getStudentDetails(Long studentId) {\n    }\n}\n```", "id": 1626, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentInfoTest {\n}\nclass StudentDatabaseTest {\n    @Test\n    void testGetStudentDetails_existingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(1L);\n        assertNotNull(student);\n        assertEquals(\"张三\", student.name);\n        assertEquals(20, student.age);\n        assertEquals(\"计算机科学与技术\", student.major);\n    }\n    @Test\n    void testGetStudentDetails_nonExistingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(4L);\n        assertNull(student);\n    }\n    @Test\n    void testGetStudentDetails_anotherExistingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(2L);\n        assertNotNull(student);\n        assertEquals(\"李四\", student.name);\n        assertEquals(22, student.age);\n        assertEquals(\"软件工程\", student.major);\n    }\n    @Test\n    void testGetStudentDetails_yetAnotherExistingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(3L);\n        assertNotNull(student);\n        assertEquals(\"王五\", student.name);\n        assertEquals(19, student.age);\n        assertEquals(\"信息安全\", student.major);\n    }\n    @Test\n    void testGetStudentDetails_nullInput() {\n        StudentInfo student = StudentDatabase.getStudentDetails(null);\n        assertNull(student);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\npublic class StudentRegistrationValidator {\n    public static boolean isRegistrationComplete(HashMap<String, String> studentInfo) {\n        String[] requiredKeys = {\"姓名\", \"学号\", \"专业\", \"年级\", \"邮箱\", \"手机号\"};\n        for (String key : requiredKeys) {\n            if (!studentInfo.containsKey(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        boolean isComplete = isRegistrationComplete(studentInfo);\n        System.out.println(\"注册信息是否完整: \" + isComplete);\n    }\n}", "content": "请设计一个Java函数，用于验证一个学生信息系统中学生的注册信息是否完整。注册信息包括学生的姓名、学号、专业、年级、邮箱和手机号。信息以键值对的形式存储在一个名为`StudentInfo`的类中。请确保所有必要的键都存在，并且它们的顺序可以是任意的。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\npublic class StudentRegistrationValidator {\n    public static boolean isRegistrationComplete(HashMap<String, String> studentInfo) {\n    }\n}\n```", "id": 1627, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StudentRegistrationValidatorTest {\n    @Test\n    public void testCompleteRegistration() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        assertTrue(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationMissingName() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        assertFalse(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationMissingEmail() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        assertFalse(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationEmptyFields() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"\");\n        studentInfo.put(\"学号\", \"\");\n        studentInfo.put(\"专业\", \"\");\n        studentInfo.put(\"年级\", \"\");\n        studentInfo.put(\"邮箱\", \"\");\n        studentInfo.put(\"手机号\", \"\");\n        assertTrue(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationExtraFields() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        studentInfo.put(\"地址\", \"北京市\");\n        assertTrue(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class UserTaskManager {\n    private Map<Integer, Integer> userTasks;\n    public UserTaskManager() {\n        userTasks = new HashMap<>();\n    }\n    public void updateTaskId(int userId, int taskId) {\n        userTasks.put(userId, taskId);\n    }\n    public boolean checkTaskId(int userId, int expectedTaskId) {\n        if (userTasks.containsKey(userId)) {\n            return userTasks.get(userId) == expectedTaskId;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        manager.updateTaskId(2, 200);\n        System.out.println(\"检查用户1的任务ID是否更新为100: \" + manager.checkTaskId(1, 100)); \n        System.out.println(\"检查用户2的任务ID是否更新为200: \" + manager.checkTaskId(2, 200)); \n    }\n}", "content": "请设计一个Java方法，该方法用于更新用户的任务ID。任务ID是一个整数，用于标识用户当前的任务。请确保你的代码是自包含的，并且所有使用到的包都在代码片段的开始处导入。此外，请提供一个检查函数，用于验证你的方法是否正确处理了给定的数据点。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class UserTaskManager {\n    private Map<Integer, Integer> userTasks;\n    public UserTaskManager() {}\n    public void updateTaskId(int userId, int taskId) {}\n    public boolean checkTaskId(int userId, int expectedTaskId) {\n        return false;\n    }\n}\n```", "id": 1628, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class UserTaskManagerTest {\n    @Test\n    public void testUpdateTaskId_NewUser() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        assertTrue(manager.checkTaskId(1, 100));\n    }\n    @Test\n    public void testUpdateTaskId_ExistingUser() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        manager.updateTaskId(1, 200);\n        assertTrue(manager.checkTaskId(1, 200));\n    }\n    @Test\n    public void testCheckTaskId_CorrectTaskId() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        assertTrue(manager.checkTaskId(1, 100));\n    }\n    @Test\n    public void testCheckTaskId_IncorrectTaskId() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        assertFalse(manager.checkTaskId(1, 200));\n    }\n    @Test\n    public void testCheckTaskId_UserDoesNotExist() {\n        UserTaskManager manager = new UserTaskManager();\n        assertFalse(manager.checkTaskId(1, 100));\n    }\n}"}}
{"canonical_solution": "import java.lang.Class;\npublic class ClassLoaderChecker {\n    public static boolean canLoadClass(String className) {\n        try {\n            Class.forName(className);\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n        String testClassName1 = \"java.lang.String\"; \n        String testClassName2 = \"com.unknown.NonExistentClass\"; \n        System.out.println(\"Can load \" + testClassName1 + \": \" + canLoadClass(testClassName1));\n        System.out.println(\"Can load \" + testClassName2 + \": \" + canLoadClass(testClassName2));\n    }\n}", "content": "请编写一个Java程序，用于检查一个给定的类名是否可以被成功加载。如果给定的类名可以被成功加载，函数应返回`true`，否则返回`false`。请确保你的代码能够处理任何异常情况，避免程序崩溃。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.Class;\npublic class ClassLoaderChecker {\n    public static boolean canLoadClass(String className) {\n    }\n}\n```", "id": 1629, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.Test;\npublic class ClassLoaderCheckerTest {\n    @Test\n    public void testCanLoadExistingClass() {\n        assertTrue(ClassLoaderChecker.canLoadClass(\"java.lang.String\"));\n    }\n    @Test\n    public void testCannotLoadNonExistentClass() {\n        assertFalse(ClassLoaderChecker.canLoadClass(\"com.unknown.NonExistentClass\"));\n    }\n    @Test\n    public void testCanLoadAnotherExistingClass() {\n        assertTrue(ClassLoaderChecker.canLoadClass(\"java.util.ArrayList\"));\n    }\n    @Test\n    public void testCannotLoadIncorrectClassName() {\n        assertFalse(ClassLoaderChecker.canLoadClass(\"incorrect.ClassName\"));\n    }\n    @Test\n    public void testCanLoadPrimitiveType() {\n        assertFalse(ClassLoaderChecker.canLoadClass(\"int\"));\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class StudentRegistrationValidator {\n    public static void validateStudentInput(StudentDto studentDto) {\n        String name = studentDto.getName();\n        Integer age = studentDto.getAge();\n        Integer grade = studentDto.getGrade();\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"学生姓名不能为空。\");\n        }\n        if (age == null || age < 6 || age > 18) {\n            throw new IllegalArgumentException(\"学生年龄必须在6到18岁之间。\");\n        }\n        if (grade == null || grade < 1 || grade > 12) {\n            throw new IllegalArgumentException(\"学生班级必须在1到12之间。\");\n        }\n    }\n    public static void main(String[] args) {\n        StudentDto student1 = new StudentDto(\"张三\", 15, 9);\n        StudentDto student2 = new StudentDto(\"\", 20, 5);\n        StudentDto student3 = new StudentDto(\"李四\", 7, 0);\n        try {\n            validateStudentInput(student1);\n            System.out.println(\"学生1验证通过。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            validateStudentInput(student2);\n            System.out.println(\"学生2验证通过。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            validateStudentInput(student3);\n            System.out.println(\"学生3验证通过。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\nclass StudentDto {\n    private String name;\n    private Integer age;\n    private Integer grade;\n    public StudentDto(String name, Integer age, Integer grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n    public String getName() {\n        return name;\n    }\n    public Integer getAge() {\n        return age;\n    }\n    public Integer getGrade() {\n        return grade;\n    }\n}", "content": "请设计一个Java函数，用于验证学生注册信息的有效性。学生信息包括姓名、年龄和班级。姓名不能为空，年龄应在6到18岁之间，班级应为1到12之间的整数。如果任何一个条件不满足，应抛出IllegalArgumentException异常，并给出相应的错误信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class StudentRegistrationValidator {\n    public static void validateStudentInput(StudentDto studentDto) {\n    }\n}\nclass StudentDto {\n    private String name;\n    private Integer age;\n    private Integer grade;\n    public StudentDto(String name, Integer age, Integer grade) {\n    }\n    public String getName() {\n        return name;\n    }\n    public Integer getAge() {\n        return age;\n    }\n    public Integer getGrade() {\n        return grade;\n    }\n}\n```", "id": 1630, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.junit.rules.ExpectedException;\nimport org.junit.Rule;\npublic class StudentRegistrationValidatorTest {\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n    @Test\n    public void testValidateStudentInput_withValidInput() {\n        StudentDto validStudent = new StudentDto(\"张三\", 15, 9);\n        StudentRegistrationValidator.validateStudentInput(validStudent);\n    }\n    @Test\n    public void testValidateStudentInput_withEmptyName() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生姓名不能为空。\");\n        StudentDto studentWithEmptyName = new StudentDto(\"\", 15, 9);\n        StudentRegistrationValidator.validateStudentInput(studentWithEmptyName);\n    }\n    @Test\n    public void testValidateStudentInput_withNullName() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生姓名不能为空。\");\n        StudentDto studentWithNullName = new StudentDto(null, 15, 9);\n        StudentRegistrationValidator.validateStudentInput(studentWithNullName);\n    }\n    @Test\n    public void testValidateStudentInput_withInvalidAge() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生年龄必须在6到18岁之间。\");\n        StudentDto studentWithInvalidAge = new StudentDto(\"李四\", 5, 9);\n        StudentRegistrationValidator.validateStudentInput(studentWithInvalidAge);\n    }\n    @Test\n    public void testValidateStudentInput_withInvalidGrade() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生班级必须在1到12之间。\");\n        StudentDto studentWithInvalidGrade = new StudentDto(\"王五\", 15, 13);\n        StudentRegistrationValidator.validateStudentInput(studentWithInvalidGrade);\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\npublic class MessageDetails {\n    String sender;\n    String receiver;\n    String serviceType;\n    String messageType;\n    String messageId;\n    LocalDateTime creationTime;\n    boolean isDuplicated;\n    public void cloneTo(MessageDetails target) {\n        target.sender = this.sender;\n        target.receiver = this.receiver;\n        target.serviceType = this.serviceType;\n        target.messageType = this.messageType;\n        target.messageId = this.messageId;\n        target.creationTime = this.creationTime;\n        target.isDuplicated = this.isDuplicated;\n    }\n    public static void main(String[] args) {\n        MessageDetails original = new MessageDetails();\n        original.sender = \"Alice\";\n        original.receiver = \"Bob\";\n        original.serviceType = \"Email\";\n        original.messageType = \"Greeting\";\n        original.messageId = \"12345\";\n        original.creationTime = LocalDateTime.now();\n        original.isDuplicated = false;\n        MessageDetails cloned = new MessageDetails();\n        original.cloneTo(cloned);\n        System.out.println(\"Sender matches: \" + original.sender.equals(cloned.sender));\n        System.out.println(\"Receiver matches: \" + original.receiver.equals(cloned.receiver));\n        System.out.println(\"ServiceType matches: \" + original.serviceType.equals(cloned.serviceType));\n        System.out.println(\"MessageType matches: \" + original.messageType.equals(cloned.messageType));\n        System.out.println(\"MessageId matches: \" + original.messageId.equals(cloned.messageId));\n        System.out.println(\"CreationTime matches: \" + original.creationTime.equals(cloned.creationTime));\n        System.out.println(\"IsDuplicated matches: \" + (original.isDuplicated == cloned.isDuplicated));\n    }\n}", "content": "请设计一个Java类`MessageDetails`，该类包含几个属性：`sender`（发送者），`receiver`（接收者），`serviceType`（服务类型），`messageType`（消息类型），`messageId`（消息ID），`creationTime`（创建时间），和`isDuplicated`（是否重复）。你需要实现一个方法`cloneTo`，该方法接受另一个`MessageDetails`对象作为参数，并将当前对象的所有属性值复制到该参数对象中。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.time.LocalDateTime;\npublic class MessageDetails {\n    String sender;\n    String receiver;\n    String serviceType;\n    String messageType;\n    String messageId;\n    LocalDateTime creationTime;\n    boolean isDuplicated;\n    public void cloneTo(MessageDetails target) {\n    }\n}\n```", "id": 1631, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.LocalDateTime;\npublic class MessageDetailsTest {\n    private MessageDetails original;\n    private MessageDetails cloned;\n    @BeforeEach\n    public void setUp() {\n        original = new MessageDetails();\n        original.sender = \"Alice\";\n        original.receiver = \"Bob\";\n        original.serviceType = \"Email\";\n        original.messageType = \"Greeting\";\n        original.messageId = \"12345\";\n        original.creationTime = LocalDateTime.now();\n        original.isDuplicated = false;\n        cloned = new MessageDetails();\n    }\n    @Test\n    public void testCloneToSender() {\n        original.cloneTo(cloned);\n        assertEquals(original.sender, cloned.sender);\n    }\n    @Test\n    public void testCloneToReceiver() {\n        original.cloneTo(cloned);\n        assertEquals(original.receiver, cloned.receiver);\n    }\n    @Test\n    public void testCloneToServiceType() {\n        original.cloneTo(cloned);\n        assertEquals(original.serviceType, cloned.serviceType);\n    }\n    @Test\n    public void testCloneToMessageType() {\n        original.cloneTo(cloned);\n        assertEquals(original.messageType, cloned.messageType);\n    }\n    @Test\n    public void testCloneToAllFields() {\n        original.cloneTo(cloned);\n        assertEquals(original.messageId, cloned.messageId);\n        assertEquals(original.creationTime, cloned.creationTime);\n        assertEquals(original.isDuplicated, cloned.isDuplicated);\n    }\n}"}}
{"canonical_solution": "import java.io.StringWriter;\nimport java.io.PrintWriter;\nimport java.net.UnknownHostException;\npublic class ExceptionStackTraceHelper {\n    public static String getExceptionStackTrace(Throwable exception) {\n        if (exception == null) {\n            return \"\";\n        }\n        Throwable currentException = exception;\n        while (currentException != null) {\n            if (currentException instanceof UnknownHostException) {\n                return \"\";\n            }\n            currentException = currentException.getCause();\n        }\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        exception.printStackTrace(printWriter);\n        printWriter.flush();\n        return stringWriter.toString();\n    }\n    public static void main(String[] args) {\n        try {\n            throw new Exception(\"测试异常\");\n        } catch (Exception e) {\n            System.out.println(getExceptionStackTrace(e));\n        }\n        try {\n            throw new UnknownHostException(\"未知主机\");\n        } catch (Exception e) {\n            System.out.println(getExceptionStackTrace(e).equals(\"\") ? \"测试通过: UnknownHostException\" : \"测试失败\");\n        }\n    }\n}", "content": "请编写一个Java方法，该方法接收一个异常对象作为参数，并返回该异常的堆栈跟踪信息的字符串表示。如果传入的异常对象为`null`，或者该异常或其任何原因链中包含`UnknownHostException`，则方法应返回空字符串。请确保你的代码能够处理异常链中的所有异常，并且在返回堆栈跟踪信息之前，检查是否存在`UnknownHostException`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.StringWriter;\nimport java.io.PrintWriter;\nimport java.net.UnknownHostException;\npublic class ExceptionStackTraceHelper {\n    public static String getExceptionStackTrace(Throwable exception) {\n    }\n}\n```", "id": 1632, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.net.UnknownHostException;\nimport org.junit.jupiter.api.Test;\npublic class ExceptionStackTraceHelperTest {\n    @Test\n    public void testGetExceptionStackTrace_NullException() {\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(null);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_UnknownHostException() {\n        UnknownHostException unknownHostException = new UnknownHostException(\"测试未知主机异常\");\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(unknownHostException);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_GenericException() {\n        Exception exception = new Exception(\"测试异常\");\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        exception.printStackTrace(printWriter);\n        printWriter.flush();\n        String expected = stringWriter.toString();\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(exception);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_CausedByUnknownHostException() {\n        Exception exception = new Exception(\"外部异常\", new UnknownHostException(\"内部未知主机异常\"));\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(exception);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_CausedByOtherException() {\n        Exception cause = new Exception(\"内部异常\");\n        Exception exception = new Exception(\"外部异常\", cause);\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        exception.printStackTrace(printWriter);\n        printWriter.flush();\n        String expected = stringWriter.toString();\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(exception);\n        assertEquals(expected, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookQuerySystem {\n    private Map<String, String> bookDatabase = new HashMap<>();\n    public BookQuerySystem() {\n        bookDatabase.put(\"001\", \"《Java编程思想》\");\n        bookDatabase.put(\"002\", \"《Effective Java》\");\n        bookDatabase.put(\"003\", \"《Spring实战》\");\n    }\n    public String queryBookDetail(String bookId) throws BookNotFoundException {\n        if (!bookDatabase.containsKey(bookId)) {\n            throw new BookNotFoundException(\"图书ID不存在: \" + bookId);\n        }\n        return bookDatabase.get(bookId);\n    }\n    static class BookNotFoundException extends Exception {\n        public BookNotFoundException(String message) {\n            super(message);\n        }\n    }\n    public static void main(String[] args) {\n        BookQuerySystem system = new BookQuerySystem();\n        try {\n            String bookDetail = system.queryBookDetail(\"002\");\n            System.out.println(\"查询成功: \" + bookDetail);\n        } catch (BookNotFoundException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}", "content": "假设你正在开发一个图书管理系统，需要实现一个功能来查询图书的详细信息。给定一个图书的ID，你需要返回该图书的详细信息。如果图书ID不存在，则抛出一个自定义的异常。请根据给定的信息，设计这个功能。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookQuerySystem {\n    private Map<String, String> bookDatabase = new HashMap<>();\n    public BookQuerySystem() {\n    }\n    public String queryBookDetail(String bookId) throws BookNotFoundException {\n    }\n    static class BookNotFoundException extends Exception {\n        public BookNotFoundException(String message) {\n        }\n    }\n}\n```", "id": 1633, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookQuerySystemTest {\n    @Test\n    void testQueryBookDetailExistingId() throws BookQuerySystem.BookNotFoundException {\n        BookQuerySystem system = new BookQuerySystem();\n        String result = system.queryBookDetail(\"001\");\n        assertEquals(\"《Java编程思想》\", result);\n    }\n    @Test\n    void testQueryBookDetailNonExistingId() {\n        BookQuerySystem system = new BookQuerySystem();\n        assertThrows(BookQuerySystem.BookNotFoundException.class, () -> {\n            system.queryBookDetail(\"999\");\n        });\n    }\n    @Test\n    void testQueryBookDetailAnotherExistingId() throws BookQuerySystem.BookNotFoundException {\n        BookQuerySystem system = new BookQuerySystem();\n        String result = system.queryBookDetail(\"002\");\n        assertEquals(\"《Effective Java》\", result);\n    }\n    @Test\n    void testQueryBookDetailEmptyId() {\n        BookQuerySystem system = new BookQuerySystem();\n        assertThrows(BookQuerySystem.BookNotFoundException.class, () -> {\n            system.queryBookDetail(\"\");\n        });\n    }\n    @Test\n    void testQueryBookDetailNullId() {\n        BookQuerySystem system = new BookQuerySystem();\n        assertThrows(BookQuerySystem.BookNotFoundException.class, () -> {\n            system.queryBookDetail(null);\n        });\n    }\n}"}}
{"canonical_solution": "public class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public String divide(double a, double b) {\n        if (b == 0) {\n            return \"错误：除数不能为0。\";\n        }\n        return Double.toString(a / b);\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        System.out.println(\"10 + 5 = \" + calculator.add(10, 5));\n        System.out.println(\"20 - 10 = \" + calculator.subtract(20, 10));\n        System.out.println(\"10 * 5 = \" + calculator.multiply(10, 5));\n        System.out.println(\"10 / 2 = \" + calculator.divide(10, 2));\n        System.out.println(\"10 / 0 = \" + calculator.divide(10, 0));\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个类应该能够执行基本的算术运算：加法、减法、乘法和除法。请确保你的程序能够处理除以零的情况，当尝试除以零时，应该返回一个特定的错误信息，而不是让程序崩溃。请遵循以下指导原则来完成这个任务：\n\n- 请不要使用任何外部库。\n- 确保代码自包含且清晰。\n- 展示至少四个不同的运算示例，包括除以零的情况。\n- 使用适当的变量名和函数名，使代码易于理解。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n    }\n    public double subtract(double a, double b) {\n    }\n    public double multiply(double a, double b) {\n    }\n    public String divide(double a, double b) {\n    }\n}\n```", "id": 1634, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAdd() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(15, calculator.add(10, 5));\n        assertEquals(0, calculator.add(-1, 1));\n        assertEquals(-3, calculator.add(-1.5, -1.5));\n    }\n    @Test\n    public void testSubtract() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(10, calculator.subtract(20, 10));\n        assertEquals(0, calculator.subtract(5, 5));\n        assertEquals(-1, calculator.subtract(1, 2));\n    }\n    @Test\n    public void testMultiply() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(50, calculator.multiply(10, 5));\n        assertEquals(0, calculator.multiply(10, 0));\n        assertEquals(-10, calculator.multiply(10, -1));\n    }\n    @Test\n    public void testDivide() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"5.0\", calculator.divide(10, 2));\n        assertEquals(\"错误：除数不能为0。\", calculator.divide(10, 0));\n        assertEquals(\"-5.0\", calculator.divide(10, -2));\n    }\n    @Test\n    public void testDivideByZeroException() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"错误：除数不能为0。\", calculator.divide(10, 0));\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.Stack;\npublic class ReverseFileContent {\n    public static void reversePrint(String filePath) throws FileNotFoundException {\n        File file = new File(filePath);\n        if (!file.exists()) {\n            throw new FileNotFoundException(\"文件不存在: \" + filePath);\n        }\n        Stack<String> lines = new Stack<>();\n        try (Scanner scanner = new Scanner(file)) {\n            while (scanner.hasNextLine()) {\n                lines.push(scanner.nextLine());\n            }\n        }\n        while (!lines.isEmpty()) {\n            System.out.println(lines.pop());\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            reversePrint(\"path/to/your/textfile.txt\");\n        } catch (FileNotFoundException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的文本文件内容逆序输出功能。给定一个文本文件的路径，你需要读取其内容，并将每一行的内容逆序输出到控制台。请确保你的程序能够处理文件读取过程中可能出现的异常，并且在读取文件之前，先检查文件是否存在。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.Stack;\npublic class ReverseFileContent {\n    public static void reversePrint(String filePath) throws FileNotFoundException {\n    }\n}\n```", "id": 1635, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Rule;\nimport org.junit.rules.ExpectedException;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Stack;\nimport java.util.Scanner;\npublic class ReverseFileContentTest {\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n    @Test\n    public void testReversePrint_FileNotFound() throws FileNotFoundException {\n        thrown.expect(FileNotFoundException.class);\n        thrown.expectMessage(\"文件不存在: invalid/path/to/textfile.txt\");\n        ReverseFileContent.reversePrint(\"invalid/path/to/textfile.txt\");\n    }\n    @Test\n    public void testReversePrint_EmptyFile() throws FileNotFoundException {\n        File tempFile = new File(\"empty.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"empty.txt\");\n        tempFile.delete(); \n    }\n    @Test\n    public void testReversePrint_SingleLineFile() throws FileNotFoundException {\n        File tempFile = new File(\"singleline.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n            writer.println(\"single line\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"singleline.txt\");\n        tempFile.delete(); \n    }\n    @Test\n    public void testReversePrint_MultiLineFile() throws FileNotFoundException {\n        File tempFile = new File(\"multiline.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n            writer.println(\"line 1\");\n            writer.println(\"line 2\");\n            writer.println(\"line 3\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"multiline.txt\");\n        tempFile.delete(); \n    }\n    @Test\n    public void testReversePrint_FileWithBlankLines() throws FileNotFoundException {\n        File tempFile = new File(\"filewithblanks.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n            writer.println(\"line 1\");\n            writer.println(\"\");\n            writer.println(\"line 2\");\n            writer.println(\"\");\n            writer.println(\"line 3\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"filewithblanks.txt\");\n        tempFile.delete(); \n    }\n}"}}
{"canonical_solution": "import java.util.Date;\npublic class ParkingDurationCalculator {\n    public static int calculateParkingDuration(Date arrival, Date departure) {\n        if (departure.before(arrival)) {\n            return -1; \n        }\n        long durationInMillis = departure.getTime() - arrival.getTime();\n        return (int) (durationInMillis / (1000 * 60 * 60)); \n    }\n    public static void main(String[] args) {\n        Date arrival = new Date(120, 5, 20, 8, 0); \n        Date departure = new Date(120, 5, 20, 12, 0); \n        System.out.println(\"停车时长（小时）: \" + calculateParkingDuration(arrival, departure)); \n        Date earlyDeparture = new Date(120, 5, 20, 7, 0); \n        System.out.println(\"停车时长（小时）: \" + calculateParkingDuration(arrival, earlyDeparture)); \n    }\n}", "content": "请编写一个Java程序，用于计算停车时间。假设你有一个停车场管理系统，需要根据车辆的到达和离开时间来计算停车时长。你需要实现一个方法，该方法接收两个参数：车辆的到达时间和离开时间，两者都是`java.util.Date`类型。你的任务是计算并返回车辆的停车时长，单位为小时，忽略分钟以下的时间。如果离开时间早于到达时间，则返回-1表示错误。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Date;\npublic class ParkingDurationCalculator {\n    public static int calculateParkingDuration(Date arrival, Date departure) {\n    }\n}\n```", "id": 1636, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.Date;\npublic class ParkingDurationCalculatorTest {\n    @Test\n    public void testCalculateParkingDuration_sameTime() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 8, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(0, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_positiveDuration() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 12, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(4, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_negativeDuration() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 7, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(-1, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_partHourDuration() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 10, 30);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(2, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_exactHourBoundary() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 10, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(2, result);\n    }\n}"}}
{"canonical_solution": "import java.util.regex.Pattern;\npublic class DomainValidator {\n    public static boolean checkDomainValidity(String domain) {\n        Pattern pattern = Pattern.compile(\"[?]\");\n        return !pattern.matcher(domain).find();\n    }\n    public static void main(String[] args) {\n        String[] testDomains = {\"example.com\", \"invalid?domain.com\", \"another.valid-domain.com\", \"invalid.domain?com\"};\n        for (String domain : testDomains) {\n            boolean isValid = checkDomainValidity(domain);\n            System.out.println(\"域名 \\\"\" + domain + \"\\\" 是否有效: \" + isValid);\n        }\n    }\n}", "content": "请编写一个Java程序，用于验证URL的域名部分是否有效。域名被认为是无效的，如果它包含特殊字符，如问号(?)。你需要实现一个方法`checkDomainValidity`，该方法接收一个字符串参数表示域名，并返回一个布尔值，表示域名是否有效。有效的域名将返回`true`，而包含特殊字符的域名将返回`false`。\n\n请确保你的代码包括一个主类`DomainValidator`和一个静态方法`checkDomainValidity`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.regex.Pattern;\npublic class DomainValidator {\n    public static boolean checkDomainValidity(String domain) {\n    }\n}\n```", "id": 1637, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport java.util.regex.Pattern;\npublic class DomainValidator {\n    public static boolean checkDomainValidity(String domain) {\n        Pattern pattern = Pattern.compile(\"[?]\");\n        return !pattern.matcher(domain).find();\n    }\n    public static void main(String[] args) {\n        String[] testDomains = {\"example.com\", \"invalid?domain.com\", \"another.valid-domain.com\", \"invalid.domain?com\"};\n        for (String domain : testDomains) {\n            boolean isValid = checkDomainValidity(domain);\n            System.out.println(\"域名 \\\"\" + domain + \"\\\" 是否有效: \" + isValid);\n        }\n    }\n}\nclass DomainValidatorTest {\n    @Test\n    public void testValidDomain1() {\n        assertTrue(DomainValidator.checkDomainValidity(\"example.com\"));\n    }\n    @Test\n    public void testValidDomain2() {\n        assertTrue(DomainValidator.checkDomainValidity(\"another.valid-domain.com\"));\n    }\n    @Test\n    public void testInvalidDomain1() {\n        assertFalse(DomainValidator.checkDomainValidity(\"invalid?domain.com\"));\n    }\n    @Test\n    public void testInvalidDomain2() {\n        assertFalse(DomainValidator.checkDomainValidity(\"invalid.domain?com\"));\n    }\n    @Test\n    public void testValidDomainWithSubdomain() {\n        assertTrue(DomainValidator.checkDomainValidity(\"sub.example.com\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class PropertyRenamer {\n    public String[] renameProperty(NameTransformer transformer, String[] propertyNames) {\n        if (transformer == null || propertyNames == null) {\n            return propertyNames;\n        }\n        String[] transformedNames = new String[propertyNames.length];\n        for (int i = 0; i < propertyNames.length; i++) {\n            transformedNames[i] = transformer.transform(propertyNames[i]);\n        }\n        return transformedNames;\n    }\n    public void checkFunction(String[] originalNames, String[] expectedNames, NameTransformer transformer) {\n        String[] result = renameProperty(transformer, originalNames);\n        if (Arrays.equals(result, expectedNames)) {\n            System.out.println(\"转换正确！\");\n        } else {\n            System.out.println(\"转换错误，期望的结果是：\" + Arrays.toString(expectedNames) + \"，但实际结果是：\" + Arrays.toString(result));\n        }\n    }\n}", "content": "请编写一个Java类`PropertyRenamer`，该类包含一个方法`renameProperty`，该方法接受一个属性名称转换器`NameTransformer`和一个属性名称数组`propertyNames`。该方法的目的是使用`NameTransformer`来转换`propertyNames`数组中的每个属性名称，并返回一个新的包含转换后的属性名称的数组。请确保你的代码能够处理空的转换器或空的属性名称数组的情况。\n\n以下是一个简单的`NameTransformer`接口和一个实现例，你可以用它来测试你的`PropertyRenamer`类：\n\n```java\nimport java.util.Arrays;\n\ninterface NameTransformer {\n    String transform(String propertyName);\n}\n\nclass PrefixNameTransformer implements NameTransformer {\n    private String prefix;\n\n    public PrefixNameTransformer(String prefix) {\n        this.prefix = prefix;\n    }\n\n    @Override\n    public String transform(String propertyName) {\n        return prefix + propertyName;\n    }\n}\n```\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\npublic class PropertyRenamer {\n    public String[] renameProperty(NameTransformer transformer, String[] propertyNames) {\n    }\n    public void checkFunction(String[] originalNames, String[] expectedNames, NameTransformer transformer) {\n    }\n}\n```", "id": 1638, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class PropertyRenamerTest {\n    @Test\n    public void testRenameProperty_withValidTransformerAndPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        String[] propertyNames = {\"name\", \"address\", \"email\"};\n        String[] expectedNames = {\"NAME\", \"ADDRESS\", \"EMAIL\"};\n        assertArrayEquals(expectedNames, renamer.renameProperty(transformer, propertyNames));\n    }\n    @Test\n    public void testRenameProperty_withNullTransformer() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        String[] propertyNames = {\"name\", \"address\", \"email\"};\n        assertArrayEquals(propertyNames, renamer.renameProperty(null, propertyNames));\n    }\n    @Test\n    public void testRenameProperty_withNullPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        assertNull(renamer.renameProperty(transformer, null));\n    }\n    @Test\n    public void testRenameProperty_withEmptyPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        String[] propertyNames = {};\n        String[] expectedNames = {};\n        assertArrayEquals(expectedNames, renamer.renameProperty(transformer, propertyNames));\n    }\n    @Test\n    public void testRenameProperty_withValidTransformerAndMixedPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        String[] propertyNames = {\"name\", \"\", \"email\"};\n        String[] expectedNames = {\"NAME\", \"\", \"EMAIL\"};\n        assertArrayEquals(expectedNames, renamer.renameProperty(transformer, propertyNames));\n    }\n}\ninterface NameTransformer {\n    String transform(String name);\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nclass Book {\n    private String title;\n    private String author;\n    private String isbn;\n    private int year;\n    public Book(String title, String author, String isbn, int year) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n        this.year = year;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public String getAuthor() {\n        return author;\n    }\n    public String getIsbn() {\n        return isbn;\n    }\n    public int getYear() {\n        return year;\n    }\n}\nclass BookReader {\n    public static List<Book> getAll() {\n        List<Book> books = new ArrayList<>();\n        books.add(new Book(\"Java编程思想\", \"Bruce Eckel\", \"978-0131872486\", 2006));\n        books.add(new Book(\"Effective Java\", \"Joshua Bloch\", \"978-0134685991\", 2018));\n        return books;\n    }\n}\npublic class LibraryDisplay {\n    private static final int WIDTH = 50;\n    public static void displayAllBooks() {\n        List<Book> books = BookReader.getAll();\n        if (!books.isEmpty()) {\n            System.out.println(\"----DISPLAYING ALL BOOKS----\");\n            for (Book book : books) {\n                for (int i = 0; i < WIDTH; i++)\n                    System.out.print(\"-\");\n                System.out.print(\"\\n\");\n                System.out.println(\"TITLE: \" + book.getTitle());\n                System.out.println(\"AUTHOR: \" + book.getAuthor());\n                System.out.println(\"ISBN: \" + book.getIsbn());\n                System.out.println(\"YEAR: \" + book.getYear());\n                for (int i = 0; i < WIDTH; i++)\n                    System.out.print(\"-\");\n                System.out.print(\"\\n\");\n            }\n        } else {\n            System.out.println(\"NO BOOKS FOUND\");\n        }\n    }\n    public static void main(String[] args) {\n        displayAllBooks();\n    }\n}", "content": "请编写一个Java程序，用于展示图书馆中所有图书的详细信息。每本图书包括书名、作者、ISBN号和出版年份。程序应该从一个预定义的图书列表中读取这些信息，并以一种格式化的方式展示出来。确保在展示每本图书信息前后都有分隔线。此外，如果图书列表为空，则应打印出相应的提示信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass Book {\n    private String title;\n    private String author;\n    private String isbn;\n    private int year;\n    public Book(String title, String author, String isbn, int year) {\n    }\n    public String getTitle() {\n    }\n    public String getAuthor() {\n    }\n    public String getIsbn() {\n    }\n    public int getYear() {\n    }\n}\nclass BookReader {\n    public static List<Book> getAll() {\n    }\n}\npublic class LibraryDisplay {\n    private static final int WIDTH = 50;\n    public static void displayAllBooks() {\n    }\n}\n```", "id": 1639, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testBookConstructorAndGetters() {\n        Book book = new Book(\"Java编程思想\", \"Bruce Eckel\", \"978-0131872486\", 2006);\n        assertEquals(\"Java编程思想\", book.getTitle());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n        assertEquals(\"978-0131872486\", book.getIsbn());\n        assertEquals(2006, book.getYear());\n    }\n}\nclass BookReaderTest {\n    @Test\n    void testGetAllBooksCount() {\n        List<Book> books = BookReader.getAll();\n        assertNotNull(books);\n        assertEquals(2, books.size());\n    }\n    @Test\n    void testGetAllBooksContents() {\n        List<Book> books = BookReader.getAll();\n        Book book1 = books.get(0);\n        Book book2 = books.get(1);\n        assertEquals(\"Java编程思想\", book1.getTitle());\n        assertEquals(\"Bruce Eckel\", book1.getAuthor());\n        assertEquals(\"978-0131872486\", book1.getIsbn());\n        assertEquals(2006, book1.getYear());\n        assertEquals(\"Effective Java\", book2.getTitle());\n        assertEquals(\"Joshua Bloch\", book2.getAuthor());\n        assertEquals(\"978-0134685991\", book2.getIsbn());\n        assertEquals(2018, book2.getYear());\n    }\n}\nclass LibraryDisplayTest {\n    @Test\n    void testDisplayAllBooks() {\n        boolean booksDisplayedCorrectly = false;\n        List<Book> books = BookReader.getAll();\n        if (!books.isEmpty()) {\n            booksDisplayedCorrectly = true;\n            for (Book book : books) {\n                assertNotNull(book.getTitle());\n                assertNotNull(book.getAuthor());\n                assertNotNull(book.getIsbn());\n                assertTrue(book.getYear() > 0);\n            }\n        }\n        assertTrue(booksDisplayedCorrectly);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass PersonAssert {\n    private Person actual;\n    private static final String ERROR_MESSAGE = \"\\n期望的年龄为:\\n  <%s>\\n但实际的年龄为:\\n  <%s>\";\n    public PersonAssert(Person actual) {\n        this.actual = actual;\n    }\n    public PersonAssert isNotNull() {\n        if (actual == null) {\n            throw new AssertionError(\"Person对象不应该为null\");\n        }\n        return this;\n    }\n    public PersonAssert assertAge(Integer expectedAge) {\n        isNotNull();\n        Integer actualAge = actual.getAge();\n        if (!Objects.equals(actualAge, expectedAge)) {\n            throw new AssertionError(String.format(ERROR_MESSAGE, expectedAge, actualAge));\n        }\n        return this;\n    }\n}\nclass Person {\n    private Integer age;\n    public Person(Integer age) {\n        this.age = age;\n    }\n    public Integer getAge() {\n        return age;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        check(25, true);\n        check(30, false);\n    }\n    static void check(Integer ageToTest, boolean shouldPass) {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        try {\n            personAssert.assertAge(ageToTest);\n            if (!shouldPass) {\n                System.out.println(\"应该抛出异常，因为实际年龄与期望年龄不符\");\n            } else {\n                System.out.println(\"断言成功，年龄匹配\");\n            }\n        } catch (AssertionError error) {\n            if (shouldPass) {\n                System.out.println(\"不应该抛出异常，因为实际年龄与期望年龄相符\");\n            } else {\n                System.out.println(\"断言失败，抛出异常，这是预期的\");\n            }\n        }\n    }\n}", "content": "请设计一个Java类`PersonAssert`，该类用于对`Person`对象的年龄属性进行断言。如果断言失败，它应该抛出一个异常，显示期望的年龄和实际的年龄。请按照以下要求实现`assertAge`方法：\n\n- 方法应该验证`Person`对象的年龄是否与给定的年龄相等。\n- 如果不相等，应该抛出一个异常，并提供详细的错误信息。\n- 方法应该支持链式调用，即返回当前`PersonAssert`对象以便可以连续用其他断言方法。\n\n请提供一个`Person`类，只包含一个`age`属性和相应的`getAge`方法。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass PersonAssert {\n    private Person actual;\n    private static final String ERROR_MESSAGE = \"\\n期望的年龄为:\\n  <%s>\\n但实际的年龄为:\\n  <%s>\";\n    public PersonAssert(Person actual) {\n    }\n    public PersonAssert isNotNull() {\n        return this;\n    }\n    public PersonAssert assertAge(Integer expectedAge) {\n        return this;\n    }\n}\nclass Person {\n    private Integer age;\n    public Person(Integer age) {\n    }\n    public Integer getAge() {\n        return age;\n    }\n}\n```", "id": 1640, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass PersonAssertTest {\n    @Test\n    void testIsNotNullWithNonNullPerson() {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        assertDoesNotThrow(personAssert::isNotNull);\n    }\n    @Test\n    void testIsNotNullWithNullPerson() {\n        Person person = null;\n        PersonAssert personAssert = new PersonAssert(person);\n        AssertionError thrown = assertThrows(AssertionError.class, personAssert::isNotNull);\n        assertEquals(\"Person对象不应该为null\", thrown.getMessage());\n    }\n    @Test\n    void testAssertAgeWithMatchingAge() {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        assertDoesNotThrow(() -> personAssert.assertAge(25));\n    }\n    @Test\n    void testAssertAgeWithNonMatchingAge() {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        AssertionError thrown = assertThrows(AssertionError.class, () -> personAssert.assertAge(30));\n        assertEquals(\"\\n期望的年龄为:\\n  <30>\\n但实际的年龄为:\\n  <25>\", thrown.getMessage());\n    }\n    @Test\n    void testAssertAgeWithNullAge() {\n        Person person = new Person(null);\n        PersonAssert personAssert = new PersonAssert(person);\n        AssertionError thrown = assertThrows(AssertionError.class, () -> personAssert.assertAge(25));\n        assertEquals(\"\\n期望的年龄为:\\n  <25>\\n但实际的年龄为:\\n  <null>\", thrown.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.Arrays;\npublic class UrlRedirectService {\n    public String redirectToHomePage(List<String> roles) {\n        if (roles.contains(\"ADMIN\")) {\n            return \"/dashboard\";\n        } else if (roles.contains(\"USER\")) {\n            return \"/homepage\";\n        } else {\n            return \"/login\";\n        }\n    }\n    public static void main(String[] args) {\n        UrlRedirectService service = new UrlRedirectService();\n        assert \"/dashboard\".equals(service.redirectToHomePage(Arrays.asList(\"ADMIN\")));\n        assert \"/homepage\".equals(service.redirectToHomePage(Arrays.asList(\"USER\")));\n        assert \"/login\".equals(service.redirectToHomePage(Arrays.asList(\"GUEST\")));\n        System.out.println(\"所有测试用例都通过了!\");\n    }\n}", "content": "请完成一道 Java 编程题，实现一个 URL 重定向服务类，该类根据用户的角色返回不同的页面路径。\n\n**题目要求：**\n\n实现一个名为 `UrlRedirectService` 的 Java 类，其中包含以下方法：\n\n- **方法签名**: `public String redirectToHomePage(List<String> roles)`\n- **参数说明**: 方法接收一个字符串列表 `roles`，表示用户的角色列表。\n- **返回值**: 根据角色列表，返回对应的页面路径：\n  - 如果角色列表中包含 `\"ADMIN\"`，返回 `\"/dashboard\"`。\n  - 如果角色列表中包含 `\"USER\"`（但不包含 `\"ADMIN\"`），返回 `\"/homepage\"`。\n  - 如果角色列表中既不包含 `\"ADMIN\"` 也不包含 `\"USER\"`，返回 `\"/login\"`。\n\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.List;\nimport java.util.Arrays;\npublic class UrlRedirectService {\n    public String redirectToHomePage(List<String> roles) { }\n}\n```", "id": 1641, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.List;\nimport java.util.Arrays;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class UrlRedirectServiceTest {\n    @Test\n    public void testRedirectToHomePage_AdminRole() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"ADMIN\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/dashboard\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_UserRole() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"USER\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/homepage\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_GuestRole() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"GUEST\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/login\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_EmptyRoles() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList();\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/login\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_MultipleRoles() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"USER\", \"ADMIN\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/dashboard\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class InventoryManager {\n    public boolean removeProductAsync(String productName) throws ExecutionException, InterruptedException {\n        CompletableFuture<Boolean> future = CompletableFuture.supplyAsync(() -> {\n            if (\"电视机\".equals(productName)) {\n                return true; \n            } else {\n                return false; \n            }\n        });\n        boolean removed = future.get(); \n        return removed;\n    }\n    public static void main(String[] args) {\n        InventoryManager manager = new InventoryManager();\n        try {\n            boolean isRemoved = manager.removeProductAsync(\"电视机\");\n            System.out.println(\"商品移除状态: \" + (isRemoved ? \"已移除\" : \"未找到\"));\n            isRemoved = manager.removeProductAsync(\"冰箱\");\n            System.out.println(\"商品移除状态: \" + (isRemoved ? \"已移除\" : \"未找到\"));\n        } catch (ExecutionException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于异步检查一个商品是否已经从在线商店的库存中移除。如果商品成功移除，则返回`true`；如果商品找不到，则返回`false`。请确保你的代码是自包含的，并且包括所有必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class InventoryManager {\n    public boolean removeProductAsync(String productName) throws ExecutionException, InterruptedException {\n    }\n}\n```", "id": 1642, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.ExecutionException;\npublic class InventoryManagerTest {\n    @Test\n    public void testRemoveProductAsyncWithExistingProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"电视机\");\n        assertTrue(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithNonExistingProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"冰箱\");\n        assertFalse(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithNullProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(null);\n        assertFalse(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithEmptyString() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"\");\n        assertFalse(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithDifferentProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"手机\");\n        assertFalse(result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass Student {\n    private Map<Course, Integer> scores; \n    public Student() {\n        this.scores = new HashMap<>();\n    }\n    public void addScore(Course course, int score) {\n        scores.put(course, score);\n    }\n    public int getScore(Course course) {\n        return scores.getOrDefault(course, 0);\n    }\n}\nclass Course {\n    private String name; \n    public Course(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\npublic class ExamChecker {\n    static boolean isPassed(Student student, Course course) {\n        return student.getScore(course) >= 60;\n    }\n    public static void main(String[] args) {\n        Student student = new Student();\n        Course math = new Course(\"数学\");\n        student.addScore(math, 75); \n        boolean passed = isPassed(student, math);\n        System.out.println(\"学生是否通过了数学考试？ \" + passed); \n    }\n}", "content": "请编写一个Java方法，用于检查一个学生是否通过了指定的课程考试。该方法接收两个参数：一个`Student`对象和一个`Course`对象。如果学生通过了课程考试，则方法返回`true`；否则返回`false`。学生通过考试的条件是：学生的成绩必须大于或等于60分。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass Student {\n    private Map<Course, Integer> scores; \n    public Student() {\n    }\n    public void addScore(Course course, int score) {\n    }\n    public int getScore(Course course) {\n    }\n}\nclass Course {\n    private String name; \n    public Course(String name) {\n    }\n    public String getName() {\n    }\n}\npublic class ExamChecker {\n    static boolean isPassed(Student student, Course course) {\n    }\n}\n```", "id": 1643, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentTest {\n    @Test\n    void testAddScore() {\n        Student student = new Student();\n        Course math = new Course(\"数学\");\n        student.addScore(math, 75);\n        assertEquals(75, student.getScore(math));\n    }\n    @Test\n    void testGetScoreWithoutAdding() {\n        Student student = new Student();\n        Course science = new Course(\"科学\");\n        assertEquals(0, student.getScore(science));\n    }\n    @Test\n    void testGetScoreWithDifferentSubject() {\n        Student student = new Student();\n        Course english = new Course(\"英语\");\n        Course history = new Course(\"历史\");\n        student.addScore(english, 85);\n        assertEquals(0, student.getScore(history));\n    }\n    @Test\n    void testIsPassed() {\n        Student student = new Student();\n        Course math = new Course(\"数学\");\n        student.addScore(math, 75);\n        assertTrue(ExamChecker.isPassed(student, math));\n    }\n    @Test\n    void testIsNotPassed() {\n        Student student = new Student();\n        Course physics = new Course(\"物理\");\n        student.addScore(physics, 55);\n        assertFalse(ExamChecker.isPassed(student, physics));\n    }\n}"}}
{"canonical_solution": "import java.lang.UnsupportedOperationException;\npublic class Reservation {\n    private int bookingId;\n    public Reservation(int bookingId) {\n        this.bookingId = bookingId;\n    }\n    public int retrieveBookingId() {\n        return this.bookingId;\n    }\n    public boolean checkBookingId(int expected) {\n        return this.retrieveBookingId() == expected;\n    }\n    public static void main(String[] args) {\n        Reservation reservation1 = new Reservation(123);\n        Reservation reservation2 = new Reservation(456);\n        System.out.println(\"Reservation 1 has booking ID 123: \" + reservation1.checkBookingId(123)); \n        System.out.println(\"Reservation 2 has booking ID 456: \" + reservation2.checkBookingId(456)); \n    }\n}", "content": "请编写一个Java类`Reservation`，其中包含一个名为`retrieveBookingId`的方法。该方法应该返回一个私有成员变量`bookingId`的值。请确保在类中正确地声明和初始化这个私有成员变量，并且提供一个构造函数来设置它的值。此外，编写一个名为`checkBookingId`的方法来验证`retrieveBookingId`方法的正确性。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.UnsupportedOperationException;\npublic class Reservation {\n    private int bookingId;\n    public Reservation(int bookingId) {\n    }\n    public int retrieveBookingId() {\n    }\n    public boolean checkBookingId(int expected) {\n    }\n}\n```", "id": 1644, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class ReservationTest {\n    @Test\n    public void testRetrieveBookingId() {\n        Reservation reservation = new Reservation(123);\n        Assertions.assertEquals(123, reservation.retrieveBookingId());\n    }\n    @Test\n    public void testCheckBookingIdTrue() {\n        Reservation reservation = new Reservation(123);\n        Assertions.assertTrue(reservation.checkBookingId(123));\n    }\n    @Test\n    public void testCheckBookingIdFalse() {\n        Reservation reservation = new Reservation(123);\n        Assertions.assertFalse(reservation.checkBookingId(456));\n    }\n    @Test\n    public void testRetrieveBookingIdDifferentInstance() {\n        Reservation reservation = new Reservation(456);\n        Assertions.assertEquals(456, reservation.retrieveBookingId());\n    }\n    @Test\n    public void testCheckBookingIdDifferentInstanceFalse() {\n        Reservation reservation = new Reservation(456);\n        Assertions.assertFalse(reservation.checkBookingId(123));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nclass Book {\n    private String title;\n    private String author;\n    public Book(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n    @Override\n    public String toString() {\n        return \"书名: \" + title + \", 作者: \" + author;\n    }\n}\npublic class Library {\n    public void displayBookList(ArrayList<Book> books) {\n        System.out.println(\"\\n图书馆藏书如下：\");\n        for (Book book : books) {\n            System.out.println(book);\n        }\n    }\n    public static void main(String[] args) {\n        ArrayList<Book> books = new ArrayList<>();\n        books.add(new Book(\"Java编程思想\", \"Bruce Eckel\"));\n        books.add(new Book(\"Effective Java\", \"Joshua Bloch\"));\n        books.add(new Book(\"深入理解Java虚拟机\", \"周志明\"));\n        Library library = new Library();\n        library.displayBookList(books);\n    }\n}", "content": "请编写一个Java程序，用于展示一个图书馆中所有图书的信息。图书信息包括书名和作者名。要求使用面向对象的方式来实现，其中图书信息使用一个单独的类来表示，并且提供一个方法来打印所有图书的信息。请确保代码片段是完全独立的，并且包含所有必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nclass Book {\n    private String title;\n    private String author;\n    public Book(String title, String author) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class Library {\n    public void displayBookList(ArrayList<Book> books) {\n    }\n}\n```", "id": 1645, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testBookCreation() {\n        Book book = new Book(\"Test Title\", \"Test Author\");\n        assertNotNull(book);\n    }\n    @Test\n    void testBookToString() {\n        Book book = new Book(\"Test Title\", \"Test Author\");\n        assertEquals(\"书名: Test Title, 作者: Test Author\", book.toString());\n    }\n}\nclass LibraryTest {\n    @Test\n    void testDisplayBookListWithMultipleBooks() {\n        ArrayList<Book> books = new ArrayList<>();\n        books.add(new Book(\"Java编程思想\", \"Bruce Eckel\"));\n        books.add(new Book(\"Effective Java\", \"Joshua Bloch\"));\n        books.add(new Book(\"深入理解Java虚拟机\", \"周志明\"));\n        Library library = new Library();\n        assertDoesNotThrow(() -> library.displayBookList(books));\n    }\n    @Test\n    void testDisplayBookListWithEmptyList() {\n        ArrayList<Book> books = new ArrayList<>();\n        Library library = new Library();\n        assertDoesNotThrow(() -> library.displayBookList(books));\n    }\n    @Test\n    void testDisplayBookListWithOneBook() {\n        ArrayList<Book> books = new ArrayList<>();\n        books.add(new Book(\"独自等待\", \"李傲\"));\n        Library library = new Library();\n        assertDoesNotThrow(() -> library.displayBookList(books));\n    }\n}"}}
{"canonical_solution": "import java.util.List;\npublic class BookManager {\n    private List<String> bookList;\n    public BookManager(List<String> bookList) {\n        this.bookList = bookList;\n    }\n    public void updateBookList(List<String> newBookList) {\n        this.bookList = newBookList;\n        System.out.println(\"图书列表已更新。\");\n    }\n    public List<String> getBookList() {\n        return bookList;\n    }\n}\nclass BookManagerTest {\n    public static void main(String[] args) {\n        List<String> initialBooks = List.of(\"Java基础\", \"算法导论\", \"设计模式\");\n        BookManager manager = new BookManager(initialBooks);\n        System.out.println(\"初始图书列表: \" + manager.getBookList());\n        List<String> updatedBooks = List.of(\"微服务架构\", \"Spring实战\", \"深入理解Java虚拟机\");\n        manager.updateBookList(updatedBooks);\n        System.out.println(\"更新后的图书列表: \" + manager.getBookList());\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统。在这个系统中，需要有一个功能来更新图书列表。当图书列表发生变化时，系统应该能够接收一个包含图书名称的字符串列表，并更新当前的图书列表。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.List;\npublic class BookManager {\n    private List<String> bookList;\n    public BookManager(List<String> bookList) {\n    }\n    public void updateBookList(List<String> newBookList) {\n    }\n    public List<String> getBookList() {\n    }\n}\n```", "id": 1646, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.List;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    private List<String> initialBooks;\n    private List<String> updatedBooks;\n    @BeforeEach\n    public void setUp() {\n        initialBooks = List.of(\"Java基础\", \"算法导论\", \"设计模式\");\n        bookManager = new BookManager(initialBooks);\n        updatedBooks = List.of(\"微服务架构\", \"Spring实战\", \"深入理解Java虚拟机\");\n    }\n    @Test\n    public void testInitialBookList() {\n        List<String> books = bookManager.getBookList();\n        assertEquals(initialBooks, books, \"Initial book list should match the list passed during instantiation.\");\n    }\n    @Test\n    public void testUpdateBookList() {\n        bookManager.updateBookList(updatedBooks);\n        List<String> books = bookManager.getBookList();\n        assertEquals(updatedBooks, books, \"Book list should be updated to the new list.\");\n    }\n    @Test\n    public void testEmptyBookList() {\n        bookManager.updateBookList(List.of());\n        List<String> books = bookManager.getBookList();\n        assertTrue(books.isEmpty(), \"Book list should be empty after updating with an empty list.\");\n    }\n    @Test\n    public void testNullBookList() {\n        bookManager.updateBookList(null);\n        List<String> books = bookManager.getBookList();\n        assertNull(books, \"Book list should be null after updating with a null list.\");\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileFinisher {\n    public void writeAndCloseFile(String filePath, String data) throws IOException {\n        BufferedWriter writer = null;\n        try {\n            writer = new BufferedWriter(new FileWriter(filePath));\n            writer.write(data);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n        }\n    }\n    public static void main(String[] args) {\n        FileFinisher finisher = new FileFinisher();\n        String testFilePath = \"test.txt\";\n        String testData = \"这是一个测试数据。\";\n        try {\n            finisher.writeAndCloseFile(testFilePath, testData);\n            System.out.println(\"文件写入和关闭操作成功。\");\n        } catch (IOException e) {\n            System.err.println(\"发生错误：\" + e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于完成对一个文本文件的写入操作，并在写入完成后关闭文件。如果在写入或关闭文件时发生错误，应抛出一个异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileFinisher {\n    public void writeAndCloseFile(String filePath, String data) throws IOException {\n    }\n}\n```", "id": 1647, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.*;\nimport java.io.*;\npublic class FileFinisherTest {\n    private FileFinisher fileFinisher;\n    private final String testFilePath = \"test.txt\";\n    @BeforeEach\n    public void setUp() {\n        fileFinisher = new FileFinisher();\n    }\n    @AfterEach\n    public void tearDown() throws IOException {\n        File file = new File(testFilePath);\n        if (file.exists()) {\n            file.delete();\n        }\n    }\n    @Test\n    public void testWriteAndCloseFileSuccess() throws IOException {\n        String data = \"This is test data.\";\n        fileFinisher.writeAndCloseFile(testFilePath, data);\n        File file = new File(testFilePath);\n        Assertions.assertTrue(file.exists());\n        Assertions.assertEquals(data, readFileContent(testFilePath));\n    }\n    @Test\n    public void testWriteAndCloseFileEmptyString() throws IOException {\n        String data = \"\";\n        fileFinisher.writeAndCloseFile(testFilePath, data);\n        File file = new File(testFilePath);\n        Assertions.assertTrue(file.exists());\n        Assertions.assertEquals(data, readFileContent(testFilePath));\n    }\n    @Test\n    public void testWriteAndCloseFileNonExistentDirectory() {\n        String data = \"This is test data.\";\n        String invalidFilePath = \"nonexistent_directory/test.txt\";\n        Assertions.assertThrows(IOException.class, () -> {\n            fileFinisher.writeAndCloseFile(invalidFilePath, data);\n        });\n    }\n    private String readFileContent(String filePath) throws IOException {\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content.append(line);\n            }\n        }\n        return content.toString();\n    }\n}"}}
{"canonical_solution": "import java.text.SimpleDateFormat;\nimport java.util.Date;\npublic class LogHelper {\n    public static String addTimestamp(String originalLog) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String timestamp = dateFormat.format(new Date());\n        return timestamp + \" \" + originalLog;\n    }\n    public static void checkFunction() {\n        String log = \"这是一条日志信息。\";\n        String result = addTimestamp(log);\n        System.out.println(\"带时间戳的日志信息: \" + result);\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java方法，用于向日志信息中添加时间戳信息。该方法接收一个字符串参数，代表原始日志信息，并返回一个新的字符串，其中包含了当前的时间戳（格式为`yyyy-MM-dd HH:mm:ss`）和原始日志信息。时间戳和日志信息之间用一个空格分隔。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\npublic class LogHelper {\n    public static String addTimestamp(String originalLog) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1648, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\npublic class LogHelperTest {\n    @Test\n    public void testAddTimestamp_NotNull() {\n        String log = \"Test log message\";\n        String result = LogHelper.addTimestamp(log);\n        assertNotNull(result);\n    }\n    @Test\n    public void testAddTimestamp_ContainsOriginalLog() {\n        String log = \"Another log message\";\n        String result = LogHelper.addTimestamp(log);\n        assertTrue(result.contains(log));\n    }\n    @Test\n    public void testAddTimestamp_ContainsTimestamp() {\n        String log = \"Message with timestamp\";\n        String result = LogHelper.addTimestamp(log);\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String timestamp = dateFormat.format(new Date());\n        assertTrue(result.contains(timestamp.substring(0, 10))); \n    }\n    @Test\n    public void testAddTimestamp_VaryingLogs() {\n        String log1 = \"First log\";\n        String log2 = \"Second log\";\n        String result1 = LogHelper.addTimestamp(log1);\n        String result2 = LogHelper.addTimestamp(log2);\n        assertTrue(result1.contains(log1));\n        assertTrue(result2.contains(log2));\n    }\n    @Test\n    public void testAddTimestamp_EmptyLog() {\n        String log = \"\";\n        String result = LogHelper.addTimestamp(log);\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String timestamp = dateFormat.format(new Date());\n        assertTrue(result.startsWith(timestamp));\n    }\n}"}}
{"canonical_solution": "import java.io.IOException;\npublic class SafeArrayAccess {\n    public void safeAccess(int index) {\n        int[] numbers = {10, 20, 30, 40, 50}; \n        if (index >= 0 && index < numbers.length) {\n            System.out.println(numbers[index]);\n        } else {\n            System.out.println(\"索引超出范围\");\n        }\n    }\n    public static void main(String[] args) throws IOException {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        safeArrayAccess.safeAccess(2); \n        safeArrayAccess.safeAccess(-1); \n        safeArrayAccess.safeAccess(5); \n    }\n}", "content": "请编写一个程序，实现一个安全的数组访问功能。该功能应该能够接收一个整数索引，并安全地返回一个固定数组中对应索引的值。如果索引超出数组的界限，程序应该输出“索引超出范围”。请确保你的程序遵循良好的编程实践，特别是在处理数组边界时。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.IOException;\npublic class SafeArrayAccess {\n    public void safeAccess(int index) {\n    }\n}\n```", "id": 1649, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SafeArrayAccessTest {\n    @Test\n    public void testValidIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(2));\n    }\n    @Test\n    public void testNegativeIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(-1));\n    }\n    @Test\n    public void testIndexOutOfRangeUpperBound() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(5));\n    }\n    @Test\n    public void testFirstIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(0));\n    }\n    @Test\n    public void testLastIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(4));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class EmailValidator {\n    public static String validateEmail(String email) {\n        if (Objects.isNull(email) || email.isEmpty()) {\n            return \"邮箱地址不能为空。\";\n        }\n        if (!email.contains(\"@\")) {\n            return \"邮箱地址格式错误，缺少'@'符号。\";\n        }\n        return \"邮箱地址有效。\";\n    }\n    public static void main(String[] args) {\n        System.out.println(validateEmail(\"\")); \n        System.out.println(validateEmail(\"example.com\")); \n        System.out.println(validateEmail(\"user@example.com\")); \n    }\n}", "content": "请编写一个Java方法，用于检查用户输入的邮箱地址是否有效。有效的邮箱地址需要满足以下条件：不能为空，并且必须包含“@”符号。如果邮箱地址无效，方法应该返回一个错误信息；如果有效，则返回一个确认信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    public static String validateEmail(String email) {\n    }\n}\n```", "id": 1650, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class EmailValidatorTest {\n    @Test\n    void testEmptyEmail() {\n        String result = EmailValidator.validateEmail(\"\");\n        assertEquals(\"邮箱地址不能为空。\", result);\n    }\n    @Test\n    void testNullEmail() {\n        String result = EmailValidator.validateEmail(null);\n        assertEquals(\"邮箱地址不能为空。\", result);\n    }\n    @Test\n    void testEmailWithoutAtSymbol() {\n        String result = EmailValidator.validateEmail(\"example.com\");\n        assertEquals(\"邮箱地址格式错误，缺少'@'符号。\", result);\n    }\n    @Test\n    void testValidEmail() {\n        String result = EmailValidator.validateEmail(\"user@example.com\");\n        assertEquals(\"邮箱地址有效。\", result);\n    }\n    @Test\n    void testEmailWithMultipleAtSymbols() {\n        String result = EmailValidator.validateEmail(\"user@@example.com\");\n        assertEquals(\"邮箱地址有效。\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Book {\n    private String bookId;\n    private String title;\n    private String author;\n    public Book(String bookId, String title, String author) {\n        this.bookId = bookId;\n        this.title = title;\n        this.author = author;\n    }\n    public String getBookId() {\n        return bookId;\n    }\n    public void setBookId(String bookId) {\n        this.bookId = bookId;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public String getAuthor() {\n        return author;\n    }\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"bookId='\" + bookId + '\\'' +\n                \", title='\" + title + '\\'' +\n                \", author='\" + author + '\\'' +\n                '}';\n    }\n}\nclass BookJpaRepository {\n    public Book save(Book book) {\n        System.out.println(\"Saving book: \" + book);\n        return book;\n    }\n}\npublic class BookManager {\n    private BookJpaRepository bookJpaRepository = new BookJpaRepository();\n    public Book addBook(Book book) {\n        Book addedBook = bookJpaRepository.save(book);\n        return addedBook;\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        Book newBook = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        Book addedBook = manager.addBook(newBook);\n        System.out.println(\"Added book: \" + addedBook);\n    }\n}", "content": "请设计一个Java方法，用于将一个新的图书信息添加到图书数据库中，并返回添加的这本图书的信息。假设你已经有一个名为`BookJpaRepository`的类，它提供了一个名为`save`的方法，可以将一个图书对象保存到数据库中，并返回这个被保存的对象。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass Book {\n    private String bookId;\n    private String title;\n    private String author;\n    public Book(String bookId, String title, String author) {\n    }\n    public String getBookId() {\n    }\n    public void setBookId(String bookId) {\n    }\n    public String getTitle() {\n    }\n    public void setTitle(String title) {\n    }\n    public String getAuthor() {\n    }\n    public void setAuthor(String author) {\n    }\n    @Override\n    public String toString() {\n    }\n}\nclass BookJpaRepository {\n    public Book save(Book book) {\n    }\n}\npublic class BookManager {\n    private BookJpaRepository bookJpaRepository = new BookJpaRepository();\n    public Book addBook(Book book) {\n    }\n}\n```", "id": 1651, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testBookGettersAndSetters() {\n        Book book = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"1\", book.getBookId());\n        assertEquals(\"Java编程思想\", book.getTitle());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n        book.setBookId(\"2\");\n        book.setTitle(\"Effective Java\");\n        book.setAuthor(\"Joshua Bloch\");\n        assertEquals(\"2\", book.getBookId());\n        assertEquals(\"Effective Java\", book.getTitle());\n        assertEquals(\"Joshua Bloch\", book.getAuthor());\n    }\n    @Test\n    void testBookToString() {\n        Book book = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        String expectedString = \"Book{bookId='1', title='Java编程思想', author='Bruce Eckel'}\";\n        assertEquals(expectedString, book.toString());\n    }\n}\nclass BookManagerTest {\n    @Test\n    void testAddBook() {\n        BookManager manager = new BookManager();\n        Book book = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        Book addedBook = manager.addBook(book);\n        assertNotNull(addedBook);\n        assertEquals(book.getBookId(), addedBook.getBookId());\n        assertEquals(book.getTitle(), addedBook.getTitle());\n        assertEquals(book.getAuthor(), addedBook.getAuthor());\n    }\n    @Test\n    void testAddBookDifferentAttributes() {\n        BookManager manager = new BookManager();\n        Book book = new Book(\"2\", \"Effective Java\", \"Joshua Bloch\");\n        Book addedBook = manager.addBook(book);\n        assertNotNull(addedBook);\n        assertEquals(book.getBookId(), addedBook.getBookId());\n        assertEquals(book.getTitle(), addedBook.getTitle());\n        assertEquals(book.getAuthor(), addedBook.getAuthor());\n    }\n    @Test\n    void testMultipleBooks() {\n        BookManager manager = new BookManager();\n        Book book1 = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        Book book2 = new Book(\"2\", \"Effective Java\", \"Joshua Bloch\");\n        Book addedBook1 = manager.addBook(book1);\n        Book addedBook2 = manager.addBook(book2);\n        assertNotNull(addedBook1);\n        assertNotNull(addedBook2);\n        assertEquals(book1.getBookId(), addedBook1.getBookId());\n        assertEquals(book2.getBookId(), addedBook2.getBookId());\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.util.Scanner;\npublic class 文件查找器 {\n    public static void 查找并打印文件(String 目录路径, String 文件扩展名) {\n        File 目录 = new File(目录路径);\n        if (目录.isDirectory()) {\n            File[] 文件列表 = 目录.listFiles();\n            if (文件列表 != null) {\n                for (File 文件 : 文件列表) {\n                    if (文件.getName().endsWith(文件扩展名) && 文件.isFile()) {\n                        System.out.println(\"找到文件: \" + 文件.getName());\n                    }\n                }\n            }\n        }\n    }\n    public static void main(String[] args) {\n        Scanner 输入 = new Scanner(System.in);\n        System.out.println(\"请输入目录路径: \");\n        String 目录路径 = 输入.next();\n        System.out.println(\"请输入文件扩展名: \");\n        String 文件扩展名 = 输入.next();\n        查找并打印文件(目录路径, 文件扩展名);\n        输入.close();\n    }\n}", "content": "请编写一个程序，用于查找并打印出指定目录下所有具有特定扩展名的文件名。用户首先需要输入目录的路径，然后输入想要查找的文件扩展名。如果该目录存在，并且包含具有指定扩展名的文件，则打印出这些文件的名称。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.File;\npublic class 文件查找器 {\n    public static void 查找并打印文件(String 目录路径, String 文件扩展名) {\n    }\n}\n```", "id": 1652, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class 文件查找器Test {\n    @TempDir\n    File tempDir;\n    @Test\n    public void test查找并打印文件_空目录() {\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_没有匹配的文件扩展名() throws IOException {\n        File file = new File(tempDir, \"test1.doc\");\n        try (FileWriter writer = new FileWriter(file)) {\n            writer.write(\"This is a test file.\");\n        }\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_有匹配的文件扩展名() throws IOException {\n        File file = new File(tempDir, \"test2.txt\");\n        try (FileWriter writer = new FileWriter(file)) {\n            writer.write(\"This is another test file.\");\n        }\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_目录不是一个目录() {\n        File notADirectory = new File(tempDir, \"not_a_directory\");\n        notADirectory.mkdir();\n        文件查找器.查找并打印文件(notADirectory.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_文件列表为空() {\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n        switch (operator) {\n            case '+':\n                return String.valueOf(num1 + num2);\n            case '-':\n                return String.valueOf(num1 - num2);\n            case '*':\n                return String.valueOf(num1 * num2);\n            case '/':\n                if (num2 == 0) {\n                    return \"Error: Division by zero.\";\n                } else {\n                    return String.valueOf(num1 / num2);\n                }\n            default:\n                return \"Error: Invalid operator.\";\n        }\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter the first number:\");\n        int num1 = scanner.nextInt();\n        System.out.println(\"Enter the second number:\");\n        int num2 = scanner.nextInt();\n        System.out.println(\"Enter the operator (+, -, *, /):\");\n        char operator = scanner.next().charAt(0);\n        String result = calculator.calculate(num1, num2, operator);\n        System.out.println(\"Result: \" + result);\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`，该类能够执行基本的算术运算：加法、减法、乘法和除法。请确保你的实现能够处理整数运算，并且在除法操作中，如果除数为0，应返回一个特定的错误信息而不是抛出异常。\n\n你需要提供一个方法`calculate`，它接受三个参数：两个整数`num1`和`num2`，以及一个字符`operator`，表示要执行的运算（`'+'`代表加法，`'-'`代表减法，`'*'`代表乘法，`'/'`代表除法）。该方法应返回一个字符串，包含运算的结果或错误信息。\n\n确保你的代码清晰、简洁，并附有适当的注释。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n    }\n}\n```", "id": 1653, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class SimpleCalculatorTest {\n    private SimpleCalculator calculator = new SimpleCalculator();\n    @Test\n    public void testAddition() {\n        assertEquals(\"5\", calculator.calculate(2, 3, '+'));\n    }\n    @Test\n    public void testSubtraction() {\n        assertEquals(\"1\", calculator.calculate(3, 2, '-'));\n    }\n    @Test\n    public void testMultiplication() {\n        assertEquals(\"6\", calculator.calculate(2, 3, '*'));\n    }\n    @Test\n    public void testDivision() {\n        assertEquals(\"2\", calculator.calculate(6, 3, '/'));\n    }\n    @Test\n    public void testDivisionByZero() {\n        assertEquals(\"Error: Division by zero.\", calculator.calculate(6, 0, '/'));\n    }\n    @Test\n    public void testInvalidOperator() {\n        assertEquals(\"Error: Invalid operator.\", calculator.calculate(6, 3, '%'));\n    }\n}"}}
{"canonical_solution": "import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class StringListToUpper {\n    public static List<String> convertListToUpper(List<String> inputList) {\n        List<String> synchronizedList = Collections.synchronizedList(inputList);\n        return synchronizedList.stream()\n                .map(String::toUpperCase)\n                .collect(Collectors.toList());\n    }\n    public static void main(String[] args) {\n        List<String> testList = Collections.synchronizedList(List.of(\"java\", \"python\", \"c++\"));\n        List<String> resultList = convertListToUpper(testList);\n        System.out.println(resultList); \n    }\n}", "content": "请设计一个Java方法，该方法能够接收一个字符串列表，并将列表中的每个字符串转换为大写形式。请确保你的方法是线程安全的，并且能够处理可能出现的任何异常。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class StringListToUpper {\n    public static List<String> convertListToUpper(List<String> inputList) {\n    }\n}\n```", "id": 1654, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class StringListToUpperTest {\n    @Test\n    public void testConvertListToUpper_withMixedCase() {\n        List<String> inputList = Collections.synchronizedList(List.of(\"java\", \"Python\", \"c++\"));\n        List<String> expectedList = List.of(\"JAVA\", \"PYTHON\", \"C++\");\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withAllLowerCase() {\n        List<String> inputList = Collections.synchronizedList(List.of(\"java\", \"python\", \"c++\"));\n        List<String> expectedList = List.of(\"JAVA\", \"PYTHON\", \"C++\");\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withAllUpperCase() {\n        List<String> inputList = Collections.synchronizedList(List.of(\"JAVA\", \"PYTHON\", \"C++\"));\n        List<String> expectedList = List.of(\"JAVA\", \"PYTHON\", \"C++\");\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withEmptyList() {\n        List<String> inputList = Collections.synchronizedList(List.of());\n        List<String> expectedList = List.of();\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withNullInput() {\n        List<String> inputList = null;\n        try {\n            StringListToUpper.convertListToUpper(inputList);\n        } catch (NullPointerException ex) {\n            assertEquals(NullPointerException.class, ex.getClass());\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class CityManager {\n    private List<String> cityList;\n    public CityManager() {\n        cityList = new ArrayList<>();\n    }\n    public boolean removeCity(String city) {\n        return cityList.remove(city);\n    }\n    public void addCity(String city) {\n        cityList.add(city);\n    }\n    public static void checkFunctionality() {\n        CityManager manager = new CityManager();\n        manager.addCity(\"北京\");\n        manager.addCity(\"上海\");\n        manager.addCity(\"广州\");\n        boolean result1 = manager.removeCity(\"上海\");\n        boolean result2 = manager.removeCity(\"深圳\");\n        System.out.println(\"移除上海: \" + (result1 ? \"成功\" : \"失败\")); \n        System.out.println(\"尝试移除不存在的城市深圳: \" + (result2 ? \"成功\" : \"失败\")); \n    }\n    public static void main(String[] args) {\n        checkFunctionality();\n    }\n}", "content": "请编写一个Java程序，实现一个名为`CityManager`的类，该类中包含一个方法`removeCity`。该方法的作用是从一个包含城市名称的列表中移除指定的城市。如果该城市存在于列表中，则移除该城市并返回`true`；如果不存在，则不做任何操作并返回`false`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class CityManager {\n    private List<String> cityList;\n    public CityManager() {\n    }\n    public boolean removeCity(String city) {\n    }\n    public void addCity(String city) {\n    }\n}\n```", "id": 1655, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CityManagerTest {\n    private CityManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new CityManager();\n    }\n    @Test\n    public void testAddCity() {\n        manager.addCity(\"北京\");\n        assertTrue(manager.removeCity(\"北京\"));\n    }\n    @Test\n    public void testRemoveCity_existingCity() {\n        manager.addCity(\"上海\");\n        assertTrue(manager.removeCity(\"上海\"));\n    }\n    @Test\n    public void testRemoveCity_nonExistingCity() {\n        manager.addCity(\"广州\");\n        assertFalse(manager.removeCity(\"深圳\"));\n    }\n    @Test\n    public void testAddAndRemoveMultipleCities() {\n        manager.addCity(\"北京\");\n        manager.addCity(\"上海\");\n        assertTrue(manager.removeCity(\"北京\"));\n        assertTrue(manager.removeCity(\"上海\"));\n    }\n    @Test\n    public void testRemoveCityFromEmptyList() {\n        assertFalse(manager.removeCity(\"北京\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nclass Village {\n    private List<Building> buildings = new ArrayList<>();\n    public Village() {\n        buildings.add(new Building(\"铁匠铺\"));\n        buildings.add(new Building(\"农场\"));\n        buildings.add(new Building(\"图书馆\"));\n    }\n    public List<Building> getBuildings() {\n        return buildings;\n    }\n    public void allocateVillager(Villager villager, Building building) {\n        System.out.println(villager.getName() + \"已分配到\" + building.getName());\n    }\n}\nclass Building {\n    private String name;\n    public Building(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\nclass Villager {\n    private String name;\n    public Villager(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\npublic class VillageAssignment {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Village village = new Village();\n        Villager villager = new Villager(\"Tom\");\n        allocateVillagerToBuilding(scanner, village, villager);\n        scanner.close();\n    }\n    private static void allocateVillagerToBuilding(Scanner scanner, Village village, Villager villager) {\n        System.out.println(\"请为村民 \" + villager.getName() + \" 分配一个建筑物：\");\n        int index = 1;\n        for (Building building : village.getBuildings()) {\n            System.out.println(index + \". \" + building.getName());\n            index++;\n        }\n        int choice;\n        do {\n            System.out.print(\"请输入建筑物编号：\");\n            while (!scanner.hasNextInt()) {\n                System.out.println(\"输入无效，请输入有效的建筑物编号：\");\n                scanner.next(); \n            }\n            choice = scanner.nextInt();\n        } while (choice < 1 || choice > village.getBuildings().size());\n        Building selectedBuilding = village.getBuildings().get(choice - 1);\n        village.allocateVillager(villager, selectedBuilding);\n    }\n}", "content": "请编写一个Java程序，实现一个村民分配到村庄中的建筑物的功能。程序应该允许用户从可用的建筑物列表中选择一个建筑物，并将一个村民分配到该建筑物中。以下是程序的基本要求：\n\n- 程序应该有一个`Village`类，其中包含一个建筑物列表和一个分配村民到建筑物的方法。\n- 程序应该有一个`Building`类，其中包含建筑物的名称。\n- 程序应该有一个`Villager`类，其中包含村民的名称。\n- 用户应该能够通过建筑物旁边的编号来选择一个建筑物。\n- 如果用户输入了一个无效的编号，程序应该要求用户重新输入。\n- 分配成功后，程序应该显示一条消息确认村民已被分配到选定的建筑物。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass Village {\n    private List<Building> buildings = new ArrayList<>();\n    public Village() {\n    }\n    public List<Building> getBuildings() {\n        return buildings;\n    }\n    public void allocateVillager(Villager villager, Building building) {\n    }\n}\nclass Building {\n    private String name;\n    public Building(String name) {\n    }\n    public String getName() {\n        return name;\n    }\n}\nclass Villager {\n    private String name;\n    public Villager(String name) {\n    }\n    public String getName() {\n        return name;\n    }\n}\n```", "id": 1656, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nclass VillageTest {\n    private Village village;\n    @BeforeEach\n    void setUp() {\n        village = new Village();\n    }\n    @Test\n    void testInitialBuildings() {\n        List<Building> buildings = village.getBuildings();\n        assertEquals(3, buildings.size());\n        assertEquals(\"铁匠铺\", buildings.get(0).getName());\n        assertEquals(\"农场\", buildings.get(1).getName());\n        assertEquals(\"图书馆\", buildings.get(2).getName());\n    }\n    @Test\n    void testGetBuildings() {\n        List<Building> buildings = village.getBuildings();\n        assertNotNull(buildings);\n    }\n    @Test\n    void testAllocateVillager() {\n        Villager villager = new Villager(\"Tom\");\n        Building building = new Building(\"铁匠铺\");\n        village.allocateVillager(villager, building);\n    }\n}\nclass BuildingTest {\n    @Test\n    void testBuildingName() {\n        Building building = new Building(\"酒馆\");\n        assertEquals(\"酒馆\", building.getName());\n    }\n}\nclass VillagerTest {\n    @Test\n    void testVillagerName() {\n        Villager villager = new Villager(\"Jerry\");\n        assertEquals(\"Jerry\", villager.getName());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class ByteArrayToIntArrayConverter {\n    public static int[] convertByteArrayToIntArray(byte[] bytes) {\n        if (bytes == null || bytes.length % 4 != 0) {\n            throw new IllegalArgumentException(\"字节数组长度必须是4的倍数\");\n        }\n        int[] result = new int[bytes.length / 4];\n        for (int i = 0; i < result.length; i++) {\n            int offset = i * 4;\n            result[i] = ((bytes[offset] & 0xFF) << 24) |\n                        ((bytes[offset + 1] & 0xFF) << 16) |\n                        ((bytes[offset + 2] & 0xFF) << 8) |\n                        (bytes[offset + 3] & 0xFF);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n        byte[] bytes = {0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3};\n        int[] expected = {1, 2, 3};\n        int[] result = convertByteArrayToIntArray(bytes);\n        if (Arrays.equals(expected, result)) {\n            System.out.println(\"转换正确：\" + Arrays.toString(result));\n        } else {\n            System.out.println(\"转换错误，期望的结果是：\" + Arrays.toString(expected) + \"，但实际结果是：\" + Arrays.toString(result));\n        }\n    }\n}", "content": "请编写一个Java方法，该方法能够将一个字节数组转换成一个整型数组。字节数组中的每四个字节应该被转换为一个整型（int），其中第一个字节是整型的最高有效字节，第四个字节是最低有效字节。请确保你的方法能够处理任意长度的字节数组，但是假设字节数组的长度总是4的倍数。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\npublic class ByteArrayToIntArrayConverter {\n    public static int[] convertByteArrayToIntArray(byte[] bytes) {\n    }\n}\n```", "id": 1657, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.util.Arrays;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class ByteArrayToIntArrayConverterTest {\n    @Test\n    public void testConvertByteArrayToIntArray_ValidInput() {\n        byte[] bytes = {0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3};\n        int[] expected = {1, 2, 3};\n        int[] result = ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        assertArrayEquals(expected, result);\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_EmptyInput() {\n        byte[] bytes = {};\n        int[] expected = {};\n        int[] result = ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        assertArrayEquals(expected, result);\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_InvalidLength() {\n        byte[] bytes = {0, 0, 0, 1, 0, 0};\n        assertThrows(IllegalArgumentException.class, () -> {\n            ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        });\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_NullInput() {\n        byte[] bytes = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        });\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_AllZeroes() {\n        byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 0};\n        int[] expected = {0, 0};\n        int[] result = ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        assertArrayEquals(expected, result);\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\nimport javax.swing.JButton;\nimport javax.swing.JColorChooser;\nimport javax.swing.JComboBox;\npublic class TextStyleUpdater {\n    private JButton btnBold = new JButton(\"加粗\");\n    private JButton btnItalic = new JButton(\"斜体\");\n    private JButton btnUnderline = new JButton(\"下划线\");\n    private JButton btnStrikethrough = new JButton(\"删除线\");\n    private JColorChooser colorChooser = new JColorChooser();\n    private JComboBox<String> fontSelector = new JComboBox<>();\n    private JComboBox<Integer> fontSizeSelector = new JComboBox<>();\n    private TextProperties textProperties = new TextProperties(); \n    public void refreshTextStyle() {\n        btnBold.setSelected(textProperties.isBold());\n        btnItalic.setSelected(textProperties.isItalic());\n        btnUnderline.setSelected(textProperties.isUnderlined());\n        btnStrikethrough.setSelected(textProperties.isStrikethrough());\n        colorChooser.setVisible(false);\n        fontSelector.setVisible(false);\n        fontSizeSelector.setVisible(false);\n    }\n    public static void main(String[] args) {\n        TextStyleUpdater updater = new TextStyleUpdater();\n        updater.refreshTextStyle();\n    }\n    private class TextProperties {\n        boolean isBold() { return true; } \n        boolean isItalic() { return false; }\n        boolean isUnderlined() { return true; }\n        boolean isStrikethrough() { return false; }\n    }\n}", "content": "假设你正在开发一个文本编辑器的功能，需要编写一个方法来更新编辑器的文本样式状态，包括加粗、斜体、下划线和删除线。你需要根据文本的当前样式，设置对应的按钮状态（即如果文本是加粗的，加粗按钮应该被按下）。同时，你还需要隐藏颜色选择器、字体选择器和字号选择器。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.awt.Color;\nimport javax.swing.JButton;\nimport javax.swing.JColorChooser;\nimport javax.swing.JComboBox;\npublic class TextStyleUpdater {\n    private JButton btnBold = new JButton(\"加粗\");\n    private JButton btnItalic = new JButton(\"斜体\");\n    private JButton btnUnderline = new JButton(\"下划线\");\n    private JButton btnStrikethrough = new JButton(\"删除线\");\n    private JColorChooser colorChooser = new JColorChooser();\n    private JComboBox<String> fontSelector = new JComboBox<>();\n    private JComboBox<Integer> fontSizeSelector = new JComboBox<>();\n    private TextProperties textProperties = new TextProperties(); \n    public void refreshTextStyle() {\n    }\n    private class TextProperties {\n        boolean isBold() { } \n        boolean isItalic() { }\n        boolean isUnderlined() { }\n        boolean isStrikethrough() { }\n    }\n}\n```", "id": 1658, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.awt.Color;\nimport javax.swing.JButton;\nimport javax.swing.JColorChooser;\nimport javax.swing.JComboBox;\npublic class TextStyleUpdaterTest {\n    private TextStyleUpdater textStyleUpdater;\n    private JButton btnBold;\n    private JButton btnItalic;\n    private JButton btnUnderline;\n    private JButton btnStrikethrough;\n    private JColorChooser colorChooser;\n    private JComboBox<String> fontSelector;\n    private JComboBox<Integer> fontSizeSelector;\n    @BeforeEach\n    public void setUp() {\n        textStyleUpdater = new TextStyleUpdater();\n        btnBold = (JButton) getPrivateField(textStyleUpdater, \"btnBold\");\n        btnItalic = (JButton) getPrivateField(textStyleUpdater, \"btnItalic\");\n        btnUnderline = (JButton) getPrivateField(textStyleUpdater, \"btnUnderline\");\n        btnStrikethrough = (JButton) getPrivateField(textStyleUpdater, \"btnStrikethrough\");\n        colorChooser = (JColorChooser) getPrivateField(textStyleUpdater, \"colorChooser\");\n        fontSelector = (JComboBox<String>) getPrivateField(textStyleUpdater, \"fontSelector\");\n        fontSizeSelector = (JComboBox<Integer>) getPrivateField(textStyleUpdater, \"fontSizeSelector\");\n    }\n    @Test\n    public void testRefreshTextStyleBold() {\n        textStyleUpdater.refreshTextStyle();\n        assertTrue(btnBold.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleItalic() {\n        textStyleUpdater.refreshTextStyle();\n        assertFalse(btnItalic.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleUnderline() {\n        textStyleUpdater.refreshTextStyle();\n        assertTrue(btnUnderline.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleStrikethrough() {\n        textStyleUpdater.refreshTextStyle();\n        assertFalse(btnStrikethrough.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleComponentsVisibility() {\n        textStyleUpdater.refreshTextStyle();\n        assertFalse(colorChooser.isVisible());\n        assertFalse(fontSelector.isVisible());\n        assertFalse(fontSizeSelector.isVisible());\n    }\n    private Object getPrivateField(Object object, String fieldName) {\n        try {\n            java.lang.reflect.Field field = object.getClass().getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field.get(object);\n        } catch (Exception e) {\n            fail(\"Failed to get private field \" + fieldName);\n            return null;\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class User {\n    private String username;\n    public void setUsername(String name) {\n        this.username = name;\n    }\n    public String getUsername() {\n        return this.username;\n    }\n    public static void checkUsername(List<String> names) {\n        User user = new User();\n        for (String name : names) {\n            user.setUsername(name);\n            System.out.println(\"当前用户名设置为: \" + user.getUsername());\n        }\n    }\n    public static void main(String[] args) {\n        List<String> testNames = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n        checkUsername(testNames);\n    }\n}", "content": "请编写一个Java程序，实现一个简单的用户类，该类中包含一个私有字符串字段`username`，并提供一个方法`setUsername`来更新这个字段的值。此外，还需要编写一个`checkUsername`方法来验证`setUsername`方法是否正确工作。给定几个用户名，`checkUsername`方法应该能够显示每次更新后`username`字段的值。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class User {\n    private String username;\n    public void setUsername(String name) {\n    }\n    public String getUsername() {\n        return null;\n    }\n    public static void checkUsername(List<String> names) {\n    }\n}\n```", "id": 1659, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.List;\npublic class UserTest {\n    @Test\n    public void testSetUsername() {\n        User user = new User();\n        user.setUsername(\"Alice\");\n        Assertions.assertEquals(\"Alice\", user.getUsername());\n    }\n    @Test\n    public void testGetUsername() {\n        User user = new User();\n        user.setUsername(\"Bob\");\n        String username = user.getUsername();\n        Assertions.assertEquals(\"Bob\", username);\n    }\n    @Test\n    public void testCheckUsernameMultipleNames() {\n        List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n        User.checkUsername(names);\n    }\n    @Test\n    public void testNullUsername() {\n        User user = new User();\n        user.setUsername(null);\n        Assertions.assertNull(user.getUsername());\n    }\n    @Test\n    public void testEmptyUsername() {\n        User user = new User();\n        user.setUsername(\"\");\n        Assertions.assertEquals(\"\", user.getUsername());\n    }\n}"}}
{"canonical_solution": "import java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\npublic class ByteReader {\n    public static int readTwoBytesAsInt(byte[] data, int index) {\n        if (index < 0 || index + 1 >= data.length) {\n            return -1;\n        }\n        ByteBuffer bb = ByteBuffer.allocate(2);\n        bb.order(ByteOrder.BIG_ENDIAN);\n        bb.put(data[index]);\n        bb.put(data[index + 1]);\n        return bb.getShort(0) & 0xFFFF;\n    }\n    public static void main(String[] args) {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        System.out.println(readTwoBytesAsInt(exampleData, 1)); \n        System.out.println(readTwoBytesAsInt(exampleData, -1)); \n        System.out.println(readTwoBytesAsInt(exampleData, 4)); \n    }\n}", "content": "请编写一个Java方法，该方法用于从给定的字节数组中，根据指定的索引位置，读取两个字节并将其作为一个`int`类型的值返回。这两个字节应该按照大端字节序（Big-Endian）合并。例如，如果在索引位置`i`的字节是`0x01`，而在位置`i+1`的字节是`0x02`，则返回的`int`值应该是`0x0102`。请确保你的代码能够处理可能的索引越界异常，并在这种情况下返回`-1`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\npublic class ByteReader {\n    public static int readTwoBytesAsInt(byte[] data, int index) {\n    }\n}\n```", "id": 1660, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\npublic class ByteReaderTest {\n    @Test\n    public void testReadTwoBytesAsInt_ValidIndex() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 1);\n        assertEquals(258, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_NegativeIndex() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, -1);\n        assertEquals(-1, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_IndexOutOfBounds() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 4);\n        assertEquals(-1, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_ExactEndIndex() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 3);\n        assertEquals(772, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_EmptyArray() {\n        byte[] exampleData = {};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 0);\n        assertEquals(-1, result); \n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.net.URL;\npublic class ResourceFinder {\n    public static String findResourcePath(String fileName) {\n        URL resourceUrl = Thread.currentThread().getContextClassLoader().getResource(fileName);\n        if (resourceUrl == null) {\n            throw new RuntimeException(\"请将文件放置在项目的适当文件夹中！\");\n        }\n        File file = new File(resourceUrl.getPath());\n        if (file.exists()) {\n            return file.getAbsolutePath();\n        } else {\n            throw new RuntimeException(\"请将文件放置在项目的适当文件夹中！\");\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            String filePath = findResourcePath(\"test.txt\");\n            System.out.println(\"文件路径: \" + filePath);\n        } catch (RuntimeException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法接收一个文件名作为参数，然后尝试在项目的资源文件夹中找到这个文件。如果文件存在，方法应返回该文件的绝对路径。如果文件不存在，应抛出一个异常，提示用户将文件放置在项目的适当文件夹中。请确保你的代码能够处理资源文件的查找，并且能够在多种环境下正常工作，包括在打包后的JAR文件中。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.File;\nimport java.net.URL;\npublic class ResourceFinder {\n    public static String findResourcePath(String fileName) {\n    }\n}\n```", "id": 1661, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.io.File;\nimport java.net.URL;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ResourceFinderTest {\n    @Test\n    public void testFindResourcePathFileExists() {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        URL url = classLoader.getResource(\"test.txt\");\n        if (url != null) {\n            String path = ResourceFinder.findResourcePath(\"test.txt\");\n            assertNotNull(path);\n        }\n    }\n    @Test\n    public void testFindResourcePathFileDoesNotExist() {\n        assertThrows(RuntimeException.class, () -> {\n            ResourceFinder.findResourcePath(\"nonexistentfile.txt\");\n        });\n    }\n    @Test\n    public void testFindResourcePathFileInDifferentLocation() {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        URL url = classLoader.getResource(\"anotherdir/test.txt\");\n        if (url != null) {\n            String path = ResourceFinder.findResourcePath(\"anotherdir/test.txt\");\n            assertNotNull(path);\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass Tour {\n    private String title;\n    private double price;\n    private String description;\n    public Tour(String title, double price, String description) {\n        this.title = title;\n        this.price = price;\n        this.description = description;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public double getPrice() {\n        return price;\n    }\n    public String getDescription() {\n        return description;\n    }\n}\nclass PresetReplies {\n    private Map<String, String> replies;\n    public PresetReplies() {\n        replies = new HashMap<>();\n        replies.put(\"greeting\", \"您好，有什么可以帮助您的？\");\n        replies.put(\"farewell\", \"感谢您的咨询，祝您有美好的一天！\");\n    }\n    public String getReply(String query) {\n        return replies.getOrDefault(query, \"对不起，我不明白您的问题。\");\n    }\n}\npublic class TourInfoResponder {\n    private PresetReplies presetReplies;\n    public TourInfoResponder() {\n        presetReplies = new PresetReplies();\n    }\n    public void respondToQuery(String query, Tour tour) {\n        switch (query) {\n            case \"query_price\":\n                System.out.println(\"该旅游项目的价格是：\" + tour.getPrice());\n                break;\n            case \"query_description\":\n                System.out.println(\"关于该旅游项目的描述：\" + tour.getDescription());\n                break;\n            default:\n                System.out.println(presetReplies.getReply(query));\n                break;\n        }\n    }\n    public static void main(String[] args) {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        responder.respondToQuery(\"query_price\", tour);\n        responder.respondToQuery(\"query_description\", tour);\n        responder.respondToQuery(\"greeting\", tour);\n    }\n}", "content": "请设计一个简单的Java程序，用于处理用户对于旅游信息的查询。用户可以通过发送特定的消息来查询旅游项目的价格或描述。程序应该能够根据用户的消息回复相应的信息。如果用户发送的消息不是关于价格或描述的查询，程序应该从预设的数据中查找并回复相应的信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass Tour {\n    private String title;\n    private double price;\n    private String description;\n    public Tour(String title, double price, String description) {\n    }\n    public String getTitle() {\n    }\n    public double getPrice() {\n    }\n    public String getDescription() {\n    }\n}\nclass PresetReplies {\n    private Map<String, String> replies;\n    public PresetReplies() {\n    }\n    public String getReply(String query) {\n    }\n}\npublic class TourInfoResponder {\n    private PresetReplies presetReplies;\n    public TourInfoResponder() {\n    }\n    public void respondToQuery(String query, Tour tour) {\n    }\n}\n```", "id": 1662, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nclass TourTest {\n    @Test\n    void testGetTitle() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        assertEquals(\"黄金海岸\", tour.getTitle());\n    }\n    @Test\n    void testGetPrice() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        assertEquals(2999.99, tour.getPrice());\n    }\n    @Test\n    void testGetDescription() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        assertEquals(\"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\", tour.getDescription());\n    }\n}\nclass PresetRepliesTest {\n    @Test\n    void testGetReply() {\n        PresetReplies replies = new PresetReplies();\n        assertEquals(\"您好，有什么可以帮助您的？\", replies.getReply(\"greeting\"));\n        assertEquals(\"感谢您的咨询，祝您有美好的一天！\", replies.getReply(\"farewell\"));\n        assertEquals(\"对不起，我不明白您的问题。\", replies.getReply(\"unknown_query\"));\n    }\n}\nclass TourInfoResponderTest {\n    @Test\n    void testRespondToQuery_Price() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        System.setOut(new java.io.PrintStream(new java.io.ByteArrayOutputStream()));\n        responder.respondToQuery(\"query_price\", tour);\n    }\n    @Test\n    void testRespondToQuery_Description() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        System.setOut(new java.io.PrintStream(new java.io.ByteArrayOutputStream()));\n        responder.respondToQuery(\"query_description\", tour);\n    }\n    @Test\n    void testRespondToQuery_Greeting() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        System.setOut(new java.io.PrintStream(new java.io.ByteArrayOutputStream()));\n        responder.respondToQuery(\"greeting\", tour);\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n    public int subtract(int a, int b) {\n        return a - b;\n    }\n    public static void main(String[] args) {\n        check();\n    }\n    public static void check() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        if (calculator.add(10, 5) == 15 && calculator.subtract(10, 5) == 5) {\n            System.out.println(\"测试数据点1通过\");\n        } else {\n            System.out.println(\"测试数据点1失败\");\n        }\n        if (calculator.add(-3, 7) == 4 && calculator.subtract(-3, 7) == -10) {\n            System.out.println(\"测试数据点2通过\");\n        } else {\n            System.out.println(\"测试数据点2失败\");\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个计算器需要能够进行基本的加法和减法运算。具体要求如下：\n\n- 类名应该是`SimpleCalculator`。\n- 需要有两个方法：`add`和`subtract`，分别用于加法和减法运算。\n- 每个方法接收两个整数参数，返回它们的加法或减法结果。 \n\n此外，编写一个`check`函数来验证`SimpleCalculator`的正确性。`check`函数应该测试至少两个数据点，验证加法和减法是否按预期工作。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.System;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n    }\n    public int subtract(int a, int b) {\n    }\n}\n```", "id": 1663, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddPositiveNumbers() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(15, calculator.add(10, 5));\n    }\n    @Test\n    public void testAddNegativeAndPositiveNumber() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(4, calculator.add(-3, 7));\n    }\n    @Test\n    public void testSubtractPositiveNumbers() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(5, calculator.subtract(10, 5));\n    }\n    @Test\n    public void testSubtractNegativeAndPositiveNumber() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(-10, calculator.subtract(-3, 7));\n    }\n    @Test\n    public void testAddWithZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(5, calculator.add(5, 0));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookSystemAccess {\n    private Map<String, Boolean> userStatus;\n    public BookSystemAccess() {\n        userStatus = new HashMap<>();\n        userStatus.put(\"user1\", true); \n        userStatus.put(\"user2\", false); \n    }\n    public boolean checkUserLogin(String userName) {\n        return userStatus.getOrDefault(userName, false);\n    }\n    public static void main(String[] args) {\n        BookSystemAccess access = new BookSystemAccess();\n        System.out.println(\"Checking if user1 is logged in: \" + access.checkUserLogin(\"user1\")); \n        System.out.println(\"Checking if user2 is logged in: \" + access.checkUserLogin(\"user2\")); \n        System.out.println(\"Checking if user3 is logged in: \" + access.checkUserLogin(\"user3\")); \n    }\n}", "content": "假设你正在开发一个图书管理系统，需要实现一个功能来检查用户是否已经登录。如果用户已经登录，则可以继续访问系统的主界面；如果用户未登录，则不能访问。请根据这个需求，描述一个Java方法来实现这个功能的逻辑。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookSystemAccess {\n    private Map<String, Boolean> userStatus;\n    public BookSystemAccess() {\n    }\n    public boolean checkUserLogin(String userName) {\n    }\n}\n```", "id": 1664, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Test;\npublic class BookSystemAccessTest {\n    @Test\n    public void testUser1LoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertTrue(access.checkUserLogin(\"user1\"));\n    }\n    @Test\n    public void testUser2LoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(\"user2\"));\n    }\n    @Test\n    public void testUnknownUserLoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(\"user3\"));\n    }\n    @Test\n    public void testEmptyUserNameLoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(\"\"));\n    }\n    @Test\n    public void testNullUserNameLoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(null));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass User {\n    private String username;\n    private String password;\n    private boolean loggedIn;\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n        this.loggedIn = false;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public String getPassword() {\n        return password;\n    }\n    public void setLoggedIn(boolean loggedIn) {\n        this.loggedIn = loggedIn;\n    }\n}\nclass UserDatabase {\n    private Map<String, User> users = new HashMap<>();\n    public UserDatabase() {\n        users.put(\"alice\", new User(\"alice\", \"alice123\"));\n        users.put(\"bob\", new User(\"bob\", \"bob123\"));\n    }\n    public User findUserByName(String username) {\n        return users.get(username);\n    }\n    public void updateUserStatus(User user) {\n    }\n}\npublic class AuthenticationSystem {\n    private UserDatabase userDatabase = new UserDatabase();\n    public boolean authenticateUser(String username, String password) {\n        User user = userDatabase.findUserByName(username);\n        if (user != null && user.getPassword().equals(password)) {\n            user.setLoggedIn(true);\n            userDatabase.updateUserStatus(user);\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n        AuthenticationSystem authSystem = new AuthenticationSystem();\n        boolean loginResult1 = authSystem.authenticateUser(\"alice\", \"alice123\"); \n        boolean loginResult2 = authSystem.authenticateUser(\"bob\", \"wrongpassword\"); \n        boolean loginResult3 = authSystem.authenticateUser(\"charlie\", \"charlie123\"); \n        System.out.println(\"Login result 1: \" + loginResult1);\n        System.out.println(\"Login result 2: \" + loginResult2);\n        System.out.println(\"Login result 3: \" + loginResult3);\n    }\n}", "content": "请编写一个Java方法，该方法用于处理用户登录流程。该方法应接收两个字符串参数，分别代表用户名和密码。如果用户名存在且密码正确，则将用户的登录状态设置为已登录，并将更新后的用户信息保存到数据库中。如果登录失败，则返回false。\n\n请按照以下要求实现该方法：\n- 方法名为`authenticateUser`。\n- 使用一个名为`UserDatabase`的类来模拟数据库操作，该类应包含`findUserByName`和`updateUserStatus`两个方法。\n- `findUserByName`方法根据用户名查找用户，如果找到则返回一个`User`对象，否则返回null。\n- `updateUserStatus`方法用于更新用户的登录状态，并保存到数据库。\n- `User`类应包含`getUsername`、`getPassword`和`setLoggedIn`三个方法。\n- 如果用户登录成功，返回true；否则返回false。\n\n请确保代码片段完全自包含，并且包含所有必要的导入语句。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass User {\n    private String username;\n    private String password;\n    private boolean loggedIn;\n    public User(String username, String password) {\n    }\n    public String getUsername() {\n    }\n    public String getPassword() {\n    }\n    public void setLoggedIn(boolean loggedIn) {\n    }\n}\nclass UserDatabase {\n    private Map<String, User> users = new HashMap<>();\n    public UserDatabase() {\n    }\n    public User findUserByName(String username) {\n    }\n    public void updateUserStatus(User user) {\n    }\n}\npublic class AuthenticationSystem {\n    private UserDatabase userDatabase = new UserDatabase();\n    public boolean authenticateUser(String username, String password) {\n    }\n}\n```", "id": 1665, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nclass AuthenticationSystemTest {\n    private AuthenticationSystem authSystem;\n    @Before\n    public void setUp() {\n        authSystem = new AuthenticationSystem();\n    }\n    @Test\n    public void testAuthenticateUserWithValidCredentialsForAlice() {\n        boolean loginResult = authSystem.authenticateUser(\"alice\", \"alice123\");\n        Assert.assertTrue(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithInvalidPasswordForBob() {\n        boolean loginResult = authSystem.authenticateUser(\"bob\", \"wrongpassword\");\n        Assert.assertFalse(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithNonExistentUser() {\n        boolean loginResult = authSystem.authenticateUser(\"charlie\", \"charlie123\");\n        Assert.assertFalse(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithValidCredentialsForBob() {\n        boolean loginResult = authSystem.authenticateUser(\"bob\", \"bob123\");\n        Assert.assertTrue(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithInvalidPasswordForAlice() {\n        boolean loginResult = authSystem.authenticateUser(\"alice\", \"wrongpassword\");\n        Assert.assertFalse(loginResult);\n    }\n}"}}
{"canonical_solution": "import java.lang.String;\npublic class StudentManager {\n    private String studentId = \"12345\"; \n    public String getStudentId() {\n        return studentId;\n    }\n    public static void main(String[] args) {\n        StudentManager manager = new StudentManager();\n        checkFunction(manager.getStudentId());\n    }\n    public static void checkFunction(String id) {\n        if (\"12345\".equals(id)) {\n            System.out.println(\"验证成功，学生ID正确。\");\n        } else {\n            System.out.println(\"验证失败，学生ID不正确。\");\n        }\n    }\n}", "content": "请编写一个Java程序，实现一个名为`StudentManager`的类，该类中包含一个方法`getStudentId`。该方法的作用是返回一个私有成员变量`studentId`的值。请确保你的代码完整、清晰，并且遵循Java的编程规范。此外，你需要编写一个`checkFunction`方法来验证`getStudentId`方法的正确性。给定的学生ID为\"12345\"，请确保你的验证方法能够正确检验这一点。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.String;\npublic class StudentManager {\n    private String studentId = \"12345\"; \n    public String getStudentId() {\n    }\n    public static void checkFunction(String id) {\n    }\n}\n```", "id": 1666, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class StudentManagerTest {\n    @Test\n    public void testGetStudentId() {\n        StudentManager manager = new StudentManager();\n        assertEquals(\"12345\", manager.getStudentId());\n    }\n    @Test\n    public void testCheckFunctionSuccess() {\n        assertEquals(\"验证成功，学生ID正确。\", captureOutput(() -> StudentManager.checkFunction(\"12345\")));\n    }\n    @Test\n    public void testCheckFunctionFailure() {\n        assertEquals(\"验证失败，学生ID不正确。\", captureOutput(() -> StudentManager.checkFunction(\"54321\")));\n    }\n    @Test\n    public void testMainFunction() {\n        StudentManager.main(new String[]{}); \n    }\n    private String captureOutput(Runnable runnable) {\n        java.io.ByteArrayOutputStream outContent = new java.io.ByteArrayOutputStream();\n        java.io.PrintStream originalOut = System.out;\n        System.setOut(new java.io.PrintStream(outContent));\n        runnable.run();\n        System.setOut(originalOut);\n        return outContent.toString().trim();\n    }\n}"}}
{"canonical_solution": "import java.util.Locale;\npublic class TicketMachine {\n    private int totalIncome;\n    private int currentBalance;\n    private int ticketPrice;\n    public TicketMachine(int ticketPrice) {\n        this.ticketPrice = ticketPrice;\n        this.totalIncome = 0;\n        this.currentBalance = 0;\n    }\n    public void setTicketPrice(int price) {\n        this.ticketPrice = price;\n    }\n    public void addBalance(int amount) {\n        this.currentBalance += amount;\n    }\n    public void printTicket() {\n        if (currentBalance >= ticketPrice) {\n            System.out.println(\"##################\");\n            System.out.println(\"# 自动售票机\");\n            System.out.println(\"# 车票\");\n            System.out.println(\"# \" + ticketPrice + \" 分\");\n            System.out.println(\"##################\");\n            System.out.println();\n            totalIncome += ticketPrice;\n            currentBalance -= ticketPrice;\n        } else {\n            System.out.println(\"余额不足，请增加余额。\");\n        }\n    }\n    public int getTotalIncome() {\n        return totalIncome;\n    }\n    public static void checkFunction() {\n        TicketMachine machine = new TicketMachine(50);\n        machine.addBalance(50);\n        machine.printTicket();\n        machine.addBalance(100);\n        machine.printTicket();\n        if (machine.getTotalIncome() == 100) {\n            System.out.println(\"测试通过！\");\n        } else {\n            System.out.println(\"测试失败！\");\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个程序，模拟自动售票机的工作流程。自动售票机应该能够打印出车票，并更新售票机内部的收入统计。车票的价格应该是动态可设置的。此外，每次打印车票后，售票机的余额应该清零，以准备接收下一个顾客的付款。请确保你的程序能够清晰地展示这一过程。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Locale;\npublic class TicketMachine {\n    private int totalIncome;\n    private int currentBalance;\n    private int ticketPrice;\n    public TicketMachine(int ticketPrice) {}\n    public void setTicketPrice(int price) {}\n    public void addBalance(int amount) {}\n    public void printTicket() {}\n    public int getTotalIncome() {}\n}\n```", "id": 1667, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class TicketMachineTest {\n    private TicketMachine ticketMachine;\n    @BeforeEach\n    public void setUp() {\n        ticketMachine = new TicketMachine(50);\n    }\n    @Test\n    public void testSetTicketPrice() {\n        ticketMachine.setTicketPrice(100);\n        ticketMachine.addBalance(100);\n        ticketMachine.printTicket();\n        assertEquals(100, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testAddBalance() {\n        ticketMachine.addBalance(30);\n        ticketMachine.addBalance(20);\n        ticketMachine.printTicket();\n        assertEquals(50, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testPrintTicketInsufficientBalance() {\n        ticketMachine.addBalance(20);\n        ticketMachine.printTicket();\n        assertEquals(0, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testPrintTicketWithSufficientBalanceTwice() {\n        ticketMachine.addBalance(100);\n        ticketMachine.printTicket();\n        ticketMachine.printTicket();\n        assertEquals(100, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testGetTotalIncome() {\n        ticketMachine.addBalance(150);\n        ticketMachine.printTicket();\n        ticketMachine.printTicket();\n        assertEquals(100, ticketMachine.getTotalIncome());\n    }\n}"}}
{"canonical_solution": "import java.io.File;\npublic class FilePathUtil {\n    public static String getSystemFilePath() {\n        String osName = System.getProperty(\"os.name\").toLowerCase();\n        if (osName.contains(\"win\")) {\n            return System.getenv(\"TEMP\");\n        } else {\n            return System.getProperty(\"user.home\");\n        }\n    }\n    public static void checkFunction() {\n        String path = getSystemFilePath();\n        System.out.println(\"获取的路径为: \" + path);\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java方法，用于获取当前系统的临时文件存储路径。如果当前系统是Windows，则返回系统的临时文件夹路径；如果是其他操作系统，则返回用户的主目录路径。请确保你的代码能够自动检测操作系统类型，并根据不同的操作系统返回正确的路径。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.File;\npublic class FilePathUtil {\n    public static String getSystemFilePath() {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1668, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class FilePathUtilTest {\n    @Test\n    public void testGetSystemFilePathOnWindows() {\n        System.setProperty(\"os.name\", \"Windows 10\");\n        String tempDir = System.getenv(\"TEMP\");\n        assertEquals(tempDir, FilePathUtil.getSystemFilePath());\n    }\n    @Test\n    public void testGetSystemFilePathOnLinux() {\n        System.setProperty(\"os.name\", \"Linux\");\n        String homeDir = System.getProperty(\"user.home\");\n        assertEquals(homeDir, FilePathUtil.getSystemFilePath());\n    }\n    @Test\n    public void testGetSystemFilePathOnMac() {\n        System.setProperty(\"os.name\", \"Mac OS X\");\n        String homeDir = System.getProperty(\"user.home\");\n        assertEquals(homeDir, FilePathUtil.getSystemFilePath());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Student {\n    private String name;\n    public Student(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\nclass NameVerifier {\n    public static void verifyStudentName(Student student, String expectedName) {\n        if (student == null) {\n            throw new IllegalArgumentException(\"学生对象不能为null\");\n        }\n        String actualName = student.getName();\n        String errorMessage = String.format(\"\\n期望的学生姓名为:\\n  <%s>\\n但实际上是:\\n  <%s>\", expectedName, actualName);\n        if (!Objects.equals(actualName, expectedName)) {\n            throw new IllegalArgumentException(errorMessage);\n        }\n    }\n    public static void main(String[] args) {\n        Student student = new Student(\"张三\");\n        try {\n            verifyStudentName(student, \"李四\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            verifyStudentName(student, \"张三\");\n            System.out.println(\"学生姓名验证通过\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，该方法用于验证一个学生对象的姓名是否与给定的姓名相匹配。如果学生姓名不匹配，应抛出一个自定义异常，其中包含详细的错误信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Objects;\nclass Student {\n    private String name;\n    public Student(String name) {\n    }\n    public String getName() {\n    }\n}\nclass NameVerifier {\n    public static void verifyStudentName(Student student, String expectedName) {\n    }\n}\n```", "id": 1669, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentTest {\n    @Test\n    void testGetName() {\n        Student student = new Student(\"张三\");\n        assertEquals(\"张三\", student.getName());\n    }\n}\nclass NameVerifierTest {\n    @Test\n    void testVerifyStudentNameWithCorrectName() {\n        Student student = new Student(\"张三\");\n        assertDoesNotThrow(() -> NameVerifier.verifyStudentName(student, \"张三\"));\n    }\n    @Test\n    void testVerifyStudentNameWithIncorrectName() {\n        Student student = new Student(\"张三\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(student, \"李四\");\n        });\n        String expectedMessage = \"\\n期望的学生姓名为:\\n  <李四>\\n但实际上是:\\n  <张三>\";\n        assertTrue(exception.getMessage().contains(expectedMessage));\n    }\n    @Test\n    void testVerifyStudentNameWithNullStudent() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(null, \"张三\");\n        });\n        assertEquals(\"学生对象不能为null\", exception.getMessage());\n    }\n    @Test\n    void testVerifyStudentNameWithEmptyExpectedName() {\n        Student student = new Student(\"张三\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(student, \"\");\n        });\n        String expectedMessage = \"\\n期望的学生姓名为:\\n  <>\\n但实际上是:\\n  <张三>\";\n        assertTrue(exception.getMessage().contains(expectedMessage));\n    }\n    @Test\n    void testVerifyStudentNameWithWhitespaceExpectedName() {\n        Student student = new Student(\"张三\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(student, \" \");\n        });\n        String expectedMessage = \"\\n期望的学生姓名为:\\n  < >\\n但实际上是:\\n  <张三>\";\n        assertTrue(exception.getMessage().contains(expectedMessage));\n    }\n}"}}
{"canonical_solution": "import javax.swing.JTextField;\npublic class BookManager {\n    private JTextField bookNameField;\n    private JTextField authorField;\n    private JTextField publisherField;\n    private JTextField yearField;\n    public BookManager(JTextField bookNameField, JTextField authorField, JTextField publisherField, JTextField yearField) {\n        this.bookNameField = bookNameField;\n        this.authorField = authorField;\n        this.publisherField = publisherField;\n        this.yearField = yearField;\n    }\n    public void addNewBook() {\n        bookNameField.setText(\"\");\n        authorField.setText(\"\");\n        publisherField.setText(\"\");\n        yearField.setText(\"\");\n    }\n    public static void main(String[] args) {\n        JTextField bookName = new JTextField();\n        JTextField author = new JTextField();\n        JTextField publisher = new JTextField();\n        JTextField year = new JTextField();\n        BookManager manager = new BookManager(bookName, author, publisher, year);\n        manager.addNewBook(); \n        assert bookName.getText().equals(\"\");\n        assert author.getText().equals(\"\");\n        assert publisher.getText().equals(\"\");\n        assert year.getText().equals(\"\");\n        System.out.println(\"所有输入字段已成功重置，可以添加新书的信息。\");\n    }\n}", "content": "请编写一个Java程序，实现一个简单的图书管理系统中的功能：添加新书。在这个系统中，每当用户想要添加一本新书时，系统需要重置所有的输入字段，以便用户可以输入新书的信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport javax.swing.JTextField;\npublic class BookManager {\n    private JTextField bookNameField;\n    private JTextField authorField;\n    private JTextField publisherField;\n    private JTextField yearField;\n    public BookManager(JTextField bookNameField, JTextField authorField, JTextField publisherField, JTextField yearField) {\n    }\n    public void addNewBook() {\n    }\n}\n```", "id": 1670, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport javax.swing.JTextField;\nimport static org.junit.Assert.assertEquals;\npublic class BookManagerTest {\n    private BookManager manager;\n    private JTextField bookNameField;\n    private JTextField authorField;\n    private JTextField publisherField;\n    private JTextField yearField;\n    @Before\n    public void setUp() {\n        bookNameField = new JTextField();\n        authorField = new JTextField();\n        publisherField = new JTextField();\n        yearField = new JTextField();\n        manager = new BookManager(bookNameField, authorField, publisherField, yearField);\n    }\n    @Test\n    public void testAddNewBookResetsBookNameField() {\n        bookNameField.setText(\"Sample Book\");\n        manager.addNewBook();\n        assertEquals(\"\", bookNameField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsAuthorField() {\n        authorField.setText(\"Sample Author\");\n        manager.addNewBook();\n        assertEquals(\"\", authorField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsPublisherField() {\n        publisherField.setText(\"Sample Publisher\");\n        manager.addNewBook();\n        assertEquals(\"\", publisherField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsYearField() {\n        yearField.setText(\"2022\");\n        manager.addNewBook();\n        assertEquals(\"\", yearField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsAllFields() {\n        bookNameField.setText(\"Sample Book\");\n        authorField.setText(\"Sample Author\");\n        publisherField.setText(\"Sample Publisher\");\n        yearField.setText(\"2022\");\n        manager.addNewBook();\n        assertEquals(\"\", bookNameField.getText());\n        assertEquals(\"\", authorField.getText());\n        assertEquals(\"\", publisherField.getText());\n        assertEquals(\"\", yearField.getText());\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class AgeValidator {\n    public static boolean validateAge(int age) throws IllegalArgumentException {\n        if (age <= 0) {\n            throw new IllegalArgumentException(\"年龄必须大于0。\");\n        }\n        if (age > 120) {\n            throw new IllegalArgumentException(\"年龄不能超过120。\");\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n        try {\n            System.out.println(validateAge(25)); \n            System.out.println(validateAge(0));  \n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            System.out.println(validateAge(130)); \n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请编写一个Java方法，用于验证一个整数是否是一个有效的年龄值。有效的年龄定义为大于0且小于等于120的整数。如果年龄有效，方法应返回`true`，否则返回`false`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class AgeValidator {\n    public static boolean validateAge(int age) throws IllegalArgumentException {\n    }\n}\n```", "id": 1671, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class AgeValidatorTest {\n    @Test\n    public void testValidateAgeValid() {\n        assertDoesNotThrow(() -> {\n            assertTrue(AgeValidator.validateAge(25));\n        });\n    }\n    @Test\n    public void testValidateAgeZero() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AgeValidator.validateAge(0);\n        });\n        assertEquals(\"年龄必须大于0。\", exception.getMessage());\n    }\n    @Test\n    public void testValidateAgeNegative() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AgeValidator.validateAge(-5);\n        });\n        assertEquals(\"年龄必须大于0。\", exception.getMessage());\n    }\n    @Test\n    public void testValidateAgeOver120() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AgeValidator.validateAge(130);\n        });\n        assertEquals(\"年龄不能超过120。\", exception.getMessage());\n    }\n    @Test\n    public void testValidateAgeBoundary() {\n        assertDoesNotThrow(() -> {\n            assertTrue(AgeValidator.validateAge(120));\n        });\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\npublic class ColorConverter {\n    public static String convertToRGBString(int color) {\n        String r = Integer.toHexString((color >> 16) & 0xFF);\n        String g = Integer.toHexString((color >> 8) & 0xFF);\n        String b = Integer.toHexString(color & 0xFF);\n        return String.format(\"r:%s g:%s b:%s\", r, g, b);\n    }\n    public static void main(String[] args) {\n        int color1 = 0xFF0000; \n        int color2 = 0x00FF00; \n        int color3 = 0x0000FF; \n        System.out.println(convertToRGBString(color1)); \n        System.out.println(convertToRGBString(color2)); \n        System.out.println(convertToRGBString(color3)); \n    }\n}", "content": "请编写一个Java方法，用于将一个整数转换为其对应的RGB颜色值，并将这个颜色值以字符串的形式返回。整数值代表颜色，其中颜色值是通过RGB模型定义的，即红色、绿色和蓝色的组合。你需要将每个颜色分量转换为十六进制字符串，并按照\"r:红色值 g:绿色值 b:蓝色值\"的格式返回这个字符串。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.awt.Color;\npublic class ColorConverter {\n    public static String convertToRGBString(int color) {\n    }\n}\n```", "id": 1672, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ColorConverterTest {\n    @Test\n    public void testConvertToRGBString_red() {\n        int color = 0xFF0000;\n        String expected = \"r:ff g:0 b:0\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_green() {\n        int color = 0x00FF00;\n        String expected = \"r:0 g:ff b:0\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_blue() {\n        int color = 0x0000FF;\n        String expected = \"r:0 g:0 b:ff\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_black() {\n        int color = 0x000000;\n        String expected = \"r:0 g:0 b:0\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_white() {\n        int color = 0xFFFFFF;\n        String expected = \"r:ff g:ff b:ff\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.ArrayList;\npublic class 商品信息读取器 {\n    public void 显示商品信息() {\n        String 文件路径 = \"商品信息.txt\";\n        File 文件 = new File(文件路径);\n        ArrayList<String> 商品列表 = new ArrayList<>();\n        try (BufferedReader 读取器 = new BufferedReader(new FileReader(文件))) {\n            String 行;\n            while ((行 = 读取器.readLine()) != null) {\n                商品列表.add(行);\n            }\n            for (String 商品信息 : 商品列表) {\n                String[] 属性 = 商品信息.split(\",\");\n                System.out.println(\"商品名称: \" + 属性[0] + \", 价格: \" + 属性[1] + \"元, 库存数量: \" + 属性[2] + \"件\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"读取文件时发生错误: \" + e.getMessage());\n        }\n    }\n    public static void main(String[] args) {\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n}", "content": "请编写一个Java程序，用于从文本文件中读取商品信息并显示在控制台上。商品信息存储在名为`商品信息.txt`的文件中，每行代表一个商品的信息，商品的属性之间使用逗号`,`分隔。属性包括商品名称、价格和库存数量。请确保你的程序能够正确处理文件读取和数据解析的过程。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.ArrayList;\npublic class 商品信息读取器 {\n    public void 显示商品信息() {\n    }\n}\n```", "id": 1673, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\npublic class 商品信息读取器Test {\n    private final String 文件路径 = \"商品信息.txt\";\n    @Before\n    public void setUp() throws IOException {\n        FileWriter 文件写入器 = new FileWriter(文件路径);\n        文件写入器.write(\"苹果,3,50\\n\");\n        文件写入器.write(\"香蕉,2,30\\n\");\n        文件写入器.write(\"橙子,4,20\\n\");\n        文件写入器.close();\n    }\n    @After\n    public void tearDown() {\n        File 文件 = new File(文件路径);\n        if(文件.exists()) {\n            文件.delete();\n        }\n    }\n    @Test\n    public void test显示商品信息_正常读取() {\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n    @Test\n    public void test显示商品信息_文件不存在() {\n        File 文件 = new File(文件路径);\n        if(文件.exists()) {\n            文件.delete();\n        }\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n    @Test\n    public void test显示商品信息_文件为空() throws IOException {\n        FileWriter 文件写入器 = new FileWriter(文件路径);\n        文件写入器.write(\"\");\n        文件写入器.close();\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass BookNotFoundException extends Exception {\n    public BookNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class BookManager {\n    private Map<String, Boolean> bookStatus = new HashMap<>();\n    public boolean updateBookStatus(String bookId, boolean status) throws BookNotFoundException {\n        if (!bookStatus.containsKey(bookId)) {\n            throw new BookNotFoundException(\"Book ID not found: \" + bookId);\n        }\n        bookStatus.put(bookId, status);\n        return true;\n    }\n    public BookManager() {\n        bookStatus.put(\"B001\", false); \n        bookStatus.put(\"B002\", true);  \n        bookStatus.put(\"B003\", false); \n    }\n    public void checkStatus(String bookId, boolean expectedStatus) {\n        if (bookStatus.getOrDefault(bookId, null) == expectedStatus) {\n            System.out.println(\"状态更新成功\");\n        } else {\n            System.out.println(\"状态更新失败\");\n        }\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        try {\n            manager.updateBookStatus(\"B001\", true); \n            manager.checkStatus(\"B001\", true); \n        } catch (BookNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "请设计一个Java程序，用于管理一个在线图书馆的书籍借阅状态。在这个程序中，你需要实现一个名为`BookManager`的类，该类中包含一个方法`updateBookStatus`。这个方法接收两个参数：一个是书籍的ID（`String`类型），另一个是书籍的新状态（`boolean`类型，`true`表示书籍已被借出，`false`表示书籍可供借阅）。如果书籍状态更新成功，方法应返回`true`；如果给定的书籍ID不存在，则抛出一个自定义异常`BookNotFoundException`。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass BookNotFoundException extends Exception {\n    public BookNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class BookManager {\n    private Map<String, Boolean> bookStatus = new HashMap<>();\n    public boolean updateBookStatus(String bookId, boolean status) throws BookNotFoundException {\n    }\n    public BookManager() {\n    }\n    public void checkStatus(String bookId, boolean expectedStatus) {\n    }\n}\n```", "id": 1674, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class BookManagerTest {\n    private BookManager manager;\n    @BeforeEach\n    public void setup() {\n        manager = new BookManager();\n    }\n    @Test\n    public void testUpdateBookStatus_ValidBookId() throws BookNotFoundException {\n        assertTrue(manager.updateBookStatus(\"B001\", true));\n    }\n    @Test\n    public void testUpdateBookStatus_InvalidBookId() {\n        assertThrows(BookNotFoundException.class, () -> {\n            manager.updateBookStatus(\"B004\", true);\n        });\n    }\n    @Test\n    public void testUpdateBookStatus_ChangeToFalse() throws BookNotFoundException {\n        manager.updateBookStatus(\"B002\", false);\n        manager.checkStatus(\"B002\", false);\n    }\n    @Test\n    public void testCheckStatus_CorrectStatus() throws BookNotFoundException {\n        manager.updateBookStatus(\"B003\", true);\n        manager.checkStatus(\"B003\", true);\n    }\n    @Test\n    public void testCheckStatus_WrongStatus() throws BookNotFoundException {\n        manager.updateBookStatus(\"B001\", false);\n        manager.checkStatus(\"B001\", true);\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n        switch (operator) {\n            case '+':\n                return String.valueOf(num1 + num2);\n            case '-':\n                return String.valueOf(num1 - num2);\n            case '*':\n                return String.valueOf(num1 * num2);\n            case '/':\n                if (num2 == 0) {\n                    return \"除数不能为零\";\n                } else {\n                    return String.valueOf(num1 / num2);\n                }\n            default:\n                return \"无效的运算符\";\n        }\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        System.out.println(\"10 + 5 = \" + calculator.calculate(10, 5, '+'));\n        System.out.println(\"10 - 5 = \" + calculator.calculate(10, 5, '-'));\n        System.out.println(\"10 * 5 = \" + calculator.calculate(10, 5, '*'));\n        System.out.println(\"10 / 5 = \" + calculator.calculate(10, 5, '/'));\n        System.out.println(\"10 / 0 = \" + calculator.calculate(10, 0, '/')); \n        System.out.println(\"10 $ 5 = \" + calculator.calculate(10, 5, '$')); \n    }\n}", "content": "请编写一个Java程序，实现一个简单的计算器类`SimpleCalculator`。这个类应该能够执行基本的算术运算：加法、减法、乘法和除法。请确保你的实现能够处理除以零的情况，当尝试除以零时，应该返回一个特定的错误信息：\"除数不能为零\"。此外，提供一个方法`calculate`，它接受三个参数：两个整数和一个字符，分别代表操作数和运算符（'+'、'-'、'*'、'/'）。根据提供的运算符执行相应的运算，并返回运算结果。如果运算符无效，返回错误信息：\"无效的运算符\"。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n    }\n}\n```", "id": 1675, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddition() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"15\", calculator.calculate(10, 5, '+'));\n    }\n    @Test\n    public void testSubtraction() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"5\", calculator.calculate(10, 5, '-'));\n    }\n    @Test\n    public void testMultiplication() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"50\", calculator.calculate(10, 5, '*'));\n    }\n    @Test\n    public void testDivision() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"2\", calculator.calculate(10, 5, '/'));\n    }\n    @Test\n    public void testDivisionByZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"除数不能为零\", calculator.calculate(10, 0, '/'));\n    }\n    @Test\n    public void testInvalidOperator() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"无效的运算符\", calculator.calculate(10, 5, '$'));\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\nclass Movie {\n    private int commentCount;\n    public Movie() {\n        this.commentCount = 0;\n    }\n    public void decreaseComment() {\n        if (this.commentCount > 0) {\n            this.commentCount--;\n        }\n    }\n    public int getCommentCount() {\n        return this.commentCount;\n    }\n    public void setCommentCount(int count) {\n        this.commentCount = count;\n    }\n}\nclass CommentDeleted {\n    private String movieId;\n    public CommentDeleted(String movieId) {\n        this.movieId = movieId;\n    }\n    public String getMovieId() {\n        return movieId;\n    }\n}\nclass MovieRepository {\n    public static Optional<Movie> findById(String id) {\n        return Optional.of(new Movie()); \n    }\n    public static void save(Movie movie) {\n    }\n}\npublic class MovieCommentUpdater {\n    public static void decreaseCommentCount(CommentDeleted commentDeleted) {\n        MovieRepository.findById(commentDeleted.getMovieId()).ifPresent(movie -> {\n            movie.decreaseComment(); \n            MovieRepository.save(movie); \n        });\n    }\n    public static void checkFunction() {\n        Movie movie = new Movie();\n        movie.setCommentCount(5); \n        CommentDeleted commentDeleted = new CommentDeleted(\"someMovieId\");\n        decreaseCommentCount(commentDeleted); \n        System.out.println(movie.getCommentCount() == 4 ? \"正确\" : \"错误\"); \n    }\n    public static void main(String[] args) {\n        checkFunction(); \n    }\n}", "content": "请设计一个Java函数，该函数用于更新电影评论数量。当一个评论被删除时，电影的评论数量应该减少。你需要实现一个名为`decreaseCommentCount`的方法，该方法接收一个参数`commentDeleted`，表示被删除的评论信息。你需要根据被删除的评论找到对应的电影，并更新其评论数量。请确保你的代码能够处理以下两种情况：\n\n1. 如果电影不存在，则不执行任何操作。\n2. 如果电影存在，则减少其评论数量，并更新电影信息。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Optional;\nclass Movie {\n    private int commentCount;\n    public Movie() {\n    }\n    public void decreaseComment() {\n    }\n    public int getCommentCount() {\n    }\n    public void setCommentCount(int count) {\n    }\n}\nclass CommentDeleted {\n    private String movieId;\n    public CommentDeleted(String movieId) {\n    }\n    public String getMovieId() {\n    }\n}\nclass MovieRepository {\n    public static Optional<Movie> findById(String id) {\n    }\n    public static void save(Movie movie) {\n    }\n}\npublic class MovieCommentUpdater {\n    public static void decreaseCommentCount(CommentDeleted commentDeleted) {\n    }\n}\n```", "id": 1676, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Optional;\nclass MovieTest {\n    @Test\n    void testDecreaseComment() {\n        Movie movie = new Movie();\n        movie.setCommentCount(5);\n        movie.decreaseComment();\n        assertEquals(4, movie.getCommentCount());\n    }\n    @Test\n    void testDecreaseCommentAtZero() {\n        Movie movie = new Movie();\n        movie.setCommentCount(0);\n        movie.decreaseComment();\n        assertEquals(0, movie.getCommentCount());\n    }\n    @Test\n    void testGetCommentCount() {\n        Movie movie = new Movie();\n        movie.setCommentCount(10);\n        assertEquals(10, movie.getCommentCount());\n    }\n    @Test\n    void testSetCommentCount() {\n        Movie movie = new Movie();\n        movie.setCommentCount(2);\n        assertEquals(2, movie.getCommentCount());\n    }\n    @Test\n    void testMovieInitialization() {\n        Movie movie = new Movie();\n        assertEquals(0, movie.getCommentCount());\n    }\n}"}}
{"canonical_solution": "import javax.swing.JComboBox;\nimport java.util.ArrayList;\nimport java.util.List;\nclass Team {\n    private String name;\n    private List<String> players = new ArrayList<>();\n    public Team(String name, List<String> players) {\n        this.name = name;\n        this.players.addAll(players);\n    }\n    public String getName() {\n        return name;\n    }\n    public List<String> getPlayers() {\n        return players;\n    }\n}\nclass WorldCup {\n    private List<Team> teams = new ArrayList<>();\n    public void addTeam(Team team) {\n        teams.add(team);\n    }\n    public List<Team> getTeams() {\n        return teams;\n    }\n}\npublic class TeamDisplay {\n    JComboBox<String> teamComboBox = new JComboBox<>();\n    JComboBox<String> playerComboBox = new JComboBox<>();\n    WorldCup worldCup = new WorldCup();\n    public TeamDisplay() {\n        List<String> players = new ArrayList<>();\n        players.add(\"Player1\");\n        players.add(\"Player2\");\n        Team team = new Team(\"Team1\", players);\n        worldCup.addTeam(team);\n    }\n    public void displayLastTeamAndPlayers() {\n        int size = worldCup.getTeams().size();\n        if (size > 0) {\n            Team lastTeam = worldCup.getTeams().get(size - 1);\n            teamComboBox.addItem(lastTeam.getName());\n            for (String player : lastTeam.getPlayers()) {\n                playerComboBox.addItem(player);\n            }\n        }\n    }\n}", "content": "请编写一个Java函数，实现以下功能：从一个足球世界杯比赛中，找到并显示最后一个注册的球队名称，并且将该球队的所有球员姓名填充到一个下拉列表（ComboBox）中。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport javax.swing.JComboBox;\nimport java.util.ArrayList;\nimport java.util.List;\nclass Team {\n    private String name;\n    private List<String> players = new ArrayList<>();\n    public Team(String name, List<String> players) {\n    }\n    public String getName() {\n    }\n    public List<String> getPlayers() {\n    }\n}\nclass WorldCup {\n    private List<Team> teams = new ArrayList<>();\n    public void addTeam(Team team) {\n    }\n    public List<Team> getTeams() {\n    }\n}\npublic class TeamDisplay {\n    JComboBox<String> teamComboBox = new JComboBox<>();\n    JComboBox<String> playerComboBox = new JComboBox<>();\n    WorldCup worldCup = new WorldCup();\n    public TeamDisplay() {\n    }\n    public void displayLastTeamAndPlayers() {\n    }\n}\n```", "id": 1677, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JComboBox;\nimport static org.junit.Assert.assertEquals;\nclass TeamTest {\n    private Team team;\n    @Before\n    public void setUp() {\n        List<String> players = new ArrayList<>();\n        players.add(\"Player1\");\n        players.add(\"Player2\");\n        team = new Team(\"Team1\", players);\n    }\n    @Test\n    public void testGetName() {\n        assertEquals(\"Team1\", team.getName());\n    }\n    @Test\n    public void testGetPlayers() {\n        List<String> players = team.getPlayers();\n        assertEquals(2, players.size());\n        assertEquals(\"Player1\", players.get(0));\n        assertEquals(\"Player2\", players.get(1));\n    }\n}\nclass WorldCupTest {\n    private WorldCup worldCup;\n    private Team team;\n    @Before\n    public void setUp() {\n        worldCup = new WorldCup();\n        List<String> players = new ArrayList<>();\n        players.add(\"Player1\");\n        players.add(\"Player2\");\n        team = new Team(\"Team1\", players);\n    }\n    @Test\n    public void testAddTeam() {\n        worldCup.addTeam(team);\n        List<Team> teams = worldCup.getTeams();\n        assertEquals(1, teams.size());\n        assertEquals(\"Team1\", teams.get(0).getName());\n    }\n    @Test\n    public void testGetTeams() {\n        worldCup.addTeam(team);\n        List<Team> teams = worldCup.getTeams();\n        assertEquals(1, teams.size());\n        assertEquals(\"Player1\", teams.get(0).getPlayers().get(0));\n    }\n}\nclass TeamDisplayTest {\n    private TeamDisplay teamDisplay;\n    @Before\n    public void setUp() {\n        teamDisplay = new TeamDisplay();\n    }\n    @Test\n    public void testDisplayLastTeamAndPlayers() {\n        teamDisplay.displayLastTeamAndPlayers();\n        JComboBox<String> teamComboBox = teamDisplay.teamComboBox;\n        JComboBox<String> playerComboBox = teamDisplay.playerComboBox;\n        assertEquals(1, teamComboBox.getItemCount());\n        assertEquals(2, playerComboBox.getItemCount());\n        assertEquals(\"Team1\", teamComboBox.getItemAt(0));\n        assertEquals(\"Player1\", playerComboBox.getItemAt(0));\n        assertEquals(\"Player2\", playerComboBox.getItemAt(1));\n    }\n}"}}
{"canonical_solution": "import java.util.Collections;\nimport java.util.Set;\nimport java.util.HashSet;\npublic class BankApplication {\n    private Set<String> cardNumbers;\n    public Set<String> getUserCardInfo() {\n        if (cardNumbers == null) {\n            cardNumbers = new HashSet<>();\n        }\n        return cardNumbers;\n    }\n    public static void main(String[] args) {\n        BankApplication app = new BankApplication();\n        Set<String> cards = app.getUserCardInfo();\n        if (cards != null && cards instanceof Set) {\n            System.out.println(\"方法正确实现，返回了一个集合，而不是null。\");\n        } else {\n            System.out.println(\"方法实现有误，请检查你的代码。\");\n        }\n    }\n}", "content": "假设你正在开发一个银行应用程序，你需要编写一个方法来获取用户的所有银行卡信息。如果用户还没有任何银行卡，你的方法应该返回一个空的集合，而不是返回null。请遵循以下指导原则来实现这个功能：\n\n- 方法应该是自包含的，并且清晰明了。\n- 方法应该能够处理任何异常情况，确保程序的健壮性。\n- 使用Java编程语言。\n- 方法名和类名需要有意义。\n- 需要有必要的注释，以帮助理解代码的逻辑。\n\n请根据上述要求，设计和描述这个功能的实现。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Collections;\nimport java.util.Set;\nimport java.util.HashSet;\npublic class BankApplication {\n    private Set<String> cardNumbers;\n    public Set<String> getUserCardInfo() {\n    }\n}\n```", "id": 1678, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Set;\nimport java.util.HashSet;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BankApplicationTest {\n    private BankApplication bankApplication;\n    @BeforeEach\n    public void setUp() {\n        bankApplication = new BankApplication();\n    }\n    @Test\n    public void testGetUserCardInfoNotNull() {\n        Set<String> cards = bankApplication.getUserCardInfo();\n        assertNotNull(cards);\n    }\n    @Test\n    public void testGetUserCardInfoEmptySet() {\n        Set<String> cards = bankApplication.getUserCardInfo();\n        assertTrue(cards.isEmpty());\n    }\n    @Test\n    public void testGetUserCardInfoAddCard() {\n        Set<String> cards = bankApplication.getUserCardInfo();\n        cards.add(\"1234-5678-9012-3456\");\n        assertEquals(1, cards.size());\n    }\n    @Test\n    public void testGetUserCardInfoSameInstance() {\n        Set<String> firstCall = bankApplication.getUserCardInfo();\n        Set<String> secondCall = bankApplication.getUserCardInfo();\n        assertSame(firstCall, secondCall);\n    }\n    @Test\n    public void testMainMethod() {\n        BankApplication.main(new String[]{});\n    }\n}"}}
{"canonical_solution": "import java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.zip.InflaterInputStream;\npublic class DataWrapper {\n    private boolean isClosed = false;\n    private byte[] compressedData; \n    public DataWrapper(byte[] data) {\n        this.compressedData = data;\n    }\n    public synchronized InputStream getDecompressedStream() throws IllegalStateException {\n        checkIfClosed();\n        return new InflaterInputStream(new ByteArrayInputStream(compressedData));\n    }\n    private void checkIfClosed() throws IllegalStateException {\n        if (isClosed) {\n            throw new IllegalStateException(\"DataWrapper is closed.\");\n        }\n    }\n    public void close() {\n        isClosed = true;\n    }\n}\npublic class DataWrapperTest {\n    public static void main(String[] args) {\n        byte[] compressedData = {};\n        byte[] expectedDecompressedData = {};\n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream decompressedStream = dataWrapper.getDecompressedStream();\n        dataWrapper.close();\n    }\n}", "content": "请编写一个Java类`DataWrapper`，该类中包含一个方法`getDecompressedStream`，该方法用于获取一个`InputStream`，这个流包含了解压缩后的数据。假设你有一个方法`getCompressedData`用于获取原始的压缩数据，你需要在`getDecompressedStream`方法中使用`InflaterInputStream`来解压这些数据。此外，确保在获取流之前检查`DataWrapper`对象是否已经关闭，如果已关闭，则抛出一个`IllegalStateException`。请提供一个`checkIfClosed`方法来执行这个检查。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.zip.InflaterInputStream;\npublic class DataWrapper {\n    private boolean isClosed = false;\n    private byte[] compressedData; \n    public DataWrapper(byte[] data) {\n    }\n    public synchronized InputStream getDecompressedStream() throws IllegalStateException {\n        return null;\n    }\n    private void checkIfClosed() throws IllegalStateException {\n    }\n    public void close() {\n    }\n}\n```", "id": 1679, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.zip.InflaterInputStream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DataWrapperTest {\n    @Test\n    public void testGetDecompressedStream() throws Exception {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream decompressedStream = dataWrapper.getDecompressedStream();\n        assertNotNull(decompressedStream);\n    }\n    @Test(expected = IllegalStateException.class)\n    public void testGetDecompressedStreamWhenClosed() {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        dataWrapper.close();\n        dataWrapper.getDecompressedStream(); \n    }\n    @Test\n    public void testClose() {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        dataWrapper.close();\n        try {\n            dataWrapper.getDecompressedStream();\n            fail(\"Expected an IllegalStateException to be thrown\");\n        } catch (IllegalStateException e) {\n            assertEquals(\"DataWrapper is closed.\", e.getMessage());\n        }\n    }\n    @Test\n    public void testDecompression() throws Exception {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        byte[] expectedDecompressedData = {}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream decompressedStream = dataWrapper.getDecompressedStream();\n        byte[] actualDecompressedData = decompressedStream.readAllBytes();\n        assertArrayEquals(expectedDecompressedData, actualDecompressedData);\n    }\n    @Test\n    public void testMultipleCalls() throws Exception {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream firstCallStream = dataWrapper.getDecompressedStream();\n        assertNotNull(firstCallStream);\n        InputStream secondCallStream = dataWrapper.getDecompressedStream();\n        assertNotNull(secondCallStream);\n    }\n}"}}
{"canonical_solution": "import javax.swing.JTextField;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Locale;\npublic class DateFormatter {\n    public static void formatCurrentDateAndSetText(JTextField textField) {\n        String dateFormat = \"yyyy-MM-dd\"; \n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat, Locale.US);\n        String formattedDate = sdf.format(Calendar.getInstance().getTime());\n        textField.setText(formattedDate);\n    }\n    public static void checkFunction() {\n        JTextField textField = new JTextField();\n        formatCurrentDateAndSetText(textField);\n        System.out.println(\"设置的文本框文本为: \" + textField.getText());\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "请编写一个Java方法，用于将当前日期格式化为\"年-月-日\"格式，并将其设置为给定文本框的文本。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport javax.swing.JTextField;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Locale;\npublic class DateFormatter {\n    public static void formatCurrentDateAndSetText(JTextField textField) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1680, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport javax.swing.JTextField;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Locale;\npublic class DateFormatterTest {\n    @Test\n    public void testFormatCurrentDateAndSetText() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        String dateFormat = \"yyyy-MM-dd\";\n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat, Locale.US);\n        String expectedDate = sdf.format(Calendar.getInstance().getTime());\n        assertEquals(expectedDate, textField.getText());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextNotNull() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        assertNotNull(textField.getText());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextEmptyInitially() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        assertFalse(textField.getText().isEmpty());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextCorrectLocale() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        String dateFormat = \"yyyy-MM-dd\";\n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat, Locale.US);\n        String expectedDate = sdf.format(Calendar.getInstance().getTime());\n        assertEquals(expectedDate, textField.getText());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextInstance() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        assertTrue(textField instanceof JTextField);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class UserRegistrationService {\n    static class User {\n        String username;\n        String password;\n        String email;\n        public void save() {\n        }\n    }\n    static class RegistrationForm {\n        String username;\n        String password;\n        String email;\n        public Map<String, String> validate() {\n            Map<String, String> errors = new HashMap<>();\n            if (username == null || username.isEmpty()) {\n                errors.put(\"username\", \"用户名不能为空\");\n            }\n            if (password == null || password.isEmpty()) {\n                errors.put(\"password\", \"密码不能为空\");\n            }\n            if (email == null || email.isEmpty()) {\n                errors.put(\"email\", \"邮箱不能为空\");\n            }\n            return errors;\n        }\n    }\n    public String registerUser(RegistrationForm form) {\n        Map<String, String> errors = form.validate();\n        if (!errors.isEmpty()) {\n            return \"注册失败: \" + errors.toString();\n        }\n        User user = new User();\n        user.username = form.username;\n        user.password = form.password; \n        user.email = form.email;\n        user.save();\n        return \"注册成功\";\n    }\n    public static void main(String[] args) {\n        UserRegistrationService service = new UserRegistrationService();\n        RegistrationForm form = new RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        String result = service.registerUser(form);\n        System.out.println(result);\n    }\n}", "content": "请编写一个Java方法，用于处理用户注册流程。该方法应从请求中获取用户提交的注册表单数据，验证数据的有效性，如果数据有效，则创建一个新的用户记录并保存到数据库中。如果表单数据有误，则返回错误信息。请确保你的代码能够处理以下几点：\n\n1. 从请求中获取用户注册表单数据。\n2. 验证表单数据的有效性。如果表单数据无效，返回一个错误信息。\n3. 如果表单数据有效，创建一个新用户，并将其信息（如用户名、密码、邮箱等）保存到数据库中。\n4. 注册成功后，为用户创建一个会话，并重定向用户到他们的个人主页。\n\n请注意，你需要自行设计表单数据的类以及用户类，并且确保所有必要的包都已经导入。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class UserRegistrationService {\n    static class User {\n        String username;\n        String password;\n        String email;\n        public void save() {\n        }\n    }\n    static class RegistrationForm {\n        String username;\n        String password;\n        String email;\n        public Map<String, String> validate() {\n            return null;\n        }\n    }\n    public String registerUser(RegistrationForm form) {\n        return null;\n    }\n}\n```", "id": 1681, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.util.Map;\npublic class UserRegistrationServiceTest {\n    @Test\n    public void testValidate_AllFieldsValid() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertTrue(errors.isEmpty());\n    }\n    @Test\n    public void testValidate_UsernameEmpty() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertFalse(errors.isEmpty());\n        Assertions.assertEquals(\"用户名不能为空\", errors.get(\"username\"));\n    }\n    @Test\n    public void testValidate_PasswordEmpty() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"\";\n        form.email = \"test@example.com\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertFalse(errors.isEmpty());\n        Assertions.assertEquals(\"密码不能为空\", errors.get(\"password\"));\n    }\n    @Test\n    public void testValidate_EmailEmpty() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertFalse(errors.isEmpty());\n        Assertions.assertEquals(\"邮箱不能为空\", errors.get(\"email\"));\n    }\n    @Test\n    public void testRegisterUser_AllFieldsValid() {\n        UserRegistrationService service = new UserRegistrationService();\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        String result = service.registerUser(form);\n        Assertions.assertEquals(\"注册成功\", result);\n    }\n    @Test\n    public void testRegisterUser_UsernameEmpty() {\n        UserRegistrationService service = new UserRegistrationService();\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        String result = service.registerUser(form);\n        Assertions.assertTrue(result.startsWith(\"注册失败\"));\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\npublic class AudioController {\n    private static final int MIN_BRIGHTNESS = 1;\n    private int brightness;\n    public AudioController(int initialBrightness) {\n        brightness = initialBrightness;\n    }\n    public void decreaseBrightness() {\n        if (brightness > MIN_BRIGHTNESS) {\n            brightness--;\n        }\n    }\n    public int getBrightness() {\n        return brightness;\n    }\n    public static void main(String[] args) {\n        check(2); \n        check(1); \n        check(0); \n    }\n    public static void check(int initialBrightness) {\n        AudioController controller = new AudioController(initialBrightness);\n        System.out.println(\"Initial brightness: \" + controller.getBrightness());\n        controller.decreaseBrightness();\n        System.out.println(\"Brightness after decrease: \" + controller.getBrightness());\n    }\n}", "content": "请编写一个Java类`AudioController`，该类中包含一个方法`decreaseBrightness`，用于减少音频设备的亮度。该方法应当确保亮度值不会低于最小亮度`MIN_BRIGHTNESS`。如果亮度已经是最小值，则不应该进一步减少。请按照以下要求实现该功能：\n\n- 类中应包含一个整型成员变量`brightness`，用于存储当前亮度值。\n- 类中应定义一个整型常量`MIN_BRIGHTNESS`，其值为1，代表允许的最小亮度值。\n- `decreaseBrightness`方法应当检查当前亮度值，只有当它大于`MIN_BRIGHTNESS`时才减少亮度值。\n\n请提供一个`check`函数。测试数据点应包括亮度值等于`MIN_BRIGHTNESS`、大于`MIN_BRIGHTNESS`和小于`MIN_BRIGHTNESS`的情况。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.lang.System;\npublic class AudioController {\n    private static final int MIN_BRIGHTNESS = 1;\n    private int brightness;\n    public AudioController(int initialBrightness) {\n    }\n    public void decreaseBrightness() {\n    }\n    public int getBrightness() {\n    }\n}\n```", "id": 1682, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class AudioControllerTest {\n    @Test\n    public void testInitialBrightness() {\n        AudioController controller = new AudioController(5);\n        assertEquals(5, controller.getBrightness());\n    }\n    @Test\n    public void testDecreaseBrightnessAboveMin() {\n        AudioController controller = new AudioController(3);\n        controller.decreaseBrightness();\n        assertEquals(2, controller.getBrightness());\n    }\n    @Test\n    public void testDecreaseBrightnessAtMin() {\n        AudioController controller = new AudioController(1);\n        controller.decreaseBrightness();\n        assertEquals(1, controller.getBrightness());\n    }\n    @Test\n    public void testBrightnessDoesNotGoBelowMin() {\n        AudioController controller = new AudioController(0);\n        controller.decreaseBrightness();\n        assertEquals(0, controller.getBrightness());\n    }\n    @Test\n    public void testMultipleDecreases() {\n        AudioController controller = new AudioController(5);\n        controller.decreaseBrightness();\n        controller.decreaseBrightness();\n        assertEquals(3, controller.getBrightness());\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<String> books;\n    public BookManager() {\n        books = new ArrayList<>();\n    }\n    public void addBook(String name, String isbn) {\n        books.add(\"书名: \" + name + \", ISBN: \" + isbn);\n    }\n    public void displayBooks() {\n        for (String book : books) {\n            System.out.println(book);\n        }\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.addBook(\"Java编程思想\", \"978-0321356680\");\n        manager.addBook(\"Effective Java\", \"978-0134685991\");\n        manager.displayBooks();\n    }\n}", "content": "请设计一个Java程序，用于管理图书馆中的书籍信息。你需要实现一个名为`BookManager`的类，其中包含一个方法`addBook`，该方法接受书名（`String`类型）和书的ISBN号（`String`类型）作为参数，并将这些信息存储在一个集合中。此外，还需要实现一个`displayBooks`方法，用于打印所有已添加的书籍信息。请确保你的解决方案是自包含的，并且所有必要的包都已考虑。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<String> books;\n    public BookManager() {\n    }\n    public void addBook(String name, String isbn) {\n    }\n    public void displayBooks() {\n    }\n}\n```", "id": 1683, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @BeforeEach\n    public void setUp() {\n        bookManager = new BookManager();\n    }\n    @Test\n    public void testAddBook() {\n        bookManager.addBook(\"Java编程思想\", \"978-0321356680\");\n        bookManager.addBook(\"Effective Java\", \"978-0134685991\");\n    }\n    @Test\n    public void testDisplayBooks() {\n        bookManager.addBook(\"Java编程思想\", \"978-0321356680\");\n        bookManager.addBook(\"Effective Java\", \"978-0134685991\");\n        bookManager.displayBooks();\n    }\n    @Test\n    public void testEmptyBookList() {\n        bookManager.displayBooks();\n    }\n    @Test\n    public void testAddMultipleBooks() {\n        for (int i = 1; i <= 100; i++) {\n            bookManager.addBook(\"Book\" + i, \"ISBN\" + i);\n        }\n    }\n    @Test\n    public void testAddBookWithEmptyFields() {\n        bookManager.addBook(\"\", \"\");\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\npublic class VocabularyStorage {\n    private ArrayList<String> storedWordsList = new ArrayList<>();\n    private JLabel displayLabel;\n    private JTextField inputField;\n    public VocabularyStorage(JLabel displayLabel, JTextField inputField) {\n        this.displayLabel = displayLabel;\n        this.inputField = inputField;\n    }\n    public void addAndDisplayWord() {\n        String word = inputField.getText().toUpperCase();\n        storedWordsList.add(word);\n        updateDisplay();\n    }\n    private void updateDisplay() {\n        StringBuilder wordsDisplay = new StringBuilder();\n        for (String word : storedWordsList) {\n            if (wordsDisplay.length() > 0) {\n                wordsDisplay.append(\", \");\n            }\n            wordsDisplay.append(word);\n        }\n        displayLabel.setText(wordsDisplay.toString());\n    }\n    public static void main(String[] args) {\n        JLabel label = new JLabel();\n        JTextField textField = new JTextField();\n        VocabularyStorage storage = new VocabularyStorage(label, textField);\n        textField.setText(\"Hello\");\n        storage.addAndDisplayWord();\n        textField.setText(\"World\");\n        storage.addAndDisplayWord();\n        textField.setText(\"Java\");\n        storage.addAndDisplayWord();\n        System.out.println(\"存储的单词显示为: \" + label.getText());\n    }\n}", "content": "请编写一个Java程序，实现一个简单的词汇存储器。该存储器应该能够接收用户输入的单词，并将其存储在一个列表中。每当有新的单词被添加时，程序应该在界面上显示所有已存储的单词，单词之间用逗号分隔。注意，所有的单词都应该转换为大写形式进行存储和显示。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.ArrayList;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\npublic class VocabularyStorage {\n    private ArrayList<String> storedWordsList = new ArrayList<>();\n    private JLabel displayLabel;\n    private JTextField inputField;\n    public VocabularyStorage(JLabel displayLabel, JTextField inputField) {\n    }\n    public void addAndDisplayWord() {\n    }\n    private void updateDisplay() {\n    }\n}\n```", "id": 1684, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class VocabularyStorageTest {\n    private VocabularyStorage storage;\n    private JLabel displayLabel;\n    private JTextField inputField;\n    @BeforeEach\n    public void setUp() {\n        displayLabel = new JLabel();\n        inputField = new JTextField();\n        storage = new VocabularyStorage(displayLabel, inputField);\n    }\n    @Test\n    public void testAddAndDisplayWord_singleWord() {\n        inputField.setText(\"Hello\");\n        storage.addAndDisplayWord();\n        assertEquals(\"HELLO\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_multipleWords() {\n        inputField.setText(\"Hello\");\n        storage.addAndDisplayWord();\n        inputField.setText(\"World\");\n        storage.addAndDisplayWord();\n        assertEquals(\"HELLO, WORLD\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_emptyInput() {\n        inputField.setText(\"\");\n        storage.addAndDisplayWord();\n        assertEquals(\"\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_specialCharacters() {\n        inputField.setText(\"H@llo!\");\n        storage.addAndDisplayWord();\n        assertEquals(\"H@LLO!\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_mixedCase() {\n        inputField.setText(\"hElLo\");\n        storage.addAndDisplayWord();\n        assertEquals(\"HELLO\", displayLabel.getText());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nclass ChordSettings {\n    static void setChordMode(int chordNumber, String mode) {\n        System.out.println(\"和弦 \" + chordNumber + \" 设置为模式: \" + mode);\n    }\n}\npublic class ChordManager {\n    public void setChordModes(String[] modes) {\n        for (int i = 0; i < modes.length; i++) {\n            ChordSettings.setChordMode(i + 1, modes[i]);\n        }\n    }\n    public static void main(String[] args) {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\", \"minor\", \"diminished\", \"augmented\", \"suspended\", \"dominant7th\", \"major7th\"};\n        manager.setChordModes(testModes);\n        check(testModes);\n    }\n    static void check(String[] expectedModes) {\n        System.out.println(\"验证和弦模式设置: \" + Arrays.toString(expectedModes));\n        System.out.println(\"所有和弦模式设置正确。\");\n    }\n}", "content": "请编写一个Java程序，用于处理音乐应用中的和弦模式设置。在这个应用中，用户可以通过下拉菜单选择每个和弦的模式。你的任务是创建一个名为`ChordManager`的类，其中包含一个名为`setChordModes`的方法。这个方法接收一个字符串数组，数组中的每个元素代表一个和弦的模式，然后将这些模式应用到对应的和弦上。假设有一个名为`ChordSettings`的类，它有一个静态方法`setChordMode(int chordNumber, String mode)`，用于设置指定和弦的模式。请确保你的代码能够处理至少7个和弦的模式设置。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\nclass ChordSettings {\n    static void setChordMode(int chordNumber, String mode) {\n    }\n}\npublic class ChordManager {\n    public void setChordModes(String[] modes) {\n    }\n}\n```", "id": 1685, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nclass ChordSettingsTest {\n    @Test\n    void testSetChordMode() {\n        ChordSettings.setChordMode(1, \"major\");\n        ChordSettings.setChordMode(2, \"minor\");\n        ChordSettings.setChordMode(3, \"diminished\");\n    }\n}\nclass ChordManagerTest {\n    @Test\n    void testSetChordModesWithVariety() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\", \"minor\", \"diminished\", \"augmented\", \"suspended\", \"dominant7th\", \"major7th\"};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithSingleMode() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\"};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithEmptyArray() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithNullMode() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {null};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithMixedContent() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\", \"\", \"minor\", null, \"augmented\"};\n        manager.setChordModes(testModes);\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileAverageCalculator {\n    public static double calculateAverage(String filePath) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(filePath));\n        String line;\n        double sum = 0;\n        int count = 0;\n        while ((line = reader.readLine()) != null) {\n            sum += Double.parseDouble(line);\n            count++;\n        }\n        reader.close();\n        return count > 0 ? sum / count : 0;\n    }\n    public static void check() {\n        String testFilePath = \"testNumbers.txt\"; \n        try {\n            double average = calculateAverage(testFilePath);\n            System.out.println(\"平均值是: \" + average);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "请编写一个Java程序，实现从文件中读取数据并计算其平均值。确保程序自包含，并导入所有必要的包。此外，需要提供一个检查函数，以验证程序是否正确处理了提供的数据点。请尽量使问题描述简短流畅。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileAverageCalculator {\n    public static double calculateAverage(String filePath) throws IOException {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1686, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.AfterEach;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileAverageCalculatorTest {\n    private String testFilePath;\n    @BeforeEach\n    public void setUp() throws IOException {\n        testFilePath = \"testNumbers.txt\";\n    }\n    @AfterEach\n    public void tearDown() {\n    }\n    @Test\n    public void testCalculateAverageWithMultipleNumbers() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n            writer.write(\"1.0\\n2.0\\n3.0\");\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(2.0, result, 0.001);\n    }\n    @Test\n    public void testCalculateAverageWithSingleNumber() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n            writer.write(\"5.0\");\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(5.0, result, 0.001);\n    }\n    @Test\n    public void testCalculateAverageWithEmptyFile() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(0.0, result, 0.001);\n    }\n    @Test\n    public void testCalculateAverageWithNonNumericContent() {\n        Assertions.assertThrows(NumberFormatException.class, () -> {\n            try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n                writer.write(\"NotANumber\");\n            }\n            FileAverageCalculator.calculateAverage(testFilePath);\n        });\n    }\n    @Test\n    public void testCalculateAverageWithNegativeNumbers() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n            writer.write(\"-1.0\\n-2.0\\n-3.0\");\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(-2.0, result, 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class SalesAnalyzer {\n    public static int findHighestSalesMonth(int[] monthlySales) {\n        int highestSalesMonth = 0;\n        for (int i = 1; i < monthlySales.length; i++) {\n            if (monthlySales[i] > monthlySales[highestSalesMonth]) {\n                highestSalesMonth = i;\n            }\n        }\n        return highestSalesMonth + 1; \n    }\n    public static void main(String[] args) {\n        int[] salesData = {1200, 800, 2000, 1500, 900, 2000};\n        int highestSalesMonth = findHighestSalesMonth(salesData);\n        System.out.println(\"销售额最高的月份是：\" + highestSalesMonth);\n    }\n}", "content": "请编写一个Java方法，用于找出一年中销售额最高的月份。给定一个整数数组，其中每个元素代表一个月份的销售额，请返回销售额最高的月份。月份从1开始计数，即1代表一月，2代表二月，依此类推。如果有多个月份的销售额相同且都是最高的，请返回第一个这样的月份。\n请用Java实现不包含Main函数的完整代码，并遵循如下类型定义：\n\n```java\nimport java.util.Arrays;\npublic class SalesAnalyzer {\n    public static int findHighestSalesMonth(int[] monthlySales) {\n    }\n}\n```", "id": 1687, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "zh"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class SalesAnalyzerTest {\n    @Test\n    public void testFindHighestSalesMonth_UniqueHighestSales() {\n        int[] salesData = {1200, 800, 2000, 1500, 900, 1800};\n        int expected = 3;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_MultipleHighestSales() {\n        int[] salesData = {1200, 800, 2000, 1500, 900, 2000};\n        int expected = 3;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_AllSameSales() {\n        int[] salesData = {1000, 1000, 1000, 1000, 1000, 1000};\n        int expected = 1;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_EmptySalesData() {\n        int[] salesData = {};\n        int expected = 1; \n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_SingleElementSalesData() {\n        int[] salesData = {500};\n        int expected = 1;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n}"}}
