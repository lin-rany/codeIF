{"canonical_solution": "import java.util.Arrays;\npublic class AverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n        if (numbers == null || numbers.length == 0) {\n            throw new IllegalArgumentException(\"数组不能为空\");\n        }\n        return Arrays.stream(numbers).average().orElse(Double.NaN);\n    }\n    public static void main(String[] args) {\n        int[] testData = {1, 2, 3, 4, 5};\n        double average = calculateAverage(testData);\n        System.out.println(\"平均值为: \" + average);\n        check(calculateAverage(new int[]{10, 20, 30}), 20.0);\n        check(calculateAverage(new int[]{5, 5, 5, 5}), 5.0);\n        check(calculateAverage(new int[]{1, -1, 3, -3, 5, -5}), 0.0);\n    }\n    private static void check(double actual, double expected) {\n        if (Math.abs(actual - expected) < 0.0001) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败: 期望 \" + expected + \", 实际 \" + actual);\n        }\n    }\n}", "content": "Write a Java program to calculate the average of a set of data. Make sure your program can accept an integer array as input and return the average of the set of data. Implement a method named `calculateAverage` which accepts an `int[]` type parameter and returns a `double` type result representing the average of the input array.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class AverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n    }\n}\n```", "id": 1459, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\npublic class AverageCalculatorTest {\n    @Test\n    public void testCalculateAverage_withValidInput() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        double result = AverageCalculator.calculateAverage(numbers);\n        assertEquals(3.0, result, 0.0001);\n    }\n    @Test\n    public void testCalculateAverage_withNegativeNumbers() {\n        int[] numbers = {1, -1, 3, -3, 5, -5};\n        double result = AverageCalculator.calculateAverage(numbers);\n        assertEquals(0.0, result, 0.0001);\n    }\n    @Test\n    public void testCalculateAverage_withEmptyArray() {\n        int[] numbers = {};\n        assertThrows(IllegalArgumentException.class, () -> {\n            AverageCalculator.calculateAverage(numbers);\n        });\n    }\n    @Test\n    public void testCalculateAverage_withNullArray() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            AverageCalculator.calculateAverage(null);\n        });\n    }\n    @Test\n    public void testCalculateAverage_withSameNumbers() {\n        int[] numbers = {5, 5, 5, 5};\n        double result = AverageCalculator.calculateAverage(numbers);\n        assertEquals(5.0, result, 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nclass StudentDTO {\n    private Long id;\n    private String name;\n    private List<Long> courseIds;\n    public StudentDTO(Long id, String name, List<Long> courseIds) {\n        this.id = id;\n        this.name = name;\n        this.courseIds = courseIds;\n    }\n    public Long getId() {\n        return id;\n    }\n    public String getName() {\n        return name;\n    }\n    public List<Long> getCourseIds() {\n        return courseIds;\n    }\n}\nclass Course {\n    private Long courseId;\n    public Course(Long courseId) {\n        this.courseId = courseId;\n    }\n    public void setCourseId(Long courseId) {\n        this.courseId = courseId;\n    }\n    public Long getCourseId() {\n        return courseId;\n    }\n}\nclass Student {\n    private Long id;\n    private String name;\n    private List<Course> courses;\n    public Student(Long id, String name, List<Course> courses) {\n        this.id = id;\n        this.name = name;\n        this.courses = courses;\n    }\n    public Long getId() {\n        return id;\n    }\n    public String getName() {\n        return name;\n    }\n    public List<Course> getCourses() {\n        return courses;\n    }\n}\npublic class DTOToEntityConverter {\n    public static Student toStudent(StudentDTO studentDTO) {\n        List<Course> courses = new ArrayList<>();\n        List<Long> courseIds = studentDTO.getCourseIds();\n        if (courseIds != null) {\n            for (Long courseId : courseIds) {\n                Course course = new Course(courseId);\n                courses.add(course);\n            }\n        }\n        return new Student(studentDTO.getId(), studentDTO.getName(), courses);\n    }\n    public static void main(String[] args) {\n        List<Long> courseIds = new ArrayList<>();\n        courseIds.add(101L);\n        courseIds.add(102L);\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        Student student = toStudent(studentDTO);\n        System.out.println(\"学生ID: \" + student.getId() + \", 名字: \" + student.getName() + \", 课程数量: \" + student.getCourses().size());\n    }\n}", "content": "Please write a Java function that can convert a Student Data Transfer Object (DTO) into a Student entity object. The Student DTO contains basic information about the student and a list of IDs for the courses they selected. The Student entity object, in addition to basic information, also needs to contain a list of Course entity objects. The Course entity object only includes the course ID. Note that if the course ID list is empty, the list of courses in the Student entity object should also be empty.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass StudentDTO {\n    private Long id;\n    private String name;\n    private List<Long> courseIds;\n    public StudentDTO(Long id, String name, List<Long> courseIds) {\n    }\n    public Long getId() {\n    }\n    public String getName() {\n    }\n    public List<Long> getCourseIds() {\n    }\n}\nclass Course {\n    private Long courseId;\n    public Course(Long courseId) {\n    }\n    public void setCourseId(Long courseId) {\n    }\n    public Long getCourseId() {\n    }\n}\nclass Student {\n    private Long id;\n    private String name;\n    private List<Course> courses;\n    public Student(Long id, String name, List<Course> courses) {\n    }\n    public Long getId() {\n    }\n    public String getName() {\n    }\n    public List<Course> getCourses() {\n    }\n}\npublic class DTOToEntityConverter {\n    public static Student toStudent(StudentDTO studentDTO) {\n    }\n}\n```", "id": 1460, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\nclass StudentDTOTest {\n    @Test\n    void testGetId() {\n        List<Long> courseIds = new ArrayList<>();\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        assertEquals(1L, studentDTO.getId());\n    }\n    @Test\n    void testGetName() {\n        List<Long> courseIds = new ArrayList<>();\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        assertEquals(\"张三\", studentDTO.getName());\n    }\n    @Test\n    void testGetCourseIds() {\n        List<Long> courseIds = new ArrayList<>();\n        courseIds.add(101L);\n        courseIds.add(102L);\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        assertEquals(2, studentDTO.getCourseIds().size());\n        assertTrue(studentDTO.getCourseIds().contains(101L));\n        assertTrue(studentDTO.getCourseIds().contains(102L));\n    }\n}\nclass CourseTest {\n    @Test\n    void testGetCourseId() {\n        Course course = new Course(101L);\n        assertEquals(101L, course.getCourseId());\n    }\n    @Test\n    void testSetCourseId() {\n        Course course = new Course(101L);\n        course.setCourseId(102L);\n        assertEquals(102L, course.getCourseId());\n    }\n}\nclass StudentTest {\n    @Test\n    void testGetId() {\n        List<Course> courses = new ArrayList<>();\n        Student student = new Student(1L, \"张三\", courses);\n        assertEquals(1L, student.getId());\n    }\n    @Test\n    void testGetName() {\n        List<Course> courses = new ArrayList<>();\n        Student student = new Student(1L, \"张三\", courses);\n        assertEquals(\"张三\", student.getName());\n    }\n    @Test\n    void testGetCourses() {\n        List<Course> courses = new ArrayList<>();\n        courses.add(new Course(101L));\n        courses.add(new Course(102L));\n        Student student = new Student(1L, \"张三\", courses);\n        assertEquals(2, student.getCourses().size());\n        assertEquals(101L, student.getCourses().get(0).getCourseId());\n        assertEquals(102L, student.getCourses().get(1).getCourseId());\n    }\n}\nclass DTOToEntityConverterTest {\n    @Test\n    void testToStudent() {\n        List<Long> courseIds = new ArrayList<>();\n        courseIds.add(101L);\n        courseIds.add(102L);\n        StudentDTO studentDTO = new StudentDTO(1L, \"张三\", courseIds);\n        Student student = DTOToEntityConverter.toStudent(studentDTO);\n        assertNotNull(student);\n        assertEquals(1L, student.getId());\n        assertEquals(\"张三\", student.getName());\n        assertEquals(2, student.getCourses().size());\n        assertEquals(101L, student.getCourses().get(0).getCourseId());\n        assertEquals(102L, student.getCourses().get(1).getCourseId());\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class SimpleTextEditor {\n    private ArrayList<String> textHistory = new ArrayList<>();\n    private String currentText = \"\";\n    public void addText(String text) {\n        textHistory.add(currentText); \n        currentText += text;\n    }\n    public void undo() {\n        if (!textHistory.isEmpty()) {\n            currentText = textHistory.remove(textHistory.size() - 1); \n        }\n    }\n    public String getText() {\n        return currentText;\n    }\n    public static void main(String[] args) {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        System.out.println(editor.getText()); \n        editor.undo();\n        System.out.println(editor.getText()); \n        editor.undo();\n        System.out.println(editor.getText()); \n    }\n}", "content": "Please write a Java program to implement the undo functionality for a simple text editor. This text editor only supports adding text and undo operations. The specific requirements are as follows:\n\n- The editor is initially empty.\n- Provide a method `addText` that accepts a string parameter and appends it to the existing text in the editor.\n- Provide a method `undo` to undo the most recent `addText` operation.\n- Provide a method `getText` to return the current text content of the editor.\n- Use `ArrayList<String>` to store each added text to support undo operations.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\npublic class SimpleTextEditor {\n    private ArrayList<String> textHistory = new ArrayList<>();\n    private String currentText = \"\";\n    public void addText(String text) {\n    }\n    public void undo() {\n    }\n    public String getText() {\n    }\n}\n```", "id": 1461, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SimpleTextEditorTest {\n    @Test\n    public void testAddText() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        assertEquals(\"Hello\", editor.getText());\n    }\n    @Test\n    public void testAddTextMultipleTimes() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        assertEquals(\"Hello, World!\", editor.getText());\n    }\n    @Test\n    public void testUndo() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        editor.undo();\n        assertEquals(\"Hello\", editor.getText());\n    }\n    @Test\n    public void testUndoMultipleTimes() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.addText(\"Hello\");\n        editor.addText(\", World!\");\n        editor.undo();\n        editor.undo();\n        assertEquals(\"\", editor.getText());\n    }\n    @Test\n    public void testUndoEmptyHistory() {\n        SimpleTextEditor editor = new SimpleTextEditor();\n        editor.undo();\n        assertEquals(\"\", editor.getText());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass Book {\n    String title;\n    String author;\n    int year;\n    public Book(String title, String author, int year) {\n        this.title = title;\n        this.author = author;\n        this.year = year;\n    }\n    @Override\n    public String toString() {\n        return \"书名: \" + title + \", 作者: \" + author + \", 出版年份: \" + year;\n    }\n}\npublic class LibrarySystem {\n    private Map<Integer, Book> bookDatabase;\n    public LibrarySystem() {\n        bookDatabase = new HashMap<>();\n        bookDatabase.put(1, new Book(\"Java编程思想\", \"Bruce Eckel\", 2006));\n        bookDatabase.put(2, new Book(\"Effective Java\", \"Joshua Bloch\", 2008));\n        bookDatabase.put(3, new Book(\"深入理解Java虚拟机\", \"周志明\", 2013));\n    }\n    public String findBookDetails(int bookId) {\n        if (bookDatabase.containsKey(bookId)) {\n            return bookDatabase.get(bookId).toString();\n        } else {\n            return \"抱歉，找不到ID为 \" + bookId + \" 的图书。\";\n        }\n    }\n    public static void main(String[] args) {\n        LibrarySystem library = new LibrarySystem();\n        System.out.println(library.findBookDetails(1)); \n        System.out.println(library.findBookDetails(4)); \n    }\n}", "content": "Please write a Java program to simulate a book query function in a library system. This function should allow users to query detailed information about a book based on its ID, including the title, author, and publication year. Ensure that your code can handle exceptions; for instance, if the given book ID does not exist, it should return a user-friendly error message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass Book {\n    String title;\n    String author;\n    int year;\n    public Book(String title, String author, int year) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class LibrarySystem {\n    private Map<Integer, Book> bookDatabase;\n    public LibrarySystem() {\n    }\n    public String findBookDetails(int bookId) {\n    }\n}\n```", "id": 1462, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class LibrarySystemTest {\n    private LibrarySystem library;\n    @Before\n    public void setUp() {\n        library = new LibrarySystem();\n    }\n    @Test\n    public void testFindBookDetails_ValidID() {\n        String expected = \"书名: Java编程思想, 作者: Bruce Eckel, 出版年份: 2006\";\n        String actual = library.findBookDetails(1);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_InvalidID() {\n        String expected = \"抱歉，找不到ID为 4 的图书。\";\n        String actual = library.findBookDetails(4);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_AnotherValidID() {\n        String expected = \"书名: Effective Java, 作者: Joshua Bloch, 出版年份: 2008\";\n        String actual = library.findBookDetails(2);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_YetAnotherValidID() {\n        String expected = \"书名: 深入理解Java虚拟机, 作者: 周志明, 出版年份: 2013\";\n        String actual = library.findBookDetails(3);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testFindBookDetails_DifferentInvalidID() {\n        String expected = \"抱歉，找不到ID为 5 的图书。\";\n        String actual = library.findBookDetails(5);\n        assertEquals(expected, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private static Map<Long, String> bookDatabase = new HashMap<>();\n    static {\n        bookDatabase.put(1L, \"张三\");\n        bookDatabase.put(2L, \"李四\");\n    }\n    public static String fetchAuthorName(Long bookId) {\n        String authorName = bookDatabase.get(bookId);\n        if (authorName == null) {\n            return \"图书ID不存在\";\n        }\n        return authorName;\n    }\n    public static void checkFunction() {\n        System.out.println(fetchAuthorName(1L).equals(\"张三\") ? \"测试1通过\" : \"测试1失败\");\n        System.out.println(fetchAuthorName(2L).equals(\"李四\") ? \"测试2通过\" : \"测试2失败\");\n        System.out.println(fetchAuthorName(3L).equals(\"图书ID不存在\") ? \"测试3通过\" : \"测试3失败\");\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java function that retrieves the author name of a specified book from a simple book management system. Assume we have a `Book` class that includes the book's ID (`bookId`) and the author's name (`authorName`). You need to implement a function named `fetchAuthorName` that takes a book ID as a parameter and returns the corresponding book's author name. If the book ID does not exist, return a clear prompt string such as \"Book ID does not exist.\"\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private static Map<Long, String> bookDatabase = new HashMap<>();\n    static {\n    }\n    public static String fetchAuthorName(Long bookId) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1463, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class BookManagerTest {\n    @Test\n    public void testFetchAuthorName_ValidBookId1() {\n        String result = BookManager.fetchAuthorName(1L);\n        assertEquals(\"张三\", result);\n    }\n    @Test\n    public void testFetchAuthorName_ValidBookId2() {\n        String result = BookManager.fetchAuthorName(2L);\n        assertEquals(\"李四\", result);\n    }\n    @Test\n    public void testFetchAuthorName_InvalidBookId() {\n        String result = BookManager.fetchAuthorName(3L);\n        assertEquals(\"图书ID不存在\", result);\n    }\n    @Test\n    public void testFetchAuthorName_NullBookId() {\n        String result = BookManager.fetchAuthorName(null);\n        assertEquals(\"图书ID不存在\", result);\n    }\n    @Test\n    public void testFetchAuthorName_DifferentInvalidBookId() {\n        String result = BookManager.fetchAuthorName(99L);\n        assertEquals(\"图书ID不存在\", result);\n    }\n}"}}
{"canonical_solution": "import javax.swing.JComponent;\nimport javax.swing.JLabel;\npublic class DataViewUpdater {\n    public void updateViewStatus(JComponent errorDisplay, JComponent dataDisplay, boolean isDataRequestSuccessful) {\n        if (isDataRequestSuccessful) {\n            errorDisplay.setVisible(false);\n            dataDisplay.setVisible(true);\n        } else {\n            errorDisplay.setVisible(true);\n            dataDisplay.setVisible(false);\n        }\n    }\n    public static void main(String[] args) {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, true);\n        System.out.println(\"数据请求成功时的可见性状态：\");\n        System.out.println(\"错误消息可见性：\" + errorLabel.isVisible());\n        System.out.println(\"数据视图可见性：\" + dataLabel.isVisible());\n        updater.updateViewStatus(errorLabel, dataLabel, false);\n        System.out.println(\"数据请求失败时的可见性状态：\");\n        System.out.println(\"错误消息可见性：\" + errorLabel.isVisible());\n        System.out.println(\"数据视图可见性：\" + dataLabel.isVisible());\n    }\n}", "content": "Please write a Java method for toggling the display status in a graphical user interface. When the user requests data, we need to hide the error message and display the data view. Your method should be named `updateViewStatus` and accept two parameters: `errorDisplay` and `dataDisplay`, which represent the error message and the data view UI components, respectively. Use the `JComponent` class from the Java Swing library to represent these UI components, and in your method, set the visibility of these components according to the situation. If the data request is successful, hide the error message and display the data view; if the data request fails, perform the opposite action.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JComponent;\nimport javax.swing.JLabel;\npublic class DataViewUpdater {\n    public void updateViewStatus(JComponent errorDisplay, JComponent dataDisplay, boolean isDataRequestSuccessful) {\n    }\n}\n```", "id": 1464, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import javax.swing.JComponent;\nimport javax.swing.JLabel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DataViewUpdaterTest {\n    @Test\n    public void testUpdateViewStatus_DataRequestSuccessful() {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, true);\n        assertFalse(errorLabel.isVisible());\n        assertTrue(dataLabel.isVisible());\n    }\n    @Test\n    public void testUpdateViewStatus_DataRequestFailed() {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, false);\n        assertTrue(errorLabel.isVisible());\n        assertFalse(dataLabel.isVisible());\n    }\n    @Test\n    public void testUpdateViewStatus_InitiaVisibility() {\n        JLabel errorLabel = new JLabel(\"错误：无法加载数据。\");\n        JLabel dataLabel = new JLabel(\"数据加载成功！\");\n        errorLabel.setVisible(true);\n        dataLabel.setVisible(false);\n        DataViewUpdater updater = new DataViewUpdater();\n        updater.updateViewStatus(errorLabel, dataLabel, true);\n        assertFalse(errorLabel.isVisible());\n        assertTrue(dataLabel.isVisible());\n        updater.updateViewStatus(errorLabel, dataLabel, false);\n        assertTrue(errorLabel.isVisible());\n        assertFalse(dataLabel.isVisible());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class EntityTypeInformation {\n    public static String getEntityTypeInformation(String projectName, String entityTypeName) {\n        EntityTypeFetcher entityTypeFetcher = new EntityTypeFetcher();\n        return entityTypeFetcher.fetchEntityType(projectName, entityTypeName);\n    }\n    static class EntityTypeFetcher {\n        public String fetchEntityType(String projectName, String entityTypeName) {\n            Map<String, String> mockData = new HashMap<>();\n            mockData.put(\"ProjectA:EntityType1\", \"信息1\");\n            mockData.put(\"ProjectB:EntityType2\", \"信息2\");\n            return mockData.getOrDefault(projectName + \":\" + entityTypeName, \"未找到信息\");\n        }\n    }\n    public static void checkFunction() {\n        String result1 = getEntityTypeInformation(\"ProjectA\", \"EntityType1\");\n        System.out.println(\"查询结果1: \" + result1);\n        assert \"信息1\".equals(result1) : \"测试1失败\";\n        String result2 = getEntityTypeInformation(\"ProjectB\", \"EntityType2\");\n        System.out.println(\"查询结果2: \" + result2);\n        assert \"信息2\".equals(result2) : \"测试2失败\";\n        String result3 = getEntityTypeInformation(\"ProjectC\", \"EntityType3\");\n        System.out.println(\"查询结果3: \" + result3);\n        assert \"未找到信息\".equals(result3) : \"测试3失败\";\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java method that can query and return the entity type information in a specific project. The method should accept two string parameters: `projectName` and `entityTypeName`, and return a string representing the entity type information. Assume you already have a client class named `EntityTypeFetcher` with a method named `fetchEntityType` that takes a project name and an entity type name as parameters and returns information about the entity type.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class EntityTypeInformation {\n    public static String getEntityTypeInformation(String projectName, String entityTypeName) {\n    }\n    static class EntityTypeFetcher {\n        public String fetchEntityType(String projectName, String entityTypeName) {\n        }\n    }\n}\n```", "id": 1465, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class EntityTypeInformationTest {\n    @Test\n    public void testGetEntityTypeInformation_ExistingProjectAndEntityType() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectA\", \"EntityType1\");\n        assertEquals(\"信息1\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_ExistingProjectAndDifferentEntityType() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectB\", \"EntityType2\");\n        assertEquals(\"信息2\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_NonExistingProjectAndEntityType() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectC\", \"EntityType3\");\n        assertEquals(\"未找到信息\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_EmptyProjectName() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"\", \"EntityType1\");\n        assertEquals(\"未找到信息\", result);\n    }\n    @Test\n    public void testGetEntityTypeInformation_EmptyEntityTypeName() {\n        String result = EntityTypeInformation.getEntityTypeInformation(\"ProjectA\", \"\");\n        assertEquals(\"未找到信息\", result);\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class RectangleCalculator {\n    public static int calculateArea(int width, int height) {\n        if (width < 0 || height < 0) {\n            throw new IllegalArgumentException(\"宽度和高度必须非负。\");\n        }\n        return width * height;\n    }\n    public static void main(String[] args) {\n        int width = 5;\n        int height = 10;\n        int area = calculateArea(width, height);\n        System.out.println(\"矩形的面积是: \" + area);\n        checkCalculateArea();\n    }\n    private static void checkCalculateArea() {\n        assert calculateArea(5, 10) == 50 : \"计算错误\";\n        assert calculateArea(0, 0) == 0 : \"计算错误\";\n        try {\n            calculateArea(-1, 10);\n            System.out.println(\"应该抛出异常，但没有抛出。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"正确抛出异常，因为输入了负值。\");\n        }\n    }\n}", "content": "Please write a Java program to implement a class named `RectangleCalculator`, which contains a method `calculateArea` to calculate the area of a rectangle. The method accepts two integer parameters: the rectangle's width `width` and height `height`, and returns the calculated area.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class RectangleCalculator {\n    public static int calculateArea(int width, int height) {\n    }\n}\n```", "id": 1466, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class RectangleCalculatorTest {\n    @Test\n    public void testCalculateAreaPositiveValues() {\n        int width = 5;\n        int height = 10;\n        int expectedArea = 50;\n        int actualArea = RectangleCalculator.calculateArea(width, height);\n        assertEquals(expectedArea, actualArea);\n    }\n    @Test\n    public void testCalculateAreaZeroValues() {\n        int width = 0;\n        int height = 0;\n        int expectedArea = 0;\n        int actualArea = RectangleCalculator.calculateArea(width, height);\n        assertEquals(expectedArea, actualArea);\n    }\n    @Test\n    public void testCalculateAreaNegativeWidth() {\n        int width = -1;\n        int height = 10;\n        assertThrows(IllegalArgumentException.class, () -> {\n            RectangleCalculator.calculateArea(width, height);\n        });\n    }\n    @Test\n    public void testCalculateAreaNegativeHeight() {\n        int width = 10;\n        int height = -1;\n        assertThrows(IllegalArgumentException.class, () -> {\n            RectangleCalculator.calculateArea(width, height);\n        });\n    }\n    @Test\n    public void testCalculateAreaBothNegative() {\n        int width = -5;\n        int height = -10;\n        assertThrows(IllegalArgumentException.class, () -> {\n            RectangleCalculator.calculateArea(width, height);\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\nclass UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class UserCheckService {\n    private List<Long> existingUserIds = Arrays.asList(1001L, 1002L, 1003L, 1004L);\n    public void checkUserExistence(long userId) {\n        if (!existingUserIds.contains(userId)) {\n            throw new UserNotFoundException(\"用户记录未找到，ID: \" + userId);\n        }\n    }\n    public static void main(String[] args) {\n        UserCheckService service = new UserCheckService();\n        try {\n            service.checkUserExistence(1005L); \n        } catch (UserNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            service.checkUserExistence(1002L); \n            System.out.println(\"用户存在检查通过\");\n        } catch (UserNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Let's assume you are developing a backend service for an e-commerce platform, and you need to write a method to check whether a user exists in the database. If the user does not exist, your method should throw a custom exception indicating \"User record not found.\" Based on this requirement, design a Java method, and ensure your code snippet is fully self-contained, including necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nclass UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class UserCheckService {\n    private List<Long> existingUserIds = Arrays.asList(1001L, 1002L, 1003L, 1004L);\n    public void checkUserExistence(long userId) {\n    }\n}\n```", "id": 1467, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class UserCheckServiceTest {\n    private final UserCheckService service = new UserCheckService();\n    @Test\n    public void testUserExists() {\n        Assertions.assertDoesNotThrow(() -> service.checkUserExistence(1001L));\n    }\n    @Test\n    public void testUserNotFoundThrowsException() {\n        Assertions.assertThrows(UserNotFoundException.class, () -> service.checkUserExistence(1005L));\n    }\n    @Test\n    public void testUserNotFoundExceptionMessage() {\n        UserNotFoundException exception = Assertions.assertThrows(UserNotFoundException.class, () -> service.checkUserExistence(1006L));\n        Assertions.assertEquals(\"用户记录未找到，ID: 1006\", exception.getMessage());\n    }\n    @Test\n    public void testUserExistenceOnBoundary() {\n        Assertions.assertDoesNotThrow(() -> service.checkUserExistence(1004L));\n    }\n    @Test\n    public void testUserExistenceForNonExistingIdNegative() {\n        Assertions.assertThrows(UserNotFoundException.class, () -> service.checkUserExistence(-1L));\n    }\n}"}}
{"canonical_solution": "import java.lang.Math;\npublic class ImageScaler {\n    public static int computeScaleFactor(int originalWidth, int originalHeight, int targetWidth, int targetHeight) {\n        int scaleFactor = 1;\n        if (originalHeight > targetHeight || originalWidth > targetWidth) {\n            int halfHeight = originalHeight / 2;\n            int halfWidth = originalWidth / 2;\n            while ((halfHeight / scaleFactor) >= targetHeight && (halfWidth / scaleFactor) >= targetWidth) {\n                scaleFactor *= 2;\n            }\n        }\n        return scaleFactor;\n    }\n    public static void main(String[] args) {\n        int scaleFactor = computeScaleFactor(4000, 3000, 800, 600);\n        System.out.println(\"Recommended scale factor: \" + scaleFactor);\n    }\n}", "content": "How to design a Java method to calculate the appropriate scaling ratio for an image loaded into memory? Assume you need to load an image, but to save memory, you want to calculate a scaling ratio based on the original size of the image and the target display size. This scaling ratio should be a power of 2 (e.g., 1, 2, 4, 8...) to ensure the image does not lose too much quality when scaled. At the same time, the calculated scaling ratio should ensure that the width and height of the scaled image are not less than the target dimensions. Please design a method to achieve this functionality.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Math;\npublic class ImageScaler {\n    public static int computeScaleFactor(int originalWidth, int originalHeight, int targetWidth, int targetHeight) {\n    }\n}\n```", "id": 1468, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ImageScalerTest {\n    @Test\n    public void testComputeScaleFactor_NoScalingNeeded() {\n        int result = ImageScaler.computeScaleFactor(800, 600, 800, 600);\n        assertEquals(1, result);\n    }\n    @Test\n    public void testComputeScaleFactor_ScalingDown() {\n        int result = ImageScaler.computeScaleFactor(4000, 3000, 800, 600);\n        assertEquals(4, result);\n    }\n    @Test\n    public void testComputeScaleFactor_ScalingDownToDifferentAspectRatio() {\n        int result = ImageScaler.computeScaleFactor(4000, 3000, 1000, 800);\n        assertEquals(2, result);\n    }\n    @Test\n    public void testComputeScaleFactor_ExactFit() {\n        int result = ImageScaler.computeScaleFactor(2000, 1000, 1000, 500);\n        assertEquals(2, result);\n    }\n    @Test\n    public void testComputeScaleFactor_OneDimensionFits() {\n        int result = ImageScaler.computeScaleFactor(2000, 1000, 2000, 500);\n        assertEquals(1, result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class UserProfile {\n    private String description;\n    public UserProfile(String description) {\n        this.description = description;\n    }\n    public String getDescription() {\n        if (Objects.isNull(description)) {\n            setDescription(\"暂无描述\");\n        }\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    public static void checkDescription() {\n        UserProfile userWithDescription = new UserProfile(\"爱好编程\");\n        UserProfile userWithoutDescription = new UserProfile(null);\n        System.out.println(\"有描述的用户描述信息: \" + userWithDescription.getDescription()); \n        System.out.println(\"无描述的用户描述信息: \" + userWithoutDescription.getDescription()); \n    }\n    public static void main(String[] args) {\n        checkDescription();\n    }\n}", "content": "Please write a Java method that handles a user's personal description information. In our application, the user's description information may not be set yet, that is, it may be null. If the user's description information is null, we want to automatically generate a default description \"No description available\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class UserProfile {\n    private String description;\n    public UserProfile(String description) {\n    }\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n    }\n}\n```", "id": 1469, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class UserProfileTest {\n    @Test\n    public void testGetDescription_whenDescriptionIsNotNull() {\n        UserProfile userProfile = new UserProfile(\"爱好编程\");\n        assertEquals(\"爱好编程\", userProfile.getDescription());\n    }\n    @Test\n    public void testGetDescription_whenDescriptionIsNull() {\n        UserProfile userProfile = new UserProfile(null);\n        assertEquals(\"暂无描述\", userProfile.getDescription());\n    }\n    @Test\n    public void testSetDescription() {\n        UserProfile userProfile = new UserProfile(null);\n        userProfile.setDescription(\"新描述\");\n        assertEquals(\"新描述\", userProfile.getDescription());\n    }\n    @Test\n    public void testGetDescription_afterSettingDescription() {\n        UserProfile userProfile = new UserProfile(null);\n        userProfile.setDescription(\"新的描述\");\n        assertEquals(\"新的描述\", userProfile.getDescription());\n    }\n    @Test\n    public void testGetDescription_initialNonNullThenSetNull() {\n        UserProfile userProfile = new UserProfile(\"原描述\");\n        userProfile.setDescription(null);\n        assertEquals(\"暂无描述\", userProfile.getDescription());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass ProductService {\n    private Map<String, Double> productPrices = new HashMap<>();\n    public ProductService() {\n        productPrices.put(\"A123\", 99.99);\n        productPrices.put(\"B456\", 199.99);\n        productPrices.put(\"C789\", 299.99);\n    }\n    public void updateProductPrice(String productId, double newPrice) {\n        if (newPrice < 0) {\n            throw new IllegalArgumentException(\"价格不能为负数。\");\n        }\n        productPrices.put(productId, newPrice);\n    }\n    public double getProductPrice(String productId) {\n        return productPrices.getOrDefault(productId, -1.0);\n    }\n}\npublic class UpdatePriceDemo {\n    public static void main(String[] args) {\n        ProductService productService = new ProductService();\n        try {\n            productService.updateProductPrice(\"A123\", 109.99);\n            System.out.println(\"更新后的价格: \" + productService.getProductPrice(\"A123\"));\n            productService.updateProductPrice(\"B456\", -99.99);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method to update the price information for a product in an online store. The method should accept two parameters: one is the product ID (of type String), and the other is the new price (of type float). Assume we already have a class named `ProductService`, which has a method called `updateProductPrice` that can be used to update the product price. Additionally, make sure to verify that the new price is not negative before updating it. If the price is negative, the method should throw an `IllegalArgumentException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass ProductService {\n    private Map<String, Double> productPrices = new HashMap<>();\n    public ProductService() {\n    }\n    public void updateProductPrice(String productId, double newPrice) {\n    }\n    public double getProductPrice(String productId) {\n    }\n}\n```", "id": 1470, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nclass ProductServiceTest {\n    private ProductService productService;\n    @BeforeEach\n    public void setUp() {\n        productService = new ProductService();\n    }\n    @Test\n    public void testUpdateProductPriceSuccessfully() {\n        productService.updateProductPrice(\"A123\", 109.99);\n        assertEquals(109.99, productService.getProductPrice(\"A123\"));\n    }\n    @Test\n    public void testUpdateProductPriceWithNegativeValue() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            productService.updateProductPrice(\"B456\", -99.99);\n        });\n        assertEquals(\"价格不能为负数。\", exception.getMessage());\n    }\n    @Test\n    public void testGetProductPriceForNonExistingProduct() {\n        assertEquals(-1.0, productService.getProductPrice(\"X999\"));\n    }\n    @Test\n    public void testInitialProductPrice() {\n        assertEquals(99.99, productService.getProductPrice(\"A123\"));\n        assertEquals(199.99, productService.getProductPrice(\"B456\"));\n        assertEquals(299.99, productService.getProductPrice(\"C789\"));\n    }\n    @Test\n    public void testUpdatePriceMultipleTimes() {\n        productService.updateProductPrice(\"A123\", 109.99);\n        productService.updateProductPrice(\"A123\", 119.99);\n        assertEquals(119.99, productService.getProductPrice(\"A123\"));\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nclass ImageConfig {\n    private boolean centerCrop;\n    private int priority; \n    public ImageConfig() {\n    }\n    public ImageConfig centerCrop() {\n        this.centerCrop = true;\n        return this;\n    }\n    public ImageConfig priority(int priority) {\n        this.priority = priority;\n        return this;\n    }\n    public boolean isCenterCrop() {\n        return centerCrop;\n    }\n    public int getPriority() {\n        return priority;\n    }\n}\npublic class ImageLoader {\n    private static ImageConfig imageConfig;\n    private static final Lock lock = new ReentrantLock();\n    public static ImageConfig getImageConfig() {\n        if (imageConfig == null) {\n            lock.lock();\n            try {\n                if (imageConfig == null) {\n                    imageConfig = new ImageConfig()\n                            .centerCrop()\n                            .priority(1); \n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return imageConfig;\n    }\n    public static void main(String[] args) {\n        ImageConfig config = ImageLoader.getImageConfig();\n        System.out.println(\"CenterCrop: \" + config.isCenterCrop());\n        System.out.println(\"Priority: \" + config.getPriority());\n    }\n}", "content": "Please write a Java method that creates and returns an `ImageConfig` object configured with image loading parameters. If the object has already been created, the method should directly return the existing object; otherwise, it should create a new object and set the following parameters: crop the image to fit the center of the view, and set the loading priority to normal. Ensure that the method is thread-safe.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nclass ImageConfig {\n    private boolean centerCrop;\n    private int priority; \n    public ImageConfig() {\n    }\n    public ImageConfig centerCrop() {\n        return this;\n    }\n    public ImageConfig priority(int priority) {\n        return this;\n    }\n    public boolean isCenterCrop() {\n        return centerCrop;\n    }\n    public int getPriority() {\n        return priority;\n    }\n}\npublic class ImageLoader {\n    private static ImageConfig imageConfig;\n    private static final Lock lock = new ReentrantLock();\n    public static ImageConfig getImageConfig() {\n        return imageConfig;\n    }\n}\n```", "id": 1471, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nclass ImageLoaderTest {\n    @BeforeEach\n    void resetConfig() {\n        try {\n            java.lang.reflect.Field field = ImageLoader.class.getDeclaredField(\"imageConfig\");\n            field.setAccessible(true);\n            field.set(null, null);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n    @Test\n    void testGetImageConfigNotNull() {\n        ImageConfig config = ImageLoader.getImageConfig();\n        Assertions.assertNotNull(config);\n    }\n    @Test\n    void testGetImageConfigCenterCrop() {\n        ImageConfig config = ImageLoader.getImageConfig();\n        Assertions.assertTrue(config.isCenterCrop());\n    }\n    @Test\n    void testGetImageConfigPriority() {\n        ImageConfig config = ImageLoader.getImageConfig();\n        Assertions.assertEquals(1, config.getPriority());\n    }\n    @Test\n    void testGetImageConfigSingleton() {\n        ImageConfig config1 = ImageLoader.getImageConfig();\n        ImageConfig config2 = ImageLoader.getImageConfig();\n        Assertions.assertSame(config1, config2);\n    }\n    @Test\n    void testGetImageConfigThreadSafety() throws InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        for (int i = 0; i < 10; i++) {\n            executorService.execute(() -> {\n                ImageConfig config = ImageLoader.getImageConfig();\n                Assertions.assertTrue(config.isCenterCrop());\n                Assertions.assertEquals(1, config.getPriority());\n            });\n        }\n        executorService.shutdown();\n        while (!executorService.isTerminated()) {\n            Thread.sleep(100);\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass AppInstallAdMapper {\n    private String title;\n    public AppInstallAdMapper(String title) {\n        this.title = title;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\npublic class Advertisement {\n    private AppInstallAdMapper adMapper;\n    public Advertisement(AppInstallAdMapper adMapper) {\n        this.adMapper = adMapper;\n    }\n    public String getAdTitle() {\n        return adMapper.getTitle();\n    }\n}\nclass Main {\n    public static void main(String[] args) {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"安装最新游戏\");\n        Advertisement ad = new Advertisement(mapper);\n        checkAdTitle(ad.getAdTitle(), \"安装最新游戏\");\n    }\n    public static void checkAdTitle(String actualTitle, String expectedTitle) {\n        if (Objects.equals(actualTitle, expectedTitle)) {\n            System.out.println(\"广告标题检查通过: \" + actualTitle);\n        } else {\n            System.out.println(\"广告标题检查失败: 实际标题 - \" + actualTitle + \", 预期标题 - \" + expectedTitle);\n        }\n    }\n}", "content": "Please write a Java program that contains a class named `Advertisement`, which is used to manage information about app install advertisements. This class should have a private member variable `adMapper`, which is an instance of the `AppInstallAdMapper` class. The `AppInstallAdMapper` class has a method `getTitle()`, which is used to get the title of the advertisement. In the `Advertisement` class, implement a public method `getAdTitle()`, which calls the `getTitle()` method of `adMapper` and returns the advertisement title.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass AppInstallAdMapper {\n    private String title;\n    public AppInstallAdMapper(String title) {}\n    public String getTitle() {}\n}\npublic class Advertisement {\n    private AppInstallAdMapper adMapper;\n    public Advertisement(AppInstallAdMapper adMapper) {}\n    public String getAdTitle() {}\n}\n```", "id": 1472, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nclass AppInstallAdMapperTest {\n    @Test\n    void testGetTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"测试标题1\");\n        assertEquals(\"测试标题1\", mapper.getTitle());\n    }\n}\nclass AdvertisementTest {\n    @Test\n    void testGetAdTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"广告标题1\");\n        Advertisement ad = new Advertisement(mapper);\n        assertEquals(\"广告标题1\", ad.getAdTitle());\n    }\n    @Test\n    void testGetAdTitleWithDifferentTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"广告标题2\");\n        Advertisement ad = new Advertisement(mapper);\n        assertEquals(\"广告标题2\", ad.getAdTitle());\n    }\n    @Test\n    void testGetAdTitleWithEmptyTitle() {\n        AppInstallAdMapper mapper = new AppInstallAdMapper(\"\");\n        Advertisement ad = new Advertisement(mapper);\n        assertEquals(\"\", ad.getAdTitle());\n    }\n}"}}
{"canonical_solution": "import java.lang.reflect.Field;\nclass Employee {\n    private double salary;\n    public Employee(double salary) {\n        this.salary = salary;\n    }\n    public double getSalary() {\n        return salary;\n    }\n}\npublic class SalaryModifier {\n    public static void modifySalary(Employee employee, double newSalary) {\n        try {\n            Class<?> employeeClass = employee.getClass();\n            Field salaryField = employeeClass.getDeclaredField(\"salary\");\n            salaryField.setAccessible(true);\n            salaryField.set(employee, newSalary);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void check() {\n        Employee employee = new Employee(3000.0);\n        System.out.println(\"原始薪资: \" + employee.getSalary());\n        modifySalary(employee, 5000.0);\n        System.out.println(\"修改后薪资: \" + employee.getSalary());\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "Please design a Java program to demonstrate how to modify the value of a private member variable of a class through the reflection mechanism. In this example, we have a class named `Employee` that has a private member variable `salary`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.reflect.Field;\nclass Employee {\n    private double salary;\n    public Employee(double salary) {\n        \n    }\n    public double getSalary() {\n        \n    }\n}\npublic class SalaryModifier {\n    public static void modifySalary(Employee employee, double newSalary) {\n        \n    }\n    public static void check() {\n        \n    }\n}\n```", "id": 1473, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SalaryModifierTest {\n    @Test\n    public void testModifySalary() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 5000.0);\n        assertEquals(5000.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryToZero() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 0.0);\n        assertEquals(0.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryToNegative() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, -1000.0);\n        assertEquals(-1000.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryTwice() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 5000.0);\n        assertEquals(5000.0, employee.getSalary(), 0.001);\n        SalaryModifier.modifySalary(employee, 8000.0);\n        assertEquals(8000.0, employee.getSalary(), 0.001);\n    }\n    @Test\n    public void testModifySalaryWithLargeValue() {\n        Employee employee = new Employee(3000.0);\n        SalaryModifier.modifySalary(employee, 1_000_000.0);\n        assertEquals(1_000_000.0, employee.getSalary(), 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class StudentScoreFinder {\n    public String findScoreById(Map<String, Integer> scores, String studentId) {\n        if (scores.containsKey(studentId)) {\n            int score = scores.get(studentId);\n            return String.format(\"{\\\"id\\\": \\\"%s\\\", \\\"score\\\": \\\"%d\\\"}\", studentId, score);\n        } else {\n            return \"{\\\"error\\\": \\\"Student not found\\\"}\";\n        }\n    }\n    public static void main(String[] args) {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        scores.put(\"1002\", 85);\n        scores.put(\"1003\", 95);\n        System.out.println(finder.findScoreById(scores, \"1001\")); \n        System.out.println(finder.findScoreById(scores, \"1004\")); \n    }\n}", "content": "Please write a Java method that accepts two parameters: a list of student grades and the student ID to query. The purpose of this method is to find the specified student's grade and return it in JSON format. If the student's grade is found, the returned JSON should include the student's ID and grade; if not found, the returned JSON should indicate that the student's grade was not found. Please note that all keys and values should be enclosed in double quotes.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentScoreFinder {\n    public String findScoreById(Map<String, Integer> scores, String studentId) {\n    }\n}\n```", "id": 1474, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentScoreFinderTest {\n    @Test\n    public void testFindScoreById_studentExists() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        String result = finder.findScoreById(scores, \"1001\");\n        assertEquals(\"{\\\"id\\\": \\\"1001\\\", \\\"score\\\": \\\"90\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_studentNotFound() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        String result = finder.findScoreById(scores, \"1004\");\n        assertEquals(\"{\\\"error\\\": \\\"Student not found\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_anotherStudentExists() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        scores.put(\"1002\", 85);\n        String result = finder.findScoreById(scores, \"1002\");\n        assertEquals(\"{\\\"id\\\": \\\"1002\\\", \\\"score\\\": \\\"85\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_emptyMap() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        String result = finder.findScoreById(scores, \"1001\");\n        assertEquals(\"{\\\"error\\\": \\\"Student not found\\\"}\", result);\n    }\n    @Test\n    public void testFindScoreById_multipleStudents() {\n        StudentScoreFinder finder = new StudentScoreFinder();\n        Map<String, Integer> scores = new HashMap<>();\n        scores.put(\"1001\", 90);\n        scores.put(\"1002\", 85);\n        scores.put(\"1003\", 95);\n        String result1 = finder.findScoreById(scores, \"1001\");\n        String result2 = finder.findScoreById(scores, \"1002\");\n        String result3 = finder.findScoreById(scores, \"1003\");\n        assertEquals(\"{\\\"id\\\": \\\"1001\\\", \\\"score\\\": \\\"90\\\"}\", result1);\n        assertEquals(\"{\\\"id\\\": \\\"1002\\\", \\\"score\\\": \\\"85\\\"}\", result2);\n        assertEquals(\"{\\\"id\\\": \\\"1003\\\", \\\"score\\\": \\\"95\\\"}\", result3);\n    }\n}"}}
{"canonical_solution": "import java.io.*;\npublic class UserInfoProcessor {\n    public void processUsername(String username) {\n        switch (username != null ? 1 : 0) {\n            case 1:\n                System.out.println(username.length());\n                break;\n            case 0:\n                System.out.println(\"用户名为空\");\n                break;\n            default:\n                System.out.println(\"未知情况\");\n                break;\n        }\n    }\n    public static void main(String[] args) {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        processor.processUsername(null); \n        processor.processUsername(\"Alice\"); \n    }\n}", "content": "Please write a Java program that includes a class named `UserInfoProcessor` and a method named `processUsername`. The method should accept a string, which may be `null`, as a username and perform different actions based on whether the username is `null`.\n\nIf the username is not `null`, it should print the length of the username; if the username is `null`, it should print the message \"Username is null\". Ensure the code handles potential null pointer exceptions and use a `switch` statement within the method to simulate different scenarios.\n\nFollow the structure and requirements of the following code snippet to design your program:\n\n```java\nimport java.io.*;\n\npublic class UserInfoProcessor {\n    \n    public void processUsername(String username) {\n        // Method implementation\n    }\n}\n```\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.*;\npublic class UserInfoProcessor {\n    public void processUsername(String username) {\n    }\n}\n```", "id": 1475, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.io.*;\npublic class UserInfoProcessorTest {\n    @Test\n    public void testProcessUsernameWithNull() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(null);\n        assertEquals(\"用户名为空\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithValidUsername() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"Alice\");\n        assertEquals(\"5\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithEmptyString() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"\");\n        assertEquals(\"0\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithSpecialCharacters() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"!@#\");\n        assertEquals(\"3\\n\", outContent.toString());\n    }\n    @Test\n    public void testProcessUsernameWithWhitespace() throws Exception {\n        UserInfoProcessor processor = new UserInfoProcessor();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        processor.processUsername(\"   \");\n        assertEquals(\"3\\n\", outContent.toString());\n    }\n}"}}
{"canonical_solution": "import java.text.DecimalFormat;\npublic class TemperatureConverter {\n    public double convertToFahrenheit(double celsius) {\n        return celsius * 9 / 5 + 32;\n    }\n    public static void checkConversion() {\n        TemperatureConverter converter = new TemperatureConverter();\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        double[][] testData = {{0, 32}, {-40, -40}, {100, 212}};\n        for (double[] testPair : testData) {\n            double celsius = testPair[0];\n            double expectedFahrenheit = testPair[1];\n            double actualFahrenheit = converter.convertToFahrenheit(celsius);\n            assert df.format(actualFahrenheit).equals(df.format(expectedFahrenheit)) : \n                \"测试失败: 输入摄氏温度 \" + celsius + \" 应该转换为华氏温度 \" + expectedFahrenheit + \", 但得到 \" + actualFahrenheit;\n        }\n        System.out.println(\"所有测试通过！\");\n    }\n    public static void main(String[] args) {\n        checkConversion();\n    }\n}", "content": "Please write a Java program that implements a class named `TemperatureConverter`. The class should include a method `convertToFahrenheit(double celsius)` which takes a Celsius temperature value as a parameter and returns the corresponding Fahrenheit temperature value. The Fahrenheit temperature should be calculated using the following formula: Fahrenheit temperature = Celsius temperature * 9/5 + 32.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.text.DecimalFormat;\npublic class TemperatureConverter {\n    public double convertToFahrenheit(double celsius) {\n    }\n}\n```", "id": 1476, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class TemperatureConverterTest {\n    @Test\n    public void testConvertToFahrenheit() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(32.0, converter.convertToFahrenheit(0), 0.01);\n        assertEquals(-40.0, converter.convertToFahrenheit(-40), 0.01);\n        assertEquals(212.0, converter.convertToFahrenheit(100), 0.01);\n    }\n    @Test\n    public void testConvertToFahrenheitEdgeCase1() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(98.6, converter.convertToFahrenheit(37), 0.01);\n    }\n    @Test\n    public void testConvertToFahrenheitEdgeCase2() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(-459.67, converter.convertToFahrenheit(-273.15), 0.01);\n    }\n    @Test\n    public void testConvertToFahrenheitEdgeCase3() {\n        TemperatureConverter converter = new TemperatureConverter();\n        assertEquals(134.06, converter.convertToFahrenheit(56.7), 0.01);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class LoginChecker {\n    public static boolean checkLogin(String username, String password) {\n        String queryResult = simulateDatabaseQuery(username, password);\n        return Objects.nonNull(queryResult);\n    }\n    private static String simulateDatabaseQuery(String username, String password) {\n        if (\"admin\".equals(username) && \"123456\".equals(password)) {\n            return \"查询结果\";\n        } else {\n            return null;\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(checkLogin(\"admin\", \"123456\")); \n        System.out.println(checkLogin(\"user\", \"password\")); \n    }\n}", "content": "Please design a Java method to check if a user can successfully log in. In this scenario, we assume that there is a database table `users` which contains `username` and `password` fields. You need to write a method `checkLogin` that takes two string parameters: `username` and `password`. This method should return a boolean indicating if the given username and password match the records in the database. To simplify the problem, we will not actually connect to the database but simulate the process of querying the database. If the username and password combination is correct, assume the query will return a non-empty string; if incorrect, return `null`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class LoginChecker {\n    public static boolean checkLogin(String username, String password) {\n    }\n    private static String simulateDatabaseQuery(String username, String password) {\n    }\n}\n```", "id": 1477, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class LoginCheckerTest {\n    @Test\n    public void testValidLogin() {\n        assertTrue(LoginChecker.checkLogin(\"admin\", \"123456\"));\n    }\n    @Test\n    public void testInvalidUsername() {\n        assertFalse(LoginChecker.checkLogin(\"invalidUser\", \"123456\"));\n    }\n    @Test\n    public void testInvalidPassword() {\n        assertFalse(LoginChecker.checkLogin(\"admin\", \"wrongPassword\"));\n    }\n    @Test\n    public void testInvalidUsernameAndPassword() {\n        assertFalse(LoginChecker.checkLogin(\"invalidUser\", \"wrongPassword\"));\n    }\n    @Test\n    public void testNullInputs() {\n        assertFalse(LoginChecker.checkLogin(null, null));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class Validator {\n    public static <T> T ensureNotNull(T object, String errorMessageTemplate, Object... errorMessageArgs) {\n        if (object == null) {\n            throw new IllegalArgumentException(String.format(errorMessageTemplate, errorMessageArgs));\n        }\n        return object;\n    }\n    public static void main(String[] args) {\n        try {\n            ensureNotNull(null, \"传入的对象不能为null, 参数：%s\", \"测试参数\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            String result = ensureNotNull(\"非空字符串\", \"传入的对象不能为null\");\n            System.out.println(\"检查通过，返回值：\" + result);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method that verifies if the passed object is non-null. If the object is null, throw an `IllegalArgumentException` with a custom error message. The method should be able to accept objects of any type and allow users to customize the error message template and its parameters.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class Validator {\n    public static <T> T ensureNotNull(T object, String errorMessageTemplate, Object... errorMessageArgs) {\n    }\n}\n```", "id": 1478, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class ValidatorTest {\n    @Test\n    public void testEnsureNotNull_withNullObject_shouldThrowException() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Validator.ensureNotNull(null, \"传入的对象不能为null, 参数：%s\", \"测试参数\");\n        });\n    }\n    @Test\n    public void testEnsureNotNull_withValidObject_shouldReturnObject() {\n        String input = \"非空字符串\";\n        String result = Validator.ensureNotNull(input, \"传入的对象不能为null\");\n        assertEquals(input, result);\n    }\n    @Test\n    public void testEnsureNotNull_withNullObjectAndNoArgs_shouldThrowException() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Validator.ensureNotNull(null, \"传入的对象不能为null\");\n        });\n    }\n    @Test\n    public void testEnsureNotNull_withEmptyErrorMessage_shouldReturnObject() {\n        String input = \"任意字符串\";\n        String result = Validator.ensureNotNull(input, \"\");\n        assertEquals(input, result);\n    }\n    @Test\n    public void testEnsureNotNull_withValidObjectAndArguments_shouldReturnObject() {\n        String input = \"有效对象\";\n        String result = Validator.ensureNotNull(input, \"传入的对象不能为null, 参数：%s\", \"任意参数\");\n        assertEquals(input, result);\n    }\n}"}}
{"canonical_solution": "import java.math.BigDecimal;\nclass UserAddress {\n    private String floor;\n    private String fullAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public void setFloor(String floor) {\n        this.floor = floor;\n    }\n    public void setFullAddress(String fullAddress) {\n        this.fullAddress = fullAddress;\n    }\n    public void setInstruction(String instruction) {\n        this.instruction = instruction;\n    }\n    public void setTag(String tag) {\n        this.tag = tag;\n    }\n    public void setLatitude(BigDecimal latitude) {\n        this.latitude = latitude;\n    }\n    public void setLongitude(BigDecimal longitude) {\n        this.longitude = longitude;\n    }\n    public String getFloor() {\n        return floor;\n    }\n    public String getFullAddress() {\n        return fullAddress;\n    }\n    public String getInstruction() {\n        return instruction;\n    }\n    public String getTag() {\n        return tag;\n    }\n    public BigDecimal getLatitude() {\n        return latitude;\n    }\n    public BigDecimal getLongitude() {\n        return longitude;\n    }\n}\nclass UserAddressUpdateInfo {\n    private String floor;\n    private String completeAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public UserAddressUpdateInfo(String floor, String completeAddress, String instruction, String tag, BigDecimal latitude, BigDecimal longitude) {\n        this.floor = floor;\n        this.completeAddress = completeAddress;\n        this.instruction = instruction;\n        this.tag = tag;\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n    public String getFloor() {\n        return floor;\n    }\n    public String getCompleteAddress() {\n        return completeAddress;\n    }\n    public String getInstruction() {\n        return instruction;\n    }\n    public String getTag() {\n        return tag;\n    }\n    public BigDecimal getLatitude() {\n        return latitude;\n    }\n    public BigDecimal getLongitude() {\n        return longitude;\n    }\n}\npublic class AddressUpdater {\n    public static UserAddress updateAddress(UserAddressUpdateInfo updateInfo, UserAddress currentAddress) {\n        currentAddress.setFloor(updateInfo.getFloor());\n        currentAddress.setFullAddress(updateInfo.getCompleteAddress());\n        currentAddress.setInstruction(updateInfo.getInstruction());\n        currentAddress.setTag(updateInfo.getTag());\n        currentAddress.setLatitude(updateInfo.getLatitude());\n        currentAddress.setLongitude(updateInfo.getLongitude());\n        return currentAddress;\n    }\n    public static void main(String[] args) {\n        UserAddress currentAddress = new UserAddress();\n        UserAddressUpdateInfo updateInfo = new UserAddressUpdateInfo(\"12\", \"1234 Main St, Anytown\", \"Leave at door\", \"Home\", new BigDecimal(\"40.712776\"), new BigDecimal(\"-74.005974\"));\n        UserAddress updatedAddress = updateAddress(updateInfo, currentAddress);\n        System.out.println(\"Floor: \" + updatedAddress.getFloor());\n        System.out.println(\"Full Address: \" + updatedAddress.getFullAddress());\n        System.out.println(\"Instruction: \" + updatedAddress.getInstruction());\n        System.out.println(\"Tag: \" + updatedAddress.getTag());\n        System.out.println(\"Latitude: \" + updatedAddress.getLatitude());\n        System.out.println(\"Longitude: \" + updatedAddress.getLongitude());\n    }\n}", "content": "Please write a Java method to apply a user's address update information to their existing address record. This method should accept two parameters: a `UserAddressUpdateInfo` object containing the update information, and the user's current `UserAddress` object. The update information may include floor, full address, remark, label, latitude, and longitude. Ensure that all the provided information can be updated, and return the updated `UserAddress` object.\n\nNote: Delivery time preference field does not need to be handled.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.math.BigDecimal;\nclass UserAddress {\n    private String floor;\n    private String fullAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public void setFloor(String floor) {\n    }\n    public void setFullAddress(String fullAddress) {\n    }\n    public void setInstruction(String instruction) {\n    }\n    public void setTag(String tag) {\n    }\n    public void setLatitude(BigDecimal latitude) {\n    }\n    public void setLongitude(BigDecimal longitude) {\n    }\n    public String getFloor() {\n        return null;\n    }\n    public String getFullAddress() {\n        return null;\n    }\n    public String getInstruction() {\n        return null;\n    }\n    public String getTag() {\n        return null;\n    }\n    public BigDecimal getLatitude() {\n        return null;\n    }\n    public BigDecimal getLongitude() {\n        return null;\n    }\n}\nclass UserAddressUpdateInfo {\n    private String floor;\n    private String completeAddress;\n    private String instruction;\n    private String tag;\n    private BigDecimal latitude;\n    private BigDecimal longitude;\n    public UserAddressUpdateInfo(String floor, String completeAddress, String instruction, String tag, BigDecimal latitude, BigDecimal longitude) {\n    }\n    public String getFloor() {\n        return null;\n    }\n    public String getCompleteAddress() {\n        return null;\n    }\n    public String getInstruction() {\n        return null;\n    }\n    public String getTag() {\n        return null;\n    }\n    public BigDecimal getLatitude() {\n        return null;\n    }\n    public BigDecimal getLongitude() {\n        return null;\n    }\n}\npublic class AddressUpdater {\n    public static UserAddress updateAddress(UserAddressUpdateInfo updateInfo, UserAddress currentAddress) {\n        return null;\n    }\n}\n```", "id": 1479, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.math.BigDecimal;\nclass UserAddressTest {\n    private UserAddress userAddress;\n    @BeforeEach\n    void setUp() {\n        userAddress = new UserAddress();\n    }\n    @Test\n    void testSetAndGetFloor() {\n        userAddress.setFloor(\"10\");\n        assertEquals(\"10\", userAddress.getFloor());\n    }\n    @Test\n    void testSetAndGetFullAddress() {\n        userAddress.setFullAddress(\"1234 Main St, Anytown\");\n        assertEquals(\"1234 Main St, Anytown\", userAddress.getFullAddress());\n    }\n    @Test\n    void testSetAndGetInstruction() {\n        userAddress.setInstruction(\"Leave at door\");\n        assertEquals(\"Leave at door\", userAddress.getInstruction());\n    }\n    @Test\n    void testSetAndGetTag() {\n        userAddress.setTag(\"Home\");\n        assertEquals(\"Home\", userAddress.getTag());\n    }\n    @Test\n    void testSetAndGetLatitude() {\n        BigDecimal latitude = new BigDecimal(\"40.712776\");\n        userAddress.setLatitude(latitude);\n        assertEquals(latitude, userAddress.getLatitude());\n    }\n    @Test\n    void testSetAndGetLongitude() {\n        BigDecimal longitude = new BigDecimal(\"-74.005974\");\n        userAddress.setLongitude(longitude);\n        assertEquals(longitude, userAddress.getLongitude());\n    }\n}\nclass UserAddressUpdateInfoTest {\n    private UserAddressUpdateInfo updateInfo;\n    @BeforeEach\n    void setUp() {\n        updateInfo = new UserAddressUpdateInfo(\"12\", \"1234 Main St, Anytown\", \"Leave at door\", \"Home\", new BigDecimal(\"40.712776\"), new BigDecimal(\"-74.005974\"));\n    }\n    @Test\n    void testGetFloor() {\n        assertEquals(\"12\", updateInfo.getFloor());\n    }\n    @Test\n    void testGetCompleteAddress() {\n        assertEquals(\"1234 Main St, Anytown\", updateInfo.getCompleteAddress());\n    }\n    @Test\n    void testGetInstruction() {\n        assertEquals(\"Leave at door\", updateInfo.getInstruction());\n    }\n    @Test\n    void testGetTag() {\n        assertEquals(\"Home\", updateInfo.getTag());\n    }\n    @Test\n    void testGetLatitude() {\n        assertEquals(new BigDecimal(\"40.712776\"), updateInfo.getLatitude());\n    }\n    @Test\n    void testGetLongitude() {\n        assertEquals(new BigDecimal(\"-74.005974\"), updateInfo.getLongitude());\n    }\n}\nclass AddressUpdaterTest {\n    @Test\n    void testUpdateAddress() {\n        UserAddress currentAddress = new UserAddress();\n        UserAddressUpdateInfo updateInfo = new UserAddressUpdateInfo(\"12\", \"1234 Main St, Anytown\", \"Leave at door\", \"Home\", new BigDecimal(\"40.712776\"), new BigDecimal(\"-74.005974\"));\n        UserAddress updatedAddress = AddressUpdater.updateAddress(updateInfo, currentAddress);\n        assertEquals(\"12\", updatedAddress.getFloor());\n        assertEquals(\"1234 Main St, Anytown\", updatedAddress.getFullAddress());\n        assertEquals(\"Leave at door\", updatedAddress.getInstruction());\n        assertEquals(\"Home\", updatedAddress.getTag());\n        assertEquals(new BigDecimal(\"40.712776\"), updatedAddress.getLatitude());\n        assertEquals(new BigDecimal(\"-74.005974\"), updatedAddress.getLongitude());\n    }\n}"}}
{"canonical_solution": "public class CurrencyConverter {\n    public static double convertUsdToEur(double usdAmount) {\n        final double exchangeRate = 0.85; \n        return usdAmount * exchangeRate;\n    }\n    public static void main(String[] args) {\n        double usdAmount1 = 100; \n        double usdAmount2 = 50;  \n        System.out.println(\"100美元等于\" + convertUsdToEur(usdAmount1) + \"欧元\");\n        System.out.println(\"50美元等于\" + convertUsdToEur(usdAmount2) + \"欧元\");\n    }\n}", "content": "Please write a Java program to implement a simple currency converter. This converter should be able to convert dollars to euros. Assume that 1 dollar equals 0.85 euros. Define a class named `CurrencyConverter` and implement a method named `convertUsdToEur` in it. This method should accept a `double` type parameter representing the amount in dollars and return the converted amount in euros.\n\nPlease follow these guidelines:\n- Use clear variable naming.\n- Ensure that the code is self-contained and clear.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\npublic class CurrencyConverter {\n    public static double convertUsdToEur(double usdAmount) {\n    }\n}\n```", "id": 1480, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CurrencyConverterTest {\n    @Test\n    public void testConvertUsdToEur_withPositiveAmount() {\n        double usdAmount = 100;\n        double expectedEurAmount = 85; \n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount));\n    }\n    @Test\n    public void testConvertUsdToEur_withZeroAmount() {\n        double usdAmount = 0;\n        double expectedEurAmount = 0;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount));\n    }\n    @Test\n    public void testConvertUsdToEur_withNegativeAmount() {\n        double usdAmount = -50;\n        double expectedEurAmount = -42.5;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount));\n    }\n    @Test\n    public void testConvertUsdToEur_withFractionalAmount() {\n        double usdAmount = 123.45;\n        double expectedEurAmount = 104.9325;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount), 0.0001);\n    }\n    @Test\n    public void testConvertUsdToEur_withSmallAmount() {\n        double usdAmount = 0.01;\n        double expectedEurAmount = 0.0085;\n        assertEquals(expectedEurAmount, CurrencyConverter.convertUsdToEur(usdAmount), 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books = new HashMap<>();\n    public BookManager() {\n        books.put(\"978-3-16-148410-0\", \"Java编程思想\");\n        books.put(\"978-4-16-148410-1\", \"Effective Java\");\n        books.put(\"978-5-16-148410-2\", \"深入理解Java虚拟机\");\n    }\n    public boolean removeBookByIsbn(String isbn) {\n        if (books.containsKey(isbn)) {\n            books.remove(isbn); \n            return true;\n        } else {\n            return false; \n        }\n    }\n    public static void checkFunction() {\n        BookManager manager = new BookManager();\n        System.out.println(\"删除存在的图书（预期返回true）：\" + manager.removeBookByIsbn(\"978-3-16-148410-0\"));\n        System.out.println(\"删除不存在的图书（预期返回false）：\" + manager.removeBookByIsbn(\"978-0-00-000000-0\"));\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please implement a Java program for the book deletion feature of a simple library management system. The system should allow users to delete books by entering their ISBN number. If the book exists and is successfully deleted, it should return `true`; if the book does not exist, it should return `false`. Ensure that all relevant packages are imported at the beginning of your implementation.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books = new HashMap<>();\n    public BookManager() {\n    }\n    public boolean removeBookByIsbn(String isbn) {\n    }\n}\n```", "id": 1481, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    @Test\n    public void testRemoveBookByIsbn_BookExists() {\n        BookManager manager = new BookManager();\n        assertTrue(manager.removeBookByIsbn(\"978-3-16-148410-0\"));\n    }\n    @Test\n    public void testRemoveBookByIsbn_BookDoesNotExist() {\n        BookManager manager = new BookManager();\n        assertFalse(manager.removeBookByIsbn(\"978-0-00-000000-0\"));\n    }\n    @Test\n    public void testRemoveBookByIsbn_RemoveTwice() {\n        BookManager manager = new BookManager();\n        manager.removeBookByIsbn(\"978-3-16-148410-0\");\n        assertFalse(manager.removeBookByIsbn(\"978-3-16-148410-0\"));\n    }\n    @Test\n    public void testRemoveBookByIsbn_NullIsbn() {\n        BookManager manager = new BookManager();\n        assertFalse(manager.removeBookByIsbn(null));\n    }\n    @Test\n    public void testRemoveBookByIsbn_EmptyIsbn() {\n        BookManager manager = new BookManager();\n        assertFalse(manager.removeBookByIsbn(\"\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class BookSearchSystem {\n    private List<Book> booksDatabase = new ArrayList<>();\n    public BookSearchSystem() {\n        booksDatabase.add(new Book(\"Java编程思想\", \"科技\", \"Bruce Eckel\"));\n        booksDatabase.add(new Book(\"三体\", \"小说\", \"刘慈欣\"));\n        booksDatabase.add(new Book(\"Effective Java\", \"科技\", \"Joshua Bloch\"));\n        booksDatabase.add(new Book(\"教育心理学\", \"教育\", \"某教育学者\"));\n    }\n    public List<Book> searchBooks(String type, String keyword, int page, int limit) {\n        return booksDatabase.stream()\n                .filter(book -> book.getType().equals(type) && (book.getName().contains(keyword) || book.getAuthor().contains(keyword)))\n                .skip((long) (page - 1) * limit)\n                .limit(limit)\n                .collect(Collectors.toList());\n    }\n    public void check() {\n        System.out.println(\"搜索结果1: \" + searchBooks(\"科技\", \"Java\", 1, 2));\n        System.out.println(\"搜索结果2: \" + searchBooks(\"小说\", \"三体\", 1, 1));\n    }\n    public static void main(String[] args) {\n        new BookSearchSystem().check();\n    }\n    static class Book {\n        private String name;\n        private String type;\n        private String author;\n        public Book(String name, String type, String author) {\n            this.name = name;\n            this.type = type;\n            this.author = author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"name='\" + name + '\\'' +\n                    \", type='\" + type + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n        public String getName() {\n            return name;\n        }\n        public String getType() {\n            return type;\n        }\n        public String getAuthor() {\n            return author;\n        }\n    }\n}", "content": "Please implement the book search function in a simple library management system. This function needs to search for books based on their category and keywords, and supports displaying the results in pages. The specific requirements are as follows:\n\n- It needs to search for books based on their category (e.g., novels, technology, education, etc.) and keywords (e.g., part of the book title or author's name).\n- The search results need to support pagination, which means displaying a fixed number of book information per page.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class BookSearchSystem {\n    private List<Book> booksDatabase = new ArrayList<>();\n    public BookSearchSystem() {\n    }\n    public List<Book> searchBooks(String type, String keyword, int page, int limit) {\n    }\n    public void check() {\n    }\n    static class Book {\n        private String name;\n        private String type;\n        private String author;\n        public Book(String name, String type, String author) {\n        }\n        @Override\n        public String toString() {\n        }\n        public String getName() {\n        }\n        public String getType() {\n        }\n        public String getAuthor() {\n        }\n    }\n}\n```", "id": 1482, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.util.List;\npublic class BookSearchSystemTest {\n    @Test\n    public void testSearchBooksTechnologyByJavaKeyword() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"科技\", \"Java\", 1, 2);\n        assertEquals(2, result.size());\n        assertTrue(result.stream().allMatch(book -> book.getType().equals(\"科技\")));\n    }\n    @Test\n    public void testSearchBooksNovelByThreeBodyKeyword() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"小说\", \"三体\", 1, 1);\n        assertEquals(1, result.size());\n        assertEquals(\"三体\", result.get(0).getName());\n    }\n    @Test\n    public void testSearchBooksEducationByKeyword() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"教育\", \"某教育学者\", 1, 1);\n        assertEquals(1, result.size());\n        assertEquals(\"教育心理学\", result.get(0).getName());\n    }\n    @Test\n    public void testSearchExceedingLimit() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"科技\", \"Java\", 1, 3);\n        assertEquals(2, result.size());\n    }\n    @Test\n    public void testSearchWithPagination() {\n        BookSearchSystem system = new BookSearchSystem();\n        List<BookSearchSystem.Book> result = system.searchBooks(\"科技\", \"Java\", 2, 1);\n        assertEquals(1, result.size());\n        assertEquals(\"Effective Java\", result.get(0).getName());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class DiscountCategoryDecider {\n    public static String determineDiscountCategory(int age, boolean isMember) {\n        if (isMember) {\n            return age > 60 ? \"高级折扣\" : \"普通折扣\";\n        } else {\n            return \"无折扣\";\n        }\n    }\n    public static void main(String[] args) {\n        Map<String, Object> testCases = new HashMap<>();\n        testCases.put(\"高级折扣\", new Object[]{65, true});\n        testCases.put(\"普通折扣\", new Object[]{45, true});\n        testCases.put(\"无折扣\", new Object[]{70, false});\n        testCases.forEach((expected, params) -> {\n            Object[] arr = (Object[]) params;\n            int age = (int) arr[0];\n            boolean isMember = (boolean) arr[1];\n            String result = determineDiscountCategory(age, isMember);\n            System.out.println(\"预期结果: \" + expected + \", 实际结果: \" + result + \"。测试\" + (expected.equals(result) ? \"通过\" : \"未通过\"));\n        });\n    }\n}", "content": "Please write a Java method to determine the discount category based on the user's age and membership status. If the user is a member and over 60 years old, they should be classified into the Senior Discount category. Otherwise, if they are a member but not over 60 years old, they should be classified into the Regular Discount category. Non-members do not receive any discount. Ensure your method can return the correct discount category based on the provided user information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DiscountCategoryDecider {\n    public static String determineDiscountCategory(int age, boolean isMember) {\n    }\n}\n```", "id": 1483, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class DiscountCategoryDeciderTest {\n    @Test\n    public void testSeniorMemberDiscount() {\n        assertEquals(\"高级折扣\", DiscountCategoryDecider.determineDiscountCategory(65, true));\n    }\n    @Test\n    public void testRegularMemberDiscount() {\n        assertEquals(\"普通折扣\", DiscountCategoryDecider.determineDiscountCategory(45, true));\n    }\n    @Test\n    public void testNoMemberSeniorDiscount() {\n        assertEquals(\"无折扣\", DiscountCategoryDecider.determineDiscountCategory(70, false));\n    }\n    @Test\n    public void testNonSeniorMemberDiscount() {\n        assertEquals(\"普通折扣\", DiscountCategoryDecider.determineDiscountCategory(30, true));\n    }\n    @Test\n    public void testNonSeniorNonMemberDiscount() {\n        assertEquals(\"无折扣\", DiscountCategoryDecider.determineDiscountCategory(30, false));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Objects;\nclass BookEntry {\n    String title;\n    String author;\n    public BookEntry(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof BookEntry)) return false;\n        BookEntry bookEntry = (BookEntry) o;\n        return Objects.equals(title, bookEntry.title) &&\n                Objects.equals(author, bookEntry.author);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(title, author);\n    }\n}\npublic class BookManager {\n    ArrayList<BookEntry> bookEntries = new ArrayList<>();\n    public void manageBooks(ArrayList<BookEntry> newEntries, boolean update) {\n        if (update) {\n            bookEntries.clear();\n            bookEntries.addAll(newEntries);\n        } else {\n            for (BookEntry entry : newEntries) {\n                if (!bookEntries.contains(entry)) {\n                    bookEntries.add(entry);\n                }\n            }\n        }\n    }\n    public static void checkFunction() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        System.out.println(\"After first addition: \" + manager.bookEntries.size()); \n        ArrayList<BookEntry> newEntries = new ArrayList<>();\n        newEntries.add(new BookEntry(\"Book1\", \"Author1\")); \n        newEntries.add(new BookEntry(\"Book3\", \"Author3\"));\n        manager.manageBooks(newEntries, false);\n        System.out.println(\"After second addition without update: \" + manager.bookEntries.size()); \n        manager.manageBooks(newEntries, true);\n        System.out.println(\"After update: \" + manager.bookEntries.size()); \n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a program to implement a simple book management system. In this system, you need to manage a series of book entries. Each book entry contains a title and an author. You need to implement a method that receives a new list of book entries and a boolean value. If the boolean value is true, update existing entries; if false, only add non-existing entries. Ensure that your implementation can avoid adding duplicate entries.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Objects;\nclass BookEntry {\n    String title;\n    String author;\n    public BookEntry(String title, String author) {\n    }\n    @Override\n    public boolean equals(Object o) {\n    }\n    @Override\n    public int hashCode() {\n    }\n}\npublic class BookManager {\n    ArrayList<BookEntry> bookEntries = new ArrayList<>();\n    public void manageBooks(ArrayList<BookEntry> newEntries, boolean update) {\n    }\n}\n```", "id": 1484, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nclass BookEntryTest {\n    @Test\n    void testEqualsAndHashCode() {\n        BookEntry entry1 = new BookEntry(\"Title1\", \"Author1\");\n        BookEntry entry2 = new BookEntry(\"Title1\", \"Author1\");\n        BookEntry entry3 = new BookEntry(\"Title2\", \"Author2\");\n        assertEquals(entry1, entry2);\n        assertNotEquals(entry1, entry3);\n        assertEquals(entry1.hashCode(), entry2.hashCode());\n        assertNotEquals(entry1.hashCode(), entry3.hashCode());\n    }\n}\nclass BookManagerTest {\n    @Test\n    void testManageBooksAddWithoutUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        assertEquals(2, manager.bookEntries.size());\n    }\n    @Test\n    void testManageBooksAddWithDuplicatesWithoutUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        ArrayList<BookEntry> newEntries = new ArrayList<>();\n        newEntries.add(new BookEntry(\"Book1\", \"Author1\"));\n        newEntries.add(new BookEntry(\"Book3\", \"Author3\"));\n        manager.manageBooks(newEntries, false);\n        assertEquals(3, manager.bookEntries.size());\n    }\n    @Test\n    void testManageBooksWithUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        entries.add(new BookEntry(\"Book1\", \"Author1\"));\n        entries.add(new BookEntry(\"Book2\", \"Author2\"));\n        manager.manageBooks(entries, false);\n        ArrayList<BookEntry> newEntries = new ArrayList<>();\n        newEntries.add(new BookEntry(\"Book1\", \"Author1\"));\n        newEntries.add(new BookEntry(\"Book3\", \"Author3\"));\n        manager.manageBooks(newEntries, true);\n        assertEquals(2, manager.bookEntries.size());\n        assertEquals(new BookEntry(\"Book1\", \"Author1\"), manager.bookEntries.get(0));\n        assertEquals(new BookEntry(\"Book3\", \"Author3\"), manager.bookEntries.get(1));\n    }\n    @Test\n    void testEmptyManageBooksWithUpdate() {\n        BookManager manager = new BookManager();\n        ArrayList<BookEntry> entries = new ArrayList<>();\n        manager.manageBooks(entries, true);\n        assertEquals(0, manager.bookEntries.size());\n    }\n    @Test\n    void testInitialEmptyManager() {\n        BookManager manager = new BookManager();\n        assertEquals(0, manager.bookEntries.size());\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nclass VoteButton {\n    String text; \n    String callbackData; \n    public VoteButton(String text, String callbackData) {\n        this.text = text;\n        this.callbackData = callbackData;\n    }\n    public void setCallbackData(String callbackData) {\n        this.callbackData = callbackData;\n    }\n    public String getText() {\n        return text;\n    }\n    public String getCallbackData() {\n        return callbackData;\n    }\n}\nclass VoteSystem {\n    public List<List<VoteButton>> generateVoteButtons() {\n        VoteButton agree = new VoteButton(\"赞成\", \"voteYes\");\n        VoteButton disagree = new VoteButton(\"反对\", \"voteNo\");\n        return List.of(List.of(agree, disagree)); \n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        VoteSystem voteSystem = new VoteSystem();\n        List<List<VoteButton>> buttons = voteSystem.generateVoteButtons();\n        for (List<VoteButton> buttonList : buttons) {\n            for (VoteButton button : buttonList) {\n                System.out.println(\"按钮文本: \" + button.getText() + \", 回调数据: \" + button.getCallbackData());\n            }\n        }\n    }\n}", "content": "Please write a Java method that generates a simple voting system, allowing users to choose \"Yes\" or \"No\" by clicking buttons. The method should return an object containing two buttons (\"Yes\" and \"No\"). Each button should have a label, \"voteYes\" and \"voteNo\" respectively, for subsequent processing of the user's choice.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nclass VoteButton {\n    String text; \n    String callbackData; \n    public VoteButton(String text, String callbackData) {\n    }\n    public void setCallbackData(String callbackData) {\n    }\n    public String getText() {\n    }\n    public String getCallbackData() {\n    }\n}\nclass VoteSystem {\n    public List<List<VoteButton>> generateVoteButtons() {\n    }\n}\n```", "id": 1485, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nclass VoteButtonTest {\n    @Test\n    void testVoteButtonConstructor() {\n        VoteButton button = new VoteButton(\"测试文本\", \"测试回调\");\n        assertEquals(\"测试文本\", button.getText());\n        assertEquals(\"测试回调\", button.getCallbackData());\n    }\n    @Test\n    void testSetCallbackData() {\n        VoteButton button = new VoteButton(\"测试文本\", \"初始回调\");\n        button.setCallbackData(\"修改后的回调\");\n        assertEquals(\"修改后的回调\", button.getCallbackData());\n    }\n    @Test\n    void testGetText() {\n        VoteButton button = new VoteButton(\"测试文本\", \"测试回调\");\n        assertEquals(\"测试文本\", button.getText());\n    }\n    @Test\n    void testGetCallbackData() {\n        VoteButton button = new VoteButton(\"测试文本\", \"测试回调\");\n        assertEquals(\"测试回调\", button.getCallbackData());\n    }\n}\nclass VoteSystemTest {\n    @Test\n    void testGenerateVoteButtons() {\n        VoteSystem voteSystem = new VoteSystem();\n        List<List<VoteButton>> buttons = voteSystem.generateVoteButtons();\n        assertEquals(1, buttons.size());\n        assertEquals(2, buttons.get(0).size());\n        VoteButton agree = buttons.get(0).get(0);\n        assertEquals(\"赞成\", agree.getText());\n        assertEquals(\"voteYes\", agree.getCallbackData());\n        VoteButton disagree = buttons.get(0).get(1);\n        assertEquals(\"反对\", disagree.getText());\n        assertEquals(\"voteNo\", disagree.getCallbackData());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class StudentInfoManager {\n    private Map<String, Integer> studentScores;\n    public StudentInfoManager() {\n        studentScores = new HashMap<>();\n    }\n    public void addOrUpdateStudent(String name, Integer score) {\n        studentScores.put(name, score);\n    }\n    public Integer queryScoreByName(String name) {\n        return studentScores.get(name);\n    }\n    public void deleteStudent(String name) {\n        studentScores.remove(name);\n    }\n    public static void main(String[] args) {\n        StudentInfoManager manager = new StudentInfoManager();\n        manager.addOrUpdateStudent(\"张三\", 90);\n        manager.addOrUpdateStudent(\"李四\", 85);\n        System.out.println(\"张三的成绩: \" + manager.queryScoreByName(\"张三\")); \n        manager.addOrUpdateStudent(\"张三\", 95);\n        System.out.println(\"张三更新后的成绩: \" + manager.queryScoreByName(\"张三\")); \n        manager.deleteStudent(\"李四\");\n        System.out.println(\"删除李四后，查询李四的成绩: \" + manager.queryScoreByName(\"李四\")); \n    }\n}", "content": "Please design a Java class named `Student Information Management System` that can implement the following functions:\n\n- Add student information, including student name and grades.\n- Query grades based on the student's name.\n- Update a student's grades.\n- Delete student information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentInfoManager {\n    private Map<String, Integer> studentScores;\n    public StudentInfoManager() {\n    }\n    public void addOrUpdateStudent(String name, Integer score) {\n    }\n    public Integer queryScoreByName(String name) {\n        return null;\n    }\n    public void deleteStudent(String name) {\n    }\n}\n```", "id": 1486, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StudentInfoManagerTest {\n    private StudentInfoManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new StudentInfoManager();\n    }\n    @Test\n    public void testAddOrUpdateStudent() {\n        manager.addOrUpdateStudent(\"张三\", 90);\n        Integer score = manager.queryScoreByName(\"张三\");\n        assertEquals(90, score);\n    }\n    @Test\n    public void testUpdateExistingStudent() {\n        manager.addOrUpdateStudent(\"张三\", 90);\n        manager.addOrUpdateStudent(\"张三\", 95);\n        Integer score = manager.queryScoreByName(\"张三\");\n        assertEquals(95, score);\n    }\n    @Test\n    public void testQueryScoreByName() {\n        manager.addOrUpdateStudent(\"李四\", 85);\n        Integer score = manager.queryScoreByName(\"李四\");\n        assertEquals(85, score);\n    }\n    @Test\n    public void testDeleteStudent() {\n        manager.addOrUpdateStudent(\"李四\", 85);\n        manager.deleteStudent(\"李四\");\n        Integer score = manager.queryScoreByName(\"李四\");\n        assertNull(score);\n    }\n    @Test\n    public void testDeleteNonExistingStudent() {\n        manager.deleteStudent(\"王五\");\n        Integer score = manager.queryScoreByName(\"王五\");\n        assertNull(score);\n    }\n}"}}
{"canonical_solution": "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileCopier {\n    public static void copyTextFile(String sourcePath, String targetPath) throws IOException {\n        FileReader fileReader = null;\n        FileWriter fileWriter = null;\n        try {\n            fileReader = new FileReader(sourcePath);\n            fileWriter = new FileWriter(targetPath);\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                fileWriter.write(character);\n            }\n        } finally {\n            if (fileReader != null) {\n                fileReader.close();\n            }\n            if (fileWriter != null) {\n                fileWriter.close();\n            }\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            copyTextFile(\"source.txt\", \"target.txt\");\n            System.out.println(\"文件复制成功！\");\n        } catch (IOException e) {\n            System.out.println(\"在复制文件时发生错误：\" + e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method to copy the contents of a text file to another new text file. The method should accept two parameters: the source file path and the target file path. Ensure that during the copying process, if the target file does not exist, it is automatically created. Also, handle all possible IO exceptions and ensure that all used resources are properly closed after the operation is complete.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileCopier {\n    public static void copyTextFile(String sourcePath, String targetPath) throws IOException {\n    }\n}\n```", "id": 1487, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileCopierTest {\n    @Test\n    public void testCopyTextFile_Success() throws IOException {\n        String sourcePath = \"testSource.txt\";\n        String targetPath = \"testTarget.txt\";\n        try (FileWriter fileWriter = new FileWriter(sourcePath)) {\n            fileWriter.write(\"Hello World!\");\n        }\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        StringBuilder content = new StringBuilder();\n        try (FileReader fileReader = new FileReader(targetPath)) {\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                content.append((char) character);\n            }\n        }\n        assertEquals(\"Hello World!\", content.toString());\n    }\n    @Test\n    public void testCopyTextFile_EmptyFile() throws IOException {\n        String sourcePath = \"testEmptySource.txt\";\n        String targetPath = \"testEmptyTarget.txt\";\n        new File(sourcePath).createNewFile();\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        File targetFile = new File(targetPath);\n        assertTrue(targetFile.exists());\n        assertEquals(0, targetFile.length());\n    }\n    @Test\n    public void testCopyTextFile_NonExistingSourceFile() {\n        String sourcePath = \"nonExistingSource.txt\";\n        String targetPath = \"shouldNotExist.txt\";\n        assertThrows(IOException.class, () -> {\n            FileCopier.copyTextFile(sourcePath, targetPath);\n        });\n    }\n    @Test\n    public void testCopyTextFile_TargetFileExists() throws IOException {\n        String sourcePath = \"testSourceOverwrite.txt\";\n        String targetPath = \"testTargetOverwrite.txt\";\n        try (FileWriter sourceWriter = new FileWriter(sourcePath)) {\n            sourceWriter.write(\"New Content\");\n        }\n        try (FileWriter targetWriter = new FileWriter(targetPath)) {\n            targetWriter.write(\"Old Content\");\n        }\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        StringBuilder content = new StringBuilder();\n        try (FileReader fileReader = new FileReader(targetPath)) {\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                content.append((char) character);\n            }\n        }\n        assertEquals(\"New Content\", content.toString());\n    }\n    @Test\n    public void testCopyTextFile_SpecialCharacters() throws IOException {\n        String sourcePath = \"testSpecialCharactersSource.txt\";\n        String targetPath = \"testSpecialCharactersTarget.txt\";\n        String specialContent = \"Spécial Chârâctèrs! 中文字符\";\n        try (FileWriter fileWriter = new FileWriter(sourcePath)) {\n            fileWriter.write(specialContent);\n        }\n        FileCopier.copyTextFile(sourcePath, targetPath);\n        StringBuilder content = new StringBuilder();\n        try (FileReader fileReader = new FileReader(targetPath)) {\n            int character;\n            while ((character = fileReader.read()) != -1) {\n                content.append((char) character);\n            }\n        }\n        assertEquals(specialContent, content.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.UUID;\nimport java.util.regex.Pattern;\npublic class UserIdentifierGenerator {\n    public static String generateUserId(String email, String phone) {\n        if (email != null && !email.isEmpty() && isValidEmail(email)) {\n            return email;\n        } else if (phone != null && !phone.isEmpty()) {\n            return phone;\n        } else {\n            String uuid = UUID.randomUUID().toString();\n            return uuid.replaceAll(\"-\", \"\");\n        }\n    }\n    private static boolean isValidEmail(String email) {\n        String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        Pattern pattern = Pattern.compile(emailRegex);\n        return pattern.matcher(email).matches();\n    }\n    public static void main(String[] args) {\n        System.out.println(generateUserId(\"example@example.com\", \"1234567890\")); \n        System.out.println(generateUserId(\"\", \"1234567890\")); \n        System.out.println(generateUserId(\"\", \"\")); \n        System.out.println(generateUserId(null, null)); \n        System.out.println(generateUserId(\"invalidEmail@\", \"1234567890\")); \n    }\n}", "content": "Please write a Java function that generates a unique user identifier. If possible, first attempt to use the user's email address as the identifier. If the email address is empty or incorrectly formatted, then use the user's phone number. If the phone number is also unavailable, generate a random UUID as the user identifier. Ensure that the UUID does not contain any hyphens. Consider exception handling in the implementation, and make sure the returned identifier is a non-empty string.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.UUID;\nimport java.util.regex.Pattern;\npublic class UserIdentifierGenerator {\n    public static String generateUserId(String email, String phone) {\n    }\n    private static boolean isValidEmail(String email) {\n    }\n}\n```", "id": 1488, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class UserIdentifierGeneratorTest {\n    @Test\n    public void testGenerateUserIdWithValidEmail() {\n        String email = \"example@example.com\";\n        String phone = \"1234567890\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertEquals(email, result);\n    }\n    @Test\n    public void testGenerateUserIdWithInvalidEmailAndValidPhone() {\n        String email = \"invalidEmail@\";\n        String phone = \"1234567890\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertEquals(phone, result);\n    }\n    @Test\n    public void testGenerateUserIdWithEmptyEmailAndPhone() {\n        String email = \"\";\n        String phone = \"\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertNotNull(result);\n        assertNotEquals(email, result);\n        assertNotEquals(phone, result);\n    }\n    @Test\n    public void testGenerateUserIdWithNullEmailAndPhone() {\n        String email = null;\n        String phone = null;\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertNotNull(result);\n    }\n    @Test\n    public void testGenerateUserIdWithEmptyEmailAndValidPhone() {\n        String email = \"\";\n        String phone = \"1234567890\";\n        String result = UserIdentifierGenerator.generateUserId(email, phone);\n        assertEquals(phone, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ColumnValueConverter {\n    private Map<Integer, Object> columnData;\n    public ColumnValueConverter() {\n        columnData = new HashMap<>();\n    }\n    public void setColumnValue(int col, Object value) {\n        columnData.put(col, value);\n    }\n    public int getIntegerFromColumn(int col) {\n        Object value = columnData.get(col);\n        if (value == null) {\n            return 0;\n        }\n        if (value instanceof Boolean) {\n            return (Boolean) value ? 1 : 0;\n        }\n        try {\n            return Integer.parseInt(value.toString());\n        } catch (NumberFormatException e) {\n            try {\n                return (int) Double.parseDouble(value.toString());\n            } catch (NumberFormatException ex) {\n                throw new IllegalArgumentException(\"无法将列值转换为整数。\");\n            }\n        }\n    }\n    public static void main(String[] args) {\n        ColumnValueConverter converter = new ColumnValueConverter();\n        converter.setColumnValue(1, null);\n        converter.setColumnValue(2, true);\n        converter.setColumnValue(3, false);\n        converter.setColumnValue(4, \"123\");\n        converter.setColumnValue(5, \"123.456\");\n        converter.setColumnValue(6, \"非数字\");\n        assert converter.getIntegerFromColumn(1) == 0 : \"列值为null时应返回0\";\n        assert converter.getIntegerFromColumn(2) == 1 : \"列值为true时应返回1\";\n        assert converter.getIntegerFromColumn(3) == 0 : \"列值为false时应返回0\";\n        assert converter.getIntegerFromColumn(4) == 123 : \"列值为数字字符串时应转换为整数\";\n        assert converter.getIntegerFromColumn(5) == 123 : \"列值为浮点数字符串时应转换为整数\";\n        try {\n            converter.getIntegerFromColumn(6);\n            assert false : \"列值为非数字字符串时应抛出异常\";\n        } catch (IllegalArgumentException e) {\n            assert true : \"列值为非数字字符串时应抛出异常\";\n        }\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "Please write a Java method that accepts an integer parameter representing a column index, and returns the column value converted to an integer. If the column value is null, return 0. If the column value is of boolean type, return 1 (true) or 0 (false). If the column value is of another type, attempt to convert it to an integer. If it cannot be directly converted, try to convert it to a double, then to an integer. Ensure that the code can handle possible exceptions.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ColumnValueConverter {\n    private Map<Integer, Object> columnData;\n    public ColumnValueConverter() {\n    }\n    public void setColumnValue(int col, Object value) {\n    }\n    public int getIntegerFromColumn(int col) {\n    }\n}\n```", "id": 1489, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class ColumnValueConverterTest {\n    private ColumnValueConverter converter;\n    @BeforeEach\n    public void setUp() {\n        converter = new ColumnValueConverter();\n    }\n    @Test\n    public void testColumnValueIsNull() {\n        converter.setColumnValue(1, null);\n        Assertions.assertEquals(0, converter.getIntegerFromColumn(1), \"列值为null时应返回0\");\n    }\n    @Test\n    public void testColumnValueIsTrue() {\n        converter.setColumnValue(2, true);\n        Assertions.assertEquals(1, converter.getIntegerFromColumn(2), \"列值为true时应返回1\");\n    }\n    @Test\n    public void testColumnValueIsFalse() {\n        converter.setColumnValue(3, false);\n        Assertions.assertEquals(0, converter.getIntegerFromColumn(3), \"列值为false时应返回0\");\n    }\n    @Test\n    public void testColumnValueIsIntegerString() {\n        converter.setColumnValue(4, \"123\");\n        Assertions.assertEquals(123, converter.getIntegerFromColumn(4), \"列值为数字字符串时应转换为整数\");\n    }\n    @Test\n    public void testColumnValueIsDoubleString() {\n        converter.setColumnValue(5, \"123.456\");\n        Assertions.assertEquals(123, converter.getIntegerFromColumn(5), \"列值为浮点数字符串时应转换为整数\");\n    }\n    @Test\n    public void testColumnValueIsNonNumericString() {\n        converter.setColumnValue(6, \"非数字\");\n        Assertions.assertThrows(IllegalArgumentException.class, () -> converter.getIntegerFromColumn(6), \"列值为非数字字符串时应抛出异常\");\n    }\n}"}}
{"canonical_solution": "import java.lang.StringBuilder;\npublic class AdRequestGenerator {\n    public static String generateAdRequestParams(String adUnitType, String adUnitID, int adUnitPrice) {\n        StringBuilder params = new StringBuilder();\n        params.append(\"packageName=yourPackageName\");\n        params.append(\"&deviceID=yourDeviceID\");\n        params.append(\"&googleAID=yourGoogleAID\");\n        params.append(\"&networkType=yourNetworkType\");\n        params.append(\"&adType=\").append(adUnitType);\n        params.append(\"&adID=\").append(adUnitID);\n        params.append(\"&priceLevel=\").append(adUnitPrice);\n        return params.toString();\n    }\n    public static void main(String[] args) {\n        String adUnitType = \"video\";\n        String adUnitID = \"ad123\";\n        int adUnitPrice = 5;\n        String requestParams = generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        System.out.println(requestParams);\n    }\n}", "content": "Please write a Java method to generate and return a specific format string. This string is based on incoming ad unit information (including ad unit type, ad unit ID, and ad unit price) and some fixed parameters. This string is primarily used for network request parameters. Ensure your solution meets the following requirements:\n\n- The method name should be `generateAdRequestParams`.\n- The method takes three parameters: `adUnitType` (ad unit type, of type `String`), `adUnitID` (ad unit ID, of type `String`), and `adUnitPrice` (ad unit price, of type `int`).\n- The string format is as follows: `\"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=adUnitType&adID=adUnitID&priceLevel=adUnitPrice\"`. Where `yourPackageName`, `yourDeviceID`, `yourGoogleAID`, and `yourNetworkType` are fixed string values, while `adUnitType`, `adUnitID`, and `adUnitPrice` are dynamically generated based on the method parameters.\n- Use the `&` symbol to connect each parameter.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.StringBuilder;\npublic class AdRequestGenerator {\n    public static String generateAdRequestParams(String adUnitType, String adUnitID, int adUnitPrice) {\n    }\n}\n```", "id": 1490, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class AdRequestGeneratorTest {\n    @Test\n    public void testGenerateAdRequestParams_ValidInput() {\n        String adUnitType = \"banner\";\n        String adUnitID = \"123abc\";\n        int adUnitPrice = 10;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=banner&adID=123abc&priceLevel=10\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_EmptyAdType() {\n        String adUnitType = \"\";\n        String adUnitID = \"123abc\";\n        int adUnitPrice = 10;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=&adID=123abc&priceLevel=10\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_EmptyAdID() {\n        String adUnitType = \"video\";\n        String adUnitID = \"\";\n        int adUnitPrice = 5;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=video&adID=&priceLevel=5\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_NegativePrice() {\n        String adUnitType = \"native\";\n        String adUnitID = \"ad123\";\n        int adUnitPrice = -1;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=native&adID=ad123&priceLevel=-1\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n    @Test\n    public void testGenerateAdRequestParams_ZeroPrice() {\n        String adUnitType = \"interstitial\";\n        String adUnitID = \"ad456\";\n        int adUnitPrice = 0;\n        String expected = \"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=interstitial&adID=ad456&priceLevel=0\";\n        String actual = AdRequestGenerator.generateAdRequestParams(adUnitType, adUnitID, adUnitPrice);\n        assertEquals(expected, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.ArrayList;\npublic class StringListProcessor {\n    public String getStringAtIndex(List<String> stringList, String indexStr) {\n        try {\n            int index = Integer.parseInt(indexStr);\n            return stringList.get(index);\n        } catch (NumberFormatException e) {\n            return \"错误：索引不是有效的数字。\";\n        } catch (IndexOutOfBoundsException e) {\n            return \"错误：索引超出范围。\";\n        }\n    }\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        System.out.println(processor.getStringAtIndex(list, \"1\")); \n        System.out.println(processor.getStringAtIndex(list, \"5\")); \n        System.out.println(processor.getStringAtIndex(list, \"abc\")); \n    }\n}", "content": "Please write a Java method that accepts a list of strings and a string index, then returns the corresponding string at the index in the list. If the index is invalid (e.g., out of range or not a number), the method should catch the exception and return a specific error message. Ensure that your method gracefully handles these potential exceptional cases.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\npublic class StringListProcessor {\n    public String getStringAtIndex(List<String> stringList, String indexStr) {\n    }\n}\n```", "id": 1491, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class StringListProcessorTest {\n    @Test\n    public void testGetStringAtIndex_validIndex() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"Python\", processor.getStringAtIndex(list, \"1\"));\n    }\n    @Test\n    public void testGetStringAtIndex_indexOutOfBound() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"错误：索引超出范围。\", processor.getStringAtIndex(list, \"5\"));\n    }\n    @Test\n    public void testGetStringAtIndex_invalidIndex() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"错误：索引不是有效的数字。\", processor.getStringAtIndex(list, \"abc\"));\n    }\n    @Test\n    public void testGetStringAtIndex_zeroIndex() {\n        List<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        list.add(\"C++\");\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"Java\", processor.getStringAtIndex(list, \"0\"));\n    }\n    @Test\n    public void testGetStringAtIndex_emptyList() {\n        List<String> list = new ArrayList<>();\n        StringListProcessor processor = new StringListProcessor();\n        assertEquals(\"错误：索引超出范围。\", processor.getStringAtIndex(list, \"0\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class LibraryManager {\n    private List<Book> books;\n    public LibraryManager() {\n        this.books = new ArrayList<>();\n    }\n    public String addBook(String title, String author) {\n        for (Book book : books) {\n            if (book.getTitle().equals(title) && book.getAuthor().equals(author)) {\n                return \"书籍已存在。\";\n            }\n        }\n        books.add(new Book(title, author));\n        return \"书籍添加成功。\";\n    }\n    private static class Book {\n        private String title;\n        private String author;\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n        public String getTitle() {\n            return title;\n        }\n        public String getAuthor() {\n            return author;\n        }\n    }\n    public static void main(String[] args) {\n        LibraryManager libraryManager = new LibraryManager();\n        System.out.println(libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\")); \n        System.out.println(libraryManager.addBook(\"Effective Java\", \"Joshua Bloch\")); \n        System.out.println(libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\")); \n    }\n}", "content": "Please design a simple Java program to manage the book information of a library. Each book contains a title and an author's name. You need to implement a method that accepts the title and the author's name as parameters. If the book already exists in the library, return a message indicating that the book already exists; if not, add the book to the library and return a message indicating that the addition was successful.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class LibraryManager {\n    private List<Book> books;\n    public LibraryManager() {\n    }\n    public String addBook(String title, String author) {\n    }\n    private static class Book {\n        private String title;\n        private String author;\n        public Book(String title, String author) {\n        }\n        public String getTitle() {\n        }\n        public String getAuthor() {\n        }\n    }\n}\n```", "id": 1492, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class LibraryManagerTest {\n    @Test\n    void testAddBookOnce() {\n        LibraryManager libraryManager = new LibraryManager();\n        String result = libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n    @Test\n    void testAddBookTwiceDifferent() {\n        LibraryManager libraryManager = new LibraryManager();\n        libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String result = libraryManager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n    @Test\n    void testAddDuplicateBook() {\n        LibraryManager libraryManager = new LibraryManager();\n        libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String result = libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"书籍已存在。\", result);\n    }\n    @Test\n    void testAddBookWithDifferentAuthor() {\n        LibraryManager libraryManager = new LibraryManager();\n        libraryManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String result = libraryManager.addBook(\"Java编程思想\", \"Another Author\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n    @Test\n    void testAddBookWithoutTitle() {\n        LibraryManager libraryManager = new LibraryManager();\n        String result = libraryManager.addBook(\"\", \"Some Author\");\n        assertEquals(\"书籍添加成功。\", result);\n    }\n}"}}
{"canonical_solution": "public class StringEditor {\n    private StringBuilder content;\n    public StringEditor() {\n        this.content = new StringBuilder();\n    }\n    public void addText(String text) {\n        content.append(text);\n    }\n    public void replaceChar(int index, char newChar) {\n        if (index >= 0 && index < content.length()) {\n            content.setCharAt(index, newChar);\n        }\n    }\n    public void deleteChar(int index) {\n        if (index >= 0 && index < content.length()) {\n            content.deleteCharAt(index);\n        }\n    }\n    @Override\n    public String toString() {\n        return content.toString();\n    }\n    public static void main(String[] args) {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        System.out.println(editor); \n        editor.replaceChar(1, 'a');\n        System.out.println(editor); \n        editor.deleteChar(4);\n        System.out.println(editor); \n    }\n}", "content": "Please write a Java program to implement a simple text editor that can perform text addition, replacement, and deletion operations. The specific requirements are as follows:\n\n1. Use the `StringEditor` class to implement this text editor.\n2. In the `StringEditor` class, use `StringBuilder` to store and manipulate the text string.\n3. Implement the `addText` method, which accepts a string parameter and appends it to the end of the current text.\n4. Implement the `replaceChar` method, which accepts two parameters: the position of the character to be replaced (starting from 0) and the new character, then replaces the character at the specified position.\n5. Implement the `deleteChar` method, which accepts one parameter: the position of the character to be deleted (starting from 0), then deletes the character at that position.\n\nPlease note that all operations should be as efficient as possible.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\npublic class StringEditor {\n    private StringBuilder content;\n    public StringEditor() {\n    }\n    public void addText(String text) {\n    }\n    public void replaceChar(int index, char newChar) {\n    }\n    public void deleteChar(int index) {\n    }\n    @Override\n    public String toString() {\n    }\n}\n```", "id": 1493, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class StringEditorTest {\n    @Test\n    void testAddText() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        assertEquals(\"hello\", editor.toString());\n    }\n    @Test\n    void testReplaceChar() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.replaceChar(1, 'a');\n        assertEquals(\"hallo\", editor.toString());\n    }\n    @Test\n    void testReplaceCharOutOfBounds() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.replaceChar(5, 'a'); \n        assertEquals(\"hello\", editor.toString());\n    }\n    @Test\n    void testDeleteChar() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.deleteChar(4);\n        assertEquals(\"hell\", editor.toString());\n    }\n    @Test\n    void testDeleteCharOutOfBounds() {\n        StringEditor editor = new StringEditor();\n        editor.addText(\"hello\");\n        editor.deleteChar(5);\n        assertEquals(\"hello\", editor.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class CsvUtil {\n    public static String prepareForCsv(String input) {\n        if (input == null) {\n            return \"\";\n        }\n        String escapedInput = input.replace(\"\\\"\", \"\\\"\\\"\");\n        return \"\\\"\" + escapedInput + \"\\\"\";\n    }\n    public static void main(String[] args) {\n        System.out.println(checkPrepareForCsv(null, \"\"));\n        System.out.println(checkPrepareForCsv(\"\", \"\\\"\\\"\"));\n        System.out.println(checkPrepareForCsv(\"Hello\", \"\\\"Hello\\\"\"));\n        System.out.println(checkPrepareForCsv(\"Hello\\\"World\", \"\\\"Hello\\\"\\\"World\\\"\"));\n    }\n    private static boolean checkPrepareForCsv(String input, String expected) {\n        return Objects.equals(prepareForCsv(input), expected);\n    }\n}", "content": "Please write a Java method to process a string so that it is suitable for a CSV file format. Specifically, if the string contains special characters (such as double quotes), these characters need to be escaped. Additionally, the string should be enclosed in double quotes regardless of whether it contains special characters. Please follow these rules:\n\n1. If the input string is null, return an empty string.\n2. If the input string is empty, return two double quotes (\"\").\n3. If the input string contains double quotes (\"), replace each double quote with two double quotes (\"\").\n4. After applying the above rules, enclose the entire string with a pair of double quotes.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class CsvUtil {\n    public static String prepareForCsv(String input) {\n    }\n}\n```", "id": 1494, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class CsvUtilTest {\n    @Test\n    public void testPrepareForCsv_NullInput() {\n        String result = CsvUtil.prepareForCsv(null);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_EmptyString() {\n        String result = CsvUtil.prepareForCsv(\"\");\n        assertEquals(\"\\\"\\\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_SimpleString() {\n        String result = CsvUtil.prepareForCsv(\"Hello\");\n        assertEquals(\"\\\"Hello\\\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_StringWithQuote() {\n        String result = CsvUtil.prepareForCsv(\"Hello\\\"World\");\n        assertEquals(\"\\\"Hello\\\"\\\"World\\\"\", result);\n    }\n    @Test\n    public void testPrepareForCsv_OnlyQuotes() {\n        String result = CsvUtil.prepareForCsv(\"\\\"\\\"\");\n        assertEquals(\"\\\"\\\"\\\"\\\"\\\"\\\"\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public static int calculate(int num1, int num2, char operator) {\n        switch (operator) {\n            case '+':\n                return num1 + num2;\n            case '-':\n                return num1 - num2;\n            case '*':\n                return num1 * num2;\n            case '/':\n                if (num2 == 0) {\n                    throw new IllegalArgumentException(\"除数不能为0\");\n                }\n                return num1 / num2;\n            default:\n                throw new IllegalArgumentException(\"无效的运算符: \" + operator);\n        }\n    }\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入第一个整数:\");\n        int num1 = scanner.nextInt();\n        System.out.println(\"请输入第二个整数:\");\n        int num2 = scanner.nextInt();\n        System.out.println(\"请输入运算符('+', '-', '*', '/'):\");\n        char operator = scanner.next().charAt(0);\n        try {\n            int result = calculate(num1, num2, operator);\n            System.out.println(\"运算结果是: \" + result);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator should include a method `calculate` that takes three parameters: two integers `num1` and `num2`, and a character `operator`. Based on the `operator` specified ('+', '-', '*', '/'), it performs the corresponding arithmetic operation on `num1` and `num2`, and returns the result. If `operator` is an invalid operator, the method should throw an `IllegalArgumentException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public static int calculate(int num1, int num2, char operator) {\n    }\n}\n```", "id": 1495, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddition() {\n        int result = SimpleCalculator.calculate(3, 5, '+');\n        assertEquals(8, result);\n    }\n    @Test\n    public void testSubtraction() {\n        int result = SimpleCalculator.calculate(10, 4, '-');\n        assertEquals(6, result);\n    }\n    @Test\n    public void testMultiplication() {\n        int result = SimpleCalculator.calculate(6, 7, '*');\n        assertEquals(42, result);\n    }\n    @Test\n    public void testDivision() {\n        int result = SimpleCalculator.calculate(20, 4, '/');\n        assertEquals(5, result);\n    }\n    @Test\n    public void testDivisionByZero() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            SimpleCalculator.calculate(10, 0, '/');\n        });\n        assertEquals(\"除数不能为0\", exception.getMessage());\n    }\n    @Test\n    public void testInvalidOperator() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            SimpleCalculator.calculate(10, 5, '%');\n        });\n        assertEquals(\"无效的运算符: %\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Arrays;\npublic class FileReaderUtil {\n    public static String readUntilChar(String filePath, char[] stopChars) throws IOException {\n        StringBuilder content = new StringBuilder();\n        FileReader reader = null;\n        try {\n            reader = new FileReader(filePath);\n            int c;\n            while ((c = reader.read()) != -1) {\n                if (Arrays.binarySearch(stopChars, (char) c) >= 0) {\n                    break;\n                }\n                content.append((char) c);\n            }\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }\n        return content.toString();\n    }\n    public static void checkFunction() {\n        String testFilePath = \"testFile.txt\"; \n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'}; \n        try {\n            String result = readUntilChar(testFilePath, stopChars);\n            System.out.println(\"读取的内容（直到遇到指定字符）: \" + result);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java method that reads characters from a text file until one of the specified characters is encountered. The method should return a string containing all the characters from the start of the file up to (but not including) the first occurrence of any of the specified characters. If none of the specified characters are found in the file, the method should return the entire content of the file.\n\nPlease follow these guidelines:\n- The method should accept two parameters: one is a string representing the file path, and the other is a character array containing the specified stopping characters.\n- Use exception handling to deal with potential file reading errors.\n- Ensure the file is closed after reading is completed.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Arrays;\npublic class FileReaderUtil {\n    public static String readUntilChar(String filePath, char[] stopChars) throws IOException {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1496, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.io.*;\npublic class FileReaderUtilTest {\n    @Test\n    public void testReadUntilCharStopCharFound() throws IOException {\n        String content = \"hello world\";\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        try (FileWriter writer = new FileWriter(tempFile)) {\n            writer.write(content);\n        }\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(\"h\", result);\n    }\n    @Test\n    public void testReadUntilCharNoStopChar() throws IOException {\n        String content = \"bcdfg\";\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        try (FileWriter writer = new FileWriter(tempFile)) {\n            writer.write(content);\n        }\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(content, result);\n    }\n    @Test\n    public void testReadUntilCharEmptyFile() throws IOException {\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testReadUntilCharImmediateStopChar() throws IOException {\n        String content = \"ahello world\";\n        File tempFile = File.createTempFile(\"testFile\", \".txt\");\n        tempFile.deleteOnExit();\n        try (FileWriter writer = new FileWriter(tempFile)) {\n            writer.write(content);\n        }\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        String result = FileReaderUtil.readUntilChar(tempFile.getAbsolutePath(), stopChars);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testReadUntilCharIOException() {\n        String filePath = \"nonexistentfile.txt\";\n        char[] stopChars = {'a', 'e', 'i', 'o', 'u'};\n        assertThrows(IOException.class, () -> {\n            FileReaderUtil.readUntilChar(filePath, stopChars);\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookSearchManager {\n    private List<String> allBooks;\n    private List<String> filteredBooks;\n    public BookSearchManager() {\n        allBooks = new ArrayList<>();\n        allBooks.add(\"Java编程思想\");\n        allBooks.add(\"深入理解Java虚拟机\");\n        allBooks.add(\"Effective Java\");\n        allBooks.add(\"Python编程从入门到实践\");\n        allBooks.add(\"算法导论\");\n    }\n    public List<String> searchBooks(String keyword) {\n        if (keyword == null || keyword.trim().isEmpty()) {\n            return allBooks;\n        } else {\n            filteredBooks = new ArrayList<>();\n            for (String book : allBooks) {\n                if (book.toLowerCase().contains(keyword.toLowerCase())) {\n                    filteredBooks.add(book);\n                }\n            }\n            return filteredBooks;\n        }\n    }\n    public static void main(String[] args) {\n        BookSearchManager manager = new BookSearchManager();\n        System.out.println(\"搜索 'Java': \" + manager.searchBooks(\"Java\"));\n        System.out.println(\"搜索空字符串: \" + manager.searchBooks(\"\"));\n    }\n}", "content": "Please design a Java program to manage a book search function for a library. When the user enters a search keyword, the program should return all book titles that contain that keyword. If the user does not enter anything (i.e., the input is an empty string), it should return all books. Ensure that your solution is self-contained and includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookSearchManager {\n    private List<String> allBooks;\n    private List<String> filteredBooks;\n    public BookSearchManager() {}\n    public List<String> searchBooks(String keyword) {}\n}\n```", "id": 1497, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Test;\nimport java.util.List;\npublic class BookSearchManagerTest {\n    @Test\n    public void testSearchBooksWithKeyword() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"Java\");\n        Assert.assertEquals(3, result.size());\n        Assert.assertTrue(result.contains(\"Java编程思想\"));\n        Assert.assertTrue(result.contains(\"深入理解Java虚拟机\"));\n        Assert.assertTrue(result.contains(\"Effective Java\"));\n    }\n    @Test\n    public void testSearchBooksWithEmptyString() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"\");\n        Assert.assertEquals(5, result.size());\n    }\n    @Test\n    public void testSearchBooksWithNull() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(null);\n        Assert.assertEquals(5, result.size());\n    }\n    @Test\n    public void testSearchBooksWithNonExistingKeyword() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"C++\");\n        Assert.assertTrue(result.isEmpty());\n    }\n    @Test\n    public void testSearchBooksCaseInsensitiveKeyword() {\n        BookSearchManager manager = new BookSearchManager();\n        List<String> result = manager.searchBooks(\"java\");\n        Assert.assertEquals(3, result.size());\n        Assert.assertTrue(result.contains(\"Java编程思想\"));\n        Assert.assertTrue(result.contains(\"深入理解Java虚拟机\"));\n        Assert.assertTrue(result.contains(\"Effective Java\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class TextEditor {\n    private String fontSize = \"12\"; \n    public void changeFontSize() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"------------------------\");\n        System.out.print(\"请输入新的字体大小: \");\n        String newFontSize = scanner.nextLine();\n        if (newFontSize.equals(fontSize)) {\n            System.out.println(\"------------------------\");\n            System.out.println(\"字体大小未改变。\");\n            System.out.println(\"========================\");\n        } else {\n            fontSize = newFontSize;\n            System.out.println(\"------------------------\");\n            System.out.println(\"字体大小已更新为: \" + fontSize);\n            System.out.println(\"========================\");\n        }\n    }\n    public static void main(String[] args) {\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize(); \n    }\n}", "content": "Please implement a simple text editor feature that allows users to set the font size. Users can change the font size of the text by entering the desired size. If the user's input matches the current font size, inform the user that no change has occurred. Otherwise, update the font size and notify the user that the font size has been changed. Ensure the program handles user inputs and provides clear prompt information before and after changing the font size.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class TextEditor {\n    private String fontSize = \"12\"; \n    public void changeFontSize() {\n    }\n}\n```", "id": 1498, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\npublic class TextEditorTest {\n    @Test\n    public void testChangeFontSizeNoChange() {\n        String simulatedInput = \"12\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeChange() {\n        String simulatedInput = \"14\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeInvalidInput() {\n        String simulatedInput = \"abc\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeEmptyInput() {\n        String simulatedInput = \"\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n    @Test\n    public void testChangeFontSizeLargeInput() {\n        String simulatedInput = \"1000\\n\";\n        InputStream originalIn = System.in;\n        System.setIn(new ByteArrayInputStream(simulatedInput.getBytes()));\n        TextEditor editor = new TextEditor();\n        editor.changeFontSize();\n        System.setIn(originalIn);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass Book {\n    private Date addedDate; \n    public Book(Date addedDate) {\n        this.addedDate = addedDate;\n    }\n    public Date getAddedDate() {\n        return addedDate;\n    }\n}\npublic class Library {\n    private List<Book> books = new ArrayList<>();\n    public void addBook(Book book) {\n        books.add(book);\n    }\n    public int countBooksAddedBetween(Date start, Date end) {\n        int count = 0;\n        for (Book book : books) {\n            Date addedDate = book.getAddedDate();\n            if (!addedDate.before(start) && !addedDate.after(end)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void main(String[] args) {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 5, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        System.out.println(\"新增图书数量: \" + count); \n    }\n}", "content": "Please determine the number of new books added to an online library in a specific time period. Each book in the library has an entry date, and you need to determine whether the book was added during the given period based on this date. Ensure that the solution can accept two dates as input (start date and end date), and return the number of new books added during that period. Note that the start date and end date are inclusive, meaning if the book's entry date is equal to the start date or end date, it should also be counted.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass Book {\n    private Date addedDate; \n    public Book(Date addedDate) {\n    }\n    public Date getAddedDate() {\n        return null;\n    }\n}\npublic class Library {\n    private List<Book> books = new ArrayList<>();\n    public void addBook(Book book) {\n    }\n    public int countBooksAddedBetween(Date start, Date end) {\n        return 0;\n    }\n}\n```", "id": 1499, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Date;\npublic class LibraryTest {\n    @Test\n    public void testAddBook() {\n        Library library = new Library();\n        library.addBook(new Book(new Date()));\n        assertEquals(1, library.countBooksAddedBetween(new Date(Long.MIN_VALUE), new Date()));\n    }\n    @Test\n    public void testCountBooksAddedBetween() {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 5, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(2, count);\n    }\n    @Test\n    public void testCountBooksAddedBetweenNoBooks() {\n        Library library = new Library();\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 5, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(0, count);\n    }\n    @Test\n    public void testCountBooksAddedBetweenAllBooks() {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 4, 1);\n        Date end = new Date(122, 6, 30);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(3, count);\n    }\n    @Test\n    public void testCountBooksAddedBetweenEdgeCases() {\n        Library library = new Library();\n        library.addBook(new Book(new Date(122, 4, 15))); \n        library.addBook(new Book(new Date(122, 5, 10)));\n        library.addBook(new Book(new Date(122, 6, 20)));\n        Date start = new Date(122, 5, 10);\n        Date end = new Date(122, 6, 20);\n        int count = library.countBooksAddedBetween(start, end);\n        assertEquals(2, count);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class FileUtil {\n    public static boolean isImageType(String fileName) {\n        List<String> supportedTypes = Arrays.asList(\".jpg\", \".png\", \".gif\", \".bmp\");\n        String extension = \"\";\n        int i = fileName.lastIndexOf('.');\n        if (i > 0) {\n            extension = fileName.substring(i).toLowerCase();\n        }\n        return supportedTypes.contains(extension);\n    }\n    public static void check() {\n        System.out.println(isImageType(\"photo.jpg\") == true ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"document.pdf\") == false ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"image.png\") == true ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"animation.gif\") == true ? \"正确\" : \"错误\");\n        System.out.println(isImageType(\"archive.rar\") == false ? \"正确\" : \"错误\");\n    }\n    public static void main(String[] args) {\n        check(); \n    }\n}", "content": "Please write a Java method to check if a given file extension represents an image file. The supported image file types include `.jpg`, `.png`, `.gif`, and `.bmp`. If the file extension matches one of these types, the method should return `true`, otherwise it should return `false`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class FileUtil {\n    public static boolean isImageType(String fileName) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1500, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\npublic class FileUtilTest {\n    @Test\n    public void testIsImageType_WithJpgExtension_ShouldReturnTrue() {\n        assertTrue(FileUtil.isImageType(\"photo.jpg\"));\n    }\n    @Test\n    public void testIsImageType_WithPngExtension_ShouldReturnTrue() {\n        assertTrue(FileUtil.isImageType(\"image.png\"));\n    }\n    @Test\n    public void testIsImageType_WithGifExtension_ShouldReturnTrue() {\n        assertTrue(FileUtil.isImageType(\"animation.gif\"));\n    }\n    @Test\n    public void testIsImageType_WithPdfExtension_ShouldReturnFalse() {\n        assertFalse(FileUtil.isImageType(\"document.pdf\"));\n    }\n    @Test\n    public void testIsImageType_WithRarExtension_ShouldReturnFalse() {\n        assertFalse(FileUtil.isImageType(\"archive.rar\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Calendar;\nimport java.util.TimeZone;\npublic class DateManager {\n    public static long[] resetTimeMarkers() {\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        long todayStart = calendar.getTimeInMillis();\n        calendar.add(Calendar.DAY_OF_MONTH, -1);\n        long yesterdayStart = calendar.getTimeInMillis();\n        calendar.set(Calendar.MONTH, Calendar.JANUARY);\n        calendar.set(Calendar.DAY_OF_MONTH, 1);\n        long yearStart = calendar.getTimeInMillis();\n        return new long[]{todayStart, yesterdayStart, yearStart};\n    }\n    public static void checkTimeMarkers(long[] timeMarkers) {\n        Calendar calendar = Calendar.getInstance();\n        for (long timeMarker : timeMarkers) {\n            calendar.setTimeInMillis(timeMarker);\n            System.out.println(calendar.getTime());\n        }\n    }\n    public static void main(String[] args) {\n        long[] timeMarkers = resetTimeMarkers();\n        checkTimeMarkers(timeMarkers);\n    }\n}", "content": "Please write a Java program which includes a class named `DateManager` that contains a static method `resetTimeMarkers`. This method is used to calculate and return an array of type `long` containing three time points: the start of today, the start of yesterday, and the start of this year. These three time points are represented as timestamps in milliseconds, corresponding to 0:00 of the current day, 0:00 of the previous day, and 0:00 on January 1st of the current year, respectively. Ensure that the returned timestamps are accurate and take timezone effects into account.\n\nPlease implement the code according to the following requirements:\n\n1. Use the `java.util.Calendar` class to get and set the time.\n2. In the array returned by the method, the first element should be the timestamp for the start of today, the second element should be the timestamp for the start of yesterday, and the third element should be the timestamp for the start of this year.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Calendar;\nimport java.util.TimeZone;\npublic class DateManager {\n    public static long[] resetTimeMarkers() {\n    }\n    public static void checkTimeMarkers(long[] timeMarkers) {\n    }\n}\n```", "id": 1501, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.Calendar;\nimport java.util.TimeZone;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DateManagerTest {\n    @Test\n    public void testResetTimeMarkersTodayStart() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        assertEquals(calendar.getTimeInMillis(), timeMarkers[0]);\n    }\n    @Test\n    public void testResetTimeMarkersYesterdayStart() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        calendar.add(Calendar.DAY_OF_MONTH, -1);\n        assertEquals(calendar.getTimeInMillis(), timeMarkers[1]);\n    }\n    @Test\n    public void testResetTimeMarkersYearStart() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance(TimeZone.getDefault());\n        calendar.set(Calendar.MONTH, Calendar.JANUARY);\n        calendar.set(Calendar.DAY_OF_MONTH, 1);\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        assertEquals(calendar.getTimeInMillis(), timeMarkers[2]);\n    }\n    @Test\n    public void testCheckTimeMarkers() {\n        long[] timeMarkers = DateManager.resetTimeMarkers();\n        Calendar calendar = Calendar.getInstance();\n        for (long timeMarker : timeMarkers) {\n            calendar.setTimeInMillis(timeMarker);\n            assertNotNull(calendar.getTime());\n        }\n    }\n}"}}
{"canonical_solution": "import java.io.UnsupportedEncodingException;\npublic class StringEncoder {\n    public String convertEncoding(String originalString, String desiredEncoding) throws UnsupportedEncodingException {\n        byte[] bytes = originalString.getBytes(desiredEncoding);\n        return new String(bytes, desiredEncoding);\n    }\n    public static void main(String[] args) {\n        StringEncoder encoder = new StringEncoder();\n        try {\n            String originalString = \"这是一个测试字符串\";\n            String desiredEncoding = \"ISO-8859-1\";\n            String convertedString = encoder.convertEncoding(originalString, desiredEncoding);\n            System.out.println(\"转换后的字符串: \" + convertedString);\n        } catch (UnsupportedEncodingException e) {\n            System.err.println(\"不支持的编码格式: \" + e.getMessage());\n        }\n    }\n}", "content": "Please write a Java program to handle specific encoding conversions in a string. Specifically, you need to implement a class named `StringEncoder` which contains a method named `convertEncoding`. This method accepts two string parameters: the first parameter `originalString` represents the original string, and the second parameter `desiredEncoding` represents the desired encoding format (such as \"UTF-8\", \"ISO-8859-1\", etc.). If the conversion is successful, the method should return the converted string; if the conversion fails, it should throw an `UnsupportedEncodingException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.UnsupportedEncodingException;\npublic class StringEncoder {\n    public String convertEncoding(String originalString, String desiredEncoding) throws UnsupportedEncodingException {\n    }\n}\n```", "id": 1502, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.io.UnsupportedEncodingException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StringEncoderTest {\n    @Test\n    public void testConvertEncoding_validEncoding() throws UnsupportedEncodingException {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"这是一个测试字符串\";\n        String desiredEncoding = \"UTF-8\";\n        String encodedString = encoder.convertEncoding(originalString, desiredEncoding);\n        assertNotNull(encodedString);\n    }\n    @Test\n    public void testConvertEncoding_invalidEncoding() {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"这是一个测试字符串\";\n        String desiredEncoding = \"INVALID_ENCODING\";\n        assertThrows(UnsupportedEncodingException.class, () -> {\n            encoder.convertEncoding(originalString, desiredEncoding);\n        });\n    }\n    @Test\n    public void testConvertEncoding_emptyString() throws UnsupportedEncodingException {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"\";\n        String desiredEncoding = \"UTF-8\";\n        String encodedString = encoder.convertEncoding(originalString, desiredEncoding);\n        assertEquals(\"\", encodedString);\n    }\n    @Test\n    public void testConvertEncoding_differentEncodings() throws UnsupportedEncodingException {\n        StringEncoder encoder = new StringEncoder();\n        String originalString = \"这是一个测试字符串\";\n        String utf8Encoded = encoder.convertEncoding(originalString, \"UTF-8\");\n        String isoEncoded = encoder.convertEncoding(utf8Encoded, \"ISO-8859-1\");\n        assertNotNull(isoEncoded);\n    }\n    @Test\n    public void testConvertEncoding_nullString() {\n        StringEncoder encoder = new StringEncoder();\n        String desiredEncoding = \"UTF-8\";\n        Exception exception = assertThrows(NullPointerException.class, () -> {\n            encoder.convertEncoding(null, desiredEncoding);\n        });\n    }\n}"}}
{"canonical_solution": "import java.lang.UnsupportedOperationException;\npublic class ImageProcessor {\n    public void initializePorts() {\n        throw new UnsupportedOperationException(\"该方法尚未实现。\");\n    }\n    public static void checkFunction() {\n        ImageProcessor processor = new ImageProcessor();\n        try {\n            processor.initializePorts();\n        } catch (UnsupportedOperationException e) {\n            System.out.println(\"方法抛出了预期的异常：\" + e.getMessage());\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java method that sets the input and output ports in an image processing filter. The method should be in a class named `ImageProcessor`, and this class should have a public method named `initializePorts`. The method does not need to accept any parameters, and it should throw an `UnsupportedOperationException` to indicate that the functionality is not yet implemented. Be sure to include all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.UnsupportedOperationException;\npublic class ImageProcessor {\n    public void initializePorts() {\n    }\n}\n```", "id": 1503, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.lang.UnsupportedOperationException;\npublic class ImageProcessorTest {\n    @Test\n    public void testInitializePortsThrowsException() {\n        ImageProcessor processor = new ImageProcessor();\n        Assertions.assertThrows(UnsupportedOperationException.class, processor::initializePorts);\n    }\n    @Test\n    public void testInitializePortsThrowsExceptionWithMessage() {\n        ImageProcessor processor = new ImageProcessor();\n        UnsupportedOperationException exception = Assertions.assertThrows(UnsupportedOperationException.class, processor::initializePorts);\n        Assertions.assertEquals(\"该方法尚未实现。\", exception.getMessage());\n    }\n    @Test\n    public void testCheckFunctionCatchesException() {\n        try {\n            ImageProcessor.checkFunction();\n        } catch (Exception e) {\n            Assertions.fail(\"checkFunction方法不应抛出任何异常，但抛出了: \" + e);\n        }\n    }\n    @Test\n    public void testNewInstance() {\n        ImageProcessor processor = new ImageProcessor();\n        Assertions.assertNotNull(processor, \"创建的ImageProcessor实例不应为null\");\n    }\n}"}}
{"canonical_solution": "import java.util.Locale;\ninterface Metric {}\ninterface Counting extends Metric {\n    long getCount();\n}\ninterface Gauge<T> extends Metric {\n    T getValue();\n}\ninterface Sampling extends Metric {\n    double getSampleRate();\n}\nclass Counter implements Counting {\n    private long count;\n    public Counter(long count) { this.count = count; }\n    public long getCount() { return count; }\n}\nclass GaugeDouble implements Gauge<Double> {\n    private double value;\n    public GaugeDouble(double value) { this.value = value; }\n    public Double getValue() { return value; }\n}\nclass Sample implements Sampling {\n    private double sampleRate;\n    public Sample(double sampleRate) { this.sampleRate = sampleRate; }\n    public double getSampleRate() { return sampleRate; }\n}\npublic class PerformanceSummary {\n    public static void displayMetricInfo(StringBuilder sb, Metric[] metrics) {\n        for (Metric metric : metrics) {\n            if (metric instanceof Counting) {\n                sb.append(String.format(Locale.US, \"Count: %d\\n\", ((Counting) metric).getCount()));\n            }\n            if (metric instanceof Gauge) {\n                sb.append(String.format(Locale.US, \"Value: %.2f\\n\", ((Gauge<?>) metric).getValue()));\n            }\n            if (metric instanceof Sampling) {\n                sb.append(String.format(Locale.US, \"Sample Rate: %.2f%%\\n\", ((Sampling) metric).getSampleRate() * 100));\n            }\n        }\n    }\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] {\n            new Counter(150),\n            new GaugeDouble(99.99),\n            new Sample(0.85)\n        };\n        displayMetricInfo(sb, metrics);\n        System.out.println(sb.toString());\n    }\n}", "content": "Please define a class named `PerformanceSummary`, which contains a method called `displayMetricInfo`. This method accepts a `StringBuilder` object and an array of objects implementing the `Metric` interface. You need to add corresponding information to the `StringBuilder` based on different metric types (count, measurement, sample rate). Make sure your implementation can handle different types of metrics, and is neatly formatted and easy to read.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Locale;\ninterface Metric {}\ninterface Counting extends Metric {\n    long getCount();\n}\ninterface Gauge<T> extends Metric {\n    T getValue();\n}\ninterface Sampling extends Metric {\n    double getSampleRate();\n}\nclass Counter implements Counting {\n    private long count;\n    public Counter(long count) {}\n    public long getCount() {}\n}\nclass GaugeDouble implements Gauge<Double> {\n    private double value;\n    public GaugeDouble(double value) {}\n    public Double getValue() {}\n}\nclass Sample implements Sampling {\n    private double sampleRate;\n    public Sample(double sampleRate) {}\n    public double getSampleRate() {}\n}\npublic class PerformanceSummary {\n    public static void displayMetricInfo(StringBuilder sb, Metric[] metrics) {}\n}\n```", "id": 1504, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class PerformanceSummaryTest {\n    @Test\n    public void testDisplayMetricInfo_withCounter() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { new Counter(150) };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Count: 150\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withGaugeDouble() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { new GaugeDouble(99.99) };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Value: 99.99\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withSample() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { new Sample(0.85) };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Sample Rate: 85.00%\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withMixedMetrics() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] { \n            new Counter(150), \n            new GaugeDouble(99.99), \n            new Sample(0.85) \n        };\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"Count: 150\\nValue: 99.99\\nSample Rate: 85.00%\\n\", sb.toString());\n    }\n    @Test\n    public void testDisplayMetricInfo_withEmptyMetrics() {\n        StringBuilder sb = new StringBuilder();\n        Metric[] metrics = new Metric[] {};\n        PerformanceSummary.displayMetricInfo(sb, metrics);\n        assertEquals(\"\", sb.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.regex.Pattern;\npublic class PasswordStrengthValidator {\n    public static boolean validatePasswordStrength(String password) {\n        if (password.length() < 8) {\n            return false;\n        }\n        if (!Pattern.compile(\"[a-z]\").matcher(password).find()) {\n            return false;\n        }\n        if (!Pattern.compile(\"[A-Z]\").matcher(password).find()) {\n            return false;\n        }\n        if (!Pattern.compile(\"[0-9]\").matcher(password).find()) {\n            return false;\n        }\n        if (!Pattern.compile(\"[^a-zA-Z0-9]\").matcher(password).find()) {\n            return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n        checkPasswordStrength(\"WeakPass\", false);\n        checkPasswordStrength(\"StrongPass1!\", true);\n        checkPasswordStrength(\"NoSpecialChar1\", false);\n        checkPasswordStrength(\"Short1!\", false);\n        checkPasswordStrength(\"ValidPassword1@\", true);\n    }\n    private static void checkPasswordStrength(String password, boolean expected) {\n        boolean isValid = validatePasswordStrength(password);\n        assert isValid == expected : \"Password validation for \\\"\" + password + \"\\\" failed. Expected: \" + expected + \", but got: \" + isValid;\n        System.out.println(\"Password \\\"\" + password + \"\\\" is \" + (isValid ? \"strong\" : \"weak\") + \".\");\n    }\n}", "content": "Please write a Java program to verify the strength of a user password. The password must meet the following criteria to be considered valid:\n- Must contain at least 8 characters.\n- Must contain at least one lowercase letter.\n- Must contain at least one uppercase letter.\n- Must contain at least one digit.\n- Must contain at least one special character (non-alphanumeric).\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.regex.Pattern;\npublic class PasswordStrengthValidator {\n    public static boolean validatePasswordStrength(String password) {\n    }\n}\n```", "id": 1505, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class PasswordStrengthValidatorTest {\n    @Test\n    public void testShortPassword() {\n        assertEquals(false, PasswordStrengthValidator.validatePasswordStrength(\"Short1!\"));\n    }\n    @Test\n    public void testNoSpecialCharacterPassword() {\n        assertEquals(false, PasswordStrengthValidator.validatePasswordStrength(\"NoSpecialChar1\"));\n    }\n    @Test\n    public void testWeakPassword() {\n        assertEquals(false, PasswordStrengthValidator.validatePasswordStrength(\"WeakPass\"));\n    }\n    @Test\n    public void testStrongPassword() {\n        assertEquals(true, PasswordStrengthValidator.validatePasswordStrength(\"StrongPass1!\"));\n    }\n    @Test\n    public void testValidPasswordWithSpecialCharacter() {\n        assertEquals(true, PasswordStrengthValidator.validatePasswordStrength(\"ValidPassword1@\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ErrorInfoProvider {\n    public static String getErrorMessage(int errorCode) {\n        Map<Integer, String> errorMap = new HashMap<>();\n        errorMap.put(1, \"网络连接失败\");\n        errorMap.put(2, \"用户认证失败\");\n        errorMap.put(3, \"数据格式错误\");\n        errorMap.put(4, \"权限不足\");\n        errorMap.put(5, \"服务器内部错误\");\n        errorMap.put(6, \"数据更新失败\");\n        errorMap.put(7, \"资源未找到\");\n        return errorMap.getOrDefault(errorCode, \"未知错误\");\n    }\n    public static void check() {\n        assert \"网络连接失败\".equals(getErrorMessage(1));\n        assert \"用户认证失败\".equals(getErrorMessage(2));\n        assert \"数据格式错误\".equals(getErrorMessage(3));\n        assert \"权限不足\".equals(getErrorMessage(4));\n        assert \"服务器内部错误\".equals(getErrorMessage(5));\n        assert \"数据更新失败\".equals(getErrorMessage(6));\n        assert \"资源未找到\".equals(getErrorMessage(7));\n        assert \"未知错误\".equals(getErrorMessage(8)); \n    }\n    public static void main(String[] args) {\n        check(); \n    }\n}", "content": "Please design a Java method that receives an integer parameter `errorCode` and returns the corresponding error message based on different error codes. The error codes and corresponding error messages are as follows:\n\n- 1: \"Network connection failed\"\n- 2: \"User authentication failed\"\n- 3: \"Data format error\"\n- 4: \"Insufficient permissions\"\n- 5: \"Internal server error\"\n- 6: \"Data update failed\"\n- 7: \"Resource not found\"\n\nIf the input error code is not in the above list, please return \"Unknown error\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ErrorInfoProvider {\n    public static String getErrorMessage(int errorCode) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1506, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class ErrorInfoProviderTest {\n    @Test\n    public void testGetErrorMessageForKnownErrorCodes() {\n        assertEquals(\"网络连接失败\", ErrorInfoProvider.getErrorMessage(1));\n        assertEquals(\"用户认证失败\", ErrorInfoProvider.getErrorMessage(2));\n        assertEquals(\"数据格式错误\", ErrorInfoProvider.getErrorMessage(3));\n        assertEquals(\"权限不足\", ErrorInfoProvider.getErrorMessage(4));\n        assertEquals(\"服务器内部错误\", ErrorInfoProvider.getErrorMessage(5));\n    }\n    @Test\n    public void testGetErrorMessageForUnknownErrorCode() {\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(999));\n    }\n    @Test\n    public void testGetErrorMessageForBoundaryErrorCode() {\n        assertEquals(\"网络连接失败\", ErrorInfoProvider.getErrorMessage(1));\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(0));\n    }\n    @Test\n    public void testGetErrorMessageForNegativeErrorCode() {\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(-1));\n    }\n    @Test\n    public void testGetErrorMessageForNonMappedErrorCode() {\n        assertEquals(\"未知错误\", ErrorInfoProvider.getErrorMessage(10));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentService {\n    public static void initiatePayment(String userOpenId, String serverIp, String orderAmount, String merchantOrderNo) throws Exception {\n        HashMap<String, String> paymentData = new HashMap<>();\n        paymentData.put(\"partner_trade_no\", merchantOrderNo); \n        paymentData.put(\"openid\", userOpenId); \n        paymentData.put(\"check_name\", \"NO_CHECK\"); \n        paymentData.put(\"amount\", orderAmount); \n        paymentData.put(\"desc\", \"提现\"); \n        paymentData.put(\"spbill_create_ip\", serverIp); \n    }\n    public static boolean checkPaymentData(Map<String, String> data) {\n        return data.containsKey(\"partner_trade_no\") &&\n               data.containsKey(\"openid\") &&\n               data.containsKey(\"check_name\") &&\n               data.containsKey(\"amount\") &&\n               data.containsKey(\"desc\") &&\n               data.containsKey(\"spbill_create_ip\");\n    }\n    public static void main(String[] args) {\n        try {\n            String openId = \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\";\n            String ip = \"192.168.0.1\";\n            String amount = \"200\";\n            String orderNo = \"123456789\";\n            initiatePayment(openId, ip, amount, orderNo);\n            HashMap<String, String> paymentData = new HashMap<>();\n            paymentData.put(\"partner_trade_no\", orderNo);\n            paymentData.put(\"openid\", openId);\n            paymentData.put(\"check_name\", \"NO_CHECK\");\n            paymentData.put(\"amount\", amount);\n            paymentData.put(\"desc\", \"提现\");\n            paymentData.put(\"spbill_create_ip\", ip);\n            boolean isDataValid = checkPaymentData(paymentData);\n            System.out.println(\"Payment data is valid: \" + isDataValid);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "Please write a Java method to handle a request for initiating a WeChat corporate payment to a user. The method should receive the user's OpenID and the server's IP address as parameters, and construct a data set with the necessary information to initiate the payment. Note that the payment amount and merchant order number should be passed to the method as parameters, rather than hardcoded in the code. Additionally, a validation function needs to be implemented to verify whether the payment request contains all necessary information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentService {\n    public static void initiatePayment(String userOpenId, String serverIp, String orderAmount, String merchantOrderNo) throws Exception {\n    }\n    public static boolean checkPaymentData(Map<String, String> data) {\n        return false;\n    }\n}\n```", "id": 1507, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentServiceTest {\n    @Test\n    public void testInitiatePaymentWithValidData() throws Exception {\n        String openId = \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\";\n        String ip = \"192.168.0.1\";\n        String amount = \"200\";\n        String orderNo = \"123456789\";\n        WeChatPaymentService.initiatePayment(openId, ip, amount, orderNo);\n        Map<String, String> expectedData = new HashMap<>();\n        expectedData.put(\"partner_trade_no\", orderNo);\n        expectedData.put(\"openid\", openId);\n        expectedData.put(\"check_name\", \"NO_CHECK\");\n        expectedData.put(\"amount\", amount);\n        expectedData.put(\"desc\", \"提现\");\n        expectedData.put(\"spbill_create_ip\", ip);\n        assertTrue(WeChatPaymentService.checkPaymentData(expectedData));\n    }\n    @Test\n    public void testCheckPaymentDataWithValidData() {\n        Map<String, String> validData = new HashMap<>();\n        validData.put(\"partner_trade_no\", \"123456789\");\n        validData.put(\"openid\", \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\");\n        validData.put(\"check_name\", \"NO_CHECK\");\n        validData.put(\"amount\", \"200\");\n        validData.put(\"desc\", \"提现\");\n        validData.put(\"spbill_create_ip\", \"192.168.0.1\");\n        assertTrue(WeChatPaymentService.checkPaymentData(validData));\n    }\n    @Test\n    public void testCheckPaymentDataWithMissingField() {\n        Map<String, String> invalidData = new HashMap<>();\n        invalidData.put(\"partner_trade_no\", \"123456789\");\n        invalidData.put(\"openid\", \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\");\n        invalidData.put(\"check_name\", \"NO_CHECK\");\n        invalidData.put(\"amount\", \"200\");\n        invalidData.put(\"spbill_create_ip\", \"192.168.0.1\");\n        assertFalse(WeChatPaymentService.checkPaymentData(invalidData));\n    }\n    @Test\n    public void testCheckPaymentDataWithEmptyMap() {\n        Map<String, String> emptyData = new HashMap<>();\n        assertFalse(WeChatPaymentService.checkPaymentData(emptyData));\n    }\n    @Test\n    public void testCheckPaymentDataWithInvalidField() {\n        Map<String, String> invalidFieldData = new HashMap<>();\n        invalidFieldData.put(\"partner_trade_no\", \"123456789\");\n        invalidFieldData.put(\"openid\", \"oLVPpjqs9BhvzwPj5A-vTYAX3GLc\");\n        invalidFieldData.put(\"check_name\", \"NO_CHECK\");\n        invalidFieldData.put(\"amount\", \"200\");\n        invalidFieldData.put(\"desc\", \"提现\");\n        invalidFieldData.put(\"invalid_field\", \"invalid_value\");\n        assertFalse(WeChatPaymentService.checkPaymentData(invalidFieldData));\n    }\n}"}}
{"canonical_solution": "import java.lang.Exception;\nclass InvalidIntegerException extends Exception {\n    public InvalidIntegerException(String message) {\n        super(message);\n    }\n}\npublic class StringToIntConverter {\n    public static int convertStringToInt(String str) throws InvalidIntegerException {\n        try {\n            return Integer.parseInt(str);\n        } catch (NumberFormatException e) {\n            throw new InvalidIntegerException(\"无效的整数: \" + str);\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            System.out.println(convertStringToInt(\"123\")); \n            System.out.println(convertStringToInt(\"abc\")); \n        } catch (InvalidIntegerException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method that takes a string parameter representing an integer. The purpose of the method is to convert this string to an integer and return it. If the input string is not a valid integer, the method should throw a custom exception with the message \"Invalid integer: \" followed by the original input string. Make sure your code can handle exceptions, and explicitly declare the exceptions that might be thrown in the method signature.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Exception;\nclass InvalidIntegerException extends Exception {\n    public InvalidIntegerException(String message) {\n        super(message);\n    }\n}\npublic class StringToIntConverter {\n    public static int convertStringToInt(String str) throws InvalidIntegerException {\n\n    }\n}\n```", "id": 1508, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StringToIntConverterTest {\n    @Test\n    void testConvertStringToIntValid() {\n        try {\n            assertEquals(123, StringToIntConverter.convertStringToInt(\"123\"));\n            assertEquals(-456, StringToIntConverter.convertStringToInt(\"-456\"));\n        } catch (InvalidIntegerException e) {\n            fail(\"Exception should not have been thrown\");\n        }\n    }\n    @Test\n    void testConvertStringToIntInvalid() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(\"abc\");\n        });\n    }\n    @Test\n    void testConvertStringToIntEmptyString() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(\"\");\n        });\n    }\n    @Test\n    void testConvertStringToIntNull() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(null);\n        });\n    }\n    @Test\n    void testConvertStringToIntWhiteSpace() {\n        assertThrows(InvalidIntegerException.class, () -> {\n            StringToIntConverter.convertStringToInt(\" \");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.function.BiFunction;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n    public int subtract(int a, int b) {\n        return a - b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        check(\"加法\", 5, 3, 8, calculator::add);\n        check(\"减法\", 5, 3, 2, calculator::subtract);\n    }\n    private static void check(String testName, int a, int b, int expected, BiFunction<Integer, Integer, Integer> operation) {\n        int result = operation.apply(a, b);\n        assert result == expected : testName + \"失败\";\n        System.out.println(testName + \"成功\");\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator should include two methods: `add` and `subtract`, which are used to calculate the sum and difference of two integers, respectively.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.function.BiFunction;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n    }\n    public int subtract(int a, int b) {\n    }\n}\n```", "id": 1509, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAdd() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8, calculator.add(5, 3));\n        assertEquals(0, calculator.add(2, -2));\n        assertEquals(-10, calculator.add(-5, -5));\n    }\n    @Test\n    public void testSubtract() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(2, calculator.subtract(5, 3));\n        assertEquals(4, calculator.subtract(2, -2));\n        assertEquals(0, calculator.subtract(-5, -5));\n    }\n    @Test\n    public void testAddEdgeCases() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(0, calculator.add(0, 0));\n        assertEquals(Integer.MAX_VALUE, calculator.add(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MIN_VALUE, calculator.add(Integer.MIN_VALUE, 0));\n    }\n    @Test\n    public void testSubtractEdgeCases() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(0, calculator.subtract(0, 0));\n        assertEquals(Integer.MAX_VALUE, calculator.subtract(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MIN_VALUE, calculator.subtract(Integer.MIN_VALUE, 0));\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\npublic class OptionalExample {\n    public void processOptionalString(Optional<String> input) {\n        input.ifPresentOrElse(\n            value -> System.out.println(value), \n            () -> System.out.println(\"未提供值\") \n        );\n    }\n    public static void main(String[] args) {\n        OptionalExample example = new OptionalExample();\n        Optional<String> nonEmptyOptional = Optional.of(\"Hello, World!\");\n        example.processOptionalString(nonEmptyOptional);\n        Optional<String> emptyOptional = Optional.empty();\n        example.processOptionalString(emptyOptional);\n    }\n}", "content": "Please write a Java program to implement a function that receives a possibly empty string and processes it. If the string exists, print the string; if the string does not exist, print \"No value provided\". Use the `Optional` class to implement this logic.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Optional;\npublic class OptionalExample {\n    public void processOptionalString(Optional<String> input) {\n    }\n}\n```", "id": 1510, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.Optional;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class OptionalExampleTest {\n    private OptionalExample example;\n    @BeforeEach\n    public void setUp() {\n        example = new OptionalExample();\n    }\n    @Test\n    public void testProcessOptionalStringWithNonEmptyOptional() {\n        Optional<String> nonEmptyOptional = Optional.of(\"Test String\");\n        example.processOptionalString(nonEmptyOptional);\n    }\n    @Test\n    public void testProcessOptionalStringWithEmptyOptional() {\n        Optional<String> emptyOptional = Optional.empty();\n        example.processOptionalString(emptyOptional);\n    }\n    @Test\n    public void testProcessOptionalStringWithNullValue() {\n        Optional<String> nullOptional = Optional.ofNullable(null);\n        example.processOptionalString(nullOptional);\n    }\n    @Test\n    public void testProcessOptionalStringWithWhitespaceString() {\n        Optional<String> whitespaceString = Optional.of(\" \");\n        example.processOptionalString(whitespaceString);\n    }\n    @Test\n    public void testProcessOptionalStringWithSpecialCharacters() {\n        Optional<String> specialCharacters = Optional.of(\"!@#$%^&*()\");\n        example.processOptionalString(specialCharacters);\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\npublic class DefaultValueGetter {\n    public static int getNumberOrDefault(Integer number) {\n        Optional<Integer> optionalNumber = Optional.ofNullable(number);\n        return optionalNumber.orElse(100);\n    }\n    public static void checkFunction() {\n        Integer test1 = null; \n        Integer test2 = 50;   \n        System.out.println(\"Test1 (Expected: 100): \" + getNumberOrDefault(test1));\n        System.out.println(\"Test2 (Expected: 50): \" + getNumberOrDefault(test2));\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java function that accepts an integer value that may be null. If the value is not null, it directly returns that value; if it is null, it returns a default value of 100. Use the `Optional` class to implement this logic to ensure code robustness.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Optional;\npublic class DefaultValueGetter {\n    public static int getNumberOrDefault(Integer number) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1511, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class DefaultValueGetterTest {\n    @Test\n    public void testGetNumberOrDefault_withNull() {\n        Integer testInput = null;\n        int expectedOutput = 100;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withNonNull() {\n        Integer testInput = 50;\n        int expectedOutput = 50;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withNegativeValue() {\n        Integer testInput = -10;\n        int expectedOutput = -10;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withZero() {\n        Integer testInput = 0;\n        int expectedOutput = 0;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n    @Test\n    public void testGetNumberOrDefault_withPositiveValue() {\n        Integer testInput = 200;\n        int expectedOutput = 200;\n        assertEquals(expectedOutput, DefaultValueGetter.getNumberOrDefault(testInput));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass ProductNotFoundException extends RuntimeException {\n    public ProductNotFoundException(String message) {\n        super(message);\n    }\n}\nclass Product {\n    private String id;\n    private int status; \n    public Product(String id, int status) {\n        this.id = id;\n        this.status = status;\n    }\n    public String getId() {\n        return id;\n    }\n    public int getStatus() {\n        return status;\n    }\n}\nclass ProductRepository {\n    private Map<String, Product> productMap = new HashMap<>();\n    public ProductRepository() {\n        productMap.put(\"123\", new Product(\"123\", 1));\n        productMap.put(\"456\", new Product(\"456\", 0));\n    }\n    public Product findById(String id) {\n        return productMap.get(id);\n    }\n}\npublic class ProductFinder {\n    private ProductRepository productRepo = new ProductRepository();\n    public Product findActiveProductById(String id) {\n        Product product = productRepo.findById(id);\n        if (product != null && product.getStatus() == 1) {\n            return product;\n        } else {\n            throw new ProductNotFoundException(\"Product not found or not active\");\n        }\n    }\n    public static void main(String[] args) {\n        ProductFinder finder = new ProductFinder();\n        try {\n            Product product = finder.findActiveProductById(\"123\");\n            System.out.println(\"Found product: \" + product.getId());\n        } catch (ProductNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            finder.findActiveProductById(\"456\");\n        } catch (ProductNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please design a Java method that retrieves and returns the information of a product with a specific status. If the product exists and its status is active (status code is 1), return the product information; if the product does not exist or its status is not active, throw an exception.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass ProductNotFoundException extends RuntimeException {\n    public ProductNotFoundException(String message) {\n        super(message);\n    }\n}\nclass Product {\n    private String id;\n    private int status; \n    public Product(String id, int status) {\n        this.id = id;\n        this.status = status;\n    }\n    public String getId() {\n        return id;\n    }\n    public int getStatus() {\n        return status;\n    }\n}\nclass ProductRepository {\n    private Map<String, Product> productMap = new HashMap<>();\n    public ProductRepository() {\n    }\n    public Product findById(String id) {\n    }\n}\npublic class ProductFinder {\n    private ProductRepository productRepo = new ProductRepository();\n    public Product findActiveProductById(String id) {\n    }\n}\n```", "id": 1512, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass ProductFinderTest {\n    @Test\n    void testFindActiveProductById_ProductExistsAndIsActive() {\n        ProductFinder finder = new ProductFinder();\n        Product product = finder.findActiveProductById(\"123\");\n        assertNotNull(product);\n        assertEquals(\"123\", product.getId());\n    }\n    @Test\n    void testFindActiveProductById_ProductExistsButNotActive() {\n        ProductFinder finder = new ProductFinder();\n        assertThrows(ProductNotFoundException.class, () -> {\n            finder.findActiveProductById(\"456\");\n        });\n    }\n    @Test\n    void testFindActiveProductById_ProductDoesNotExist() {\n        ProductFinder finder = new ProductFinder();\n        assertThrows(ProductNotFoundException.class, () -> {\n            finder.findActiveProductById(\"789\");\n        });\n    }\n    @Test\n    void testFindActiveProductById_ProductRepositoryIsInitializedCorrectly() {\n        ProductFinder finder = new ProductFinder();\n        Product product1 = finder.findActiveProductById(\"123\");\n        assertNotNull(product1);\n        assertEquals(1, product1.getStatus());\n        assertThrows(ProductNotFoundException.class, () -> {\n            finder.findActiveProductById(\"456\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ProjectManagementServiceFactory {\n    private Map<String, ProjectManagementService> services = new HashMap<>();\n    public ProjectManagementServiceFactory() {\n        services.put(\"jiraServer\", new JiraServerService());\n        services.put(\"jiraCloud\", new JiraCloudService());\n    }\n    public ProjectManagementService getService(String tokenIdentifier) {\n        for (String key : services.keySet()) {\n            ProjectManagementService service = services.get(key);\n            if (service.containsToken(tokenIdentifier)) {\n                return service;\n            }\n        }\n        return null;\n    }\n    public static void main(String[] args) {\n        ProjectManagementServiceFactory factory = new ProjectManagementServiceFactory();\n        ProjectManagementService service = factory.getService(\"someToken\");\n        if (service != null) {\n            System.out.println(\"获取到的服务实例: \" + service.getClass().getSimpleName());\n        } else {\n            System.out.println(\"没有找到匹配的服务实例\");\n        }\n    }\n}\ninterface ProjectManagementService {\n    boolean containsToken(String token);\n}\nclass JiraServerService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return \"jiraServerToken\".equals(token);\n    }\n}\nclass JiraCloudService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return \"jiraCloudToken\".equals(token);\n    }\n}", "content": "Let's assume you are developing a project management system that needs to support various project management tools, such as Jira Server and Jira Cloud. There is a feature in the system that retrieves the corresponding project management tool service based on a provided token identifier. Describe how you would design a Java method that takes a token identifier as a parameter and then returns the corresponding project management tool service instance based on that identifier. If there is no matching service in the system, it should return null. Ensure that your design can be easily extended to support more project management tools in the future.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ProjectManagementServiceFactory {\n    private Map<String, ProjectManagementService> services = new HashMap<>();\n    public ProjectManagementServiceFactory() {\n    }\n    public ProjectManagementService getService(String tokenIdentifier) {\n        return null;\n    }\n}\ninterface ProjectManagementService {\n    boolean containsToken(String token);\n}\nclass JiraServerService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return false;\n    }\n}\nclass JiraCloudService implements ProjectManagementService {\n    @Override\n    public boolean containsToken(String token) {\n        return false;\n    }\n}\n```", "id": 1513, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ProjectManagementServiceFactoryTest {\n    private ProjectManagementServiceFactory factory;\n    @Before\n    public void setUp() {\n        factory = new ProjectManagementServiceFactory();\n    }\n    @Test\n    public void testGetServiceWithJiraServerToken() {\n        ProjectManagementService service = factory.getService(\"jiraServerToken\");\n        assertNotNull(service);\n        assertTrue(service instanceof JiraServerService);\n    }\n    @Test\n    public void testGetServiceWithJiraCloudToken() {\n        ProjectManagementService service = factory.getService(\"jiraCloudToken\");\n        assertNotNull(service);\n        assertTrue(service instanceof JiraCloudService);\n    }\n    @Test\n    public void testGetServiceWithInvalidToken() {\n        ProjectManagementService service = factory.getService(\"invalidToken\");\n        assertNull(service);\n    }\n    @Test\n    public void testGetServiceWithEmptyToken() {\n        ProjectManagementService service = factory.getService(\"\");\n        assertNull(service);\n    }\n    @Test\n    public void testGetServiceWithNullToken() {\n        ProjectManagementService service = factory.getService(null);\n        assertNull(service);\n    }\n}"}}
{"canonical_solution": "import java.util.UUID;\nclass ResultVO {\n    private boolean success;\n    private String message;\n    private String data;\n    public ResultVO(boolean success, String message, String data) {\n        this.success = success;\n        this.message = message;\n        this.data = data;\n    }\n    public static ResultVO setSuccess(String message, String data) {\n        return new ResultVO(true, message, data);\n    }\n    public boolean isSuccess() {\n        return success;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public String getData() {\n        return data;\n    }\n}\nclass Book {\n    private String bookId;\n    private String title;\n    public Book(String title) {\n        this.bookId = UUID.randomUUID().toString();\n        this.title = title;\n    }\n    public String getBookId() {\n        return bookId;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\nclass LibrarySystem {\n    public ResultVO addNewBook(Book newBook) {\n        System.out.println(\"Adding book: \" + newBook.getTitle());\n        return ResultVO.setSuccess(\"添加成功\", newBook.getBookId());\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        LibrarySystem librarySystem = new LibrarySystem();\n        Book newBook = new Book(\"Java编程思想\");\n        ResultVO result = librarySystem.addNewBook(newBook);\n        System.out.println(\"操作是否成功: \" + result.isSuccess());\n        System.out.println(\"消息: \" + result.getMessage());\n        System.out.println(\"新书ID: \" + result.getData());\n    }\n}", "content": "Please write a Java method for adding new books to a library. The method should accept a Book object as a parameter and save it to the database. If the addition is successful, the method should return a result object containing success information and the new book ID.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.UUID;\nclass ResultVO {\n    private boolean success;\n    private String message;\n    private String data;\n    public ResultVO(boolean success, String message, String data) {\n    }\n    public static ResultVO setSuccess(String message, String data) {\n    }\n    public boolean isSuccess() {\n    }\n    public String getMessage() {\n    }\n    public String getData() {\n    }\n}\nclass Book {\n    private String bookId;\n    private String title;\n    public Book(String title) {\n    }\n    public String getBookId() {\n    }\n    public String getTitle() {\n    }\n}\nclass LibrarySystem {\n    public ResultVO addNewBook(Book newBook) {\n    }\n}\n```", "id": 1514, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nclass ResultVOTest {\n    private ResultVO resultVO;\n    @BeforeEach\n    void setUp() {\n        resultVO = new ResultVO(true, \"Test Message\", \"TestData\");\n    }\n    @Test\n    void testSetSuccess() {\n        ResultVO result = ResultVO.setSuccess(\"Success\", \"Data\");\n        Assertions.assertTrue(result.isSuccess());\n        Assertions.assertEquals(\"Success\", result.getMessage());\n        Assertions.assertEquals(\"Data\", result.getData());\n    }\n    @Test\n    void testIsSuccess() {\n        Assertions.assertTrue(resultVO.isSuccess());\n    }\n    @Test\n    void testGetMessage() {\n        Assertions.assertEquals(\"Test Message\", resultVO.getMessage());\n    }\n    @Test\n    void testGetData() {\n        Assertions.assertEquals(\"TestData\", resultVO.getData());\n    }\n}\nclass BookTest {\n    private Book book;\n    @BeforeEach\n    void setUp() {\n        book = new Book(\"Test Title\");\n    }\n    @Test\n    void testGetBookId() {\n        String bookId = book.getBookId();\n        Assertions.assertNotNull(bookId);\n    }\n    @Test\n    void testGetTitle() {\n        Assertions.assertEquals(\"Test Title\", book.getTitle());\n    }\n}\nclass LibrarySystemTest {\n    private LibrarySystem librarySystem;\n    private Book book;\n    @BeforeEach\n    void setUp() {\n        librarySystem = new LibrarySystem();\n        book = new Book(\"Test Book\");\n    }\n    @Test\n    void testAddNewBook() {\n        ResultVO result = librarySystem.addNewBook(book);\n        Assertions.assertTrue(result.isSuccess());\n        Assertions.assertEquals(\"添加成功\", result.getMessage());\n        Assertions.assertEquals(book.getBookId(), result.getData());\n    }\n}"}}
{"canonical_solution": "import java.lang.Math;\npublic class WeatherDataValidator {\n    public boolean checkWeatherData(float temperature, float humidity, int windSpeed) {\n        return checkTemperature(temperature) && checkHumidity(humidity) && checkWindSpeed(windSpeed);\n    }\n    private boolean checkTemperature(float temperature) {\n        return Math.abs(temperature) <= 100; \n    }\n    private boolean checkHumidity(float humidity) {\n        return humidity >= 0 && humidity <= 100; \n    }\n    private boolean checkWindSpeed(int windSpeed) {\n        return windSpeed >= 0 && windSpeed <= 150; \n    }\n    public static void main(String[] args) {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        System.out.println(validator.checkWeatherData(25.5f, 65.0f, 20)); \n        System.out.println(validator.checkWeatherData(-101.0f, 65.0f, 20)); \n        System.out.println(validator.checkWeatherData(25.5f, -1.0f, 20)); \n        System.out.println(validator.checkWeatherData(25.5f, 65.0f, 151)); \n    }\n}", "content": "Please write a Java method to check if the meteorological data collected by a weather station is within a reasonable range. The method will receive three parameters: temperature (float), humidity (float), and wind speed (integer). If all parameters are within the predefined valid range, the method returns `true`; otherwise, it returns `false`. Assume you already have three auxiliary methods: `checkTemperature`, `checkHumidity`, and `checkWindSpeed`, which are used to validate the temperature, humidity, and wind speed, respectively. Ensure your code is completely self-contained and includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Math;\npublic class WeatherDataValidator {\n    public boolean checkWeatherData(float temperature, float humidity, int windSpeed) {\n    }\n    private boolean checkTemperature(float temperature) {\n    }\n    private boolean checkHumidity(float humidity) {\n    }\n    private boolean checkWindSpeed(int windSpeed) {\n    }\n}\n```", "id": 1515, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class WeatherDataValidatorTest {\n    @Test\n    public void testCheckWeatherData_ValidData() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertTrue(validator.checkWeatherData(25.5f, 65.0f, 20));\n    }\n    @Test\n    public void testCheckWeatherData_InvalidTemperature() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertFalse(validator.checkWeatherData(-101.0f, 65.0f, 20));\n    }\n    @Test\n    public void testCheckWeatherData_InvalidHumidity() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertFalse(validator.checkWeatherData(25.5f, -1.0f, 20));\n    }\n    @Test\n    public void testCheckWeatherData_InvalidWindSpeed() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertFalse(validator.checkWeatherData(25.5f, 65.0f, 151));\n    }\n    @Test\n    public void testCheckWeatherData_UpperBoundaryValues() {\n        WeatherDataValidator validator = new WeatherDataValidator();\n        assertTrue(validator.checkWeatherData(100.0f, 100.0f, 150));\n    }\n}"}}
{"canonical_solution": "import java.util.LinkedList;\npublic class MessageQueueManager {\n    private LinkedList<String> queue = new LinkedList<>();\n    public synchronized void addMessage(String message) {\n        queue.addLast(message);\n        notifyAll();\n    }\n    public synchronized String getMessage() throws InterruptedException {\n        while (queue.isEmpty()) {\n            wait();\n        }\n        return queue.removeFirst();\n    }\n    public static void main(String[] args) throws InterruptedException {\n        MessageQueueManager manager = new MessageQueueManager();\n        manager.addMessage(\"Hello\");\n        manager.addMessage(\"World\");\n        System.out.println(manager.getMessage()); \n        System.out.println(manager.getMessage()); \n    }\n}", "content": "Please write a Java program to implement a simple message queue management system. The system should allow users to add messages to the queue and retrieve and remove messages from the queue according to the FIFO (First-In-First-Out) principle. Ensure that your implementation is thread-safe.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.LinkedList;\npublic class MessageQueueManager {\n    private LinkedList<String> queue = new LinkedList<>();\n    public synchronized void addMessage(String message) {\n    }\n    public synchronized String getMessage() throws InterruptedException {\n    }\n}\n```", "id": 1516, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class MessageQueueManagerTest {\n    private MessageQueueManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new MessageQueueManager();\n    }\n    @Test\n    public void testAddMessage() throws InterruptedException {\n        manager.addMessage(\"TestMessage\");\n        assertEquals(\"TestMessage\", manager.getMessage());\n    }\n    @Test\n    public void testGetMessageWithMultipleMessages() throws InterruptedException {\n        manager.addMessage(\"Message1\");\n        manager.addMessage(\"Message2\");\n        assertEquals(\"Message1\", manager.getMessage());\n        assertEquals(\"Message2\", manager.getMessage());\n    }\n    @Test\n    public void testGetMessageWhenQueueIsEmpty() {\n        Thread thread = new Thread(() -> {\n            try {\n                manager.getMessage();\n                fail(\"Expected InterruptedException was not thrown\");\n            } catch (InterruptedException e) {\n            }\n        });\n        thread.start();\n        thread.interrupt();\n    }\n    @Test\n    public void testNotifyAllAfterAddMessage() throws InterruptedException {\n        Thread thread = new Thread(() -> {\n            try {\n                assertEquals(\"Message1\", manager.getMessage());\n            } catch (InterruptedException e) {\n                fail(e.getMessage());\n            }\n        });\n        thread.start();\n        manager.addMessage(\"Message1\");\n        thread.join(); \n    }\n    @Test\n    public void testQueueOrderIsMaintained() throws InterruptedException {\n        manager.addMessage(\"First\");\n        manager.addMessage(\"Second\");\n        manager.addMessage(\"Third\");\n        assertEquals(\"First\", manager.getMessage());\n        assertEquals(\"Second\", manager.getMessage());\n        assertEquals(\"Third\", manager.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class LibraryBorrowingService {\n    public static void processBorrowingRequest(String[] args) {\n        if (args.length != 4) {\n            System.out.println(\"输入格式错误，请按照以下格式输入：图书ID 借阅者姓名 借阅日期 预计归还日期\");\n            return;\n        }\n        String bookId = args[0];\n        String borrowerName = args[1];\n        String borrowDateStr = args[2];\n        String returnDateStr = args[3];\n        LocalDate borrowDate;\n        LocalDate returnDate;\n        try {\n            borrowDate = LocalDate.parse(borrowDateStr, DateTimeFormatter.ISO_LOCAL_DATE);\n            returnDate = LocalDate.parse(returnDateStr, DateTimeFormatter.ISO_LOCAL_DATE);\n        } catch (DateTimeParseException e) {\n            System.out.println(\"日期格式错误，请使用YYYY-MM-DD格式。\");\n            return;\n        }\n        if (!returnDate.isAfter(borrowDate)) {\n            System.out.println(\"预计归还日期应该在借阅日期之后。\");\n            return;\n        }\n        System.out.println(\"图书借阅成功。图书ID: \" + bookId + \", 借阅者: \" + borrowerName + \", 借阅日期: \" + borrowDateStr + \", 预计归还日期: \" + returnDateStr);\n    }\n    public static void main(String[] args) {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\", \"2023-04-15\"};\n        processBorrowingRequest(testData);\n    }\n}", "content": "Please design a Java program to handle the borrowing of books in a library. The program should be able to accept a string array as a parameter, which contains the book ID, borrower's name, borrowing date, and expected return date. If the input parameters do not meet the requirements (i.e., the number of parameters is not 4), the program should prompt the user that the input format is incorrect and provide a correct format example. If the input is correct, the program should check the validity of the borrowing date and the expected return date (the expected return date should be after the borrowing date). If the dates are invalid, the program should prompt the user and terminate. If everything is fine, the program should confirm the book borrowing success. Please design a simple method to verify the validity of dates yourself.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class LibraryBorrowingService {\n    public static void processBorrowingRequest(String[] args) {\n    }\n}\n```", "id": 1517, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.time.LocalDate;\npublic class LibraryBorrowingServiceTest {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private final PrintStream originalOut = System.out;\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n    @org.junit.jupiter.api.AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n    @Test\n    public void testCorrectInput() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\", \"2023-04-15\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"图书借阅成功\"));\n    }\n    @Test\n    public void testIncorrectInputLength() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"输入格式错误\"));\n    }\n    @Test\n    public void testInvalidDateFormat() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-01\", \"2023/04/15\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"日期格式错误\"));\n    }\n    @Test\n    public void testReturnDateBeforeBorrowDate() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-15\", \"2023-04-01\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"预计归还日期应该在借阅日期之后\"));\n    }\n    @Test\n    public void testBorrowDateEqualsReturnDate() {\n        String[] testData = {\"1234\", \"张三\", \"2023-04-15\", \"2023-04-15\"};\n        LibraryBorrowingService.processBorrowingRequest(testData);\n        assertTrue(outContent.toString().contains(\"预计归还日期应该在借阅日期之后\"));\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\npublic class ImmutableCircle {\n    private final Color color;\n    public ImmutableCircle(Color color) {\n        this.color = color;\n    }\n    public void changeColor(Color newColor) {\n        throw new UnsupportedOperationException(\"圆形是不可变的，不能改变颜色\");\n    }\n    public Color getColor() {\n        return color;\n    }\n}\nclass CheckImmutableCircle {\n    public static void main(String[] args) {\n        ImmutableCircle circle = new ImmutableCircle(Color.RED);\n        try {\n            circle.changeColor(Color.BLUE);\n            System.out.println(\"错误：不应该能够改变颜色\");\n        } catch (UnsupportedOperationException e) {\n            System.out.println(\"正确：抛出了不支持操作的异常，因为圆形是不可变的\");\n        }\n        if (circle.getColor().equals(Color.RED)) {\n            System.out.println(\"正确：圆形的颜色没有改变\");\n        } else {\n            System.out.println(\"错误：圆形的颜色不应该改变\");\n        }\n    }\n}", "content": "Please write a Java class `ImmutableCircle` that represents an immutable circle. The class should include a method `changeColor(Color newColor)` that attempts to change the color of the circle. However, since the circle is immutable, this method should throw an exception, indicating to the user that this object is read-only and its color cannot be changed. Ensure your code includes the necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Color;\npublic class ImmutableCircle {\n    private final Color color;\n    public ImmutableCircle(Color color) {\n    }\n    public void changeColor(Color newColor) {\n    }\n    public Color getColor() {\n    }\n}\n```", "id": 1518, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.awt.Color;\npublic class ImmutableCircleTest {\n    @Test\n    public void testGetColor() {\n        ImmutableCircle circle = new ImmutableCircle(Color.RED);\n        assertEquals(Color.RED, circle.getColor());\n    }\n    @Test\n    public void testChangeColor() {\n        ImmutableCircle circle = new ImmutableCircle(Color.RED);\n        assertThrows(UnsupportedOperationException.class, () -> {\n            circle.changeColor(Color.BLUE);\n        });\n    }\n    @Test\n    public void testConstructor() {\n        ImmutableCircle circle = new ImmutableCircle(Color.GREEN);\n        assertNotNull(circle);\n    }\n    @Test\n    public void testColorIsImmutable() {\n        ImmutableCircle circle = new ImmutableCircle(Color.YELLOW);\n        assertThrows(UnsupportedOperationException.class, () -> {\n            circle.changeColor(Color.BLACK);\n        });\n        assertEquals(Color.YELLOW, circle.getColor());\n    }\n    @Test\n    public void testUnsupportedOperationExceptionMessage() {\n        ImmutableCircle circle = new ImmutableCircle(Color.BLUE);\n        UnsupportedOperationException exception = assertThrows(UnsupportedOperationException.class, () -> {\n            circle.changeColor(Color.WHITE);\n        });\n        assertEquals(\"圆形是不可变的，不能改变颜色\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import org.junit.jupiter.api.Assertions;\npublic class SchoolManagement {\n    static class Course {\n        private String code;\n        private String name;\n        private int semester;\n        private int credits;\n        public Course(String code, String name, int semester, int credits) {\n            this.code = code;\n            this.name = name;\n            this.semester = semester;\n            this.credits = credits;\n        }\n        public String getCode() {\n            return code;\n        }\n    }\n    public static void testCourseGetCode() {\n        Course course = new Course(\"ENG101\", \"English Basics\", 1, 4);\n        Assertions.assertEquals(\"ENG101\", course.getCode());\n    }\n    public static void main(String[] args) {\n        testCourseGetCode();\n    }\n}", "content": "Please write a Java program to manage school course information. Specific requirements are as follows:\n\n- There needs to be a Course class that includes four attributes: course code (code), course name (name), semester (semester), and credits (credits).\n- Provide a constructor for the Course class that can initialize these four attributes.\n- Provide a method `getCode()` to retrieve the course code.\n\nEnsure the code is self-contained and clear, including necessary package imports.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport org.junit.jupiter.api.Assertions;\npublic class SchoolManagement {\n    static class Course {\n        private String code;\n        private String name;\n        private int semester;\n        private int credits;\n        public Course(String code, String name, int semester, int credits) {\n        }\n        public String getCode() {\n            return code;\n        }\n    }\n}\n```", "id": 1519, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class SchoolManagementTest {\n    @Test\n    public void testCourseConstructorAndGetters() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"ENG101\", \"English Basics\", 1, 4);\n        Assertions.assertEquals(\"ENG101\", course.getCode());\n        Assertions.assertNotNull(course);\n        Assertions.assertEquals(\"ENG101\", course.getCode());\n    }\n    @Test\n    public void testCourseCode() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"CS101\", \"Computer Science Basics\", 1, 3);\n        Assertions.assertEquals(\"CS101\", course.getCode());\n    }\n    @Test\n    public void testInvalidCourseCode() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"MAT101\", \"Mathematics Basics\", 1, 3);\n        Assertions.assertNotEquals(\"PHY101\", course.getCode());\n    }\n    @Test\n    public void testCourseWithDifferentSemester() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"HIS101\", \"History Basics\", 2, 3);\n        Assertions.assertEquals(\"HIS101\", course.getCode());\n    }\n    @Test\n    public void testCourseWithDifferentCredits() {\n        SchoolManagement.Course course = new SchoolManagement.Course(\"BIO101\", \"Biology Basics\", 1, 5);\n        Assertions.assertEquals(\"BIO101\", course.getCode());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private static Map<String, String[]> booksDatabase = new HashMap<>();\n    static {\n        booksDatabase.put(\"001\", new String[]{\"Java基础\", \"张三\"});\n        booksDatabase.put(\"002\", new String[]{\"算法导论\", \"李四\"});\n        booksDatabase.put(\"003\", new String[]{\"操作系统\", \"王五\"});\n    }\n    public static String getBookDetails(String bookId) {\n        if (booksDatabase.containsKey(bookId)) {\n            String[] details = booksDatabase.get(bookId);\n            return \"书名: \" + details[0] + \", 作者: \" + details[1];\n        } else {\n            return \"错误：图书ID不存在。\";\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(getBookDetails(\"001\")); \n        System.out.println(getBookDetails(\"004\")); \n    }\n}", "content": "Please write a Java method that can query and return specific book information. Assume we have a book management system where each book has a unique ID, title, and author. We now need to fetch detailed information about a book based on its ID. Please implement a method named `getBookDetails` that receives the book ID as a parameter and returns a string containing the title and author. If the book ID does not exist, it should return a specified error message string.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private static Map<String, String[]> booksDatabase = new HashMap<>();\n    static {\n        booksDatabase.put(\"001\", new String[]{\"Java基础\", \"张三\"});\n        booksDatabase.put(\"002\", new String[]{\"算法导论\", \"李四\"});\n        booksDatabase.put(\"003\", new String[]{\"操作系统\", \"王五\"});\n    }\n    public static String getBookDetails(String bookId) {\n    }\n}\n```", "id": 1520, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Assert;\npublic class BookFinderTest {\n    @Test\n    public void testValidBookId() {\n        String bookId = \"001\";\n        String expected = \"书名: Java基础, 作者: 张三\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testValidBookId2() {\n        String bookId = \"002\";\n        String expected = \"书名: 算法导论, 作者: 李四\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testInvalidBookId() {\n        String bookId = \"004\";\n        String expected = \"错误：图书ID不存在。\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testValidBookId3() {\n        String bookId = \"003\";\n        String expected = \"书名: 操作系统, 作者: 王五\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n    @Test\n    public void testEmptyBookId() {\n        String bookId = \"\";\n        String expected = \"错误：图书ID不存在。\";\n        String actual = BookFinder.getBookDetails(bookId);\n        Assert.assertEquals(expected, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.Set;\nimport java.util.HashSet;\nclass DefaultTask {\n    public static final java.util.Map<String, Set<String>> DEFAULT_TOOLS = new java.util.HashMap<>();\n    static {\n        Set<String> toolsForTaskA = new HashSet<>();\n        toolsForTaskA.add(\"Tool1\");\n        toolsForTaskA.add(\"Tool2\");\n        DEFAULT_TOOLS.put(\"TaskA\", toolsForTaskA);\n        Set<String> toolsForTaskB = new HashSet<>();\n        toolsForTaskB.add(\"Tool3\");\n        DEFAULT_TOOLS.put(\"TaskB\", toolsForTaskB);\n    }\n}\nclass CustomTask {\n    public static final java.util.Map<String, Set<String>> CUSTOM_TOOLS = new java.util.HashMap<>();\n    static {\n        Set<String> toolsForTaskC = new HashSet<>();\n        toolsForTaskC.add(\"Tool4\");\n        CUSTOM_TOOLS.put(\"TaskC\", toolsForTaskC);\n    }\n}\npublic class TaskToolFinder {\n    public static Set<String> getRequiredTools(final String taskName) {\n        if (DefaultTask.DEFAULT_TOOLS.containsKey(taskName)) {\n            Set<String> requiredTools = new HashSet<>(DefaultTask.DEFAULT_TOOLS.get(taskName));\n            requiredTools.add(taskName);\n            return requiredTools;\n        } else if (CustomTask.CUSTOM_TOOLS.containsKey(taskName)) {\n            Set<String> requiredTools = new HashSet<>(CustomTask.CUSTOM_TOOLS.get(taskName));\n            requiredTools.add(taskName);\n            return requiredTools;\n        } else {\n            throw new IllegalArgumentException(String.format(\"%s is not a supported task.\", taskName));\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(getRequiredTools(\"TaskA\")); \n        System.out.println(getRequiredTools(\"TaskC\")); \n        try {\n            System.out.println(getRequiredTools(\"TaskX\")); \n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method to get the names of all tools required for a specified task. Let's assume we have two types of tasks: default tasks and custom tasks, each requiring a specific set of tools to complete. The tool requirements for default tasks are defined in the `DefaultTask` class's `DEFAULT_TOOLS` constant, while the tool requirements for custom tasks are defined in the `CustomTask` class's `CUSTOM_TOOLS` constant. The method should accept a task name as an input parameter and return a set containing the names of the task and all its dependent tools. If the given task name is neither a default task nor a custom task, an `IllegalArgumentException` should be thrown.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Set;\nimport java.util.HashSet;\nclass DefaultTask {\n    public static final java.util.Map<String, Set<String>> DEFAULT_TOOLS = new java.util.HashMap<>();\n    static {\n    }\n}\nclass CustomTask {\n    public static final java.util.Map<String, Set<String>> CUSTOM_TOOLS = new java.util.HashMap<>();\n    static {\n    }\n}\npublic class TaskToolFinder {\n    public static Set<String> getRequiredTools(final String taskName) {\n    }\n}\n```", "id": 1521, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Map;\nclass TaskToolFinderTest {\n    @Test\n    public void testGetRequiredToolsForTaskA() {\n        Set<String> expectedTools = new HashSet<>();\n        expectedTools.add(\"Tool1\");\n        expectedTools.add(\"Tool2\");\n        expectedTools.add(\"TaskA\");\n        assertEquals(expectedTools, TaskToolFinder.getRequiredTools(\"TaskA\"));\n    }\n    @Test\n    public void testGetRequiredToolsForTaskC() {\n        Set<String> expectedTools = new HashSet<>();\n        expectedTools.add(\"Tool4\");\n        expectedTools.add(\"TaskC\");\n        assertEquals(expectedTools, TaskToolFinder.getRequiredTools(\"TaskC\"));\n    }\n    @Test\n    public void testGetRequiredToolsForUnsupportedTask() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            TaskToolFinder.getRequiredTools(\"TaskX\");\n        });\n    }\n    @Test\n    public void testGetRequiredToolsForTaskB() {\n        Set<String> expectedTools = new HashSet<>();\n        expectedTools.add(\"Tool3\");\n        expectedTools.add(\"TaskB\");\n        assertEquals(expectedTools, TaskToolFinder.getRequiredTools(\"TaskB\"));\n    }\n    @Test\n    public void testGetRequiredToolsForAnotherUnsupportedTask() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            TaskToolFinder.getRequiredTools(\"TaskD\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public double divide(double a, double b) throws ArithmeticException {\n        if (b == 0) {\n            throw new ArithmeticException(\"不能除以零\");\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入两个数字和一个操作符（+、-、*、/），例如：3 4 +\");\n        double num1 = scanner.nextDouble();\n        double num2 = scanner.nextDouble();\n        char operator = scanner.next().charAt(0);\n        try {\n            switch (operator) {\n                case '+':\n                    System.out.println(\"结果是：\" + calculator.add(num1, num2));\n                    break;\n                case '-':\n                    System.out.println(\"结果是：\" + calculator.subtract(num1, num2));\n                    break;\n                case '*':\n                    System.out.println(\"结果是：\" + calculator.multiply(num1, num2));\n                    break;\n                case '/':\n                    System.out.println(\"结果是：\" + calculator.divide(num1, num2));\n                    break;\n                default:\n                    System.out.println(\"未知的操作符：\" + operator);\n            }\n        } catch (ArithmeticException e) {\n            System.out.println(\"错误：\" + e.getMessage());\n        }\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This class should be able to perform basic arithmetic operations: addition, subtraction, multiplication, and division. Ensure that your program handles the division by zero situation by throwing an `ArithmeticException` with the message \"Cannot divide by zero\". \n\nPlease follow these guidelines:\n\n- The code must include all necessary import statements.\n- The naming of classes and methods should be clear and concise.\n- Use comments and documentation strings to enhance code readability.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n    }\n    public double subtract(double a, double b) {\n    }\n    public double multiply(double a, double b) {\n    }\n    public double divide(double a, double b) throws ArithmeticException {\n    }\n}\n```", "id": 1522, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    private SimpleCalculator calculator;\n    @BeforeEach\n    public void setup() {\n        calculator = new SimpleCalculator();\n    }\n    @Test\n    public void testAdd() {\n        assertEquals(5.0, calculator.add(2.0, 3.0));\n        assertEquals(-1.0, calculator.add(-2.0, 1.0));\n        assertEquals(0.0, calculator.add(2.0, -2.0));\n    }\n    @Test\n    public void testSubtract() {\n        assertEquals(-1.0, calculator.subtract(2.0, 3.0));\n        assertEquals(-3.0, calculator.subtract(-2.0, 1.0));\n        assertEquals(4.0, calculator.subtract(2.0, -2.0));\n    }\n    @Test\n    public void testMultiply() {\n        assertEquals(6.0, calculator.multiply(2.0, 3.0));\n        assertEquals(-2.0, calculator.multiply(-2.0, 1.0));\n        assertEquals(-4.0, calculator.multiply(2.0, -2.0));\n    }\n    @Test\n    public void testDivide() {\n        assertEquals(2.0, calculator.divide(6.0, 3.0));\n        assertEquals(-2.0, calculator.divide(-6.0, 3.0));\n        assertEquals(-1.0, calculator.divide(2.0, -2.0));\n    }\n    @Test\n    public void testDivideByZero() {\n        Exception exception = assertThrows(ArithmeticException.class, () -> {\n            calculator.divide(1.0, 0.0);\n        });\n        assertEquals(\"不能除以零\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class DirectionConverter {\n    public static String convertToChineseName(int directionCode) {\n        switch (directionCode) {\n            case 1:\n                return \"上\";\n            case 2:\n                return \"下\";\n            case 3:\n                return \"左\";\n            case 4:\n                return \"右\";\n            default:\n                throw new IllegalArgumentException(\"无效的方向代码\");\n        }\n    }\n    public static void checkFunction() {\n        assert \"上\".equals(convertToChineseName(1)) : \"代码1应该返回上\";\n        assert \"下\".equals(convertToChineseName(2)) : \"代码2应该返回下\";\n        assert \"左\".equals(convertToChineseName(3)) : \"代码3应该返回左\";\n        assert \"右\".equals(convertToChineseName(4)) : \"代码4应该返回右\";\n        try {\n            convertToChineseName(0);\n            assert false : \"无效的方向代码应该抛出异常\";\n        } catch (IllegalArgumentException e) {\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "Please write a Java method `convertToChineseName` that receives an integer parameter `directionCode` and returns the corresponding Chinese direction name based on the parameter. Specific requirements are as follows:\n\n- If `directionCode` is 1, return \"上\".\n- If `directionCode` is 2, return \"下\".\n- If `directionCode` is 3, return \"左\".\n- If `directionCode` is 4, return \"右\".\n- If `directionCode` is not 1, 2, 3, or 4, throw an `IllegalArgumentException` with the message \"无效的方向代码\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class DirectionConverter {\n    public static String convertToChineseName(int directionCode) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1523, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DirectionConverterTest {\n    @Test\n    public void testConvertToChineseName_Up() {\n        assertEquals(\"上\", DirectionConverter.convertToChineseName(1));\n    }\n    @Test\n    public void testConvertToChineseName_Down() {\n        assertEquals(\"下\", DirectionConverter.convertToChineseName(2));\n    }\n    @Test\n    public void testConvertToChineseName_Left() {\n        assertEquals(\"左\", DirectionConverter.convertToChineseName(3));\n    }\n    @Test\n    public void testConvertToChineseName_Right() {\n        assertEquals(\"右\", DirectionConverter.convertToChineseName(4));\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testConvertToChineseName_InvalidCode() {\n        DirectionConverter.convertToChineseName(0);\n    }\n}"}}
{"canonical_solution": "import javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\nimport java.util.List;\npublic class ScoreLoader {\n    private JTable studentScoreTable;\n    public ScoreLoader(JTable table) {\n        this.studentScoreTable = table;\n    }\n    public void loadScoresToTable(List<Student> students) {\n        DefaultTableModel model = (DefaultTableModel) studentScoreTable.getModel();\n        model.setColumnIdentifiers(new Object[]{\"姓名\", \"分数\"});\n        for (Student student : students) {\n            model.addRow(new Object[]{student.getName(), student.getScore()});\n        }\n    }\n    public static class Student {\n        private String name;\n        private int score;\n        public Student(String name, int score) {\n            this.name = name;\n            this.score = score;\n        }\n        public String getName() {\n            return name;\n        }\n        public int getScore() {\n            return score;\n        }\n    }\n    public static void main(String[] args) {\n        JTable table = new JTable();\n        ScoreLoader loader = new ScoreLoader(table);\n        loader.loadScoresToTable(List.of(\n                new Student(\"张三\", 88),\n                new Student(\"李四\", 92),\n                new Student(\"王五\", 76)\n        ));\n        System.out.println(table.getModel().getValueAt(0, 0).equals(\"张三\") &&\n                           (int)table.getModel().getValueAt(0, 1) == 88);\n        System.out.println(table.getModel().getValueAt(1, 0).equals(\"李四\") &&\n                           (int)table.getModel().getValueAt(1, 1) == 92);\n        System.out.println(table.getModel().getValueAt(2, 0).equals(\"王五\") &&\n                           (int)table.getModel().getValueAt(2, 1) == 76);\n    }\n}", "content": "Please write a Java method that loads a set of students' grades into a graphical user interface (GUI) table. Assume you already have a table named `StudentScoreTable`, and you need to populate this table with students' names and their scores. The student information is provided via a list of student objects, with each student object containing the student's name and score. Ensure that your code can create an appropriate table model and correctly populate the table with student data.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\nimport java.util.List;\npublic class ScoreLoader {\n    private JTable studentScoreTable;\n    public ScoreLoader(JTable table) {\n    }\n    public void loadScoresToTable(List<Student> students) {\n    }\n    public static class Student {\n        private String name;\n        private int score;\n        public Student(String name, int score) {\n        }\n        public String getName() {\n            return name;\n        }\n        public int getScore() {\n            return score;\n        }\n    }\n}\n```", "id": 1524, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class ScoreLoaderTest {\n    private JTable table;\n    private ScoreLoader loader;\n    @BeforeEach\n    public void setUp() {\n        table = new JTable();\n        loader = new ScoreLoader(table);\n    }\n    @Test\n    public void testLoadScoresToTable() {\n        List<ScoreLoader.Student> students = List.of(\n                new ScoreLoader.Student(\"张三\", 88),\n                new ScoreLoader.Student(\"李四\", 92),\n                new ScoreLoader.Student(\"王五\", 76)\n        );\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(\"张三\", model.getValueAt(0, 0));\n        assertEquals(88, model.getValueAt(0, 1));\n        assertEquals(\"李四\", model.getValueAt(1, 0));\n        assertEquals(92, model.getValueAt(1, 1));\n        assertEquals(\"王五\", model.getValueAt(2, 0));\n        assertEquals(76, model.getValueAt(2, 1));\n    }\n    @Test\n    public void testEmptyStudentList() {\n        List<ScoreLoader.Student> students = new ArrayList<>();\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(0, model.getRowCount());\n    }\n    @Test\n    public void testNullStudentList() {\n        assertThrows(NullPointerException.class, () -> {\n            loader.loadScoresToTable(null);\n        });\n    }\n    @Test\n    public void testSingleStudent() {\n        List<ScoreLoader.Student> students = List.of(\n                new ScoreLoader.Student(\"单一学生\", 100)\n        );\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(\"单一学生\", model.getValueAt(0, 0));\n        assertEquals(100, model.getValueAt(0, 1));\n    }\n    @Test\n    public void testLoadMultipleStudent() {\n        List<ScoreLoader.Student> students = List.of(\n                new ScoreLoader.Student(\"学生A\", 80),\n                new ScoreLoader.Student(\"学生B\", 90)\n        );\n        loader.loadScoresToTable(students);\n        DefaultTableModel model = (DefaultTableModel) table.getModel();\n        assertEquals(\"学生A\", model.getValueAt(0, 0));\n        assertEquals(80, model.getValueAt(0, 1));\n        assertEquals(\"学生B\", model.getValueAt(1, 0));\n        assertEquals(90, model.getValueAt(1, 1));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\npublic class BookManager {\n    private final List<Book> books;\n    public BookManager() {\n        books = new ArrayList<>();\n    }\n    public void addBook(String name, String author) {\n        books.add(new Book(name, author));\n    }\n    public Optional<Book> findBookByName(String name) {\n        return books.stream()\n                .filter(book -> book.getName().equals(name))\n                .findFirst();\n    }\n    static class Book {\n        private final String name;\n        private final String author;\n        public Book(String name, String author) {\n            this.name = name;\n            this.author = author;\n        }\n        public String getName() {\n            return name;\n        }\n        public String getAuthor() {\n            return author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"name='\" + name + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        manager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        check(manager);\n    }\n    private static void check(BookManager manager) {\n        System.out.println(\"查询 'Java编程思想': \" + manager.findBookByName(\"Java编程思想\").orElse(null));\n        System.out.println(\"查询 'Effective Java': \" + manager.findBookByName(\"Effective Java\").orElse(null));\n        System.out.println(\"查询 '不存在的书': \" + manager.findBookByName(\"不存在的书\").orElse(null));\n    }\n}", "content": "Please write a Java program to implement a simple book management system. The system should allow users to add book information and query book information based on the book's name. Each book's information includes the book's name and author.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\npublic class BookManager {\n    private final List<Book> books;\n    public BookManager() {\n    }\n    public void addBook(String name, String author) {\n    }\n    public Optional<Book> findBookByName(String name) {\n    }\n    static class Book {\n        private final String name;\n        private final String author;\n        public Book(String name, String author) {\n        }\n        public String getName() {\n        }\n        public String getAuthor() {\n        }\n        @Override\n        public String toString() {\n        }\n    }\n}\n```", "id": 1525, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Optional;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @BeforeEach\n    void setUp() {\n        bookManager = new BookManager();\n    }\n    @Test\n    void testAddBookAndFindBookByName() {\n        bookManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        Optional<BookManager.Book> result = bookManager.findBookByName(\"Java编程思想\");\n        assertTrue(result.isPresent());\n        assertEquals(\"Java编程思想\", result.get().getName());\n        assertEquals(\"Bruce Eckel\", result.get().getAuthor());\n    }\n    @Test\n    void testFindBookByNameWhenBookDoesNotExist() {\n        Optional<BookManager.Book> result = bookManager.findBookByName(\"不存在的书\");\n        assertFalse(result.isPresent());\n    }\n    @Test\n    void testAddMultipleBooksAndFindEachByName() {\n        bookManager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        bookManager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        Optional<BookManager.Book> result1 = bookManager.findBookByName(\"Java编程思想\");\n        assertTrue(result1.isPresent());\n        assertEquals(\"Java编程思想\", result1.get().getName());\n        assertEquals(\"Bruce Eckel\", result1.get().getAuthor());\n        Optional<BookManager.Book> result2 = bookManager.findBookByName(\"Effective Java\");\n        assertTrue(result2.isPresent());\n        assertEquals(\"Effective Java\", result2.get().getName());\n        assertEquals(\"Joshua Bloch\", result2.get().getAuthor());\n    }\n    @Test\n    void testBookToString() {\n        BookManager.Book book = new BookManager.Book(\"Java编程思想\", \"Bruce Eckel\");\n        String expectedString = \"Book{name='Java编程思想', author='Bruce Eckel'}\";\n        assertEquals(expectedString, book.toString());\n    }\n    @Test\n    void testGettersForBook() {\n        BookManager.Book book = new BookManager.Book(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> bookStatusMap;\n    public BookManager() {\n        bookStatusMap = new HashMap<>();\n    }\n    public void updateBookStatus(String bookId, String newStatus) {\n        bookStatusMap.put(bookId, newStatus);\n    }\n    public String checkStatus(String bookId) {\n        return bookStatusMap.getOrDefault(bookId, \"UNKNOWN\");\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.updateBookStatus(\"123\", \"AVAILABLE\");\n        manager.updateBookStatus(\"456\", \"BORROWED\");\n        manager.updateBookStatus(\"789\", \"UNDER_REPAIR\");\n        System.out.println(\"书籍123的状态: \" + manager.checkStatus(\"123\")); \n        System.out.println(\"书籍456的状态: \" + manager.checkStatus(\"456\")); \n        System.out.println(\"书籍789的状态: \" + manager.checkStatus(\"789\")); \n        System.out.println(\"书籍000的状态: \" + manager.checkStatus(\"000\")); \n    }\n}", "content": "Please design a simple Java program to manage the borrowing status of books in a library. Each book in the library can be in one of three statuses: AVAILABLE, BORROWED, or UNDER_REPAIR. You need to implement a class named `BookManager`, which contains a method called `updateBookStatus`. This method takes two parameters: `bookId` (the unique identifier of the book) and `newStatus` (the new status of the book), and updates the status of the book based on this information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> bookStatusMap;\n    public BookManager() {\n    }\n    public void updateBookStatus(String bookId, String newStatus) {\n    }\n    public String checkStatus(String bookId) {\n    }\n}\n```", "id": 1526, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @Before\n    public void setUp() {\n        bookManager = new BookManager();\n    }\n    @Test\n    public void testUpdateBookStatus() {\n        bookManager.updateBookStatus(\"123\", \"AVAILABLE\");\n        String status = bookManager.checkStatus(\"123\");\n        Assert.assertEquals(\"AVAILABLE\", status);\n    }\n    @Test\n    public void testCheckStatusWithUnknownBook() {\n        String status = bookManager.checkStatus(\"000\");\n        Assert.assertEquals(\"UNKNOWN\", status);\n    }\n    @Test\n    public void testUpdateBookStatusMultipleUpdates() {\n        bookManager.updateBookStatus(\"456\", \"BORROWED\");\n        bookManager.updateBookStatus(\"456\", \"AVAILABLE\");\n        String status = bookManager.checkStatus(\"456\");\n        Assert.assertEquals(\"AVAILABLE\", status);\n    }\n    @Test\n    public void testCheckStatusUnderRepair() {\n        bookManager.updateBookStatus(\"789\", \"UNDER_REPAIR\");\n        String status = bookManager.checkStatus(\"789\");\n        Assert.assertEquals(\"UNDER_REPAIR\", status);\n    }\n    @Test\n    public void testUpdateDifferentBooks() {\n        bookManager.updateBookStatus(\"123\", \"AVAILABLE\");\n        bookManager.updateBookStatus(\"456\", \"BORROWED\");\n        bookManager.updateBookStatus(\"789\", \"UNDER_REPAIR\");\n        Assert.assertEquals(\"AVAILABLE\", bookManager.checkStatus(\"123\"));\n        Assert.assertEquals(\"BORROWED\", bookManager.checkStatus(\"456\"));\n        Assert.assertEquals(\"UNDER_REPAIR\", bookManager.checkStatus(\"789\"));\n    }\n}"}}
{"canonical_solution": "import java.text.DecimalFormat;\npublic class BankAccount {\n    public double calculateInterest(double amount, int duration) {\n        double annualInterestRate = 0.05; \n        double interest = amount * annualInterestRate * duration;\n        return interest;\n    }\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(10000, 2); \n        DecimalFormat df = new DecimalFormat(\"#.00\");\n        System.out.println(\"计算得到的利息为: \" + df.format(interest) + \"元\");\n        check(interest);\n    }\n    public static void check(double calculatedInterest) {\n        double expectedInterest = 1000.0; \n        if (Math.abs(calculatedInterest - expectedInterest) < 0.01) {\n            System.out.println(\"计算结果正确。\");\n        } else {\n            System.out.println(\"计算结果不正确，预期的利息为: \" + expectedInterest + \"元，但计算得到: \" + calculatedInterest + \"元。\");\n        }\n    }\n}", "content": "Please write a Java program to calculate the interest for a bank account. The program should include a class named `BankAccount`, which contains a method named `calculateInterest`. This method accepts two parameters: `amount` (principal amount) and `duration` (deposit period in years), and returns the calculated interest value. Assume the annual interest rate is 5%.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.text.DecimalFormat;\npublic class BankAccount {\n    public double calculateInterest(double amount, int duration) {\n    }\n}\n```", "id": 1527, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class BankAccountTest {\n    @Test\n    public void testCalculateInterest_10000_2() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(10000, 2);\n        assertEquals(1000.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_5000_1() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(5000, 1);\n        assertEquals(250.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_20000_3() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(20000, 3);\n        assertEquals(3000.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_0_Any() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(0, 5);\n        assertEquals(0.0, interest, 0.01);\n    }\n    @Test\n    public void testCalculateInterest_NegativeAmount() {\n        BankAccount account = new BankAccount();\n        double interest = account.calculateInterest(-10000, 2);\n        assertEquals(-1000.0, interest, 0.01);\n    }\n}"}}
{"canonical_solution": "import java.awt.Component;\nimport java.awt.Cursor;\npublic class CursorUpdater {\n    private Component uiComponent;\n    public CursorUpdater(Component uiComponent) {\n        this.uiComponent = uiComponent;\n    }\n    public void updateCursorStyle(Cursor newCursor) {\n        if (newCursor == null) {\n            uiComponent.setCursor(Cursor.getDefaultCursor());\n        } else {\n            uiComponent.setCursor(newCursor);\n        }\n    }\n    public static void main(String[] args) {\n        Component dummyComponent = new Component() {};\n        CursorUpdater cursorUpdater = new CursorUpdater(dummyComponent);\n        cursorUpdater.updateCursorStyle(null);\n        assert dummyComponent.getCursor().getType() == Cursor.DEFAULT_CURSOR : \"光标应该设置为默认光标\";\n        Cursor customCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\n        cursorUpdater.updateCursorStyle(customCursor);\n        assert dummyComponent.getCursor().getType() == Cursor.HAND_CURSOR : \"光标应该设置为手形光标\";\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "Please write a Java method to update the mouse cursor style for a user interface component. If the passed cursor object is `null`, the component's cursor should be set to the default cursor. Otherwise, the component's cursor should be set to the style of the passed cursor. Ensure that your implementation can handle type casting and does not raise exceptions when setting the cursor.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Component;\nimport java.awt.Cursor;\npublic class CursorUpdater {\n    private Component uiComponent;\n    public CursorUpdater(Component uiComponent) {\n    }\n    public void updateCursorStyle(Cursor newCursor) {\n    }\n}\n```", "id": 1528, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.awt.Component;\nimport java.awt.Cursor;\npublic class CursorUpdaterTest {\n    private Component dummyComponent;\n    private CursorUpdater cursorUpdater;\n    @BeforeEach\n    public void setUp() {\n        dummyComponent = new Component() {};\n        cursorUpdater = new CursorUpdater(dummyComponent);\n    }\n    @Test\n    public void testUpdateCursorStyleWithNull() {\n        cursorUpdater.updateCursorStyle(null);\n        assertEquals(Cursor.getDefaultCursor(), dummyComponent.getCursor(), \"光标应该设置为默认光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithHandCursor() {\n        Cursor customCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);\n        cursorUpdater.updateCursorStyle(customCursor);\n        assertEquals(customCursor, dummyComponent.getCursor(), \"光标应该设置为手形光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithWaitCursor() {\n        Cursor waitCursor = Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);\n        cursorUpdater.updateCursorStyle(waitCursor);\n        assertEquals(waitCursor, dummyComponent.getCursor(), \"光标应该设置为等待光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithCrosshairCursor() {\n        Cursor crosshairCursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);\n        cursorUpdater.updateCursorStyle(crosshairCursor);\n        assertEquals(crosshairCursor, dummyComponent.getCursor(), \"光标应该设置为十字光标\");\n    }\n    @Test\n    public void testUpdateCursorStyleWithMoveCursor() {\n        Cursor moveCursor = Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR);\n        cursorUpdater.updateCursorStyle(moveCursor);\n        assertEquals(moveCursor, dummyComponent.getCursor(), \"光标应该设置为移动光标\");\n    }\n}"}}
{"canonical_solution": "import java.util.Map;\npublic class LibraryReportGenerator {\n    public static String generateReport(Map<String, Integer> bookStats) {\n        StringBuilder report = new StringBuilder();\n        bookStats.forEach((type, quantity) -> report.append(type).append(\": \").append(quantity).append(\"\\n\"));\n        return report.toString();\n    }\n    public static void main(String[] args) {\n        Map<String, Integer> bookStats = Map.of(\n            \"小说\", 150,\n            \"科幻\", 90,\n            \"历史\", 120\n        );\n        String report = generateReport(bookStats);\n        System.out.println(report);\n        checkReport(report);\n    }\n    private static void checkReport(String report) {\n        assert report.contains(\"小说: 150\");\n        assert report.contains(\"科幻: 90\");\n        assert report.contains(\"历史: 120\");\n        System.out.println(\"报告生成正确！\");\n    }\n}", "content": "Please write a Java method to generate a simple report showing the number of books of different types in a virtual library. The report should be returned in text format, with each type of book on a new line in the format \"Type: Quantity\". The book types and their counts are passed through a `Map<String, Integer>` parameter, where the key is the book type and the value is the number of books of that type. Ensure that the method includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Map;\npublic class LibraryReportGenerator {\n    public static String generateReport(Map<String, Integer> bookStats) {\n    }\n}\n```", "id": 1529, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Map;\npublic class LibraryReportGeneratorTest {\n    @Test\n    public void testGenerateReportWithValidData() {\n        Map<String, Integer> bookStats = Map.of(\n            \"小说\", 150,\n            \"科幻\", 90,\n            \"历史\", 120\n        );\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertTrue(report.contains(\"小说: 150\"));\n        assertTrue(report.contains(\"科幻: 90\"));\n        assertTrue(report.contains(\"历史: 120\"));\n    }\n    @Test\n    public void testGenerateReportWithEmptyData() {\n        Map<String, Integer> bookStats = Map.of();\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertEquals(\"\", report);\n    }\n    @Test\n    public void testGenerateReportWithSingleEntry() {\n        Map<String, Integer> bookStats = Map.of(\"文学\", 75);\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertEquals(\"文学: 75\\n\", report);\n    }\n    @Test\n    public void testGenerateReportWithMultipleEntries() {\n        Map<String, Integer> bookStats = Map.of(\n            \"文学\", 75,\n            \"艺术\", 55,\n            \"科学\", 100\n        );\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertTrue(report.contains(\"文学: 75\"));\n        assertTrue(report.contains(\"艺术: 55\"));\n        assertTrue(report.contains(\"科学: 100\"));\n    }\n    @Test\n    public void testGenerateReportWithZeroQuantity() {\n        Map<String, Integer> bookStats = Map.of(\n            \"文学\", 0,\n            \"艺术\", 0\n        );\n        String report = LibraryReportGenerator.generateReport(bookStats);\n        assertTrue(report.contains(\"文学: 0\"));\n        assertTrue(report.contains(\"艺术: 0\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class ShoppingCart {\n    private ArrayList<String> items;\n    public void addItem(String itemName) {\n        if (items == null) {\n            items = new ArrayList<>();\n        }\n        items.add(itemName);\n    }\n    public void removeItem(String itemName) {\n        if (items != null) {\n            items.remove(itemName);\n            if (items.isEmpty()) {\n                items = null;\n            }\n        }\n    }\n    public boolean isEmpty() {\n        return items == null;\n    }\n}\nclass ShoppingCartTest {\n    public static void main(String[] args) {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.addItem(\"香蕉\");\n        cart.removeItem(\"苹果\");\n        cart.removeItem(\"香蕉\");\n        if (cart.isEmpty()) {\n            System.out.println(\"测试成功：购物车为空。\");\n        } else {\n            System.out.println(\"测试失败：购物车不应该有商品。\");\n        }\n    }\n}", "content": "Please write a Java program to implement a simple shopping cart function. In this shopping cart, users can add product names to the cart list, and they can also remove specified product names from the list. If the cart becomes empty, it should be set to null, indicating that the cart is empty.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\npublic class ShoppingCart {\n    private ArrayList<String> items;\n    public void addItem(String itemName) {\n    }\n    public void removeItem(String itemName) {\n    }\n    public boolean isEmpty() {\n    }\n}\n```", "id": 1530, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass ShoppingCartTest {\n    @Test\n    void testAddItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        assertFalse(cart.isEmpty());\n    }\n    @Test\n    void testRemoveLastItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.removeItem(\"苹果\");\n        assertTrue(cart.isEmpty());\n    }\n    @Test\n    void testRemoveItemFromMultiple() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.addItem(\"香蕉\");\n        cart.removeItem(\"苹果\");\n        assertFalse(cart.isEmpty());\n    }\n    @Test\n    void testRemoveNonExistentItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"苹果\");\n        cart.removeItem(\"香蕉\");\n        assertFalse(cart.isEmpty());\n    }\n    @Test\n    void testIsEmptyWhenNew() {\n        ShoppingCart cart = new ShoppingCart();\n        assertTrue(cart.isEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.Date;\nclass Order {\n    private String orderId;\n    private String status;\n    private long cancellationTimestamp;\n    public Order(String orderId, String status) {\n        this.orderId = orderId;\n        this.status = status;\n        this.cancellationTimestamp = 0;\n    }\n    public String getOrderId() {\n        return orderId;\n    }\n    public String getStatus() {\n        return status;\n    }\n    public void setStatus(String status) {\n        this.status = status;\n    }\n    public long getCancellationTimestamp() {\n        return cancellationTimestamp;\n    }\n    public void setCancellationTimestamp(long cancellationTimestamp) {\n        this.cancellationTimestamp = cancellationTimestamp;\n    }\n}\npublic class OrderCancellation {\n    public Order cancelOrder(Order order) {\n        if (!\"CANCELLED\".equals(order.getStatus())) {\n            order.setStatus(\"CANCELLED\");\n            order.setCancellationTimestamp(System.currentTimeMillis());\n        }\n        return order;\n    }\n    public static void main(String[] args) {\n        OrderCancellation orderCancellation = new OrderCancellation();\n        Order order = new Order(\"12345\", \"PROCESSING\");\n        System.out.println(\"订单取消前的状态: \" + order.getStatus());\n        order = orderCancellation.cancelOrder(order);\n        System.out.println(\"订单取消后的状态: \" + order.getStatus());\n        System.out.println(\"订单取消的时间戳: \" + new Date(order.getCancellationTimestamp()));\n    }\n}", "content": "Please design a Java program to handle the cancellation of online shopping orders. On an e-commerce platform, when a user decides to cancel an order, the system needs to perform a series of operations to update the order status and record the cancellation timestamp. Implement a class named `OrderCancellation` that contains a method named `cancelOrder`. This method takes an order object `Order` as a parameter and returns the updated order object. If the order has already been canceled, it should not perform any operation and should directly return the original order object. After the order is canceled, the order status should be updated to \"CANCELLED\" and the cancellation timestamp should be recorded.\n\nPlease follow these guidelines:\n- The method should handle the case where the order has already been canceled, i.e., if the order status is already \"CANCELLED,\" it should directly return the order object without making any modifications.\n- After the order is canceled, the order status should be updated to \"CANCELLED\" and the cancellation timestamp should be recorded.\n- Use `System.currentTimeMillis()` to get the current timestamp.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Date;\nclass Order {\n    private String orderId;\n    private String status;\n    private long cancellationTimestamp;\n    public Order(String orderId, String status) {}\n    public String getOrderId() {}\n    public String getStatus() {}\n    public void setStatus(String status) {}\n    public long getCancellationTimestamp() {}\n    public void setCancellationTimestamp(long cancellationTimestamp) {}\n}\npublic class OrderCancellation {\n    public Order cancelOrder(Order order) {}\n}\n```", "id": 1531, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\nclass OrderTest {\n    @Test\n    void testInitialStatusAndOrderId() {\n        Order order = new Order(\"12345\", \"PROCESSING\");\n        assertEquals(\"PROCESSING\", order.getStatus());\n        assertEquals(\"12345\", order.getOrderId());\n    }\n    @Test\n    void testCancelOrderChangesStatusAndTimestamp() {\n        Order order = new Order(\"12345\", \"PROCESSING\");\n        OrderCancellation orderCancellation = new OrderCancellation();\n        orderCancellation.cancelOrder(order);\n        assertEquals(\"CANCELLED\", order.getStatus());\n        assertNotEquals(0, order.getCancellationTimestamp());\n        assertTrue(order.getCancellationTimestamp() > 0);\n    }\n    @Test\n    void testCancelAlreadyCancelledOrder() {\n        Order order = new Order(\"12345\", \"CANCELLED\");\n        OrderCancellation orderCancellation = new OrderCancellation();\n        long originalTimestamp = order.getCancellationTimestamp();\n        orderCancellation.cancelOrder(order);\n        assertEquals(\"CANCELLED\", order.getStatus());\n        assertEquals(originalTimestamp, order.getCancellationTimestamp());\n    }\n    @Test\n    void testSetAndGetOrderStatus() {\n        Order order = new Order(\"12345\", \"PENDING\");\n        order.setStatus(\"SHIPPED\");\n        assertEquals(\"SHIPPED\", order.getStatus());\n    }\n    @Test\n    void testSetAndGetCancellationTimestamp() {\n        Order order = new Order(\"12345\", \"PENDING\");\n        long currentTime = System.currentTimeMillis();\n        order.setCancellationTimestamp(currentTime);\n        assertEquals(currentTime, order.getCancellationTimestamp());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class WeatherSystem {\n    private Map<String, String> weatherData;\n    public WeatherSystem() {\n        weatherData = new HashMap<>();\n        weatherData.put(\"北京\", \"晴天\");\n        weatherData.put(\"上海\", \"多云\");\n        weatherData.put(\"广州\", \"雨天\");\n    }\n    public String getWeather(String cityName) {\n        if (weatherData.containsKey(cityName)) {\n            return weatherData.get(cityName);\n        } else {\n            return \"城市名称无效\";\n        }\n    }\n    public static void checkWeather() {\n        WeatherSystem system = new WeatherSystem();\n        System.out.println(\"北京的天气状况是：\" + system.getWeather(\"北京\")); \n        System.out.println(\"上海的天气状况是：\" + system.getWeather(\"上海\")); \n        System.out.println(\"广州的天气状况是：\" + system.getWeather(\"广州\")); \n        System.out.println(\"深圳的天气状况是：\" + system.getWeather(\"深圳\")); \n    }\n    public static void main(String[] args) {\n        checkWeather();\n    }\n}", "content": "Please design a simple Java program to simulate a basic weather system. In this system, we need to be able to return the current weather conditions for a given city name. To simplify the problem, we assume there are only three cities: Beijing, Shanghai, and Guangzhou, with their weather conditions being sunny, cloudy, and rainy, respectively. Please implement a class named `WeatherSystem`, which contains a method named `getWeather` that accepts a string parameter (city name) and returns the corresponding city's weather condition. If the input city is not in our list, please return a message informing the user that the city name is invalid.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeatherSystem {\n    private Map<String, String> weatherData;\n    public WeatherSystem() {\n    }\n    public String getWeather(String cityName) {\n    }\n    public static void checkWeather() {\n    }\n}\n```", "id": 1532, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class WeatherSystemTest {\n    private WeatherSystem weatherSystem;\n    @Before\n    public void setUp() {\n        weatherSystem = new WeatherSystem();\n    }\n    @Test\n    public void testGetWeather_Beijing() {\n        String result = weatherSystem.getWeather(\"北京\");\n        assertEquals(\"晴天\", result);\n    }\n    @Test\n    public void testGetWeather_Shanghai() {\n        String result = weatherSystem.getWeather(\"上海\");\n        assertEquals(\"多云\", result);\n    }\n    @Test\n    public void testGetWeather_Guangzhou() {\n        String result = weatherSystem.getWeather(\"广州\");\n        assertEquals(\"雨天\", result);\n    }\n    @Test\n    public void testGetWeather_InvalidCity() {\n        String result = weatherSystem.getWeather(\"深圳\");\n        assertEquals(\"城市名称无效\", result);\n    }\n    @Test\n    public void testGetWeather_NullCity() {\n        String result = weatherSystem.getWeather(null);\n        assertEquals(\"城市名称无效\", result);\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\npublic class TaskManager {\n    private double priority;\n    public TaskManager() {\n        this.priority = 5.0;\n    }\n    public void boostTaskPriority(double priorityBoost) {\n        this.priority += priorityBoost;\n        if (this.priority > 10) {\n            this.priority = 10;\n        }\n    }\n    public double getPriority() {\n        return this.priority;\n    }\n    public void checkPriorityBoost(double priorityBoost) {\n        System.out.println(\"提升前的优先级: \" + this.getPriority());\n        this.boostTaskPriority(priorityBoost);\n        System.out.println(\"提升后的优先级: \" + this.getPriority());\n    }\n    public static void main(String[] args) {\n        TaskManager taskManager = new TaskManager();\n        taskManager.checkPriorityBoost(3.5); \n        taskManager.checkPriorityBoost(5); \n    }\n}", "content": "Please write a Java program to implement a `TaskManager` class that contains a method `boostTaskPriority` to increase the priority of a task. The method takes a `double` parameter `priorityBoost`, representing the value by which the priority should be increased. If the boosted priority exceeds the maximum value of 10, the priority should be set to 10. Additionally, the class should include a `getPriority` method to retrieve the current task priority.\n\nPlease complete the programming task according to the following requirements:\n\n- Use appropriate access modifiers to ensure encapsulation.\n- When initializing, the default task priority should be 5.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.System;\npublic class TaskManager {\n    private double priority;\n    public TaskManager() {\n    }\n    public void boostTaskPriority(double priorityBoost) {\n    }\n    public double getPriority() {\n    }\n    public void checkPriorityBoost(double priorityBoost) {\n    }\n}\n```", "id": 1533, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class TaskManagerTest {\n    private TaskManager taskManager;\n    @Before\n    public void setUp() {\n        taskManager = new TaskManager();\n    }\n    @Test\n    public void testInitialPriority() {\n        assertEquals(5.0, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityWithinLimit() {\n        taskManager.boostTaskPriority(3.5);\n        assertEquals(8.5, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityBeyondLimit() {\n        taskManager.boostTaskPriority(6.0);\n        assertEquals(10.0, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityToExactLimit() {\n        taskManager.boostTaskPriority(5.0);\n        assertEquals(10.0, taskManager.getPriority(), 0.001);\n    }\n    @Test\n    public void testBoostTaskPriorityMultipleTimes() {\n        taskManager.boostTaskPriority(3.0);\n        taskManager.boostTaskPriority(2.0);\n        assertEquals(10.0, taskManager.getPriority(), 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class EmailValidator {\n    private Email email;\n    public EmailValidator(Email email) {\n        this.email = email;\n    }\n    public void validateSubject(String expectedSubject) {\n        if (this.email == null) {\n            throw new IllegalArgumentException(\"Email object is null.\");\n        }\n        String actualSubject = this.email.getSubject();\n        if (!Objects.equals(actualSubject, expectedSubject)) {\n            throw new IllegalArgumentException(String.format(\n                \"Expected email subject to be \\\"%s\\\" but was \\\"%s\\\".\",\n                expectedSubject, actualSubject));\n        }\n    }\n    public static class Email {\n        private String subject;\n        public Email(String subject) {\n            this.subject = subject;\n        }\n        public String getSubject() {\n            return subject;\n        }\n    }\n    public static void main(String[] args) {\n        Email email = new Email(\"Hello World\");\n        EmailValidator validator = new EmailValidator(email);\n        try {\n            validator.validateSubject(\"Hello World\");\n            System.out.println(\"验证成功，主题符合预期。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            validator.validateSubject(\"Goodbye World\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"验证失败：\" + e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method to verify whether an email object contains a specific subject. If the subject of the email does not match the given subject, an exception should be thrown, and the exception message should clearly specify the expected subject and the actual subject. Ensure that your code is self-contained and all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    private Email email;\n    public EmailValidator(Email email) {\n    }\n    public void validateSubject(String expectedSubject) {\n    }\n    public static class Email {\n        private String subject;\n        public Email(String subject) {\n        }\n        public String getSubject() {\n        }\n    }\n}\n```", "id": 1534, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\npublic class EmailValidatorTest {\n    @Test\n    public void testValidateSubject_Success() {\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello World\");\n        EmailValidator validator = new EmailValidator(email);\n        validator.validateSubject(\"Hello World\");\n    }\n    @Test\n    public void testValidateSubject_Failure() {\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello World\");\n        EmailValidator validator = new EmailValidator(email);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Goodbye World\");\n        });\n    }\n    @Test\n    public void testValidateSubject_NullEmail() {\n        EmailValidator validator = new EmailValidator(null);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Hello World\");\n        });\n    }\n    @Test\n    public void testValidateSubject_EmptySubject() {\n        EmailValidator.Email email = new EmailValidator.Email(\"\");\n        EmailValidator validator = new EmailValidator(email);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Hello World\");\n        });\n    }\n    @Test\n    public void testValidateSubject_NullSubject() {\n        EmailValidator.Email email = new EmailValidator.Email(null);\n        EmailValidator validator = new EmailValidator(email);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            validator.validateSubject(\"Hello World\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class SimpleLibrarySystem {\n    private List<Book> books;\n    public SimpleLibrarySystem() {\n        this.books = new ArrayList<>();\n    }\n    public void addBook(String title, String author) {\n        books.add(new Book(title, author));\n    }\n    public void removeBook(String title) {\n        books.removeIf(book -> book.title.equals(title));\n    }\n    public Book findBook(String title) {\n        return books.stream()\n                .filter(book -> book.title.equals(title))\n                .findFirst()\n                .orElse(null);\n    }\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"title='\" + title + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void main(String[] args) {\n        SimpleLibrarySystem library = new SimpleLibrarySystem();\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        library.addBook(\"Effective Java\", \"Joshua Bloch\");\n        System.out.println(library.findBook(\"Java编程思想\"));\n        library.removeBook(\"Effective Java\");\n        System.out.println(library.findBook(\"Effective Java\")); \n    }\n}", "content": "Please design a Java program to manage a simple library system. In this system, we need to be able to add books, delete books, and search for books. Each book contains a title and an author's name. Implement the following features:\n\n1. Add a Book: Record the book's title and author when adding a new book.\n2. Delete a Book: A book can be deleted from the system by its title.\n3. Search for a Book: A book can be searched by its title, and detailed information about the book (title and author) should be returned.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class SimpleLibrarySystem {\n    private List<Book> books;\n    public SimpleLibrarySystem() {}\n\n    public void addBook(String title, String author) {}\n\n    public void removeBook(String title) {}\n\n    public Book findBook(String title) { return null; }\n\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {}\n\n        @Override\n        public String toString() { return null; }\n    }\n}\n```", "id": 1535, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleLibrarySystemTest {\n    private SimpleLibrarySystem library;\n    @BeforeEach\n    public void setUp() {\n        library = new SimpleLibrarySystem();\n    }\n    @Test\n    public void testAddBook() {\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Java编程思想\");\n        assertNotNull(book);\n        assertEquals(\"Java编程思想\", book.title);\n        assertEquals(\"Bruce Eckel\", book.author);\n    }\n    @Test\n    public void testRemoveBook() {\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        library.addBook(\"Effective Java\", \"Joshua Bloch\");\n        library.removeBook(\"Effective Java\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Effective Java\");\n        assertNull(book);\n    }\n    @Test\n    public void testFindBookExists() {\n        library.addBook(\"Effective Java\", \"Joshua Bloch\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Effective Java\");\n        assertNotNull(book);\n        assertEquals(\"Effective Java\", book.title);\n        assertEquals(\"Joshua Bloch\", book.author);\n    }\n    @Test\n    public void testFindBookDoesNotExist() {\n        SimpleLibrarySystem.Book book = library.findBook(\"不存在的书名\");\n        assertNull(book);\n    }\n    @Test\n    public void testRemoveBookNonExistent() {\n        library.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        library.removeBook(\"不存在的书名\");\n        SimpleLibrarySystem.Book book = library.findBook(\"Java编程思想\");\n        assertNotNull(book);\n        assertEquals(\"Java编程思想\", book.title);\n        assertEquals(\"Bruce Eckel\", book.author);\n    }\n}"}}
{"canonical_solution": "import java.util.function.Predicate;\nimport java.util.regex.Pattern;\nclass InvalidPhoneNumberException extends Exception {\n    public InvalidPhoneNumberException(String message) {\n        super(message);\n    }\n}\npublic class PhoneNumberValidator {\n    private static final String PHONE_NUMBER_PATTERN = \"^(13|14|15|17|18)\\\\d{9}$\";\n    public boolean validatePhoneNumber(String phoneNumber) throws InvalidPhoneNumberException {\n        Predicate<String> validatePhoneNumber = n -> n.matches(PHONE_NUMBER_PATTERN);\n        boolean result = validatePhoneNumber.test(phoneNumber);\n        if (result) {\n            return true;\n        } else {\n            throw new InvalidPhoneNumberException(\"无效的手机号码\");\n        }\n    }\n    public static void main(String[] args) {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        try {\n            System.out.println(validator.validatePhoneNumber(\"13812345678\")); \n            System.out.println(validator.validatePhoneNumber(\"11812345678\")); \n        } catch (InvalidPhoneNumberException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java program to validate if the user's input phone number meets specific format requirements. The format requirements for the phone number are as follows: it must start with \"13\", \"14\", \"15\", \"17\", or \"18\", followed by 9 digits. If the phone number meets the format requirements, the function returns `true`; if it does not, a custom exception `InvalidPhoneNumberException` should be thrown with the message \"Invalid phone number\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.function.Predicate;\nimport java.util.regex.Pattern;\nclass InvalidPhoneNumberException extends Exception {\n    public InvalidPhoneNumberException(String message) {\n        super(message);\n    }\n}\npublic class PhoneNumberValidator {\n    private static final String PHONE_NUMBER_PATTERN = \"^(13|14|15|17|18)\\\\d{9}$\";\n    public boolean validatePhoneNumber(String phoneNumber) throws InvalidPhoneNumberException {\n    }\n}\n```", "id": 1536, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\npublic class PhoneNumberValidatorTest {\n    @Test\n    public void testValidPhoneNumber() throws InvalidPhoneNumberException {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        boolean isValid = validator.validatePhoneNumber(\"13812345678\");\n        Assertions.assertTrue(isValid);\n    }\n    @Test\n    public void testInvalidPhoneNumber() {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        Assertions.assertThrows(InvalidPhoneNumberException.class, () -> {\n            validator.validatePhoneNumber(\"11812345678\");\n        });\n    }\n    @Test\n    public void testValidPhoneNumberWithDifferentPrefix() throws InvalidPhoneNumberException {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        boolean isValid = validator.validatePhoneNumber(\"15112345678\");\n        Assertions.assertTrue(isValid);\n    }\n    @Test\n    public void testShortInvalidPhoneNumber() {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        Assertions.assertThrows(InvalidPhoneNumberException.class, () -> {\n            validator.validatePhoneNumber(\"138123\");\n        });\n    }\n    @Test\n    public void testEmptyPhoneNumber() {\n        PhoneNumberValidator validator = new PhoneNumberValidator();\n        Assertions.assertThrows(InvalidPhoneNumberException.class, () -> {\n            validator.validatePhoneNumber(\"\");\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Scanner;\npublic class BookSearchSystem {\n    private static Scanner scanner = new Scanner(System.in);\n    private static HashMap<Integer, String[]> books = new HashMap<>();\n    public static void initializeBooks() {\n        books.put(1, new String[]{\"Java基础\", \"张三\"});\n        books.put(2, new String[]{\"Python入门\", \"李四\"});\n        books.put(3, new String[]{\"数据结构\", \"王五\"});\n    }\n    public static void searchBook() {\n        System.out.println(\"请输入图书编号：\");\n        int bookId = scanner.nextInt();\n        if (books.containsKey(bookId)) {\n            String[] bookInfo = books.get(bookId);\n            System.out.println(\"图书名称：\" + bookInfo[0] + \", 作者：\" + bookInfo[1]);\n        } else {\n            System.out.println(\"错误：图书编号不存在。\");\n        }\n    }\n    public static void main(String[] args) {\n        initializeBooks();\n        searchBook();\n    }\n}", "content": "Please design a feature for a book management system that allows users to query book information. Users can search for book details, including the book's title and author, by entering the book's ID. If the entered ID does not exist, an appropriate error message should be displayed.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class BookSearchSystem {\n    private static Scanner scanner = new Scanner(System.in);\n    private static HashMap<Integer, String[]> books = new HashMap<>();\n    public static void initializeBooks() {\n    }\n    public static void searchBook() {\n    }\n}\n```", "id": 1537, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.HashMap;\nimport java.util.Scanner;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookSearchSystemTest {\n    private static HashMap<Integer, String[]> books;\n    @BeforeAll\n    public static void initializeBooks() {\n        books = new HashMap<>();\n        books.put(1, new String[]{\"Java基础\", \"张三\"});\n        books.put(2, new String[]{\"Python入门\", \"李四\"});\n        books.put(3, new String[]{\"数据结构\", \"王五\"});\n    }\n    @Test\n    public void testInitializeBooks() {\n        assertEquals(3, books.size());\n        assertArrayEquals(new String[]{\"Java基础\", \"张三\"}, books.get(1));\n        assertArrayEquals(new String[]{\"Python入门\", \"李四\"}, books.get(2));\n        assertArrayEquals(new String[]{\"数据结构\", \"王五\"}, books.get(3));\n    }\n    @Test\n    public void testValidBookId() {\n        int bookId = 1;\n        assertTrue(books.containsKey(bookId));\n        String[] bookInfo = books.get(bookId);\n        assertAll(\"bookInfo\",\n            () -> assertEquals(\"Java基础\", bookInfo[0]),\n            () -> assertEquals(\"张三\", bookInfo[1]));\n    }\n    @Test\n    public void testInvalidBookId() {\n        int bookId = 4;\n        assertFalse(books.containsKey(bookId));\n    }\n    @Test\n    public void testAnotherValidBookId() {\n        int bookId = 3;\n        assertTrue(books.containsKey(bookId));\n        String[] bookInfo = books.get(bookId);\n        assertAll(\"bookInfo\",\n            () -> assertEquals(\"数据结构\", bookInfo[0]),\n            () -> assertEquals(\"王五\", bookInfo[1]));\n    }\n    @Test\n    public void testAnotherInvalidBookId() {\n        int bookId = 10;\n        assertFalse(books.containsKey(bookId));\n    }\n}"}}
{"canonical_solution": "import java.math.BigDecimal;\npublic class Departamento {\n    private BigDecimal orcamentoFolha;\n    public Departamento(BigDecimal orcamentoFolha) {\n        this.orcamentoFolha = orcamentoFolha;\n    }\n    public BigDecimal getOrcamentoFolha() {\n        return orcamentoFolha;\n    }\n    public void ajustaOrcamento(BigDecimal valor) {\n        orcamentoFolha = orcamentoFolha.add(valor);\n    }\n}\npublic class Empregado {\n    private Departamento departamento;\n    private BigDecimal salario;\n    public Empregado(Departamento departamento, BigDecimal salario) {\n        this.departamento = departamento;\n        this.salario = salario;\n    }\n    public Departamento getDepartamento() {\n        return departamento;\n    }\n    public BigDecimal getSalario() {\n        return salario;\n    }\n}\npublic class TransferenciaService {\n    public boolean tentarTransferencia(Empregado empregadoNovo, Empregado empregadoAtual) {\n        Departamento departamentoNovo = empregadoNovo.getDepartamento();\n        if (empregadoNovo.getSalario().compareTo(departamentoNovo.getOrcamentoFolha()) <= 0) {\n            Departamento departamentoAtual = empregadoAtual.getDepartamento();\n            departamentoAtual.ajustaOrcamento(empregadoAtual.getSalario());\n            departamentoNovo.ajustaOrcamento(empregadoNovo.getSalario().negate());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"20000\"));\n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\"));\n        TransferenciaService service = new TransferenciaService();\n        boolean resultado = service.tentarTransferencia(empregadoNovo, empregadoAtual);\n        System.out.println(\"Transferência foi \" + (resultado ? \"成功\" : \"失败\"));\n    }\n}", "content": "Please write a Java method for handling the transfer of an employee from one department to another, and decide whether the transfer can take place based on the employee's new salary and the new department's budget. If the new department's budget is sufficient to cover the employee's salary, the transfer can proceed, and the budgets of the two departments need to be updated accordingly. If the budget is insufficient, the transfer will not happen.\n\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.math.BigDecimal;\npublic class Departamento {\n    private BigDecimal orcamentoFolha;\n    public Departamento(BigDecimal orcamentoFolha) {\n    }\n    public BigDecimal getOrcamentoFolha() {\n    }\n    public void ajustaOrcamento(BigDecimal valor) {\n    }\n}\npublic class Empregado {\n    private Departamento departamento;\n    private BigDecimal salario;\n    public Empregado(Departamento departamento, BigDecimal salario) {\n    }\n    public Departamento getDepartamento() {\n    }\n    public BigDecimal getSalario() {\n    }\n}\npublic class TransferenciaService {\n    public boolean tentarTransferencia(Empregado empregadoNovo, Empregado empregadoAtual) {\n    }\n}\n```", "id": 1538, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.math.BigDecimal;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass DepartamentoTest {\n    @Test\n    void getOrcamentoFolhaTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        assertEquals(new BigDecimal(\"10000\"), departamento.getOrcamentoFolha());\n    }\n    @Test\n    void ajustaOrcamentoPositivoTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        departamento.ajustaOrcamento(new BigDecimal(\"5000\"));\n        assertEquals(new BigDecimal(\"15000\"), departamento.getOrcamentoFolha());\n    }\n    @Test\n    void ajustaOrcamentoNegativoTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        departamento.ajustaOrcamento(new BigDecimal(\"-3000\"));\n        assertEquals(new BigDecimal(\"7000\"), departamento.getOrcamentoFolha());\n    }\n}\nclass EmpregadoTest {\n    @Test\n    void getDepartamentoTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        Empregado empregado = new Empregado(departamento, new BigDecimal(\"3000\"));\n        assertEquals(departamento, empregado.getDepartamento());\n    }\n    @Test\n    void getSalarioTest() {\n        Departamento departamento = new Departamento(new BigDecimal(\"10000\"));\n        Empregado empregado = new Empregado(departamento, new BigDecimal(\"3000\"));\n        assertEquals(new BigDecimal(\"3000\"), empregado.getSalario());\n    }\n}\nclass TransferenciaServiceTest {\n    @Test\n    void tentarTransferenciaBemSucedidaTest() {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"20000\"));\n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\"));\n        TransferenciaService service = new TransferenciaService();\n        assertTrue(service.tentarTransferencia(empregadoNovo, empregadoAtual));\n    }\n    @Test\n    void tentarTransferenciaFalhaTest() {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"2000\")); \n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\")); \n        TransferenciaService service = new TransferenciaService();\n        assertFalse(service.tentarTransferencia(empregadoNovo, empregadoAtual));\n    }\n    @Test\n    void ajustarOrcamentosAposTransferenciaTest() {\n        Departamento departamentoAtual = new Departamento(new BigDecimal(\"10000\"));\n        Departamento departamentoNovo = new Departamento(new BigDecimal(\"20000\"));\n        Empregado empregadoAtual = new Empregado(departamentoAtual, new BigDecimal(\"3000\"));\n        Empregado empregadoNovo = new Empregado(departamentoNovo, new BigDecimal(\"4000\"));\n        TransferenciaService service = new TransferenciaService();\n        service.tentarTransferencia(empregadoNovo, empregadoAtual);\n        assertEquals(new BigDecimal(\"13000\"), departamentoAtual.getOrcamentoFolha());\n        assertEquals(new BigDecimal(\"16000\"), departamentoNovo.getOrcamentoFolha());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Student {\n    private int id;\n    private String name;\n    public Student() {}\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\nclass StudentView {\n    private String name;\n    private String email;\n    public StudentView() {}\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\npublic class StudentConverter {\n    public static Student convertViewToModel(StudentView sv) {\n        Student student = new Student();\n        student.setName(sv.getName()); \n        return student;\n    }\n    public static void checkConversion() {\n        StudentView sv = new StudentView();\n        sv.setName(\"张三\");\n        sv.setEmail(\"zhangsan@example.com\");\n        Student student = convertViewToModel(sv);\n        if (Objects.equals(student.getName(), \"张三\")) {\n            System.out.println(\"转换正确！\");\n        } else {\n            System.out.println(\"转换错误！\");\n        }\n    }\n    public static void main(String[] args) {\n        checkConversion(); \n    }\n}", "content": "Please write a Java function that converts a student’s view object to a model object. Suppose we have a student tracking system where the `Student` class represents the model layer and the `StudentView` class represents the view layer. The `Student` class contains the student’s ID and name, while the `StudentView` class contains the student's view information such as name and email. You need to complete a function called `convertViewToModel` that takes a `StudentView` object as a parameter and returns a `Student` object. Note that you need to fetch the student’s name from the `StudentView` object and set it to the corresponding attribute of the `Student` object. Also, ensure all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Student {\n    private int id;\n    private String name;\n    public Student() {}\n    public int getId() {\n    }\n    public void setId(int id) {\n    }\n    public String getName() {\n    }\n    public void setName(String name) {\n    }\n}\nclass StudentView {\n    private String name;\n    private String email;\n    public StudentView() {}\n    public String getName() {\n    }\n    public void setName(String name) {\n    }\n    public String getEmail() {\n    }\n    public void setEmail(String email) {\n    }\n}\npublic class StudentConverter {\n    public static Student convertViewToModel(StudentView sv) {\n    }\n    public static void checkConversion() {\n    }\n}\n```", "id": 1539, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentTest {\n    @Test\n    void getId() {\n        Student student = new Student();\n        student.setId(1);\n        assertEquals(1, student.getId());\n    }\n    @Test\n    void getName() {\n        Student student = new Student();\n        student.setName(\"张三\");\n        assertEquals(\"张三\", student.getName());\n    }\n    @Test\n    void setName() {\n        Student student = new Student();\n        student.setName(\"李四\");\n        assertEquals(\"李四\", student.getName());\n    }\n}\nclass StudentViewTest {\n    @Test\n    void getName() {\n        StudentView studentView = new StudentView();\n        studentView.setName(\"张三\");\n        assertEquals(\"张三\", studentView.getName());\n    }\n    @Test\n    void getEmail() {\n        StudentView studentView = new StudentView();\n        studentView.setEmail(\"zhangsan@example.com\");\n        assertEquals(\"zhangsan@example.com\", studentView.getEmail());\n    }\n}\nclass StudentConverterTest {\n    @Test\n    void convertViewToModel() {\n        StudentView studentView = new StudentView();\n        studentView.setName(\"张三\");\n        Student student = StudentConverter.convertViewToModel(studentView);\n        assertEquals(\"张三\", student.getName());\n    }\n    @Test\n    void convertViewToModelWithNullName() {\n        StudentView studentView = new StudentView();\n        studentView.setName(null);\n        Student student = StudentConverter.convertViewToModel(studentView);\n        assertNull(student.getName());\n    }\n    @Test\n    void checkConversion() {\n        StudentView studentView = new StudentView();\n        studentView.setName(\"张三\");\n        studentView.setEmail(\"zhangsan@example.com\");\n        Student student = StudentConverter.convertViewToModel(studentView);\n        assertEquals(\"张三\", student.getName());\n    }\n}"}}
{"canonical_solution": "import javax.swing.JComponent;\nimport java.awt.Rectangle;\npublic static Rectangle getComponentBounds(JComponent component) {\n    Rectangle bounds = component.getBounds();\n    return bounds;\n}\npublic static void checkFunction() {\n    JComponent fakeComponent = new JComponent() {\n        @Override\n        public Rectangle getBounds() {\n            return new Rectangle(10, 10, 200, 100);\n        }\n    };\n    Rectangle result = getComponentBounds(fakeComponent);\n    assert result.x == 10 : \"X坐标不正确\";\n    assert result.y == 10 : \"Y坐标不正确\";\n    assert result.width == 200 : \"宽度不正确\";\n    assert result.height == 100 : \"高度不正确\";\n}\npublic static void main(String[] args) {\n    checkFunction();\n}", "content": "Please write a Java method that takes a Swing component as a parameter and returns the position and size of the component within its parent container. The method should return a `Rectangle` object that contains the component's x-coordinate, y-coordinate, width, and height. Ensure that your method can handle any type of Swing component.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JComponent;\nimport java.awt.Rectangle;\npublic static Rectangle getComponentBounds(JComponent component) {\n}\npublic static void checkFunction() {\n}\n```", "id": 1540, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport javax.swing.JComponent;\nimport java.awt.Rectangle;\npublic class ComponentBoundsTest {\n    private Rectangle getComponentBounds(JComponent component) {\n        Rectangle bounds = component.getBounds();\n        return bounds;\n    }\n    @Test\n    void testGetComponentBounds() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(10, 10, 200, 100);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(10, result.x);\n        assertEquals(10, result.y);\n        assertEquals(200, result.width);\n        assertEquals(100, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithDifferentValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(5, 5, 150, 75);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(5, result.x);\n        assertEquals(5, result.y);\n        assertEquals(150, result.width);\n        assertEquals(75, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithZeroValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(0, 0, 0, 0);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(0, result.x);\n        assertEquals(0, result.y);\n        assertEquals(0, result.width);\n        assertEquals(0, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithNegativeValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(-10, -10, -200, -100);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(-10, result.x);\n        assertEquals(-10, result.y);\n        assertEquals(-200, result.width);\n        assertEquals(-100, result.height);\n    }\n    @Test\n    void testGetComponentBoundsWithMixedValues() {\n        JComponent fakeComponent = new JComponent() {\n            @Override\n            public Rectangle getBounds() {\n                return new Rectangle(-5, 5, 50, -25);\n            }\n        };\n        Rectangle result = getComponentBounds(fakeComponent);\n        assertEquals(-5, result.x);\n        assertEquals(5, result.y);\n        assertEquals(50, result.width);\n        assertEquals(-25, result.height);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nclass Book {\n    private Long id;\n    private String title;\n    public Book(Long id, String title) {\n        this.id = id;\n        this.title = title;\n    }\n    public Long getId() {\n        return id;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\nclass Library {\n    private List<Book> books;\n    public Library() {\n        this.books = new ArrayList<>();\n    }\n    public List<Book> getBooks() {\n        return books;\n    }\n    public void addBookToCollection(Long bookId, String bookTitle) {\n        Optional<Book> existingBook = books.stream()\n                                            .filter(book -> book.getId().equals(bookId))\n                                            .findFirst();\n        if (!existingBook.isPresent()) {\n            books.add(new Book(bookId, bookTitle));\n        }\n    }\n}\npublic class LibraryManagement {\n    public static void main(String[] args) {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(2L, \"Effective Java\");\n        library.addBookToCollection(1L, \"Java编程思想\"); \n        checkBooks(library.getBooks());\n    }\n    private static void checkBooks(List<Book> books) {\n        if (books.size() == 2) {\n            System.out.println(\"书籍添加正确！\");\n        } else {\n            System.out.println(\"书籍添加出现错误。\");\n        }\n    }\n}", "content": "Please write a Java method to add a book to the library's collection. Suppose we have two entities: `Library` and `Book`. Each `Library` object has a list of books representing the books collected by the library. Books are added to the library by their unique IDs. If the library already has the book, it will not be added again. Ensure that your implementation can handle the `Optional` type to avoid `NullPointerException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nclass Book {\n    private Long id;\n    private String title;\n    public Book(Long id, String title) {\n    }\n    public Long getId() {\n    }\n    public String getTitle() {\n    }\n}\nclass Library {\n    private List<Book> books;\n    public Library() {\n    }\n    public List<Book> getBooks() {\n    }\n    public void addBookToCollection(Long bookId, String bookTitle) {\n    }\n}\npublic class LibraryManagement {\n}\n```", "id": 1541, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.util.List;\nclass LibraryTest {\n    @Test\n    void testAddNewBook() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        List<Book> books = library.getBooks();\n        assertEquals(1, books.size());\n        assertEquals(\"Java编程思想\", books.get(0).getTitle());\n    }\n    @Test\n    void testAddDuplicateBook() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(1L, \"Java编程思想\");\n        List<Book> books = library.getBooks();\n        assertEquals(1, books.size());\n    }\n    @Test\n    void testAddMultipleBooks() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(2L, \"Effective Java\");\n        List<Book> books = library.getBooks();\n        assertEquals(2, books.size());\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(1L)));\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(2L)));\n    }\n    @Test\n    void testAddDifferentBooksSameTitle() {\n        Library library = new Library();\n        library.addBookToCollection(1L, \"Java编程思想\");\n        library.addBookToCollection(2L, \"Java编程思想\");\n        List<Book> books = library.getBooks();\n        assertEquals(2, books.size());\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(1L)));\n        assertTrue(books.stream().anyMatch(book -> book.getId().equals(2L)));\n    }\n    @Test\n    void testLibraryInitialization() {\n        Library library = new Library();\n        List<Book> books = library.getBooks();\n        assertTrue(books.isEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class ShoppingCart {\n    private int selectedItemIndex = -1; \n    public void selectItem(int index) {\n        this.selectedItemIndex = index;\n    }\n    public int getSelectedItemIndex() {\n        return selectedItemIndex;\n    }\n    public static void main(String[] args) {\n        checkFunctionality();\n    }\n    public static void checkFunctionality() {\n        ShoppingCart cart = new ShoppingCart();\n        assert cart.getSelectedItemIndex() == -1 : \"没有商品被选择时，应该返回-1。\";\n        cart.selectItem(2);\n        assert cart.getSelectedItemIndex() == 2 : \"选择了索引为2的商品，应该返回2。\";\n        cart.selectItem(5);\n        assert cart.getSelectedItemIndex() == 5 : \"更改选择到索引为5的商品，应该返回5。\";\n        System.out.println(\"所有测试通过！\");\n    }\n}", "content": "Please write a Java method to handle the selection status of items in a shopping cart. When a user selects an item, the position (index) of the item will be recorded. If the user has not selected any items, the index value will be -1. You need to implement a method that returns the index of the currently selected item. If no item is selected, return -1.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\npublic class ShoppingCart {\n    private int selectedItemIndex = -1; \n    public void selectItem(int index) {\n    }\n    public int getSelectedItemIndex() {\n    }\n}\n```", "id": 1542, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ShoppingCartTest {\n    @Test\n    public void testInitialSelectedItemIndex() {\n        ShoppingCart cart = new ShoppingCart();\n        assertEquals(-1, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testSelectItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(2);\n        assertEquals(2, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testChangeSelectedItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(2);\n        cart.selectItem(5);\n        assertEquals(5, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testSelectItemNegativeIndex() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(-3);\n        assertEquals(-3, cart.getSelectedItemIndex());\n    }\n    @Test\n    public void testSelectItemZeroIndex() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.selectItem(0);\n        assertEquals(0, cart.getSelectedItemIndex());\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class LineCounter {\n    public static int countLines(String filePath) throws IOException {\n        int lines = 0;\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            while (reader.readLine() != null) {\n                lines++;\n            }\n        }\n        return lines;\n    }\n    public static void main(String[] args) {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"第一行文本\\n第二行文本\\n第三行文本\");\n            }\n            int lineCount = countLines(tempFile.getAbsolutePath());\n            System.out.println(\"文件中的行数为: \" + lineCount);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete(); \n            }\n        }\n    }\n}", "content": "Please write a Java program to demonstrate how to use `BufferedReader` to read the contents of a text file line by line. Ensure that your program can handle exceptions and properly close resources after reading the file. Furthermore, your program should be able to count and print the number of lines contained in the file.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class LineCounter {\n    public static int countLines(String filePath) throws IOException {\n    }\n}\n```", "id": 1543, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class LineCounterTest {\n    @Test\n    public void testCountLinesWithThreeLines() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"第一行文本\\n第二行文本\\n第三行文本\");\n            }\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(3, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n    @Test\n    public void testCountLinesWithEmptyFile() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(0, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n    @Test\n    public void testCountLinesWithOneLine() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"只有一行文本\");\n            }\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(1, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n    @Test(expected = IOException.class)\n    public void testCountLinesWithNonexistentFile() throws IOException {\n        LineCounter.countLines(\"nonexistentFile.txt\");\n    }\n    @Test\n    public void testCountLinesWithMultipleNewLines() throws IOException {\n        File tempFile = null;\n        try {\n            tempFile = File.createTempFile(\"testFile\", \".txt\");\n            try (FileWriter writer = new FileWriter(tempFile)) {\n                writer.write(\"\\n\\n\\n\");\n            }\n            int lineCount = LineCounter.countLines(tempFile.getAbsolutePath());\n            assertEquals(3, lineCount);\n        } finally {\n            if (tempFile != null) {\n                tempFile.delete();\n            }\n        }\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class PermissionNotifier {\n    public void notifyPermissionChange(int permissionCode, String appName) throws IllegalArgumentException {\n        if (permissionCode < 0 || appName == null || appName.isEmpty()) {\n            throw new IllegalArgumentException(\"非法的权限代码或应用名称\");\n        }\n    }\n    public static void main(String[] args) {\n        PermissionNotifier notifier = new PermissionNotifier();\n        try {\n            notifier.notifyPermissionChange(100, \"SampleApp\");\n            System.out.println(\"权限变更通知成功。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"捕获到非法参数异常：\" + e.getMessage());\n        }\n        try {\n            notifier.notifyPermissionChange(-1, \"InvalidApp\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"捕获到非法参数异常：\" + e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method that simulates a simplified permission change notification system. When an application's operational permissions change, the corresponding listeners need to be notified. Specifically, you need to implement a class named `PermissionNotifier` that includes a method called `notifyPermissionChange`. This method takes two parameters: an integer `permissionCode` representing the permission code, and a string `appName` representing the application name. If the permission code or application name is invalid, the method should throw an `IllegalArgumentException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class PermissionNotifier {\n    public void notifyPermissionChange(int permissionCode, String appName) throws IllegalArgumentException {\n    }\n}\n```", "id": 1544, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport java.lang.IllegalArgumentException;\npublic class PermissionNotifierTest {\n    @Test\n    public void testNotifyPermissionChange_ValidInputs() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertDoesNotThrow(() -> notifier.notifyPermissionChange(100, \"ValidApp\"));\n    }\n    @Test\n    public void testNotifyPermissionChange_InvalidPermissionCode() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertThrows(IllegalArgumentException.class, () -> notifier.notifyPermissionChange(-1, \"App\"));\n    }\n    @Test\n    public void testNotifyPermissionChange_NullAppName() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertThrows(IllegalArgumentException.class, () -> notifier.notifyPermissionChange(100, null));\n    }\n    @Test\n    public void testNotifyPermissionChange_EmptyAppName() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertThrows(IllegalArgumentException.class, () -> notifier.notifyPermissionChange(100, \"\"));\n    }\n    @Test\n    public void testNotifyPermissionChange_ZeroPermissionCode() {\n        PermissionNotifier notifier = new PermissionNotifier();\n        assertDoesNotThrow(() -> notifier.notifyPermissionChange(0, \"AppWithZeroPermissionCode\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public void calculate(double num1, double num2, String operation) {\n        switch (operation) {\n            case \"add\":\n                System.out.println(\"结果: \" + (num1 + num2));\n                break;\n            case \"subtract\":\n                System.out.println(\"结果: \" + (num1 - num2));\n                break;\n            case \"multiply\":\n                System.out.println(\"结果: \" + (num1 * num2));\n                break;\n            case \"divide\":\n                if (num2 == 0) {\n                    System.out.println(\"错误: 除数不能为0\");\n                } else {\n                    System.out.println(\"结果: \" + (num1 / num2));\n                }\n                break;\n            default:\n                System.out.println(\"错误: 不支持的运算类型\");\n        }\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入第一个数:\");\n        double num1 = scanner.nextDouble();\n        System.out.println(\"请输入第二个数:\");\n        double num2 = scanner.nextDouble();\n        scanner.nextLine(); \n        System.out.println(\"请输入运算类型（add, subtract, multiply, divide）:\");\n        String operation = scanner.nextLine();\n        calculator.calculate(num1, num2, operation);\n    }\n}", "content": "Please write a Java program to implement a simple calculator functionality. The calculator should perform addition, subtraction, multiplication, and division operations based on user input. The specific requirements are as follows:\n\n- The program should include a class named `SimpleCalculator`.\n- The class should contain a method named `calculate`, which accepts three parameters: two `double` type numbers `num1` and `num2`, and a `String` type parameter `operation` that indicates the type of operation to be performed (\"add\", \"subtract\", \"multiply\", \"divide\").\n- Based on the value of `operation`, the `calculate` method should perform the corresponding operation and print the result.\n- If `operation` is not one of these four operations, the program should print an error message.\n- Ensure that in the case of division, if `num2` is 0, an error message should be printed to avoid division by zero.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public void calculate(double num1, double num2, String operation) {\n    }\n}\n```", "id": 1545, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass SimpleCalculatorTest {\n    @Test\n    void testAddition() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 5.0;\n        double num2 = 3.0;\n        String operation = \"add\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testSubtraction() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 5.0;\n        double num2 = 3.0;\n        String operation = \"subtract\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testMultiplication() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 5.0;\n        double num2 = 3.0;\n        String operation = \"multiply\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testDivision() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 6.0;\n        double num2 = 3.0;\n        String operation = \"divide\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testDivisionByZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 6.0;\n        double num2 = 0.0;\n        String operation = \"divide\";\n        calculator.calculate(num1, num2, operation);\n    }\n    @Test\n    void testUnsupportedOperation() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 6.0;\n        double num2 = 3.0;\n        String operation = \"modulus\";\n        calculator.calculate(num1, num2, operation);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.Comparator;\npublic class StringCounter {\n    public List<Map.Entry<String, Integer>> countAndSortStrings(List<Map.Entry<String, Integer>> entries) {\n        HashMap<String, Integer> countMap = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : entries) {\n            String key = entry.getKey();\n            Integer value = entry.getValue();\n            countMap.put(key, countMap.getOrDefault(key, 0) + value);\n        }\n        List<Map.Entry<String, Integer>> sortedList = new ArrayList<>(countMap.entrySet());\n        Collections.sort(sortedList, new Comparator<Map.Entry<String, Integer>>() {\n            @Override\n            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {\n                return o1.getKey().compareTo(o2.getKey());\n            }\n        });\n        return sortedList;\n    }\n    public static void main(String[] args) {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 2));\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 3));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        for (Map.Entry<String, Integer> entry : result) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}", "content": "Please implement a function that can count the occurrences of each unique string in a dataset and output the results in the natural order of the strings. Ensure that your function can handle a list containing strings and their corresponding counts, and output the statistical results in the format of strings and counts. Additionally, the output strings should be sorted in their natural order.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.Comparator;\npublic class StringCounter {\n    public List<Map.Entry<String, Integer>> countAndSortStrings(List<Map.Entry<String, Integer>> entries) {\n    }\n}\n```", "id": 1546, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class StringCounterTest {\n    @Test\n    public void testCountAndSortStrings_singleEntry() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 2));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(1, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(2), result.get(0).getValue());\n    }\n    @Test\n    public void testCountAndSortStrings_multipleEntriesSameKey() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 2));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(1, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(3), result.get(0).getValue());\n    }\n    @Test\n    public void testCountAndSortStrings_multipleEntriesDifferentKeys() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 3));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(2, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(1), result.get(0).getValue());\n        assertEquals(\"banana\", result.get(1).getKey());\n        assertEquals(Integer.valueOf(3), result.get(1).getValue());\n    }\n    @Test\n    public void testCountAndSortStrings_emptyList() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertTrue(result.isEmpty());\n    }\n    @Test\n    public void testCountAndSortStrings_mixedEntries() {\n        List<Map.Entry<String, Integer>> entries = new ArrayList<>();\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 3));\n        entries.add(new HashMap.SimpleEntry<>(\"apple\", 1));\n        entries.add(new HashMap.SimpleEntry<>(\"banana\", 2));\n        StringCounter counter = new StringCounter();\n        List<Map.Entry<String, Integer>> result = counter.countAndSortStrings(entries);\n        assertEquals(2, result.size());\n        assertEquals(\"apple\", result.get(0).getKey());\n        assertEquals(Integer.valueOf(1), result.get(0).getValue());\n        assertEquals(\"banana\", result.get(1).getKey());\n        assertEquals(Integer.valueOf(5), result.get(1).getValue());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    static class Book {\n        String id;\n        String title;\n        String author;\n        public Book(String id, String title, String author) {\n            this.id = id;\n            this.title = title;\n            this.author = author;\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"id='\" + id + '\\'' +\n                    \", title='\" + title + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void updateBook(Book book, String fieldMask) {\n        String[] fieldsToUpdate = fieldMask.split(\",\");\n        Map<String, String> updates = new HashMap<>();\n        for (String field : fieldsToUpdate) {\n            String[] keyValue = field.split(\"=\");\n            if (keyValue.length == 2) {\n                updates.put(keyValue[0].trim(), keyValue[1].trim());\n            }\n        }\n        if (updates.containsKey(\"title\")) {\n            book.title = updates.get(\"title\");\n        }\n        if (updates.containsKey(\"author\")) {\n            book.author = updates.get(\"author\");\n        }\n    }\n    public static void main(String[] args) {\n        Book book = new Book(\"1\", \"Old Title\", \"Old Author\");\n        System.out.println(\"Before update: \" + book);\n        updateBook(book, \"title=New Title, author=New Author\");\n        System.out.println(\"After update: \" + book);\n    }\n}", "content": "Please write a Java program to implement the book update function in a simple library management system. In this system, each book has a unique ID, title, and author name. You need to implement a method that accepts a book object and an update mask (FieldMask), and then updates the book information based on the fields specified by the update mask. The update mask is a string containing the names of the fields to be updated, separated by commas. If the update mask is empty, no fields are updated.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    static class Book {\n        String id;\n        String title;\n        String author;\n        public Book(String id, String title, String author) {\n        }\n        @Override\n        public String toString() {\n            return \"Book{\" +\n                    \"id='\" + id + '\\'' +\n                    \", title='\" + title + '\\'' +\n                    \", author='\" + author + '\\'' +\n                    '}';\n        }\n    }\n    public static void updateBook(Book book, String fieldMask) {\n    }\n}\n```", "id": 1547, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    @Test\n    public void testUpdateTitleAndAuthor() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"title=New Title, author=New Author\");\n        assertEquals(\"New Title\", book.title);\n        assertEquals(\"New Author\", book.author);\n    }\n    @Test\n    public void testUpdateTitleOnly() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"title=New Title\");\n        assertEquals(\"New Title\", book.title);\n        assertEquals(\"Old Author\", book.author);\n    }\n    @Test\n    public void testUpdateAuthorOnly() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"author=New Author\");\n        assertEquals(\"Old Title\", book.title);\n        assertEquals(\"New Author\", book.author);\n    }\n    @Test\n    public void testUpdateNoChanges() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"\"); \n        assertEquals(\"Old Title\", book.title);\n        assertEquals(\"Old Author\", book.author);\n    }\n    @Test\n    public void testUpdateWithInvalidMask() {\n        BookManager.Book book = new BookManager.Book(\"1\", \"Old Title\", \"Old Author\");\n        BookManager.updateBook(book, \"title=New Title, invalidField=invalid\"); \n        assertEquals(\"New Title\", book.title);\n        assertEquals(\"Old Author\", book.author);\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class RightAlignedTriangle {\n    public static String generatePattern(int height) {\n        StringBuilder pattern = new StringBuilder();\n        for (int row = 0; row < height; row++) {\n            for (int space = 0; space < height - row - 1; space++) {\n                pattern.append(\" \");\n            }\n            for (int star = 0; star <= row; star++) {\n                pattern.append(\"*\");\n            }\n            pattern.append(System.lineSeparator());\n        }\n        return pattern.toString();\n    }\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入三角形的高度：\");\n        int height = scanner.nextInt();\n        String trianglePattern = generatePattern(height);\n        System.out.println(trianglePattern);\n    }\n    public static boolean checkPattern(int height, String expectedPattern) {\n        String generatedPattern = generatePattern(height);\n        return generatedPattern.equals(expectedPattern);\n    }\n}", "content": "Please write a Java program to generate a right-aligned triangle pattern. The height of the triangle is determined by user input, with each row of the pattern composed of `*` characters, and the number of characters increasing gradually in each row. For example, if the user inputs a height of 4, the output pattern should be as follows:\n\n```\n   *\n  **\n ***\n****\n```\n\nPlease ensure your program meets the following requirements:\n- Use the Java programming language.\n- The program should include a class named `RightAlignedTriangle` and a method named `generatePattern`.\n- The `generatePattern` method should accept an integer parameter `height`, which represents the height of the triangle, and return a string that contains the entire triangle pattern.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class RightAlignedTriangle {\n    public static String generatePattern(int height) {\n    }\n    public static boolean checkPattern(int height, String expectedPattern) {\n    }\n}\n```", "id": 1548, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class RightAlignedTriangleTest {\n    @Test\n    void generatePattern_heightZero_shouldReturnEmptyString() {\n        int height = 0;\n        String expectedPattern = \"\";\n        String actualPattern = RightAlignedTriangle.generatePattern(height);\n        assertEquals(expectedPattern, actualPattern);\n    }\n    @Test\n    void generatePattern_heightOne_shouldReturnSingleAsterisk() {\n        int height = 1;\n        String expectedPattern = \"*\\n\";\n        String actualPattern = RightAlignedTriangle.generatePattern(height);\n        assertEquals(expectedPattern, actualPattern);\n    }\n    @Test\n    void generatePattern_heightThree_shouldReturnTriangle() {\n        int height = 3;\n        String expectedPattern = \"  *\\n **\\n***\\n\";\n        String actualPattern = RightAlignedTriangle.generatePattern(height);\n        assertEquals(expectedPattern, actualPattern);\n    }\n    @Test\n    void checkPattern_correctPattern_shouldReturnTrue() {\n        int height = 3;\n        String expectedPattern = \"  *\\n **\\n***\\n\";\n        assertTrue(RightAlignedTriangle.checkPattern(height, expectedPattern));\n    }\n    @Test\n    void checkPattern_incorrectPattern_shouldReturnFalse() {\n        int height = 3;\n        String incorrectPattern = \"  *\\n **\\n*** \\n\";\n        assertFalse(RightAlignedTriangle.checkPattern(height, incorrectPattern));\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nclass Book {\n    boolean isBorrowed;\n    public Book(boolean isBorrowed) {\n        this.isBorrowed = isBorrowed;\n    }\n    public void setBorrowed(boolean isBorrowed) {\n        this.isBorrowed = isBorrowed;\n    }\n    public boolean isBorrowed() {\n        return this.isBorrowed;\n    }\n}\nclass Library {\n    Book[] books;\n    public Library(Book[] books) {\n        this.books = books;\n    }\n    public void resetBooksStatus() {\n        for (Book book : books) {\n            book.setBorrowed(false);\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Book[] books = {\n            new Book(true),\n            new Book(false),\n            new Book(true),\n            new Book(true)\n        };\n        Library library = new Library(books);\n        library.resetBooksStatus();\n        check(books);\n    }\n    public static void check(Book[] books) {\n        for (Book book : books) {\n            if (book.isBorrowed()) {\n                System.out.println(\"错误：存在未正确重置的图书。\");\n                return;\n            }\n        }\n        System.out.println(\"所有图书的状态已正确重置为未借出。\");\n    }\n}", "content": "Please write a Java program that implements a function in a simple book management system: reset the status of all books to not borrowed. In this system, each book has a status indicating whether it is borrowed. We use a `Book` class to represent each book, which contains a boolean member variable `isBorrowed` that indicates the borrowing status of the book (`true` means borrowed, `false` means not borrowed). You need to write a class named `Library`, which contains a method `resetBooksStatus` that resets the status of all books in the inventory to not borrowed.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nclass Book {\n    boolean isBorrowed;\n    public Book(boolean isBorrowed) {\n    }\n    public void setBorrowed(boolean isBorrowed) {\n    }\n    public boolean isBorrowed() {\n    }\n}\nclass Library {\n    Book[] books;\n    public Library(Book[] books) {\n    }\n    public void resetBooksStatus() {\n    }\n}\n```", "id": 1549, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nclass BookTest {\n    @Test\n    public void testSetBorrowed() {\n        Book book = new Book(false);\n        book.setBorrowed(true);\n        Assertions.assertTrue(book.isBorrowed());\n    }\n    @Test\n    public void testIsBorrowed() {\n        Book book = new Book(true);\n        Assertions.assertTrue(book.isBorrowed());\n    }\n    @Test\n    public void testConstructor() {\n        Book book = new Book(false);\n        Assertions.assertFalse(book.isBorrowed());\n    }\n}\nclass LibraryTest {\n    @Test\n    public void testResetBooksStatus() {\n        Book[] books = {\n            new Book(true),\n            new Book(true),\n            new Book(true)\n        };\n        Library library = new Library(books);\n        library.resetBooksStatus();\n        for (Book book : books) {\n            Assertions.assertFalse(book.isBorrowed());\n        }\n    }\n    @Test\n    public void testResetBooksStatusWithMixedStatus() {\n        Book[] books = {\n            new Book(true),\n            new Book(false),\n            new Book(true),\n            new Book(false)\n        };\n        Library library = new Library(books);\n        library.resetBooksStatus();\n        for (Book book : books) {\n            Assertions.assertFalse(book.isBorrowed());\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Random;\npublic class SongSelector {\n    private HashMap<String, List<String>> genreToSongsMap;\n    private Random random;\n    public SongSelector() {\n        genreToSongsMap = new HashMap<>();\n        random = new Random();\n    }\n    public void addSong(String genre, String song) {\n        genreToSongsMap.computeIfAbsent(genre, k -> new ArrayList<>()).add(song);\n    }\n    public String getRandomSongFromGenre(String genre) {\n        List<String> songs = genreToSongsMap.get(genre);\n        if (songs == null || songs.isEmpty()) {\n            return null;\n        }\n        int index = random.nextInt(songs.size());\n        return songs.get(index);\n    }\n    public static void main(String[] args) {\n        SongSelector selector = new SongSelector();\n        selector.addSong(\"Pop\", \"Song A\");\n        selector.addSong(\"Pop\", \"Song B\");\n        selector.addSong(\"Rock\", \"Song C\");\n        System.out.println(\"Random Pop Song: \" + selector.getRandomSongFromGenre(\"Pop\"));\n        System.out.println(\"Random Rock Song: \" + selector.getRandomSongFromGenre(\"Rock\"));\n        System.out.println(\"Random Jazz Song: \" + selector.getRandomSongFromGenre(\"Jazz\")); \n    }\n}", "content": "Assume you are developing a music player application, and you need to implement a feature that randomly selects a song from a given collection of songs to play. Each song belongs to a specific genre (like Pop, Rock, Jazz, etc.), and users can choose a genre. The application will then randomly pick a song from that genre to play.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Random;\npublic class SongSelector {\n    private HashMap<String, List<String>> genreToSongsMap;\n    private Random random;\n    public SongSelector() {\n    }\n    public void addSong(String genre, String song) {\n    }\n    public String getRandomSongFromGenre(String genre) {\n    }\n}\n```", "id": 1550, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SongSelectorTest {\n    private SongSelector songSelector;\n    @Before\n    public void setUp() {\n        songSelector = new SongSelector();\n    }\n    @Test\n    public void testAddSong() {\n        songSelector.addSong(\"Pop\", \"Song A\");\n        String song = songSelector.getRandomSongFromGenre(\"Pop\");\n        assertNotNull(song);\n    }\n    @Test\n    public void testGetRandomSongFromGenreWithSingleSong() {\n        songSelector.addSong(\"Rock\", \"Song C\");\n        String song = songSelector.getRandomSongFromGenre(\"Rock\");\n        assertEquals(\"Song C\", song);\n    }\n    @Test\n    public void testGetRandomSongFromGenreWithMultipleSongs() {\n        songSelector.addSong(\"Pop\", \"Song A\");\n        songSelector.addSong(\"Pop\", \"Song B\");\n        String song = songSelector.getRandomSongFromGenre(\"Pop\");\n        assertTrue(song.equals(\"Song A\") || song.equals(\"Song B\"));\n    }\n    @Test\n    public void testGetRandomSongFromGenreWithNoSongs() {\n        String song = songSelector.getRandomSongFromGenre(\"Jazz\");\n        assertNull(song);\n    }\n    @Test\n    public void testGetRandomSongFromEmptyGenre() {\n        songSelector.addSong(\"Classical\", \"Song D\");\n        songSelector.getRandomSongFromGenre(\"Classical\"); \n        String song = songSelector.getRandomSongFromGenre(\"EmptyGenre\");\n        assertNull(song);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class DataNotifier {\n    private List<Object> dataList;\n    private List<Object> initDataList() {\n        return new ArrayList<>();\n    }\n    public void addElementsAndNotify(List<Object> newElements) {\n        if (dataList == null) {\n            dataList = initDataList();\n        }\n        if (newElements == null) {\n            newElements = new ArrayList<>();\n        }\n        if (newElements.isEmpty()) {\n            return;\n        }\n        dataList.addAll(newElements);\n        notifyDataChanged();\n    }\n    private void notifyDataChanged() {\n        System.out.println(\"数据已更改。\");\n    }\n    public static void main(String[] args) {\n        DataNotifier notifier = new DataNotifier();\n        List<Object> elementsToAdd = new ArrayList<>();\n        elementsToAdd.add(\"Java\");\n        elementsToAdd.add(\"Python\");\n        notifier.addElementsAndNotify(elementsToAdd); \n        notifier.addElementsAndNotify(null); \n        List<Object> emptyList = new ArrayList<>();\n        notifier.addElementsAndNotify(emptyList); \n    }\n}", "content": "Please write a Java method to add a series of elements to a custom data collection and notify when the data has changed afterwards. The method should meet the following requirements:\n\n1. If the passed collection is `null`, a new empty collection should be created.\n2. If the passed collection is empty, no action should be performed.\n3. After adding the elements, a method should be called to notify that the data has changed.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DataNotifier {\n    private List<Object> dataList;\n    private List<Object> initDataList() {\n    }\n    public void addElementsAndNotify(List<Object> newElements) {\n    }\n    private void notifyDataChanged() {\n    }\n}\n```", "id": 1551, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Before;\nimport java.util.ArrayList;\nimport java.util.List;\nimport static org.junit.Assert.*;\npublic class DataNotifierTest {\n    private DataNotifier dataNotifier;\n    @Before\n    public void setUp() {\n        dataNotifier = new DataNotifier();\n    }\n    @Test\n    public void testAddElementsAndNotify_WithNonNullElements() {\n        List<Object> elementsToAdd = new ArrayList<>();\n        elementsToAdd.add(\"Java\");\n        elementsToAdd.add(\"Python\");\n        dataNotifier.addElementsAndNotify(elementsToAdd);\n    }\n    @Test\n    public void testAddElementsAndNotify_WithNullElements() {\n        dataNotifier.addElementsAndNotify(null);\n    }\n    @Test\n    public void testAddElementsAndNotify_WithEmptyList() {\n        List<Object> emptyList = new ArrayList<>();\n        dataNotifier.addElementsAndNotify(emptyList);\n    }\n    @Test\n    public void testAddElementsAndNotify_NoPriorInitialization() {\n        List<Object> elementsToAdd = new ArrayList<>();\n        elementsToAdd.add(\"Java\");\n        elementsToAdd.add(\"Python\");\n        dataNotifier.addElementsAndNotify(elementsToAdd);\n    }\n    @Test\n    public void testAddElementsAndNotify_MultipleCalls() {\n        List<Object> firstBatch = new ArrayList<>();\n        firstBatch.add(\"Java\");\n        List<Object> secondBatch = new ArrayList<>();\n        secondBatch.add(\"Python\");\n        dataNotifier.addElementsAndNotify(firstBatch);\n        dataNotifier.addElementsAndNotify(secondBatch);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookLoanManager {\n    private Map<Long, Long> bookBorrowTimes;\n    public BookLoanManager() {\n        bookBorrowTimes = new HashMap<>();\n    }\n    public void setBorrowTime(Long bookId, Long borrowTime) {\n        bookBorrowTimes.put(bookId, borrowTime);\n    }\n    public Long getLastBorrowedTime(Long bookId) {\n        return bookBorrowTimes.getOrDefault(bookId, null);\n    }\n    public static void main(String[] args) {\n        BookLoanManager manager = new BookLoanManager();\n        manager.setBorrowTime(1001L, 1625140800000L); \n        manager.setBorrowTime(1002L, 1625227200000L); \n        check(manager.getLastBorrowedTime(1001L) == 1625140800000L, \"书籍1001的借阅时间检查失败\");\n        check(manager.getLastBorrowedTime(1002L) == 1625227200000L, \"书籍1002的借阅时间检查失败\");\n        check(manager.getLastBorrowedTime(1003L) == null, \"书籍1003的借阅时间检查失败\");\n    }\n    private static void check(boolean condition, String message) {\n        if (!condition) {\n            throw new AssertionError(message);\n        }\n    }\n}", "content": "Please write a Java program to manage the borrowing information of books in a library. Specifically, you need to implement a method that receives a book ID as a parameter and returns the last borrowing time of the book. If the book has never been borrowed, it should return null.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookLoanManager {\n    private Map<Long, Long> bookBorrowTimes;\n    public BookLoanManager() {\n    }\n    public void setBorrowTime(Long bookId, Long borrowTime) {\n    }\n    public Long getLastBorrowedTime(Long bookId) {\n    }\n}\n```", "id": 1552, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookLoanManagerTest {\n    private BookLoanManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new BookLoanManager();\n    }\n    @Test\n    public void testSetAndGetBorrowTime() {\n        manager.setBorrowTime(1001L, 1625140800000L);\n        Long borrowTime = manager.getLastBorrowedTime(1001L);\n        assertEquals(1625140800000L, borrowTime);\n    }\n    @Test\n    public void testGetLastBorrowedTime_NotSet() {\n        Long borrowTime = manager.getLastBorrowedTime(1003L);\n        assertNull(borrowTime);\n    }\n    @Test\n    public void testSetBorrowTime_Overwrite() {\n        manager.setBorrowTime(1001L, 1625140800000L);\n        manager.setBorrowTime(1001L, 1625301600000L);\n        Long borrowTime = manager.getLastBorrowedTime(1001L);\n        assertEquals(1625301600000L, borrowTime);\n    }\n    @Test\n    public void testMultipleBooksBorrowTimes() {\n        manager.setBorrowTime(1001L, 1625140800000L);\n        manager.setBorrowTime(1002L, 1625227200000L);\n        assertEquals(1625140800000L, manager.getLastBorrowedTime(1001L));\n        assertEquals(1625227200000L, manager.getLastBorrowedTime(1002L));\n    }\n    @Test\n    public void testGetLastBorrowedTime_WithBorrowTimeSetToNull() {\n        manager.setBorrowTime(1004L, null);\n        assertNull(manager.getLastBorrowedTime(1004L));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class WeekdayFinder {\n    public static String getWeekdayName(int num) {\n        Map<Integer, String> weekDays = new HashMap<>();\n        weekDays.put(1, \"星期一\");\n        weekDays.put(2, \"星期二\");\n        weekDays.put(3, \"星期三\");\n        weekDays.put(4, \"星期四\");\n        weekDays.put(5, \"星期五\");\n        weekDays.put(6, \"星期六\");\n        weekDays.put(7, \"星期日\");\n        return weekDays.getOrDefault(num, \"无效输入\");\n    }\n    public static void main(String[] args) {\n        assert \"星期一\".equals(getWeekdayName(1));\n        assert \"星期二\".equals(getWeekdayName(2));\n        assert \"星期三\".equals(getWeekdayName(3));\n        assert \"星期四\".equals(getWeekdayName(4));\n        assert \"星期五\".equals(getWeekdayName(5));\n        assert \"星期六\".equals(getWeekdayName(6));\n        assert \"星期日\".equals(getWeekdayName(7));\n        assert \"无效输入\".equals(getWeekdayName(8));\n        assert \"无效输入\".equals(getWeekdayName(0));\n        System.out.println(\"所有测试用例都通过了！\");\n    }\n}", "content": "Please write a Java method that takes an integer parameter `num` and returns the corresponding day of the week based on the value of that parameter. If the value of `num` is between 1 and 7, return \"Monday\" to \"Sunday\" respectively; if the value of `num` is outside this range, return \"Invalid input\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeekdayFinder {\n    public static String getWeekdayName(int num) {\n    }\n}\n```", "id": 1553, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class WeekdayFinderTest {\n    @Test\n    public void testWeekdayMonday() {\n        assertEquals(\"星期一\", WeekdayFinder.getWeekdayName(1));\n    }\n    @Test\n    public void testWeekdayTuesday() {\n        assertEquals(\"星期二\", WeekdayFinder.getWeekdayName(2));\n    }\n    @Test\n    public void testWeekdayWednesday() {\n        assertEquals(\"星期三\", WeekdayFinder.getWeekdayName(3));\n    }\n    @Test\n    public void testWeekdaySaturday() {\n        assertEquals(\"星期六\", WeekdayFinder.getWeekdayName(6));\n    }\n    @Test\n    public void testInvalidInput() {\n        assertEquals(\"无效输入\", WeekdayFinder.getWeekdayName(0));\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.io.FileNotFoundException;\npublic class DirectoryExplorer {\n        public static void exploreDirectory(File directory) throws FileNotFoundException {\n        if (!directory.exists()) {\n            throw new FileNotFoundException(\"目录不存在: \" + directory.getAbsolutePath());\n        }\n        File[] fileEntries = directory.listFiles();\n        if (fileEntries != null) {\n            for (File fileEntry : fileEntries) {\n                if (fileEntry.isDirectory()) {\n                    exploreDirectory(fileEntry);\n                } else {\n                    System.out.println(fileEntry.getName());\n                }\n            }\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            File startingDirectory = new File(\"path/to/start/directory\");\n            exploreDirectory(startingDirectory);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "Please write a Java program that can traverse all files and subdirectories in a specified directory and print out the names of all files. If a subdirectory is encountered, the files under that subdirectory should be recursively traversed. Ensure that the program can correctly handle empty directories and nonexistent directories.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\npublic class DirectoryExplorer {\n    public static void exploreDirectory(File directory) throws FileNotFoundException {\n    }\n}\n```", "id": 1554, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.io.File;\nimport java.io.FileNotFoundException;\npublic class DirectoryExplorerTest {\n    @Test\n    public void testDirectoryNotExist() {\n        File nonExistingDirectory = new File(\"non/existent/path\");\n        assertThrows(FileNotFoundException.class, () -> {\n            DirectoryExplorer.exploreDirectory(nonExistingDirectory);\n        });\n    }\n    @Test\n    public void testEmptyDirectory() throws FileNotFoundException {\n        File emptyDirectory = new File(\"path/to/empty/directory\");\n        if (!emptyDirectory.exists()) {\n            emptyDirectory.mkdirs();\n        }\n        DirectoryExplorer.exploreDirectory(emptyDirectory);\n    }\n    @Test\n    public void testDirectoryWithFiles() throws FileNotFoundException {\n        File directoryWithFiles = new File(\"path/to/directory/with/files\");\n        if (!directoryWithFiles.exists()) {\n            directoryWithFiles.mkdirs();\n        }\n        File file1 = new File(directoryWithFiles, \"file1.txt\");\n        File file2 = new File(directoryWithFiles, \"file2.txt\");\n        try {\n            file1.createNewFile();\n            file2.createNewFile();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        DirectoryExplorer.exploreDirectory(directoryWithFiles);\n    }\n    @Test\n    public void testNestedDirectories() throws FileNotFoundException {\n        File nestedDirectory = new File(\"path/to/nested/directory\");\n        if (!nestedDirectory.exists()) {\n            nestedDirectory.mkdirs();\n        }\n        File subDirectory = new File(nestedDirectory, \"subdirectory\");\n        if (!subDirectory.exists()) {\n            subDirectory.mkdirs();\n        }\n        File file = new File(subDirectory, \"file.txt\");\n        try {\n            file.createNewFile();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        DirectoryExplorer.exploreDirectory(nestedDirectory);\n    }\n    @Test\n    public void testDirectoryWithMixedContent() throws FileNotFoundException {\n        File mixedDirectory = new File(\"path/to/mixed/content\");\n        if (!mixedDirectory.exists()) {\n            mixedDirectory.mkdirs();\n        }\n        File subDirectory1 = new File(mixedDirectory, \"subdirectory1\");\n        if (!subDirectory1.exists()) {\n            subDirectory1.mkdirs();\n        }\n        File subDirectory2 = new File(mixedDirectory, \"subdirectory2\");\n        if (!subDirectory2.exists()) {\n            subDirectory2.mkdirs();\n        }\n        File file1 = new File(subDirectory1, \"file1.txt\");\n        File file2 = new File(subDirectory2, \"file2.txt\");\n        try {\n            file1.createNewFile();\n            file2.createNewFile();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        DirectoryExplorer.exploreDirectory(mixedDirectory);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nclass NeuralLayer {\n    float[][] weights;\n    float[][] biases;\n    float[][] dWeights;\n    float[][] dBiases;\n    float[][] weightMomentums;\n    float[][] biasMomentums;\n    float[][] weightVelocities;\n    float[][] biasVelocities;\n    public NeuralLayer(int inputSize, int size) {\n        weights = new float[size][inputSize];\n        biases = new float[size][1];\n        for (float[] row : weights) {\n            Arrays.fill(row, 0.1f);\n        }\n        for (float[] row : biases) {\n            Arrays.fill(row, 0.1f);\n        }\n    }\n    public void updateWeightsAndBiases(float learningRate, float beta1, float beta2, float epsilon, int iteration) {\n        if (weightMomentums == null) {\n            weightMomentums = new float[weights.length][weights[0].length];\n            biasMomentums = new float[biases.length][biases[0].length];\n            weightVelocities = new float[weights.length][weights[0].length];\n            biasVelocities = new float[biases.length][biases[0].length];\n        }\n        for (int i = 0; i < weights.length; i++) {\n            for (int j = 0; j < weights[0].length; j++) {\n                weightMomentums[i][j] = beta1 * weightMomentums[i][j] + (1 - beta1) * dWeights[i][j];\n                float weightMomentumsCorrected = weightMomentums[i][j] / (1 - (float)Math.pow(beta1, iteration + 1));\n                weightVelocities[i][j] = beta2 * weightVelocities[i][j] + (1 - beta2) * (dWeights[i][j] * dWeights[i][j]);\n                float weightVelocitiesCorrected = weightVelocities[i][j] / (1 - (float)Math.pow(beta2, iteration + 1));\n                weights[i][j] -= learningRate * weightMomentumsCorrected / (Math.sqrt(weightVelocitiesCorrected) + epsilon);\n            }\n        }\n        for (int i = 0; i < biases.length; i++) {\n            for (int j = 0; j < biases[0].length; j++) {\n                biasMomentums[i][j] = beta1 * biasMomentums[i][j] + (1 - beta1) * dBiases[i][j];\n                float biasMomentumsCorrected = biasMomentums[i][j] / (1 - (float)Math.pow(beta1, iteration + 1));\n                biasVelocities[i][j] = beta2 * biasVelocities[i][j] + (1 - beta2) * (dBiases[i][j] * dBiases[i][j]);\n                float biasVelocitiesCorrected = biasVelocities[i][j] / (1 - (float)Math.pow(beta2, iteration + 1));\n                biases[i][j] -= learningRate * biasMomentumsCorrected / (Math.sqrt(biasVelocitiesCorrected) + epsilon);\n            }\n        }\n    }\n}\npublic class AdamOptimizerExample {\n    public static void main(String[] args) {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, 1);\n        System.out.println(\"Updated Weights:\");\n        for (float[] row : layer.weights) {\n            System.out.println(Arrays.toString(row));\n        }\n        System.out.println(\"Updated Biases:\");\n        for (float[] row : layer.biases) {\n            System.out.println(Arrays.toString(row));\n        }\n    }\n}", "content": "Please implement a Java method that updates parameters in a neural network using the Adam optimization algorithm. Given a neural network layer object, which contains weights, biases, and their gradients (dWeights and dBiases), as well as momentum and velocity for the Adam algorithm, you need to update the weights and biases of this layer according to the Adam algorithm. Note that you should first check if the storage space for momentum and velocity has been initialized; if not, you need to initialize them to zero matrices of the same shape as the weights and biases. Additionally, ensure your method can handle different learning rates, beta1, beta2, and epsilon values.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nclass NeuralLayer {\n    float[][] weights;\n    float[][] biases;\n    float[][] dWeights;\n    float[][] dBiases;\n    float[][] weightMomentums;\n    float[][] biasMomentums;\n    float[][] weightVelocities;\n    float[][] biasVelocities;\n    public NeuralLayer(int inputSize, int size) {\n    }\n    public void updateWeightsAndBiases(float learningRate, float beta1, float beta2, float epsilon, int iteration) {\n    }\n}\n```", "id": 1555, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Machine Learning", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass NeuralLayerTest {\n    @Test\n    void testInitialization() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        for (float[] row : layer.weights) {\n            for (float value : row) {\n                assertEquals(0.1f, value);\n            }\n        }\n        for (float[] row : layer.biases) {\n            for (float value : row) {\n                assertEquals(0.1f, value);\n            }\n        }\n    }\n    @Test\n    void testUpdateWeightsAndBiases() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, 1);\n        assertNotNull(layer.weights);\n        assertNotNull(layer.biases);\n    }\n    @Test\n    void testUpdateWeightsAndBiasesMultipleIterations() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        for (int i = 1; i <= 5; i++) {\n            layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, i);\n        }\n        assertNotNull(layer.weights);\n        assertNotNull(layer.biases);\n    }\n    @Test\n    void testInitialMomentumAndVelocitiesAreNull() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        assertNull(layer.weightMomentums);\n        assertNull(layer.biasMomentums);\n        assertNull(layer.weightVelocities);\n        assertNull(layer.biasVelocities);\n    }\n    @Test\n    void testMomentumAndVelocitiesAfterUpdate() {\n        NeuralLayer layer = new NeuralLayer(3, 2);\n        layer.dWeights = new float[][]{{0.1f, 0.2f, 0.3f}, {0.4f, 0.5f, 0.6f}};\n        layer.dBiases = new float[][]{{0.1f}, {0.2f}};\n        layer.updateWeightsAndBiases(0.01f, 0.9f, 0.999f, 1e-8f, 1);\n        assertNotNull(layer.weightMomentums);\n        assertNotNull(layer.biasMomentums);\n        assertNotNull(layer.weightVelocities);\n        assertNotNull(layer.biasVelocities);\n    }\n}"}}
{"canonical_solution": "import java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentUpdateService {\n    private static Map<Integer, StudentEntity> studentDatabase = new HashMap<>();\n    static {\n        studentDatabase.put(1, new StudentEntity(1, \"张三\", new Date()));\n        studentDatabase.put(2, new StudentEntity(2, \"李四\", new Date()));\n    }\n    public static Callback updateStudent(StudentEntity studentEntity) {\n        Date now = new Date();\n        for (StudentEntity entity : studentDatabase.values()) {\n            if (entity.getName().equals(studentEntity.getName()) && !entity.getId().equals(studentEntity.getId())) {\n                return Callback.error(\"学生姓名已经存在!\");\n            }\n        }\n        studentEntity.setUpdateTime(now);\n        studentDatabase.put(studentEntity.getId(), studentEntity);\n        return Callback.success(true);\n    }\n    public static void main(String[] args) {\n        Callback result1 = updateStudent(new StudentEntity(3, \"王五\", null));\n        System.out.println(result1.getMessage()); \n        Callback result2 = updateStudent(new StudentEntity(2, \"张三\", null));\n        System.out.println(result2.getMessage()); \n    }\n}\nclass StudentEntity {\n    private Integer id;\n    private String name;\n    private Date updateTime;\n    public StudentEntity(Integer id, String name, Date updateTime) {\n        this.id = id;\n        this.name = name;\n        this.updateTime = updateTime;\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public Date getUpdateTime() {\n        return updateTime;\n    }\n    public void setUpdateTime(Date updateTime) {\n        this.updateTime = updateTime;\n    }\n}\nclass Callback {\n    private boolean success;\n    private String message;\n    private Callback(boolean success, String message) {\n        this.success = success;\n        this.message = message;\n    }\n    public static Callback success(boolean success) {\n        return new Callback(success, \"更新成功!\");\n    }\n    public static Callback error(String message) {\n        return new Callback(false, message);\n    }\n    public boolean isSuccess() {\n        return success;\n    }\n    public String getMessage() {\n        return message;\n    }\n}", "content": "Please write a Java method to update student information. The method accepts a student entity as a parameter. If the student's name already exists in the database, it does not update the information and returns an error message; if the student's name does not exist, it updates the student information and records the update time. After a successful update, it returns a success message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentUpdateService {\n    private static Map<Integer, StudentEntity> studentDatabase = new HashMap<>();\n    static {\n    }\n    public static Callback updateStudent(StudentEntity studentEntity) {\n    }\n}\nclass StudentEntity {\n    private Integer id;\n    private String name;\n    private Date updateTime;\n    public StudentEntity(Integer id, String name, Date updateTime) {\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n    }\n    public Date getUpdateTime() {\n        return updateTime;\n    }\n    public void setUpdateTime(Date updateTime) {\n    }\n}\nclass Callback {\n    private boolean success;\n    private String message;\n    private Callback(boolean success, String message) {\n    }\n    public static Callback success(boolean success) {\n    }\n    public static Callback error(String message) {\n    }\n    public boolean isSuccess() {\n        return success;\n    }\n    public String getMessage() {\n        return message;\n    }\n}\n```", "id": 1556, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Date;\npublic class StudentUpdateServiceTest {\n    @Test\n    public void testUpdateStudent_Success_NewStudent() {\n        StudentEntity newStudent = new StudentEntity(3, \"王五\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n    }\n    @Test\n    public void testUpdateStudent_Error_NameExists() {\n        StudentEntity newStudent = new StudentEntity(2, \"张三\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertFalse(result.isSuccess());\n        assertEquals(\"学生姓名已经存在!\", result.getMessage());\n    }\n    @Test\n    public void testUpdateStudent_Success_UpdateExistingStudent() {\n        StudentEntity existingStudent = new StudentEntity(1, \"张三\", null);\n        Callback result = StudentUpdateService.updateStudent(existingStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n        assertNotNull(existingStudent.getUpdateTime());\n    }\n    @Test\n    public void testUpdateStudent_Success_UpdateDifferentName() {\n        StudentEntity newStudent = new StudentEntity(2, \"刘备\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n    }\n    @Test\n    public void testUpdateStudent_Success_AddAnotherStudent() {\n        StudentEntity newStudent = new StudentEntity(4, \"赵六\", null);\n        Callback result = StudentUpdateService.updateStudent(newStudent);\n        assertTrue(result.isSuccess());\n        assertEquals(\"更新成功!\", result.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class DatabaseConfigGenerator {\n    public Map<String, String> generateHibernateConfig() {\n        HashMap<String, String> config = new HashMap<>();\n        config.put(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5Dialect\");\n        config.put(\"hibernate.physical_naming_strategy\", \"org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\");\n        return config;\n    }\n    public static void main(String[] args) {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        boolean correct = \"org.hibernate.dialect.MySQL5Dialect\".equals(config.get(\"hibernate.dialect\")) &&\n                          \"org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\".equals(config.get(\"hibernate.physical_naming_strategy\"));\n        System.out.println(\"配置信息生成\" + (correct ? \"正确\" : \"错误\"));\n    }\n}", "content": "Please write a Java method that generates database configuration information. This configuration information will be used to configure the Hibernate framework to accommodate specific database dialects and naming strategies. Ensure that your method returns a `Map` object containing the database dialect and naming strategy. To simplify the problem, we only need to focus on the following two configuration items:\n\n1. Database Dialect (`hibernate.dialect`), assuming we are using the MySQL5 dialect.\n2. Naming Strategy (`hibernate.naming.physical_strategy`), assuming we are using the physical naming strategy provided by the Spring framework.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DatabaseConfigGenerator {\n    public Map<String, String> generateHibernateConfig() {\n    }\n}\n```", "id": 1557, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Map;\nimport java.util.HashMap;\npublic class DatabaseConfigGeneratorTest {\n    @Test\n    public void testGenerateHibernateConfig_NotNull() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertNotNull(config, \"Config map should not be null\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_ContainsDialect() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertEquals(\"org.hibernate.dialect.MySQL5Dialect\", config.get(\"hibernate.dialect\"), \"Config should contain correct hibernate.dialect\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_ContainsNamingStrategy() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertEquals(\"org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy\", config.get(\"hibernate.physical_naming_strategy\"), \"Config should contain correct hibernate.physical_naming_strategy\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_MapSize() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertEquals(2, config.size(), \"Config map should contain exactly 2 entries\");\n    }\n    @Test\n    public void testGenerateHibernateConfig_NoExtraKeys() {\n        DatabaseConfigGenerator configGenerator = new DatabaseConfigGenerator();\n        Map<String, String> config = configGenerator.generateHibernateConfig();\n        assertTrue(config.containsKey(\"hibernate.dialect\") && config.containsKey(\"hibernate.physical_naming_strategy\"), \"Config should only contain specific keys\");\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\npublic class EvenNumbersFilter {\n    public static int[] filterEvenNumbers(int[] numbers) {\n        ArrayList<Integer> evenNumbersList = new ArrayList<>();\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                evenNumbersList.add(number);\n            }\n        }\n        int[] evenNumbers = new int[evenNumbersList.size()];\n        for (int i = 0; i < evenNumbersList.size(); i++) {\n            evenNumbers[i] = evenNumbersList.get(i);\n        }\n        return evenNumbers;\n    }\n    public static void main(String[] args) {\n        int[] inputNumbers = {1, 2, 3, 4, 5, 6};\n        int[] expectedOutput = {2, 4, 6};\n        int[] actualOutput = filterEvenNumbers(inputNumbers);\n        boolean isCorrect = expectedOutput.length == actualOutput.length;\n        for (int i = 0; i < expectedOutput.length && isCorrect; i++) {\n            if (expectedOutput[i] != actualOutput[i]) {\n                isCorrect = false;\n            }\n        }\n        if (isCorrect) {\n            System.out.println(\"解决方案正确！\");\n        } else {\n            System.out.println(\"解决方案不正确。\");\n        }\n    }\n}", "content": "Please write a Java program that implements a method which takes an integer array as input and returns a new array containing all the even numbers from the input array. Ensure that your code is self-contained and includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\npublic class EvenNumbersFilter {\n    public static int[] filterEvenNumbers(int[] numbers) {\n    }\n}\n```", "id": 1558, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\npublic class EvenNumbersFilterTest {\n    @Test\n    public void testFilterEvenNumbers_withMixedNumbers() {\n        int[] inputNumbers = {1, 2, 3, 4, 5, 6};\n        int[] expectedOutput = {2, 4, 6};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withAllEvenNumbers() {\n        int[] inputNumbers = {2, 4, 6, 8, 10};\n        int[] expectedOutput = {2, 4, 6, 8, 10};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withAllOddNumbers() {\n        int[] inputNumbers = {1, 3, 5, 7, 9};\n        int[] expectedOutput = {};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withNoNumbers() {\n        int[] inputNumbers = {};\n        int[] expectedOutput = {};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n    @Test\n    public void testFilterEvenNumbers_withNegativeNumbers() {\n        int[] inputNumbers = {-3, -2, -1, 0, 1, 2};\n        int[] expectedOutput = {-2, 0, 2};\n        assertArrayEquals(expectedOutput, EvenNumbersFilter.filterEvenNumbers(inputNumbers));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class LibraryService {\n    private Map<String, Boolean> bookCatalog = new HashMap<>();\n    public LibraryService() {\n        bookCatalog.put(\"B001\", false);\n        bookCatalog.put(\"B002\", false);\n        bookCatalog.put(\"B003\", false);\n    }\n    public String borrowBookById(String bookId) {\n        Boolean isBorrowed = bookCatalog.get(bookId);\n        if (isBorrowed == null) {\n            return \"错误：书籍ID不存在。\";\n        } else if (isBorrowed) {\n            return \"书籍已被借出。\";\n        } else {\n            bookCatalog.put(bookId, true);\n            return \"书籍成功借出。\";\n        }\n    }\n    public static void main(String[] args) {\n        LibraryService libraryService = new LibraryService();\n        System.out.println(libraryService.borrowBookById(\"B001\")); \n        System.out.println(libraryService.borrowBookById(\"B004\")); \n        System.out.println(libraryService.borrowBookById(\"B001\")); \n    }\n}", "content": "Please write a Java method to handle the borrowing of books in a library. When a user wants to borrow a book, the method will update the status of the book based on the book's ID to indicate that the book has been borrowed. If the operation is successful, return a string message indicating the book has been successfully borrowed; otherwise, return an error message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class LibraryService {\n    private Map<String, Boolean> bookCatalog = new HashMap<>();\n    public LibraryService() {\n    }\n    public String borrowBookById(String bookId) {\n    }\n}\n```", "id": 1559, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class LibraryServiceTest {\n    private LibraryService libraryService;\n    @BeforeEach\n    void setUp() {\n        libraryService = new LibraryService();\n    }\n    @Test\n    void testBorrowBookById_Success() {\n        String result = libraryService.borrowBookById(\"B001\");\n        assertEquals(\"书籍成功借出。\", result);\n    }\n    @Test\n    void testBorrowBookById_BookDoesNotExist() {\n        String result = libraryService.borrowBookById(\"B004\");\n        assertEquals(\"错误：书籍ID不存在。\", result);\n    }\n    @Test\n    void testBorrowBookById_AlreadyBorrowed() {\n        libraryService.borrowBookById(\"B002\"); \n        String result = libraryService.borrowBookById(\"B002\");\n        assertEquals(\"书籍已被借出。\", result);\n    }\n    @Test\n    void testBorrowBookById_Null() {\n        String result = libraryService.borrowBookById(\"B003\");\n        assertEquals(\"书籍成功借出。\", result);\n    }\n    @Test\n    void testBorrowBookById_SuccessWithDifferentBookId() {\n        String result = libraryService.borrowBookById(\"B003\");\n        assertEquals(\"书籍成功借出。\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public double divide(double a, double b) {\n        if (b == 0) {\n            return Double.NaN;\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        List<Double> results = Arrays.asList(\n                calculator.add(5, 3),\n                calculator.subtract(10, 4),\n                calculator.multiply(2, 3),\n                calculator.divide(8, 2),\n                calculator.divide(5, 0) \n        );\n        System.out.println(\"计算结果：\" + results);\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This class should be able to perform basic arithmetic operations: addition, subtraction, multiplication, and division. Each operation should be implemented through a method that accepts two `double` type parameters and returns a `double` type result. Ensure that the division method can handle the case of a zero divisor, in which case it should return `Double.NaN`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n    }\n    public double subtract(double a, double b) {\n    }\n    public double multiply(double a, double b) {\n    }\n    public double divide(double a, double b) {\n    }\n}\n```", "id": 1560, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAdd() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8.0, calculator.add(5, 3));\n        assertEquals(14.0, calculator.add(10, 4));\n    }\n    @Test\n    public void testSubtract() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(6.0, calculator.subtract(10, 4));\n        assertEquals(1.0, calculator.subtract(5, 4));\n    }\n    @Test\n    public void testMultiply() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(6.0, calculator.multiply(2, 3));\n        assertEquals(0.0, calculator.multiply(0, 5));\n    }\n    @Test\n    public void testDivide() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(4.0, calculator.divide(8, 2));\n        assertTrue(Double.isNaN(calculator.divide(5, 0)));\n    }\n    @Test\n    public void testDivideByZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertTrue(Double.isNaN(calculator.divide(5, 0)));\n        assertTrue(Double.isNaN(calculator.divide(-5, 0)));\n    }\n}"}}
{"canonical_solution": "import java.lang.Math;\npublic class Rectangle {\n    private double length;\n    private double width;\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n    public double calculateArea() {\n        return length * width;\n    }\n    public static void main(String[] args) {\n        Rectangle rect1 = new Rectangle(5.0, 4.0);\n        Rectangle rect2 = new Rectangle(7.5, 3.5);\n        System.out.println(\"矩形1的面积: \" + rect1.calculateArea());\n        System.out.println(\"矩形2的面积: \" + rect2.calculateArea());\n    }\n}", "content": "Write a Java program to calculate the area of a rectangle. Ensure that your program meets the following requirements:\n\n- Your program should include a class named `Rectangle`.\n- In the `Rectangle` class, there should be two attributes: `length` and `width`, which are used to store the length and width of the rectangle, respectively.\n- The class should have a constructor that accepts two parameters (length and width) and initializes the object accordingly.\n- The class should include a method named `calculateArea`, which calculates and returns the area of the rectangle.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Math;\npublic class Rectangle {\n    private double length;\n    private double width;\n    public Rectangle(double length, double width) {\n    }\n    public double calculateArea() {\n    }\n}\n```", "id": 1561, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class RectangleTest {\n    @Test\n    public void testCalculateAreaPositiveNumbers() {\n        Rectangle rect = new Rectangle(5.0, 4.0);\n        assertEquals(20.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaZeroLength() {\n        Rectangle rect = new Rectangle(0, 4.0);\n        assertEquals(0.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaZeroWidth() {\n        Rectangle rect = new Rectangle(5.0, 0);\n        assertEquals(0.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaNegativeNumbers() {\n        Rectangle rect = new Rectangle(-5.0, 4.0);\n        assertEquals(-20.0, rect.calculateArea(), 0.0001);\n    }\n    @Test\n    public void testCalculateAreaDecimalNumbers() {\n        Rectangle rect = new Rectangle(7.5, 3.5);\n        assertEquals(26.25, rect.calculateArea(), 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\npublic class StudentScoreManager {\n    private HashMap<String, Integer> studentScores;\n    public StudentScoreManager() {\n        studentScores = new HashMap<>();\n    }\n    public void addStudentScore(String name, int score) {\n        studentScores.put(name, score);\n    }\n    public int getStudentScore(String name) {\n        return studentScores.getOrDefault(name, -1);\n    }\n    public static void main(String[] args) {\n        StudentScoreManager manager = new StudentScoreManager();\n        manager.addStudentScore(\"张三\", 90);\n        manager.addStudentScore(\"李四\", 85);\n        System.out.println(\"张三的分数是：\" + manager.getStudentScore(\"张三\")); \n        System.out.println(\"李四的分数是：\" + manager.getStudentScore(\"李四\")); \n        System.out.println(\"王五的分数是：\" + manager.getStudentScore(\"王五\")); \n    }\n}", "content": "Please design a simple student information management system. This system should allow users to store students' names and their scores, and be able to query their scores by the students' names.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\npublic class StudentScoreManager {\n    private HashMap<String, Integer> studentScores;\n    public StudentScoreManager() {\n    }\n    public void addStudentScore(String name, int score) {\n    }\n    public int getStudentScore(String name) {\n    }\n}\n```", "id": 1562, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class StudentScoreManagerTest {\n    private StudentScoreManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new StudentScoreManager();\n    }\n    @Test\n    public void testAddStudentScoreAndRetrieve() {\n        manager.addStudentScore(\"张三\", 90);\n        assertEquals(90, manager.getStudentScore(\"张三\"));\n    }\n    @Test\n    public void testGetStudentScoreForNonexistentStudent() {\n        assertEquals(-1, manager.getStudentScore(\"王五\"));\n    }\n    @Test\n    public void testUpdateStudentScore() {\n        manager.addStudentScore(\"李四\", 85);\n        manager.addStudentScore(\"李四\", 95);\n        assertEquals(95, manager.getStudentScore(\"李四\"));\n    }\n    @Test\n    public void testAddMultipleStudentScores() {\n        manager.addStudentScore(\"张三\", 90);\n        manager.addStudentScore(\"李四\", 85);\n        assertEquals(90, manager.getStudentScore(\"张三\"));\n        assertEquals(85, manager.getStudentScore(\"李四\"));\n    }\n    @Test\n    public void testNegativeScore() {\n        manager.addStudentScore(\"赵六\", -10);\n        assertEquals(-10, manager.getStudentScore(\"赵六\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\npublic class SafeAddToMap {\n    public static void safeAdd(HashMap<String, String> map, String key, String value) {\n        try {\n            map.put(key, value);\n        } catch (Exception e) {\n        }\n    }\n    public static void main(String[] args) {\n        HashMap<String, String> myMap = new HashMap<>();\n        safeAdd(myMap, \"key1\", \"value1\");\n        safeAdd(myMap, \"key2\", \"value2\");\n        System.out.println(myMap);\n    }\n}", "content": "Please write a Java method that safely adds key-value pairs to a `HashMap`. If any exceptions are encountered during the addition process, the method should catch and ignore them, ensuring the continuation of the program.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\npublic class SafeAddToMap {\n    public static void safeAdd(HashMap<String, String> map, String key, String value) {\n    }\n}\n```", "id": 1563, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.HashMap;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class SafeAddToMapTest {\n    @Test\n    public void testSafeAdd_NormalCase() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, \"testKey\", \"testValue\");\n        assertEquals(\"testValue\", map.get(\"testKey\"));\n    }\n    @Test\n    public void testSafeAdd_NullKey() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, null, \"testValue\");\n        assertEquals(\"testValue\", map.get(null));\n    }\n    @Test\n    public void testSafeAdd_NullValue() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, \"testKey\", null);\n        assertNull(map.get(\"testKey\"));\n    }\n    @Test\n    public void testSafeAdd_NullMap() {\n        HashMap<String, String> map = null;\n        assertDoesNotThrow(() -> SafeAddToMap.safeAdd(map, \"testKey\", \"testValue\"));\n    }\n    @Test\n    public void testSafeAdd_DuplicateKey() {\n        HashMap<String, String> map = new HashMap<>();\n        SafeAddToMap.safeAdd(map, \"testKey\", \"initialValue\");\n        SafeAddToMap.safeAdd(map, \"testKey\", \"newValue\");\n        assertEquals(\"newValue\", map.get(\"testKey\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nclass UserInfoUpdater {\n    static class UserInfo {\n        String productName;\n        int productQuantity;\n        String shippedId;\n        List<Integer> shippedInfo;\n        int airNumber;\n        List<Integer> airInformation;\n        public UserInfo(String productName, int productQuantity, String shippedId, List<Integer> shippedInfo, int airNumber, List<Integer> airInformation) {\n            this.productName = productName;\n            this.productQuantity = productQuantity;\n            this.shippedId = shippedId;\n            this.shippedInfo = shippedInfo;\n            this.airNumber = airNumber;\n            this.airInformation = airInformation;\n        }\n    }\n    public static List<UserInfo> updateUserInfo(List<UserInfo> users) {\n        for (UserInfo user : users) {\n            user.productName = user.productName.toUpperCase();\n            user.productQuantity += 10;\n            user.shippedId += \"A\";\n            user.shippedInfo.set(user.shippedInfo.size() - 1, user.shippedInfo.get(user.shippedInfo.size() - 1) + 10);\n            user.airNumber += 100;\n            user.airInformation.set(user.airInformation.size() - 1, user.airInformation.get(user.airInformation.size() - 1) + 10);\n        }\n        return users;\n    }\n    public static void main(String[] args) {\n        List<UserInfo> users = new ArrayList<>();\n        users.add(new UserInfo(\"laptop\", 20, \"ID123\", List.of(1, 2, 3), 500, List.of(100, 200, 300)));\n        users.add(new UserInfo(\"tablet\", 15, \"ID456\", List.of(4, 5, 6), 600, List.of(400, 500, 600)));\n        users = updateUserInfo(users);\n        for (UserInfo user : users) {\n            System.out.println(\"ProductName: \" + user.productName + \", ProductQuantity: \" + user.productQuantity + \", ShippedId: \" + user.shippedId + \", LastShippedInfo: \" + user.shippedInfo.get(user.shippedInfo.size() - 1) + \", AirNumber: \" + user.airNumber + \", LastAirInformation: \" + user.airInformation.get(user.airInformation.size() - 1));\n        }\n    }\n}", "content": "Please design a Java program to handle a series of update operations on user information. Given a set of user information, you need to update this information according to the following steps:\n\n1. Convert all users' product names to uppercase.\n2. Increase all users' product quantities by 10.\n3. Append \"A\" to all users' shipment IDs.\n4. Increase the last shipment info array value of all users by 10.\n5. Increase all users' flight numbers by 100.\n6. Increase the last flight info array value of all users by 10.\n7. Extract the last flight info array value of all users.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass UserInfoUpdater {\n    static class UserInfo {\n        String productName;\n        int productQuantity;\n        String shippedId;\n        List<Integer> shippedInfo;\n        int airNumber;\n        List<Integer> airInformation;\n        public UserInfo(String productName, int productQuantity, String shippedId, List<Integer> shippedInfo, int airNumber, List<Integer> airInformation) {\n        }\n    }\n    public static List<UserInfo> updateUserInfo(List<UserInfo> users) {\n        return users;\n    }\n}\n```", "id": 1564, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nclass UserInfoUpdaterTest {\n    @Test\n    void testUpdateUserInfoIncrementsProductQuantity() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(30, updatedUsers.get(0).productQuantity);\n    }\n    @Test\n    void testUpdateUserInfoConvertsProductNameToUpperCase() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(\"LAPTOP\", updatedUsers.get(0).productName);\n    }\n    @Test\n    void testUpdateUserInfoAppendsToShippedId() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(\"ID123A\", updatedUsers.get(0).shippedId);\n    }\n    @Test\n    void testUpdateUserInfoIncrementsLastElementOfShippedInfo() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(13, updatedUsers.get(0).shippedInfo.get(2));\n    }\n    @Test\n    void testUpdateUserInfoIncrementsAirNumber() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(600, updatedUsers.get(0).airNumber);\n    }\n    @Test\n    void testUpdateUserInfoIncrementsLastElementOfAirInformation() {\n        List<UserInfoUpdater.UserInfo> users = new ArrayList<>();\n        users.add(new UserInfoUpdater.UserInfo(\"laptop\", 20, \"ID123\", Arrays.asList(1, 2, 3), 500, Arrays.asList(100, 200, 300)));\n        List<UserInfoUpdater.UserInfo> updatedUsers = UserInfoUpdater.updateUserInfo(users);\n        assertEquals(310, updatedUsers.get(0).airInformation.get(2));\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.ArrayList;\nclass User {\n    private String name;\n    private List<Book> collection;\n    public User(String name) {\n        this.name = name;\n        this.collection = new ArrayList<>();\n    }\n    public void addBookToCollection(Book book) {\n        if (!collection.contains(book)) {\n            collection.add(book);\n        }\n    }\n    public List<Book> getCollection() {\n        return collection;\n    }\n    public void setCollection(List<Book> collection) {\n        this.collection = collection;\n    }\n}\nclass Book {\n    private String title;\n    public Book(String title) {\n        this.title = title;\n    }\n    public String getTitle() {\n        return title;\n    }\n}\nclass CollectionManager {\n    public void deleteBookFromCollection(User user, Book book) {\n        List<Book> collection = user.getCollection();\n        if (collection.contains(book)) {\n            collection.remove(book);\n            user.setCollection(collection);\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        User user = new User(\"张三\");\n        Book book1 = new Book(\"Java编程思想\");\n        Book book2 = new Book(\"Effective Java\");\n        user.addBookToCollection(book1);\n        user.addBookToCollection(book2);\n        CollectionManager manager = new CollectionManager();\n        manager.deleteBookFromCollection(user, book1);\n        if (!user.getCollection().contains(book1) && user.getCollection().contains(book2)) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "Assuming you are developing a book management system, which includes a feature that allows users to remove books from their collection list. Describe how you would implement this functionality. The functionality receives two parameters: one is a user object, and the other is the book object to be removed from the collection. You need to find the book from the user's collection list and remove it. If the book does not exist in the user's collection list, no action should be taken.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\nclass User {\n    private String name;\n    private List<Book> collection;\n    public User(String name) {\n    }\n    public void addBookToCollection(Book book) {\n    }\n    public List<Book> getCollection() {\n        return null;\n    }\n    public void setCollection(List<Book> collection) {\n    }\n}\nclass Book {\n    private String title;\n    public Book(String title) {\n    }\n    public String getTitle() {\n        return null;\n    }\n}\nclass CollectionManager {\n    public void deleteBookFromCollection(User user, Book book) {\n    }\n}\n```", "id": 1565, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.ArrayList;\nclass UserTest {\n    private User user;\n    private Book book1;\n    private Book book2;\n    @BeforeEach\n    void setUp() {\n        user = new User(\"张三\");\n        book1 = new Book(\"Java编程思想\");\n        book2 = new Book(\"Effective Java\");\n    }\n    @Test\n    void testAddBookToCollection() {\n        user.addBookToCollection(book1);\n        assertTrue(user.getCollection().contains(book1));\n    }\n    @Test\n    void testGetCollection() {\n        user.addBookToCollection(book1);\n        user.addBookToCollection(book2);\n        List<Book> collection = user.getCollection();\n        assertEquals(2, collection.size());\n        assertTrue(collection.contains(book1));\n        assertTrue(collection.contains(book2));\n    }\n    @Test\n    void testSetCollection() {\n        List<Book> newCollection = new ArrayList<>();\n        newCollection.add(book1);\n        user.setCollection(newCollection);\n        assertEquals(newCollection, user.getCollection());\n    }\n}\nclass CollectionManagerTest {\n    private User user;\n    private Book book1;\n    private Book book2;\n    private CollectionManager manager;\n    @BeforeEach\n    void setUp() {\n        user = new User(\"张三\");\n        book1 = new Book(\"Java编程思想\");\n        book2 = new Book(\"Effective Java\");\n        manager = new CollectionManager();\n        user.addBookToCollection(book1);\n        user.addBookToCollection(book2);\n    }\n    @Test\n    void testDeleteBookFromCollection() {\n        manager.deleteBookFromCollection(user, book1);\n        assertFalse(user.getCollection().contains(book1));\n    }\n    @Test\n    void testDeleteBookFromCollectionNotInList() {\n        Book book3 = new Book(\"Java核心技术卷I\");\n        manager.deleteBookFromCollection(user, book3);\n        assertTrue(user.getCollection().contains(book1));\n        assertTrue(user.getCollection().contains(book2));\n    }\n    @Test\n    void testDeleteBookFromEmptyCollection() {\n        User newUser = new User(\"李四\");\n        manager.deleteBookFromCollection(newUser, book1);\n        assertTrue(newUser.getCollection().isEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\npublic class CustomThreadPoolCreator {\n    public ThreadPoolExecutor createCustomThreadPool(int corePoolSize, int maxPoolSize, int queueCapacity, String namePrefix) {\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(\n            corePoolSize, \n            maxPoolSize, \n            60L, TimeUnit.SECONDS, \n            new LinkedBlockingQueue<>(queueCapacity),\n            new CustomThreadFactory(namePrefix),\n            new ThreadPoolExecutor.CallerRunsPolicy());\n        return executor;\n    }\n    static class CustomThreadFactory implements java.util.concurrent.ThreadFactory {\n        private final String namePrefix;\n        private int threadId = 1;\n        public CustomThreadFactory(String namePrefix) {\n            this.namePrefix = namePrefix;\n        }\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r, namePrefix + \"-thread-\" + threadId++);\n            return t;\n        }\n    }\n    public static void main(String[] args) {\n        CustomThreadPoolCreator creator = new CustomThreadPoolCreator();\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        executor.execute(() -> System.out.println(Thread.currentThread().getName() + \" is running\"));\n        executor.shutdown();\n    }\n}", "content": "Please design a Java method to create a custom thread pool. This thread pool should be able to dynamically set its core thread count, maximum thread count, queue capacity, and thread name prefix based on incoming parameters. Additionally, when the thread pool reaches its maximum capacity, there should be a strategy to handle new tasks.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\npublic class CustomThreadPoolCreator {\n    public ThreadPoolExecutor createCustomThreadPool(int corePoolSize, int maxPoolSize, int queueCapacity, String namePrefix) {\n    }\n    static class CustomThreadFactory implements java.util.concurrent.ThreadFactory {\n        private final String namePrefix;\n        private int threadId = 1;\n        public CustomThreadFactory(String namePrefix) {\n        }\n        @Override\n        public Thread newThread(Runnable r) {\n        }\n    }\n}\n```", "id": 1566, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\npublic class CustomThreadPoolCreatorTest {\n    private CustomThreadPoolCreator creator;\n    @Before\n    public void setUp() {\n        creator = new CustomThreadPoolCreator();\n    }\n    @Test\n    public void testCreateCustomThreadPool_CorePoolSize() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertEquals(2, executor.getCorePoolSize());\n    }\n    @Test\n    public void testCreateCustomThreadPool_MaxPoolSize() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertEquals(4, executor.getMaximumPoolSize());\n    }\n    @Test\n    public void testCreateCustomThreadPool_QueueCapacity() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertEquals(10, executor.getQueue().remainingCapacity());\n    }\n    @Test\n    public void testCreateCustomThreadPool_NamePrefix() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        executor.execute(() -> {\n            String threadName = Thread.currentThread().getName();\n            assertEquals(true, threadName.startsWith(\"TestPool-thread-\"));\n        });\n    }\n    @Test\n    public void testCreateCustomThreadPool_NotNullExecutor() {\n        ThreadPoolExecutor executor = creator.createCustomThreadPool(2, 4, 10, \"TestPool\");\n        assertNotNull(executor);\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class LibrarySystem {\n    public static CompletableFuture<String> asyncUpdateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return CompletableFuture.supplyAsync(() -> {\n            boolean updateResult = updateBookInfo(bookId, newTitle, newAuthor);\n            if (updateResult) {\n                return \"Update successful\";\n            } else {\n                return \"Update failed\";\n            }\n        });\n    }\n    private static boolean updateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return true; \n    }\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = asyncUpdateBookInfo(\"123\", \"新标题\", \"新作者\");\n        String result = updateFuture.get();\n        System.out.println(result);\n    }\n}", "content": "Assume you are developing a system to manage library books and you need to implement a feature to update book information. \n\nYou need to implement a method named `asyncUpdateBookInfo` that takes three parameters: `bookId` (the book's ID, type `String`), `newTitle` (the new title of the book, type `String`), and `newAuthor` (the new author of the book, type `String`). The method should asynchronously update the book information and return `\"Update successful\"` when the update succeeds, or `\"Update failed\"` if it encounters any errors.\n\nPlease use `CompletableFuture` to implement the asynchronous operation and assume you already have a synchronous method `updateBookInfo(String bookId, String newTitle, String newAuthor)` that can be called, which returns `true` when the update is successful and `false` when it fails.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class LibrarySystem {\n    public static CompletableFuture<String> asyncUpdateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return CompletableFuture.supplyAsync(() -> {\n        });\n    }\n    private static boolean updateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return true; \n    }\n}\n```", "id": 1567, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class LibrarySystemTest {\n    @Test\n    public void testAsyncUpdateBookInfoSuccessful() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"新标题\", \"新作者\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoDifferentBookId() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"456\", \"Another Title\", \"Another Author\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoEmptyTitle() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"\", \"新作者\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoEmptyAuthor() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"新标题\", \"\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n    @Test\n    public void testAsyncUpdateBookInfoEmptyFields() throws ExecutionException, InterruptedException {\n        CompletableFuture<String> updateFuture = LibrarySystem.asyncUpdateBookInfo(\"123\", \"\", \"\");\n        String result = updateFuture.get();\n        assertEquals(\"Update successful\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.regex.Pattern;\npublic class EmailValidator {\n    public static boolean isValidEmail(String email) {\n        String emailRegex = \"^[\\\\w-\\\\.]+@[\\\\w-]+\\\\.[\\\\w-]{2,}$\";\n        Pattern pattern = Pattern.compile(emailRegex);\n        if (email == null) {\n            return false;\n        }\n        return pattern.matcher(email).matches();\n    }\n    public static void main(String[] args) {\n        System.out.println(isValidEmail(\"example@example.com\")); \n        System.out.println(isValidEmail(\"example@example\")); \n        System.out.println(isValidEmail(\"example@.com\")); \n        System.out.println(isValidEmail(\"example.com\")); \n        System.out.println(isValidEmail(\"@example.com\")); \n        System.out.println(isValidEmail(\" example@example.com \")); \n        System.out.println(isValidEmail(\"example@example.com.\")); \n        System.out.println(isValidEmail(\"exa mple@example.com\")); \n    }\n}", "content": "Please write a Java method to verify whether a string meets the format requirements of an email address. The method should accept a string parameter and return `true` if the string is a valid email address, otherwise return `false`. A valid email address is defined as: it must contain an `@` symbol, there must be characters before and after the `@` symbol, and there must be at least one `.` symbol after the `@` symbol, with characters following the `.` symbol. Note that the email address should not contain spaces.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.regex.Pattern;\npublic class EmailValidator {\n    public static boolean isValidEmail(String email) {\n    }\n}\n```", "id": 1568, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class EmailValidatorTest {\n    @Test\n    public void testValidEmail() {\n        Assertions.assertTrue(EmailValidator.isValidEmail(\"example@example.com\"));\n    }\n    @Test\n    public void testInvalidEmailWithoutDomain() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example@example\"));\n    }\n    @Test\n    public void testInvalidEmailWithoutUsername() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example@.com\"));\n    }\n    @Test\n    public void testInvalidEmailMissingAtSymbol() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example.com\"));\n    }\n    @Test\n    public void testInvalidEmailWhitespace() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\" example@example.com \"));\n    }\n    @Test\n    public void testInvalidEmailSpecialCharacter() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"example@example.com.\"));\n    }\n    @Test\n    public void testInvalidEmailSpaceInAddress() {\n        Assertions.assertFalse(EmailValidator.isValidEmail(\"exa mple@example.com\"));\n    }\n}"}}
{"canonical_solution": "import java.text.ParseException;\nimport java.text.SimpleDateFormat;\npublic class DateTimeFormatter {\n    public static String validateDateTime(String input) {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        formatter.setLenient(false); \n        try {\n            formatter.parse(input); \n            return \"输入有效\";\n        } catch (ParseException e) {\n            return \"输入格式错误，请重新输入\";\n        }\n    }\n    public static void main(String[] args) {\n        String[] testInputs = {\n            \"2023-04-01 12:00:00\",\n            \"2023-02-29 12:00:00\", \n            \"2023-04-01 25:00:00\", \n            \"2023/04/01 12:00:00\"  \n        };\n        for (String input : testInputs) {\n            System.out.println(validateDateTime(input));\n        }\n    }\n}", "content": "Please modify the task to focus on specifying the requirements and conditions for validating user input of date and time in a Java program. The user will enter the date and time as a string in the format \"yyyy-MM-dd HH:mm:ss\". Ensure that the entered date and time are valid. If the input format is incorrect, specify that the program should return an error message indicating the issue. Utilize `SimpleDateFormat` and `ParseException` for validation. Describe that if the date and time are valid, the program should return \"Input is valid\", and if not, it should return \"Input format error, please re-enter\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\npublic class DateTimeFormatter {\n    public static String validateDateTime(String input) {\n    }\n}\n```", "id": 1569, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DateTimeFormatterTest {\n    @Test\n    public void testValidDateTime() {\n        String input = \"2023-04-01 12:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入有效\", result);\n    }\n    @Test\n    public void testInvalidDateFormat() {\n        String input = \"2023/04/01 12:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入格式错误，请重新输入\", result);\n    }\n    @Test\n    public void testInvalidDateTimeHour() {\n        String input = \"2023-04-01 25:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入格式错误，请重新输入\", result);\n    }\n    @Test\n    public void testInvalidDateLeapYear() {\n        String input = \"2023-02-29 12:00:00\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入格式错误，请重新输入\", result);\n    }\n    @Test\n    public void testEdgeCaseValidDateTime() {\n        String input = \"2023-12-31 23:59:59\";\n        String result = DateTimeFormatter.validateDateTime(input);\n        assertEquals(\"输入有效\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class LandClassification {\n    public static boolean isBuildingArea(int type) {\n        List<Integer> buildingTypes = Arrays.asList(1, 2, 3, 4); \n        return buildingTypes.contains(type);\n    }\n    public static void checkFunction() {\n        assert isBuildingArea(1) : \"住宅区应该被识别为建筑区域\";\n        assert isBuildingArea(2) : \"商业区应该被识别为建筑区域\";\n        assert isBuildingArea(3) : \"工业区应该被识别为建筑区域\";\n        assert isBuildingArea(4) : \"公共设施区应该被识别为建筑区域\";\n        assert !isBuildingArea(5) : \"绿地区域不应该被识别为建筑区域\";\n        assert !isBuildingArea(6) : \"道路不应该被识别为建筑区域\";\n        assert !isBuildingArea(0) : \"未分类区域不应该被识别为建筑区域\";\n        System.out.println(\"所有测试通过！\");\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java method to determine whether a plot of land belongs to a construction area. The type of the plot is represented by an integer `type`, where:\n\n- `1` represents a residential area\n- `2` represents a commercial area\n- `3` represents an industrial area\n- `4` represents a public facility area\n- `5` represents a green area\n- `6` represents a road\n- Other numbers represent unclassified areas\n\nIf the plot belongs to a residential area, commercial area, industrial area, or public facility area, it is considered a construction area.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class LandClassification {\n    public static boolean isBuildingArea(int type) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1570, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class LandClassificationTest {\n    @Test\n    public void testIsBuildingArea_ForResidentialArea() {\n        assertTrue(LandClassification.isBuildingArea(1));\n    }\n    @Test\n    public void testIsBuildingArea_ForCommercialArea() {\n        assertTrue(LandClassification.isBuildingArea(2));\n    }\n    @Test\n    public void testIsBuildingArea_ForIndustrialArea() {\n        assertTrue(LandClassification.isBuildingArea(3));\n    }\n    @Test\n    public void testIsBuildingArea_ForUnknownArea() {\n        assertFalse(LandClassification.isBuildingArea(5));\n    }\n    @Test\n    public void testIsBuildingArea_ForRoads() {\n        assertFalse(LandClassification.isBuildingArea(6));\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\npublic class TokenValidator {\n    public Boolean validateAccessToken(String accessToken) {\n        if (!isTokenFormatValid(accessToken)) {\n            return false;\n        }\n        String storedToken = \"abc123\";\n        return accessToken.equals(storedToken);\n    }\n    private boolean isTokenFormatValid(String token) {\n        return token != null && token.length() > 5;\n    }\n    public static void main(String[] args) {\n        TokenValidator validator = new TokenValidator();\n        System.out.println(\"验证结果 (应为true): \" + validator.validateAccessToken(\"abc123\")); \n        System.out.println(\"验证结果 (应为false): \" + validator.validateAccessToken(\"abc\")); \n        System.out.println(\"验证结果 (应为false): \" + validator.validateAccessToken(null)); \n    }\n}", "content": "Please write a description of a Java method to validate a user's access token. The method should first check if the token format is correct, then compare it with the token stored in the database. If the token format is correct and matches the token in the database, it should return true; otherwise, it should return false. Ensure that your description considers handling possible exceptions and suggests using mock data in the database query to verify the method's correctness.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Optional;\npublic class TokenValidator {\n    public Boolean validateAccessToken(String accessToken) {\n    }\n    private boolean isTokenFormatValid(String token) {\n    }\n}\n```", "id": 1571, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.Test;\npublic class TokenValidatorTest {\n    @Test\n    public void testValidateAccessToken_ValidToken() {\n        TokenValidator validator = new TokenValidator();\n        assertTrue(validator.validateAccessToken(\"abc123\"));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_ShortLength() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(\"abc\"));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_Null() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(null));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_WrongToken() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(\"wrongToken\"));\n    }\n    @Test\n    public void testValidateAccessToken_InvalidToken_EmptyString() {\n        TokenValidator validator = new TokenValidator();\n        assertFalse(validator.validateAccessToken(\"\"));\n    }\n}"}}
{"canonical_solution": "public class ParkingAssistant {\n    public void autoStop(double distance) {\n        if (distance <= 10.0) {\n            System.out.println(\"停车成功\");\n        } else {\n            System.out.println(\"继续行驶\");\n        }\n    }\n    public static void main(String[] args) {\n        ParkingAssistant assistant = new ParkingAssistant();\n        assistant.autoStop(5);  \n        assistant.autoStop(15); \n        assistant.autoStop(10); \n    }\n}", "content": "Please write a Java program to implement a simple parking assistance system. When the vehicle approaches an obstacle at least 10 meters, the system should automatically stop the vehicle. You need to complete the following tasks:\n\n- Define a class named `ParkingAssistant`.\n- In this class, implement a method named `autoStop` that takes one parameter representing the distance between the vehicle and the obstacle (unit: meters).\n- If the distance is less than or equal to 10 meters, the method should print \"Parking successful\", indicating the vehicle has stopped.\n- Otherwise, print \"Continue driving\", indicating the vehicle can safely drive.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\npublic class ParkingAssistant {\n    public void autoStop(double distance) {\n    }\n}\n```", "id": 1572, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\npublic class ParkingAssistantTest {\n    @Test\n    public void testAutoStopWhenDistanceEqualToFive() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(5);\n        assertTrue(outContent.toString().contains(\"停车成功\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceEqualToFifteen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(15);\n        assertTrue(outContent.toString().contains(\"继续行驶\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceEqualToTen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(10);\n        assertTrue(outContent.toString().contains(\"停车成功\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceLessThanTen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(7.5);\n        assertTrue(outContent.toString().contains(\"停车成功\"));\n    }\n    @Test\n    public void testAutoStopWhenDistanceGreaterThanTen() {\n        ParkingAssistant assistant = new ParkingAssistant();\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        assistant.autoStop(12.5);\n        assertTrue(outContent.toString().contains(\"继续行驶\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nimport java.util.Optional;\nclass Book {\n    private String title;\n    private Optional<String> audiobook;\n    public Book(String title, Optional<String> audiobook) {\n        this.title = title;\n        this.audiobook = audiobook;\n    }\n    public Optional<String> getAudiobook() {\n        return audiobook;\n    }\n}\nclass AudiobookChecker {\n    public void checkAudiobook(Book book, Optional<String> expectedAudiobook) throws AudiobookMismatchException {\n        if (!Objects.equals(book.getAudiobook(), expectedAudiobook)) {\n            throw new AudiobookMismatchException(\"有声书版本不匹配\");\n        }\n    }\n}\nclass AudiobookMismatchException extends Exception {\n    public AudiobookMismatchException(String message) {\n        super(message);\n    }\n}\npublic class AudiobookCheckDemo {\n    public static void main(String[] args) {\n        Book book1 = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        Book book2 = new Book(\"Python Programming\", Optional.empty());\n        AudiobookChecker checker = new AudiobookChecker();\n        try {\n            checker.checkAudiobook(book1, Optional.of(\"Java Programming Audiobook\")); \n            System.out.println(\"书籍1有声书版本检查通过\");\n        } catch (AudiobookMismatchException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            checker.checkAudiobook(book2, Optional.empty()); \n            System.out.println(\"书籍2有声书版本检查通过\");\n        } catch (AudiobookMismatchException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            checker.checkAudiobook(book1, Optional.of(\"错误的有声书版本\")); \n        } catch (AudiobookMismatchException e) {\n            System.out.println(\"书籍1有声书版本检查未通过: \" + e.getMessage());\n        }\n    }\n}", "content": "Assume you are developing a book management system and need to implement a feature to check whether a book has an audiobook version.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nimport java.util.Optional;\nclass Book {\n    private String title;\n    private Optional<String> audiobook;\n    public Book(String title, Optional<String> audiobook) {}\n    public Optional<String> getAudiobook() {}\n}\nclass AudiobookChecker {\n    public void checkAudiobook(Book book, Optional<String> expectedAudiobook) throws AudiobookMismatchException {}\n}\nclass AudiobookMismatchException extends Exception {\n    public AudiobookMismatchException(String message) {}\n}\n```", "id": 1573, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.Optional;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testGetAudiobook() {\n        Book bookWithAudiobook = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        assertEquals(Optional.of(\"Java Programming Audiobook\"), bookWithAudiobook.getAudiobook());\n        Book bookWithoutAudiobook = new Book(\"Python Programming\", Optional.empty());\n        assertEquals(Optional.empty(), bookWithoutAudiobook.getAudiobook());\n    }\n}\nclass AudiobookCheckerTest {\n    @Test\n    void testCheckAudiobookMatch() throws AudiobookMismatchException {\n        Book book = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        AudiobookChecker checker = new AudiobookChecker();\n        checker.checkAudiobook(book, Optional.of(\"Java Programming Audiobook\"));\n    }\n    @Test\n    void testCheckAudiobookMismatch() {\n        Book book = new Book(\"Java Programming\", Optional.of(\"Java Programming Audiobook\"));\n        AudiobookChecker checker = new AudiobookChecker();\n        assertThrows(AudiobookMismatchException.class, () -> {\n            checker.checkAudiobook(book, Optional.of(\"Wrong Audiobook\"));\n        });\n    }\n    @Test\n    void testCheckAudiobookEmptyMatch() throws AudiobookMismatchException {\n        Book book = new Book(\"Python Programming\", Optional.empty());\n        AudiobookChecker checker = new AudiobookChecker();\n        checker.checkAudiobook(book, Optional.empty());\n    }\n    @Test\n    void testCheckAudiobookEmptyMismatch() {\n        Book book = new Book(\"Python Programming\", Optional.empty());\n        AudiobookChecker checker = new AudiobookChecker();\n        assertThrows(AudiobookMismatchException.class, () -> {\n            checker.checkAudiobook(book, Optional.of(\"Some Audiobook\"));\n        });\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass StudentScore {\n    private int studentId;\n    private String studentName;\n    private int mathScore;\n    private int englishScore;\n    private int scienceScore;\n    public StudentScore(int studentId, String studentName, int mathScore, int englishScore, int scienceScore) {\n        this.studentId = studentId;\n        this.studentName = studentName;\n        this.mathScore = mathScore;\n        this.englishScore = englishScore;\n        this.scienceScore = scienceScore;\n    }\n    @Override\n    public String toString() {\n        return \"StudentScore{\" +\n                \"studentId=\" + studentId +\n                \", studentName='\" + studentName + '\\'' +\n                \", mathScore=\" + mathScore +\n                \", englishScore=\" + englishScore +\n                \", scienceScore=\" + scienceScore +\n                '}';\n    }\n}\npublic class ScoreProcessor {\n    public StudentScore generateStudentScore(Object[] objectArray) {\n        int studentId = Integer.parseInt(String.valueOf(objectArray[0]));\n        String studentName = String.valueOf(objectArray[1]);\n        int mathScore = Integer.parseInt(String.valueOf(objectArray[2]));\n        int englishScore = Integer.parseInt(String.valueOf(objectArray[3]));\n        int scienceScore = Integer.parseInt(String.valueOf(objectArray[4]));\n        return new StudentScore(studentId, studentName, mathScore, englishScore, scienceScore);\n    }\n    public static void main(String[] args) {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {1, \"张三\", \"90\", \"85\", \"88\"};\n        StudentScore score = processor.generateStudentScore(data);\n        System.out.println(score);\n    }\n}", "content": "Please write a Java program to handle student grade information. Given an array of objects, each object represents different grade information of a student, including student ID, name, math grade, English grade, science grade, etc. You need to encapsulate this information into a student grade object and return this object. Please ensure that your code can handle different data types; for example, the math grade may be given in string form and needs to be converted to an integer.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass StudentScore {\n    private int studentId;\n    private String studentName;\n    private int mathScore;\n    private int englishScore;\n    private int scienceScore;\n    public StudentScore(int studentId, String studentName, int mathScore, int englishScore, int scienceScore) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class ScoreProcessor {\n    public StudentScore generateStudentScore(Object[] objectArray) {\n    }\n}\n```", "id": 1574, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ScoreProcessorTest {\n    @Test(expected = ArrayIndexOutOfBoundsException.class)\n    public void testGenerateStudentScoreWithEmptyArray() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] emptyArray = {};\n        processor.generateStudentScore(emptyArray);\n    }\n    @Test(expected = NumberFormatException.class)\n    public void testGenerateStudentScoreWithInvalidDataType() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] invalidDataArray = {1, \"张三\", \"NotANumber\", \"85\", \"88\"};\n        processor.generateStudentScore(invalidDataArray);\n    }\n    @Test\n    public void testGenerateStudentScoreWithValidData(){\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {1, \"张三\", \"90\", \"85\", \"88\"};\n        StudentScore expected = new StudentScore(1, \"张三\", 90, 85, 88);\n        StudentScore actual = processor.generateStudentScore(data);\n        assertEquals(expected.toString(), actual.toString());\n    }\n    @Test\n    public void testGenerateStudentScoreWithNegativeScores() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {2, \"李四\", \"-10\", \"85\", \"88\"};\n        StudentScore expected = new StudentScore(2, \"李四\", -10, 85, 88);\n        StudentScore actual = processor.generateStudentScore(data);\n        assertEquals(expected.toString(), actual.toString());\n    }\n    @Test\n    public void testGenerateStudentScoreWithEmptyName() {\n        ScoreProcessor processor = new ScoreProcessor();\n        Object[] data = {3, \"\", \"50\", \"75\", \"90\"};\n        StudentScore expected = new StudentScore(3, \"\", 50, 75, 90);\n        StudentScore actual = processor.generateStudentScore(data);\n        assertEquals(expected.toString(), actual.toString());\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public double divide(double a, double b) {\n        if (b == 0) {\n            System.out.println(\"错误：除数不能为0。\");\n            return 0;\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入两个数字和一个操作符（+、-、*、/），例如：3 + 4\");\n        double num1 = scanner.nextDouble();\n        String operator = scanner.next();\n        double num2 = scanner.nextDouble();\n        switch (operator) {\n            case \"+\":\n                System.out.println(\"结果是：\" + calculator.add(num1, num2));\n                break;\n            case \"-\":\n                System.out.println(\"结果是：\" + calculator.subtract(num1, num2));\n                break;\n            case \"*\":\n                System.out.println(\"结果是：\" + calculator.multiply(num1, num2));\n                break;\n            case \"/\":\n                System.out.println(\"结果是：\" + calculator.divide(num1, num2));\n                break;\n            default:\n                System.out.println(\"未知的操作符：\" + operator);\n                break;\n        }\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This class should be able to perform basic arithmetic operations: addition, subtraction, multiplication, and division. Ensure that your implementation can handle division by zero and, in such cases, print a friendly error message instead of crashing the program. Ensure that your code is easy to understand, with reasonable variable naming, and includes necessary comments.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n    }\n    public double subtract(double a, double b) {\n    }\n    public double multiply(double a, double b) {\n    }\n    public double divide(double a, double b) {\n    }\n}\n```", "id": 1575, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    private SimpleCalculator calculator;\n    @BeforeEach\n    public void setUp() {\n        calculator = new SimpleCalculator();\n    }\n    @Test\n    public void testAdd() {\n        double result = calculator.add(2, 3);\n        assertEquals(5, result, 0.001);\n    }\n    @Test\n    public void testSubtract() {\n        double result = calculator.subtract(5, 3);\n        assertEquals(2, result, 0.001);\n    }\n    @Test\n    public void testMultiply() {\n        double result = calculator.multiply(4, 3);\n        assertEquals(12, result, 0.001);\n    }\n    @Test\n    public void testDivide() {\n        double result = calculator.divide(6, 3);\n        assertEquals(2, result, 0.001);\n    }\n    @Test\n    public void testDivideByZero() {\n        double result = calculator.divide(6, 0);\n        assertEquals(0, result, 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class HealthAdvice {\n    public static String getHealthAdvice(int age) {\n        if (age < 12) {\n            return \"多喝水\";\n        } else if (age >= 12 && age <= 18) {\n            return \"保持适当的运动\";\n        } else if (age >= 19 && age <= 40) {\n            return \"保持健康饮食\";\n        } else if (age >= 41 && age <= 60) {\n            return \"定期体检\";\n        } else {\n            return \"保持积极的生活态度\";\n        }\n    }\n    public static void checkHealthAdvice() {\n        Map<Integer, String> testCases = new HashMap<>();\n        testCases.put(5, \"多喝水\");\n        testCases.put(15, \"保持适当的运动\");\n        testCases.put(30, \"保持健康饮食\");\n        testCases.put(50, \"定期体检\");\n        testCases.put(70, \"保持积极的生活态度\");\n        boolean isCorrect = true;\n        for (Map.Entry<Integer, String> entry : testCases.entrySet()) {\n            String advice = getHealthAdvice(entry.getKey());\n            if (!advice.equals(entry.getValue())) {\n                isCorrect = false;\n                System.out.println(\"错误: 对于年龄 \" + entry.getKey() + \" 的建议应该是 '\" + entry.getValue() + \"'，但你的方法返回了 '\" + advice + \"'\");\n            }\n        }\n        if (isCorrect) {\n            System.out.println(\"所有测试用例都通过了！\");\n        }\n    }\n    public static void main(String[] args) {\n        checkHealthAdvice();\n    }\n}", "content": "Please write a Java method that returns corresponding health advice based on the user's age. Specific requirements are as follows:\n\n- If the user's age is less than 12 years old, the advice is \"Drink plenty of water\".\n- If the user's age is between 12 and 18 years old (including 12 and 18), the advice is \"Maintain proper exercise\".\n- If the user's age is between 19 and 40 years old (including 19 and 40), the advice is \"Maintain a healthy diet\".\n- If the user's age is between 41 and 60 years old (including 41 and 60), the advice is \"Have regular checkups\".\n- If the user's age is over 60 years old, the advice is \"Stay positive\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class HealthAdvice {\n    public static String getHealthAdvice(int age) {\n    }\n    public static void checkHealthAdvice() {\n    }\n}\n```", "id": 1576, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class HealthAdviceTest {\n    @Test\n    public void testGetHealthAdviceUnder12() {\n        assertEquals(\"多喝水\", HealthAdvice.getHealthAdvice(5));\n    }\n    @Test\n    public void testGetHealthAdviceBetween12And18() {\n        assertEquals(\"保持适当的运动\", HealthAdvice.getHealthAdvice(15));\n    }\n    @Test\n    public void testGetHealthAdviceBetween19And40() {\n        assertEquals(\"保持健康饮食\", HealthAdvice.getHealthAdvice(30));\n    }\n    @Test\n    public void testGetHealthAdviceBetween41And60() {\n        assertEquals(\"定期体检\", HealthAdvice.getHealthAdvice(50));\n    }\n    @Test\n    public void testGetHealthAdviceAbove60() {\n        assertEquals(\"保持积极的生活态度\", HealthAdvice.getHealthAdvice(70));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class DataProcessor {\n    public List<String> processData(List<String> lines) {\n        List<String> result = new ArrayList<>();\n        for (String line : lines) {\n            if (!line.startsWith(\"#\")) {\n                result.add(line.toUpperCase());\n            }\n        }\n        return result;\n    }\n    public boolean checkResult(List<String> input, List<String> expected) {\n        List<String> output = processData(input);\n        return output.equals(expected);\n    }\n    public static void main(String[] args) {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"# This is a comment\", \"Hello, World!\", \"Java Programming\");\n        List<String> expected = List.of(\"HELLO, WORLD!\", \"JAVA PROGRAMMING\");\n        boolean isCorrect = processor.checkResult(input, expected);\n        System.out.println(\"The processData method is \" + (isCorrect ? \"correct\" : \"incorrect\"));\n    }\n}", "content": "Please design a Java program to handle data from a text file and convert it into a specific format output. Specifically, you need to write a class named `DataProcessor` that contains a method named `processData`. This method takes a list of strings as input, with each string representing a line of data from the file. You need to convert each line of data based on the following rules: if a line starts with \"#\", ignore that line; otherwise, convert the line to uppercase and add it to the result list. Finally, the `processData` method returns the list of converted data.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DataProcessor {\n    public List<String> processData(List<String> lines) {\n    }\n    public boolean checkResult(List<String> input, List<String> expected) {\n    }\n}\n```", "id": 1577, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DataProcessorTest {\n    @Test\n    public void testProcessData_withComments() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"# This is a comment\", \"Hello, World!\", \"Java Programming\");\n        List<String> expected = List.of(\"HELLO, WORLD!\", \"JAVA PROGRAMMING\");\n        List<String> result = processor.processData(input);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testProcessData_withoutComments() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"Hello, World!\", \"Java Programming\");\n        List<String> expected = List.of(\"HELLO, WORLD!\", \"JAVA PROGRAMMING\");\n        List<String> result = processor.processData(input);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testProcessData_emptyList() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = new ArrayList<>();\n        List<String> expected = new ArrayList<>();\n        List<String> result = processor.processData(input);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testCheckResult_correct() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"Goodbye, World!\", \"Unit Testing\");\n        List<String> expected = List.of(\"GOODBYE, WORLD!\", \"UNIT TESTING\");\n        boolean result = processor.checkResult(input, expected);\n        assertTrue(result);\n    }\n    @Test\n    public void testCheckResult_incorrect() {\n        DataProcessor processor = new DataProcessor();\n        List<String> input = List.of(\"Goodbye, World!\", \"Unit Testing\");\n        List<String> expected = List.of(\"GOODBYE, WORLD!\");\n        boolean result = processor.checkResult(input, expected);\n        assertFalse(result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class Student {\n    private String name;\n    private int id;\n    public Student(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (!(obj instanceof Student)) return false;\n        Student other = (Student) obj;\n        return Objects.equals(name, other.name) && id == other.id;\n    }\n    public static void main(String[] args) {\n        Student student1 = new Student(\"张三\", 101);\n        Student student2 = new Student(\"张三\", 101);\n        Student student3 = new Student(\"李四\", 102);\n        System.out.println(\"student1 和 student2 是否相等: \" + student1.equals(student2)); \n        System.out.println(\"student1 和 student3 是否相等: \" + student1.equals(student3)); \n    }\n}", "content": "Please design a Java program to compare whether two student objects are equal. The student object includes a name (String type) and a student ID (int type). If both the names and student IDs of the two students are the same, then the two student objects are considered equal. Please implement a method `equals` to complete this comparison.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class Student {\n    private String name;\n    private int id;\n    public Student(String name, int id) {\n    }\n    @Override\n    public boolean equals(Object obj) {\n    }\n}\n```", "id": 1578, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StudentTest {\n    @Test\n    public void testEqualsSameObject() {\n        Student student = new Student(\"张三\", 101);\n        assertTrue(student.equals(student));\n    }\n    @Test\n    public void testEqualsDifferentType() {\n        Student student = new Student(\"张三\", 101);\n        Object obj = new Object();\n        assertFalse(student.equals(obj));\n    }\n    @Test\n    public void testEqualsEqualObjects() {\n        Student student1 = new Student(\"张三\", 101);\n        Student student2 = new Student(\"张三\", 101);\n        assertTrue(student1.equals(student2));\n    }\n    @Test\n    public void testEqualsDifferentObjects() {\n        Student student1 = new Student(\"张三\", 101);\n        Student student3 = new Student(\"李四\", 102);\n        assertFalse(student1.equals(student3));\n    }\n    @Test\n    public void testEqualsNullObject() {\n        Student student1 = new Student(\"张三\", 101);\n        assertFalse(student1.equals(null));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books;\n    public BookManager() {\n        books = new HashMap<>();\n        books.put(\"978-3-16-148410-0\", \"《Java编程思想》\");\n        books.put(\"978-4-16-148410-1\", \"《Effective Java》\");\n        books.put(\"978-5-16-148410-2\", \"《Java并发编程实战》\");\n    }\n    public String searchBookByISBN(String isbn) {\n        return books.getOrDefault(isbn, \"未找到图书\");\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        System.out.println(manager.searchBookByISBN(\"978-3-16-148410-0\")); \n        System.out.println(manager.searchBookByISBN(\"000-0-00-000000-0\")); \n    }\n}", "content": "Please write a Java program to manage the book information in a library. Implement a feature that allows users to search for book details by ISBN number and display the results on the console. Ensure your program can handle situations where no book is found, in which case it should output \"Book not found.\"\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookManager {\n    private Map<String, String> books;\n    public BookManager() {\n    }\n    public String searchBookByISBN(String isbn) {\n    }\n}\n```", "id": 1579, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.*;\nimport org.junit.Before;\nimport org.junit.Test;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @Before\n    public void setUp() throws Exception {\n        bookManager = new BookManager();\n    }\n    @Test\n    public void testSearchBookByExistingISBN() {\n        String result = bookManager.searchBookByISBN(\"978-3-16-148410-0\");\n        assertEquals(\"《Java编程思想》\", result);\n    }\n    @Test\n    public void testSearchBookByNonExistingISBN() {\n        String result = bookManager.searchBookByISBN(\"000-0-00-000000-0\");\n        assertEquals(\"未找到图书\", result);\n    }\n    @Test\n    public void testSearchBookByAnotherExistingISBN() {\n        String result = bookManager.searchBookByISBN(\"978-4-16-148410-1\");\n        assertEquals(\"《Effective Java》\", result);\n    }\n    @Test\n    public void testSearchBookByAnotherExistingISBN2() {\n        String result = bookManager.searchBookByISBN(\"978-5-16-148410-2\");\n        assertEquals(\"《Java并发编程实战》\", result);\n    }\n    @Test\n    public void testSearchBookWithNullISBN() {\n        String result = bookManager.searchBookByISBN(null);\n        assertEquals(\"未找到图书\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class Book {\n    private String author;\n    public Book(String author) {\n        this.author = author;\n    }\n    public String getAuthorName() {\n        return author;\n    }\n    public static void main(String[] args) {\n        check(\"路遥\", new Book(\"路遥\").getAuthorName());\n        check(\"鲁迅\", new Book(\"鲁迅\").getAuthorName());\n    }\n    public static void check(String expected, String actual) {\n        if (Objects.equals(expected, actual)) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "Please write a Java program to implement a function of a simple book management system: getting the current book's author name. In this system, each book has an author. Please define a `Book` class that contains a private member variable `author` (a string representing the author's name), and provide a public method `getAuthorName` to return the name of the book's author.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class Book {\n    private String author;\n    public Book(String author) {\n    }\n    public String getAuthorName() {\n    }\n}\n```", "id": 1580, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class BookTest {\n    @Test\n    public void testAuthorNameIsLuYao() {\n        Book book = new Book(\"路遥\");\n        assertEquals(\"路遥\", book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsLuXun() {\n        Book book = new Book(\"鲁迅\");\n        assertEquals(\"鲁迅\", book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsNull() {\n        Book book = new Book(null);\n        assertEquals(null, book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsEmpty() {\n        Book book = new Book(\"\");\n        assertEquals(\"\", book.getAuthorName());\n    }\n    @Test\n    public void testAuthorNameIsDifferent() {\n        Book book = new Book(\"韩寒\");\n        assertEquals(\"韩寒\", book.getAuthorName());\n    }\n}"}}
{"canonical_solution": "import java.io.*;\nclass Employee implements Serializable {\n    private String name;\n    private int id;\n    public Employee(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"name='\" + name + '\\'' +\n                \", id=\" + id +\n                '}';\n    }\n}\npublic class EmployeeSerializationDemo {\n    public static void serializeEmployee(Employee emp, String filePath) {\n        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filePath))) {\n            out.writeObject(emp);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static Employee deserializeEmployee(String filePath) {\n        Employee emp = null;\n        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(filePath))) {\n            emp = (Employee) in.readObject();\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return emp;\n    }\n    public static void main(String[] args) {\n        String filePath = \"employee.ser\";\n        Employee emp = new Employee(\"张三\", 12345);\n        serializeEmployee(emp, filePath);\n        System.out.println(\"Employee对象序列化成功\");\n        Employee deserializedEmp = deserializeEmployee(filePath);\n        System.out.println(\"反序列化的Employee对象: \" + deserializedEmp);\n    }\n}", "content": "Please write a Java program to serialize an `Employee` object to a file, and then deserialize the object from the file. Ensure that your program can handle potential exceptions and properly close all resources after the operation. You need to define an `Employee` class, which should contain at least two properties: `name` and `id`, and this class must implement the `Serializable` interface. Provide a `serializeEmployee` method for object serialization and a `deserializeEmployee` method for object deserialization.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.*;\nclass Employee implements Serializable {\n    private String name;\n    private int id;\n    public Employee(String name, int id) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class EmployeeSerializationDemo {\n    public static void serializeEmployee(Employee emp, String filePath) {\n    }\n    public static Employee deserializeEmployee(String filePath) {\n    }\n}\n```", "id": 1581, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.*;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.io.*;\nclass EmployeeTest {\n    private final String filePath = \"employee_test.ser\";\n    private Employee emp;\n    @Before\n    public void setUp() {\n        emp = new Employee(\"张三\", 12345);\n    }\n    @After\n    public void tearDown() {\n        new File(filePath).delete();\n    }\n    @Test\n    public void testSerializeEmployeeNotNull() {\n        EmployeeSerializationDemo.serializeEmployee(emp, filePath);\n        assertNotNull(new File(filePath).exists());\n    }\n    @Test\n    public void testDeserializeEmployee() {\n        EmployeeSerializationDemo.serializeEmployee(emp, filePath);\n        Employee deserializedEmp = EmployeeSerializationDemo.deserializeEmployee(filePath);\n        assertEquals(emp.toString(), deserializedEmp.toString());\n    }\n    @Test\n    public void testDeserializeEmployeeFileNotFound() {\n        Employee deserializedEmp = EmployeeSerializationDemo.deserializeEmployee(\"non_existent_file.ser\");\n        assertNull(deserializedEmp);\n    }\n    @Test\n    public void testSerializeEmployeeIOException() {\n        String invalidPath = \"\";\n        EmployeeSerializationDemo.serializeEmployee(emp, invalidPath);\n        assertFalse(new File(invalidPath).exists());\n    }\n    @Test\n    public void testDeserializeEmployeeClassNotFound() {\n        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filePath))) {\n            out.writeObject(\"String object\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Employee deserializedEmp = EmployeeSerializationDemo.deserializeEmployee(filePath);\n        assertNull(deserializedEmp);\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\nimport java.awt.image.BufferedImage;\npublic class ColorInverter {\n    public static BufferedImage invertColors(BufferedImage originalImage) {\n        int width = originalImage.getWidth();\n        int height = originalImage.getHeight();\n        BufferedImage invertedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for (int y = 0; y < height; y++) {\n            for (int x = 0; x < width; x++) {\n                Color originalColor = new Color(originalImage.getRGB(x, y));\n                int red = 255 - originalColor.getRed();\n                int green = 255 - originalColor.getGreen();\n                int blue = 255 - originalColor.getBlue();\n                Color invertedColor = new Color(red, green, blue);\n                invertedImage.setRGB(x, y, invertedColor.getRGB());\n            }\n        }\n        return invertedImage;\n    }\n    public static void checkFunction() {\n        System.out.println(\"检查逻辑需要根据实际情况实现\");\n    }\n    public static void main(String[] args) {\n        BufferedImage originalImage = null; \n        BufferedImage resultImage = invertColors(originalImage);\n    }\n}", "content": "Please modify the Java program to invert the colors of an image. Given an image (assumed to be an instance of the `MyPicture` class), invert the RGB values of each pixel in the image. The new RGB value should be calculated as `255 - original RGB value`. Ensure that the processed image has RGB values within the range of 0 to 255. Implement a method named `invertColors` that takes a `MyPicture` object as input and returns a new `MyPicture` object representing the processed image.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\npublic class ColorInverter {\n    public static BufferedImage invertColors(BufferedImage originalImage) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1582, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class ColorInverterTest {\n    private BufferedImage originalImage;\n    @BeforeEach\n    public void setUp() {\n        originalImage = new BufferedImage(2, 2, BufferedImage.TYPE_INT_RGB);\n        originalImage.setRGB(0, 0, new Color(100, 150, 200).getRGB());\n        originalImage.setRGB(0, 1, new Color(50, 50, 50).getRGB());\n        originalImage.setRGB(1, 0, new Color(0, 0, 0).getRGB());\n        originalImage.setRGB(1, 1, new Color(255, 255, 255).getRGB());\n    }\n    @Test\n    public void testInvertColors_NotNull() {\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertNotNull(invertedImage);\n    }\n    @Test\n    public void testInvertColors_Dimensions() {\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertEquals(originalImage.getWidth(), invertedImage.getWidth());\n        assertEquals(originalImage.getHeight(), invertedImage.getHeight());\n    }\n    @Test\n    public void testInvertColors_CorrectInversion() {\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        Color originalColor0_0 = new Color(originalImage.getRGB(0, 0));\n        Color invertedColor0_0 = new Color(invertedImage.getRGB(0, 0));\n        assertEquals(255 - originalColor0_0.getRed(), invertedColor0_0.getRed());\n        assertEquals(255 - originalColor0_0.getGreen(), invertedColor0_0.getGreen());\n        assertEquals(255 - originalColor0_0.getBlue(), invertedColor0_0.getBlue());\n        Color originalColor1_1 = new Color(originalImage.getRGB(1, 1));\n        Color invertedColor1_1 = new Color(invertedImage.getRGB(1, 1));\n        assertEquals(255 - originalColor1_1.getRed(), invertedColor1_1.getRed());\n        assertEquals(255 - originalColor1_1.getGreen(), invertedColor1_1.getGreen());\n        assertEquals(255 - originalColor1_1.getBlue(), invertedColor1_1.getBlue());\n    }\n    @Test\n    public void testInvertColors_BlackToWhite() {\n        originalImage.setRGB(0, 0, Color.BLACK.getRGB());\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertEquals(Color.WHITE.getRGB(), invertedImage.getRGB(0, 0));\n    }\n    @Test\n    public void testInvertColors_WhiteToBlack() {\n        originalImage.setRGB(0, 0, Color.WHITE.getRGB());\n        BufferedImage invertedImage = ColorInverter.invertColors(originalImage);\n        assertEquals(Color.BLACK.getRGB(), invertedImage.getRGB(0, 0));\n    }\n}"}}
{"canonical_solution": "import java.util.OptionalDouble;\npublic double retrieveGlobalStatistic(String statisticName, double fallbackValue) {\n    OptionalDouble result = GlobalStatsDatabase.queryStatistic(statisticName);\n    return result.orElse(fallbackValue);\n}\nclass GlobalStatsDatabase {\n    public static OptionalDouble queryStatistic(String name) {\n        if (\"playerCount\".equals(name)) {\n            return OptionalDouble.of(1000000.0);\n        } else if (\"averageScore\".equals(name)) {\n            return OptionalDouble.of(350.5);\n        }\n        return OptionalDouble.empty();\n    }\n}\npublic static void main(String[] args) {\n    double playerCount = retrieveGlobalStatistic(\"playerCount\", 0.0);\n    double averageScore = retrieveGlobalStatistic(\"averageScore\", 0.0);\n    double nonExistingStat = retrieveGlobalStatistic(\"nonExistingStat\", 10.0);\n    System.out.println(\"Player Count: \" + playerCount); \n    System.out.println(\"Average Score: \" + averageScore); \n    System.out.println(\"Non-existing Stat: \" + nonExistingStat); \n}", "content": "Please write a Java method that retrieves the value of a specified statistic from a simulated global statistics database. If the statistic exists, return its value; if it does not, return a default value. Please implement the method according to the following requirements:\n\n- The method name should be `retrieveGlobalStatistic`.\n- It accepts two parameters: a `String` named `statisticName` which represents the name of the statistic, and a `double` named `fallbackValue` which represents the default value.\n- Assume there is an external library providing a class named `GlobalStatsDatabase`, which has a static method `queryStatistic` that accepts a `String` parameter and returns an `OptionalDouble` result.\n- If the `OptionalDouble` returned by `queryStatistic` has a value, return that value; otherwise, return `fallbackValue`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.OptionalDouble;\npublic double retrieveGlobalStatistic(String statisticName, double fallbackValue) {\n}\nclass GlobalStatsDatabase {\n    public static OptionalDouble queryStatistic(String name) {\n    }\n}\n```", "id": 1583, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.OptionalDouble;\nclass GlobalStatsDatabaseTest {\n    public double retrieveGlobalStatistic(String statisticName, double fallbackValue) {\n        OptionalDouble result = GlobalStatsDatabase.queryStatistic(statisticName);\n        return result.orElse(fallbackValue);\n    }\n    static class GlobalStatsDatabase {\n        public static OptionalDouble queryStatistic(String name) {\n            if (\"playerCount\".equals(name)) {\n                return OptionalDouble.of(1000000.0);\n            } else if (\"averageScore\".equals(name)) {\n                return OptionalDouble.of(350.5);\n            }\n            return OptionalDouble.empty();\n        }\n    }\n    @Test\n    void testPlayerCount() {\n        double result = retrieveGlobalStatistic(\"playerCount\", 0.0);\n        assertEquals(1000000.0, result);\n    }\n    @Test\n    void testAverageScore() {\n        double result = retrieveGlobalStatistic(\"averageScore\", 0.0);\n        assertEquals(350.5, result);\n    }\n    @Test\n    void testNonExistingStat() {\n        double result = retrieveGlobalStatistic(\"nonExistingStat\", 10.0);\n        assertEquals(10.0, result);\n    }\n    @Test\n    void testFallbackValueForNonExistingStat() {\n        double result = retrieveGlobalStatistic(\"someRandomStat\", 5.5);\n        assertEquals(5.5, result);\n    }\n    @Test\n    void testFallbackValueForEmptyStringStat() {\n        double result = retrieveGlobalStatistic(\"\", 1.1);\n        assertEquals(1.1, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nclass Book {\n    String title;\n    String author;\n    String isbn;\n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n}\npublic class BookManager {\n    static HashMap<String, Book> libraryBooks = new HashMap<>();\n    static {\n        libraryBooks.put(\"123456789\", new Book(\"Java Programming\", \"John Doe\", \"123456789\"));\n        libraryBooks.put(\"987654321\", new Book(\"Python Programming\", \"Jane Doe\", \"987654321\"));\n    }\n    public static boolean isBookAvailable(String isbn) {\n        return libraryBooks.containsKey(isbn);\n    }\n    public static void checkAvailability(String[] isbns) {\n        for (String isbn : isbns) {\n            System.out.println(\"ISBN \" + isbn + \": \" + (isBookAvailable(isbn) ? \"Available\" : \"Not Available\"));\n        }\n    }\n    public static void main(String[] args) {\n        String[] testIsbns = {\"123456789\", \"987654321\", \"111111111\"};\n        checkAvailability(testIsbns);\n    }\n}", "content": "Please write a Java program to manage the book information in a library. The specific requirements are as follows:\n\n- A `Book` class is required, containing the book title (`title`), author (`author`), and ISBN number (`isbn`).\n- In the `BookManager` class, implement a method `isBookAvailable` that accepts an ISBN number as a parameter and returns a boolean value indicating whether the book is available in the library.\n- To simplify the problem, assume that the book information of the library is stored in a static `HashMap`, with the key being the ISBN number and the value being the `Book` object.\n- Provide a `checkAvailability` method to verify the correctness of the `isBookAvailable` method. This method should be able to check several ISBN numbers and print whether each ISBN number corresponds to an available book.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nclass Book {\n    String title;\n    String author;\n    String isbn;\n    public Book(String title, String author, String isbn) {\n    }\n}\npublic class BookManager {\n    static HashMap<String, Book> libraryBooks = new HashMap<>();\n    static {\n    }\n    public static boolean isBookAvailable(String isbn) {\n    }\n    public static void checkAvailability(String[] isbns) {\n    }\n}\n```", "id": 1584, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    @Test\n    public void testIsBookAvailableAvailable() {\n        assertTrue(BookManager.isBookAvailable(\"123456789\"));\n    }\n    @Test\n    public void testIsBookAvailableNotAvailable() {\n        assertFalse(BookManager.isBookAvailable(\"111111111\"));\n    }\n    @Test\n    public void testIsBookAvailableAnotherBook() {\n        assertTrue(BookManager.isBookAvailable(\"987654321\"));\n    }\n    @Test\n    public void testCheckAvailabilityWithOnlyAvailableBooks() {\n        String[] isbns = {\"123456789\", \"987654321\"};\n        BookManager.checkAvailability(isbns);\n    }\n    @Test\n    public void testCheckAvailabilityWithMixedBooks() {\n        String[] isbns = {\"123456789\", \"987654321\", \"111111111\"};\n        BookManager.checkAvailability(isbns);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class ShoppingCart {\n    private Map<String, Integer> cart;\n    public ShoppingCart() {\n        cart = new HashMap<>();\n    }\n    public void addProduct(String productId, int quantity) {\n        cart.merge(productId, quantity, Integer::sum);\n    }\n    public void removeProduct(String productId) throws Exception {\n        if (!cart.containsKey(productId)) {\n            throw new Exception(\"Product not found in the cart.\");\n        }\n        cart.remove(productId);\n    }\n    public boolean checkProductExists(String productId) {\n        return cart.containsKey(productId);\n    }\n    public static void main(String[] args) {\n        ShoppingCart cart = new ShoppingCart();\n        try {\n            cart.addProduct(\"apple\", 2);\n            cart.addProduct(\"banana\", 3);\n            cart.addProduct(\"apple\", 1); \n            System.out.println(cart.checkProductExists(\"apple\")); \n            cart.removeProduct(\"banana\");\n            System.out.println(cart.checkProductExists(\"banana\")); \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "Please design the functionality for a simple shopping cart in Java. In this shopping cart, users should be able to add items to the cart, as well as remove items from the cart. Each item has a unique identifier. If the user attempts to add an item that already exists in the cart, the program should update the quantity of that item instead of adding it again. Similarly, if the user attempts to remove an item that does not exist in the cart, the program should alert the user. Design the logic to handle these scenarios, and ensure there is a way to check if a specific item exists in the cart.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ShoppingCart {\n    private Map<String, Integer> cart;\n    public ShoppingCart() {\n    }\n    public void addProduct(String productId, int quantity) {\n    }\n    public void removeProduct(String productId) throws Exception {\n    }\n    public boolean checkProductExists(String productId) {\n        return false;\n    }\n}\n```", "id": 1585, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ShoppingCartTest {\n    private ShoppingCart cart;\n    @Before\n    public void setUp() {\n        cart = new ShoppingCart();\n    }\n    @Test\n    public void testAddProduct() {\n        cart.addProduct(\"apple\", 2);\n        assertTrue(cart.checkProductExists(\"apple\"));\n    }\n    @Test\n    public void testAddMultipleProducts() {\n        cart.addProduct(\"apple\", 2);\n        cart.addProduct(\"banana\", 3);\n        assertTrue(cart.checkProductExists(\"apple\"));\n        assertTrue(cart.checkProductExists(\"banana\"));\n    }\n    @Test\n    public void testRemoveProduct() throws Exception {\n        cart.addProduct(\"apple\", 2);\n        cart.removeProduct(\"apple\");\n        assertFalse(cart.checkProductExists(\"apple\"));\n    }\n    @Test(expected = Exception.class)\n    public void testRemoveProductNotFound() throws Exception {\n        cart.removeProduct(\"orange\");\n    }\n    @Test\n    public void testCheckProductExists() {\n        cart.addProduct(\"banana\", 3);\n        assertTrue(cart.checkProductExists(\"banana\"));\n        assertFalse(cart.checkProductExists(\"apple\"));\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\npublic class ProductTagValidator {\n    private List<String> productTags;\n    public ProductTagValidator(String... tags) {\n        this.productTags = new ArrayList<>(Arrays.asList(tags));\n    }\n    public void validateTagsDoNotContain(String... tagsToCheck) throws IllegalArgumentException {\n        if (tagsToCheck == null) {\n            throw new IllegalArgumentException(\"标签数组不能为null\");\n        }\n        for (String tag : tagsToCheck) {\n            if (productTags.contains(tag)) {\n                throw new IllegalArgumentException(\"商品的标签列表不应包含标签: \" + tag);\n            }\n        }\n    }\n    public static void main(String[] args) {\n        ProductTagValidator validator = new ProductTagValidator(\"电子\", \"书籍\", \"家具\");\n        try {\n            validator.validateTagsDoNotContain(\"电子\", \"食品\");\n            System.out.println(\"验证通过，商品标签列表不包含指定的标签。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please design a Java method that verifies whether a list of tags in a product object does not contain a specified set of tags. If the product's tag list contains any of these specified tags, the method should throw an exception.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\npublic class ProductTagValidator {\n    private List<String> productTags;\n    public ProductTagValidator(String... tags) {\n    }\n    public void validateTagsDoNotContain(String... tagsToCheck) throws IllegalArgumentException {\n    }\n}\n```", "id": 1586, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Before;\nimport static org.junit.Assert.*;\nimport java.util.IllegalFormatException;\npublic class ProductTagValidatorTest {\n    private ProductTagValidator validator;\n    @Before\n    public void setUp() {\n        validator = new ProductTagValidator(\"电子\", \"书籍\", \"家具\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testTagsDoNotContain_throwsException_whenTagIsContained() {\n        validator.validateTagsDoNotContain(\"电子\", \"食品\");\n    }\n    @Test\n    public void testTagsDoNotContain_noException_whenTagsAreNotContained() {\n        validator.validateTagsDoNotContain(\"食品\", \"玩具\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testTagsDoNotContain_throwsException_whenOneTagIsContained() {\n        validator.validateTagsDoNotContain(\"书籍\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testTagsDoNotContain_throwsException_whenTagsToCheckIsNull() {\n        validator.validateTagsDoNotContain((String[]) null);\n    }\n    @Test\n    public void testTagsDoNotContain_noException_whenEmptyTagsToCheck() {\n        validator.validateTagsDoNotContain();\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileToStringConverter {\n    public static String fileContentToString(String filePath) throws IOException {\n        StringBuilder contentBuilder = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            String currentLine;\n            while ((currentLine = br.readLine()) != null) {\n                contentBuilder.append(currentLine).append(\"\\n\");\n            }\n        }\n        return contentBuilder.toString();\n    }\n    public static void main(String[] args) {\n        try {\n            String filePath = \"example.txt\"; \n            String content = fileContentToString(filePath);\n            System.out.println(content);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "Please write a Java method that can convert the content of a text file into a string. Ensure your method can handle large files and consider performance optimization when reading the file. Additionally, if the file does not exist or cannot be read, your method should throw an appropriate exception. Please follow the guidelines below to implement your solution:\n\n- Use the necessary Java packages.\n- Ensure the code snippet is entirely standalone and clear.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileToStringConverter {\n    public static String fileContentToString(String filePath) throws IOException {\n    }\n}\n```", "id": 1587, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\npublic class FileToStringConverterTest {\n    @Test\n    public void testFileContentToString_validFile() throws IOException {\n        Path tempFile = Files.createTempFile(\"testFile\", \".txt\");\n        Files.write(tempFile, \"line1\\nline2\\nline3\".getBytes());\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"line1\\nline2\\nline3\\n\", result);\n        Files.delete(tempFile);\n    }\n    @Test\n    public void testFileContentToString_emptyFile() throws IOException {\n        Path tempFile = Files.createTempFile(\"emptyFile\", \".txt\");\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"\", result);\n        Files.delete(tempFile);\n    }\n    @Test\n    public void testFileContentToString_invalidFile() {\n        assertThrows(IOException.class, () -> {\n            FileToStringConverter.fileContentToString(\"non_existent_file.txt\");\n        });\n    }\n    @Test\n    public void testFileContentToString_singleLineFile() throws IOException {\n        Path tempFile = Files.createTempFile(\"singleLineFile\", \".txt\");\n        Files.write(tempFile, \"singleLine\".getBytes());\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"singleLine\\n\", result);\n        Files.delete(tempFile);\n    }\n    @Test\n    public void testFileContentToString_fileWithNewLines() throws IOException {\n        Path tempFile = Files.createTempFile(\"newLineFile\", \".txt\");\n        Files.write(tempFile, \"line1\\n\\nline2\\n\".getBytes());\n        String result = FileToStringConverter.fileContentToString(tempFile.toString());\n        assertEquals(\"line1\\n\\nline2\\n\", result);\n        Files.delete(tempFile);\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\nclass Book {\n    private String name;\n    private String author;\n    public void setBookInfo(String name, String author) {\n        this.name = name;\n        this.author = author;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getAuthor() {\n        return author;\n    }\n}\npublic class BookManager {\n    public void testSetBookInfo() {\n        System.out.println(\"测试设置图书信息\");\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", \"Bruce Eckel\");\n        System.out.println(\"书名: \" + book.getName() + \", 作者: \" + book.getAuthor());\n    }\n    public static void main(String[] args) {\n        new BookManager().testSetBookInfo();\n    }\n}", "content": "Please design a Java program to manage book information. The specific requirements are as follows:\n\n- There needs to be a `Book` class that includes two attributes: the book name (`name`) and the author (`author`).\n- In the `Book` class, implement a method `setBookInfo` that takes two string parameters to set the book name and author.\n- Additionally, there should be a `BookManager` class containing a method `testSetBookInfo` to test whether the `setBookInfo` method in the `Book` class can correctly set the book name and author.\n- The `testSetBookInfo` method should print out the set book name and author to verify whether the setting was successful.\n- Ensure all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.System;\nclass Book {\n    private String name;\n    private String author;\n    public void setBookInfo(String name, String author) {\n    }\n    public String getName() {\n        return null;\n    }\n    public String getAuthor() {\n        return null;\n    }\n}\npublic class BookManager {\n}\n```", "id": 1588, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\nclass BookTest {\n    @Test\n    void testSetBookInfoAndGetters() {\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithEmptyName() {\n        Book book = new Book();\n        book.setBookInfo(\"\", \"Bruce Eckel\");\n        assertEquals(\"\", book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithEmptyAuthor() {\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", \"\");\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(\"\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithNullName() {\n        Book book = new Book();\n        book.setBookInfo(null, \"Bruce Eckel\");\n        assertEquals(null, book.getName());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n    }\n    @Test\n    void testSetBookInfoWithNullAuthor() {\n        Book book = new Book();\n        book.setBookInfo(\"Java编程思想\", null);\n        assertEquals(\"Java编程思想\", book.getName());\n        assertEquals(null, book.getAuthor());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class ArrayAverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n        if (numbers == null || numbers.length == 0) {\n            return 0;\n        }\n        return Arrays.stream(numbers).average().orElse(0);\n    }\n    public static void check() {\n        int[] testData1 = {1, 2, 3, 4, 5};\n        int[] testData2 = {};\n        int[] testData3 = {10, 20, 30, 40, 50};\n        System.out.println(\"平均值 (应为3): \" + calculateAverage(testData1));\n        System.out.println(\"平均值 (应为0): \" + calculateAverage(testData2));\n        System.out.println(\"平均值 (应为30): \" + calculateAverage(testData3));\n    }\n    public static void main(String[] args) {\n        check(); \n    }\n}", "content": "Please write a Java method to compute and return the average of all elements in an array. The method should accept an integer array as a parameter and return the calculated average. If the array is empty, it should return 0.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class ArrayAverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1589, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Test;\npublic class ArrayAverageCalculatorTest {\n    @Test\n    public void testCalculateAverageWithPositiveNumbers() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        double expected = 3.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithEmptyArray() {\n        int[] numbers = {};\n        double expected = 0.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithNullArray() {\n        int[] numbers = null;\n        double expected = 0.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithAnotherSetOfPositiveNumbers() {\n        int[] numbers = {10, 20, 30, 40, 50};\n        double expected = 30.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n    @Test\n    public void testCalculateAverageWithSingleElement() {\n        int[] numbers = {7};\n        double expected = 7.0;\n        double actual = ArrayAverageCalculator.calculateAverage(numbers);\n        Assert.assertEquals(expected, actual, 0.0001);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n    }\n    private List<Book> books;\n    public BookManager() {\n        this.books = new ArrayList<>();\n    }\n    public void addBook(String title, String author) {\n        books.add(new Book(title, author));\n    }\n    public String findAuthorByTitle(String title) {\n        for (Book book : books) {\n            if (book.title.equals(title)) {\n                return book.author;\n            }\n        }\n        return \"书籍不存在\";\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        manager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        System.out.println(manager.findAuthorByTitle(\"Java编程思想\")); \n        System.out.println(manager.findAuthorByTitle(\"未知书籍\")); \n    }\n}", "content": "Please write a Java program to manage book information in a library. The specific requirements are as follows:\n\n- There needs to be a method to add book information to a list. Each book's information includes the book title and author name.\n- Another method is required to search by book title and return the author's name. If the book does not exist, it should return a specific message, such as \"Book not found.\"\n\nEnsure that your code is completely self-contained and that all packages used are imported at the beginning of the code snippet.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n        }\n    }\n    private List<Book> books;\n    public BookManager() {\n    }\n    public void addBook(String title, String author) {\n    }\n    public String findAuthorByTitle(String title) {\n    }\n}\n```", "id": 1590, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BookManagerTest {\n    private BookManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new BookManager();\n    }\n    @Test\n    public void testAddBook() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"Bruce Eckel\", manager.findAuthorByTitle(\"Java编程思想\"));\n    }\n    @Test\n    public void testFindAuthorByTitle_ExistingBook() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String author = manager.findAuthorByTitle(\"Java编程思想\");\n        assertEquals(\"Bruce Eckel\", author);\n    }\n    @Test\n    public void testFindAuthorByTitle_NonExistingBook() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String author = manager.findAuthorByTitle(\"未知书籍\");\n        assertEquals(\"书籍不存在\", author);\n    }\n    @Test\n    public void testAddMultipleBooks() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        manager.addBook(\"Effective Java\", \"Joshua Bloch\");\n        assertEquals(\"Joshua Bloch\", manager.findAuthorByTitle(\"Effective Java\"));\n    }\n    @Test\n    public void testFindAuthorByTitle_CaseSensitive() {\n        manager.addBook(\"Java编程思想\", \"Bruce Eckel\");\n        String author = manager.findAuthorByTitle(\"java编程思想\");\n        assertEquals(\"书籍不存在\", author);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<Book> books = new ArrayList<>();\n    public String addBook(String title, String author, String isbn, int year) {\n        Book newBook = new Book(title, author, isbn, year);\n        books.add(newBook);\n        return \"Book added successfully!\";\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Java Programming\", \"John Doe\", \"123456789\", 2020);\n        System.out.println(result); \n    }\n    private static class Book {\n        String title;\n        String author;\n        String isbn;\n        int year;\n        public Book(String title, String author, String isbn, int year) {\n            this.title = title;\n            this.author = author;\n            this.isbn = isbn;\n            this.year = year;\n        }\n    }\n}", "content": "Please write a Java method for adding new book information in a simple book management system. The method should take the book's title, author, ISBN number, and publication year as parameters and save this information in the system. Ensure that your code handles the basic logic of adding a book and can return a message indicating that the book has been successfully added.\n\nPlease follow these guidelines to complete this task:\n\n- The problem description should be as concise and fluent as possible.\n- The code snippet should be entirely self-contained and clear.\n- The code must import all used packages at the beginning.\n- Try to make the code snippet different from the given code snippet (including class names, function names, docstrings, and variable names).\n- The problem and solution should be written in Chinese (the code implementation must not use Chinese, code comments should be in English).\nPlease implement complete code in Java that does not include the Main function, and follow the type definitions below:", "id": 1591, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManagerTest {\n    @Test\n    public void testAddBook_ValidDetails_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Effective Java\", \"Joshua Bloch\", \"9780134685991\", 2018);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_TitleIsEmpty_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"\", \"Unknown Author\", \"0000000000\", 2021);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_AuthorNameIsEmpty_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Unknown Title\", \"\", \"0000000000\", 2021);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_EmptyISBN_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Some Book\", \"Some Author\", \"\", 2022);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    @Test\n    public void testAddBook_YearZero_ReturnsSuccessMessage() {\n        BookManager manager = new BookManager();\n        String result = manager.addBook(\"Ancient Book\", \"Ancient Author\", \"1111111111\", 0);\n        assertEquals(\"Book added successfully!\", result);\n    }\n    private static class BookManager {\n        private List<Book> books = new ArrayList<>();\n        public String addBook(String title, String author, String isbn, int year) {\n            Book newBook = new Book(title, author, isbn, year);\n            books.add(newBook);\n            return \"Book added successfully!\";\n        }\n    }\n    private static class Book {\n        String title;\n        String author;\n        String isbn;\n        int year;\n        public Book(String title, String author, String isbn, int year) {\n            this.title = title;\n            this.author = author;\n            this.isbn = isbn;\n            this.year = year;\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private Map<Integer, String> books;\n    public BookFinder() {\n        books = new HashMap<>();\n        books.put(1, \"Java编程思想\");\n        books.put(2, \"Effective Java\");\n        books.put(3, \"深入理解Java虚拟机\");\n    }\n    public String findBookNameById(int bookId) {\n        return books.getOrDefault(bookId, \"未找到\");\n    }\n    public static void main(String[] args) {\n        BookFinder finder = new BookFinder();\n        check(finder.findBookNameById(1), \"Java编程思想\");\n        check(finder.findBookNameById(4), \"未找到\");\n    }\n    private static void check(String actual, String expected) {\n        if (actual.equals(expected)) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "Please describe how a Java program could implement a simple book management system's book search function. In this system, each book has a unique ID and a title. You need to explain the method that searches for the title of a book by its ID. If a book with the corresponding ID is found, indicate how the title can be returned; if not found, specify a way to indicate it was not found. Describe how the program could be self-contained and include all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private Map<Integer, String> books;\n    public BookFinder() {\n    }\n    public String findBookNameById(int bookId) {\n    }\n}\n```", "id": 1592, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class BookFinderTest {\n    @Test\n    public void testFindBookNameById_bookExists() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"Java编程思想\", finder.findBookNameById(1));\n    }\n    @Test\n    public void testFindBookNameById_bookExists2() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"Effective Java\", finder.findBookNameById(2));\n    }\n    @Test\n    public void testFindBookNameById_bookExists3() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"深入理解Java虚拟机\", finder.findBookNameById(3));\n    }\n    @Test\n    public void testFindBookNameById_bookNotExists() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"未找到\", finder.findBookNameById(4));\n    }\n    @Test\n    public void testFindBookNameById_bookNotExistsNegative() {\n        BookFinder finder = new BookFinder();\n        Assertions.assertEquals(\"未找到\", finder.findBookNameById(-1));\n    }\n}"}}
{"canonical_solution": "import java.util.logging.Logger;\npublic class DatabaseErrorChecker {\n    private static final Logger logger = Logger.getLogger(DatabaseErrorChecker.class.getName());\n    public static void checkDbError(String operation, int errorCode) {\n        if (errorCode != 0) {\n            String errorMessage = operation + \": DbError \" + errorCode;\n            logger.severe(errorMessage);\n            throw new DatabaseOperationException(errorMessage);\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            checkDbError(\"UpdateUser\", 1001);\n        } catch (DatabaseOperationException e) {\n            System.out.println(\"Caught exception: \" + e.getMessage());\n        }\n    }\n}\nclass DatabaseOperationException extends RuntimeException {\n    public DatabaseOperationException(String message) {\n        super(message);\n    }\n}", "content": "Please write a Java method to check for errors in database operations and log the error information. If an error is found, the method should throw an exception containing the operation name and specific error code. Ensure your method is self-contained and imports the necessary packages.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.logging.Logger;\npublic class DatabaseErrorChecker {\n    private static final Logger logger = Logger.getLogger(DatabaseErrorChecker.class.getName());\n    public static void checkDbError(String operation, int errorCode) {\n    }\n}\nclass DatabaseOperationException extends RuntimeException {\n    public DatabaseOperationException(String message) {\n    }\n}\n```", "id": 1593, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class DatabaseErrorCheckerTest {\n    @Test\n    public void testCheckDbErrorWithNoError() {\n        assertDoesNotThrow(() -> DatabaseErrorChecker.checkDbError(\"SelectUser\", 0));\n    }\n    @Test\n    public void testCheckDbErrorWithError() {\n        DatabaseOperationException exception = assertThrows(DatabaseOperationException.class, () -> {\n            DatabaseErrorChecker.checkDbError(\"UpdateUser\", 1001);\n        });\n        assertEquals(\"UpdateUser: DbError 1001\", exception.getMessage());\n    }\n    @Test\n    public void testCheckDbErrorAnotherOperationWithError() {\n        DatabaseOperationException exception = assertThrows(DatabaseOperationException.class, () -> {\n            DatabaseErrorChecker.checkDbError(\"DeleteUser\", 1002);\n        });\n        assertEquals(\"DeleteUser: DbError 1002\", exception.getMessage());\n    }\n    @Test\n    public void testCheckDbErrorWithZeroErrorCode() {\n        assertDoesNotThrow(() -> DatabaseErrorChecker.checkDbError(\"InsertUser\", 0));\n    }\n    @Test\n    public void testCheckDbErrorWithNegativeErrorCode() {\n        DatabaseOperationException exception = assertThrows(DatabaseOperationException.class, () -> {\n            DatabaseErrorChecker.checkDbError(\"FetchUser\", -1);\n        });\n        assertEquals(\"FetchUser: DbError -1\", exception.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class CoordinateMapper {\n    public static long[] map3DPoint(double longitude, double minLongitude, double maxLongitude, \n                                    double latitude, double minLatitude, double maxLatitude, \n                                    double timestamp, double minTimestamp, double maxTimestamp, \n                                    long maxValue) {\n        long x = mapValue(longitude, minLongitude, maxLongitude, maxValue);\n        long y = mapValue(latitude, minLatitude, maxLatitude, maxValue);\n        long z = mapValue(timestamp, minTimestamp, maxTimestamp, maxValue);\n        return new long[]{x, y, z};\n    }\n    private static long mapValue(double value, double minValue, double maxValue, long targetMaxValue) {\n        return Math.round((value - minValue) / (maxValue - minValue) * targetMaxValue);\n    }\n    public static void main(String[] args) {\n        double longitude = 116.4074, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.9042, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1588000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] mappedCoordinates = map3DPoint(longitude, minLongitude, maxLongitude, latitude, minLatitude, maxLatitude, timestamp, minTimestamp, maxTimestamp, maxValue);\n        System.out.println(\"映射后的坐标: \" + Arrays.toString(mappedCoordinates));\n    }\n}", "content": "Please write a Java method to map the coordinates of a 3D point (longitude, latitude, time) into a new 3D coordinate system. The maximum value of each dimension in the new coordinate system is specified by the user. Specifically, you need to map the original 3D point to a new coordinate system where the minimum value is 0, and the maximum value is the user-specified maximum, based on the given minimum and maximum values of the longitude, latitude, and time. Ensure that your method can handle various inputs and returns a long array containing the mapped x, y, z coordinates.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class CoordinateMapper {\n    public static long[] map3DPoint(double longitude, double minLongitude, double maxLongitude, \n                                    double latitude, double minLatitude, double maxLatitude, \n                                    double timestamp, double minTimestamp, double maxTimestamp, \n                                    long maxValue) {\n    }\n    private static long mapValue(double value, double minValue, double maxValue, long targetMaxValue) {\n    }\n}\n```", "id": 1594, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CoordinateMapperTest {\n    @Test\n    public void testMap3DPoint_withinBounds() {\n        double longitude = 116.4074, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.9042, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1588000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{407, 904, 500}, result);\n    }\n    @Test\n    public void testMap3DPoint_edgeValues() {\n        double longitude = 116.0, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 40.0, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1587000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{0, 1000, 0}, result);\n    }\n    @Test\n    public void testMap3DPoint_midRangeValues() {\n        double longitude = 116.5, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.5, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1588000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{500, 500, 500}, result);\n    }\n    @Test\n    public void testMap3DPoint_minValues() {\n        double longitude = 116.0, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 39.0, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1587000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{0, 0, 0}, result);\n    }\n    @Test\n    public void testMap3DPoint_maxValues() {\n        double longitude = 117.0, minLongitude = 116.0, maxLongitude = 117.0;\n        double latitude = 40.0, minLatitude = 39.0, maxLatitude = 40.0;\n        double timestamp = 1589000000, minTimestamp = 1587000000, maxTimestamp = 1589000000;\n        long maxValue = 1000;\n        long[] result = CoordinateMapper.map3DPoint(longitude, minLongitude, maxLongitude, \n                                                     latitude, minLatitude, maxLatitude, \n                                                     timestamp, minTimestamp, maxTimestamp, \n                                                     maxValue);\n        assertArrayEquals(new long[]{1000, 1000, 1000}, result);\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentComparator {\n    public static void compareTextFiles(File file1, File file2) {\n        try (BufferedReader reader1 = new BufferedReader(new FileReader(file1));\n             BufferedReader reader2 = new BufferedReader(new FileReader(file2))) {\n            String line1, line2;\n            boolean areFilesDifferent = false;\n            while ((line1 = reader1.readLine()) != null && (line2 = reader2.readLine()) != null) {\n                if (!line1.trim().equals(line2.trim())) {\n                    areFilesDifferent = true;\n                    break;\n                }\n            }\n            if (line1 != null || reader2.readLine() != null) {\n                areFilesDifferent = true;\n            }\n            if (areFilesDifferent) {\n                System.out.println(\"文件内容不同\");\n            } else {\n                System.out.println(\"文件内容相同\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        File file1 = new File(\"path/to/your/firstFile.txt\");\n        File file2 = new File(\"path/to/your/secondFile.txt\");\n        compareTextFiles(file1, file2);\n    }\n}", "content": "Please write a program to compare the contents of two text files to see if they are exactly the same. If the contents are exactly the same, the program should output \"Files are identical\"; if they are different, it should output \"Files are different\". Make sure your program can handle text files efficiently and ignore trailing whitespace characters when comparing file contents.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentComparator {\n    public static void compareTextFiles(File file1, File file2) {\n    }\n}\n```", "id": 1595, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\npublic class FileContentComparatorTest {\n    @Test\n    public void testCompareTextFiles_SameContent() throws IOException {\n        File file1 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        File file2 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_DifferentContent() throws IOException {\n        File file1 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        File file2 = createTempFile(\"line1\\nline2\\ndifferent line\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_OneFileIsEmpty() throws IOException {\n        File file1 = createTempFile(\"\");\n        File file2 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_BothFilesEmpty() throws IOException {\n        File file1 = createTempFile(\"\");\n        File file2 = createTempFile(\"\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    @Test\n    public void testCompareTextFiles_FirstFileLonger() throws IOException {\n        File file1 = createTempFile(\"line1\\nline2\\nline3\\nline4\\n\");\n        File file2 = createTempFile(\"line1\\nline2\\nline3\\n\");\n        FileContentComparator.compareTextFiles(file1, file2);\n        file1.delete();\n        file2.delete();\n    }\n    private File createTempFile(String content) throws IOException {\n        Path tempFile = Files.createTempFile(\"testFile\", \".txt\");\n        FileWriter writer = new FileWriter(tempFile.toFile());\n        writer.write(content);\n        writer.close();\n        return tempFile.toFile();\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\npublic class EmailValidator {\n    private static final String ERROR_INVALID_EMAIL = \"INVALID_EMAIL\";\n    private List<String> errors = new ArrayList<>();\n    public void validateEmail(String email) {\n        String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        if (email == null || !Pattern.matches(emailRegex, email)) {\n            errors.add(ERROR_INVALID_EMAIL);\n        }\n    }\n    public List<String> getErrors() {\n        return errors;\n    }\n    public static void main(String[] args) {\n        EmailValidator validator = new EmailValidator();\n        validator.validateEmail(\"example@example.com\");\n        validator.validateEmail(\"invalid-email\");\n        validator.validateEmail(null);\n        System.out.println(\"Number of errors: \" + validator.getErrors().size());\n        for (String error : validator.getErrors()) {\n            System.out.println(error);\n        }\n    }\n}", "content": "Please write a Java method to check if the given string is a valid email address. If not, the method should add the corresponding error message to an error list. Ensure your code can handle null values and, when checking email validity, take into account that email addresses typically contain a username, an \"@\" symbol, and a domain name. If the email address is invalid, a specific error code \"INVALID_EMAIL\" should be used to mark it.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\npublic class EmailValidator {\n    private static final String ERROR_INVALID_EMAIL = \"INVALID_EMAIL\";\n    private List<String> errors = new ArrayList<>();\n    public void validateEmail(String email) {\n    }\n    public List<String> getErrors() {\n        return errors;\n    }\n}\n```", "id": 1596, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.*;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.List;\npublic class EmailValidatorTest {\n    private EmailValidator emailValidator;\n    @Before\n    public void setUp() {\n        emailValidator = new EmailValidator();\n    }\n    @Test\n    public void testValidEmail() {\n        emailValidator.validateEmail(\"example@example.com\");\n        List<String> errors = emailValidator.getErrors();\n        assertTrue(errors.isEmpty());\n    }\n    @Test\n    public void testInvalidEmail() {\n        emailValidator.validateEmail(\"invalid-email\");\n        List<String> errors = emailValidator.getErrors();\n        assertEquals(1, errors.size());\n        assertEquals(\"INVALID_EMAIL\", errors.get(0));\n    }\n    @Test\n    public void testNullEmail() {\n        emailValidator.validateEmail(null);\n        List<String> errors = emailValidator.getErrors();\n        assertEquals(1, errors.size());\n        assertEquals(\"INVALID_EMAIL\", errors.get(0));\n    }\n    @Test\n    public void testMultipleEmails() {\n        emailValidator.validateEmail(\"example@example.com\");\n        emailValidator.validateEmail(\"another@example.com\");\n        List<String> errors = emailValidator.getErrors();\n        assertTrue(errors.isEmpty());\n    }\n    @Test\n    public void testMultipleInvalidEmails() {\n        emailValidator.validateEmail(\"example@example.com\");\n        emailValidator.validateEmail(\"invalid-email\");\n        emailValidator.validateEmail(null);\n        List<String> errors = emailValidator.getErrors();\n        assertEquals(2, errors.size());\n        assertEquals(\"INVALID_EMAIL\", errors.get(0));\n        assertEquals(\"INVALID_EMAIL\", errors.get(1));\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\npublic class ColorParser {\n    public static Color parseColor(String colorStr, Color defaultColor) {\n        try {\n            String[] parts = colorStr.split(\",\");\n            if (parts.length != 3) {\n                return defaultColor;\n            }\n            int r = Integer.parseInt(parts[0]);\n            int g = Integer.parseInt(parts[1]);\n            int b = Integer.parseInt(parts[2]);\n            if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255) {\n                return defaultColor;\n            }\n            return new Color(r, g, b);\n        } catch (NumberFormatException e) {\n            return defaultColor;\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(parseColor(\"255,0,0\", Color.BLACK).equals(Color.RED)); \n        System.out.println(parseColor(\"255,0\", Color.BLACK).equals(Color.BLACK)); \n        System.out.println(parseColor(\"256,0,0\", Color.BLACK).equals(Color.BLACK)); \n    }\n}", "content": "Please write a Java method to parse a specific format string and create a `Color` object based on this string. The string format is \"R,G,B\", where R, G, and B represent the values for red, green, and blue respectively, with values ranging from 0 to 255. If the string format is incorrect or the RGB values are out of the valid range, the method should return a default color object.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Color;\npublic class ColorParser {\n    public static Color parseColor(String colorStr, Color defaultColor) {\n    }\n}\n```", "id": 1597, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.awt.Color;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class ColorParserTest {\n    @Test\n    public void testValidColorString() {\n        Color actual = ColorParser.parseColor(\"255,0,0\", Color.BLACK);\n        assertEquals(new Color(255, 0, 0), actual);\n    }\n    @Test\n    public void testInvalidFormatString() {\n        Color actual = ColorParser.parseColor(\"255,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n    @Test\n    public void testValueOutOfRange() {\n        Color actual = ColorParser.parseColor(\"256,0,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n    @Test\n    public void testNegativeValue() {\n        Color actual = ColorParser.parseColor(\"255,-1,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n    @Test\n    public void testNonNumericValues() {\n        Color actual = ColorParser.parseColor(\"255,abc,0\", Color.BLACK);\n        assertEquals(Color.BLACK, actual);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Arrays;\npublic class UpperCaseConverter {\n    public static ArrayList<String> convertToUpper(ArrayList<String> strings) {\n        ArrayList<String> upperCaseStrings = new ArrayList<>();\n        for (String str : strings) {\n            upperCaseStrings.add(str.toUpperCase());\n        }\n        return upperCaseStrings;\n    }\n    public static void main(String[] args) {\n        ArrayList<String> testStrings = new ArrayList<>(Arrays.asList(\"hello\", \"world\", \"java\"));\n        ArrayList<String> upperCaseStrings = convertToUpper(testStrings);\n        System.out.println(upperCaseStrings); \n        ArrayList<String> emptyList = new ArrayList<>();\n        ArrayList<String> resultForEmptyList = convertToUpper(emptyList);\n        System.out.println(resultForEmptyList); \n    }\n}", "content": "Please write a Java method that processes a string array, converts each string in the array to uppercase, and adds these uppercase strings to a new ArrayList. Make sure your method can handle the case of an empty array, and return this new ArrayList at the end of the method. Follow these guidelines to complete this task:\n\n- The method should be public and static.\n- The method's parameter should be a string array.\n- The method's return type should be ArrayList<String>.\n- Ensure that the code snippet is completely self-contained, with all necessary packages imported at the start of the code.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class UpperCaseConverter {\n    public static ArrayList<String> convertToUpper(ArrayList<String> strings) {\n    }\n}\n```", "id": 1598, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class UpperCaseConverterTest {\n    @Test\n    public void testConvertToUpper_withNormalStrings() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"hello\", \"world\", \"java\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_withEmptyList() {\n        ArrayList<String> input = new ArrayList<>();\n        ArrayList<String> expected = new ArrayList<>();\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_withMixCaseStrings() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"HelLo\", \"WOrLd\", \"JaVA\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_withAllUpperCaseStrings() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"HELLO\", \"WORLD\", \"JAVA\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n    @Test\n    public void testConvertToUpper_singleElementList() {\n        ArrayList<String> input = new ArrayList<>(Arrays.asList(\"single\"));\n        ArrayList<String> expected = new ArrayList<>(Arrays.asList(\"SINGLE\"));\n        assertEquals(expected, UpperCaseConverter.convertToUpper(input));\n    }\n}"}}
{"canonical_solution": "import java.math.BigDecimal;\npublic class ShoppingCartCalculator {\n    public static BigDecimal calculateTotalPrice(BigDecimal unitPrice, int quantity) {\n        return unitPrice.multiply(new BigDecimal(quantity));\n    }\n    public static void main(String[] args) {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"89.97\");\n        BigDecimal totalPrice = calculateTotalPrice(unitPrice, quantity);\n        if (totalPrice.compareTo(expectedTotalPrice) == 0) {\n            System.out.println(\"计算结果正确: \" + totalPrice);\n        } else {\n            System.out.println(\"计算结果错误: \" + totalPrice);\n        }\n    }\n}", "content": "Please design a simple Java function that handles the price calculation for items in a shopping cart. Given the unit price and quantity of an item, calculate and return the total price of that item. Ensure your code is self-contained and includes the necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.math.BigDecimal;\npublic class ShoppingCartCalculator {\n    public static BigDecimal calculateTotalPrice(BigDecimal unitPrice, int quantity) {\n    }\n}\n```", "id": 1599, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.math.BigDecimal;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class ShoppingCartCalculatorTest {\n    @Test\n    public void testCalculateTotalPrice_withPositiveQuantity() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"89.97\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withZeroQuantity() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = 0;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"0.00\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withNegativeQuantity() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99\");\n        int quantity = -3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"-89.97\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withHighPrecisionUnitPrice() {\n        BigDecimal unitPrice = new BigDecimal(\"29.99999\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"89.99997\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n    @Test\n    public void testCalculateTotalPrice_withZeroUnitPrice() {\n        BigDecimal unitPrice = new BigDecimal(\"0.00\");\n        int quantity = 3;\n        BigDecimal expectedTotalPrice = new BigDecimal(\"0.00\");\n        BigDecimal totalPrice = ShoppingCartCalculator.calculateTotalPrice(unitPrice, quantity);\n        assertEquals(0, totalPrice.compareTo(expectedTotalPrice));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Department {\n    String name;\n    Department(String name) {\n        this.name = name;\n    }\n}\nclass Position {\n    String title;\n    Position(String title) {\n        this.title = title;\n    }\n}\nclass Level {\n    String rank;\n    Level(String rank) {\n        this.rank = rank;\n    }\n}\nclass PriceInfo {\n    Department department;\n    Position position;\n    Level level;\n    PriceInfo(Department department, Position position, Level level) {\n        this.department = department;\n        this.position = position;\n        this.level = level;\n    }\n}\nclass Employee {\n    String id;\n    PriceInfo domesticPrice;\n    PriceInfo internationalPrice;\n    Department department;\n    Position position;\n    Level level;\n    Employee(String id, PriceInfo domesticPrice, PriceInfo internationalPrice) {\n        this.id = id;\n        this.domesticPrice = domesticPrice;\n        this.internationalPrice = internationalPrice;\n    }\n    void updateEmployeeDetails(boolean isDomestic) {\n        PriceInfo priceInfo = isDomestic ? this.domesticPrice : this.internationalPrice;\n        if (Objects.nonNull(priceInfo)) {\n            this.department = priceInfo.department;\n            this.position = priceInfo.position;\n            this.level = priceInfo.level;\n        }\n    }\n}\npublic class EmployeeUpdater {\n    public static void main(String[] args) {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        Department dept2 = new Department(\"市场部\");\n        Position pos2 = new Position(\"市场专员\");\n        Level lev2 = new Level(\"P1\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        PriceInfo international = new PriceInfo(dept2, pos2, lev2);\n        Employee emp = new Employee(\"001\", domestic, international);\n        emp.updateEmployeeDetails(true);\n        System.out.println(\"更新为国内信息后的部门：\" + emp.department.name);\n        emp.updateEmployeeDetails(false);\n        System.out.println(\"更新为国际信息后的部门：\" + emp.department.name);\n    }\n}", "content": "Please write a Java method to update an employee's detailed information. Assume we have an `Employee` class that includes basic employee information and two types of price information: `domesticPrice` and `internationalPrice`. Each type of price information contains multiple attributes, such as `department`, `position`, `level`, etc. Depending on the employee's price type (domestic or international), we need to update the employee's department, position, level, and other information. If the employee's price type is domestic, we use the information in `domesticPrice` to update the employee's information; if international, we use the information in `internationalPrice`. Please note that all classes and methods used should be explicitly imported and defined in the code snippet.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Department {\n    String name;\n    Department(String name) {\n    }\n}\nclass Position {\n    String title;\n    Position(String title) {\n    }\n}\nclass Level {\n    String rank;\n    Level(String rank) {\n    }\n}\nclass PriceInfo {\n    Department department;\n    Position position;\n    Level level;\n    PriceInfo(Department department, Position position, Level level) {\n    }\n}\nclass Employee {\n    String id;\n    PriceInfo domesticPrice;\n    PriceInfo internationalPrice;\n    Department department;\n    Position position;\n    Level level;\n    Employee(String id, PriceInfo domesticPrice, PriceInfo internationalPrice) {\n    }\n    void updateEmployeeDetails(boolean isDomestic) {\n    }\n}\n```", "id": 1600, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass DepartmentTest {\n    @Test\n    void testDepartmentConstructor() {\n        Department dept = new Department(\"研发部\");\n        assertEquals(\"研发部\", dept.name);\n    }\n}\nclass PositionTest {\n    @Test\n    void testPositionConstructor() {\n        Position pos = new Position(\"软件工程师\");\n        assertEquals(\"软件工程师\", pos.title);\n    }\n}\nclass LevelTest {\n    @Test\n    void testLevelConstructor() {\n        Level level = new Level(\"P2\");\n        assertEquals(\"P2\", level.rank);\n    }\n}\nclass PriceInfoTest {\n    @Test\n    void testPriceInfoConstructor() {\n        Department dept = new Department(\"研发部\");\n        Position pos = new Position(\"软件工程师\");\n        Level level = new Level(\"P2\");\n        PriceInfo priceInfo = new PriceInfo(dept, pos, level);\n        assertEquals(dept, priceInfo.department);\n        assertEquals(pos, priceInfo.position);\n        assertEquals(level, priceInfo.level);\n    }\n}\nclass EmployeeTest {\n    @Test\n    void testUpdateEmployeeDetailsDomestic() {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        Department dept2 = new Department(\"市场部\");\n        Position pos2 = new Position(\"市场专员\");\n        Level lev2 = new Level(\"P1\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        PriceInfo international = new PriceInfo(dept2, pos2, lev2);\n        Employee emp = new Employee(\"001\", domestic, international);\n        emp.updateEmployeeDetails(true);\n        assertEquals(dept1, emp.department);\n        assertEquals(pos1, emp.position);\n        assertEquals(lev1, emp.level);\n    }\n    @Test\n    void testUpdateEmployeeDetailsInternational() {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        Department dept2 = new Department(\"市场部\");\n        Position pos2 = new Position(\"市场专员\");\n        Level lev2 = new Level(\"P1\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        PriceInfo international = new PriceInfo(dept2, pos2, lev2);\n        Employee emp = new Employee(\"001\", domestic, international);\n        emp.updateEmployeeDetails(false);\n        assertEquals(dept2, emp.department);\n        assertEquals(pos2, emp.position);\n        assertEquals(lev2, emp.level);\n    }\n    @Test\n    void testUpdateEmployeeDetailsNullPriceInfo() {\n        Department dept1 = new Department(\"研发部\");\n        Position pos1 = new Position(\"软件工程师\");\n        Level lev1 = new Level(\"P2\");\n        PriceInfo domestic = new PriceInfo(dept1, pos1, lev1);\n        Employee emp = new Employee(\"001\", domestic, null);\n        emp.updateEmployeeDetails(false);\n        assertNull(emp.department);\n        assertNull(emp.position);\n        assertNull(emp.level);\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\nclass AuthorizationInfo {\n    private String modelId;\n    private String accessToken;\n    private LocalDateTime expiresOn;\n    private String resourceId;\n    private String resourceRegion;\n    public AuthorizationInfo(String modelId, String accessToken, LocalDateTime expiresOn, String resourceId, String resourceRegion) {\n        this.modelId = modelId;\n        this.accessToken = accessToken;\n        this.expiresOn = expiresOn;\n        this.resourceId = resourceId;\n        this.resourceRegion = resourceRegion;\n    }\n    public String getModelId() {\n        return modelId;\n    }\n    public String getAccessToken() {\n        return accessToken;\n    }\n    public LocalDateTime getExpiresOn() {\n        return expiresOn;\n    }\n    public String getResourceId() {\n        return resourceId;\n    }\n    public String getResourceRegion() {\n        return resourceRegion;\n    }\n}\npublic class AuthorizationGenerator {\n    public static void generateAuthorizationInfo() {\n        String modelId = \"model-123\";\n        String accessToken = \"access-token-abc\";\n        LocalDateTime expiresOn = LocalDateTime.now().plusDays(30); \n        String resourceId = \"resource-id-xyz\";\n        String resourceRegion = \"resource-region-789\";\n        AuthorizationInfo authorizationInfo = new AuthorizationInfo(modelId, accessToken, expiresOn, resourceId, resourceRegion);\n        System.out.printf(\"授权信息：模型ID: %s, 访问令牌: %s, 过期时间: %s, 目标资源ID: %s, 目标资源区域: %s%n\",\n                authorizationInfo.getModelId(),\n                authorizationInfo.getAccessToken(),\n                authorizationInfo.getExpiresOn(),\n                authorizationInfo.getResourceId(),\n                authorizationInfo.getResourceRegion()\n        );\n    }\n    public static void main(String[] args) {\n        generateAuthorizationInfo();\n    }\n}", "content": "Please write a Java method that can generate an authorization info object and print out the detailed information of this object. The authorization info includes model ID, access token, expiration time, target resource ID, and target resource region. Ensure your code is self-contained and imports all the necessary packages.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.time.LocalDateTime;\nclass AuthorizationInfo {\n    private String modelId;\n    private String accessToken;\n    private LocalDateTime expiresOn;\n    private String resourceId;\n    private String resourceRegion;\n    public AuthorizationInfo(String modelId, String accessToken, LocalDateTime expiresOn, String resourceId, String resourceRegion) {}\n    public String getModelId() {}\n    public String getAccessToken() {}\n    public LocalDateTime getExpiresOn() {}\n    public String getResourceId() {}\n    public String getResourceRegion() {}\n}\npublic class AuthorizationGenerator {\n    public static void generateAuthorizationInfo() {}\n}\n```", "id": 1601, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.time.LocalDateTime;\nclass AuthorizationInfoTest {\n    @Test\n    public void testGetModelId() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"model-123\", authInfo.getModelId());\n    }\n    @Test\n    public void testGetAccessToken() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"access-token-abc\", authInfo.getAccessToken());\n    }\n    @Test\n    public void testGetExpiresOn() {\n        LocalDateTime futureDate = LocalDateTime.now().plusDays(30);\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", futureDate, \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(futureDate, authInfo.getExpiresOn());\n    }\n    @Test\n    public void testGetResourceId() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"resource-id-xyz\", authInfo.getResourceId());\n    }\n    @Test\n    public void testGetResourceRegion() {\n        AuthorizationInfo authInfo = new AuthorizationInfo(\"model-123\", \"access-token-abc\", LocalDateTime.now().plusDays(30), \"resource-id-xyz\", \"resource-region-789\");\n        assertEquals(\"resource-region-789\", authInfo.getResourceRegion());\n    }\n}\nclass AuthorizationGeneratorTest {\n    @Test\n    public void testGenerateAuthorizationInfo() {\n        AuthorizationGenerator.generateAuthorizationInfo(); \n    }\n}"}}
{"canonical_solution": "import java.util.IllegalFormatException;\npublic class SimpleCalculator {\n    public double addition(double a, double b) {\n        return a + b;\n    }\n    public double subtraction(double a, double b) {\n        return a - b;\n    }\n    public double multiplication(double a, double b) {\n        return a * b;\n    }\n    public double division(double a, double b) {\n        if (b == 0) {\n            throw new IllegalArgumentException(\"除数不能为零。\");\n        }\n        return a / b;\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        System.out.println(\"3 + 5 = \" + calculator.addition(3, 5));\n        System.out.println(\"10 - 2 = \" + calculator.subtraction(10, 2));\n        System.out.println(\"4 * 7 = \" + calculator.multiplication(4, 7));\n        try {\n            System.out.println(\"9 / 0 = \" + calculator.division(9, 0));\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"捕获到异常：\" + e.getMessage());\n        }\n        check(calculator.addition(3, 5) == 8, \"加法运算错误\");\n        check(calculator.subtraction(10, 2) == 8, \"减法运算错误\");\n        check(calculator.multiplication(4, 7) == 28, \"乘法运算错误\");\n        try {\n            calculator.division(9, 0);\n            check(false, \"除法运算错误，未抛出异常\");\n        } catch (IllegalArgumentException e) {\n            check(true, \"除法运算正确\");\n        }\n    }\n    private static void check(boolean condition, String message) {\n        if (!condition) {\n            throw new AssertionError(message);\n        }\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator needs to include four basic mathematical operations methods: addition, subtraction, multiplication, and division. Each method accepts two `double` type parameters and returns a `double` type result. The division method needs to handle the case where the divisor is zero; when the divisor is zero, it should throw an `IllegalArgumentException` exception.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.IllegalFormatException;\npublic class SimpleCalculator {\n    public double addition(double a, double b) {\n    }\n    public double subtraction(double a, double b) {\n    }\n    public double multiplication(double a, double b) {\n    }\n    public double division(double a, double b) {\n    }\n}\n```", "id": 1602, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddition() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8, calculator.addition(3, 5));\n        assertEquals(0, calculator.addition(-1, 1));\n        assertEquals(-3, calculator.addition(-1, -2));\n    }\n    @Test\n    public void testSubtraction() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(8, calculator.subtraction(10, 2));\n        assertEquals(-2, calculator.subtraction(-1, 1));\n        assertEquals(1, calculator.subtraction(0, -1));\n    }\n    @Test\n    public void testMultiplication() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(28, calculator.multiplication(4, 7));\n        assertEquals(-4, calculator.multiplication(-1, 4));\n        assertEquals(0, calculator.multiplication(0, 100));\n    }\n    @Test\n    public void testDivision() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(2, calculator.division(10, 5));\n        assertEquals(-2, calculator.division(-4, 2));\n        assertThrows(IllegalArgumentException.class, () -> {\n            calculator.division(1, 0);\n        });\n    }\n    @Test\n    public void testDivisionWithZeroNumerator() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(0, calculator.division(0, 5));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass BookLoan {\n    int bookId;\n    int borrowerId;\n    Date borrowDate;\n    public BookLoan(int bookId, int borrowerId, Date borrowDate) {\n        this.bookId = bookId;\n        this.borrowerId = borrowerId;\n        this.borrowDate = borrowDate;\n    }\n}\nclass BookLoanDAO {\n    public List<BookLoan> findAll() {\n        List<BookLoan> records = new ArrayList<>();\n        records.add(new BookLoan(1, 1001, new Date()));\n        records.add(new BookLoan(2, 1002, new Date()));\n        return records;\n    }\n}\nclass BookLoanService {\n    BookLoanDAO bookLoanDAO = new BookLoanDAO();\n    public List<BookLoan> fetchLoanRecordsByPage(int pageNumber, int pageSize) {\n        List<BookLoan> allRecords = bookLoanDAO.findAll();\n        int start = (pageNumber - 1) * pageSize;\n        int end = Math.min(start + pageSize, allRecords.size());\n        if (start > allRecords.size()) {\n            return new ArrayList<>();\n        }\n        return new ArrayList<>(allRecords.subList(start, end));\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page1 = service.fetchLoanRecordsByPage(1, 2);\n        System.out.println(\"第一页借阅记录数量：\" + page1.size());\n    }\n}", "content": "Please write a Java program to implement a simple book loan record pagination query function in a library management system. Considering that there may be a large number of loan records stored in the database, it needs to be optimized through pagination. Each query returns one page of loan records, with a fixed number of records per page. The specific requirements are as follows:\n\n- Define a class named `BookLoan` containing three attributes: book ID (`bookId`), borrower ID (`borrowerId`), and borrowing date (`borrowDate`).\n- Implement a class named `BookLoanService` that includes a method `fetchLoanRecordsByPage`, which accepts two parameters: `pageNumber` (current page number) and `pageSize` (number of records per page), and returns the current page's list of loan records.\n- Assume there is a class named `BookLoanDAO` which includes a method `findAll` that can return the list of all loan records (in practical application, this might be obtained through database access).\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nclass BookLoan {\n    int bookId;\n    int borrowerId;\n    Date borrowDate;\n    public BookLoan(int bookId, int borrowerId, Date borrowDate) {\n        \n    }\n}\n\nclass BookLoanDAO {\n    public List<BookLoan> findAll() {\n        \n    }\n}\n\nclass BookLoanService {\n    BookLoanDAO bookLoanDAO = new BookLoanDAO();\n    public List<BookLoan> fetchLoanRecordsByPage(int pageNumber, int pageSize) {\n        \n    }\n}\n```", "id": 1603, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.util.Date;\nimport java.util.List;\nclass BookLoanTest {\n    @Test\n    void testBookLoanConstructor() {\n        Date now = new Date();\n        BookLoan bookLoan = new BookLoan(1, 101, now);\n        Assertions.assertEquals(1, bookLoan.bookId);\n        Assertions.assertEquals(101, bookLoan.borrowerId);\n        Assertions.assertEquals(now, bookLoan.borrowDate);\n    }\n}\nclass BookLoanDAOTest {\n    @Test\n    void testFindAll() {\n        BookLoanDAO dao = new BookLoanDAO();\n        List<BookLoan> loans = dao.findAll();\n        Assertions.assertNotNull(loans);\n        Assertions.assertEquals(2, loans.size());\n    }\n}\nclass BookLoanServiceTest {\n    @Test\n    void testFetchLoanRecordsByPage_firstPage() {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page1 = service.fetchLoanRecordsByPage(1, 2);\n        Assertions.assertEquals(2, page1.size());\n    }\n    @Test\n    void testFetchLoanRecordsByPage_secondPage() {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page2 = service.fetchLoanRecordsByPage(2, 2);\n        Assertions.assertEquals(0, page2.size());\n    }\n    @Test\n    void testFetchLoanRecordsByPage_invalidPage() {\n        BookLoanService service = new BookLoanService();\n        List<BookLoan> page = service.fetchLoanRecordsByPage(3, 2);\n        Assertions.assertEquals(0, page.size());\n    }\n}"}}
{"canonical_solution": "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\ninterface DatabaseAccess {\n    List<String> scan(String pattern);\n}\nclass MockDatabase implements DatabaseAccess {\n    @Override\n    public List<String> scan(String pattern) {\n        List<String> allRecords = List.of(\"student:001\", \"student:002\", \"teacher:001\", \"student:003\");\n        List<String> matchedRecords = new ArrayList<>();\n        for (String record : allRecords) {\n            if (record.startsWith(pattern)) {\n                matchedRecords.add(record);\n            }\n        }\n        return matchedRecords;\n    }\n}\npublic class RecordFinder {\n    public static List<String> findRecordsWithPrefix(DatabaseAccess databaseAccess, String prefix) {\n        return databaseAccess.scan(prefix);\n    }\n    public static void main(String[] args) {\n        MockDatabase mockDatabase = new MockDatabase();\n        List<String> studentRecords = findRecordsWithPrefix(mockDatabase, \"student:\");\n        System.out.println(\"找到的学生记录有: \" + studentRecords);\n    }\n}", "content": "Please write a Java method to query all records that match a specific pattern from a simulated database. For example, we want to query all records prefixed with \"student:\". The method should be able to efficiently handle a large amount of data and ensure that all resources are released after the query to avoid resource leaks.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\ninterface DatabaseAccess {\n    List<String> scan(String pattern);\n}\nclass MockDatabase implements DatabaseAccess {\n    @Override\n    public List<String> scan(String pattern) {\n    }\n}\npublic class RecordFinder {\n    public static List<String> findRecordsWithPrefix(DatabaseAccess databaseAccess, String prefix) {\n    }\n}\n```", "id": 1604, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.List;\nclass MockDatabaseTest {\n    DatabaseAccess databaseAccess = new MockDatabase();\n    @Test\n    void testScanWithStudentPrefix() {\n        List<String> results = databaseAccess.scan(\"student:\");\n        assertEquals(3, results.size());\n        assertTrue(results.contains(\"student:001\"));\n        assertTrue(results.contains(\"student:002\"));\n        assertTrue(results.contains(\"student:003\"));\n    }\n    @Test\n    void testScanWithTeacherPrefix() {\n        List<String> results = databaseAccess.scan(\"teacher:\");\n        assertEquals(1, results.size());\n        assertTrue(results.contains(\"teacher:001\"));\n    }\n    @Test\n    void testScanWithEmptyPrefix() {\n        List<String> results = databaseAccess.scan(\"\");\n        assertEquals(4, results.size());\n        assertTrue(results.contains(\"student:001\"));\n        assertTrue(results.contains(\"student:002\"));\n        assertTrue(results.contains(\"teacher:001\"));\n        assertTrue(results.contains(\"student:003\"));\n    }\n    @Test\n    void testScanWithNoMatchingPrefix() {\n        List<String> results = databaseAccess.scan(\"professor:\");\n        assertEquals(0, results.size());\n    }\n}\nclass RecordFinderTest {\n    DatabaseAccess databaseAccess = new MockDatabase();\n    @Test\n    void testFindRecordsWithStudentPrefix() {\n        List<String> results = RecordFinder.findRecordsWithPrefix(databaseAccess, \"student:\");\n        assertEquals(3, results.size());\n        assertTrue(results.contains(\"student:001\"));\n        assertTrue(results.contains(\"student:002\"));\n        assertTrue(results.contains(\"student:003\"));\n    }\n    @Test\n    void testFindRecordsWithTeacherPrefix() {\n        List<String> results = RecordFinder.findRecordsWithPrefix(databaseAccess, \"teacher:\");\n        assertEquals(1, results.size());\n        assertTrue(results.contains(\"teacher:001\"));\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class TextReader {\n    public String readTextWithoutNewlines(String filePath) throws IOException {\n        StringBuilder contentBuilder = new StringBuilder();\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new FileReader(filePath));\n            String currentLine;\n            while ((currentLine = reader.readLine()) != null) {\n                contentBuilder.append(currentLine);\n            }\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }\n        return contentBuilder.toString();\n    }\n    public static void main(String[] args) {\n        TextReader reader = new TextReader();\n        try {\n            String result = reader.readTextWithoutNewlines(\"example.txt\");\n            System.out.println(result);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "Please write a Java method to read text content from a file and remove all newline characters ('\\n'). The method takes a file path as a parameter and returns a string without newline characters. Ensure proper handling of resource closure and exceptions while reading the file.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class TextReader {\n    public String readTextWithoutNewlines(String filePath) throws IOException {\n    }\n}\n```", "id": 1605, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.io.TempDir;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\npublic class TextReaderTest {\n    private TextReader textReader;\n    @BeforeEach\n    public void setUp() {\n        textReader = new TextReader();\n    }\n    @TempDir\n    Path tempDir;\n    @Test\n    public void testReadTextWithoutNewlines_singleLine() throws IOException {\n        Path filePath = tempDir.resolve(\"singleLine.txt\");\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()))) {\n            writer.write(\"This is a single line without newlines.\");\n        }\n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"This is a single line without newlines.\", result);\n    }\n    @Test\n    public void testReadTextWithoutNewlines_multipleLines() throws IOException {\n        Path filePath = tempDir.resolve(\"multipleLines.txt\");\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()))) {\n            writer.write(\"Line1\\nLine2\\nLine3\\n\");\n        }\n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"Line1Line2Line3\", result);\n    }\n    @Test\n    public void testReadTextWithoutNewlines_fileDoesNotExist() {\n        assertThrows(IOException.class, () -> {\n            textReader.readTextWithoutNewlines(tempDir.resolve(\"nonExistentFile.txt\").toString());\n        });\n    }\n    @Test\n    public void testReadTextWithoutNewlines_emptyFile() throws IOException {\n        Path filePath = tempDir.resolve(\"emptyFile.txt\");\n        filePath.toFile().createNewFile(); \n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testReadTextWithoutNewlines_fileWithOnlyNewlines() throws IOException {\n        Path filePath = tempDir.resolve(\"onlyNewlines.txt\");\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()))) {\n            writer.write(\"\\n\\n\\n\");\n        }\n        String result = textReader.readTextWithoutNewlines(filePath.toString());\n        assertEquals(\"\", result);\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\npublic class SimpleLogger {\n    private String logFilePath;\n    public SimpleLogger(String logFilePath) {\n        this.logFilePath = logFilePath;\n    }\n    public void appendLog(String logInfo) {\n        if (logInfo == null) {\n            return;\n        }\n        File logFile = new File(logFilePath);\n        try (FileOutputStream out = new FileOutputStream(logFile, true)) {\n            out.write((logInfo + \"\\n\").getBytes());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        SimpleLogger logger = new SimpleLogger(\"log.txt\");\n        logger.appendLog(\"这是一条测试日志信息。\");\n        logger.appendLog(\"这是另一条测试日志信息。\");\n    }\n}", "content": "Please implement a simple logging function in Java with the following specifications:\n\n- Define a method that takes a string parameter as the log message.\n- If the log message passed is `null`, the method should not perform any operation.\n- The method should append the log message to a specified log file. Each log message should occupy one line, ending with a newline character.\n- Ensure that the log file is created automatically if it does not exist when writing the log message.\n- Handle all potential exceptions, such as file not found or write errors, and print the exception information.\n\nPlease determine the method name, parameter names, etc., in accordance with Java coding conventions.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\npublic class SimpleLogger {\n    private String logFilePath;\n    public SimpleLogger(String logFilePath) {\n        \n    }\n    public void appendLog(String logInfo) {\n        \n    }\n}\n```", "id": 1606, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.io.IOException;\npublic class SimpleLoggerTest {\n    private SimpleLogger logger;\n    private static final String LOG_FILE_PATH = \"test_log.txt\";\n    @BeforeEach\n    public void setup() {\n        logger = new SimpleLogger(LOG_FILE_PATH);\n        File logFile = new File(LOG_FILE_PATH);\n        if (logFile.exists()) {\n            logFile.delete();\n        }\n    }\n    @Test\n    public void testAppendLog_createsFileIfNotExist() throws IOException {\n        logger.appendLog(\"Test log entry\");\n        File logFile = new File(LOG_FILE_PATH);\n        assertTrue(logFile.exists(), \"Log file should be created.\");\n    }\n    @Test\n    public void testAppendLog_appendsNewEntry() throws IOException {\n        logger.appendLog(\"First log entry\");\n        logger.appendLog(\"Second log entry\");\n        String logContent = new String(Files.readAllBytes(new File(LOG_FILE_PATH).toPath()));\n        assertTrue(logContent.contains(\"First log entry\"), \"First log entry should be in the log.\");\n        assertTrue(logContent.contains(\"Second log entry\"), \"Second log entry should be in the log.\");\n    }\n    @Test\n    public void testAppendLog_ignoresNullLogInfo() throws IOException {\n        logger.appendLog(null);\n        File logFile = new File(LOG_FILE_PATH);\n        assertFalse(logFile.exists(), \"Log file should not be created when log entry is null.\");\n    }\n    @Test\n    public void testAppendLog_handlesEmptyStringLogEntry() throws IOException {\n        logger.appendLog(\"\");\n        String logContent = new String(Files.readAllBytes(new File(LOG_FILE_PATH).toPath()));\n        assertEquals(\"\\n\", logContent, \"Log file should contain a single newline for empty log entry.\");\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.Arrays;\nclass CustomListAdapter {\n    private ArrayList<String> dataList = new ArrayList<>();\n    public CustomListAdapter(String[] initialData) {\n        dataList.addAll(Arrays.asList(initialData));\n    }\n    public void clearDataAndNotify() {\n        dataList.clear();\n        notifyDataChanged();\n    }\n    private void notifyDataChanged() {\n        System.out.println(\"数据集已变化。\");\n    }\n    public boolean checkDataIsEmpty() {\n        return dataList.isEmpty();\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\", \"数据2\", \"数据3\"});\n        adapter.clearDataAndNotify();\n        if (adapter.checkDataIsEmpty()) {\n            System.out.println(\"数据列表已成功清空。\");\n        } else {\n            System.out.println(\"数据列表清空失败。\");\n        }\n    }\n}", "content": "Please design a Java method to clear all elements from an ArrayList and notify that the dataset has changed. This method should be a part of a custom adapter class used to handle list data. Follow the given guidelines to accomplish this task.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nclass CustomListAdapter {\n    private ArrayList<String> dataList = new ArrayList<>();\n    public CustomListAdapter(String[] initialData) {\n    }\n    public void clearDataAndNotify() {\n    }\n    private void notifyDataChanged() {\n    }\n    public boolean checkDataIsEmpty() {\n    }\n}\n```", "id": 1607, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass CustomListAdapterTest {\n    @Test\n    void testClearDataAndNotify() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\", \"数据2\", \"数据3\"});\n        adapter.clearDataAndNotify();\n        assertTrue(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testCheckDataIsEmptyWithNonEmptyData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\", \"数据2\", \"数据3\"});\n        assertFalse(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testCheckDataIsEmptyWithEmptyData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{});\n        assertTrue(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testConstructorWithEmptyInitialData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{});\n        assertTrue(adapter.checkDataIsEmpty());\n    }\n    @Test\n    void testConstructorWithNonEmptyInitialData() {\n        CustomListAdapter adapter = new CustomListAdapter(new String[]{\"数据1\"});\n        assertFalse(adapter.checkDataIsEmpty());\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class StudentQueryService {\n    public static String queryStudentNameById(String studentId) {\n        Map<String, String> database = new HashMap<>();\n        database.put(\"S001\", \"张三\");\n        database.put(\"S002\", \"李四\");\n        database.put(\"S003\", \"王五\");\n        return database.getOrDefault(studentId, \"未找到学生信息\");\n    }\n    public static void check() {\n        System.out.println(queryStudentNameById(\"S001\").equals(\"张三\") ? \"测试通过\" : \"测试失败\");\n        System.out.println(queryStudentNameById(\"S004\").equals(\"未找到学生信息\") ? \"测试通过\" : \"测试失败\");\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "Please write a Java method that can query and return a specific database record. Suppose we have a database table `Students` that contains student information, such as student ID (`studentId`) and student name (`name`). Write a method `queryStudentNameById` that takes a student ID as a parameter and returns the corresponding student's name. If the given student ID does not exist in the database, return a string `\"Student information not found\"`. To simplify the problem, we will use a predefined `HashMap` to simulate database operations, where the key is the student ID and the value is the student name.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentQueryService {\n    public static String queryStudentNameById(String studentId) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1608, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class StudentQueryServiceTest {\n    @Test\n    public void testQueryStudentNameById_ExistingIdS001() {\n        assertEquals(\"张三\", StudentQueryService.queryStudentNameById(\"S001\"));\n    }\n    @Test\n    public void testQueryStudentNameById_ExistingIdS002() {\n        assertEquals(\"李四\", StudentQueryService.queryStudentNameById(\"S002\"));\n    }\n    @Test\n    public void testQueryStudentNameById_ExistingIdS003() {\n        assertEquals(\"王五\", StudentQueryService.queryStudentNameById(\"S003\"));\n    }\n    @Test\n    public void testQueryStudentNameById_NonExistingIdS004() {\n        assertEquals(\"未找到学生信息\", StudentQueryService.queryStudentNameById(\"S004\"));\n    }\n    @Test\n    public void testQueryStudentNameById_EmptyId() {\n        assertEquals(\"未找到学生信息\", StudentQueryService.queryStudentNameById(\"\"));\n    }\n}"}}
{"canonical_solution": "import java.nio.ByteBuffer;\npublic class IntegerToBytesConverter {\n    public static byte[] convertIntToBigEndianBytes(int number) {\n        ByteBuffer buffer = ByteBuffer.allocate(4);\n        buffer.putInt(number);\n        return buffer.array();\n    }\n    public static void main(String[] args) {\n        int testNumber = 0x12345678;\n        byte[] expectedResult = {0x12, 0x34, 0x56, 0x78};\n        byte[] result = convertIntToBigEndianBytes(testNumber);\n        boolean isCorrect = true;\n        for (int i = 0; i < 4; i++) {\n            if (result[i] != expectedResult[i]) {\n                isCorrect = false;\n                break;\n            }\n        }\n        if (isCorrect) {\n            System.out.println(\"转换正确！\");\n        } else {\n            System.out.println(\"转换错误。\");\n        }\n    }\n}", "content": "Please write a Java function that can convert an integer into a 4-byte byte array. The conversion of the integer should be in big-endian order (i.e., the most significant byte is at the lowest address of the byte array).\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.nio.ByteBuffer;\npublic class IntegerToBytesConverter {\n    public static byte[] convertIntToBigEndianBytes(int number) {\n    }\n}\n```", "id": 1609, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport org.junit.jupiter.api.Test;\npublic class IntegerToBytesConverterTest {\n    @Test\n    public void testConvertIntToBigEndianBytes_PositiveNumber() {\n        int testNumber = 0x12345678;\n        byte[] expectedResult = {0x12, 0x34, 0x56, 0x78};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_NegativeNumber() {\n        int testNumber = 0x87654321;\n        byte[] expectedResult = {(byte)0x87, 0x65, 0x43, 0x21};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_Zero() {\n        int testNumber = 0x00000000;\n        byte[] expectedResult = {0x00, 0x00, 0x00, 0x00};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_MaxInt() {\n        int testNumber = 0x7FFFFFFF;\n        byte[] expectedResult = {0x7F, (byte)0xFF, (byte)0xFF, (byte)0xFF};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n    @Test\n    public void testConvertIntToBigEndianBytes_MinInt() {\n        int testNumber = 0x80000000;\n        byte[] expectedResult = {(byte)0x80, 0x00, 0x00, 0x00};\n        byte[] result = IntegerToBytesConverter.convertIntToBigEndianBytes(testNumber);\n        assertArrayEquals(expectedResult, result);\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.ArrayList;\nclass User {\n    Long userId;\n    String userName;\n    public User(Long userId, String userName) {\n        this.userId = userId;\n        this.userName = userName;\n    }\n    public Long getUserId() {\n        return userId;\n    }\n    public void setUserId(Long userId) {\n        this.userId = userId;\n    }\n    public String getUserName() {\n        return userName;\n    }\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n}\nclass FollowRelation {\n    Long followerId;\n    Long followingId;\n    public FollowRelation(Long followerId, Long followingId) {\n        this.followerId = followerId;\n        this.followingId = followingId;\n    }\n    public Long getFollowerId() {\n        return followerId;\n    }\n    public void setFollowerId(Long followerId) {\n        this.followerId = followerId;\n    }\n    public Long getFollowingId() {\n        return followingId;\n    }\n    public void setFollowingId(Long followingId) {\n        this.followingId = followingId;\n    }\n}\npublic class UserFollowService {\n    private List<User> users = new ArrayList<>();\n    private List<FollowRelation> followRelations = new ArrayList<>();\n    public UserFollowService(List<User> users, List<FollowRelation> followRelations) {\n        this.users = users;\n        this.followRelations = followRelations;\n    }\n    public List<User> getFollowers(Long userId) {\n        return followRelations.stream()\n                .filter(relation -> relation.getFollowingId().equals(userId))\n                .map(relation -> users.stream()\n                        .filter(user -> user.getUserId().equals(relation.getFollowerId()))\n                        .findFirst().orElse(null))\n                .collect(Collectors.toList());\n    }\n    public static void main(String[] args) {\n        List<User> users = List.of(\n                new User(1L, \"Alice\"),\n                new User(2L, \"Bob\"),\n                new User(3L, \"Charlie\")\n        );\n        List<FollowRelation> followRelations = List.of(\n                new FollowRelation(1L, 2L),\n                new FollowRelation(3L, 2L)\n        );\n        UserFollowService service = new UserFollowService(users, followRelations);\n        List<User> followers = service.getFollowers(2L);\n        for (User user : followers) {\n            System.out.println(user.getUserName());\n        }\n    }\n}", "content": "Please write a Java method that retrieves all follower information for a specified user. Assume we have a user table and a following relationship table, each relationship records who follows whom. Now, given a user ID, we need to return the detailed information of all followers of this user. The follower information should include user ID and username. Ensure that your code is completely self-contained and includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.ArrayList;\nclass User {\n    Long userId;\n    String userName;\n    public User(Long userId, String userName) {\n    }\n    public Long getUserId() {\n    }\n    public void setUserId(Long userId) {\n    }\n    public String getUserName() {\n    }\n    public void setUserName(String userName) {\n    }\n}\nclass FollowRelation {\n    Long followerId;\n    Long followingId;\n    public FollowRelation(Long followerId, Long followingId) {\n    }\n    public Long getFollowerId() {\n    }\n    public void setFollowerId(Long followerId) {\n    }\n    public Long getFollowingId() {\n    }\n    public void setFollowingId(Long followingId) {\n    }\n}\npublic class UserFollowService {\n    private List<User> users = new ArrayList<>();\n    private List<FollowRelation> followRelations = new ArrayList<>();\n    public UserFollowService(List<User> users, List<FollowRelation> followRelations) {\n    }\n    public List<User> getFollowers(Long userId) {\n    }\n}\n```", "id": 1610, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.ArrayList;\nclass UserFollowServiceTest {\n    private UserFollowService service;\n    private List<User> users;\n    private List<FollowRelation> followRelations;\n    @BeforeEach\n    void setUp() {\n        users = List.of(\n                new User(1L, \"Alice\"),\n                new User(2L, \"Bob\"),\n                new User(3L, \"Charlie\"),\n                new User(4L, \"David\")\n        );\n        followRelations = List.of(\n                new FollowRelation(1L, 2L),\n                new FollowRelation(3L, 2L),\n                new FollowRelation(4L, 3L)\n        );\n        service = new UserFollowService(users, followRelations);\n    }\n    @Test\n    void testGetFollowers_UserWithFollowers() {\n        List<User> followers = service.getFollowers(2L);\n        assertEquals(2, followers.size());\n        assertTrue(followers.stream().anyMatch(user -> user.getUserName().equals(\"Alice\")));\n        assertTrue(followers.stream().anyMatch(user -> user.getUserName().equals(\"Charlie\")));\n    }\n    @Test\n    void testGetFollowers_UserWithSingleFollower() {\n        List<User> followers = service.getFollowers(3L);\n        assertEquals(1, followers.size());\n        assertEquals(\"David\", followers.get(0).getUserName());\n    }\n    @Test\n    void testGetFollowers_UserWithNoFollowers() {\n        List<User> followers = service.getFollowers(1L);\n        assertEquals(0, followers.size());\n    }\n    @Test\n    void testGetFollowers_UserNotInList() {\n        List<User> followers = service.getFollowers(5L);\n        assertEquals(0, followers.size());\n    }\n    @Test\n    void testGetFollowers_EmptyFollowRelations() {\n        UserFollowService emptyService = new UserFollowService(users, new ArrayList<>());\n        List<User> followers = emptyService.getFollowers(2L);\n        assertEquals(0, followers.size());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass ResponseObject {\n    private boolean isSuccessful;\n    private int statusCode;\n    private String message;\n    public ResponseObject(boolean isSuccessful, int statusCode, String message) {\n        this.isSuccessful = isSuccessful;\n        this.statusCode = statusCode;\n        this.message = message;\n    }\n    public boolean isSuccessful() {\n        return isSuccessful;\n    }\n    public void setSuccessful(boolean successful) {\n        isSuccessful = successful;\n    }\n    public int getStatusCode() {\n        return statusCode;\n    }\n    public void setStatusCode(int statusCode) {\n        this.statusCode = statusCode;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public void setMessage(String message) {\n        this.message = message;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof ResponseObject)) return false;\n        ResponseObject that = (ResponseObject) o;\n        return isSuccessful == that.isSuccessful &&\n                statusCode == that.statusCode &&\n                Objects.equals(message, that.message);\n    }\n}\npublic class ResponseUtil {\n    public static ResponseObject createResponse(int statusCode, String responseMessage) {\n        boolean isSuccessful = statusCode >= 0;\n        return new ResponseObject(isSuccessful, statusCode, responseMessage);\n    }\n    public static void checkResponse() {\n        ResponseObject test1 = createResponse(200, \"操作成功\");\n        ResponseObject expected1 = new ResponseObject(true, 200, \"操作成功\");\n        ResponseObject test2 = createResponse(-1, \"操作失败\");\n        ResponseObject expected2 = new ResponseObject(false, -1, \"操作失败\");\n        assert test1.equals(expected1) : \"测试1失败\";\n        assert test2.equals(expected2) : \"测试2失败\";\n    }\n    public static void main(String[] args) {\n        checkResponse(); \n        System.out.println(\"所有测试通过\");\n    }\n}", "content": "Please write a Java method that takes an integer `statusCode` and a string `responseMessage` as parameters and returns a `ResponseObject` instance. This instance contains three attributes: `isSuccessful` (a boolean indicating if the operation was successful), `statusCode` (an integer indicating the status code), and `message` (a string indicating the response message). If the passed status code is greater than or equal to 0, the operation is considered successful, and `isSuccessful` should be set to `true`; otherwise, it should be set to `false`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass ResponseObject {\n    private boolean isSuccessful;\n    private int statusCode;\n    private String message;\n    public ResponseObject(boolean isSuccessful, int statusCode, String message) {\n    }\n    public boolean isSuccessful() {\n    }\n    public void setSuccessful(boolean successful) {\n    }\n    public int getStatusCode() {\n    }\n    public void setStatusCode(int statusCode) {\n    }\n    public String getMessage() {\n    }\n    public void setMessage(String message) {\n    }\n    @Override\n    public boolean equals(Object o) {\n    }\n}\npublic class ResponseUtil {\n    public static ResponseObject createResponse(int statusCode, String responseMessage) {\n    }\n}\n```", "id": 1611, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ResponseUtilTest {\n    @Test\n    void testCreateResponseSuccess() {\n        ResponseObject response = ResponseUtil.createResponse(200, \"操作成功\");\n        assertTrue(response.isSuccessful());\n        assertEquals(200, response.getStatusCode());\n        assertEquals(\"操作成功\", response.getMessage());\n    }\n    @Test\n    void testCreateResponseFailure() {\n        ResponseObject response = ResponseUtil.createResponse(-1, \"操作失败\");\n        assertFalse(response.isSuccessful());\n        assertEquals(-1, response.getStatusCode());\n        assertEquals(\"操作失败\", response.getMessage());\n    }\n    @Test\n    void testSettersAndGetters() {\n        ResponseObject response = new ResponseObject(true, 200, \"初始消息\");\n        response.setSuccessful(false);\n        response.setStatusCode(-1);\n        response.setMessage(\"更新消息\");\n        assertFalse(response.isSuccessful());\n        assertEquals(-1, response.getStatusCode());\n        assertEquals(\"更新消息\", response.getMessage());\n    }\n    @Test\n    void testEqualsMethodTrue() {\n        ResponseObject response1 = new ResponseObject(true, 200, \"消息\");\n        ResponseObject response2 = new ResponseObject(true, 200, \"消息\");\n        assertEquals(response1, response2);\n    }\n    @Test\n    void testEqualsMethodFalse() {\n        ResponseObject response1 = new ResponseObject(true, 200, \"消息\");\n        ResponseObject response2 = new ResponseObject(false, 404, \"不同消息\");\n        assertNotEquals(response1, response2);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class EmailValidator {\n    public void validateEmailContent(Email email, String expectedContent) {\n        if (email == null) {\n            throw new NullPointerException(\"Email对象不能为null\");\n        }\n        String errorMessage = \"\\n预期的内容为:\\n  <%s>\\n实际的内容为:\\n  <%s>\\nEmail详情:\\n  <%s>\";\n        String actualContent = email.getContent();\n        if (!Objects.equals(actualContent, expectedContent)) {\n            throw new IllegalArgumentException(String.format(errorMessage, expectedContent, actualContent, email));\n        }\n    }\n    public static class Email {\n        private String content;\n        public Email(String content) {\n            this.content = content;\n        }\n        public String getContent() {\n            return content;\n        }\n        @Override\n        public String toString() {\n            return \"Email{content='\" + content + \"'}\";\n        }\n    }\n    public static void main(String[] args) {\n        EmailValidator validator = new EmailValidator();\n        Email email = new EmailValidator.Email(\"Hello, World!\");\n        try {\n            validator.validateEmailContent(email, \"Hello, World!\");\n            System.out.println(\"验证通过：内容匹配\");\n        } catch (Exception e) {\n            System.out.println(\"验证失败：\" + e.getMessage());\n        }\n        try {\n            validator.validateEmailContent(email, \"Goodbye, World!\");\n        } catch (Exception e) {\n            System.out.println(\"验证失败：\" + e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method that verifies if the content of an `Email` object matches the expected content. If the content does not match, an exception should be thrown with detailed error information. Please follow these guidelines:\n\n- The method should first check if the `Email` object is `null`, and if so, throw a `NullPointerException`.\n- If the content of the `Email` object does not match the expected content, an `IllegalArgumentException` with a custom error message format should be thrown.\n- The error message should include the expected content, the actual content, and detailed information about the `Email` object.\n- The method should be able to safely handle cases where the content is `null`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    public void validateEmailContent(Email email, String expectedContent) {\n    }\n    public static class Email {\n        private String content;\n        public Email(String content) {\n        }\n        public String getContent() {\n        }\n        @Override\n        public String toString() {\n        }\n    }\n}\n```", "id": 1612, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class EmailValidatorTest {\n    @Test(expected = NullPointerException.class)\n    public void testValidateEmailContent_NullEmail() {\n        EmailValidator validator = new EmailValidator();\n        validator.validateEmailContent(null, \"Expected Content\");\n    }\n    @Test\n    public void testValidateEmailContent_CorrectContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello, World!\");\n        validator.validateEmailContent(email, \"Hello, World!\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testValidateEmailContent_IncorrectContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello, World!\");\n        validator.validateEmailContent(email, \"Goodbye, World!\");\n    }\n    @Test\n    public void testValidateEmailContent_EmptyContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"\");\n        validator.validateEmailContent(email, \"\");\n    }\n    @Test(expected = IllegalArgumentException.class)\n    public void testValidateEmailContent_DifferentStringContent() {\n        EmailValidator validator = new EmailValidator();\n        EmailValidator.Email email = new EmailValidator.Email(\"Hello, World!\");\n        validator.validateEmailContent(email, \"Hello\");\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class DataTypeConverter {\n    private static Map<String, Integer> typeCodeMap = new HashMap<>();\n    static {\n        typeCodeMap.put(\"int\", 1);\n        typeCodeMap.put(\"varchar\", 2);\n        typeCodeMap.put(\"boolean\", 3);\n    }\n    public static int convertToCode(String dataTypeName) {\n        String cleanTypeName = dataTypeName.toLowerCase().replaceAll(\"\\\\(.*\\\\)\", \"\");\n        return typeCodeMap.getOrDefault(cleanTypeName, -1);\n    }\n    public static void checkFunction() {\n        assert convertToCode(\"INT(11)\") == 1 : \"Test 1 failed\";\n        assert convertToCode(\"varchar(255)\") == 2 : \"Test 2 failed\";\n        assert convertToCode(\"BOOLEAN\") == 3 : \"Test 3 failed\";\n        assert convertToCode(\"float\") == -1 : \"Test 4 failed\"; \n        System.out.println(\"所有测试通过！\");\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java function that can convert a given data type name string into the corresponding integer code. The data type name may contain additional information, such as length or precision, which will appear in parentheses after the type name. For example, `\"int(11)\"` should be treated as an `\"int\"` type. We assume there is a predefined mapping `typeCodeMap` that maps data type names without additional information to integer codes. Ensure that you ignore the case of the type name during the conversion process and remove any parentheses and their contents.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DataTypeConverter {\n    private static Map<String, Integer> typeCodeMap = new HashMap<>();\n    static {\n        typeCodeMap.put(\"int\", 1);\n        typeCodeMap.put(\"varchar\", 2);\n        typeCodeMap.put(\"boolean\", 3);\n    }\n    public static int convertToCode(String dataTypeName) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1613, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\npublic class DataTypeConverterTest {\n    @Test\n    public void testConvertToCodeInt() {\n        int result = DataTypeConverter.convertToCode(\"INT(11)\");\n        assertEquals(1, result);\n    }\n    @Test\n    public void testConvertToCodeVarchar() {\n        int result = DataTypeConverter.convertToCode(\"varchar(255)\");\n        assertEquals(2, result);\n    }\n    @Test\n    public void testConvertToCodeBoolean() {\n        int result = DataTypeConverter.convertToCode(\"BOOLEAN\");\n        assertEquals(3, result);\n    }\n    @Test\n    public void testConvertToCodeUnknownType() {\n        int result = DataTypeConverter.convertToCode(\"float\");\n        assertEquals(-1, result);\n    }\n    @Test\n    public void testConvertToCodeEmptyString() {\n        int result = DataTypeConverter.convertToCode(\"\");\n        assertEquals(-1, result);\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class StudentManager {\n    private List<Student> studentList = new ArrayList<>();\n    public StudentManager() {\n        studentList.add(new Student(1, \"张三\"));\n        studentList.add(new Student(2, \"李四\"));\n        studentList.add(new Student(3, \"王五\"));\n    }\n    public String deleteStudent(int studentId) {\n        for (Student student : studentList) {\n            if (student.getId() == studentId) {\n                studentList.remove(student);\n                return \"删除成功\";\n            }\n        }\n        return \"学生不存在\";\n    }\n    static class Student {\n        private int id;\n        private String name;\n        public Student(int id, String name) {\n            this.id = id;\n            this.name = name;\n        }\n        public int getId() {\n            return id;\n        }\n        public String getName() {\n            return name;\n        }\n    }\n    public static void main(String[] args) {\n        StudentManager manager = new StudentManager();\n        System.out.println(manager.deleteStudent(2)); \n        System.out.println(manager.deleteStudent(4)); \n    }\n}", "content": "Please write a Java method to remove a student with a specified ID from a list that stores student information. If the student is found and successfully deleted, the method should return \"Deletion successful\"; if the student with the specified ID is not found in the list, it should return \"Student not found\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class StudentManager {\n    private List<Student> studentList = new ArrayList<>();\n    public StudentManager() {\n    }\n    public String deleteStudent(int studentId) {\n        return \"\";\n    }\n    static class Student {\n        private int id;\n        private String name;\n        public Student(int id, String name) {\n        }\n        public int getId() {\n            return 0;\n        }\n        public String getName() {\n            return \"\";\n        }\n    }\n}\n```", "id": 1614, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class StudentManagerTest {\n    private StudentManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new StudentManager();\n    }\n    @Test\n    public void testDeleteExistingStudent() {\n        String result = manager.deleteStudent(2);\n        Assertions.assertEquals(\"删除成功\", result);\n    }\n    @Test\n    public void testDeleteNonExistingStudent() {\n        String result = manager.deleteStudent(4);\n        Assertions.assertEquals(\"学生不存在\", result);\n    }\n    @Test\n    public void testDeleteFirstStudent() {\n        String result = manager.deleteStudent(1);\n        Assertions.assertEquals(\"删除成功\", result);\n    }\n    @Test\n    public void testDeleteLastStudent() {\n        String result = manager.deleteStudent(3);\n        Assertions.assertEquals(\"删除成功\", result);\n    }\n    @Test\n    public void testDeleteStudentTwice() {\n        manager.deleteStudent(2);\n        String result = manager.deleteStudent(2);\n        Assertions.assertEquals(\"学生不存在\", result);\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentReader {\n    public static void readAndPrintFileContent(String directoryPath, String fileName) {\n        File file = new File(directoryPath, fileName);\n        if (!file.exists()) {\n            System.out.println(\"文件不存在: \" + file.getPath());\n            return;\n        }\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new FileReader(file));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            System.out.println(\"读取文件时发生错误: \" + file.getPath());\n            e.printStackTrace();\n        } finally {\n            try {\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    public static void main(String[] args) {\n        readAndPrintFileContent(\"C:/storage\", \"test.txt\");\n    }\n}", "content": "Please write a Java program to read the content of specific files in a specified directory and output it to the console. Ensure that your program can handle the situation where the file does not exist and can gracefully manage any potential input/output exceptions. Additionally, your program should be able to handle different character encodings, especially UTF-8 encoded files.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileContentReader {\n    public static void readAndPrintFileContent(String directoryPath, String fileName) {\n    }\n}\n```", "id": 1615, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileContentReaderTest {\n    @TempDir\n    File tempDir;\n    @Test\n    void testFileDoesNotExist() {\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"nonexistent.txt\");\n    }\n    @Test\n    void testFileIsEmpty() throws IOException {\n        File emptyFile = new File(tempDir, \"empty.txt\");\n        emptyFile.createNewFile();\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"empty.txt\");\n    }\n    @Test\n    void testFileWithContent() throws IOException {\n        File file = new File(tempDir, \"content.txt\");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n        writer.write(\"Hello, World!\");\n        writer.newLine();\n        writer.write(\"This is a test file.\");\n        writer.close();\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"content.txt\");\n    }\n    @Test\n    void testFileWithSpecialCharacters() throws IOException {\n        File file = new File(tempDir, \"special_chars.txt\");\n        BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n        writer.write(\"你好，世界！\");\n        writer.newLine();\n        writer.write(\"这是一个测试文件。\");\n        writer.close();\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), \"special_chars.txt\");\n    }\n    @Test\n    void testIOExceptionHandling() {\n        FileContentReader.readAndPrintFileContent(tempDir.getAbsolutePath(), tempDir.getName());\n    }\n}"}}
{"canonical_solution": "import javax.swing.JOptionPane;\npublic class CoffeeOrderSystem {\n    public static void main(String[] args) {\n        String customerName = JOptionPane.showInputDialog(\"请输入您的名字:\");\n        String quantityStr = JOptionPane.showInputDialog(\"您想要几杯咖啡？\");\n        int quantity = Integer.parseInt(quantityStr);\n        int totalPrice = calculateTotalPrice(quantity);\n        String orderSummary = generateOrderSummary(customerName, totalPrice);\n        simulateEmailSending(customerName, orderSummary);\n    }\n    public static int calculateTotalPrice(int quantity) {\n        final int PRICE_PER_CUP = 5;\n        return quantity * PRICE_PER_CUP;\n    }\n    public static String generateOrderSummary(String customerName, int totalPrice) {\n        return \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n    }\n    public static void simulateEmailSending(String customerName, String orderSummary) {\n        System.out.println(\"正在发送订单摘要给 \" + customerName + \"...\\n\" + orderSummary);\n    }\n}", "content": "Please write a Java program to handle coffee orders. Users can enter their names and select the number of coffees they want. The price for each coffee is 5 yuan. The program should calculate the total price, generate an order summary, and then send the summary to the user via email. Ensure that your code can receive the user's name and coffee quantity, calculate the total price, generate an order summary, and simulate the email sending process (the actual email sending functionality does not need to be implemented). Follow these guidelines to complete this task:\n\n- Ensure the readability and clarity of the solution.\n- Use variable names and function names distinct from any provided examples.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JOptionPane;\npublic class CoffeeOrderSystem {\n\n    public static int calculateTotalPrice(int quantity) {\n    }\n    public static String generateOrderSummary(String customerName, int totalPrice) {\n    }\n    public static void simulateEmailSending(String customerName, String orderSummary) {\n    }\n}\n```", "id": 1616, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class CoffeeOrderSystemTest {\n    @Test\n    public void testCalculateTotalPrice() {\n        int quantity = 3;\n        int expectedTotalPrice = 15;\n        int actualTotalPrice = CoffeeOrderSystem.calculateTotalPrice(quantity);\n        assertEquals(expectedTotalPrice, actualTotalPrice);\n    }\n    @Test\n    public void testCalculateTotalPriceZeroQuantity() {\n        int quantity = 0;\n        int expectedTotalPrice = 0;\n        int actualTotalPrice = CoffeeOrderSystem.calculateTotalPrice(quantity);\n        assertEquals(expectedTotalPrice, actualTotalPrice);\n    }\n    @Test\n    public void testGenerateOrderSummary() {\n        String customerName = \"Alice\";\n        int totalPrice = 20;\n        String expectedOrderSummary = \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n        String actualOrderSummary = CoffeeOrderSystem.generateOrderSummary(customerName, totalPrice);\n        assertEquals(expectedOrderSummary, actualOrderSummary);\n    }\n    @Test\n    public void testGenerateOrderSummaryEmptyName() {\n        String customerName = \"\";\n        int totalPrice = 10;\n        String expectedOrderSummary = \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n        String actualOrderSummary = CoffeeOrderSystem.generateOrderSummary(customerName, totalPrice);\n        assertEquals(expectedOrderSummary, actualOrderSummary);\n    }\n    @Test\n    public void testGenerateOrderSummaryZeroTotalPrice() {\n        String customerName = \"Bob\";\n        int totalPrice = 0;\n        String expectedOrderSummary = \"顾客：\" + customerName + \"\\n\" + \"总价：\" + totalPrice + \"元\";\n        String actualOrderSummary = CoffeeOrderSystem.generateOrderSummary(customerName, totalPrice);\n        assertEquals(expectedOrderSummary, actualOrderSummary);\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class YearMonthFormatter {\n    public static String formatYearMonth(LocalDateTime dateTime) {\n        String formattedDate = \"\";\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM\");\n        try {\n            formattedDate = dateTime.format(formatter);\n        } catch (DateTimeParseException e) {\n            System.err.println(\"日期转换失败: \" + e.getMessage());\n        }\n        return formattedDate;\n    }\n    public static void main(String[] args) {\n        LocalDateTime dateTime1 = LocalDateTime.of(2023, 4, 15, 10, 34);\n        LocalDateTime dateTime2 = LocalDateTime.of(2020, 12, 25, 5, 30);\n        System.out.println(\"测试1: \" + formatYearMonth(dateTime1).equals(\"2023-04\"));\n        System.out.println(\"测试2: \" + formatYearMonth(dateTime2).equals(\"2020-12\"));\n    }\n}", "content": "Please write a Java function that takes a `LocalDateTime` object as a parameter and returns a formatted string that contains only the year and month information. The format should be \"yyyy-MM\". Ensure your code can properly handle any exceptions and return an empty string when an exception occurs.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\npublic class YearMonthFormatter {\n    public static String formatYearMonth(LocalDateTime dateTime) {\n    }\n}\n```", "id": 1617, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.time.LocalDateTime;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class YearMonthFormatterTest {\n    @Test\n    public void testFormatYearMonth_NormalDate1() {\n        LocalDateTime dateTime = LocalDateTime.of(2023, 4, 15, 10, 34);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2023-04\", result);\n    }\n    @Test\n    public void testFormatYearMonth_NormalDate2() {\n        LocalDateTime dateTime = LocalDateTime.of(2020, 12, 25, 5, 30);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2020-12\", result);\n    }\n    @Test\n    public void testFormatYearMonth_BeginningOfYear() {\n        LocalDateTime dateTime = LocalDateTime.of(2022, 1, 1, 0, 0);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2022-01\", result);\n    }\n    @Test\n    public void testFormatYearMonth_EndOfMonth() {\n        LocalDateTime dateTime = LocalDateTime.of(2021, 5, 31, 23, 59);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2021-05\", result);\n    }\n    @Test\n    public void testFormatYearMonth_EndOfYear() {\n        LocalDateTime dateTime = LocalDateTime.of(2022, 12, 31, 23, 59);\n        String result = YearMonthFormatter.formatYearMonth(dateTime);\n        assertEquals(\"2022-12\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class TaskFormatter {\n    public static String formatTaskName(String projectName, String taskName) {\n        if (isNullOrBlank(projectName)) {\n            return taskName;\n        }\n        if (isNullOrBlank(taskName)) {\n            return null;\n        }\n        return projectName.trim() + \"/\" + taskName.trim();\n    }\n    private static boolean isNullOrBlank(String str) {\n        return str == null || str.trim().isEmpty();\n    }\n    public static void main(String[] args) {\n        System.out.println(formatTaskName(null, \"任务1\")); \n        System.out.println(formatTaskName(\" \", \"任务2\")); \n        System.out.println(formatTaskName(\"项目A\", null)); \n        System.out.println(formatTaskName(\"项目B\", \" \")); \n        System.out.println(formatTaskName(\"项目C\", \"任务3\")); \n    }\n}", "content": "Please describe a Java method that accepts two string parameters: `projectName` and `taskName`. The purpose of this method is to generate a formatted string that represents a task in a specific project. Follow these rules:\n\n1. If `projectName` is `null` or a blank string, return only `taskName`.\n2. If `taskName` is `null` or a blank string, return `null`.\n3. If both parameters are non-null and non-blank strings, the returned format should be `\"projectName/taskName\"`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class TaskFormatter {\n    public static String formatTaskName(String projectName, String taskName) {\n    }\n    private static boolean isNullOrBlank(String str) {\n    }\n}\n```", "id": 1618, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class TaskFormatterTest {\n    @Test\n    public void testFormatTaskName_WhenProjectNameIsNull() {\n        String result = TaskFormatter.formatTaskName(null, \"任务1\");\n        assertEquals(\"任务1\", result);\n    }\n    @Test\n    public void testFormatTaskName_WhenProjectNameIsBlank() {\n        String result = TaskFormatter.formatTaskName(\" \", \"任务2\");\n        assertEquals(\"任务2\", result);\n    }\n    @Test\n    public void testFormatTaskName_WhenTaskNameIsNull() {\n        String result = TaskFormatter.formatTaskName(\"项目A\", null);\n        assertNull(result);\n    }\n    @Test\n    public void testFormatTaskName_WhenTaskNameIsBlank() {\n        String result = TaskFormatter.formatTaskName(\"项目B\", \" \");\n        assertNull(result);\n    }\n    @Test\n    public void testFormatTaskName_WithValidInputs() {\n        String result = TaskFormatter.formatTaskName(\"项目C\", \"任务3\");\n        assertEquals(\"项目C/任务3\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class LoginValidator {\n    public boolean checkLogin(String username, String password) {\n        final String validUsername = \"admin\";\n        final String validPassword = \"123456\";\n        return Objects.equals(username, validUsername) && Objects.equals(password, validPassword);\n    }\n    public static void main(String[] args) {\n        LoginValidator validator = new LoginValidator();\n        boolean test1 = validator.checkLogin(\"admin\", \"123456\"); \n        boolean test2 = validator.checkLogin(\"user\", \"password\"); \n        boolean test3 = validator.checkLogin(\"admin\", \"654321\"); \n        System.out.println(\"测试1: \" + (test1 ? \"通过\" : \"失败\"));\n        System.out.println(\"测试2: \" + (test2 ? \"通过\" : \"失败\"));\n        System.out.println(\"测试3: \" + (test3 ? \"通过\" : \"失败\"));\n    }\n}", "content": "Please design a Java method to check if a user can successfully log in. The method takes two string parameters: username and password. If the username is \"admin\" and the password is \"123456\", the login is considered successful and returns `true`; otherwise, it returns `false`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class LoginValidator {\n    public boolean checkLogin(String username, String password) {\n    }\n}\n```", "id": 1619, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Objects;\npublic class LoginValidatorTest {\n    @Test\n    public void testCheckLoginValidCredentials() {\n        LoginValidator validator = new LoginValidator();\n        assertTrue(validator.checkLogin(\"admin\", \"123456\"));\n    }\n    @Test\n    public void testCheckLoginInvalidUsername() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"user\", \"123456\"));\n    }\n    @Test\n    public void testCheckLoginInvalidPassword() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"admin\", \"654321\"));\n    }\n    @Test\n    public void testCheckLoginInvalidCredentials() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"user\", \"password\"));\n    }\n    @Test\n    public void testCheckLoginEmptyCredentials() {\n        LoginValidator validator = new LoginValidator();\n        assertFalse(validator.checkLogin(\"\", \"\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class ResourceAccessChecker {\n    public boolean canAccess(String userRole) {\n        return Objects.equals(userRole, \"管理员\");\n    }\n    public static void main(String[] args) {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        checkAccess(checker.canAccess(\"管理员\"), true); \n        checkAccess(checker.canAccess(\"访客\"), false); \n    }\n    public static void checkAccess(boolean actual, boolean expected) {\n        if (actual == expected) {\n            System.out.println(\"测试通过\");\n        } else {\n            System.out.println(\"测试失败\");\n        }\n    }\n}", "content": "Please write a Java program to check whether a user has permission to access a certain resource. Access permissions are based on the user's role. We have two roles: `Administrator` and `Guest`. Implement a class named `ResourceAccessChecker` that contains a method `canAccess`. This method takes a string parameter `userRole`, which represents the user's role. If the user's role is `Administrator`, it returns `true`, indicating access is granted; if the user's role is `Guest`, it returns `false`, indicating access is denied.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class ResourceAccessChecker {\n    public boolean canAccess(String userRole) {\n    }\n}\n```", "id": 1620, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ResourceAccessCheckerTest {\n    @Test\n    public void testCanAccessAdmin() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertTrue(checker.canAccess(\"管理员\"));\n    }\n    @Test\n    public void testCanAccessGuest() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(\"访客\"));\n    }\n    @Test\n    public void testCanAccessEmptyString() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(\"\"));\n    }\n    @Test\n    public void testCanAccessNull() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(null));\n    }\n    @Test\n    public void testCanAccessUser() {\n        ResourceAccessChecker checker = new ResourceAccessChecker();\n        assertFalse(checker.canAccess(\"用户\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class RobotArmController {\n    private double armPower = 0;\n    private Map<String, Boolean> controller1 = new HashMap<>();\n    private Map<String, Boolean> controller2 = new HashMap<>();\n    public RobotArmController() {\n        controller1.put(\"up\", false);\n        controller1.put(\"down\", false);\n        controller2.put(\"up\", false);\n        controller2.put(\"down\", false);\n    }\n    public void updateArmPower() {\n        if (controller1.get(\"up\") || controller2.get(\"up\")) {\n            armPower = 1; \n        } else if (controller1.get(\"down\") || controller2.get(\"down\")) {\n            armPower = -1; \n        } else {\n            armPower = 0; \n        }\n    }\n    public void setControllerInput(int controllerNum, String button, boolean pressed) {\n        if (controllerNum == 1) {\n            controller1.put(button, pressed);\n        } else if (controllerNum == 2) {\n            controller2.put(button, pressed);\n        }\n    }\n    public double getArmPower() {\n        return armPower;\n    }\n    public static void main(String[] args) {\n        RobotArmController controller = new RobotArmController();\n        controller.setControllerInput(1, \"up\", true);\n        controller.updateArmPower();\n        System.out.println(\"手臂动力（向前移动）: \" + controller.getArmPower());\n        controller.setControllerInput(1, \"up\", false);\n        controller.setControllerInput(2, \"down\", true);\n        controller.updateArmPower();\n        System.out.println(\"手臂动力（向后移动）: \" + controller.getArmPower());\n        controller.setControllerInput(2, \"down\", false);\n        controller.updateArmPower();\n        System.out.println(\"手臂动力（停止）: \" + controller.getArmPower());\n    }\n}", "content": "Please write a program to control the movement of a simple robotic arm. The robotic arm can move forward, move backward, or stop. We will use two different controllers (Controller1 and Controller2) to control the movement of the robotic arm. If the upward button of either controller is pressed, the robotic arm should move forward; if the downward button of either controller is pressed, the robotic arm should move backward; if no buttons are pressed, the robotic arm should stop.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class RobotArmController {\n    private double armPower = 0;\n    private Map<String, Boolean> controller1 = new HashMap<>();\n    private Map<String, Boolean> controller2 = new HashMap<>();\n    public RobotArmController() {\n    }\n    public void updateArmPower() {\n    }\n    public void setControllerInput(int controllerNum, String button, boolean pressed) {\n    }\n    public double getArmPower() {\n    }\n}\n```", "id": 1621, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class RobotArmControllerTest {\n    private RobotArmController controller;\n    @BeforeEach\n    public void setup() {\n        controller = new RobotArmController();\n    }\n    @Test\n    public void testUpdateArmPowerUp() {\n        controller.setControllerInput(1, \"up\", true);\n        controller.updateArmPower();\n        assertEquals(1.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testUpdateArmPowerDown() {\n        controller.setControllerInput(2, \"down\", true);\n        controller.updateArmPower();\n        assertEquals(-1.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testUpdateArmPowerStopAfterUp() {\n        controller.setControllerInput(1, \"up\", true);\n        controller.updateArmPower();\n        controller.setControllerInput(1, \"up\", false);\n        controller.updateArmPower();\n        assertEquals(0.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testUpdateArmPowerStopAfterDown() {\n        controller.setControllerInput(2, \"down\", true);\n        controller.updateArmPower();\n        controller.setControllerInput(2, \"down\", false);\n        controller.updateArmPower();\n        assertEquals(0.0, controller.getArmPower(), 0.001);\n    }\n    @Test\n    public void testNoControllerInput() {\n        controller.updateArmPower();\n        assertEquals(0.0, controller.getArmPower(), 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Book {\n    private String title;\n    private String author;\n    private int pages;\n    public Book(String title, String author, int pages) {\n        this.title = title;\n        this.author = author;\n        this.pages = pages;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public String getAuthor() {\n        return author;\n    }\n    public int getPages() {\n        return pages;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n    public void setPages(int pages) {\n        this.pages = pages;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Book)) return false;\n        Book book = (Book) o;\n        return pages == book.pages &&\n                Objects.equals(title, book.title) &&\n                Objects.equals(author, book.author);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(title, author, pages);\n    }\n}\npublic class BookCloner {\n    public static Book cloneBook(final Book book) {\n        return new Book(book.getTitle(), book.getAuthor(), book.getPages());\n    }\n    public static void check() {\n        Book originalBook = new Book(\"Java Programming\", \"Y. Daniel Liang\", 1345);\n        Book clonedBook = cloneBook(originalBook);\n        if (originalBook.equals(clonedBook) && originalBook != clonedBook) {\n            System.out.println(\"方法正确实现了功能。\");\n        } else {\n            System.out.println(\"方法实现有误。\");\n        }\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "Please write a Java method that accepts a `Book` object as a parameter and returns a new `Book` object, with the new object's contents being exactly the same as the passed-in `Book` object. Ensure that all properties are properly copied when creating the new object.\n\nRequirements:\n- Ensure your code is self-contained and includes all necessary import statements.\n- Briefly describe the problem in the method's documentation string.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Book {\n    private String title;\n    private String author;\n    private int pages;\n    public Book(String title, String author, int pages) {\n    }\n    public String getTitle() {\n    }\n    public String getAuthor() {\n    }\n    public int getPages() {\n    }\n    public void setTitle(String title) {\n    }\n    public void setAuthor(String author) {\n    }\n    public void setPages(int pages) {\n    }\n    @Override\n    public boolean equals(Object o) {\n    }\n    @Override\n    public int hashCode() {\n    }\n}\npublic class BookCloner {\n    public static Book cloneBook(final Book book) {\n    }\n    public static void check() {\n    }\n}\n```", "id": 1622, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testGetTitle() {\n        Book book = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        assertEquals(\"Effective Java\", book.getTitle());\n    }\n    @Test\n    void testSetTitle() {\n        Book book = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        book.setTitle(\"Java Concurrency in Practice\");\n        assertEquals(\"Java Concurrency in Practice\", book.getTitle());\n    }\n    @Test\n    void testEquals() {\n        Book book1 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        Book book2 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        assertTrue(book1.equals(book2));\n    }\n    @Test\n    void testHashCode() {\n        Book book1 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        Book book2 = new Book(\"Effective Java\", \"Joshua Bloch\", 416);\n        assertEquals(book1.hashCode(), book2.hashCode());\n    }\n    @Test\n    void testCloneBook() {\n        Book originalBook = new Book(\"Clean Code\", \"Robert C. Martin\", 464);\n        Book clonedBook = BookCloner.cloneBook(originalBook);\n        assertEquals(originalBook, clonedBook);\n        assertNotSame(originalBook, clonedBook);\n    }\n}"}}
{"canonical_solution": "import java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\npublic class DynamicExecutor {\n    public static void executeDynamicMethod(String className, String methodName, Object[] args) {\n        try {\n            Class<?> clazz = Class.forName(className);\n            Class<?>[] parameterTypes = new Class[args.length];\n            for (int i = 0; i < args.length; i++) {\n                parameterTypes[i] = args[i].getClass();\n            }\n            Method method = clazz.getMethod(methodName, parameterTypes);\n            method.invoke(null, args);\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"类未找到: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (NoSuchMethodException e) {\n            System.out.println(\"方法未找到: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            System.out.println(\"非法访问: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            System.out.println(\"调用目标异常: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"printMessage\", new Object[]{\"Hello, Dynamic Execution!\"});\n    }\n}", "content": "Please write a Java method that dynamically loads and executes a specified method of a specified class. Assume we have a class named `DynamicExecutor` which contains a static method called `executeDynamicMethod`. This method takes three parameters: the first parameter is the fully qualified name of the class (including the package name), the second parameter is the name of the method to be executed, and the third parameter is an array of `Object` which are the parameters of the method. If the class or method does not exist or if any other exception occurs during execution, the method should catch these exceptions and print the stack trace rather than allowing the exception to propagate. Note that the method to be executed should be a static method and should not have a return value.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\npublic class DynamicExecutor {\n    public static void executeDynamicMethod(String className, String methodName, Object[] args) {\n    }\n}\n```", "id": 1623, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.lang.reflect.InvocationTargetException;\npublic class DynamicExecutorTest {\n    @Test\n    public void testExecuteDynamicMethod_validMethod() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"printMessage\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_classNotFound() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"NonExistentClass\", \"printMessage\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_methodNotFound() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"nonExistentMethod\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_illegalAccess() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"privateMethod\", args);\n    }\n    @Test\n    public void testExecuteDynamicMethod_invocationTargetException() {\n        Object[] args = new Object[]{\"Hello, Dynamic!\"};\n        DynamicExecutor.executeDynamicMethod(\"TestMethods\", \"exceptionThrowingMethod\", args);\n    }\n    public static class TestMethods {\n        public static void printMessage(String message) {\n            System.out.println(message);\n        }\n        private static void privateMethod(String message) {\n            System.out.println(\"Private: \" + message);\n        }\n        public static void exceptionThrowingMethod(String message) throws Exception {\n            throw new Exception(\"Test Exception\");\n        }\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\npublic class TimezoneConverter {\n    public static String convertToUTC(String localDate, String localTime, String timezoneOffset) {\n        LocalDateTime localDateTime = LocalDateTime.parse(localDate + \"T\" + localTime);\n        ZoneOffset offset = ZoneOffset.of(fixOffsetFormat(timezoneOffset));\n        OffsetDateTime offsetDateTime = localDateTime.atOffset(offset);\n        ZonedDateTime utcDateTime = offsetDateTime.toZonedDateTime().withZoneSameInstant(ZoneOffset.UTC);\n        return utcDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n    private static String fixOffsetFormat(String offset) {\n        if (!offset.matches(\"^[+-]\\\\d{2}:\\\\d{2}$\")) {\n            return \"+00:00\"; \n        }\n        return offset;\n    }\n    public static void main(String[] args) {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"+05:30\"; \n        String utcTime = convertToUTC(date, time, offset);\n        System.out.println(\"UTC时间: \" + utcTime);\n        String expectedUTC = \"2023-04-01 09:30:00\";\n        assert utcTime.equals(expectedUTC) : \"转换结果不正确\";\n    }\n}", "content": "Please write a Java method that can convert a given date and time from a specific time zone to UTC time. The date format you need to handle is \"yyyy-MM-dd\", the time format is \"HH:mm:ss\", and the time zone offset format is \"+HH:mm\" or \"-HH:mm\". If the provided time zone offset does not match the expected format, your method should automatically correct it to ensure the conversion process does not fail due to format errors.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.time.LocalDateTime;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\npublic class TimezoneConverter {\n    public static String convertToUTC(String localDate, String localTime, String timezoneOffset) {\n    }\n    private static String fixOffsetFormat(String offset) {\n    }\n}\n```", "id": 1624, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class TimezoneConverterTest {\n    @Test\n    public void testConvertToUTC_PositiveOffset() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"+05:30\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 09:30:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_NegativeOffset() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"-04:00\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 19:00:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_ZeroOffset() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"+00:00\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 15:00:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_InvalidOffsetFormat() {\n        String date = \"2023-04-01\";\n        String time = \"15:00:00\";\n        String offset = \"invalid_offset\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2023-04-01 15:00:00\";\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testConvertToUTC_LeapYearDate() {\n        String date = \"2020-02-29\";\n        String time = \"23:00:00\";\n        String offset = \"+01:00\";\n        String result = TimezoneConverter.convertToUTC(date, time, offset);\n        String expected = \"2020-02-29 22:00:00\";\n        assertEquals(expected, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class RequestConfigurator {\n    public static Map<String, Integer> getRequestConfig(String requestType) {\n        Map<String, Integer> config = new HashMap<>();\n        switch (requestType.toUpperCase()) {\n            case \"GET\":\n                config.put(\"timeout\", 5000); \n                config.put(\"retries\", 2); \n                break;\n            case \"POST\":\n                config.put(\"timeout\", 8000); \n                config.put(\"retries\", 3); \n                break;\n            default:\n                config.put(\"timeout\", 3000); \n                config.put(\"retries\", 1); \n                break;\n        }\n        return config;\n    }\n    public static void main(String[] args) {\n        Map<String, Integer> getConfig = getRequestConfig(\"GET\");\n        System.out.println(\"GET请求配置：\" + getConfig);\n        Map<String, Integer> postConfig = getRequestConfig(\"POST\");\n        System.out.println(\"POST请求配置：\" + postConfig);\n        Map<String, Integer> defaultConfig = getRequestConfig(\"DELETE\");\n        System.out.println(\"默认请求配置：\" + defaultConfig);\n    }\n}", "content": "Please design a Java method to configure the parameters of a network request. This method should be able to return the corresponding configuration object based on different request types (such as GET, POST, etc.). The configuration object should include basic information about the request, such as timeout duration, retry attempts, etc. Ensure that your code is completely standalone and includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class RequestConfigurator {\n    public static Map<String, Integer> getRequestConfig(String requestType) {\n    }\n}\n```", "id": 1625, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\npublic class RequestConfiguratorTest {\n    @Test\n    void testGetRequestConfigWithGet() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"GET\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(5000, config.get(\"timeout\"));\n        assertEquals(2, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigWithPost() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"POST\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(8000, config.get(\"timeout\"));\n        assertEquals(3, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigWithUnknownType() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"DELETE\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(3000, config.get(\"timeout\"));\n        assertEquals(1, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigCaseInsensitive() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"get\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(5000, config.get(\"timeout\"));\n        assertEquals(2, config.get(\"retries\"));\n    }\n    @Test\n    void testGetRequestConfigEmptyType() {\n        Map<String, Integer> config = RequestConfigurator.getRequestConfig(\"\");\n        assertTrue(config.containsKey(\"timeout\"));\n        assertTrue(config.containsKey(\"retries\"));\n        assertEquals(3000, config.get(\"timeout\"));\n        assertEquals(1, config.get(\"retries\"));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass StudentInfo {\n    String name;\n    int age;\n    String major;\n    public StudentInfo(String name, int age, String major) {\n        this.name = name;\n        this.age = age;\n        this.major = major;\n    }\n    @Override\n    public String toString() {\n        return \"姓名: \" + name + \", 年龄: \" + age + \", 专业: \" + major;\n    }\n}\npublic class StudentDatabase {\n    private static Map<Long, StudentInfo> studentDB = new HashMap<>();\n    static {\n        studentDB.put(1L, new StudentInfo(\"张三\", 20, \"计算机科学与技术\"));\n        studentDB.put(2L, new StudentInfo(\"李四\", 22, \"软件工程\"));\n        studentDB.put(3L, new StudentInfo(\"王五\", 19, \"信息安全\"));\n    }\n    public static StudentInfo getStudentDetails(Long studentId) {\n        if (studentDB.containsKey(studentId)) {\n            return studentDB.get(studentId);\n        } else {\n            return null;\n        }\n    }\n    public static void main(String[] args) {\n        System.out.println(getStudentDetails(1L)); \n        System.out.println(getStudentDetails(4L)); \n    }\n}", "content": "Write a Java method that accepts a student's ID as a parameter and then returns the student's detailed information. If the student's information does not exist in the database, the method should return null.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass StudentInfo {\n    String name;\n    int age;\n    String major;\n    public StudentInfo(String name, int age, String major) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class StudentDatabase {\n    private static Map<Long, StudentInfo> studentDB = new HashMap<>();\n    static {\n        studentDB.put(1L, new StudentInfo(\"张三\", 20, \"计算机科学与技术\"));\n        studentDB.put(2L, new StudentInfo(\"李四\", 22, \"软件工程\"));\n        studentDB.put(3L, new StudentInfo(\"王五\", 19, \"信息安全\"));\n    }\n    public static StudentInfo getStudentDetails(Long studentId) {\n    }\n}\n```", "id": 1626, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentInfoTest {\n}\nclass StudentDatabaseTest {\n    @Test\n    void testGetStudentDetails_existingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(1L);\n        assertNotNull(student);\n        assertEquals(\"张三\", student.name);\n        assertEquals(20, student.age);\n        assertEquals(\"计算机科学与技术\", student.major);\n    }\n    @Test\n    void testGetStudentDetails_nonExistingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(4L);\n        assertNull(student);\n    }\n    @Test\n    void testGetStudentDetails_anotherExistingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(2L);\n        assertNotNull(student);\n        assertEquals(\"李四\", student.name);\n        assertEquals(22, student.age);\n        assertEquals(\"软件工程\", student.major);\n    }\n    @Test\n    void testGetStudentDetails_yetAnotherExistingStudent() {\n        StudentInfo student = StudentDatabase.getStudentDetails(3L);\n        assertNotNull(student);\n        assertEquals(\"王五\", student.name);\n        assertEquals(19, student.age);\n        assertEquals(\"信息安全\", student.major);\n    }\n    @Test\n    void testGetStudentDetails_nullInput() {\n        StudentInfo student = StudentDatabase.getStudentDetails(null);\n        assertNull(student);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\npublic class StudentRegistrationValidator {\n    public static boolean isRegistrationComplete(HashMap<String, String> studentInfo) {\n        String[] requiredKeys = {\"姓名\", \"学号\", \"专业\", \"年级\", \"邮箱\", \"手机号\"};\n        for (String key : requiredKeys) {\n            if (!studentInfo.containsKey(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        boolean isComplete = isRegistrationComplete(studentInfo);\n        System.out.println(\"注册信息是否完整: \" + isComplete);\n    }\n}", "content": "Please design a Java function to verify whether the registration information of a student in a student information system is complete. The registration information includes the student's name, student ID, major, grade, email, and phone number. The information is stored in the form of key-value pairs in a class named `StudentInfo`. Make sure all necessary keys are present, and their order can be arbitrary.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\npublic class StudentRegistrationValidator {\n    public static boolean isRegistrationComplete(HashMap<String, String> studentInfo) {\n    }\n}\n```", "id": 1627, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class StudentRegistrationValidatorTest {\n    @Test\n    public void testCompleteRegistration() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        assertTrue(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationMissingName() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        assertFalse(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationMissingEmail() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        assertFalse(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationEmptyFields() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"\");\n        studentInfo.put(\"学号\", \"\");\n        studentInfo.put(\"专业\", \"\");\n        studentInfo.put(\"年级\", \"\");\n        studentInfo.put(\"邮箱\", \"\");\n        studentInfo.put(\"手机号\", \"\");\n        assertTrue(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n    @Test\n    public void testIncompleteRegistrationExtraFields() {\n        HashMap<String, String> studentInfo = new HashMap<>();\n        studentInfo.put(\"姓名\", \"张三\");\n        studentInfo.put(\"学号\", \"123456\");\n        studentInfo.put(\"专业\", \"计算机科学与技术\");\n        studentInfo.put(\"年级\", \"大三\");\n        studentInfo.put(\"邮箱\", \"zhangsan@example.com\");\n        studentInfo.put(\"手机号\", \"13800000000\");\n        studentInfo.put(\"地址\", \"北京市\");\n        assertTrue(StudentRegistrationValidator.isRegistrationComplete(studentInfo));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class UserTaskManager {\n    private Map<Integer, Integer> userTasks;\n    public UserTaskManager() {\n        userTasks = new HashMap<>();\n    }\n    public void updateTaskId(int userId, int taskId) {\n        userTasks.put(userId, taskId);\n    }\n    public boolean checkTaskId(int userId, int expectedTaskId) {\n        if (userTasks.containsKey(userId)) {\n            return userTasks.get(userId) == expectedTaskId;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        manager.updateTaskId(2, 200);\n        System.out.println(\"检查用户1的任务ID是否更新为100: \" + manager.checkTaskId(1, 100)); \n        System.out.println(\"检查用户2的任务ID是否更新为200: \" + manager.checkTaskId(2, 200)); \n    }\n}", "content": "Please design a Java method that is used to update the user's task ID. The task ID is an integer used to identify the user's current task.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class UserTaskManager {\n    private Map<Integer, Integer> userTasks;\n    public UserTaskManager() {\n    }\n    public void updateTaskId(int userId, int taskId) {\n    }\n    public boolean checkTaskId(int userId, int expectedTaskId) {\n    }\n}\n```", "id": 1628, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class UserTaskManagerTest {\n    @Test\n    public void testUpdateTaskId_NewUser() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        assertTrue(manager.checkTaskId(1, 100));\n    }\n    @Test\n    public void testUpdateTaskId_ExistingUser() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        manager.updateTaskId(1, 200);\n        assertTrue(manager.checkTaskId(1, 200));\n    }\n    @Test\n    public void testCheckTaskId_CorrectTaskId() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        assertTrue(manager.checkTaskId(1, 100));\n    }\n    @Test\n    public void testCheckTaskId_IncorrectTaskId() {\n        UserTaskManager manager = new UserTaskManager();\n        manager.updateTaskId(1, 100);\n        assertFalse(manager.checkTaskId(1, 200));\n    }\n    @Test\n    public void testCheckTaskId_UserDoesNotExist() {\n        UserTaskManager manager = new UserTaskManager();\n        assertFalse(manager.checkTaskId(1, 100));\n    }\n}"}}
{"canonical_solution": "import java.lang.Class;\npublic class ClassLoaderChecker {\n    public static boolean canLoadClass(String className) {\n        try {\n            Class.forName(className);\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n    public static void main(String[] args) {\n        String testClassName1 = \"java.lang.String\"; \n        String testClassName2 = \"com.unknown.NonExistentClass\"; \n        System.out.println(\"Can load \" + testClassName1 + \": \" + canLoadClass(testClassName1));\n        System.out.println(\"Can load \" + testClassName2 + \": \" + canLoadClass(testClassName2));\n    }\n}", "content": "Please describe the task of the function that checks if a given class name can be successfully loaded. If the given class name can be successfully loaded, the function should return `true`; otherwise, it should return `false`. Ensure that the function can handle any exceptions to prevent crashing.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Class;\npublic class ClassLoaderChecker {\n    public static boolean canLoadClass(String className) {\n    }\n}\n```", "id": 1629, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.Test;\npublic class ClassLoaderCheckerTest {\n    @Test\n    public void testCanLoadExistingClass() {\n        assertTrue(ClassLoaderChecker.canLoadClass(\"java.lang.String\"));\n    }\n    @Test\n    public void testCannotLoadNonExistentClass() {\n        assertFalse(ClassLoaderChecker.canLoadClass(\"com.unknown.NonExistentClass\"));\n    }\n    @Test\n    public void testCanLoadAnotherExistingClass() {\n        assertTrue(ClassLoaderChecker.canLoadClass(\"java.util.ArrayList\"));\n    }\n    @Test\n    public void testCannotLoadIncorrectClassName() {\n        assertFalse(ClassLoaderChecker.canLoadClass(\"incorrect.ClassName\"));\n    }\n    @Test\n    public void testCanLoadPrimitiveType() {\n        assertFalse(ClassLoaderChecker.canLoadClass(\"int\"));\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class StudentRegistrationValidator {\n    public static void validateStudentInput(StudentDto studentDto) {\n        String name = studentDto.getName();\n        Integer age = studentDto.getAge();\n        Integer grade = studentDto.getGrade();\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"学生姓名不能为空。\");\n        }\n        if (age == null || age < 6 || age > 18) {\n            throw new IllegalArgumentException(\"学生年龄必须在6到18岁之间。\");\n        }\n        if (grade == null || grade < 1 || grade > 12) {\n            throw new IllegalArgumentException(\"学生班级必须在1到12之间。\");\n        }\n    }\n    public static void main(String[] args) {\n        StudentDto student1 = new StudentDto(\"张三\", 15, 9);\n        StudentDto student2 = new StudentDto(\"\", 20, 5);\n        StudentDto student3 = new StudentDto(\"李四\", 7, 0);\n        try {\n            validateStudentInput(student1);\n            System.out.println(\"学生1验证通过。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            validateStudentInput(student2);\n            System.out.println(\"学生2验证通过。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            validateStudentInput(student3);\n            System.out.println(\"学生3验证通过。\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\nclass StudentDto {\n    private String name;\n    private Integer age;\n    private Integer grade;\n    public StudentDto(String name, Integer age, Integer grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n    public String getName() {\n        return name;\n    }\n    public Integer getAge() {\n        return age;\n    }\n    public Integer getGrade() {\n        return grade;\n    }\n}", "content": "Please design a Java function to validate student registration information. The student information includes name, age, and class. The name cannot be empty, the age should be between 6 and 18 years old, and the class should be an integer between 1 and 12. If any of these conditions are not met, an IllegalArgumentException should be thrown with an appropriate error message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class StudentRegistrationValidator {\n    public static void validateStudentInput(StudentDto studentDto) {\n    }\n}\nclass StudentDto {\n    private String name;\n    private Integer age;\n    private Integer grade;\n    public StudentDto(String name, Integer age, Integer grade) {\n    }\n    public String getName() {\n        return name;\n    }\n    public Integer getAge() {\n        return age;\n    }\n    public Integer getGrade() {\n        return grade;\n    }\n}\n```", "id": 1630, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.junit.rules.ExpectedException;\nimport org.junit.Rule;\npublic class StudentRegistrationValidatorTest {\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n    @Test\n    public void testValidateStudentInput_withValidInput() {\n        StudentDto validStudent = new StudentDto(\"张三\", 15, 9);\n        StudentRegistrationValidator.validateStudentInput(validStudent);\n    }\n    @Test\n    public void testValidateStudentInput_withEmptyName() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生姓名不能为空。\");\n        StudentDto studentWithEmptyName = new StudentDto(\"\", 15, 9);\n        StudentRegistrationValidator.validateStudentInput(studentWithEmptyName);\n    }\n    @Test\n    public void testValidateStudentInput_withNullName() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生姓名不能为空。\");\n        StudentDto studentWithNullName = new StudentDto(null, 15, 9);\n        StudentRegistrationValidator.validateStudentInput(studentWithNullName);\n    }\n    @Test\n    public void testValidateStudentInput_withInvalidAge() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生年龄必须在6到18岁之间。\");\n        StudentDto studentWithInvalidAge = new StudentDto(\"李四\", 5, 9);\n        StudentRegistrationValidator.validateStudentInput(studentWithInvalidAge);\n    }\n    @Test\n    public void testValidateStudentInput_withInvalidGrade() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"学生班级必须在1到12之间。\");\n        StudentDto studentWithInvalidGrade = new StudentDto(\"王五\", 15, 13);\n        StudentRegistrationValidator.validateStudentInput(studentWithInvalidGrade);\n    }\n}"}}
{"canonical_solution": "import java.time.LocalDateTime;\npublic class MessageDetails {\n    String sender;\n    String receiver;\n    String serviceType;\n    String messageType;\n    String messageId;\n    LocalDateTime creationTime;\n    boolean isDuplicated;\n    public void cloneTo(MessageDetails target) {\n        target.sender = this.sender;\n        target.receiver = this.receiver;\n        target.serviceType = this.serviceType;\n        target.messageType = this.messageType;\n        target.messageId = this.messageId;\n        target.creationTime = this.creationTime;\n        target.isDuplicated = this.isDuplicated;\n    }\n    public static void main(String[] args) {\n        MessageDetails original = new MessageDetails();\n        original.sender = \"Alice\";\n        original.receiver = \"Bob\";\n        original.serviceType = \"Email\";\n        original.messageType = \"Greeting\";\n        original.messageId = \"12345\";\n        original.creationTime = LocalDateTime.now();\n        original.isDuplicated = false;\n        MessageDetails cloned = new MessageDetails();\n        original.cloneTo(cloned);\n        System.out.println(\"Sender matches: \" + original.sender.equals(cloned.sender));\n        System.out.println(\"Receiver matches: \" + original.receiver.equals(cloned.receiver));\n        System.out.println(\"ServiceType matches: \" + original.serviceType.equals(cloned.serviceType));\n        System.out.println(\"MessageType matches: \" + original.messageType.equals(cloned.messageType));\n        System.out.println(\"MessageId matches: \" + original.messageId.equals(cloned.messageId));\n        System.out.println(\"CreationTime matches: \" + original.creationTime.equals(cloned.creationTime));\n        System.out.println(\"IsDuplicated matches: \" + (original.isDuplicated == cloned.isDuplicated));\n    }\n}", "content": "Please design a Java class `MessageDetails`, which includes several attributes: `sender`, `receiver`, `serviceType`, `messageType`, `messageId`, `creationTime`, and `isDuplicated`. You need to implement a method `cloneTo`, which accepts another `MessageDetails` object as a parameter and copies all the attributes of the current object to the parameter object.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.time.LocalDateTime;\npublic class MessageDetails {\n    String sender;\n    String receiver;\n    String serviceType;\n    String messageType;\n    String messageId;\n    LocalDateTime creationTime;\n    boolean isDuplicated;\n    public void cloneTo(MessageDetails target) {\n    }\n}\n```", "id": 1631, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.LocalDateTime;\npublic class MessageDetailsTest {\n    private MessageDetails original;\n    private MessageDetails cloned;\n    @BeforeEach\n    public void setUp() {\n        original = new MessageDetails();\n        original.sender = \"Alice\";\n        original.receiver = \"Bob\";\n        original.serviceType = \"Email\";\n        original.messageType = \"Greeting\";\n        original.messageId = \"12345\";\n        original.creationTime = LocalDateTime.now();\n        original.isDuplicated = false;\n        cloned = new MessageDetails();\n    }\n    @Test\n    public void testCloneToSender() {\n        original.cloneTo(cloned);\n        assertEquals(original.sender, cloned.sender);\n    }\n    @Test\n    public void testCloneToReceiver() {\n        original.cloneTo(cloned);\n        assertEquals(original.receiver, cloned.receiver);\n    }\n    @Test\n    public void testCloneToServiceType() {\n        original.cloneTo(cloned);\n        assertEquals(original.serviceType, cloned.serviceType);\n    }\n    @Test\n    public void testCloneToMessageType() {\n        original.cloneTo(cloned);\n        assertEquals(original.messageType, cloned.messageType);\n    }\n    @Test\n    public void testCloneToAllFields() {\n        original.cloneTo(cloned);\n        assertEquals(original.messageId, cloned.messageId);\n        assertEquals(original.creationTime, cloned.creationTime);\n        assertEquals(original.isDuplicated, cloned.isDuplicated);\n    }\n}"}}
{"canonical_solution": "import java.io.StringWriter;\nimport java.io.PrintWriter;\nimport java.net.UnknownHostException;\npublic class ExceptionStackTraceHelper {\n    public static String getExceptionStackTrace(Throwable exception) {\n        if (exception == null) {\n            return \"\";\n        }\n        Throwable currentException = exception;\n        while (currentException != null) {\n            if (currentException instanceof UnknownHostException) {\n                return \"\";\n            }\n            currentException = currentException.getCause();\n        }\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        exception.printStackTrace(printWriter);\n        printWriter.flush();\n        return stringWriter.toString();\n    }\n    public static void main(String[] args) {\n        try {\n            throw new Exception(\"测试异常\");\n        } catch (Exception e) {\n            System.out.println(getExceptionStackTrace(e));\n        }\n        try {\n            throw new UnknownHostException(\"未知主机\");\n        } catch (Exception e) {\n            System.out.println(getExceptionStackTrace(e).equals(\"\") ? \"测试通过: UnknownHostException\" : \"测试失败\");\n        }\n    }\n}", "content": "Please write a Java method that accepts an exception object as a parameter and returns the stack trace information of that exception as a string representation. If the passed exception object is `null`, or if the exception or any of its cause chain contains an `UnknownHostException`, the method should return an empty string. Ensure that your method can handle all the exceptions in the chain and check for the presence of `UnknownHostException` before returning the stack trace information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.StringWriter;\nimport java.io.PrintWriter;\nimport java.net.UnknownHostException;\npublic class ExceptionStackTraceHelper {\n    public static String getExceptionStackTrace(Throwable exception) {\n    }\n}\n```", "id": 1632, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.net.UnknownHostException;\nimport org.junit.jupiter.api.Test;\npublic class ExceptionStackTraceHelperTest {\n    @Test\n    public void testGetExceptionStackTrace_NullException() {\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(null);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_UnknownHostException() {\n        UnknownHostException unknownHostException = new UnknownHostException(\"测试未知主机异常\");\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(unknownHostException);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_GenericException() {\n        Exception exception = new Exception(\"测试异常\");\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        exception.printStackTrace(printWriter);\n        printWriter.flush();\n        String expected = stringWriter.toString();\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(exception);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_CausedByUnknownHostException() {\n        Exception exception = new Exception(\"外部异常\", new UnknownHostException(\"内部未知主机异常\"));\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(exception);\n        assertEquals(\"\", result);\n    }\n    @Test\n    public void testGetExceptionStackTrace_CausedByOtherException() {\n        Exception cause = new Exception(\"内部异常\");\n        Exception exception = new Exception(\"外部异常\", cause);\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        exception.printStackTrace(printWriter);\n        printWriter.flush();\n        String expected = stringWriter.toString();\n        String result = ExceptionStackTraceHelper.getExceptionStackTrace(exception);\n        assertEquals(expected, result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookQuerySystem {\n    private Map<String, String> bookDatabase = new HashMap<>();\n    public BookQuerySystem() {\n        bookDatabase.put(\"001\", \"《Java编程思想》\");\n        bookDatabase.put(\"002\", \"《Effective Java》\");\n        bookDatabase.put(\"003\", \"《Spring实战》\");\n    }\n    public String queryBookDetail(String bookId) throws BookNotFoundException {\n        if (!bookDatabase.containsKey(bookId)) {\n            throw new BookNotFoundException(\"图书ID不存在: \" + bookId);\n        }\n        return bookDatabase.get(bookId);\n    }\n    static class BookNotFoundException extends Exception {\n        public BookNotFoundException(String message) {\n            super(message);\n        }\n    }\n    public static void main(String[] args) {\n        BookQuerySystem system = new BookQuerySystem();\n        try {\n            String bookDetail = system.queryBookDetail(\"002\");\n            System.out.println(\"查询成功: \" + bookDetail);\n        } catch (BookNotFoundException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}", "content": "Assume you are developing a library management system and need to implement a feature to query detailed information about a book. Given a book ID, you need to return the detailed information of the book. If the book ID does not exist, a custom exception should be thrown. Please design this feature.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookQuerySystem {\n    private Map<String, String> bookDatabase = new HashMap<>();\n    public BookQuerySystem() {\n    }\n    public String queryBookDetail(String bookId) throws BookNotFoundException {\n    }\n    static class BookNotFoundException extends Exception {\n        public BookNotFoundException(String message) {\n        }\n    }\n}\n```", "id": 1633, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookQuerySystemTest {\n    @Test\n    void testQueryBookDetailExistingId() throws BookQuerySystem.BookNotFoundException {\n        BookQuerySystem system = new BookQuerySystem();\n        String result = system.queryBookDetail(\"001\");\n        assertEquals(\"《Java编程思想》\", result);\n    }\n    @Test\n    void testQueryBookDetailNonExistingId() {\n        BookQuerySystem system = new BookQuerySystem();\n        assertThrows(BookQuerySystem.BookNotFoundException.class, () -> {\n            system.queryBookDetail(\"999\");\n        });\n    }\n    @Test\n    void testQueryBookDetailAnotherExistingId() throws BookQuerySystem.BookNotFoundException {\n        BookQuerySystem system = new BookQuerySystem();\n        String result = system.queryBookDetail(\"002\");\n        assertEquals(\"《Effective Java》\", result);\n    }\n    @Test\n    void testQueryBookDetailEmptyId() {\n        BookQuerySystem system = new BookQuerySystem();\n        assertThrows(BookQuerySystem.BookNotFoundException.class, () -> {\n            system.queryBookDetail(\"\");\n        });\n    }\n    @Test\n    void testQueryBookDetailNullId() {\n        BookQuerySystem system = new BookQuerySystem();\n        assertThrows(BookQuerySystem.BookNotFoundException.class, () -> {\n            system.queryBookDetail(null);\n        });\n    }\n}"}}
{"canonical_solution": "public class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n    public String divide(double a, double b) {\n        if (b == 0) {\n            return \"错误：除数不能为0。\";\n        }\n        return Double.toString(a / b);\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        System.out.println(\"10 + 5 = \" + calculator.add(10, 5));\n        System.out.println(\"20 - 10 = \" + calculator.subtract(20, 10));\n        System.out.println(\"10 * 5 = \" + calculator.multiply(10, 5));\n        System.out.println(\"10 / 2 = \" + calculator.divide(10, 2));\n        System.out.println(\"10 / 0 = \" + calculator.divide(10, 0));\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This class should be able to perform basic arithmetic operations: addition, subtraction, multiplication, and division. Make sure your program can handle division by zero, and when attempting to divide by zero, it should return a specific error message instead of crashing. Please follow these guidelines to complete this task:\n\n- Do not use any external libraries.\n- Ensure the code is self-contained and clear.\n- Use appropriate variable names and function names to make the code easy to understand.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\npublic class SimpleCalculator {\n    public double add(double a, double b) {\n    }\n    public double subtract(double a, double b) {\n    }\n    public double multiply(double a, double b) {\n    }\n    public String divide(double a, double b) {\n    }\n}\n```", "id": 1634, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAdd() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(15, calculator.add(10, 5));\n        assertEquals(0, calculator.add(-1, 1));\n        assertEquals(-3, calculator.add(-1.5, -1.5));\n    }\n    @Test\n    public void testSubtract() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(10, calculator.subtract(20, 10));\n        assertEquals(0, calculator.subtract(5, 5));\n        assertEquals(-1, calculator.subtract(1, 2));\n    }\n    @Test\n    public void testMultiply() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(50, calculator.multiply(10, 5));\n        assertEquals(0, calculator.multiply(10, 0));\n        assertEquals(-10, calculator.multiply(10, -1));\n    }\n    @Test\n    public void testDivide() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"5.0\", calculator.divide(10, 2));\n        assertEquals(\"错误：除数不能为0。\", calculator.divide(10, 0));\n        assertEquals(\"-5.0\", calculator.divide(10, -2));\n    }\n    @Test\n    public void testDivideByZeroException() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"错误：除数不能为0。\", calculator.divide(10, 0));\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.Stack;\npublic class ReverseFileContent {\n    public static void reversePrint(String filePath) throws FileNotFoundException {\n        File file = new File(filePath);\n        if (!file.exists()) {\n            throw new FileNotFoundException(\"文件不存在: \" + filePath);\n        }\n        Stack<String> lines = new Stack<>();\n        try (Scanner scanner = new Scanner(file)) {\n            while (scanner.hasNextLine()) {\n                lines.push(scanner.nextLine());\n            }\n        }\n        while (!lines.isEmpty()) {\n            System.out.println(lines.pop());\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            reversePrint(\"path/to/your/textfile.txt\");\n        } catch (FileNotFoundException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java program to implement a simple reverse output function for the content of a text file. Given the path of a text file, you need to read its content and reverse the content of each line, then output it to the console. Make sure that your program can handle possible exceptions that may occur during file reading, and check whether the file exists before reading it.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\nimport java.util.Stack;\npublic class ReverseFileContent {\n    public static void reversePrint(String filePath) throws FileNotFoundException {\n    }\n}\n```", "id": 1635, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Rule;\nimport org.junit.rules.ExpectedException;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Stack;\nimport java.util.Scanner;\npublic class ReverseFileContentTest {\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n    @Test\n    public void testReversePrint_FileNotFound() throws FileNotFoundException {\n        thrown.expect(FileNotFoundException.class);\n        thrown.expectMessage(\"文件不存在: invalid/path/to/textfile.txt\");\n        ReverseFileContent.reversePrint(\"invalid/path/to/textfile.txt\");\n    }\n    @Test\n    public void testReversePrint_EmptyFile() throws FileNotFoundException {\n        File tempFile = new File(\"empty.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"empty.txt\");\n        tempFile.delete(); \n    }\n    @Test\n    public void testReversePrint_SingleLineFile() throws FileNotFoundException {\n        File tempFile = new File(\"singleline.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n            writer.println(\"single line\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"singleline.txt\");\n        tempFile.delete(); \n    }\n    @Test\n    public void testReversePrint_MultiLineFile() throws FileNotFoundException {\n        File tempFile = new File(\"multiline.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n            writer.println(\"line 1\");\n            writer.println(\"line 2\");\n            writer.println(\"line 3\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"multiline.txt\");\n        tempFile.delete(); \n    }\n    @Test\n    public void testReversePrint_FileWithBlankLines() throws FileNotFoundException {\n        File tempFile = new File(\"filewithblanks.txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile)) {\n            writer.println(\"line 1\");\n            writer.println(\"\");\n            writer.println(\"line 2\");\n            writer.println(\"\");\n            writer.println(\"line 3\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        ReverseFileContent.reversePrint(\"filewithblanks.txt\");\n        tempFile.delete(); \n    }\n}"}}
{"canonical_solution": "import java.util.Date;\npublic class ParkingDurationCalculator {\n    public static int calculateParkingDuration(Date arrival, Date departure) {\n        if (departure.before(arrival)) {\n            return -1; \n        }\n        long durationInMillis = departure.getTime() - arrival.getTime();\n        return (int) (durationInMillis / (1000 * 60 * 60)); \n    }\n    public static void main(String[] args) {\n        Date arrival = new Date(120, 5, 20, 8, 0); \n        Date departure = new Date(120, 5, 20, 12, 0); \n        System.out.println(\"停车时长（小时）: \" + calculateParkingDuration(arrival, departure)); \n        Date earlyDeparture = new Date(120, 5, 20, 7, 0); \n        System.out.println(\"停车时长（小时）: \" + calculateParkingDuration(arrival, earlyDeparture)); \n    }\n}", "content": "Please write a Java program to calculate the parking time. Suppose you have a parking lot management system that needs to calculate the parking duration based on the vehicle's arrival and departure times. You need to implement a method that accepts two parameters: the vehicle's arrival time and departure time, both of which are of type `java.util.Date`. Your task is to calculate and return the vehicle's parking duration in hours, ignoring time below minutes. If the departure time is earlier than the arrival time, return -1 to indicate an error.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Date;\npublic class ParkingDurationCalculator {\n    public static int calculateParkingDuration(Date arrival, Date departure) {\n    }\n}\n```", "id": 1636, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.Date;\npublic class ParkingDurationCalculatorTest {\n    @Test\n    public void testCalculateParkingDuration_sameTime() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 8, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(0, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_positiveDuration() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 12, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(4, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_negativeDuration() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 7, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(-1, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_partHourDuration() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 10, 30);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(2, result);\n    }\n    @Test\n    public void testCalculateParkingDuration_exactHourBoundary() {\n        Date arrival = new Date(120, 5, 20, 8, 0);\n        Date departure = new Date(120, 5, 20, 10, 0);\n        int result = ParkingDurationCalculator.calculateParkingDuration(arrival, departure);\n        assertEquals(2, result);\n    }\n}"}}
{"canonical_solution": "import java.util.regex.Pattern;\npublic class DomainValidator {\n    public static boolean checkDomainValidity(String domain) {\n        Pattern pattern = Pattern.compile(\"[?]\");\n        return !pattern.matcher(domain).find();\n    }\n    public static void main(String[] args) {\n        String[] testDomains = {\"example.com\", \"invalid?domain.com\", \"another.valid-domain.com\", \"invalid.domain?com\"};\n        for (String domain : testDomains) {\n            boolean isValid = checkDomainValidity(domain);\n            System.out.println(\"域名 \\\"\" + domain + \"\\\" 是否有效: \" + isValid);\n        }\n    }\n}", "content": "Please write a Java program to verify if the domain part of a URL is valid. A domain is considered invalid if it contains special characters, such as a question mark (?). You need to implement a method called `checkDomainValidity`, which takes a string parameter representing the domain and returns a boolean value indicating whether the domain is valid. A valid domain returns `true`, while a domain that contains special characters returns `false`.\n\nMake sure your code includes a class called `DomainValidator` and a static method called `checkDomainValidity`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.regex.Pattern;\npublic class DomainValidator {\n    public static boolean checkDomainValidity(String domain) {\n    }\n}\n```", "id": 1637, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport java.util.regex.Pattern;\npublic class DomainValidator {\n    public static boolean checkDomainValidity(String domain) {\n        Pattern pattern = Pattern.compile(\"[?]\");\n        return !pattern.matcher(domain).find();\n    }\n    public static void main(String[] args) {\n        String[] testDomains = {\"example.com\", \"invalid?domain.com\", \"another.valid-domain.com\", \"invalid.domain?com\"};\n        for (String domain : testDomains) {\n            boolean isValid = checkDomainValidity(domain);\n            System.out.println(\"域名 \\\"\" + domain + \"\\\" 是否有效: \" + isValid);\n        }\n    }\n}\nclass DomainValidatorTest {\n    @Test\n    public void testValidDomain1() {\n        assertTrue(DomainValidator.checkDomainValidity(\"example.com\"));\n    }\n    @Test\n    public void testValidDomain2() {\n        assertTrue(DomainValidator.checkDomainValidity(\"another.valid-domain.com\"));\n    }\n    @Test\n    public void testInvalidDomain1() {\n        assertFalse(DomainValidator.checkDomainValidity(\"invalid?domain.com\"));\n    }\n    @Test\n    public void testInvalidDomain2() {\n        assertFalse(DomainValidator.checkDomainValidity(\"invalid.domain?com\"));\n    }\n    @Test\n    public void testValidDomainWithSubdomain() {\n        assertTrue(DomainValidator.checkDomainValidity(\"sub.example.com\"));\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class PropertyRenamer {\n    public String[] renameProperty(NameTransformer transformer, String[] propertyNames) {\n        if (transformer == null || propertyNames == null) {\n            return propertyNames;\n        }\n        String[] transformedNames = new String[propertyNames.length];\n        for (int i = 0; i < propertyNames.length; i++) {\n            transformedNames[i] = transformer.transform(propertyNames[i]);\n        }\n        return transformedNames;\n    }\n    public void checkFunction(String[] originalNames, String[] expectedNames, NameTransformer transformer) {\n        String[] result = renameProperty(transformer, originalNames);\n        if (Arrays.equals(result, expectedNames)) {\n            System.out.println(\"转换正确！\");\n        } else {\n            System.out.println(\"转换错误，期望的结果是：\" + Arrays.toString(expectedNames) + \"，但实际结果是：\" + Arrays.toString(result));\n        }\n    }\n}", "content": "Please write a Java class `PropertyRenamer` that includes a method `renameProperty`, which takes a property name transformer `NameTransformer` and an array of property names `propertyNames`. The purpose of this method is to use the `NameTransformer` to transform each property name in the `propertyNames` array and return a new array containing the transformed property names. Ensure that your code can handle the cases where the transformer or the property names array is null.\n\nBelow is a simple `NameTransformer` interface and an implementation example that you can use to test your `PropertyRenamer` class:\n\n```java\nimport java.util.Arrays;\n\ninterface NameTransformer {\n    String transform(String propertyName);\n}\n\nclass PrefixNameTransformer implements NameTransformer {\n    private String prefix;\n\n    public PrefixNameTransformer(String prefix) {\n        this.prefix = prefix;\n    }\n\n    @Override\n    public String transform(String propertyName) {\n        return prefix + propertyName;\n    }\n}\n\npublic class PropertyRenamer {\n    // TODO: Implement the renameProperty method\n}\n```\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class PropertyRenamer {\n    public String[] renameProperty(NameTransformer transformer, String[] propertyNames) {\n    }\n    public void checkFunction(String[] originalNames, String[] expectedNames, NameTransformer transformer) {\n    }\n}\n```", "id": 1638, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class PropertyRenamerTest {\n    @Test\n    public void testRenameProperty_withValidTransformerAndPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        String[] propertyNames = {\"name\", \"address\", \"email\"};\n        String[] expectedNames = {\"NAME\", \"ADDRESS\", \"EMAIL\"};\n        assertArrayEquals(expectedNames, renamer.renameProperty(transformer, propertyNames));\n    }\n    @Test\n    public void testRenameProperty_withNullTransformer() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        String[] propertyNames = {\"name\", \"address\", \"email\"};\n        assertArrayEquals(propertyNames, renamer.renameProperty(null, propertyNames));\n    }\n    @Test\n    public void testRenameProperty_withNullPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        assertNull(renamer.renameProperty(transformer, null));\n    }\n    @Test\n    public void testRenameProperty_withEmptyPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        String[] propertyNames = {};\n        String[] expectedNames = {};\n        assertArrayEquals(expectedNames, renamer.renameProperty(transformer, propertyNames));\n    }\n    @Test\n    public void testRenameProperty_withValidTransformerAndMixedPropertyNames() {\n        PropertyRenamer renamer = new PropertyRenamer();\n        NameTransformer transformer = new NameTransformer() {\n            public String transform(String name) {\n                return name.toUpperCase();\n            }\n        };\n        String[] propertyNames = {\"name\", \"\", \"email\"};\n        String[] expectedNames = {\"NAME\", \"\", \"EMAIL\"};\n        assertArrayEquals(expectedNames, renamer.renameProperty(transformer, propertyNames));\n    }\n}\ninterface NameTransformer {\n    String transform(String name);\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nclass Book {\n    private String title;\n    private String author;\n    private String isbn;\n    private int year;\n    public Book(String title, String author, String isbn, int year) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n        this.year = year;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public String getAuthor() {\n        return author;\n    }\n    public String getIsbn() {\n        return isbn;\n    }\n    public int getYear() {\n        return year;\n    }\n}\nclass BookReader {\n    public static List<Book> getAll() {\n        List<Book> books = new ArrayList<>();\n        books.add(new Book(\"Java编程思想\", \"Bruce Eckel\", \"978-0131872486\", 2006));\n        books.add(new Book(\"Effective Java\", \"Joshua Bloch\", \"978-0134685991\", 2018));\n        return books;\n    }\n}\npublic class LibraryDisplay {\n    private static final int WIDTH = 50;\n    public static void displayAllBooks() {\n        List<Book> books = BookReader.getAll();\n        if (!books.isEmpty()) {\n            System.out.println(\"----DISPLAYING ALL BOOKS----\");\n            for (Book book : books) {\n                for (int i = 0; i < WIDTH; i++)\n                    System.out.print(\"-\");\n                System.out.print(\"\\n\");\n                System.out.println(\"TITLE: \" + book.getTitle());\n                System.out.println(\"AUTHOR: \" + book.getAuthor());\n                System.out.println(\"ISBN: \" + book.getIsbn());\n                System.out.println(\"YEAR: \" + book.getYear());\n                for (int i = 0; i < WIDTH; i++)\n                    System.out.print(\"-\");\n                System.out.print(\"\\n\");\n            }\n        } else {\n            System.out.println(\"NO BOOKS FOUND\");\n        }\n    }\n    public static void main(String[] args) {\n        displayAllBooks();\n    }\n}", "content": "Please write a Java program that displays detailed information about all the books in a library. Each book includes a title, author, ISBN number, and publication year. The program should read this information from a predefined list of books and display it in a formatted manner. Include separators before and after displaying each book's information. Additionally, if the book list is empty, an appropriate message should be printed.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass Book {\n    private String title;\n    private String author;\n    private String isbn;\n    private int year;\n    public Book(String title, String author, String isbn, int year) {\n    }\n    public String getTitle() {\n    }\n    public String getAuthor() {\n    }\n    public String getIsbn() {\n    }\n    public int getYear() {\n    }\n}\nclass BookReader {\n    public static List<Book> getAll() {\n    }\n}\npublic class LibraryDisplay {\n    private static final int WIDTH = 50;\n    public static void displayAllBooks() {\n    }\n}\n```", "id": 1639, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testBookConstructorAndGetters() {\n        Book book = new Book(\"Java编程思想\", \"Bruce Eckel\", \"978-0131872486\", 2006);\n        assertEquals(\"Java编程思想\", book.getTitle());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n        assertEquals(\"978-0131872486\", book.getIsbn());\n        assertEquals(2006, book.getYear());\n    }\n}\nclass BookReaderTest {\n    @Test\n    void testGetAllBooksCount() {\n        List<Book> books = BookReader.getAll();\n        assertNotNull(books);\n        assertEquals(2, books.size());\n    }\n    @Test\n    void testGetAllBooksContents() {\n        List<Book> books = BookReader.getAll();\n        Book book1 = books.get(0);\n        Book book2 = books.get(1);\n        assertEquals(\"Java编程思想\", book1.getTitle());\n        assertEquals(\"Bruce Eckel\", book1.getAuthor());\n        assertEquals(\"978-0131872486\", book1.getIsbn());\n        assertEquals(2006, book1.getYear());\n        assertEquals(\"Effective Java\", book2.getTitle());\n        assertEquals(\"Joshua Bloch\", book2.getAuthor());\n        assertEquals(\"978-0134685991\", book2.getIsbn());\n        assertEquals(2018, book2.getYear());\n    }\n}\nclass LibraryDisplayTest {\n    @Test\n    void testDisplayAllBooks() {\n        boolean booksDisplayedCorrectly = false;\n        List<Book> books = BookReader.getAll();\n        if (!books.isEmpty()) {\n            booksDisplayedCorrectly = true;\n            for (Book book : books) {\n                assertNotNull(book.getTitle());\n                assertNotNull(book.getAuthor());\n                assertNotNull(book.getIsbn());\n                assertTrue(book.getYear() > 0);\n            }\n        }\n        assertTrue(booksDisplayedCorrectly);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass PersonAssert {\n    private Person actual;\n    private static final String ERROR_MESSAGE = \"\\n期望的年龄为:\\n  <%s>\\n但实际的年龄为:\\n  <%s>\";\n    public PersonAssert(Person actual) {\n        this.actual = actual;\n    }\n    public PersonAssert isNotNull() {\n        if (actual == null) {\n            throw new AssertionError(\"Person对象不应该为null\");\n        }\n        return this;\n    }\n    public PersonAssert assertAge(Integer expectedAge) {\n        isNotNull();\n        Integer actualAge = actual.getAge();\n        if (!Objects.equals(actualAge, expectedAge)) {\n            throw new AssertionError(String.format(ERROR_MESSAGE, expectedAge, actualAge));\n        }\n        return this;\n    }\n}\nclass Person {\n    private Integer age;\n    public Person(Integer age) {\n        this.age = age;\n    }\n    public Integer getAge() {\n        return age;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        check(25, true);\n        check(30, false);\n    }\n    static void check(Integer ageToTest, boolean shouldPass) {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        try {\n            personAssert.assertAge(ageToTest);\n            if (!shouldPass) {\n                System.out.println(\"应该抛出异常，因为实际年龄与期望年龄不符\");\n            } else {\n                System.out.println(\"断言成功，年龄匹配\");\n            }\n        } catch (AssertionError error) {\n            if (shouldPass) {\n                System.out.println(\"不应该抛出异常，因为实际年龄与期望年龄相符\");\n            } else {\n                System.out.println(\"断言失败，抛出异常，这是预期的\");\n            }\n        }\n    }\n}", "content": "Please design a Java class `PersonAssert` that asserts the age attribute of a `Person` object. If the assertion fails, it should throw an exception showing the expected age and the actual age. Please implement the `assertAge` method according to the following requirements:\n\n- The method should verify if the age of the `Person` object is equal to the given age.\n- If they are not equal, it should throw an exception providing detailed error information.\n- The method should support method chaining, i.e., return the current `PersonAssert` object so that other assertion methods can be called in succession.\n\nPlease provide a `Person` class containing only an `age` attribute and a corresponding `getAge` method.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass PersonAssert {\n    private Person actual;\n    private static final String ERROR_MESSAGE = \"\\n期望的年龄为:\\n  <%s>\\n但实际的年龄为:\\n  <%s>\";\n    public PersonAssert(Person actual) {\n    }\n    public PersonAssert isNotNull() {\n        return this;\n    }\n    public PersonAssert assertAge(Integer expectedAge) {\n        return this;\n    }\n}\nclass Person {\n    private Integer age;\n    public Person(Integer age) {\n    }\n    public Integer getAge() {\n        return null;\n    }\n}\n```", "id": 1640, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass PersonAssertTest {\n    @Test\n    void testIsNotNullWithNonNullPerson() {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        assertDoesNotThrow(personAssert::isNotNull);\n    }\n    @Test\n    void testIsNotNullWithNullPerson() {\n        Person person = null;\n        PersonAssert personAssert = new PersonAssert(person);\n        AssertionError thrown = assertThrows(AssertionError.class, personAssert::isNotNull);\n        assertEquals(\"Person对象不应该为null\", thrown.getMessage());\n    }\n    @Test\n    void testAssertAgeWithMatchingAge() {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        assertDoesNotThrow(() -> personAssert.assertAge(25));\n    }\n    @Test\n    void testAssertAgeWithNonMatchingAge() {\n        Person person = new Person(25);\n        PersonAssert personAssert = new PersonAssert(person);\n        AssertionError thrown = assertThrows(AssertionError.class, () -> personAssert.assertAge(30));\n        assertEquals(\"\\n期望的年龄为:\\n  <30>\\n但实际的年龄为:\\n  <25>\", thrown.getMessage());\n    }\n    @Test\n    void testAssertAgeWithNullAge() {\n        Person person = new Person(null);\n        PersonAssert personAssert = new PersonAssert(person);\n        AssertionError thrown = assertThrows(AssertionError.class, () -> personAssert.assertAge(25));\n        assertEquals(\"\\n期望的年龄为:\\n  <25>\\n但实际的年龄为:\\n  <null>\", thrown.getMessage());\n    }\n}"}}
{"canonical_solution": "import java.util.List;\nimport java.util.Arrays;\npublic class UrlRedirectService {\n    public String redirectToHomePage(List<String> roles) {\n        if (roles.contains(\"ADMIN\")) {\n            return \"/dashboard\";\n        } else if (roles.contains(\"USER\")) {\n            return \"/homepage\";\n        } else {\n            return \"/login\";\n        }\n    }\n    public static void main(String[] args) {\n        UrlRedirectService service = new UrlRedirectService();\n        assert \"/dashboard\".equals(service.redirectToHomePage(Arrays.asList(\"ADMIN\")));\n        assert \"/homepage\".equals(service.redirectToHomePage(Arrays.asList(\"USER\")));\n        assert \"/login\".equals(service.redirectToHomePage(Arrays.asList(\"GUEST\")));\n        System.out.println(\"所有测试用例都通过了!\");\n    }\n}", "content": "Please complete a Java programming task to implement a URL redirection service class that returns different page paths based on a user's roles.\n\n**Task Requirements:**\n\nImplement a Java class named `UrlRedirectService` that includes the following method:\n\n- **Method Signature**: `public String redirectToHomePage(List<String> roles)`\n- **Parameter Explanation**: The method takes a list of strings, `roles`, which represents the user's roles.\n- **Return Value**: Based on the list of roles, return the corresponding page path:\n  - If the role list contains `\"ADMIN\"`, return `\"/dashboard\"`.\n  - If the role list contains `\"USER\"` (but does not contain `\"ADMIN\"`), return `\"/homepage\"`.\n  - If the role list contains neither `\"ADMIN\"` nor `\"USER\"`, return `\"/login\"`.\n\nPlease implement the complete code in Java without a `Main` function, adhering to the following type definition:\n\n```java\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class UrlRedirectService {\n    public String redirectToHomePage(List<String> roles) { }\n}\n```", "id": 1641, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.List;\nimport java.util.Arrays;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class UrlRedirectServiceTest {\n    @Test\n    public void testRedirectToHomePage_AdminRole() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"ADMIN\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/dashboard\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_UserRole() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"USER\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/homepage\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_GuestRole() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"GUEST\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/login\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_EmptyRoles() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList();\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/login\", result);\n    }\n    @Test\n    public void testRedirectToHomePage_MultipleRoles() {\n        UrlRedirectService service = new UrlRedirectService();\n        List<String> roles = Arrays.asList(\"USER\", \"ADMIN\");\n        String result = service.redirectToHomePage(roles);\n        assertEquals(\"/dashboard\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class InventoryManager {\n    public boolean removeProductAsync(String productName) throws ExecutionException, InterruptedException {\n        CompletableFuture<Boolean> future = CompletableFuture.supplyAsync(() -> {\n            if (\"电视机\".equals(productName)) {\n                return true; \n            } else {\n                return false; \n            }\n        });\n        boolean removed = future.get(); \n        return removed;\n    }\n    public static void main(String[] args) {\n        InventoryManager manager = new InventoryManager();\n        try {\n            boolean isRemoved = manager.removeProductAsync(\"电视机\");\n            System.out.println(\"商品移除状态: \" + (isRemoved ? \"已移除\" : \"未找到\"));\n            isRemoved = manager.removeProductAsync(\"冰箱\");\n            System.out.println(\"商品移除状态: \" + (isRemoved ? \"已移除\" : \"未找到\"));\n        } catch (ExecutionException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}", "content": "Please write a Java method that asynchronously checks whether a product has been removed from the inventory of an online store. If the product is successfully removed, return `true`; if the product is not found, return `false`. Ensure that your code is self-contained and includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class InventoryManager {\n    public boolean removeProductAsync(String productName) throws ExecutionException, InterruptedException {\n    }\n}\n```", "id": 1642, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.concurrent.ExecutionException;\npublic class InventoryManagerTest {\n    @Test\n    public void testRemoveProductAsyncWithExistingProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"电视机\");\n        assertTrue(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithNonExistingProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"冰箱\");\n        assertFalse(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithNullProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(null);\n        assertFalse(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithEmptyString() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"\");\n        assertFalse(result);\n    }\n    @Test\n    public void testRemoveProductAsyncWithDifferentProduct() throws ExecutionException, InterruptedException {\n        InventoryManager manager = new InventoryManager();\n        boolean result = manager.removeProductAsync(\"手机\");\n        assertFalse(result);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass Student {\n    private Map<Course, Integer> scores; \n    public Student() {\n        this.scores = new HashMap<>();\n    }\n    public void addScore(Course course, int score) {\n        scores.put(course, score);\n    }\n    public int getScore(Course course) {\n        return scores.getOrDefault(course, 0);\n    }\n}\nclass Course {\n    private String name; \n    public Course(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\npublic class ExamChecker {\n    static boolean isPassed(Student student, Course course) {\n        return student.getScore(course) >= 60;\n    }\n    public static void main(String[] args) {\n        Student student = new Student();\n        Course math = new Course(\"数学\");\n        student.addScore(math, 75); \n        boolean passed = isPassed(student, math);\n        System.out.println(\"学生是否通过了数学考试？ \" + passed); \n    }\n}", "content": "Please write a Java method to check whether a student has passed a specific course exam. The method accepts two parameters: a `Student` object and a `Course` object. If the student has passed the course exam, the method returns `true`; otherwise, it returns `false`. The condition for a student to pass the exam is: the student's score must be greater than or equal to 60 points.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass Student {\n    private Map<Course, Integer> scores; \n    public Student() {\n    }\n    public void addScore(Course course, int score) {\n    }\n    public int getScore(Course course) {\n    }\n}\nclass Course {\n    private String name; \n    public Course(String name) {\n    }\n    public String getName() {\n    }\n}\npublic class ExamChecker {\n    static boolean isPassed(Student student, Course course) {\n    }\n}\n```", "id": 1643, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentTest {\n    @Test\n    void testAddScore() {\n        Student student = new Student();\n        Course math = new Course(\"数学\");\n        student.addScore(math, 75);\n        assertEquals(75, student.getScore(math));\n    }\n    @Test\n    void testGetScoreWithoutAdding() {\n        Student student = new Student();\n        Course science = new Course(\"科学\");\n        assertEquals(0, student.getScore(science));\n    }\n    @Test\n    void testGetScoreWithDifferentSubject() {\n        Student student = new Student();\n        Course english = new Course(\"英语\");\n        Course history = new Course(\"历史\");\n        student.addScore(english, 85);\n        assertEquals(0, student.getScore(history));\n    }\n    @Test\n    void testIsPassed() {\n        Student student = new Student();\n        Course math = new Course(\"数学\");\n        student.addScore(math, 75);\n        assertTrue(ExamChecker.isPassed(student, math));\n    }\n    @Test\n    void testIsNotPassed() {\n        Student student = new Student();\n        Course physics = new Course(\"物理\");\n        student.addScore(physics, 55);\n        assertFalse(ExamChecker.isPassed(student, physics));\n    }\n}"}}
{"canonical_solution": "import java.lang.UnsupportedOperationException;\npublic class Reservation {\n    private int bookingId;\n    public Reservation(int bookingId) {\n        this.bookingId = bookingId;\n    }\n    public int retrieveBookingId() {\n        return this.bookingId;\n    }\n    public boolean checkBookingId(int expected) {\n        return this.retrieveBookingId() == expected;\n    }\n    public static void main(String[] args) {\n        Reservation reservation1 = new Reservation(123);\n        Reservation reservation2 = new Reservation(456);\n        System.out.println(\"Reservation 1 has booking ID 123: \" + reservation1.checkBookingId(123)); \n        System.out.println(\"Reservation 2 has booking ID 456: \" + reservation2.checkBookingId(456)); \n    }\n}", "content": "Please write a Java class called `Reservation` that includes a method named `retrieveBookingId`. This method should return the value of a private member variable named `bookingId`. Ensure that this private member variable is correctly declared and initialized within the class, and provide a constructor to set its value. Additionally, write a method named `checkBookingId` to verify the correctness of the `retrieveBookingId` method.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.UnsupportedOperationException;\npublic class Reservation {\n    private int bookingId;\n    public Reservation(int bookingId) {\n    }\n    public int retrieveBookingId() {\n    }\n    public boolean checkBookingId(int expected) {\n    }\n}\n```", "id": 1644, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class ReservationTest {\n    @Test\n    public void testRetrieveBookingId() {\n        Reservation reservation = new Reservation(123);\n        Assertions.assertEquals(123, reservation.retrieveBookingId());\n    }\n    @Test\n    public void testCheckBookingIdTrue() {\n        Reservation reservation = new Reservation(123);\n        Assertions.assertTrue(reservation.checkBookingId(123));\n    }\n    @Test\n    public void testCheckBookingIdFalse() {\n        Reservation reservation = new Reservation(123);\n        Assertions.assertFalse(reservation.checkBookingId(456));\n    }\n    @Test\n    public void testRetrieveBookingIdDifferentInstance() {\n        Reservation reservation = new Reservation(456);\n        Assertions.assertEquals(456, reservation.retrieveBookingId());\n    }\n    @Test\n    public void testCheckBookingIdDifferentInstanceFalse() {\n        Reservation reservation = new Reservation(456);\n        Assertions.assertFalse(reservation.checkBookingId(123));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nclass Book {\n    private String title;\n    private String author;\n    public Book(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n    @Override\n    public String toString() {\n        return \"书名: \" + title + \", 作者: \" + author;\n    }\n}\npublic class Library {\n    public void displayBookList(ArrayList<Book> books) {\n        System.out.println(\"\\n图书馆藏书如下：\");\n        for (Book book : books) {\n            System.out.println(book);\n        }\n    }\n    public static void main(String[] args) {\n        ArrayList<Book> books = new ArrayList<>();\n        books.add(new Book(\"Java编程思想\", \"Bruce Eckel\"));\n        books.add(new Book(\"Effective Java\", \"Joshua Bloch\"));\n        books.add(new Book(\"深入理解Java虚拟机\", \"周志明\"));\n        Library library = new Library();\n        library.displayBookList(books);\n    }\n}", "content": "Please write a Java program to display information about all books in a library. The book information includes the title and the author's name. It is required to implement this using an object-oriented approach, where the book information is represented using a separate class, and provide a method to print out all book information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nclass Book {\n    private String title;\n    private String author;\n    public Book(String title, String author) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class Library {\n    public void displayBookList(ArrayList<Book> books) {\n    }\n}\n```", "id": 1645, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testBookCreation() {\n        Book book = new Book(\"Test Title\", \"Test Author\");\n        assertNotNull(book);\n    }\n    @Test\n    void testBookToString() {\n        Book book = new Book(\"Test Title\", \"Test Author\");\n        assertEquals(\"书名: Test Title, 作者: Test Author\", book.toString());\n    }\n}\nclass LibraryTest {\n    @Test\n    void testDisplayBookListWithMultipleBooks() {\n        ArrayList<Book> books = new ArrayList<>();\n        books.add(new Book(\"Java编程思想\", \"Bruce Eckel\"));\n        books.add(new Book(\"Effective Java\", \"Joshua Bloch\"));\n        books.add(new Book(\"深入理解Java虚拟机\", \"周志明\"));\n        Library library = new Library();\n        assertDoesNotThrow(() -> library.displayBookList(books));\n    }\n    @Test\n    void testDisplayBookListWithEmptyList() {\n        ArrayList<Book> books = new ArrayList<>();\n        Library library = new Library();\n        assertDoesNotThrow(() -> library.displayBookList(books));\n    }\n    @Test\n    void testDisplayBookListWithOneBook() {\n        ArrayList<Book> books = new ArrayList<>();\n        books.add(new Book(\"独自等待\", \"李傲\"));\n        Library library = new Library();\n        assertDoesNotThrow(() -> library.displayBookList(books));\n    }\n}"}}
{"canonical_solution": "import java.util.List;\npublic class BookManager {\n    private List<String> bookList;\n    public BookManager(List<String> bookList) {\n        this.bookList = bookList;\n    }\n    public void updateBookList(List<String> newBookList) {\n        this.bookList = newBookList;\n        System.out.println(\"图书列表已更新。\");\n    }\n    public List<String> getBookList() {\n        return bookList;\n    }\n}\nclass BookManagerTest {\n    public static void main(String[] args) {\n        List<String> initialBooks = List.of(\"Java基础\", \"算法导论\", \"设计模式\");\n        BookManager manager = new BookManager(initialBooks);\n        System.out.println(\"初始图书列表: \" + manager.getBookList());\n        List<String> updatedBooks = List.of(\"微服务架构\", \"Spring实战\", \"深入理解Java虚拟机\");\n        manager.updateBookList(updatedBooks);\n        System.out.println(\"更新后的图书列表: \" + manager.getBookList());\n    }\n}", "content": "Please write a Java description for a simple book management system design. Describe how the system would need a function to update the book list. When the book list changes, the system should be able to receive a list of strings containing book names and update the current book list.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\npublic class BookManager {\n    private List<String> bookList;\n    public BookManager(List<String> bookList) {\n    }\n    public void updateBookList(List<String> newBookList) {\n    }\n    public List<String> getBookList() {\n        return null;\n    }\n}\n```", "id": 1646, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.List;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    private List<String> initialBooks;\n    private List<String> updatedBooks;\n    @BeforeEach\n    public void setUp() {\n        initialBooks = List.of(\"Java基础\", \"算法导论\", \"设计模式\");\n        bookManager = new BookManager(initialBooks);\n        updatedBooks = List.of(\"微服务架构\", \"Spring实战\", \"深入理解Java虚拟机\");\n    }\n    @Test\n    public void testInitialBookList() {\n        List<String> books = bookManager.getBookList();\n        assertEquals(initialBooks, books, \"Initial book list should match the list passed during instantiation.\");\n    }\n    @Test\n    public void testUpdateBookList() {\n        bookManager.updateBookList(updatedBooks);\n        List<String> books = bookManager.getBookList();\n        assertEquals(updatedBooks, books, \"Book list should be updated to the new list.\");\n    }\n    @Test\n    public void testEmptyBookList() {\n        bookManager.updateBookList(List.of());\n        List<String> books = bookManager.getBookList();\n        assertTrue(books.isEmpty(), \"Book list should be empty after updating with an empty list.\");\n    }\n    @Test\n    public void testNullBookList() {\n        bookManager.updateBookList(null);\n        List<String> books = bookManager.getBookList();\n        assertNull(books, \"Book list should be null after updating with a null list.\");\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileFinisher {\n    public void writeAndCloseFile(String filePath, String data) throws IOException {\n        BufferedWriter writer = null;\n        try {\n            writer = new BufferedWriter(new FileWriter(filePath));\n            writer.write(data);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n        }\n    }\n    public static void main(String[] args) {\n        FileFinisher finisher = new FileFinisher();\n        String testFilePath = \"test.txt\";\n        String testData = \"这是一个测试数据。\";\n        try {\n            finisher.writeAndCloseFile(testFilePath, testData);\n            System.out.println(\"文件写入和关闭操作成功。\");\n        } catch (IOException e) {\n            System.err.println(\"发生错误：\" + e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method that is used to perform a write operation to a text file and close the file after the write operation is completed. If an error occurs during writing or closing the file, an exception should be thrown.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileFinisher {\n    public void writeAndCloseFile(String filePath, String data) throws IOException {\n    }\n}\n```", "id": 1647, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.*;\nimport java.io.*;\npublic class FileFinisherTest {\n    private FileFinisher fileFinisher;\n    private final String testFilePath = \"test.txt\";\n    @BeforeEach\n    public void setUp() {\n        fileFinisher = new FileFinisher();\n    }\n    @AfterEach\n    public void tearDown() throws IOException {\n        File file = new File(testFilePath);\n        if (file.exists()) {\n            file.delete();\n        }\n    }\n    @Test\n    public void testWriteAndCloseFileSuccess() throws IOException {\n        String data = \"This is test data.\";\n        fileFinisher.writeAndCloseFile(testFilePath, data);\n        File file = new File(testFilePath);\n        Assertions.assertTrue(file.exists());\n        Assertions.assertEquals(data, readFileContent(testFilePath));\n    }\n    @Test\n    public void testWriteAndCloseFileEmptyString() throws IOException {\n        String data = \"\";\n        fileFinisher.writeAndCloseFile(testFilePath, data);\n        File file = new File(testFilePath);\n        Assertions.assertTrue(file.exists());\n        Assertions.assertEquals(data, readFileContent(testFilePath));\n    }\n    @Test\n    public void testWriteAndCloseFileNonExistentDirectory() {\n        String data = \"This is test data.\";\n        String invalidFilePath = \"nonexistent_directory/test.txt\";\n        Assertions.assertThrows(IOException.class, () -> {\n            fileFinisher.writeAndCloseFile(invalidFilePath, data);\n        });\n    }\n    private String readFileContent(String filePath) throws IOException {\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content.append(line);\n            }\n        }\n        return content.toString();\n    }\n}"}}
{"canonical_solution": "import java.text.SimpleDateFormat;\nimport java.util.Date;\npublic class LogHelper {\n    public static String addTimestamp(String originalLog) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String timestamp = dateFormat.format(new Date());\n        return timestamp + \" \" + originalLog;\n    }\n    public static void checkFunction() {\n        String log = \"这是一条日志信息。\";\n        String result = addTimestamp(log);\n        System.out.println(\"带时间戳的日志信息: \" + result);\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java method to add a timestamp to log information. The method takes a string parameter representing the original log information and returns a new string that includes the current timestamp (formatted as `yyyy-MM-dd HH:mm:ss`) and the original log information. The timestamp and log information should be separated by a space. Ensure to import the necessary packages in the code.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\npublic class LogHelper {\n    public static String addTimestamp(String originalLog) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1648, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\npublic class LogHelperTest {\n    @Test\n    public void testAddTimestamp_NotNull() {\n        String log = \"Test log message\";\n        String result = LogHelper.addTimestamp(log);\n        assertNotNull(result);\n    }\n    @Test\n    public void testAddTimestamp_ContainsOriginalLog() {\n        String log = \"Another log message\";\n        String result = LogHelper.addTimestamp(log);\n        assertTrue(result.contains(log));\n    }\n    @Test\n    public void testAddTimestamp_ContainsTimestamp() {\n        String log = \"Message with timestamp\";\n        String result = LogHelper.addTimestamp(log);\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String timestamp = dateFormat.format(new Date());\n        assertTrue(result.contains(timestamp.substring(0, 10))); \n    }\n    @Test\n    public void testAddTimestamp_VaryingLogs() {\n        String log1 = \"First log\";\n        String log2 = \"Second log\";\n        String result1 = LogHelper.addTimestamp(log1);\n        String result2 = LogHelper.addTimestamp(log2);\n        assertTrue(result1.contains(log1));\n        assertTrue(result2.contains(log2));\n    }\n    @Test\n    public void testAddTimestamp_EmptyLog() {\n        String log = \"\";\n        String result = LogHelper.addTimestamp(log);\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String timestamp = dateFormat.format(new Date());\n        assertTrue(result.startsWith(timestamp));\n    }\n}"}}
{"canonical_solution": "import java.io.IOException;\npublic class SafeArrayAccess {\n    public void safeAccess(int index) {\n        int[] numbers = {10, 20, 30, 40, 50}; \n        if (index >= 0 && index < numbers.length) {\n            System.out.println(numbers[index]);\n        } else {\n            System.out.println(\"索引超出范围\");\n        }\n    }\n    public static void main(String[] args) throws IOException {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        safeArrayAccess.safeAccess(2); \n        safeArrayAccess.safeAccess(-1); \n        safeArrayAccess.safeAccess(5); \n    }\n}", "content": "Please write a Java program to implement a secure array access function. This function should accept an integer index and safely return the value at the corresponding index of a fixed array. If the index is out of bounds, the program should output \"Index out of range\". Ensure your solution adheres to good programming practices, especially when handling array boundaries.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.IOException;\npublic class SafeArrayAccess {\n    public void safeAccess(int index) {\n    }\n}\n```", "id": 1649, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class SafeArrayAccessTest {\n    @Test\n    public void testValidIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(2));\n    }\n    @Test\n    public void testNegativeIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(-1));\n    }\n    @Test\n    public void testIndexOutOfRangeUpperBound() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(5));\n    }\n    @Test\n    public void testFirstIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(0));\n    }\n    @Test\n    public void testLastIndex() {\n        SafeArrayAccess safeArrayAccess = new SafeArrayAccess();\n        assertDoesNotThrow(() -> safeArrayAccess.safeAccess(4));\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\npublic class EmailValidator {\n    public static String validateEmail(String email) {\n        if (Objects.isNull(email) || email.isEmpty()) {\n            return \"邮箱地址不能为空。\";\n        }\n        if (!email.contains(\"@\")) {\n            return \"邮箱地址格式错误，缺少'@'符号。\";\n        }\n        return \"邮箱地址有效。\";\n    }\n    public static void main(String[] args) {\n        System.out.println(validateEmail(\"\")); \n        System.out.println(validateEmail(\"example.com\")); \n        System.out.println(validateEmail(\"user@example.com\")); \n    }\n}", "content": "Please write a Java method to check if a user's email address input is valid. A valid email address must meet the following criteria: it cannot be empty and must contain the \"@\" symbol. If the email address is invalid, the method should return an error message; if it is valid, it should return a confirmation message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    public static String validateEmail(String email) {\n    }\n}\n```", "id": 1650, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class EmailValidatorTest {\n    @Test\n    void testEmptyEmail() {\n        String result = EmailValidator.validateEmail(\"\");\n        assertEquals(\"邮箱地址不能为空。\", result);\n    }\n    @Test\n    void testNullEmail() {\n        String result = EmailValidator.validateEmail(null);\n        assertEquals(\"邮箱地址不能为空。\", result);\n    }\n    @Test\n    void testEmailWithoutAtSymbol() {\n        String result = EmailValidator.validateEmail(\"example.com\");\n        assertEquals(\"邮箱地址格式错误，缺少'@'符号。\", result);\n    }\n    @Test\n    void testValidEmail() {\n        String result = EmailValidator.validateEmail(\"user@example.com\");\n        assertEquals(\"邮箱地址有效。\", result);\n    }\n    @Test\n    void testEmailWithMultipleAtSymbols() {\n        String result = EmailValidator.validateEmail(\"user@@example.com\");\n        assertEquals(\"邮箱地址有效。\", result);\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Book {\n    private String bookId;\n    private String title;\n    private String author;\n    public Book(String bookId, String title, String author) {\n        this.bookId = bookId;\n        this.title = title;\n        this.author = author;\n    }\n    public String getBookId() {\n        return bookId;\n    }\n    public void setBookId(String bookId) {\n        this.bookId = bookId;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public String getAuthor() {\n        return author;\n    }\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"bookId='\" + bookId + '\\'' +\n                \", title='\" + title + '\\'' +\n                \", author='\" + author + '\\'' +\n                '}';\n    }\n}\nclass BookJpaRepository {\n    public Book save(Book book) {\n        System.out.println(\"Saving book: \" + book);\n        return book;\n    }\n}\npublic class BookManager {\n    private BookJpaRepository bookJpaRepository = new BookJpaRepository();\n    public Book addBook(Book book) {\n        Book addedBook = bookJpaRepository.save(book);\n        return addedBook;\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        Book newBook = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        Book addedBook = manager.addBook(newBook);\n        System.out.println(\"Added book: \" + addedBook);\n    }\n}", "content": "Please design a Java method to add new book information to the book database and return the information of this added book. Assume you already have a class named `BookJpaRepository` which provides a method named `save` that can save a book object to the database and return the saved object.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Book {\n    private String bookId;\n    private String title;\n    private String author;\n    public Book(String bookId, String title, String author) {\n    }\n    public String getBookId() {\n    }\n    public void setBookId(String bookId) {\n    }\n    public String getTitle() {\n    }\n    public void setTitle(String title) {\n    }\n    public String getAuthor() {\n    }\n    public void setAuthor(String author) {\n    }\n    @Override\n    public String toString() {\n    }\n}\nclass BookJpaRepository {\n    public Book save(Book book) {\n    }\n}\npublic class BookManager {\n    private BookJpaRepository bookJpaRepository = new BookJpaRepository();\n    public Book addBook(Book book) {\n    }\n}\n```", "id": 1651, "labels": {"programming_language": "java", "execution_language": "junit", "category": "DataBase", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass BookTest {\n    @Test\n    void testBookGettersAndSetters() {\n        Book book = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        assertEquals(\"1\", book.getBookId());\n        assertEquals(\"Java编程思想\", book.getTitle());\n        assertEquals(\"Bruce Eckel\", book.getAuthor());\n        book.setBookId(\"2\");\n        book.setTitle(\"Effective Java\");\n        book.setAuthor(\"Joshua Bloch\");\n        assertEquals(\"2\", book.getBookId());\n        assertEquals(\"Effective Java\", book.getTitle());\n        assertEquals(\"Joshua Bloch\", book.getAuthor());\n    }\n    @Test\n    void testBookToString() {\n        Book book = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        String expectedString = \"Book{bookId='1', title='Java编程思想', author='Bruce Eckel'}\";\n        assertEquals(expectedString, book.toString());\n    }\n}\nclass BookManagerTest {\n    @Test\n    void testAddBook() {\n        BookManager manager = new BookManager();\n        Book book = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        Book addedBook = manager.addBook(book);\n        assertNotNull(addedBook);\n        assertEquals(book.getBookId(), addedBook.getBookId());\n        assertEquals(book.getTitle(), addedBook.getTitle());\n        assertEquals(book.getAuthor(), addedBook.getAuthor());\n    }\n    @Test\n    void testAddBookDifferentAttributes() {\n        BookManager manager = new BookManager();\n        Book book = new Book(\"2\", \"Effective Java\", \"Joshua Bloch\");\n        Book addedBook = manager.addBook(book);\n        assertNotNull(addedBook);\n        assertEquals(book.getBookId(), addedBook.getBookId());\n        assertEquals(book.getTitle(), addedBook.getTitle());\n        assertEquals(book.getAuthor(), addedBook.getAuthor());\n    }\n    @Test\n    void testMultipleBooks() {\n        BookManager manager = new BookManager();\n        Book book1 = new Book(\"1\", \"Java编程思想\", \"Bruce Eckel\");\n        Book book2 = new Book(\"2\", \"Effective Java\", \"Joshua Bloch\");\n        Book addedBook1 = manager.addBook(book1);\n        Book addedBook2 = manager.addBook(book2);\n        assertNotNull(addedBook1);\n        assertNotNull(addedBook2);\n        assertEquals(book1.getBookId(), addedBook1.getBookId());\n        assertEquals(book2.getBookId(), addedBook2.getBookId());\n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.util.Scanner;\npublic class 文件查找器 {\n    public static void 查找并打印文件(String 目录路径, String 文件扩展名) {\n        File 目录 = new File(目录路径);\n        if (目录.isDirectory()) {\n            File[] 文件列表 = 目录.listFiles();\n            if (文件列表 != null) {\n                for (File 文件 : 文件列表) {\n                    if (文件.getName().endsWith(文件扩展名) && 文件.isFile()) {\n                        System.out.println(\"找到文件: \" + 文件.getName());\n                    }\n                }\n            }\n        }\n    }\n    public static void main(String[] args) {\n        Scanner 输入 = new Scanner(System.in);\n        System.out.println(\"请输入目录路径: \");\n        String 目录路径 = 输入.next();\n        System.out.println(\"请输入文件扩展名: \");\n        String 文件扩展名 = 输入.next();\n        查找并打印文件(目录路径, 文件扩展名);\n        输入.close();\n    }\n}", "content": "Please write a description of a Java program to find and print the names of all files with a specific extension in a given directory. The user needs to input the directory path and the file extension they want to search for. If the directory exists and contains files with the specified extension, print out the names of those files.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\npublic class 文件查找器 {\n    public static void 查找并打印文件(String 目录路径, String 文件扩展名) {\n    }\n}\n```", "id": 1652, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class 文件查找器Test {\n    @TempDir\n    File tempDir;\n    @Test\n    public void test查找并打印文件_空目录() {\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_没有匹配的文件扩展名() throws IOException {\n        File file = new File(tempDir, \"test1.doc\");\n        try (FileWriter writer = new FileWriter(file)) {\n            writer.write(\"This is a test file.\");\n        }\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_有匹配的文件扩展名() throws IOException {\n        File file = new File(tempDir, \"test2.txt\");\n        try (FileWriter writer = new FileWriter(file)) {\n            writer.write(\"This is another test file.\");\n        }\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_目录不是一个目录() {\n        File notADirectory = new File(tempDir, \"not_a_directory\");\n        notADirectory.mkdir();\n        文件查找器.查找并打印文件(notADirectory.getAbsolutePath(), \".txt\");\n    }\n    @Test\n    public void test查找并打印文件_文件列表为空() {\n        文件查找器.查找并打印文件(tempDir.getAbsolutePath(), \".txt\");\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n        switch (operator) {\n            case '+':\n                return String.valueOf(num1 + num2);\n            case '-':\n                return String.valueOf(num1 - num2);\n            case '*':\n                return String.valueOf(num1 * num2);\n            case '/':\n                if (num2 == 0) {\n                    return \"Error: Division by zero.\";\n                } else {\n                    return String.valueOf(num1 / num2);\n                }\n            default:\n                return \"Error: Invalid operator.\";\n        }\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter the first number:\");\n        int num1 = scanner.nextInt();\n        System.out.println(\"Enter the second number:\");\n        int num2 = scanner.nextInt();\n        System.out.println(\"Enter the operator (+, -, *, /):\");\n        char operator = scanner.next().charAt(0);\n        String result = calculator.calculate(num1, num2, operator);\n        System.out.println(\"Result: \" + result);\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`, which can perform basic arithmetic operations: addition, subtraction, multiplication, and division. Ensure that your implementation can handle integer operations, and in the case of a division operation where the divisor is 0, return a specific error message instead of throwing an exception.\n\nYou need to provide a method `calculate` that accepts three parameters: two integers `num1` and `num2`, and a character `operator`, representing the operation to be performed (`'+'` for addition, `'-'` for subtraction, `'*'` for multiplication, `'/'` for division). This method should return a string containing the result of the operation or an error message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n    }\n}\n```", "id": 1653, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class SimpleCalculatorTest {\n    private SimpleCalculator calculator = new SimpleCalculator();\n    @Test\n    public void testAddition() {\n        assertEquals(\"5\", calculator.calculate(2, 3, '+'));\n    }\n    @Test\n    public void testSubtraction() {\n        assertEquals(\"1\", calculator.calculate(3, 2, '-'));\n    }\n    @Test\n    public void testMultiplication() {\n        assertEquals(\"6\", calculator.calculate(2, 3, '*'));\n    }\n    @Test\n    public void testDivision() {\n        assertEquals(\"2\", calculator.calculate(6, 3, '/'));\n    }\n    @Test\n    public void testDivisionByZero() {\n        assertEquals(\"Error: Division by zero.\", calculator.calculate(6, 0, '/'));\n    }\n    @Test\n    public void testInvalidOperator() {\n        assertEquals(\"Error: Invalid operator.\", calculator.calculate(6, 3, '%'));\n    }\n}"}}
{"canonical_solution": "import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class StringListToUpper {\n    public static List<String> convertListToUpper(List<String> inputList) {\n        List<String> synchronizedList = Collections.synchronizedList(inputList);\n        return synchronizedList.stream()\n                .map(String::toUpperCase)\n                .collect(Collectors.toList());\n    }\n    public static void main(String[] args) {\n        List<String> testList = Collections.synchronizedList(List.of(\"java\", \"python\", \"c++\"));\n        List<String> resultList = convertListToUpper(testList);\n        System.out.println(resultList); \n    }\n}", "content": "Please design a Java method that can accept a list of strings and convert each string in the list to uppercase. Ensure that your method is thread-safe and can handle any exceptions that may occur.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class StringListToUpper {\n    public static List<String> convertListToUpper(List<String> inputList) {\n    }\n}\n```", "id": 1654, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\npublic class StringListToUpperTest {\n    @Test\n    public void testConvertListToUpper_withMixedCase() {\n        List<String> inputList = Collections.synchronizedList(List.of(\"java\", \"Python\", \"c++\"));\n        List<String> expectedList = List.of(\"JAVA\", \"PYTHON\", \"C++\");\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withAllLowerCase() {\n        List<String> inputList = Collections.synchronizedList(List.of(\"java\", \"python\", \"c++\"));\n        List<String> expectedList = List.of(\"JAVA\", \"PYTHON\", \"C++\");\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withAllUpperCase() {\n        List<String> inputList = Collections.synchronizedList(List.of(\"JAVA\", \"PYTHON\", \"C++\"));\n        List<String> expectedList = List.of(\"JAVA\", \"PYTHON\", \"C++\");\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withEmptyList() {\n        List<String> inputList = Collections.synchronizedList(List.of());\n        List<String> expectedList = List.of();\n        List<String> result = StringListToUpper.convertListToUpper(inputList);\n        assertEquals(expectedList, result);\n    }\n    @Test\n    public void testConvertListToUpper_withNullInput() {\n        List<String> inputList = null;\n        try {\n            StringListToUpper.convertListToUpper(inputList);\n        } catch (NullPointerException ex) {\n            assertEquals(NullPointerException.class, ex.getClass());\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class CityManager {\n    private List<String> cityList;\n    public CityManager() {\n        cityList = new ArrayList<>();\n    }\n    public boolean removeCity(String city) {\n        return cityList.remove(city);\n    }\n    public void addCity(String city) {\n        cityList.add(city);\n    }\n    public static void checkFunctionality() {\n        CityManager manager = new CityManager();\n        manager.addCity(\"北京\");\n        manager.addCity(\"上海\");\n        manager.addCity(\"广州\");\n        boolean result1 = manager.removeCity(\"上海\");\n        boolean result2 = manager.removeCity(\"深圳\");\n        System.out.println(\"移除上海: \" + (result1 ? \"成功\" : \"失败\")); \n        System.out.println(\"尝试移除不存在的城市深圳: \" + (result2 ? \"成功\" : \"失败\")); \n    }\n    public static void main(String[] args) {\n        checkFunctionality();\n    }\n}", "content": "Please implement a class named `CityManager`. The class should contain a method `removeCity`. The purpose of this method is to remove a specified city from a list containing city names. If the city exists in the list, it should be removed and the method should return `true`; if it does not exist, it should do nothing and return `false`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class CityManager {\n    private List<String> cityList;\n    public CityManager() {\n    }\n    public boolean removeCity(String city) {\n    }\n    public void addCity(String city) {\n    }\n}\n```", "id": 1655, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class CityManagerTest {\n    private CityManager manager;\n    @BeforeEach\n    public void setUp() {\n        manager = new CityManager();\n    }\n    @Test\n    public void testAddCity() {\n        manager.addCity(\"北京\");\n        assertTrue(manager.removeCity(\"北京\"));\n    }\n    @Test\n    public void testRemoveCity_existingCity() {\n        manager.addCity(\"上海\");\n        assertTrue(manager.removeCity(\"上海\"));\n    }\n    @Test\n    public void testRemoveCity_nonExistingCity() {\n        manager.addCity(\"广州\");\n        assertFalse(manager.removeCity(\"深圳\"));\n    }\n    @Test\n    public void testAddAndRemoveMultipleCities() {\n        manager.addCity(\"北京\");\n        manager.addCity(\"上海\");\n        assertTrue(manager.removeCity(\"北京\"));\n        assertTrue(manager.removeCity(\"上海\"));\n    }\n    @Test\n    public void testRemoveCityFromEmptyList() {\n        assertFalse(manager.removeCity(\"北京\"));\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nclass Village {\n    private List<Building> buildings = new ArrayList<>();\n    public Village() {\n        buildings.add(new Building(\"铁匠铺\"));\n        buildings.add(new Building(\"农场\"));\n        buildings.add(new Building(\"图书馆\"));\n    }\n    public List<Building> getBuildings() {\n        return buildings;\n    }\n    public void allocateVillager(Villager villager, Building building) {\n        System.out.println(villager.getName() + \"已分配到\" + building.getName());\n    }\n}\nclass Building {\n    private String name;\n    public Building(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\nclass Villager {\n    private String name;\n    public Villager(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\npublic class VillageAssignment {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Village village = new Village();\n        Villager villager = new Villager(\"Tom\");\n        allocateVillagerToBuilding(scanner, village, villager);\n        scanner.close();\n    }\n    private static void allocateVillagerToBuilding(Scanner scanner, Village village, Villager villager) {\n        System.out.println(\"请为村民 \" + villager.getName() + \" 分配一个建筑物：\");\n        int index = 1;\n        for (Building building : village.getBuildings()) {\n            System.out.println(index + \". \" + building.getName());\n            index++;\n        }\n        int choice;\n        do {\n            System.out.print(\"请输入建筑物编号：\");\n            while (!scanner.hasNextInt()) {\n                System.out.println(\"输入无效，请输入有效的建筑物编号：\");\n                scanner.next(); \n            }\n            choice = scanner.nextInt();\n        } while (choice < 1 || choice > village.getBuildings().size());\n        Building selectedBuilding = village.getBuildings().get(choice - 1);\n        village.allocateVillager(villager, selectedBuilding);\n    }\n}", "content": "Please write a Java program to implement the functionality of assigning villagers to buildings in a village. The program should allow the user to select a building from a list of available buildings and assign a villager to that building. The following are the basic requirements for the program:\n\n- The program should have a `Village` class, which includes a list of buildings and a method to assign villagers to buildings.\n- The program should have a `Building` class, which includes the name of the building.\n- The program should have a `Villager` class, which includes the name of the villager.\n- The user should be able to select a building by number next to the building.\n- If the user inputs an invalid number, the program should prompt the user to input again.\n- Upon successful assignment, the program should display a message confirming that the villager has been assigned to the selected building.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass Village {\n    private List<Building> buildings = new ArrayList<>();\n    public Village() {\n    }\n    public List<Building> getBuildings() {\n        return buildings;\n    }\n    public void allocateVillager(Villager villager, Building building) {\n    }\n}\nclass Building {\n    private String name;\n    public Building(String name) {\n    }\n    public String getName() {\n        return name;\n    }\n}\nclass Villager {\n    private String name;\n    public Villager(String name) {\n    }\n    public String getName() {\n        return name;\n    }\n}\n```", "id": 1656, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\nclass VillageTest {\n    private Village village;\n    @BeforeEach\n    void setUp() {\n        village = new Village();\n    }\n    @Test\n    void testInitialBuildings() {\n        List<Building> buildings = village.getBuildings();\n        assertEquals(3, buildings.size());\n        assertEquals(\"铁匠铺\", buildings.get(0).getName());\n        assertEquals(\"农场\", buildings.get(1).getName());\n        assertEquals(\"图书馆\", buildings.get(2).getName());\n    }\n    @Test\n    void testGetBuildings() {\n        List<Building> buildings = village.getBuildings();\n        assertNotNull(buildings);\n    }\n    @Test\n    void testAllocateVillager() {\n        Villager villager = new Villager(\"Tom\");\n        Building building = new Building(\"铁匠铺\");\n        village.allocateVillager(villager, building);\n    }\n}\nclass BuildingTest {\n    @Test\n    void testBuildingName() {\n        Building building = new Building(\"酒馆\");\n        assertEquals(\"酒馆\", building.getName());\n    }\n}\nclass VillagerTest {\n    @Test\n    void testVillagerName() {\n        Villager villager = new Villager(\"Jerry\");\n        assertEquals(\"Jerry\", villager.getName());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class ByteArrayToIntArrayConverter {\n    public static int[] convertByteArrayToIntArray(byte[] bytes) {\n        if (bytes == null || bytes.length % 4 != 0) {\n            throw new IllegalArgumentException(\"字节数组长度必须是4的倍数\");\n        }\n        int[] result = new int[bytes.length / 4];\n        for (int i = 0; i < result.length; i++) {\n            int offset = i * 4;\n            result[i] = ((bytes[offset] & 0xFF) << 24) |\n                        ((bytes[offset + 1] & 0xFF) << 16) |\n                        ((bytes[offset + 2] & 0xFF) << 8) |\n                        (bytes[offset + 3] & 0xFF);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n        byte[] bytes = {0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3};\n        int[] expected = {1, 2, 3};\n        int[] result = convertByteArrayToIntArray(bytes);\n        if (Arrays.equals(expected, result)) {\n            System.out.println(\"转换正确：\" + Arrays.toString(result));\n        } else {\n            System.out.println(\"转换错误，期望的结果是：\" + Arrays.toString(expected) + \"，但实际结果是：\" + Arrays.toString(result));\n        }\n    }\n}", "content": "Please describe a Java method that can convert a byte array into an integer array. Each group of four bytes in the byte array should be converted into one integer (int), with the first byte being the most significant byte of the integer and the fourth byte being the least significant byte. Assume the byte array's length is always a multiple of 4.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class ByteArrayToIntArrayConverter {\n    public static int[] convertByteArrayToIntArray(byte[] bytes) {\n    }\n}\n```", "id": 1657, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.util.Arrays;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class ByteArrayToIntArrayConverterTest {\n    @Test\n    public void testConvertByteArrayToIntArray_ValidInput() {\n        byte[] bytes = {0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3};\n        int[] expected = {1, 2, 3};\n        int[] result = ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        assertArrayEquals(expected, result);\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_EmptyInput() {\n        byte[] bytes = {};\n        int[] expected = {};\n        int[] result = ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        assertArrayEquals(expected, result);\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_InvalidLength() {\n        byte[] bytes = {0, 0, 0, 1, 0, 0};\n        assertThrows(IllegalArgumentException.class, () -> {\n            ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        });\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_NullInput() {\n        byte[] bytes = null;\n        assertThrows(IllegalArgumentException.class, () -> {\n            ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        });\n    }\n    @Test\n    public void testConvertByteArrayToIntArray_AllZeroes() {\n        byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 0};\n        int[] expected = {0, 0};\n        int[] result = ByteArrayToIntArrayConverter.convertByteArrayToIntArray(bytes);\n        assertArrayEquals(expected, result);\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\nimport javax.swing.JButton;\nimport javax.swing.JColorChooser;\nimport javax.swing.JComboBox;\npublic class TextStyleUpdater {\n    private JButton btnBold = new JButton(\"加粗\");\n    private JButton btnItalic = new JButton(\"斜体\");\n    private JButton btnUnderline = new JButton(\"下划线\");\n    private JButton btnStrikethrough = new JButton(\"删除线\");\n    private JColorChooser colorChooser = new JColorChooser();\n    private JComboBox<String> fontSelector = new JComboBox<>();\n    private JComboBox<Integer> fontSizeSelector = new JComboBox<>();\n    private TextProperties textProperties = new TextProperties(); \n    public void refreshTextStyle() {\n        btnBold.setSelected(textProperties.isBold());\n        btnItalic.setSelected(textProperties.isItalic());\n        btnUnderline.setSelected(textProperties.isUnderlined());\n        btnStrikethrough.setSelected(textProperties.isStrikethrough());\n        colorChooser.setVisible(false);\n        fontSelector.setVisible(false);\n        fontSizeSelector.setVisible(false);\n    }\n    public static void main(String[] args) {\n        TextStyleUpdater updater = new TextStyleUpdater();\n        updater.refreshTextStyle();\n    }\n    private class TextProperties {\n        boolean isBold() { return true; } \n        boolean isItalic() { return false; }\n        boolean isUnderlined() { return true; }\n        boolean isStrikethrough() { return false; }\n    }\n}", "content": "Assume you are developing a feature for a text editor that involves writing a method to update the text style state of the editor, including bold, italic, underline, and strikethrough. You need to set the corresponding button states based on the current style of the text (i.e., if the text is bold, the bold button should be pressed). Additionally, you need to hide the color picker, font picker, and font size picker. Based on these requirements, describe how you would implement this feature.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Color;\nimport javax.swing.JButton;\nimport javax.swing.JColorChooser;\nimport javax.swing.JComboBox;\npublic class TextStyleUpdater {\n    private JButton btnBold = new JButton(\"加粗\");\n    private JButton btnItalic = new JButton(\"斜体\");\n    private JButton btnUnderline = new JButton(\"下划线\");\n    private JButton btnStrikethrough = new JButton(\"删除线\");\n    private JColorChooser colorChooser = new JColorChooser();\n    private JComboBox<String> fontSelector = new JComboBox<>();\n    private JComboBox<Integer> fontSizeSelector = new JComboBox<>();\n    private TextProperties textProperties = new TextProperties(); \n    public void refreshTextStyle() {\n    }\n    private class TextProperties {\n        boolean isBold() {  } \n        boolean isItalic() {  }\n        boolean isUnderlined() {  }\n        boolean isStrikethrough() {  }\n    }\n}\n```", "id": 1658, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.awt.Color;\nimport javax.swing.JButton;\nimport javax.swing.JColorChooser;\nimport javax.swing.JComboBox;\npublic class TextStyleUpdaterTest {\n    private TextStyleUpdater textStyleUpdater;\n    private JButton btnBold;\n    private JButton btnItalic;\n    private JButton btnUnderline;\n    private JButton btnStrikethrough;\n    private JColorChooser colorChooser;\n    private JComboBox<String> fontSelector;\n    private JComboBox<Integer> fontSizeSelector;\n    @BeforeEach\n    public void setUp() {\n        textStyleUpdater = new TextStyleUpdater();\n        btnBold = (JButton) getPrivateField(textStyleUpdater, \"btnBold\");\n        btnItalic = (JButton) getPrivateField(textStyleUpdater, \"btnItalic\");\n        btnUnderline = (JButton) getPrivateField(textStyleUpdater, \"btnUnderline\");\n        btnStrikethrough = (JButton) getPrivateField(textStyleUpdater, \"btnStrikethrough\");\n        colorChooser = (JColorChooser) getPrivateField(textStyleUpdater, \"colorChooser\");\n        fontSelector = (JComboBox<String>) getPrivateField(textStyleUpdater, \"fontSelector\");\n        fontSizeSelector = (JComboBox<Integer>) getPrivateField(textStyleUpdater, \"fontSizeSelector\");\n    }\n    @Test\n    public void testRefreshTextStyleBold() {\n        textStyleUpdater.refreshTextStyle();\n        assertTrue(btnBold.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleItalic() {\n        textStyleUpdater.refreshTextStyle();\n        assertFalse(btnItalic.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleUnderline() {\n        textStyleUpdater.refreshTextStyle();\n        assertTrue(btnUnderline.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleStrikethrough() {\n        textStyleUpdater.refreshTextStyle();\n        assertFalse(btnStrikethrough.isSelected());\n    }\n    @Test\n    public void testRefreshTextStyleComponentsVisibility() {\n        textStyleUpdater.refreshTextStyle();\n        assertFalse(colorChooser.isVisible());\n        assertFalse(fontSelector.isVisible());\n        assertFalse(fontSizeSelector.isVisible());\n    }\n    private Object getPrivateField(Object object, String fieldName) {\n        try {\n            java.lang.reflect.Field field = object.getClass().getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field.get(object);\n        } catch (Exception e) {\n            fail(\"Failed to get private field \" + fieldName);\n            return null;\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nimport java.util.List;\npublic class User {\n    private String username;\n    public void setUsername(String name) {\n        this.username = name;\n    }\n    public String getUsername() {\n        return this.username;\n    }\n    public static void checkUsername(List<String> names) {\n        User user = new User();\n        for (String name : names) {\n            user.setUsername(name);\n            System.out.println(\"当前用户名设置为: \" + user.getUsername());\n        }\n    }\n    public static void main(String[] args) {\n        List<String> testNames = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n        checkUsername(testNames);\n    }\n}", "content": "Please write a Java program to implement a simple user class that includes a private string field `username` and provides a method `setUsername` to update the value of this field. Additionally, a `checkUsername` method needs to be written to verify whether the `setUsername` method is working correctly.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class User {\n    private String username;\n    public void setUsername(String name) {\n    }\n    public String getUsername() {\n        return null;\n    }\n    public static void checkUsername(List<String> names) {\n    }\n}\n```", "id": 1659, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.List;\npublic class UserTest {\n    @Test\n    public void testSetUsername() {\n        User user = new User();\n        user.setUsername(\"Alice\");\n        Assertions.assertEquals(\"Alice\", user.getUsername());\n    }\n    @Test\n    public void testGetUsername() {\n        User user = new User();\n        user.setUsername(\"Bob\");\n        String username = user.getUsername();\n        Assertions.assertEquals(\"Bob\", username);\n    }\n    @Test\n    public void testCheckUsernameMultipleNames() {\n        List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n        User.checkUsername(names);\n    }\n    @Test\n    public void testNullUsername() {\n        User user = new User();\n        user.setUsername(null);\n        Assertions.assertNull(user.getUsername());\n    }\n    @Test\n    public void testEmptyUsername() {\n        User user = new User();\n        user.setUsername(\"\");\n        Assertions.assertEquals(\"\", user.getUsername());\n    }\n}"}}
{"canonical_solution": "import java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\npublic class ByteReader {\n    public static int readTwoBytesAsInt(byte[] data, int index) {\n        if (index < 0 || index + 1 >= data.length) {\n            return -1;\n        }\n        ByteBuffer bb = ByteBuffer.allocate(2);\n        bb.order(ByteOrder.BIG_ENDIAN);\n        bb.put(data[index]);\n        bb.put(data[index + 1]);\n        return bb.getShort(0) & 0xFFFF;\n    }\n    public static void main(String[] args) {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        System.out.println(readTwoBytesAsInt(exampleData, 1)); \n        System.out.println(readTwoBytesAsInt(exampleData, -1)); \n        System.out.println(readTwoBytesAsInt(exampleData, 4)); \n    }\n}", "content": "Please write a Java method that reads two bytes from the given byte array at a specified index position and returns them as an `int` value. These two bytes should be combined in Big-Endian order. For example, if the byte at index position `i` is `0x01` and the byte at position `i+1` is `0x02`, the returned `int` value should be `0x0102`. Ensure your code can handle potential index out-of-bounds exceptions and, in such cases, returns `-1`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\npublic class ByteReader {\n    public static int readTwoBytesAsInt(byte[] data, int index) {\n    }\n}\n```", "id": 1660, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\npublic class ByteReaderTest {\n    @Test\n    public void testReadTwoBytesAsInt_ValidIndex() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 1);\n        assertEquals(258, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_NegativeIndex() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, -1);\n        assertEquals(-1, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_IndexOutOfBounds() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 4);\n        assertEquals(-1, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_ExactEndIndex() {\n        byte[] exampleData = {0x00, 0x01, 0x02, 0x03, 0x04};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 3);\n        assertEquals(772, result); \n    }\n    @Test\n    public void testReadTwoBytesAsInt_EmptyArray() {\n        byte[] exampleData = {};\n        int result = ByteReader.readTwoBytesAsInt(exampleData, 0);\n        assertEquals(-1, result); \n    }\n}"}}
{"canonical_solution": "import java.io.File;\nimport java.net.URL;\npublic class ResourceFinder {\n    public static String findResourcePath(String fileName) {\n        URL resourceUrl = Thread.currentThread().getContextClassLoader().getResource(fileName);\n        if (resourceUrl == null) {\n            throw new RuntimeException(\"请将文件放置在项目的适当文件夹中！\");\n        }\n        File file = new File(resourceUrl.getPath());\n        if (file.exists()) {\n            return file.getAbsolutePath();\n        } else {\n            throw new RuntimeException(\"请将文件放置在项目的适当文件夹中！\");\n        }\n    }\n    public static void main(String[] args) {\n        try {\n            String filePath = findResourcePath(\"test.txt\");\n            System.out.println(\"文件路径: \" + filePath);\n        } catch (RuntimeException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method that accepts a file name as a parameter and then attempts to find this file in the project's resources folder. If the file exists, the method should return its absolute path. If the file does not exist, an exception should be thrown, prompting the user to place the file in the appropriate folder of the project. Ensure that your method can handle finding resource files and works correctly in various environments, including in the packaged JAR file.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\nimport java.net.URL;\npublic class ResourceFinder {\n    public static String findResourcePath(String fileName) {\n    }\n}\n```", "id": 1661, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport java.io.File;\nimport java.net.URL;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ResourceFinderTest {\n    @Test\n    public void testFindResourcePathFileExists() {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        URL url = classLoader.getResource(\"test.txt\");\n        if (url != null) {\n            String path = ResourceFinder.findResourcePath(\"test.txt\");\n            assertNotNull(path);\n        }\n    }\n    @Test\n    public void testFindResourcePathFileDoesNotExist() {\n        assertThrows(RuntimeException.class, () -> {\n            ResourceFinder.findResourcePath(\"nonexistentfile.txt\");\n        });\n    }\n    @Test\n    public void testFindResourcePathFileInDifferentLocation() {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        URL url = classLoader.getResource(\"anotherdir/test.txt\");\n        if (url != null) {\n            String path = ResourceFinder.findResourcePath(\"anotherdir/test.txt\");\n            assertNotNull(path);\n        }\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass Tour {\n    private String title;\n    private double price;\n    private String description;\n    public Tour(String title, double price, String description) {\n        this.title = title;\n        this.price = price;\n        this.description = description;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public double getPrice() {\n        return price;\n    }\n    public String getDescription() {\n        return description;\n    }\n}\nclass PresetReplies {\n    private Map<String, String> replies;\n    public PresetReplies() {\n        replies = new HashMap<>();\n        replies.put(\"greeting\", \"您好，有什么可以帮助您的？\");\n        replies.put(\"farewell\", \"感谢您的咨询，祝您有美好的一天！\");\n    }\n    public String getReply(String query) {\n        return replies.getOrDefault(query, \"对不起，我不明白您的问题。\");\n    }\n}\npublic class TourInfoResponder {\n    private PresetReplies presetReplies;\n    public TourInfoResponder() {\n        presetReplies = new PresetReplies();\n    }\n    public void respondToQuery(String query, Tour tour) {\n        switch (query) {\n            case \"query_price\":\n                System.out.println(\"该旅游项目的价格是：\" + tour.getPrice());\n                break;\n            case \"query_description\":\n                System.out.println(\"关于该旅游项目的描述：\" + tour.getDescription());\n                break;\n            default:\n                System.out.println(presetReplies.getReply(query));\n                break;\n        }\n    }\n    public static void main(String[] args) {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        responder.respondToQuery(\"query_price\", tour);\n        responder.respondToQuery(\"query_description\", tour);\n        responder.respondToQuery(\"greeting\", tour);\n    }\n}", "content": "Please design a simple Java program to handle user inquiries about travel information. Users can query the price or description of a travel package by sending specific messages. The program should be able to respond with the corresponding information based on the user's message. If the user's message is not an inquiry about the price or description, the program should look up and reply with the corresponding information from preset data.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass Tour {\n    private String title;\n    private double price;\n    private String description;\n    public Tour(String title, double price, String description) {\n    }\n    public String getTitle() {\n    }\n    public double getPrice() {\n    }\n    public String getDescription() {\n    }\n}\nclass PresetReplies {\n    private Map<String, String> replies;\n    public PresetReplies() {\n    }\n    public String getReply(String query) {\n    }\n}\npublic class TourInfoResponder {\n    private PresetReplies presetReplies;\n    public TourInfoResponder() {\n    }\n    public void respondToQuery(String query, Tour tour) {\n    }\n}\n```", "id": 1662, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nclass TourTest {\n    @Test\n    void testGetTitle() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        assertEquals(\"黄金海岸\", tour.getTitle());\n    }\n    @Test\n    void testGetPrice() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        assertEquals(2999.99, tour.getPrice());\n    }\n    @Test\n    void testGetDescription() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        assertEquals(\"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\", tour.getDescription());\n    }\n}\nclass PresetRepliesTest {\n    @Test\n    void testGetReply() {\n        PresetReplies replies = new PresetReplies();\n        assertEquals(\"您好，有什么可以帮助您的？\", replies.getReply(\"greeting\"));\n        assertEquals(\"感谢您的咨询，祝您有美好的一天！\", replies.getReply(\"farewell\"));\n        assertEquals(\"对不起，我不明白您的问题。\", replies.getReply(\"unknown_query\"));\n    }\n}\nclass TourInfoResponderTest {\n    @Test\n    void testRespondToQuery_Price() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        System.setOut(new java.io.PrintStream(new java.io.ByteArrayOutputStream()));\n        responder.respondToQuery(\"query_price\", tour);\n    }\n    @Test\n    void testRespondToQuery_Description() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        System.setOut(new java.io.PrintStream(new java.io.ByteArrayOutputStream()));\n        responder.respondToQuery(\"query_description\", tour);\n    }\n    @Test\n    void testRespondToQuery_Greeting() {\n        Tour tour = new Tour(\"黄金海岸\", 2999.99, \"黄金海岸是一个美丽的旅游胜地，适合全家旅游。\");\n        TourInfoResponder responder = new TourInfoResponder();\n        System.setOut(new java.io.PrintStream(new java.io.ByteArrayOutputStream()));\n        responder.respondToQuery(\"greeting\", tour);\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n    public int subtract(int a, int b) {\n        return a - b;\n    }\n    public static void main(String[] args) {\n        check();\n    }\n    public static void check() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        if (calculator.add(10, 5) == 15 && calculator.subtract(10, 5) == 5) {\n            System.out.println(\"测试数据点1通过\");\n        } else {\n            System.out.println(\"测试数据点1失败\");\n        }\n        if (calculator.add(-3, 7) == 4 && calculator.subtract(-3, 7) == -10) {\n            System.out.println(\"测试数据点2通过\");\n        } else {\n            System.out.println(\"测试数据点2失败\");\n        }\n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator should be able to perform basic addition and subtraction operations. The specific requirements are as follows:\n\n- The class name should be `SimpleCalculator`.\n- There should be two methods: `add` and `subtract`, for addition and subtraction operations respectively.\n- Each method accepts two integer parameters and returns their addition or subtraction result.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.System;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n    }\n    public int subtract(int a, int b) {\n    }\n}\n```", "id": 1663, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddPositiveNumbers() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(15, calculator.add(10, 5));\n    }\n    @Test\n    public void testAddNegativeAndPositiveNumber() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(4, calculator.add(-3, 7));\n    }\n    @Test\n    public void testSubtractPositiveNumbers() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(5, calculator.subtract(10, 5));\n    }\n    @Test\n    public void testSubtractNegativeAndPositiveNumber() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(-10, calculator.subtract(-3, 7));\n    }\n    @Test\n    public void testAddWithZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(5, calculator.add(5, 0));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class BookSystemAccess {\n    private Map<String, Boolean> userStatus;\n    public BookSystemAccess() {\n        userStatus = new HashMap<>();\n        userStatus.put(\"user1\", true); \n        userStatus.put(\"user2\", false); \n    }\n    public boolean checkUserLogin(String userName) {\n        return userStatus.getOrDefault(userName, false);\n    }\n    public static void main(String[] args) {\n        BookSystemAccess access = new BookSystemAccess();\n        System.out.println(\"Checking if user1 is logged in: \" + access.checkUserLogin(\"user1\")); \n        System.out.println(\"Checking if user2 is logged in: \" + access.checkUserLogin(\"user2\")); \n        System.out.println(\"Checking if user3 is logged in: \" + access.checkUserLogin(\"user3\")); \n    }\n}", "content": "Assuming you are developing a library management system and need to implement a feature to check whether a user is logged in. If the user is logged in, they can continue to access the system's main interface; if the user is not logged in, they cannot access it. Based on this requirement, please write a Java method to implement this feature. Ensure your solution is clear and comprehensive.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookSystemAccess {\n    private Map<String, Boolean> userStatus;\n    public BookSystemAccess() {\n    }\n    public boolean checkUserLogin(String userName) {\n    }\n}\n```", "id": 1664, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Test;\npublic class BookSystemAccessTest {\n    @Test\n    public void testUser1LoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertTrue(access.checkUserLogin(\"user1\"));\n    }\n    @Test\n    public void testUser2LoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(\"user2\"));\n    }\n    @Test\n    public void testUnknownUserLoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(\"user3\"));\n    }\n    @Test\n    public void testEmptyUserNameLoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(\"\"));\n    }\n    @Test\n    public void testNullUserNameLoginStatus() {\n        BookSystemAccess access = new BookSystemAccess();\n        Assert.assertFalse(access.checkUserLogin(null));\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass User {\n    private String username;\n    private String password;\n    private boolean loggedIn;\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n        this.loggedIn = false;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public String getPassword() {\n        return password;\n    }\n    public void setLoggedIn(boolean loggedIn) {\n        this.loggedIn = loggedIn;\n    }\n}\nclass UserDatabase {\n    private Map<String, User> users = new HashMap<>();\n    public UserDatabase() {\n        users.put(\"alice\", new User(\"alice\", \"alice123\"));\n        users.put(\"bob\", new User(\"bob\", \"bob123\"));\n    }\n    public User findUserByName(String username) {\n        return users.get(username);\n    }\n    public void updateUserStatus(User user) {\n    }\n}\npublic class AuthenticationSystem {\n    private UserDatabase userDatabase = new UserDatabase();\n    public boolean authenticateUser(String username, String password) {\n        User user = userDatabase.findUserByName(username);\n        if (user != null && user.getPassword().equals(password)) {\n            user.setLoggedIn(true);\n            userDatabase.updateUserStatus(user);\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n        AuthenticationSystem authSystem = new AuthenticationSystem();\n        boolean loginResult1 = authSystem.authenticateUser(\"alice\", \"alice123\"); \n        boolean loginResult2 = authSystem.authenticateUser(\"bob\", \"wrongpassword\"); \n        boolean loginResult3 = authSystem.authenticateUser(\"charlie\", \"charlie123\"); \n        System.out.println(\"Login result 1: \" + loginResult1);\n        System.out.println(\"Login result 2: \" + loginResult2);\n        System.out.println(\"Login result 3: \" + loginResult3);\n    }\n}", "content": "Please write a Java method that handles the user login process. The method should accept two string parameters representing the username and password. If the username exists and the password is correct, set the user's login status to logged in and save the updated user information to the database. If the login fails, return false.\n\nPlease implement the method according to the following requirements:\n- The method name is `authenticateUser`.\n- Use a class named `UserDatabase` to simulate database operations. This class should contain two methods: `findUserByName` and `updateUserStatus`.\n- The `findUserByName` method looks up a user by username. If found, it returns a `User` object; otherwise, it returns null.\n- The `updateUserStatus` method updates the user's login status and saves it to the database.\n- The `User` class should contain three methods: `getUsername`, `getPassword`, and `setLoggedIn`.\n- Return true if the user logs in successfully; otherwise, return false.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass User {\n    private String username;\n    private String password;\n    private boolean loggedIn;\n    public User(String username, String password) {\n    }\n    public String getUsername() {\n    }\n    public String getPassword() {\n    }\n    public void setLoggedIn(boolean loggedIn) {\n    }\n}\nclass UserDatabase {\n    private Map<String, User> users = new HashMap<>();\n    public UserDatabase() {\n    }\n    public User findUserByName(String username) {\n    }\n    public void updateUserStatus(User user) {\n    }\n}\npublic class AuthenticationSystem {\n    private UserDatabase userDatabase = new UserDatabase();\n    public boolean authenticateUser(String username, String password) {\n    }\n}\n```", "id": 1665, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Others", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nclass AuthenticationSystemTest {\n    private AuthenticationSystem authSystem;\n    @Before\n    public void setUp() {\n        authSystem = new AuthenticationSystem();\n    }\n    @Test\n    public void testAuthenticateUserWithValidCredentialsForAlice() {\n        boolean loginResult = authSystem.authenticateUser(\"alice\", \"alice123\");\n        Assert.assertTrue(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithInvalidPasswordForBob() {\n        boolean loginResult = authSystem.authenticateUser(\"bob\", \"wrongpassword\");\n        Assert.assertFalse(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithNonExistentUser() {\n        boolean loginResult = authSystem.authenticateUser(\"charlie\", \"charlie123\");\n        Assert.assertFalse(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithValidCredentialsForBob() {\n        boolean loginResult = authSystem.authenticateUser(\"bob\", \"bob123\");\n        Assert.assertTrue(loginResult);\n    }\n    @Test\n    public void testAuthenticateUserWithInvalidPasswordForAlice() {\n        boolean loginResult = authSystem.authenticateUser(\"alice\", \"wrongpassword\");\n        Assert.assertFalse(loginResult);\n    }\n}"}}
{"canonical_solution": "import java.lang.String;\npublic class StudentManager {\n    private String studentId = \"12345\"; \n    public String getStudentId() {\n        return studentId;\n    }\n    public static void main(String[] args) {\n        StudentManager manager = new StudentManager();\n        checkFunction(manager.getStudentId());\n    }\n    public static void checkFunction(String id) {\n        if (\"12345\".equals(id)) {\n            System.out.println(\"验证成功，学生ID正确。\");\n        } else {\n            System.out.println(\"验证失败，学生ID不正确。\");\n        }\n    }\n}", "content": "Please write a Java program to implement a class named `StudentManager` which includes a method `getStudentId`. The purpose of this method is to return the value of a private member variable `studentId`. Ensure that your code is complete, clear, and follows Java programming conventions.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.String;\npublic class StudentManager {\n    private String studentId = \"12345\"; \n    public String getStudentId() {\n    }\n}\n```", "id": 1666, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\npublic class StudentManagerTest {\n    @Test\n    public void testGetStudentId() {\n        StudentManager manager = new StudentManager();\n        assertEquals(\"12345\", manager.getStudentId());\n    }\n    @Test\n    public void testCheckFunctionSuccess() {\n        assertEquals(\"验证成功，学生ID正确。\", captureOutput(() -> StudentManager.checkFunction(\"12345\")));\n    }\n    @Test\n    public void testCheckFunctionFailure() {\n        assertEquals(\"验证失败，学生ID不正确。\", captureOutput(() -> StudentManager.checkFunction(\"54321\")));\n    }\n    @Test\n    public void testMainFunction() {\n        StudentManager.main(new String[]{}); \n    }\n    private String captureOutput(Runnable runnable) {\n        java.io.ByteArrayOutputStream outContent = new java.io.ByteArrayOutputStream();\n        java.io.PrintStream originalOut = System.out;\n        System.setOut(new java.io.PrintStream(outContent));\n        runnable.run();\n        System.setOut(originalOut);\n        return outContent.toString().trim();\n    }\n}"}}
{"canonical_solution": "import java.util.Locale;\npublic class TicketMachine {\n    private int totalIncome;\n    private int currentBalance;\n    private int ticketPrice;\n    public TicketMachine(int ticketPrice) {\n        this.ticketPrice = ticketPrice;\n        this.totalIncome = 0;\n        this.currentBalance = 0;\n    }\n    public void setTicketPrice(int price) {\n        this.ticketPrice = price;\n    }\n    public void addBalance(int amount) {\n        this.currentBalance += amount;\n    }\n    public void printTicket() {\n        if (currentBalance >= ticketPrice) {\n            System.out.println(\"##################\");\n            System.out.println(\"# 自动售票机\");\n            System.out.println(\"# 车票\");\n            System.out.println(\"# \" + ticketPrice + \" 分\");\n            System.out.println(\"##################\");\n            System.out.println();\n            totalIncome += ticketPrice;\n            currentBalance -= ticketPrice;\n        } else {\n            System.out.println(\"余额不足，请增加余额。\");\n        }\n    }\n    public int getTotalIncome() {\n        return totalIncome;\n    }\n    public static void checkFunction() {\n        TicketMachine machine = new TicketMachine(50);\n        machine.addBalance(50);\n        machine.printTicket();\n        machine.addBalance(100);\n        machine.printTicket();\n        if (machine.getTotalIncome() == 100) {\n            System.out.println(\"测试通过！\");\n        } else {\n            System.out.println(\"测试失败！\");\n        }\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java program that simulates the workflow of an automatic ticket machine. The ticket machine should be able to print tickets and update the internal revenue statistics of the machine. The price of tickets should be dynamically adjustable. In addition, after each ticket is printed, the balance of the ticket machine should be reset to zero in preparation for receiving the next customer's payment.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Locale;\npublic class TicketMachine {\n    private int totalIncome;\n    private int currentBalance;\n    private int ticketPrice;\n    public TicketMachine(int ticketPrice) {\n    }\n    public void setTicketPrice(int price) {\n    }\n    public void addBalance(int amount) {\n    }\n    public void printTicket() {\n    }\n    public int getTotalIncome() {\n        return 0;\n    }\n}\n```", "id": 1667, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class TicketMachineTest {\n    private TicketMachine ticketMachine;\n    @BeforeEach\n    public void setUp() {\n        ticketMachine = new TicketMachine(50);\n    }\n    @Test\n    public void testSetTicketPrice() {\n        ticketMachine.setTicketPrice(100);\n        ticketMachine.addBalance(100);\n        ticketMachine.printTicket();\n        assertEquals(100, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testAddBalance() {\n        ticketMachine.addBalance(30);\n        ticketMachine.addBalance(20);\n        ticketMachine.printTicket();\n        assertEquals(50, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testPrintTicketInsufficientBalance() {\n        ticketMachine.addBalance(20);\n        ticketMachine.printTicket();\n        assertEquals(0, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testPrintTicketWithSufficientBalanceTwice() {\n        ticketMachine.addBalance(100);\n        ticketMachine.printTicket();\n        ticketMachine.printTicket();\n        assertEquals(100, ticketMachine.getTotalIncome());\n    }\n    @Test\n    public void testGetTotalIncome() {\n        ticketMachine.addBalance(150);\n        ticketMachine.printTicket();\n        ticketMachine.printTicket();\n        assertEquals(100, ticketMachine.getTotalIncome());\n    }\n}"}}
{"canonical_solution": "import java.io.File;\npublic class FilePathUtil {\n    public static String getSystemFilePath() {\n        String osName = System.getProperty(\"os.name\").toLowerCase();\n        if (osName.contains(\"win\")) {\n            return System.getenv(\"TEMP\");\n        } else {\n            return System.getProperty(\"user.home\");\n        }\n    }\n    public static void checkFunction() {\n        String path = getSystemFilePath();\n        System.out.println(\"获取的路径为: \" + path);\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java method to get the current system's temporary file storage path. If the current system is Windows, return the system's temporary folder path; if it is another operating system, return the user's home directory path. Make sure your method can automatically detect the type of operating system and return the correct path accordingly.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\npublic class FilePathUtil {\n    public static String getSystemFilePath() {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1668, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Operating System", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class FilePathUtilTest {\n    @Test\n    public void testGetSystemFilePathOnWindows() {\n        System.setProperty(\"os.name\", \"Windows 10\");\n        String tempDir = System.getenv(\"TEMP\");\n        assertEquals(tempDir, FilePathUtil.getSystemFilePath());\n    }\n    @Test\n    public void testGetSystemFilePathOnLinux() {\n        System.setProperty(\"os.name\", \"Linux\");\n        String homeDir = System.getProperty(\"user.home\");\n        assertEquals(homeDir, FilePathUtil.getSystemFilePath());\n    }\n    @Test\n    public void testGetSystemFilePathOnMac() {\n        System.setProperty(\"os.name\", \"Mac OS X\");\n        String homeDir = System.getProperty(\"user.home\");\n        assertEquals(homeDir, FilePathUtil.getSystemFilePath());\n    }\n}"}}
{"canonical_solution": "import java.util.Objects;\nclass Student {\n    private String name;\n    public Student(String name) {\n        this.name = name;\n    }\n    public String getName() {\n        return name;\n    }\n}\nclass NameVerifier {\n    public static void verifyStudentName(Student student, String expectedName) {\n        if (student == null) {\n            throw new IllegalArgumentException(\"学生对象不能为null\");\n        }\n        String actualName = student.getName();\n        String errorMessage = String.format(\"\\n期望的学生姓名为:\\n  <%s>\\n但实际上是:\\n  <%s>\", expectedName, actualName);\n        if (!Objects.equals(actualName, expectedName)) {\n            throw new IllegalArgumentException(errorMessage);\n        }\n    }\n    public static void main(String[] args) {\n        Student student = new Student(\"张三\");\n        try {\n            verifyStudentName(student, \"李四\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            verifyStudentName(student, \"张三\");\n            System.out.println(\"学生姓名验证通过\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method that verifies whether a student's name matches a given name. If the student's name does not match, a custom exception with detailed error information should be thrown.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Student {\n    private String name;\n    public Student(String name) {\n    }\n    public String getName() {\n    }\n}\nclass NameVerifier {\n    public static void verifyStudentName(Student student, String expectedName) {\n    }\n}\n```", "id": 1669, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nclass StudentTest {\n    @Test\n    void testGetName() {\n        Student student = new Student(\"张三\");\n        assertEquals(\"张三\", student.getName());\n    }\n}\nclass NameVerifierTest {\n    @Test\n    void testVerifyStudentNameWithCorrectName() {\n        Student student = new Student(\"张三\");\n        assertDoesNotThrow(() -> NameVerifier.verifyStudentName(student, \"张三\"));\n    }\n    @Test\n    void testVerifyStudentNameWithIncorrectName() {\n        Student student = new Student(\"张三\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(student, \"李四\");\n        });\n        String expectedMessage = \"\\n期望的学生姓名为:\\n  <李四>\\n但实际上是:\\n  <张三>\";\n        assertTrue(exception.getMessage().contains(expectedMessage));\n    }\n    @Test\n    void testVerifyStudentNameWithNullStudent() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(null, \"张三\");\n        });\n        assertEquals(\"学生对象不能为null\", exception.getMessage());\n    }\n    @Test\n    void testVerifyStudentNameWithEmptyExpectedName() {\n        Student student = new Student(\"张三\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(student, \"\");\n        });\n        String expectedMessage = \"\\n期望的学生姓名为:\\n  <>\\n但实际上是:\\n  <张三>\";\n        assertTrue(exception.getMessage().contains(expectedMessage));\n    }\n    @Test\n    void testVerifyStudentNameWithWhitespaceExpectedName() {\n        Student student = new Student(\"张三\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            NameVerifier.verifyStudentName(student, \" \");\n        });\n        String expectedMessage = \"\\n期望的学生姓名为:\\n  < >\\n但实际上是:\\n  <张三>\";\n        assertTrue(exception.getMessage().contains(expectedMessage));\n    }\n}"}}
{"canonical_solution": "import javax.swing.JTextField;\npublic class BookManager {\n    private JTextField bookNameField;\n    private JTextField authorField;\n    private JTextField publisherField;\n    private JTextField yearField;\n    public BookManager(JTextField bookNameField, JTextField authorField, JTextField publisherField, JTextField yearField) {\n        this.bookNameField = bookNameField;\n        this.authorField = authorField;\n        this.publisherField = publisherField;\n        this.yearField = yearField;\n    }\n    public void addNewBook() {\n        bookNameField.setText(\"\");\n        authorField.setText(\"\");\n        publisherField.setText(\"\");\n        yearField.setText(\"\");\n    }\n    public static void main(String[] args) {\n        JTextField bookName = new JTextField();\n        JTextField author = new JTextField();\n        JTextField publisher = new JTextField();\n        JTextField year = new JTextField();\n        BookManager manager = new BookManager(bookName, author, publisher, year);\n        manager.addNewBook(); \n        assert bookName.getText().equals(\"\");\n        assert author.getText().equals(\"\");\n        assert publisher.getText().equals(\"\");\n        assert year.getText().equals(\"\");\n        System.out.println(\"所有输入字段已成功重置，可以添加新书的信息。\");\n    }\n}", "content": "Please describe how you would implement a feature in a simple library management system: adding a new book. In this system, whenever the user wants to add a new book, the system needs to reset all input fields so that the user can enter the information for the new book.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JTextField;\npublic class BookManager {\n    private JTextField bookNameField;\n    private JTextField authorField;\n    private JTextField publisherField;\n    private JTextField yearField;\n    public BookManager(JTextField bookNameField, JTextField authorField, JTextField publisherField, JTextField yearField) {}\n    public void addNewBook() {}\n}\n```", "id": 1670, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport javax.swing.JTextField;\nimport static org.junit.Assert.assertEquals;\npublic class BookManagerTest {\n    private BookManager manager;\n    private JTextField bookNameField;\n    private JTextField authorField;\n    private JTextField publisherField;\n    private JTextField yearField;\n    @Before\n    public void setUp() {\n        bookNameField = new JTextField();\n        authorField = new JTextField();\n        publisherField = new JTextField();\n        yearField = new JTextField();\n        manager = new BookManager(bookNameField, authorField, publisherField, yearField);\n    }\n    @Test\n    public void testAddNewBookResetsBookNameField() {\n        bookNameField.setText(\"Sample Book\");\n        manager.addNewBook();\n        assertEquals(\"\", bookNameField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsAuthorField() {\n        authorField.setText(\"Sample Author\");\n        manager.addNewBook();\n        assertEquals(\"\", authorField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsPublisherField() {\n        publisherField.setText(\"Sample Publisher\");\n        manager.addNewBook();\n        assertEquals(\"\", publisherField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsYearField() {\n        yearField.setText(\"2022\");\n        manager.addNewBook();\n        assertEquals(\"\", yearField.getText());\n    }\n    @Test\n    public void testAddNewBookResetsAllFields() {\n        bookNameField.setText(\"Sample Book\");\n        authorField.setText(\"Sample Author\");\n        publisherField.setText(\"Sample Publisher\");\n        yearField.setText(\"2022\");\n        manager.addNewBook();\n        assertEquals(\"\", bookNameField.getText());\n        assertEquals(\"\", authorField.getText());\n        assertEquals(\"\", publisherField.getText());\n        assertEquals(\"\", yearField.getText());\n    }\n}"}}
{"canonical_solution": "import java.lang.IllegalArgumentException;\npublic class AgeValidator {\n    public static boolean validateAge(int age) throws IllegalArgumentException {\n        if (age <= 0) {\n            throw new IllegalArgumentException(\"年龄必须大于0。\");\n        }\n        if (age > 120) {\n            throw new IllegalArgumentException(\"年龄不能超过120。\");\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n        try {\n            System.out.println(validateAge(25)); \n            System.out.println(validateAge(0));  \n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n        try {\n            System.out.println(validateAge(130)); \n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please write a Java method to validate whether an integer is a valid age value. A valid age is defined as an integer greater than 0 and less than or equal to 120. If the age is valid, the method should return `true`; otherwise, it should return `false`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class AgeValidator {\n    public static boolean validateAge(int age) throws IllegalArgumentException {\n    }\n}\n```", "id": 1671, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class AgeValidatorTest {\n    @Test\n    public void testValidateAgeValid() {\n        assertDoesNotThrow(() -> {\n            assertTrue(AgeValidator.validateAge(25));\n        });\n    }\n    @Test\n    public void testValidateAgeZero() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AgeValidator.validateAge(0);\n        });\n        assertEquals(\"年龄必须大于0。\", exception.getMessage());\n    }\n    @Test\n    public void testValidateAgeNegative() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AgeValidator.validateAge(-5);\n        });\n        assertEquals(\"年龄必须大于0。\", exception.getMessage());\n    }\n    @Test\n    public void testValidateAgeOver120() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            AgeValidator.validateAge(130);\n        });\n        assertEquals(\"年龄不能超过120。\", exception.getMessage());\n    }\n    @Test\n    public void testValidateAgeBoundary() {\n        assertDoesNotThrow(() -> {\n            assertTrue(AgeValidator.validateAge(120));\n        });\n    }\n}"}}
{"canonical_solution": "import java.awt.Color;\npublic class ColorConverter {\n    public static String convertToRGBString(int color) {\n        String r = Integer.toHexString((color >> 16) & 0xFF);\n        String g = Integer.toHexString((color >> 8) & 0xFF);\n        String b = Integer.toHexString(color & 0xFF);\n        return String.format(\"r:%s g:%s b:%s\", r, g, b);\n    }\n    public static void main(String[] args) {\n        int color1 = 0xFF0000; \n        int color2 = 0x00FF00; \n        int color3 = 0x0000FF; \n        System.out.println(convertToRGBString(color1)); \n        System.out.println(convertToRGBString(color2)); \n        System.out.println(convertToRGBString(color3)); \n    }\n}", "content": "Please write a Java method that converts an integer to its corresponding RGB color value and returns this color value as a string. The integer represents a color, where the color value is defined by the RGB model, i.e., a combination of red, green, and blue. You need to convert each color component to a hexadecimal string and return this string in the format \"r:red value g:green value b:blue value\". Ensure your method is completely self-contained and includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Color;\npublic class ColorConverter {\n    public static String convertToRGBString(int color) {\n    }\n}\n```", "id": 1672, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class ColorConverterTest {\n    @Test\n    public void testConvertToRGBString_red() {\n        int color = 0xFF0000;\n        String expected = \"r:ff g:0 b:0\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_green() {\n        int color = 0x00FF00;\n        String expected = \"r:0 g:ff b:0\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_blue() {\n        int color = 0x0000FF;\n        String expected = \"r:0 g:0 b:ff\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_black() {\n        int color = 0x000000;\n        String expected = \"r:0 g:0 b:0\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n    @Test\n    public void testConvertToRGBString_white() {\n        int color = 0xFFFFFF;\n        String expected = \"r:ff g:ff b:ff\";\n        assertEquals(expected, ColorConverter.convertToRGBString(color));\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.ArrayList;\npublic class 商品信息读取器 {\n    public void 显示商品信息() {\n        String 文件路径 = \"商品信息.txt\";\n        File 文件 = new File(文件路径);\n        ArrayList<String> 商品列表 = new ArrayList<>();\n        try (BufferedReader 读取器 = new BufferedReader(new FileReader(文件))) {\n            String 行;\n            while ((行 = 读取器.readLine()) != null) {\n                商品列表.add(行);\n            }\n            for (String 商品信息 : 商品列表) {\n                String[] 属性 = 商品信息.split(\",\");\n                System.out.println(\"商品名称: \" + 属性[0] + \", 价格: \" + 属性[1] + \"元, 库存数量: \" + 属性[2] + \"件\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"读取文件时发生错误: \" + e.getMessage());\n        }\n    }\n    public static void main(String[] args) {\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n}", "content": "Please write a Java program to read product information from a text file and display it on the console. The product information is stored in a file named `商品信息.txt`, with each line representing information about a product, and the attributes of the product are separated by commas `,`. The attributes include product name, price, and stock quantity. Ensure that your program can correctly handle the file reading and data parsing process.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.ArrayList;\npublic class 商品信息读取器 {\n    public void 显示商品信息() {\n    }\n}\n```", "id": 1673, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "easy", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport org.junit.Before;\nimport org.junit.After;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\npublic class 商品信息读取器Test {\n    private final String 文件路径 = \"商品信息.txt\";\n    @Before\n    public void setUp() throws IOException {\n        FileWriter 文件写入器 = new FileWriter(文件路径);\n        文件写入器.write(\"苹果,3,50\\n\");\n        文件写入器.write(\"香蕉,2,30\\n\");\n        文件写入器.write(\"橙子,4,20\\n\");\n        文件写入器.close();\n    }\n    @After\n    public void tearDown() {\n        File 文件 = new File(文件路径);\n        if(文件.exists()) {\n            文件.delete();\n        }\n    }\n    @Test\n    public void test显示商品信息_正常读取() {\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n    @Test\n    public void test显示商品信息_文件不存在() {\n        File 文件 = new File(文件路径);\n        if(文件.exists()) {\n            文件.delete();\n        }\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n    @Test\n    public void test显示商品信息_文件为空() throws IOException {\n        FileWriter 文件写入器 = new FileWriter(文件路径);\n        文件写入器.write(\"\");\n        文件写入器.close();\n        商品信息读取器 读取器 = new 商品信息读取器();\n        读取器.显示商品信息();\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\nclass BookNotFoundException extends Exception {\n    public BookNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class BookManager {\n    private Map<String, Boolean> bookStatus = new HashMap<>();\n    public boolean updateBookStatus(String bookId, boolean status) throws BookNotFoundException {\n        if (!bookStatus.containsKey(bookId)) {\n            throw new BookNotFoundException(\"Book ID not found: \" + bookId);\n        }\n        bookStatus.put(bookId, status);\n        return true;\n    }\n    public BookManager() {\n        bookStatus.put(\"B001\", false); \n        bookStatus.put(\"B002\", true);  \n        bookStatus.put(\"B003\", false); \n    }\n    public void checkStatus(String bookId, boolean expectedStatus) {\n        if (bookStatus.getOrDefault(bookId, null) == expectedStatus) {\n            System.out.println(\"状态更新成功\");\n        } else {\n            System.out.println(\"状态更新失败\");\n        }\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        try {\n            manager.updateBookStatus(\"B001\", true); \n            manager.checkStatus(\"B001\", true); \n        } catch (BookNotFoundException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}", "content": "Please design a Java program to manage the borrowing status of books in an online library. In this program, you need to implement a class named `BookManager`, which contains a method `updateBookStatus`. This method takes two parameters: one is the book's ID (`String` type), and the other is the book's new status (`boolean` type, `true` indicates that the book has been borrowed, `false` indicates that the book is available for borrowing). If the book status is updated successfully, the method should return `true`; if the given book ID does not exist, it should throw a custom exception `BookNotFoundException`. Additionally, a `checkStatus` method should be implemented to verify the correctness of the `updateBookStatus` method. This method takes the book ID and the expected borrowing status, and if the status matches, it should print \"Status update successful\"; otherwise, it should print \"Status update failed\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass BookNotFoundException extends Exception {\n    public BookNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class BookManager {\n    private Map<String, Boolean> bookStatus = new HashMap<>();\n    public boolean updateBookStatus(String bookId, boolean status) throws BookNotFoundException {\n    }\n    public BookManager() {\n    }\n    public void checkStatus(String bookId, boolean expectedStatus) {\n    }\n}\n```", "id": 1674, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class BookManagerTest {\n    private BookManager manager;\n    @BeforeEach\n    public void setup() {\n        manager = new BookManager();\n    }\n    @Test\n    public void testUpdateBookStatus_ValidBookId() throws BookNotFoundException {\n        assertTrue(manager.updateBookStatus(\"B001\", true));\n    }\n    @Test\n    public void testUpdateBookStatus_InvalidBookId() {\n        assertThrows(BookNotFoundException.class, () -> {\n            manager.updateBookStatus(\"B004\", true);\n        });\n    }\n    @Test\n    public void testUpdateBookStatus_ChangeToFalse() throws BookNotFoundException {\n        manager.updateBookStatus(\"B002\", false);\n        manager.checkStatus(\"B002\", false);\n    }\n    @Test\n    public void testCheckStatus_CorrectStatus() throws BookNotFoundException {\n        manager.updateBookStatus(\"B003\", true);\n        manager.checkStatus(\"B003\", true);\n    }\n    @Test\n    public void testCheckStatus_WrongStatus() throws BookNotFoundException {\n        manager.updateBookStatus(\"B001\", false);\n        manager.checkStatus(\"B001\", true);\n    }\n}"}}
{"canonical_solution": "import java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n        switch (operator) {\n            case '+':\n                return String.valueOf(num1 + num2);\n            case '-':\n                return String.valueOf(num1 - num2);\n            case '*':\n                return String.valueOf(num1 * num2);\n            case '/':\n                if (num2 == 0) {\n                    return \"除数不能为零\";\n                } else {\n                    return String.valueOf(num1 / num2);\n                }\n            default:\n                return \"无效的运算符\";\n        }\n    }\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        System.out.println(\"10 + 5 = \" + calculator.calculate(10, 5, '+'));\n        System.out.println(\"10 - 5 = \" + calculator.calculate(10, 5, '-'));\n        System.out.println(\"10 * 5 = \" + calculator.calculate(10, 5, '*'));\n        System.out.println(\"10 / 5 = \" + calculator.calculate(10, 5, '/'));\n        System.out.println(\"10 / 0 = \" + calculator.calculate(10, 0, '/')); \n        System.out.println(\"10 $ 5 = \" + calculator.calculate(10, 5, '$')); \n    }\n}", "content": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This class should be able to perform basic arithmetic operations: addition, subtraction, multiplication, and division. Ensure that your implementation can handle division by zero. When attempting to divide by zero, it should return a specific error message: \"Divisor cannot be zero\". Additionally, provide a method `calculate` that accepts three parameters: two integers and a character representing the operands and operator ('+', '-', '*', '/'). Perform the corresponding operation based on the provided operator and return the result. If the operator is invalid, return the error message: \"Invalid operator\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n    }\n}\n```", "id": 1675, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\npublic class SimpleCalculatorTest {\n    @Test\n    public void testAddition() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"15\", calculator.calculate(10, 5, '+'));\n    }\n    @Test\n    public void testSubtraction() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"5\", calculator.calculate(10, 5, '-'));\n    }\n    @Test\n    public void testMultiplication() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"50\", calculator.calculate(10, 5, '*'));\n    }\n    @Test\n    public void testDivision() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"2\", calculator.calculate(10, 5, '/'));\n    }\n    @Test\n    public void testDivisionByZero() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"除数不能为零\", calculator.calculate(10, 0, '/'));\n    }\n    @Test\n    public void testInvalidOperator() {\n        SimpleCalculator calculator = new SimpleCalculator();\n        assertEquals(\"无效的运算符\", calculator.calculate(10, 5, '$'));\n    }\n}"}}
{"canonical_solution": "import java.util.Optional;\nclass Movie {\n    private int commentCount;\n    public Movie() {\n        this.commentCount = 0;\n    }\n    public void decreaseComment() {\n        if (this.commentCount > 0) {\n            this.commentCount--;\n        }\n    }\n    public int getCommentCount() {\n        return this.commentCount;\n    }\n    public void setCommentCount(int count) {\n        this.commentCount = count;\n    }\n}\nclass CommentDeleted {\n    private String movieId;\n    public CommentDeleted(String movieId) {\n        this.movieId = movieId;\n    }\n    public String getMovieId() {\n        return movieId;\n    }\n}\nclass MovieRepository {\n    public static Optional<Movie> findById(String id) {\n        return Optional.of(new Movie()); \n    }\n    public static void save(Movie movie) {\n    }\n}\npublic class MovieCommentUpdater {\n    public static void decreaseCommentCount(CommentDeleted commentDeleted) {\n        MovieRepository.findById(commentDeleted.getMovieId()).ifPresent(movie -> {\n            movie.decreaseComment(); \n            MovieRepository.save(movie); \n        });\n    }\n    public static void checkFunction() {\n        Movie movie = new Movie();\n        movie.setCommentCount(5); \n        CommentDeleted commentDeleted = new CommentDeleted(\"someMovieId\");\n        decreaseCommentCount(commentDeleted); \n        System.out.println(movie.getCommentCount() == 4 ? \"正确\" : \"错误\"); \n    }\n    public static void main(String[] args) {\n        checkFunction(); \n    }\n}", "content": "Please design a Java function that updates the number of movie comments. When a comment is deleted, the movie's comment count should decrease. You need to implement a method named `decreaseCommentCount` which takes a parameter `commentDeleted`, representing the deleted comment information. You need to find the corresponding movie based on the deleted comment and update its comment count. Ensure your code can handle the following two situations:\n\n1. If the movie does not exist, do nothing.\n2. If the movie exists, decrease its comment count and update the movie information.\n\nPlease use the code template below and complete the method implementation based on the requirements mentioned above.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Optional;\nclass Movie {\n    private int commentCount;\n    public Movie() {\n    }\n    public void decreaseComment() {\n    }\n    public int getCommentCount() {\n    }\n    public void setCommentCount(int count) {\n    }\n}\nclass CommentDeleted {\n    private String movieId;\n    public CommentDeleted(String movieId) {\n    }\n    public String getMovieId() {\n    }\n}\nclass MovieRepository {\n    public static Optional<Movie> findById(String id) {\n    }\n    public static void save(Movie movie) {\n    }\n}\npublic class MovieCommentUpdater {\n    public static void decreaseCommentCount(CommentDeleted commentDeleted) {\n    }\n}\n```", "id": 1676, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Optional;\nclass MovieTest {\n    @Test\n    void testDecreaseComment() {\n        Movie movie = new Movie();\n        movie.setCommentCount(5);\n        movie.decreaseComment();\n        assertEquals(4, movie.getCommentCount());\n    }\n    @Test\n    void testDecreaseCommentAtZero() {\n        Movie movie = new Movie();\n        movie.setCommentCount(0);\n        movie.decreaseComment();\n        assertEquals(0, movie.getCommentCount());\n    }\n    @Test\n    void testGetCommentCount() {\n        Movie movie = new Movie();\n        movie.setCommentCount(10);\n        assertEquals(10, movie.getCommentCount());\n    }\n    @Test\n    void testSetCommentCount() {\n        Movie movie = new Movie();\n        movie.setCommentCount(2);\n        assertEquals(2, movie.getCommentCount());\n    }\n    @Test\n    void testMovieInitialization() {\n        Movie movie = new Movie();\n        assertEquals(0, movie.getCommentCount());\n    }\n}"}}
{"canonical_solution": "import javax.swing.JComboBox;\nimport java.util.ArrayList;\nimport java.util.List;\nclass Team {\n    private String name;\n    private List<String> players = new ArrayList<>();\n    public Team(String name, List<String> players) {\n        this.name = name;\n        this.players.addAll(players);\n    }\n    public String getName() {\n        return name;\n    }\n    public List<String> getPlayers() {\n        return players;\n    }\n}\nclass WorldCup {\n    private List<Team> teams = new ArrayList<>();\n    public void addTeam(Team team) {\n        teams.add(team);\n    }\n    public List<Team> getTeams() {\n        return teams;\n    }\n}\npublic class TeamDisplay {\n    JComboBox<String> teamComboBox = new JComboBox<>();\n    JComboBox<String> playerComboBox = new JComboBox<>();\n    WorldCup worldCup = new WorldCup();\n    public TeamDisplay() {\n        List<String> players = new ArrayList<>();\n        players.add(\"Player1\");\n        players.add(\"Player2\");\n        Team team = new Team(\"Team1\", players);\n        worldCup.addTeam(team);\n    }\n    public void displayLastTeamAndPlayers() {\n        int size = worldCup.getTeams().size();\n        if (size > 0) {\n            Team lastTeam = worldCup.getTeams().get(size - 1);\n            teamComboBox.addItem(lastTeam.getName());\n            for (String player : lastTeam.getPlayers()) {\n                playerComboBox.addItem(player);\n            }\n        }\n    }\n}", "content": "Please write a Java function to achieve the following functionality: Find and display the name of the last registered team from a football World Cup match, and populate a drop-down list (ComboBox) with the names of all players from that team. Ensure that your code snippet is completely self-contained and includes all necessary package imports.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JComboBox;\nimport java.util.ArrayList;\nimport java.util.List;\nclass Team {\n    private String name;\n    private List<String> players = new ArrayList<>();\n    public Team(String name, List<String> players) {\n    }\n    public String getName() {\n    }\n    public List<String> getPlayers() {\n    }\n}\nclass WorldCup {\n    private List<Team> teams = new ArrayList<>();\n    public void addTeam(Team team) {\n    }\n    public List<Team> getTeams() {\n    }\n}\npublic class TeamDisplay {\n    JComboBox<String> teamComboBox = new JComboBox<>();\n    JComboBox<String> playerComboBox = new JComboBox<>();\n    WorldCup worldCup = new WorldCup();\n    public TeamDisplay() {\n    }\n    public void displayLastTeamAndPlayers() {\n    }\n}\n```", "id": 1677, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Before;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JComboBox;\nimport static org.junit.Assert.assertEquals;\nclass TeamTest {\n    private Team team;\n    @Before\n    public void setUp() {\n        List<String> players = new ArrayList<>();\n        players.add(\"Player1\");\n        players.add(\"Player2\");\n        team = new Team(\"Team1\", players);\n    }\n    @Test\n    public void testGetName() {\n        assertEquals(\"Team1\", team.getName());\n    }\n    @Test\n    public void testGetPlayers() {\n        List<String> players = team.getPlayers();\n        assertEquals(2, players.size());\n        assertEquals(\"Player1\", players.get(0));\n        assertEquals(\"Player2\", players.get(1));\n    }\n}\nclass WorldCupTest {\n    private WorldCup worldCup;\n    private Team team;\n    @Before\n    public void setUp() {\n        worldCup = new WorldCup();\n        List<String> players = new ArrayList<>();\n        players.add(\"Player1\");\n        players.add(\"Player2\");\n        team = new Team(\"Team1\", players);\n    }\n    @Test\n    public void testAddTeam() {\n        worldCup.addTeam(team);\n        List<Team> teams = worldCup.getTeams();\n        assertEquals(1, teams.size());\n        assertEquals(\"Team1\", teams.get(0).getName());\n    }\n    @Test\n    public void testGetTeams() {\n        worldCup.addTeam(team);\n        List<Team> teams = worldCup.getTeams();\n        assertEquals(1, teams.size());\n        assertEquals(\"Player1\", teams.get(0).getPlayers().get(0));\n    }\n}\nclass TeamDisplayTest {\n    private TeamDisplay teamDisplay;\n    @Before\n    public void setUp() {\n        teamDisplay = new TeamDisplay();\n    }\n    @Test\n    public void testDisplayLastTeamAndPlayers() {\n        teamDisplay.displayLastTeamAndPlayers();\n        JComboBox<String> teamComboBox = teamDisplay.teamComboBox;\n        JComboBox<String> playerComboBox = teamDisplay.playerComboBox;\n        assertEquals(1, teamComboBox.getItemCount());\n        assertEquals(2, playerComboBox.getItemCount());\n        assertEquals(\"Team1\", teamComboBox.getItemAt(0));\n        assertEquals(\"Player1\", playerComboBox.getItemAt(0));\n        assertEquals(\"Player2\", playerComboBox.getItemAt(1));\n    }\n}"}}
{"canonical_solution": "import java.util.Collections;\nimport java.util.Set;\nimport java.util.HashSet;\npublic class BankApplication {\n    private Set<String> cardNumbers;\n    public Set<String> getUserCardInfo() {\n        if (cardNumbers == null) {\n            cardNumbers = new HashSet<>();\n        }\n        return cardNumbers;\n    }\n    public static void main(String[] args) {\n        BankApplication app = new BankApplication();\n        Set<String> cards = app.getUserCardInfo();\n        if (cards != null && cards instanceof Set) {\n            System.out.println(\"方法正确实现，返回了一个集合，而不是null。\");\n        } else {\n            System.out.println(\"方法实现有误，请检查你的代码。\");\n        }\n    }\n}", "content": "Assuming you are developing a banking application, you need to write a method to get all the bank card information of a user. If the user doesn't have any bank cards yet, your method should return an empty collection instead of null.\n\n- Ensure your method is self-contained and clear.\n- Your method should be able to handle any exception cases, ensuring the robustness of the program.\n- Method names and class names need to be meaningful.\n- Add necessary comments to help understand the logic.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Collections;\nimport java.util.Set;\nimport java.util.HashSet;\npublic class BankApplication {\n    private Set<String> cardNumbers;\n    public Set<String> getUserCardInfo() {\n    }\n}\n```", "id": 1678, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Set;\nimport java.util.HashSet;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class BankApplicationTest {\n    private BankApplication bankApplication;\n    @BeforeEach\n    public void setUp() {\n        bankApplication = new BankApplication();\n    }\n    @Test\n    public void testGetUserCardInfoNotNull() {\n        Set<String> cards = bankApplication.getUserCardInfo();\n        assertNotNull(cards);\n    }\n    @Test\n    public void testGetUserCardInfoEmptySet() {\n        Set<String> cards = bankApplication.getUserCardInfo();\n        assertTrue(cards.isEmpty());\n    }\n    @Test\n    public void testGetUserCardInfoAddCard() {\n        Set<String> cards = bankApplication.getUserCardInfo();\n        cards.add(\"1234-5678-9012-3456\");\n        assertEquals(1, cards.size());\n    }\n    @Test\n    public void testGetUserCardInfoSameInstance() {\n        Set<String> firstCall = bankApplication.getUserCardInfo();\n        Set<String> secondCall = bankApplication.getUserCardInfo();\n        assertSame(firstCall, secondCall);\n    }\n    @Test\n    public void testMainMethod() {\n        BankApplication.main(new String[]{});\n    }\n}"}}
{"canonical_solution": "import java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.zip.InflaterInputStream;\npublic class DataWrapper {\n    private boolean isClosed = false;\n    private byte[] compressedData; \n    public DataWrapper(byte[] data) {\n        this.compressedData = data;\n    }\n    public synchronized InputStream getDecompressedStream() throws IllegalStateException {\n        checkIfClosed();\n        return new InflaterInputStream(new ByteArrayInputStream(compressedData));\n    }\n    private void checkIfClosed() throws IllegalStateException {\n        if (isClosed) {\n            throw new IllegalStateException(\"DataWrapper is closed.\");\n        }\n    }\n    public void close() {\n        isClosed = true;\n    }\n}\npublic class DataWrapperTest {\n    public static void main(String[] args) {\n        byte[] compressedData = {};\n        byte[] expectedDecompressedData = {};\n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream decompressedStream = dataWrapper.getDecompressedStream();\n        dataWrapper.close();\n    }\n}", "content": "Please write a Java class `DataWrapper`; this class should include a method `getDecompressedStream`, which is used to get an `InputStream` that contains the decompressed data. Assume you have a method `getCompressedData` to get the original compressed data; you need to use `InflaterInputStream` in the `getDecompressedStream` method to decompress these data. Additionally, make sure to check if the `DataWrapper` object is already closed before acquiring the stream; if it is closed, throw an `IllegalStateException`. Provide a `checkIfClosed` method to perform this check.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.zip.InflaterInputStream;\npublic class DataWrapper {\n    private boolean isClosed = false;\n    private byte[] compressedData; \n    public DataWrapper(byte[] data) {\n    }\n    public synchronized InputStream getDecompressedStream() throws IllegalStateException {\n        return null;\n    }\n    private void checkIfClosed() throws IllegalStateException {\n    }\n    public void close() {\n    }\n}\n```", "id": 1679, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Software Engineering", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.zip.InflaterInputStream;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\npublic class DataWrapperTest {\n    @Test\n    public void testGetDecompressedStream() throws Exception {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream decompressedStream = dataWrapper.getDecompressedStream();\n        assertNotNull(decompressedStream);\n    }\n    @Test(expected = IllegalStateException.class)\n    public void testGetDecompressedStreamWhenClosed() {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        dataWrapper.close();\n        dataWrapper.getDecompressedStream(); \n    }\n    @Test\n    public void testClose() {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        dataWrapper.close();\n        try {\n            dataWrapper.getDecompressedStream();\n            fail(\"Expected an IllegalStateException to be thrown\");\n        } catch (IllegalStateException e) {\n            assertEquals(\"DataWrapper is closed.\", e.getMessage());\n        }\n    }\n    @Test\n    public void testDecompression() throws Exception {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        byte[] expectedDecompressedData = {}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream decompressedStream = dataWrapper.getDecompressedStream();\n        byte[] actualDecompressedData = decompressedStream.readAllBytes();\n        assertArrayEquals(expectedDecompressedData, actualDecompressedData);\n    }\n    @Test\n    public void testMultipleCalls() throws Exception {\n        byte[] compressedData = {120, 1, 3, 0, 0, 0, 0, 1}; \n        DataWrapper dataWrapper = new DataWrapper(compressedData);\n        InputStream firstCallStream = dataWrapper.getDecompressedStream();\n        assertNotNull(firstCallStream);\n        InputStream secondCallStream = dataWrapper.getDecompressedStream();\n        assertNotNull(secondCallStream);\n    }\n}"}}
{"canonical_solution": "import javax.swing.JTextField;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Locale;\npublic class DateFormatter {\n    public static void formatCurrentDateAndSetText(JTextField textField) {\n        String dateFormat = \"yyyy-MM-dd\"; \n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat, Locale.US);\n        String formattedDate = sdf.format(Calendar.getInstance().getTime());\n        textField.setText(formattedDate);\n    }\n    public static void checkFunction() {\n        JTextField textField = new JTextField();\n        formatCurrentDateAndSetText(textField);\n        System.out.println(\"设置的文本框文本为: \" + textField.getText());\n    }\n    public static void main(String[] args) {\n        checkFunction();\n    }\n}", "content": "Please write a Java method to format the current date as \"year-month-day\" and set it as the text of a given text box.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JTextField;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Locale;\npublic class DateFormatter {\n    public static void formatCurrentDateAndSetText(JTextField textField) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "id": 1680, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport javax.swing.JTextField;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Locale;\npublic class DateFormatterTest {\n    @Test\n    public void testFormatCurrentDateAndSetText() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        String dateFormat = \"yyyy-MM-dd\";\n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat, Locale.US);\n        String expectedDate = sdf.format(Calendar.getInstance().getTime());\n        assertEquals(expectedDate, textField.getText());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextNotNull() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        assertNotNull(textField.getText());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextEmptyInitially() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        assertFalse(textField.getText().isEmpty());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextCorrectLocale() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        String dateFormat = \"yyyy-MM-dd\";\n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat, Locale.US);\n        String expectedDate = sdf.format(Calendar.getInstance().getTime());\n        assertEquals(expectedDate, textField.getText());\n    }\n    @Test\n    public void testFormatCurrentDateAndSetTextInstance() {\n        JTextField textField = new JTextField();\n        DateFormatter.formatCurrentDateAndSetText(textField);\n        assertTrue(textField instanceof JTextField);\n    }\n}"}}
{"canonical_solution": "import java.util.HashMap;\nimport java.util.Map;\npublic class UserRegistrationService {\n    static class User {\n        String username;\n        String password;\n        String email;\n        public void save() {\n        }\n    }\n    static class RegistrationForm {\n        String username;\n        String password;\n        String email;\n        public Map<String, String> validate() {\n            Map<String, String> errors = new HashMap<>();\n            if (username == null || username.isEmpty()) {\n                errors.put(\"username\", \"用户名不能为空\");\n            }\n            if (password == null || password.isEmpty()) {\n                errors.put(\"password\", \"密码不能为空\");\n            }\n            if (email == null || email.isEmpty()) {\n                errors.put(\"email\", \"邮箱不能为空\");\n            }\n            return errors;\n        }\n    }\n    public String registerUser(RegistrationForm form) {\n        Map<String, String> errors = form.validate();\n        if (!errors.isEmpty()) {\n            return \"注册失败: \" + errors.toString();\n        }\n        User user = new User();\n        user.username = form.username;\n        user.password = form.password; \n        user.email = form.email;\n        user.save();\n        return \"注册成功\";\n    }\n    public static void main(String[] args) {\n        UserRegistrationService service = new UserRegistrationService();\n        RegistrationForm form = new RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        String result = service.registerUser(form);\n        System.out.println(result);\n    }\n}", "content": "Please write a Java method to handle user registration processes. The method should obtain the registration form data submitted by the user from the request, validate the data, and if the data is valid, create a new user record and save it to the database. If the form data is incorrect, return an error message. Ensure that your code can handle the following points:\n\n1. Obtain the user registration form data from the request.\n2. Validate the form data. If the form data is invalid, return an error message.\n3. If the form data is valid, create a new user and save their information (such as username, password, email, etc.) to the database.\n4. After successful registration, create a session for the user and redirect them to their personal homepage.\n\nPlease note, you need to design the classes for the form data and the user, and ensure that all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class UserRegistrationService {\n    static class User {\n        String username;\n        String password;\n        String email;\n        public void save() {\n        }\n    }\n    static class RegistrationForm {\n        String username;\n        String password;\n        String email;\n        public Map<String, String> validate() {\n        }\n    }\n    public String registerUser(RegistrationForm form) {\n    }\n}\n```", "id": 1681, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.util.Map;\npublic class UserRegistrationServiceTest {\n    @Test\n    public void testValidate_AllFieldsValid() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertTrue(errors.isEmpty());\n    }\n    @Test\n    public void testValidate_UsernameEmpty() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertFalse(errors.isEmpty());\n        Assertions.assertEquals(\"用户名不能为空\", errors.get(\"username\"));\n    }\n    @Test\n    public void testValidate_PasswordEmpty() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"\";\n        form.email = \"test@example.com\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertFalse(errors.isEmpty());\n        Assertions.assertEquals(\"密码不能为空\", errors.get(\"password\"));\n    }\n    @Test\n    public void testValidate_EmailEmpty() {\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"\";\n        Map<String, String> errors = form.validate();\n        Assertions.assertFalse(errors.isEmpty());\n        Assertions.assertEquals(\"邮箱不能为空\", errors.get(\"email\"));\n    }\n    @Test\n    public void testRegisterUser_AllFieldsValid() {\n        UserRegistrationService service = new UserRegistrationService();\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"testUser\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        String result = service.registerUser(form);\n        Assertions.assertEquals(\"注册成功\", result);\n    }\n    @Test\n    public void testRegisterUser_UsernameEmpty() {\n        UserRegistrationService service = new UserRegistrationService();\n        UserRegistrationService.RegistrationForm form = new UserRegistrationService.RegistrationForm();\n        form.username = \"\";\n        form.password = \"testPass\";\n        form.email = \"test@example.com\";\n        String result = service.registerUser(form);\n        Assertions.assertTrue(result.startsWith(\"注册失败\"));\n    }\n}"}}
{"canonical_solution": "import java.lang.System;\npublic class AudioController {\n    private static final int MIN_BRIGHTNESS = 1;\n    private int brightness;\n    public AudioController(int initialBrightness) {\n        brightness = initialBrightness;\n    }\n    public void decreaseBrightness() {\n        if (brightness > MIN_BRIGHTNESS) {\n            brightness--;\n        }\n    }\n    public int getBrightness() {\n        return brightness;\n    }\n    public static void main(String[] args) {\n        check(2); \n        check(1); \n        check(0); \n    }\n    public static void check(int initialBrightness) {\n        AudioController controller = new AudioController(initialBrightness);\n        System.out.println(\"Initial brightness: \" + controller.getBrightness());\n        controller.decreaseBrightness();\n        System.out.println(\"Brightness after decrease: \" + controller.getBrightness());\n    }\n}", "content": "Please write a Java class `AudioController`, which includes a method `decreaseBrightness` to reduce the brightness of an audio device. This method should ensure that the brightness value does not go below the minimum brightness `MIN_BRIGHTNESS`. If the brightness is already at the minimum value, it should not be reduced further. Please implement this functionality according to the following requirements:\n\n- The class should contain an integer member variable `brightness` to store the current brightness value.\n- The class should define an integer constant `MIN_BRIGHTNESS` with a value of 1, representing the minimum allowable brightness value.\n- The `decreaseBrightness` method should check the current brightness value and only decrease it if it is greater than `MIN_BRIGHTNESS`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.System;\npublic class AudioController {\n    private static final int MIN_BRIGHTNESS = 1;\n    private int brightness;\n    public AudioController(int initialBrightness) {\n    }\n    public void decreaseBrightness() {\n    }\n    public int getBrightness() {\n        return 0;\n    }\n}\n```", "id": 1682, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class AudioControllerTest {\n    @Test\n    public void testInitialBrightness() {\n        AudioController controller = new AudioController(5);\n        assertEquals(5, controller.getBrightness());\n    }\n    @Test\n    public void testDecreaseBrightnessAboveMin() {\n        AudioController controller = new AudioController(3);\n        controller.decreaseBrightness();\n        assertEquals(2, controller.getBrightness());\n    }\n    @Test\n    public void testDecreaseBrightnessAtMin() {\n        AudioController controller = new AudioController(1);\n        controller.decreaseBrightness();\n        assertEquals(1, controller.getBrightness());\n    }\n    @Test\n    public void testBrightnessDoesNotGoBelowMin() {\n        AudioController controller = new AudioController(0);\n        controller.decreaseBrightness();\n        assertEquals(0, controller.getBrightness());\n    }\n    @Test\n    public void testMultipleDecreases() {\n        AudioController controller = new AudioController(5);\n        controller.decreaseBrightness();\n        controller.decreaseBrightness();\n        assertEquals(3, controller.getBrightness());\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<String> books;\n    public BookManager() {\n        books = new ArrayList<>();\n    }\n    public void addBook(String name, String isbn) {\n        books.add(\"书名: \" + name + \", ISBN: \" + isbn);\n    }\n    public void displayBooks() {\n        for (String book : books) {\n            System.out.println(book);\n        }\n    }\n    public static void main(String[] args) {\n        BookManager manager = new BookManager();\n        manager.addBook(\"Java编程思想\", \"978-0321356680\");\n        manager.addBook(\"Effective Java\", \"978-0134685991\");\n        manager.displayBooks();\n    }\n}", "content": "Please design a Java program to manage the information of books in a library. You need to implement a class named `BookManager`, which contains a method `addBook` that accepts the title of the book (`String` type) and the ISBN number of the book (`String` type) as parameters, and stores this information in a collection. Additionally, you need to implement a `displayBooks` method to print all the added book information. Ensure your program is self-contained and all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<String> books;\n    public BookManager() {\n    }\n    public void addBook(String name, String isbn) {\n    }\n    public void displayBooks() {\n    }\n}\n```", "id": 1683, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\npublic class BookManagerTest {\n    private BookManager bookManager;\n    @BeforeEach\n    public void setUp() {\n        bookManager = new BookManager();\n    }\n    @Test\n    public void testAddBook() {\n        bookManager.addBook(\"Java编程思想\", \"978-0321356680\");\n        bookManager.addBook(\"Effective Java\", \"978-0134685991\");\n    }\n    @Test\n    public void testDisplayBooks() {\n        bookManager.addBook(\"Java编程思想\", \"978-0321356680\");\n        bookManager.addBook(\"Effective Java\", \"978-0134685991\");\n        bookManager.displayBooks();\n    }\n    @Test\n    public void testEmptyBookList() {\n        bookManager.displayBooks();\n    }\n    @Test\n    public void testAddMultipleBooks() {\n        for (int i = 1; i <= 100; i++) {\n            bookManager.addBook(\"Book\" + i, \"ISBN\" + i);\n        }\n    }\n    @Test\n    public void testAddBookWithEmptyFields() {\n        bookManager.addBook(\"\", \"\");\n    }\n}"}}
{"canonical_solution": "import java.util.ArrayList;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\npublic class VocabularyStorage {\n    private ArrayList<String> storedWordsList = new ArrayList<>();\n    private JLabel displayLabel;\n    private JTextField inputField;\n    public VocabularyStorage(JLabel displayLabel, JTextField inputField) {\n        this.displayLabel = displayLabel;\n        this.inputField = inputField;\n    }\n    public void addAndDisplayWord() {\n        String word = inputField.getText().toUpperCase();\n        storedWordsList.add(word);\n        updateDisplay();\n    }\n    private void updateDisplay() {\n        StringBuilder wordsDisplay = new StringBuilder();\n        for (String word : storedWordsList) {\n            if (wordsDisplay.length() > 0) {\n                wordsDisplay.append(\", \");\n            }\n            wordsDisplay.append(word);\n        }\n        displayLabel.setText(wordsDisplay.toString());\n    }\n    public static void main(String[] args) {\n        JLabel label = new JLabel();\n        JTextField textField = new JTextField();\n        VocabularyStorage storage = new VocabularyStorage(label, textField);\n        textField.setText(\"Hello\");\n        storage.addAndDisplayWord();\n        textField.setText(\"World\");\n        storage.addAndDisplayWord();\n        textField.setText(\"Java\");\n        storage.addAndDisplayWord();\n        System.out.println(\"存储的单词显示为: \" + label.getText());\n    }\n}", "content": "Please write a description of a simple vocabulary storage concept. This storage should be able to receive words entered by a user and conceptually store them in a list. Consider how each new word might be added to the list, and how all stored words might be displayed separated by commas. Note that conceptually, all words should be converted to uppercase for storage and display.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\npublic class VocabularyStorage {\n    private ArrayList<String> storedWordsList = new ArrayList<>();\n    private JLabel displayLabel;\n    private JTextField inputField;\n    public VocabularyStorage(JLabel displayLabel, JTextField inputField) {\n    }\n    public void addAndDisplayWord() {\n    }\n    private void updateDisplay() {\n    }\n}\n```", "id": 1684, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Desktop and Web Development", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport static org.junit.jupiter.api.Assertions.*;\npublic class VocabularyStorageTest {\n    private VocabularyStorage storage;\n    private JLabel displayLabel;\n    private JTextField inputField;\n    @BeforeEach\n    public void setUp() {\n        displayLabel = new JLabel();\n        inputField = new JTextField();\n        storage = new VocabularyStorage(displayLabel, inputField);\n    }\n    @Test\n    public void testAddAndDisplayWord_singleWord() {\n        inputField.setText(\"Hello\");\n        storage.addAndDisplayWord();\n        assertEquals(\"HELLO\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_multipleWords() {\n        inputField.setText(\"Hello\");\n        storage.addAndDisplayWord();\n        inputField.setText(\"World\");\n        storage.addAndDisplayWord();\n        assertEquals(\"HELLO, WORLD\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_emptyInput() {\n        inputField.setText(\"\");\n        storage.addAndDisplayWord();\n        assertEquals(\"\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_specialCharacters() {\n        inputField.setText(\"H@llo!\");\n        storage.addAndDisplayWord();\n        assertEquals(\"H@LLO!\", displayLabel.getText());\n    }\n    @Test\n    public void testAddAndDisplayWord_mixedCase() {\n        inputField.setText(\"hElLo\");\n        storage.addAndDisplayWord();\n        assertEquals(\"HELLO\", displayLabel.getText());\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\nclass ChordSettings {\n    static void setChordMode(int chordNumber, String mode) {\n        System.out.println(\"和弦 \" + chordNumber + \" 设置为模式: \" + mode);\n    }\n}\npublic class ChordManager {\n    public void setChordModes(String[] modes) {\n        for (int i = 0; i < modes.length; i++) {\n            ChordSettings.setChordMode(i + 1, modes[i]);\n        }\n    }\n    public static void main(String[] args) {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\", \"minor\", \"diminished\", \"augmented\", \"suspended\", \"dominant7th\", \"major7th\"};\n        manager.setChordModes(testModes);\n        check(testModes);\n    }\n    static void check(String[] expectedModes) {\n        System.out.println(\"验证和弦模式设置: \" + Arrays.toString(expectedModes));\n        System.out.println(\"所有和弦模式设置正确。\");\n    }\n}", "content": "Please write a Java program to handle chord mode settings in a music application. In this application, users can select the mode of each chord through a dropdown menu. Your task is to create a class named `ChordManager` that contains a method named `setChordModes`. This method receives a string array, where each element represents the mode of a chord, and then applies these modes to the corresponding chords. Assume there is a class named `ChordSettings` that has a static method `setChordMode(int chordNumber, String mode)` for setting the mode of a specified chord. Ensure your code can handle the mode settings for at least 7 chords.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nclass ChordSettings {\n    static void setChordMode(int chordNumber, String mode) {\n    }\n}\npublic class ChordManager {\n    public void setChordModes(String[] modes) {\n    }\n}\n```", "id": 1685, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Multimedia", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Test;\nclass ChordSettingsTest {\n    @Test\n    void testSetChordMode() {\n        ChordSettings.setChordMode(1, \"major\");\n        ChordSettings.setChordMode(2, \"minor\");\n        ChordSettings.setChordMode(3, \"diminished\");\n    }\n}\nclass ChordManagerTest {\n    @Test\n    void testSetChordModesWithVariety() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\", \"minor\", \"diminished\", \"augmented\", \"suspended\", \"dominant7th\", \"major7th\"};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithSingleMode() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\"};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithEmptyArray() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithNullMode() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {null};\n        manager.setChordModes(testModes);\n    }\n    @Test\n    void testSetChordModesWithMixedContent() {\n        ChordManager manager = new ChordManager();\n        String[] testModes = {\"major\", \"\", \"minor\", null, \"augmented\"};\n        manager.setChordModes(testModes);\n    }\n}"}}
{"canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileAverageCalculator {\n    public static double calculateAverage(String filePath) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(filePath));\n        String line;\n        double sum = 0;\n        int count = 0;\n        while ((line = reader.readLine()) != null) {\n            sum += Double.parseDouble(line);\n            count++;\n        }\n        reader.close();\n        return count > 0 ? sum / count : 0;\n    }\n    public static void check() {\n        String testFilePath = \"testNumbers.txt\"; \n        try {\n            double average = calculateAverage(testFilePath);\n            System.out.println(\"平均值是: \" + average);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        check();\n    }\n}", "content": "Please write a Java program to read data from a file and calculate its average value. Ensure your code is self-contained and imports all necessary packages. Keep the problem description concise and smooth.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class FileAverageCalculator {\n    public static double calculateAverage(String filePath) throws IOException {\n\n    }\n    public static void check() {\n\n    }\n}\n```", "id": 1686, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "medium", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.AfterEach;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileAverageCalculatorTest {\n    private String testFilePath;\n    @BeforeEach\n    public void setUp() throws IOException {\n        testFilePath = \"testNumbers.txt\";\n    }\n    @AfterEach\n    public void tearDown() {\n    }\n    @Test\n    public void testCalculateAverageWithMultipleNumbers() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n            writer.write(\"1.0\\n2.0\\n3.0\");\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(2.0, result, 0.001);\n    }\n    @Test\n    public void testCalculateAverageWithSingleNumber() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n            writer.write(\"5.0\");\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(5.0, result, 0.001);\n    }\n    @Test\n    public void testCalculateAverageWithEmptyFile() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(0.0, result, 0.001);\n    }\n    @Test\n    public void testCalculateAverageWithNonNumericContent() {\n        Assertions.assertThrows(NumberFormatException.class, () -> {\n            try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n                writer.write(\"NotANumber\");\n            }\n            FileAverageCalculator.calculateAverage(testFilePath);\n        });\n    }\n    @Test\n    public void testCalculateAverageWithNegativeNumbers() throws IOException {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(testFilePath))) {\n            writer.write(\"-1.0\\n-2.0\\n-3.0\");\n        }\n        double result = FileAverageCalculator.calculateAverage(testFilePath);\n        Assertions.assertEquals(-2.0, result, 0.001);\n    }\n}"}}
{"canonical_solution": "import java.util.Arrays;\npublic class SalesAnalyzer {\n    public static int findHighestSalesMonth(int[] monthlySales) {\n        int highestSalesMonth = 0;\n        for (int i = 1; i < monthlySales.length; i++) {\n            if (monthlySales[i] > monthlySales[highestSalesMonth]) {\n                highestSalesMonth = i;\n            }\n        }\n        return highestSalesMonth + 1; \n    }\n    public static void main(String[] args) {\n        int[] salesData = {1200, 800, 2000, 1500, 900, 2000};\n        int highestSalesMonth = findHighestSalesMonth(salesData);\n        System.out.println(\"销售额最高的月份是：\" + highestSalesMonth);\n    }\n}", "content": "Please write a Java method to find the month with the highest sales in a year. Given an integer array where each element represents the sales for a month, return the month with the highest sales. The counting of months starts from 1, i.e., 1 represents January, 2 represents February, and so on. If there are multiple months with the same highest sales, return the first such month.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class SalesAnalyzer {\n    public static int findHighestSalesMonth(int[] monthlySales) {\n    }\n}\n```", "id": 1687, "labels": {"programming_language": "java", "execution_language": "junit", "category": "Data Analysis", "difficulty": "hard", "fewshot": "Question: Write a piece of python code to achieve the following function.\nFind the maximum perfect square number that is less than the nth Fibonacci number.\nThe function's name is max_square_number, and the input is an integer n.\n\nAnswer:\n```python\ndef max_square_number(n):\n if n <= 2:\n return 0 # For the first two numbers in the Fibonacci sequence, no complete square numbers can be used.\n \n fibs = [0, 1] # Store the first two numbers of the Fibonacci sequence\n squares = [] # Store the list of perfect square numbers\n \n max_square = 0\n i = 2\n \n while i <= n:\n fibs.append(fibs[i-1] + fibs[i-2]) # Calculate the next Fibonacci number\n i += 1\n \n fib = fibs[-1]\n perfect_squares = [i**2 for i in range(1, int(math.sqrt(fib)) + 1)]\n max_square = max(filter(lambda x: x < fib, perfect_squares))\n return max_square\n```\n\n----------------", "is_lctx": false, "locale": "en"}, "test": {"asset": null, "code": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class SalesAnalyzerTest {\n    @Test\n    public void testFindHighestSalesMonth_UniqueHighestSales() {\n        int[] salesData = {1200, 800, 2000, 1500, 900, 1800};\n        int expected = 3;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_MultipleHighestSales() {\n        int[] salesData = {1200, 800, 2000, 1500, 900, 2000};\n        int expected = 3;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_AllSameSales() {\n        int[] salesData = {1000, 1000, 1000, 1000, 1000, 1000};\n        int expected = 1;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_EmptySalesData() {\n        int[] salesData = {};\n        int expected = 1; \n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n    @Test\n    public void testFindHighestSalesMonth_SingleElementSalesData() {\n        int[] salesData = {500};\n        int expected = 1;\n        int result = SalesAnalyzer.findHighestSalesMonth(salesData);\n        assertEquals(expected, result);\n    }\n}"}}
