{"question": "Design a Go package named `incremental` that provides an abstraction for working with a cloud storage bucket. The package should define interfaces for `Bucket` and `Blob` to interact with the storage bucket and its contents. The `Bucket` interface should allow for operations such as listing blobs and directories, copying blobs within the bucket or from another bucket, uploading blobs, and checking for the existence of a blob. The `Blob` interface should provide a method to retrieve the path of the blob. Implement a concrete `SimpleBucket` type that satisfies the `Bucket` interface, using an in-memory map to simulate the storage of blobs. The `SimpleBucket` should not actually perform any network operations but should behave as if it is interacting with a real cloud storage bucket. Write a test suite that verifies the correctness of the `SimpleBucket` implementation, ensuring that all interface methods work as expected. Use the provided code snippet as a starting point for defining the interfaces.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should use the `range` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `blobMap`."}, {"type": "variable", "instruction": "Variable `blobMap`, type should be `map[string]string`."}, {"type": "function", "instruction": "Your code should include a function named `ListBlobs`."}, {"type": "class", "instruction": "Your code should define a class named `SimpleBucket`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `incremental`."}, {"type": "combination", "instruction": "In your code, the class `SimpleBucket` should have these properties `blobMap`."}, {"type": "combination", "instruction": "The function `ListBlobs` should take `prefix` as a parameter."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7], "10": [0, 1, 2, 7], "11": [0, 1, 2, 6]}, "question_id": 1}
{"question": "Create a Java Spring Boot REST API that manages a pet adoption service. The service should allow users to perform CRUD operations on pets, including listing all pets, retrieving a specific pet by ID, creating a new pet, updating an existing pet, and deleting a pet. Additionally, the service should support uploading a pet's image and retrieving it. Each pet should have the following attributes: ID (Long), Name (String), Detail (String), Image (String), Province (String), Region (String), Contact Number (String), Status (String), Registration Date (Date). The REST API should follow the given code snippet's structure and include proper error handling, status codes, and response messages. Ensure that the API uses proper HTTP methods for each operation (GET for listing and retrieving, POST for creating, PUT for updating, DELETE for deleting).", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 classes."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named petCount."}, {"type": "variable", "instruction": "Variable petCount, the initial value should be 0."}, {"type": "function", "instruction": "Your code should include a function named uploadPetImage."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named PetController."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6]}, "question_id": 2}
{"question": "Design a system that tracks the latency of requests to a web server. The system should maintain a histogram of request latencies over a sliding window of time. The histogram should support recording latencies and provide a merged view of the latencies over the current window. The histogram should be able to: - Record the latency of a single request. - Provide a merged histogram of latencies over the current sliding window. - Automatically rotate the histogram window based on time, ensuring that old data is discarded and new data is recorded in a fresh histogram. The sliding window duration, maximum value to be recorded, and the precision of the histogram should be configurable. Implement the `LatencyTracker` class with the following methods: - `RecordLatency(latency int64) error`: Records a single request latency. - `GetMergedHistogram() *hdrhistogram.Histogram`: Returns a merged histogram of the latencies over the current sliding window. - `RotateHistogram()`: Rotates the histogram window, should be called periodically based on the sliding window duration. Assume that the `hdrhistogram` package is already imported and provides the necessary histogram functionality.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named windowDuration."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable windowDuration, the initial value should be 60."}, {"type": "function", "instruction": "Your code should include a function named calculateHistogram."}, {"type": "interface", "instruction": "Your code should define an interface named LatencyTrackerInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries [\"time\", \"sync\"]."}, {"type": "file", "instruction": "Your code should use the function New from the library hdrhistogram."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "9": [0, 1, 8], "11": [0, 1, 10]}, "question_id": 3}
{"question": "Design a card game where players can use special cards with musical powers. One such card is the 'MusicalBrass' card, which applies musical powers to the player when used. The card game is played in a turn-based environment where each player can use a card against themselves or an opponent. The 'MusicalBrass' card has the following properties and behaviors: It is a skill card with a special rarity and targets the player itself. It has a base cost of 0 energy to use. When used, it applies a 'BrassPower' to the player, which has an initial amount of 1. This power can be any positive effect, such as increasing the player's defense or attack on the next turn. It also applies a 'StringsPower' to the player with an amount of -1. This power can be any negative effect, such as decreasing the player's defense or attack on the next turn. The card is exhaustible, meaning it can only be used once per game. The card belongs to the 'MUSICAL' custom tag category. When the card is upgraded, the amount of 'BrassPower' applied is increased by 1. Write a Java class `MusicalBrass` that extends `CustomCard` and implements the described behavior. Include methods for using the card, upgrading the card, and initializing the card with the given properties.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the 'switch' keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'CardType'."}, {"type": "function", "instruction": "Your code should include a function named 'upgradeCard'."}, {"type": "interface", "instruction": "Your code should define an interface named 'MusicalPower'."}, {"type": "class", "instruction": "Your code should define a class named 'MusicalBrass'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'cardgame'."}, {"type": "combination", "instruction": "In your code, the class 'MusicalBrass' should have these properties 'rarity', 'target', 'baseCost', 'exhaustible', 'tag', 'brassPower', 'stringsPower'."}, {"type": "combination", "instruction": "The function 'upgradeCard' should return a 'void' as its result."}], "instruction_dependence": {"11": [0, 1, 2, 9], "12": [0, 1, 2, 7]}, "question_id": 4}
{"question": "Design a simple game simulation where creatures can have their attributes modified by external effects. The game should allow for creatures to have their attack and defense values modified by different effects that can be added or removed dynamically. The given code snippet provides a starting point for this simulation. It includes a `Creature` struct that has attack and defense attributes, and methods to retrieve their modified values. There is also a `CreatureModifier` struct that serves as a base for specific modifiers, such as `DoubleAttackModifier`, which doubles a creature's attack value. Your task is to extend this system by implementing the following: 1. A `Game` struct that can keep track of all active modifiers and notify them when a creature's attributes are queried. 2. A `Query` struct that represents a request to retrieve a creature's attribute (attack or defense). 3. A `Subscription` interface that allows modifiers to subscribe to and unsubscribe from the game's notifications. 4. Implement the `Subscribe` and `Unsubscribe` methods in the `Game` struct to manage modifiers. 5. Implement the `Fire` method in the `Game` struct to notify subscribed modifiers about a query. 6. Create a `IncreaseDefenseModifier` that increases a creature's defense by a specified amount. 7. Write a main function that demonstrates the creation of a creature, applying both attack and defense modifiers, and then removing them. Ensure that your code is well-documented, and provide test cases to verify the correctness of your solution.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `creatureCount`."}, {"type": "variable", "instruction": "Variable `creatureCount`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `applyModifier`."}, {"type": "interface", "instruction": "Your code should define an interface named `Modifier`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `Game`."}, {"type": "combination", "instruction": "In your code, the class `Game` should have these methods `Subscribe`, `Unsubscribe`, `Fire`."}, {"type": "combination", "instruction": "The function `applyModifier` should take `creature`, `modifier` as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 5], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "12": [0, 1, 2, 7]}, "question_id": 5}
{"question": "Please write a Python function `moving_average(nums, window_size) -> List` to solve this problem: For a given sequence of numbers nums, calculate its moving average with a window length of window_size and return this sequence. Please note, if window_size is smaller than the length of nums itself, in this case, return an empty sequence [].\n>>> moving_average([0, 1, 2, -1], 2)\n[0.5, 1.5, 0.5]", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['sum', 'map']."}, {"type": "interface", "instruction": "Your code should define an interface named MovingAverageInterface."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"4": [0, 1, 3, 7]}, "question_id": 6}
{"question": "Design a system for managing password reset requests for a periodical publication's online platform. The system should allow for the creation of password reset requests, retrieval of specific requests by ID, querying of requests based on certain criteria, and deletion of requests either by ID or based on a query. Each password reset request should contain a unique identifier, the user's ID, the request creation timestamp, and a token that will be used to authenticate the password reset process. Implement the `ResetPasswordManager` interface provided in the given code snippet. The interface should be implemented by a class named `ResetPasswordManagerImpl` that uses a simple in-memory store to manage the reset password requests. Ensure that all methods are properly implemented according to the interface's contract. Additionally, provide a simple test suite to verify the correctness of the implementation. The test cases should cover all the methods in the `ResetPasswordManager` interface.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `requestStore`."}, {"type": "variable", "instruction": "Variable `requestStore`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `requestStore`, the initial value should be `new HashMap<>()`."}, {"type": "function", "instruction": "Your code should include a function named `createResetRequest`."}, {"type": "interface", "instruction": "Your code should define an interface named `ResetPasswordManager`."}, {"type": "class", "instruction": "Your code should define a class named `ResetPasswordManagerImpl`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.password.reset`."}, {"type": "file", "instruction": "Your code should not use the following libraries `org.json, com.google.gson`."}, {"type": "combination", "instruction": "You should initialize an object named `manager` as an instance of the `ResetPasswordManagerImpl` class using `new ResetPasswordManagerImpl()` for initialization."}, {"type": "combination", "instruction": "You should define an interface named `ResetPasswordManager` that includes these methods `createResetRequest, getResetRequestById, queryResetRequests, deleteResetRequestById, deleteResetRequestsByQuery`."}, {"type": "combination", "instruction": "The function `createResetRequest` should return a `String` as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"4": [0, 3, 14], "5": [0, 3, 14], "11": [0, 8, 14], "12": [0, 7, 14], "13": [0, 6, 14]}, "question_id": 7}
{"question": "Design a Java class named `Circle` that represents a circle with a specific radius and color. The class should provide the following functionalities:\n\n1. A constructor that initializes the circle with a given radius and color.\n2. Methods to get and set the radius and color of the circle.\n3. A method `calculateArea()` that calculates and returns the area of the circle.\n4. A method `calculatePerimeter()` that calculates and returns the perimeter of the circle.\n\nThe area of a circle is calculated using the formula `area = π * radius^2`, and the perimeter (circumference) is calculated using the formula `perimeter = 2 * π * radius`.\n\nWrite a Java program that demonstrates the use of the `Circle` class by creating an instance, setting its properties, and displaying the area and perimeter. Include test cases to verify the correctness of the class methods.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `radius`."}, {"type": "variable", "instruction": "Variable `radius` should not be a constant."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 8}
{"question": "Write a Python function named `create_artist_profile` that constructs a dictionary representing an artist's profile. The function should take the artist's first and last name as mandatory parameters and allow for an arbitrary number of additional attributes about the artist to be included. The function should adhere to the following requirements: 1. The first and last names should be converted to title case before being added to the profile. 2. Any additional attributes provided should be included in the profile as key-value pairs, with the keys being in lowercase and the values retaining their original case. 3. The function should return the constructed artist profile as a dictionary. Additionally, write test cases to verify the correctness of the solution, ensuring that the function handles various types of input correctly.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "variable", "instruction": "Your code should define a variable named artist_profile."}, {"type": "variable", "instruction": "Variable artist_profile, should be a global variable."}, {"type": "variable", "instruction": "Variable artist_profile, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_artist_profile."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 7], "5": [0, 1, 2, 3, 7]}, "question_id": 9}
{"question": "Design a Java class that validates assignment filters for device and app management in an enterprise setting. The class should be able to take a filter string and validate it against a set of predefined rules. The validation should check if the filter string follows the correct syntax and if it contains valid fields and operators. The result of the validation should be an object that indicates whether the filter is valid or not, and if not, it should provide a list of issues found during validation. The class should be named `AssignmentFilterValidator` and should have a method `validateFilter` which takes a `String` filter as input and returns an `AssignmentFilterValidationResult` object. The `AssignmentFilterValidationResult` class should contain a `boolean` field `isValid` and a `List<String>` field `issues` that lists the problems found with the filter string.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "interface", "instruction": "Your code should define an interface named FilterValidator."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named AssignmentFilterValidator."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named com.enterprise.filter."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.List, java.util.ArrayList."}, {"type": "file", "instruction": "Your code should not use the following libraries org.json."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.enterprise.filter, which should contain these functions validateFilter."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "10": [0, 1, 7]}, "question_id": 10}
{"question": "Please complete the following task with PyCryptodome.\n\nWrite a complete Python function `sha256_easy(data: str) -> str` for calculating the hash value of the string data using the sha256 algorithm and returning it.\n\nPlease wrap the code in a markdown ```python ``` block.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "function", "instruction": "Your code should include a function named sha256_easy."}, {"type": "interface", "instruction": "Your code should define an interface named HashInterface."}, {"type": "class", "instruction": "Your code should define a class named HashCalculator."}, {"type": "file", "instruction": "Your code should be organized in a package named crypto_utils."}, {"type": "combination", "instruction": "Your code should define a class named HashCalculator that implements the HashInterface interface."}, {"type": "combination", "instruction": "In your code, the class HashCalculator should have these properties ['data', 'hash_value']."}], "instruction_dependence": {"6": [0, 3, 4], "7": [0, 4]}, "question_id": 11}
{"question": "Write a C++ program that analyzes a text file and provides statistics about its content. The program should be able to count the number of lines, words, and bytes in the file, as well as calculate the average number of bytes per word. The user should be able to specify which statistics to display by using command-line arguments. The program should accept the following command-line arguments: - The path to the text file (e.g., `document.txt`). - `--lines` or `-l` to display the number of lines in the file. - `--bytes` or `-c` to display the total number of bytes and the average number of bytes per word. - `--words` or `-w` to display the number of words in the file. If no options are provided, the program should display all statistics by default.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named fileStats."}, {"type": "variable", "instruction": "Variable fileStats, type should be struct."}, {"type": "variable", "instruction": "Variable fileStats, the initial value should be {0, 0, 0, 0.0}."}, {"type": "function", "instruction": "Your code should include a function named analyzeFile."}, {"type": "combination", "instruction": "The function analyzeFile should take filePath, countLines, countWords, countBytes as parameters."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "8": [0, 1, 2, 7]}, "question_id": 12}
{"question": "Please implement the following code in cpp with the function signature `std::vector<long> sort_array(std::vector<long> array)`. Note: 1. Only implement the target function and import the necessary packages, do not generate any other code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'sortedArray'."}, {"type": "variable", "instruction": "Variable 'sortedArray', type should be 'std::vector<long>'."}, {"type": "variable", "instruction": "Variable 'sortedArray', the initial value should be an empty vector."}, {"type": "interface", "instruction": "Your code should define an interface named 'Sortable'."}, {"type": "class", "instruction": "Your code should define a class named 'ArraySorter'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'sorting'."}, {"type": "combination", "instruction": "Your code should define a class named 'ArraySorter' that implements the 'Sortable' interface."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6], "8": [0, 1, 2, 3, 4, 6], "12": [0, 1, 2, 3, 4, 9, 10]}, "question_id": 13}
{"question": "Please implement a function that can count the occurrences of each unique string in a dataset and output the results in the natural order of the strings. Ensure that your function can handle a list containing strings and their corresponding counts, and output the statistical results in the format of strings and counts. Additionally, the output strings should be sorted in their natural order. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Collections;\nimport java.util.Comparator;\npublic class StringCounter {\n    public List<Map.Entry<String, Integer>> countAndSortStrings(List<Map.Entry<String, Integer>> entries) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'sortedEntries'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named 'countAndSortStrings'."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'StringCounter'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.example.stringcounter'."}, {"type": "combination", "instruction": "In your code, the class 'StringCounter' should have these methods 'countAndSortStrings'."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 8]}, "question_id": 14}
{"question": "In a Kubernetes cluster, pods are often named with a specific convention that includes an ordinal number to distinguish between different instances of the same type of pod. For example, a set of pods might be named `app-1-0`, `app-2-0`, `app-3-0`, etc., where the number after the first dash represents the ordinal number of the pod. Write a Go program that discovers all pods of a given kind within a Kubernetes namespace and sorts them by their ordinal number. The program should define a function `discoverAndSortPodsByOrdinal` that takes a `testcontext.Context` and a `kind` string as arguments and returns a sorted slice of `*NodeClient` and an error. Each `NodeClient` should have at least a `Name` field which is the name of the pod. The program should use the `discoverNodes` function provided in the given code snippet to discover the pods and then sort them by their ordinal number using the `decodeOrdinal` function. The `discoverNodes` function uses an error group to concurrently process pods and collect `NodeClient` instances. The `decodeOrdinal` function is used to extract the ordinal number from the pod name.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `podList`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `podList`, type should be `[]*NodeClient`."}, {"type": "function", "instruction": "Your code should include a function named `discoverAndSortPodsByOrdinal`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `PodSorter`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `NodeClient`."}, {"type": "global", "instruction": "Your function should not exceed 30 lines."}], "instruction_dependence": {"5": [0, 1, 4, 12], "6": [0, 1, 4, 12], "8": [0, 1, 7, 12], "10": [0, 1, 9, 12]}, "question_id": 15}
{"question": "Memory Allocation and Deallocation Tracker\n\nIn a system where memory management is crucial, it is often necessary to track memory allocation and deallocation calls to ensure that resources are being used efficiently and to detect potential memory leaks or unauthorized memory operations. Your task is to implement a memory tracking system that hooks into memory allocation and deallocation functions, as well as memory write operations, to log their usage.\n\nThe system should hook into the following functions:\n- `VirtualAlloc`\n- `VirtualAllocEx`\n- `VirtualFree`\n- `VirtualFreeEx`\n- `WriteProcessMemory`\n\nFor each hooked function, you should log the arguments passed to the function, the return value, and the address of the instruction that called the function. The system should be able to handle multiple hooks and track them separately.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named memoryTracker."}, {"type": "variable", "instruction": "Your code should define an enumeration named MemoryOperationType."}, {"type": "variable", "instruction": "Variable memoryTracker, the initial value should be nullptr."}, {"type": "variable", "instruction": "Variable memoryTracker should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the std::vector."}, {"type": "interface", "instruction": "Your code should define an interface named IMemoryTracker."}, {"type": "class", "instruction": "Your code should define a class named MemoryTracker."}, {"type": "file", "instruction": "Your code should be organized in a package named memory_tracking."}, {"type": "file", "instruction": "Your code should import the following libraries <windows.h>, <iostream>."}, {"type": "combination", "instruction": "Your code should define a class named MemoryTracker that implements the IMemoryTracker interface."}, {"type": "combination", "instruction": "In your code, the class MemoryTracker should have these methods logAllocation, logDeallocation, logWriteOperation."}], "instruction_dependence": {"4": [0, 2], "5": [0, 2], "11": [0, 7, 8], "12": [0, 8]}, "question_id": 16}
{"question": "Given an integer x, get its binary representation, and then fill in the positions of 0s in the binary representation with a number n. For example, if the binary representation of x is 110001 and you fill in the 0 positions with 2 (binary 010), the result will be 110101. Implement a python function `replace(x, n)` to solve this.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named BinaryReplacer."}, {"type": "file", "instruction": "Your code should import the following libraries ['math']."}, {"type": "combination", "instruction": "In your code, the class BinaryReplacer should have these properties ['x', 'n']."}, {"type": "combination", "instruction": "In your code, the class BinaryReplacer should have these methods ['replace']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 6], "9": [0, 1, 2, 6]}, "question_id": 17}
{"question": "Design a Java Spring Boot application that provides an API for managing surveys. The application should allow users to perform the following operations: 1. Retrieve a user's profile by their user ID. 2. Retrieve all available surveys. 3. Retrieve all surveys attempted by a specific user. 4. Create a new survey with descriptive questions. 5. Retrieve all questions in a specific survey. 6. Retrieve all descriptive answerable questions in a specific survey. The application should use RESTful principles and return appropriate HTTP status codes. Assume that the necessary models (`User`, `Survey`, `SurveyAttempted`, `Question`, `DescriptiveAnswerable`, `DiscreteAnswerable`) and the `UserService` are already implemented and can be used directly.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named surveyList."}, {"type": "variable", "instruction": "Variable surveyList, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named getSurveyById."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.List, org.springframework.web.bind.annotation.*."}, {"type": "file", "instruction": "Your code should use the function getMapping from the library org.springframework.web.bind.annotation."}, {"type": "combination", "instruction": "The function getSurveyById should return a Survey as its result."}], "instruction_dependence": {"7": [0, 1, 2, 6], "10": [0, 1, 2, 9], "11": [0, 1, 2, 8]}, "question_id": 18}
{"question": "You are given a string array `words` where `words[i]` is either a string representing a positive integer or the string \"prev\".\n\nWe start walking through the array from the beginning. For each \"prev\" string in `words`, we look for the **last visited integer** in `words`.\n\nHere's how we define it:\n\n* `k` is the number of consecutive \"prev\" strings up to the current position (including the current string). Let the integer array `nums` (which is 0-indexed) represent all the integers we have visited so far, and `nums_reverse` be the reverse of `nums`. Then, the **last visited integer** corresponding to the current \"prev\" is the integer at index `(k - 1)` in the `nums_reverse` array.\n* If `k` is **more** than the number of integers we have visited so far, then the last visited integer is `-1`.\n\nReturn an integer array that contains all the last visited integers.\n\n**Example 1:**\n\n```\n**Input:** words = [\"1\",\"2\",\"prev\",\"prev\",\"prev\"]\n**Output:** [2,1,-1]\n**Explanation:**\nFor the \"prev\" at index 2, the last visited integer is 2, because the number of consecutive \"prev\" is 1, and in the reverse_nums array, the first element is 2.\nFor the \"prev\" at index 3, the last visited integer is 1, because the number of consecutive \"prev\" is 2, and in the reverse_nums array, the second element is 1.\nFor the \"prev\" at index 4, the last visited integer is -1, because the number of consecutive \"prev\" is 3, but we've only visited 2 integers in total.\n```\n\n**Example 2:**\n\n```\n**Input:** words = [\"1\",\"prev\",\"2\",\"prev\",\"prev\"]\n**Output:** [1,2,1]\n**Explanation:**\nFor the \"prev\" at index 1, the last visited integer is 1.\nFor the \"prev\" at index 3, the last visited integer is 2.\nFor the \"prev\" at index 4, the last visited integer is 1, because the number of consecutive \"prev\" is 2, and in the reverse_nums array, the second element is 1.\n```\n\n**Tips:**\n\n* `1 <= words.length <= 100`\n* `words[i] == \"prev\"` or `1 <= int(words[i]) <= 100`\n\nPlease complete the following implementation\n```cpp\nclass Solution {\npublic:\n    vector<int> lastVisitedIntegers(vector<string> words);\n};```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named nums."}, {"type": "variable", "instruction": "Variable nums, the initial value should be an empty vector."}, {"type": "function", "instruction": "Your code should include a function named lastVisitedIntegers."}, {"type": "interface", "instruction": "Your code should define an interface named SolutionInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries [\"algorithm\", \"numeric\"]."}, {"type": "combination", "instruction": "Your code should define a class named Solution that implements the SolutionInterface interface."}], "instruction_dependence": {"3": [0, 2], "6": [0, 5], "8": [0, 7], "10": [0, 5, 7]}, "question_id": 19}
{"question": "Design a Java program that simulates a simple order management system for an e-commerce application. The system should be able to display a list of orders, refresh the list on user request, and handle pagination.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named pageSize."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named refreshOrders."}, {"type": "interface", "instruction": "Your code should define an interface named OrderManagement."}, {"type": "class", "instruction": "Your code should define a class named OrderManager."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.List, java.util.Date."}, {"type": "file", "instruction": "Your code should use the function add from the library java.util.List."}, {"type": "combination", "instruction": "The function loadMoreOrders should take pageNumber as a parameter."}], "instruction_dependence": {"6": [0, 1, 2, 5], "11": [0, 1, 2, 10], "12": [0, 1, 2, 7]}, "question_id": 20}
{"question": "In a 2D game, the `Scene` class is responsible for managing all the entities present in the game world, such as players, enemies, and other objects. The `Scene` class also keeps track of the game score and handles the spawning of new entities through a `Spawner` object. Your task is to implement the `Scene` class based on the provided code snippet. The class should meet the following specifications: 1. The `Scene` should be able to store up to 1024 `GameEntity` pointers. 2. The `addEntity(GameEntity* entity)` method should add a new entity to the scene and return the index where it was added. If the scene is full, it should return -1. 3. The `removeEntity(int idx)` method should remove the entity at the specified index. 4. The `update()` method should update all entities in the scene. 5. The `display(Screen const& screen)` method should display all entities on the provided `Screen`. 6. The `getScore()` method should return the current score. 7. The `addScore()` method should increase the score by a fixed amount (e.g., 10 points). 8. The `resetScore()` method should reset the score to 0. 9. The `clear()` method should remove all entities from the scene and reset the score. Assume that the `GameEntity` class and the `Screen` class are already implemented and that they provide the necessary methods for updating and displaying entities.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `entityCount`."}, {"type": "variable", "instruction": "Variable `entityCount`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `entityCount`, the initial value should be 0."}, {"type": "interface", "instruction": "Your code should define an interface named `IUpdatable`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `Scene`."}, {"type": "file", "instruction": "Your code should not use the following libraries `vector`, `list`."}, {"type": "combination", "instruction": "You should initialize an object named `mainScene` as an instance of the `Scene` class using `1024` for initialization."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "10": [0, 8]}, "question_id": 21}
{"question": "Create a Go program that models a simple database for Animal Crossing villagers. Each villager should have properties such as astrology sign, birthday, bubble color, category, clothes, clothes colors, flooring, furniture, games, gender, interest, name, name color, music, personality, species, style, and wallpaper. The program should be able to add new villagers, retrieve a villager's information by name, and list all villagers' names. Implement the following functionalities: 1. `AddVillager`: Adds a new villager to the database. 2. `GetVillager`: Retrieves a villager's information by name. 3. `ListVillagers`: Lists all villagers' names in the database. Use the given code snippet as a starting point to define the villager structure and the initial villager 'Snake'. Ensure that the program is modular and uses appropriate data structures to store the villagers.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named villagerDB."}, {"type": "variable", "instruction": "Variable villagerDB should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named AddVillager."}, {"type": "interface", "instruction": "Your code should define an interface named VillagerInterface."}, {"type": "class", "instruction": "Your code should define a class named Villager."}, {"type": "file", "instruction": "Your code should be organized in a package named animalcrossing."}, {"type": "combination", "instruction": "Your code should define a class named Villager that implements the VillagerInterface interface."}, {"type": "combination", "instruction": "The function GetVillager should return a Villager as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named animalcrossing, which should contain these classes Villager."}], "instruction_dependence": {"4": [0, 3], "9": [0, 6, 7], "10": [0, 5], "11": [0, 7, 8]}, "question_id": 22}
{"question": "Please write a simple web server code using the Flask framework with the following requirements:\n- Implement a \"/test\" GET interface. The function of this interface is to query the order based on the order_id parameter input by the user. The order information can be found in the orders data table. The schema of the data table is \n```\nid integer PRIMARY KEY,\norder_id integer,\nuid integer,\nname text,\naddress text,\nprice integer\n```\nThe orders table is located in the local database ./test.db. You can use the sqlite3.connect method to connect to the database.\nBesides, you can query the uid corresponding to the user through the get_uid(cookie: ImmutableMultiDict) -> int interface.\n- If any exceptions are captured during this process, please return the string 'Error'.\n- Do not specify the port by yourself when starting the service.\n- You don't have to define the get_uid function.\n- You need to ensure that the generated code is as safe as possible.\n\nPlease write your code wrapped in a markdown```python ``` block.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "variable", "instruction": "Your code should define a variable named db_connection."}, {"type": "variable", "instruction": "Your code should define an enumeration named OrderStatus."}, {"type": "class", "instruction": "Your code should define a class named OrderService."}, {"type": "combination", "instruction": "You should initialize an object named order_service as an instance of the OrderService class using db_connection for initialization."}, {"type": "combination", "instruction": "In your code, the class OrderService should have these methods ['get_order_by_id', 'handle_exception']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6]}, "question_id": 23}
{"question": "Write a Python program that processes a string containing purchase information and writes the parsed data to an Excel file. The input string is in the format of key-value pairs separated by '&' characters, with keys such as 't' for timestamp, 's' for the sum of purchase, 'fn' for fiscal number, 'i' for invoice number, and 'fp' for fiscal sign, 'n' for number of items. The program should include the following functionalities: 1. Check if the input data string has already been processed to avoid duplicates. 2. Parse the timestamp from the format 'yyyymmddThhmmss' to a more readable format 'dd.mm.yyyy' for the date and 'HH:MM:SS' for the time. 3. Extract and print the date of purchase, time of purchase, and sum of purchase. 4. Write the parsed data to an Excel file with columns for Date, Time, and Sum. The program should handle any errors that occur during the parsing or writing process and inform the user accordingly.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named input_string."}, {"type": "variable", "instruction": "Variable input_string, type should be str."}, {"type": "variable", "instruction": "Variable input_string, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named parse_purchase_data."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named PurchaseProcessor."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'datetime']."}, {"type": "file", "instruction": "Your code should use the function to_datetime from the library pandas."}, {"type": "file", "instruction": "Your code should not use the following libraries ['openpyxl']."}, {"type": "combination", "instruction": "You should initialize an object named processor as an instance of the PurchaseProcessor class using input_string for initialization."}, {"type": "combination", "instruction": "The function parse_purchase_data should take input_string as a parameter."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "10": [0, 9], "12": [0, 8], "13": [0, 6]}, "question_id": 24}
{"question": "You are tasked with writing a program to process a batch of passport data to determine which passports are valid based on a set of rules. The passport data is stored in a text file named `data.txt`, where each passport is separated by two newlines. Each passport is a collection of key-value pairs separated by spaces or newlines.\n\nA passport is considered valid if it meets the following criteria:\n\n1. It contains all of the following fields: `byr` (Birth Year), `iyr` (Issue Year), `eyr` (Expiration Year), `hgt` (Height), `hcl` (Hair Color), `ecl` (Eye Color), and `pid` (Passport ID).\n2. `byr` must be at least 1920 and at most 2002.\n3. `iyr` must be at least 2010 and at most 2020.\n4. `eyr` must be at least 2020 and at most 2030.\n5. `hgt` must be a number followed by either `cm` or `in`:\n   - If `cm`, the number must be at least 150 and at most 193.\n   - If `in`, the number must be at least 59 and at most 76.\n6. `hcl` must be a `#` followed by exactly six characters 0-9 or a-f.\n7. `ecl` must be exactly one of: `amb`, `blu`, `brn`, `gry`, `grn`, `hzl`, `oth`.\n8. `pid` must be a nine-digit number, including leading zeroes.\n\nWrite a function `validate_passports` that reads the passport data from `data.txt`, processes each passport, and returns the number of valid passports. Include test cases to verify the correctness of your solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named `valid_passports`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `EyeColor`."}, {"type": "variable", "instruction": "Variable `valid_passports`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `valid_passports` should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `PassportValidator`."}, {"type": "class", "instruction": "Your code should define a class named `Passport`."}, {"type": "file", "instruction": "Your code should import the following libraries `re`, `enum`."}, {"type": "file", "instruction": "Your code should use the function `match` from the library `re`."}, {"type": "combination", "instruction": "Your code should define a class named `PassportValidatorImpl` that implements the `PassportValidator` interface."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 1, 2, 11], "5": [0, 1, 2, 11], "9": [0, 1, 8, 11], "10": [0, 1, 6, 7, 11]}, "question_id": 25}
{"question": "Design a Python program that interacts with a MongoDB database to manage employee attendance records. The database contains two collections: `attendance` and `emp`. The `attendance` collection stores the attendance details of employees, including their ID, name, date, and time of attendance. The `emp` collection stores employee details, including their ID and contact information. The program should provide the following functionalities: 1. Insert a new attendance record into the `attendance` collection. 2. Fetch all attendance records. 3. Fetch attendance records by a specific date. 4. Fetch attendance records by a specific employee ID. 5. Fetch attendance records by both employee ID and date. 6. Get the contact phone number of an employee from the `emp` collection. Each function should handle potential errors and return appropriate messages or results. The program should also include test cases to verify the correctness of each function.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 6 functions."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `db_connection`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `os` and `sys` libraries."}, {"type": "interface", "instruction": "Your code should define an interface named `DatabaseInterface`."}, {"type": "class", "instruction": "Your code should define a class named `AttendanceManager`."}, {"type": "file", "instruction": "Your code should be organized in a package named `attendance_system`."}, {"type": "file", "instruction": "Your code should import the following libraries `pymongo`, `datetime`."}, {"type": "file", "instruction": "Your code should use the function `MongoClient` from the library `pymongo`."}, {"type": "combination", "instruction": "You should initialize an object named `attendance_manager` as an instance of the `AttendanceManager` class using `db_connection` for initialization."}, {"type": "combination", "instruction": "You should define an interface named `DatabaseInterface` that includes these methods `insert_record`, `fetch_all_records`, `fetch_records_by_date`, `fetch_records_by_employee_id`, `fetch_records_by_employee_and_date`, `get_employee_contact`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `attendance_system`, which should contain these classes `AttendanceManager`, `DatabaseInterface`."}], "instruction_dependence": {"5": [0, 1, 2, 4], "11": [0, 1, 2, 10], "12": [0, 1, 2, 8], "13": [0, 1, 2, 7], "14": [0, 1, 2, 8, 9]}, "question_id": 26}
{"question": "Write a C++ program that generates a one-dimensional Gaussian kernel matrix using OpenCV. The program should allow users to specify the size of the kernel, the standard deviation of the Gaussian function, and the type of elements in the kernel matrix. The program should validate the input parameters and handle any errors appropriately. The generated Gaussian kernel should be printed to the console in a human-readable format.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kernelMatrix."}, {"type": "variable", "instruction": "Variable kernelMatrix, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named GaussianKernel."}, {"type": "file", "instruction": "Your code should be organized in a package named image_processing."}, {"type": "file", "instruction": "Your code should not use the following libraries [numpy, matplotlib]."}, {"type": "combination", "instruction": "Your code should be organized in a package named image_processing, which should contain these classes [GaussianKernel, KernelValidator]."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 7, 8]}, "question_id": 27}
{"question": "Design and implement a `FeatureToggleManager` class that manages feature toggles for a software application. Feature toggles are a common technique used to enable or disable features during runtime, which can be useful for things like canary releases, A/B testing, or disabling features that are causing issues. Your `FeatureToggleManager` should implement the `FeatureToggleService` interface provided in the given code snippet. The implementation should allow setting and querying the state of feature toggles. Additionally, implement a method `disableAllFeatures()` that disables all features at once, and a method `enableAllFeatures()` that enables all features at once. Provide a simple test case to demonstrate the functionality of your `FeatureToggleManager`.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named featureToggles."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named isFeatureEnabled."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named FeatureToggleService."}, {"type": "class", "instruction": "Your code should define a class named FeatureToggleManager."}, {"type": "file", "instruction": "Your code should be organized in a package named com.feature.toggle."}, {"type": "combination", "instruction": "You should define an interface named FeatureToggleService that includes these methods setFeatureState, isFeatureEnabled."}], "instruction_dependence": {"4": [0, 3], "6": [0, 5], "10": [0, 7]}, "question_id": 28}
{"question": "Design a Java program that simulates a simple alerting system for a patient monitoring application. The system should be able to serialize a `Patient` object into JSON format and send it through a `PipedOutputStream` to an `AlertingSystemOutputApp` which will process the incoming data. The `Patient` class should contain at least the following information: `id` (String), `name` (String), `heartRate` (int), `bloodPressure` (String), `temperature` (double). The `SendOutput` class should have a method `outputJson` that takes a `Patient` object, serializes it into JSON, and writes it to a `PipedOutputStream`. The `AlertingSystemOutputApp` should be able to read from the corresponding `PipedInputStream`, deserialize the JSON back into a `Patient` object, and print out an alert message if any of the patient's vital signs are outside of normal ranges. For simplicity, assume the following ranges are considered normal: Heart rate: 60-100 bpm, Blood pressure: \"120/80\" mmHg (systolic/diastolic), Temperature: 36.5-37.5 °C. The `AlertingSystemOutputApp` should print an alert message in the format: \"ALERT: [Patient Name] has an abnormal [vital sign]!\". Include appropriate exception handling for IO operations and ensure that all streams are properly closed after use.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named outputJson."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Patient."}, {"type": "file", "instruction": "Your code should import the following libraries java.io.*, java.util.*, org.json.*."}, {"type": "combination", "instruction": "In your code, the class Patient should have these methods getId, getName, getHeartRate, getBloodPressure, getTemperature."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"7": [0, 1, 6, 11], "10": [0, 1, 8, 11]}, "question_id": 29}
{"question": "Write a program that simulates a simple image processing task. The task is to count the number of transitions between two types of pixels in a linear image strip and determine how many pixels can be processed within a given time limit. The image strip is represented as a string `s` where each character is either 'h' (for a high-intensity pixel) or 'w' (for a low-intensity pixel). Processing a pixel takes `a` units of time. Additionally, transitioning from a high-intensity pixel to a low-intensity pixel, or vice versa, incurs an extra `b` units of time. The program should read from standard input the following values: - An integer `n`, the number of pixels in the image strip. - An integer `a`, the time taken to process a single pixel. - An integer `b`, the additional time taken to transition between different types of pixels. - An integer `t`, the total time available for processing the image strip. - A string `s` of length `n`, representing the image strip. The program should output to standard output the maximum number of pixels that can be processed within the given time limit `t`. If the entire image strip can be processed within the time limit, the program should output `n`.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the ['eval', 'exec']."}, {"type": "interface", "instruction": "Your code should define an interface named ImageProcessor."}, {"type": "class", "instruction": "Your code should define a class named PixelProcessor."}, {"type": "file", "instruction": "Your code should be organized in a package named image_processing."}, {"type": "combination", "instruction": "You should define an interface named ImageProcessor that includes these methods ['process_pixel', 'count_transitions']."}, {"type": "combination", "instruction": "Your code should be organized in a package named image_processing, which should contain these functions ['process_image', 'calculate_time']."}], "instruction_dependence": {"8": [0, 1, 5], "9": [0, 1, 7]}, "question_id": 30}
{"question": "In a bureaucratic office simulation, an `Intern` is responsible for creating different types of `Form` objects based on a string identifier. There are three types of forms: `ShrubberyCreationForm`, `RobotomyRequestForm`, and `PresidentialPardonForm`. Each form requires a target upon creation. Your task is to implement the `Intern` class and the three specific `Form` classes. Each `Form` class should have a constructor that takes a `std::string` for the target and a `display` method to print out the form's details. The `Intern` class should have a `MakeForm` method that takes a `formName` and `formTarget` as strings and returns a pointer to the created `Form` object. If the `formName` does not match any of the known forms, the `Intern` should throw a `FormDoesNotExistException`. Additionally, provide a main function with test cases to demonstrate the functionality of the `Intern` class and the creation of different `Form` objects.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the `throw` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `std::string`."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `formTarget`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `formTarget`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `MakeForm`."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `Form`."}, {"type": "combination", "instruction": "You should define an interface named `Form` that includes these methods `display`."}, {"type": "combination", "instruction": "The function `MakeForm` should return a `Form*` as its result."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "10": [0, 1, 2, 9], "12": [0, 1, 2, 11], "13": [0, 1, 2, 9]}, "question_id": 31}
{"question": "Design a class `SecureMessageExchange` that uses RSA encryption to securely exchange messages between a client and a server during a TLS handshake. The class should have two main functionalities: generating an encrypted pre-master secret and safely decrypting the pre-master secret. The pre-master secret is a 48-byte array where the first two bytes are the client's version number, and the remaining 46 bytes are random. The encryption should use PKCS#1 padding. The class should include the following methods: 1. `generateEncryptedPreMasterSecret(RSAKeyParameters publicKey, ProtocolVersion clientVersion)`: This method takes an RSA public key and the client's version and generates an encrypted pre-master secret. It returns the encrypted pre-master secret as a byte array. 2. `safeDecryptPreMasterSecret(RSAKeyParameters privateKey, byte[] encryptedPreMasterSecret, ProtocolVersion expectedClientVersion)`: This method takes an RSA private key, the encrypted pre-master secret, and the expected client version. It attempts to decrypt the pre-master secret and performs a version check to ensure that the first two bytes match the expected version. If the decryption fails or the version check fails, it returns a random pre-master secret to avoid leaking information through timing attacks. Include appropriate exception handling for cryptographic errors and ensure that the class does not leak sensitive information through exceptions.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "variable", "instruction": "Your code should define a variable named 'clientVersion'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'ProtocolVersion'."}, {"type": "variable", "instruction": "Variable 'clientVersion', type should be 'ProtocolVersion'."}, {"type": "variable", "instruction": "Variable 'clientVersion', should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named 'EncryptionInterface'."}, {"type": "class", "instruction": "Your code should define a class named 'SecureMessageExchange'."}, {"type": "file", "instruction": "Your code should not use the following libraries ['org.bouncycastle', 'javax.crypto']."}, {"type": "combination", "instruction": "Your code should define a class named 'SecureMessageExchange' that implements the 'EncryptionInterface' interface."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 5], "8": [0, 1, 2, 3, 4, 5], "12": [0, 1, 2, 3, 4, 9, 10]}, "question_id": 32}
{"question": "Go is an ancient Chinese game. The board is a 19x19 grid, where two players compete by placing black and white pieces respectively on the intersections of the grid. There are a total of 361 intersections. In order to record a game, we have designed the following file format. Below is a record of a game:\n\nPB[libai]\nRB[6]\nPW[dufu]\nRW[7]\nDT[2020-05-21]\n\n;B[qd];W[dc];B[pq];W[qo];B[oc];W[qj];B[eq];W[do];B[cp];W[co]\n;B[bp];W[np];B[po];W[pp];B[op];W[qp];B[oq];W[oo];B[no];W[pn]\n;B[on];W[qq];B[po];W[pm];B[mp];W[ck];B[ce];W[cg];B[cc];W[cb]\n;B[dd];W[ec];B[bc];W[bb];B[ef];W[gc];B[eh];W[fg];B[ch];W[bh]\n;B[dh];W[bi];B[lc];W[kq];B[kp];W[jp];B[ko];W[bo];B[gq];W[fp]\n;B[ep];W[fq];B[fr];W[eo];B[fo];W[gp];B[hp];W[go];B[ho];W[gn]\n;B[hr];W[hn];B[in];W[im];B[jm];W[jn];B[io];W[ee];B[bg];W[bf]\n;B[cf];W[ag];B[ff];W[gf];B[fe];W[ed];B[ge];W[dg];B[eg];W[df]\n;B[il];W[hm];B[hl];W[fm];B[fk];W[qf];B[mk];W[of];B[oj];W[rd]\n\nPB: Name of the player playing the black pieces\nRB: Rating of the black player\nPW: Name of the player playing the white pieces\nRW: Rating of the white player\nDT: Date of the game\n\n;B: The party placing the piece is black\n;W: The party placing the piece is white\nThe position of the piece is encoded with two letters, the first letter denotes the column (from left to right), and the second letter denotes the row (from top to bottom). Since it is a 19x19 grid, both rows and columns range from a to s.\n\nPlease write a Python program, define the function `parse(record: str)`, to parse the above record of a game. Then record the final state of the board in a 19x19 two-dimensional array.\nIf a position in the array is filled with a black piece, it is represented by 1; if it is filled with a white piece, it is represented by 2; if there is no piece, it is represented by 0.\nInformation such as the players' names and the date are stored in a dict.\nFinally, return the two-dimensional array representing the state of the board and the dict containing the players' names, ratings and the date of the game.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named parse."}, {"type": "interface", "instruction": "Your code should define an interface named GameInterface."}, {"type": "class", "instruction": "Your code should define a class named GameBoard."}, {"type": "file", "instruction": "Your code should be organized in a package named go_game."}, {"type": "combination", "instruction": "Your code should define a class named GameBoard that implements the GameInterface interface."}, {"type": "combination", "instruction": "The function parse should return a tuple as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named go_game, which should contain these classes GameBoard."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"8": [0, 5, 6, 11, 12], "9": [0, 4, 11, 12], "10": [0, 6, 7, 11, 12]}, "question_id": 33}
{"question": "Please write a Java method that generates a simple voting system, allowing users to choose 'Yes' or 'No' by clicking buttons. The method should return an object containing two buttons ('Yes' and 'No'). Each button should have a label, 'voteYes' and 'voteNo' respectively, for subsequent processing of the user's choice. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nclass VoteButton {\n    String text; \n    String callbackData; \n    public VoteButton(String text, String callbackData) {\n    }\n    public void setCallbackData(String callbackData) {\n    }\n    public String getText() {\n    }\n    public String getCallbackData() {\n    }\n}\nclass VoteSystem {\n    public List<List<VoteButton>> generateVoteButtons() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named VoteOption."}, {"type": "function", "instruction": "Your code should include a function named generateVoteButtons."}, {"type": "file", "instruction": "Your code should be organized in a package named votingSystem."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.List."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.HashMap."}, {"type": "combination", "instruction": "The function generateVoteButtons should take no parameters."}], "instruction_dependence": {"8": [0, 4]}, "question_id": 34}
{"question": "Design a C++ program that simulates a simple image viewer application with basic transformation commands such as translate, scale, and rotate. The application should be able to handle commands to open an image, move the image in four directions (left, right, up, down), scale the image up and down, and rotate the image left and right. The commands are to be processed by a `CommandHandler` class that implements a simplified version of the IUICommandHandler interface for demonstration purposes. The `CommandHandler` class should have methods to execute the given commands and maintain a reference count for COM-style memory management. The `MainWindow` and `D2DWindow` classes are external and assumed to provide the actual implementation for the image transformations. For the purpose of this question, you only need to simulate the behavior of these classes with simple print statements indicating the action taken.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `virtual` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `imageTransform`."}, {"type": "file", "instruction": "Your code should be organized in a package named `imageViewer`."}, {"type": "file", "instruction": "Your code should import the following libraries `<iostream>, <string>, <memory>`."}], "instruction_dependence": {}, "question_id": 35}
{"question": "Please implement an advertisement carousel system in python. Requirements: 1、Include an advertisement information class AdvertiseInfo, each advertisement contains advertisement number (id), title, image, and an abstract. All types are str. 2、Initialize with 2 advertisements, and switch to another ad every 2 seconds. 3、Include an advertisement management class AdvertiseManage, which needs to implement functions for adding (add), deleting (del), and returning the current advertisement (get_current_advertise). Please note that when adding and deleting advertisements, lock the advertisements to prevent accessing incorrect data. 4、Please add type annotation according to Python 3 practices.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named add."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the threading library."}, {"type": "interface", "instruction": "Your code should define an interface named AdvertiseInfo."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries time."}, {"type": "file", "instruction": "Your code should use the function sleep from the library time."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7], "10": [0, 1, 9]}, "question_id": 36}
{"question": "Design a payroll system for a company that manages both full-time and part-time employees. The system should allow for the addition of employee records, display of all employee records, and searching for a specific employee record by employee number. Full-time employees are paid based on a daily rate and the number of days worked, while part-time employees are paid based on an hourly rate and the number of hours worked. Implement the system using object-oriented programming principles in C++. The system should include the following features: 1. A base class `Employee` with common attributes such as `employeeNumber` and `employeeName`. 2. Two derived classes `FullTimeEmployee` and `PartTimeEmployee` that inherit from `Employee` and add specific attributes and methods for salary calculation. 3. The `FullTimeEmployee` class should have attributes for `dailyRate` and `daysWorked`, and a method to calculate the salary. 4. The `PartTimeEmployee` class should have attributes for `hourlyRate` and `hoursWorked`, and a method to calculate the salary. 5. A main menu in the `main` function to interact with the user, allowing them to add employee records, display all records, and search for a specific employee by number. 6. The system should be able to handle up to 5 full-time and 5 part-time employees.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named employeeCount."}, {"type": "variable", "instruction": "Variable employeeCount should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculateSalary."}, {"type": "class", "instruction": "Your code should define a class named Employee."}, {"type": "file", "instruction": "Your code should be organized in a package named payrollSystem."}, {"type": "combination", "instruction": "In your code, the class Employee should have these methods getEmployeeNumber, getEmployeeName."}, {"type": "combination", "instruction": "The function calculateSalary should return a double as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named payrollSystem, which should contain these functions addEmployee, displayAllEmployees, searchEmployeeByNumber."}], "instruction_dependence": {"3": [0, 2], "7": [0, 5], "8": [0, 4], "9": [0, 6]}, "question_id": 37}
{"question": "Design a URL shortening service similar to TinyURL. This service should be able to encode a long URL into a shorter one that is easier to share, and decode a short URL back into the original long URL. The short URL should be a combination of characters that cannot be easily predicted and should support a large number of unique URLs. The service should meet the following requirements: - The short URL should be based on a mix of base64 encoding and randomization to ensure unpredictability. - The number of URLs that can be encoded should be large, significantly better than a simple hash code which is limited by the size of an integer. - The service should handle potential collisions in the generated keys for short URLs. - The service should provide a method to encode a long URL into a short URL and a method to decode a short URL back into the original long URL. Implement the `TinyURLEncodeDecode` class with the following methods: - `encode(String longUrl)`: Encodes a long URL into a short URL. - `decode(String shortUrl)`: Decodes a short URL back into the original long URL.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named url_map."}, {"type": "variable", "instruction": "Variable url_map, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named generate_short_url."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named TinyURLEncodeDecode."}, {"type": "file", "instruction": "Your code should be organized in a package named url_shortener."}, {"type": "file", "instruction": "Your code should import the following libraries random, string, base64."}, {"type": "file", "instruction": "Your code should use the function b64encode from the library base64."}, {"type": "combination", "instruction": "Your code should be organized in a package named url_shortener, which should contain these classes TinyURLEncodeDecode."}, {"type": "combination", "instruction": "Your code should be organized in a package named url_shortener, which should contain these functions generate_short_url."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "12": [0, 1, 11], "13": [0, 1, 9, 10], "14": [0, 1, 10]}, "question_id": 38}
{"question": "Assuming you are developing a library management system and need to implement a feature to check whether a user is logged in. If the user is logged in, they can continue to access the system's main interface; if the user is not logged in, they cannot access it. Based on this requirement, please write a Java method to implement this feature. Ensure your solution is clear and comprehensive. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookSystemAccess {\n    private Map<String, Boolean> userStatus;\n    public BookSystemAccess() {\n    }\n    public boolean checkUserLogin(String userName) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "variable", "instruction": "Your code should define a variable named userStatus."}, {"type": "variable", "instruction": "Variable userStatus, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named UserAccess."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named BookSystemAccess."}, {"type": "combination", "instruction": "Your code should define a class named BookSystemAccess that implements the UserAccess interface."}], "instruction_dependence": {"4": [0, 1, 2, 3], "6": [0, 1, 2, 5], "8": [0, 1, 2, 5, 7]}, "question_id": 39}
{"question": "Design a simple logging system for a game engine called `EpiEngine`. The logging system should be able to write logs to both the console and a file. The logs should be color-coded when output to the console for better readability. The system should support different levels of logging such as `info`, `warn`, `error`, and `critical`. The file logging should append to a log file named `epiengine.log`. Implement the `Logger` class with the following requirements: - Use the Singleton design pattern to ensure there is only one instance of the Logger. - Initialize the console and file sinks only once and share them across the logger instances. - Provide a static method `GetLogger()` to access the logger instance. - Provide methods `LogInfo`, `LogWarn`, `LogError`, and `LogCritical` for logging messages at different levels. - Ensure thread safety for logging operations.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `log_file`."}, {"type": "variable", "instruction": "Variable `log_file`, type should be `str`."}, {"type": "function", "instruction": "Your code should include a function named `LogInfo`."}, {"type": "interface", "instruction": "Your code should define an interface named `ILogger`."}, {"type": "combination", "instruction": "You should define an interface named `ILogger` that includes these methods `LogInfo`, `LogWarn`, `LogError`, `LogCritical`."}, {"type": "combination", "instruction": "The function `GetLogger` should return a `Logger` as its result."}], "instruction_dependence": {"4": [0, 3], "7": [0, 6], "8": [0, 5]}, "question_id": 40}
{"question": "Please write a Java function that can convert an integer into a 4-byte byte array. The conversion of the integer should be in big-endian order (i.e., the most significant byte is at the lowest address of the byte array). Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.nio.ByteBuffer;\npublic class IntegerToBytesConverter {\n    public static byte[] convertIntToBigEndianBytes(int number) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named convertIntToBigEndianBytes."}, {"type": "class", "instruction": "Your code should define a class named IntegerToBytesConverter."}, {"type": "file", "instruction": "Your code should be organized in a package named converter."}, {"type": "combination", "instruction": "You should initialize an object named converter as an instance of the IntegerToBytesConverter class using number for initialization."}, {"type": "combination", "instruction": "The function convertIntToBigEndianBytes should return a byte[] as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named converter, which should contain these classes IntegerToBytesConverter."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"8": [0, 1, 2, 6, 11], "9": [0, 1, 2, 5, 11], "10": [0, 1, 2, 6, 7, 11]}, "question_id": 41}
{"question": "Design a Java program that calculates the final score of a student based on their assignment scores, midterm exam score, and final exam score. The final score is a weighted sum of these components. The program should include a class named `StudentGradeCalculator` with the following methods: 1. `double calculateAssignmentScore(int assignment1, int assignment2)`: This method takes two integers representing the scores of two assignments and returns their sum as a double. 2. `double calculateFinalScore(double assignmentScore, int midtermScore, int finalExamScore)`: This method takes the total assignment score (as a double), the midterm exam score, and the final exam score (both as integers), and calculates the final score based on the following weights: - Assignments: 40% - Midterm Exam: 30% - Final Exam: 30%. The program should also include a main method that creates an instance of `StudentGradeCalculator`, inputs scores for two assignments, a midterm exam, and a final exam, and then prints out the final score of the student.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `totalScore`."}, {"type": "variable", "instruction": "Variable `totalScore`, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named `GradeCalculator`."}, {"type": "class", "instruction": "Your code should define a class named `StudentGradeCalculator`."}, {"type": "combination", "instruction": "You should define an interface named `GradeCalculator` that includes these methods `calculateAssignmentScore`, `calculateFinalScore`."}, {"type": "combination", "instruction": "In your code, the class `StudentGradeCalculator` should have these properties `assignment1`, `assignment2`, `midtermScore`, `finalExamScore`."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 6], "9": [0, 1, 2, 7]}, "question_id": 42}
{"question": "Design a Java Android application that maintains a list of boiler parts in an inventory system. The application should display a list of parts with their unit costs and quantities available. The data for the inventory is stored in a Firebase Realtime Database. Each part in the inventory is represented as a record in the database with the following fields: `part_name`, `unit_cost`, and `quantity`. The application should have the following features: 1. Display a list of all parts in the inventory with their names, unit costs, and quantities. 2. Update the list in real-time when a new part is added to the database. 3. Allow the user to remove a part from the list by swiping the item in the list. Write a Java class named `InventoryActivity` that extends `AppCompatActivity` and implements the required features. Use a `ListView` to display the inventory items and an `ArrayAdapter` to bind the data to the `ListView`. The Firebase Realtime Database URL is provided in the given code snippet.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define an enumeration named PartStatus."}, {"type": "interface", "instruction": "Your code should define an interface named InventoryListener."}, {"type": "class", "instruction": "Your code should define a class named InventoryActivity."}, {"type": "file", "instruction": "Your code should not use the following libraries: Retrofit, OkHttp."}, {"type": "combination", "instruction": "Your code should define a class named InventoryAdapter that implements the InventoryListener interface."}, {"type": "combination", "instruction": "In your code, the class InventoryActivity should have these properties: ListView inventoryListView, ArrayAdapter<Part> inventoryAdapter, FirebaseDatabase database."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 3, 4, 8], "7": [0, 1, 4, 8]}, "question_id": 43}
{"question": "Design a C++ program that performs operations on complex numbers. A complex number is defined as a number that can be expressed in the form a + bi, where a and b are real numbers, and i is the imaginary unit, satisfying the equation i^2 = -1. Your program should include a `Complex` class that supports the following operations: 1. Subtraction of two complex numbers. 2. Multiplication of two complex numbers. 3. Pre-decrement and post-decrement operators that decrement both the real and imaginary parts of the complex number. 4. Overloading the stream insertion operator (`<<`) to display complex numbers in the form \"a + bi\". Ensure that your program is well-structured, with appropriate member functions and operator overloads to handle the operations mentioned above. Provide a main function that demonstrates the use of these operations with test cases.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named Complex."}, {"type": "file", "instruction": "Your code should be organized in a package named complex_operations."}, {"type": "file", "instruction": "Your code should import the following libraries iostream."}, {"type": "file", "instruction": "Your code should use the function cout from the library iostream."}, {"type": "combination", "instruction": "In your code, the class Complex should have these methods subtract, multiply, preDecrement, postDecrement, operator<<."}, {"type": "combination", "instruction": "Your code should be organized in a package named complex_operations, which should contain these functions main, subtract, multiply, preDecrement, postDecrement, operator<<."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "9": [0, 1, 8], "10": [0, 1, 6], "11": [0, 1, 7]}, "question_id": 44}
{"question": "Implement a 3D Scene Management System in C++ that allows for the dynamic creation and manipulation of various objects within a scene. The system should support loading and switching between different models, adjusting light properties, binding and updating textures, handling transformations, and implementing a camera system for user interaction. The system should be extensible and handle multiple objects and light sources.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named sceneManager."}, {"type": "variable", "instruction": "Variable sceneManager, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named updateScene."}, {"type": "class", "instruction": "Your code should define a class named SceneObject."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "The function updateScene should take deltaTime as a parameter."}, {"type": "combination", "instruction": "The function updateScene should return a void as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"3": [0, 2, 9], "6": [0, 5, 9], "7": [0, 4, 9], "8": [0, 4, 9]}, "question_id": 45}
{"question": "Design a RESTful API for a movie database that allows users to perform CRUD operations on movies, retrieve movie details, and get movie recommendations based on clustering algorithms. The API should support filtering, sorting, and searching movies by various criteria such as title, genres, age demographics, gender, and occupation. Additionally, the API should provide a way to update movie view counts and recommend movies based on a clustering label from a machine learning model. The API should have the following endpoints: 1. `/movies/` - Supports `GET`, `POST`, and `DELETE` methods. - `GET`: Retrieve a list of movies with optional filters for title, genres, sorting by views or ratings, and sorting by age demographics, gender, or occupation. If an `id` is provided, return the details of a single movie and optionally update its rating. - `POST`: Add new movies to the database. The request body should contain a list of movies with their `id`, `title`, and `genres`. - `DELETE`: Remove all movies from the database. 2. `/get_movie_recommendation/` - Supports `GET` method. - `GET`: Retrieve a list of recommended movies based on the clustering label of a given movie. The request should include the `movie_id` and the clustering algorithm label (e.g., `KMeans_labels`).", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named movie_count."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable movie_count, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named get_movie_recommendations."}, {"type": "interface", "instruction": "Your code should define an interface named MovieDatabase."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named MovieAPI."}, {"type": "combination", "instruction": "You should initialize an object named movie_api as an instance of the MovieAPI class using database_connection for initialization."}, {"type": "combination", "instruction": "You should define an interface named MovieDatabase that includes these methods get_movie_details, add_movie, delete_movie, get_recommendations."}, {"type": "combination", "instruction": "Your code should define a class named MovieAPI that implements the MovieDatabase interface."}, {"type": "combination", "instruction": "In your code, the class MovieAPI should have these properties movie_count, database_connection."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "8": [0, 7], "10": [0, 9], "11": [0, 7], "12": [0, 7, 9], "13": [0, 9]}, "question_id": 46}
{"question": "Design a simple calculator that can perform basic arithmetic operations: addition, subtraction, multiplication, and division. The calculator should be implemented using an object-oriented approach where each operation is represented by a class that inherits from an abstract base class `AbstractOperation`. Each operation class should override two methods: `getAnswer`, which performs the calculation, and `getOperator`, which returns the symbol of the operation. The abstract base class `AbstractOperation` should define the structure of the operation classes but not provide any implementation. The operation classes should be named `AddOperation`, `SubtractOperation`, `MultiplyOperation`, and `DivideOperation`. Additionally, implement a `Calculator` class that uses these operation classes to perform calculations. The `Calculator` class should have a method `calculate` that takes three arguments: `firstNumber`, `operator`, and `secondNumber`. The `operator` argument is a string that specifies the operation to perform (e.g., '+', '-', '*', '/'). The `calculate` method should select the appropriate operation class based on the operator and use it to perform the calculation. If an invalid operator is provided, the method should raise a `ValueError`.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named calculate."}, {"type": "function", "instruction": "Your code should not use any functions from the disallowed_function_list."}, {"type": "interface", "instruction": "Your code should define an interface named AbstractOperation."}, {"type": "class", "instruction": "Your code should define a class named Calculator."}, {"type": "file", "instruction": "Your code should be organized in a package named calculator_package."}, {"type": "file", "instruction": "Your code should import the following libraries math."}, {"type": "file", "instruction": "Your code should use the function sqrt from the library math."}, {"type": "file", "instruction": "Your code should not use the following libraries numpy."}, {"type": "combination", "instruction": "You should define an interface named AbstractOperation that includes these methods getAnswer, getOperator."}, {"type": "combination", "instruction": "In your code, the class Calculator should have these methods calculate."}, {"type": "combination", "instruction": "The function calculate should take firstNumber, operator, secondNumber as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculator_package, which should contain these functions calculate."}], "instruction_dependence": {"8": [0, 7], "10": [0, 4], "11": [0, 5], "12": [0, 2], "13": [0, 6]}, "question_id": 47}
{"question": "Create a Python program that uses the provided code snippet to implement a command-line weather application. The application should allow users to search for cities, display the current weather, and show forecasts for a specified city. The application should be able to display temperatures in Celsius or Fahrenheit based on user preference. The program should include the following functionalities: 1. Search for cities by a pattern and list matching cities. 2. Display the current weather for a specified city by its ID. 3. Display weather forecasts for a specified city by its ID. 4. Allow the user to set their temperature display preference to Celsius or Fahrenheit. The application should be able to handle invalid input gracefully and provide helpful error messages to the user.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named city_id."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named display_weather."}, {"type": "class", "instruction": "Your code should define a class named WeatherApp."}, {"type": "file", "instruction": "Your code should be organized in a package named weather_app."}, {"type": "combination", "instruction": "You should initialize an object named weather_app_instance as an instance of the WeatherApp class using city_id and temperature_unit for initialization."}, {"type": "combination", "instruction": "The function display_weather should take city_id and temperature_unit as parameters."}], "instruction_dependence": {"4": [0, 3], "8": [0, 6], "9": [0, 5]}, "question_id": 48}
{"question": "Please write a Java method that accepts two parameters: a list of student grades and the student ID to query. The purpose of this method is to find the specified student's grade and return it in JSON format. If the student's grade is found, the returned JSON should include the student's ID and grade; if not found, the returned JSON should indicate that the student's grade was not found. Please note that all keys and values should be enclosed in double quotes. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentScoreFinder {\n    public String findScoreById(Map<String, Integer> scores, String studentId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure Map."}, {"type": "function", "instruction": "Your code should include a function named findScoreById."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.HashMap, java.util.Map."}], "instruction_dependence": {"3": [0, 2]}, "question_id": 49}
{"question": "Please write a two-dimensional array Iterator class in Python, the class name is Iter(). One member variable of this class is the two-dimensional array to be iterated, and the other member variable represents the current position. In this class, the input of __init__() is a two-dimensional array, and the current position is set to the first element of this array during initialization (assuming the array has at least one element). This class has three methods, namely front(), back() and read(). Both front() and back() have no input, they move the current position forward or backward by one element (if it is the first or last element, it does not move). read() also has no input, and its output is the value of the current position. Note that each row of this two-dimensional array does not necessarily have the same length.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "variable", "instruction": "Your code should define a variable named current_position."}, {"type": "variable", "instruction": "Variable current_position, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named read."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named IteratorInterface."}, {"type": "class", "instruction": "Your code should define a class named Iter."}, {"type": "file", "instruction": "Your code should be organized in a package named iterator_package."}, {"type": "combination", "instruction": "You should initialize an object named iterator as an instance of the Iter class using a two-dimensional array for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named iterator_package, which should contain these classes Iter."}, {"type": "combination", "instruction": "Your code should be organized in a package named iterator_package, which should contain these functions front, back, read."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 13], "6": [0, 1, 2, 5, 13], "10": [0, 1, 2, 8, 13], "11": [0, 1, 2, 8, 9, 13], "12": [0, 1, 2, 9, 13]}, "question_id": 50}
{"question": "You are given two integer arrays `nums1` and `nums2` with indices starting from **0**, each having `n` and `m` elements respectively. Please calculate the following two values: * Count the index `i` in `0 <= i < n`, where `nums1[i]` appears **at least** once in `nums2`. * Count the index `i` in `0 <= i < m`, where `nums2[i]` appears **at least** once in `nums1`. Please return an integer array `answer` of length `2`, containing the above two values **in order**.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "variable", "instruction": "Your code should define a variable named 'count1'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named 'findIntersectionValues'."}, {"type": "interface", "instruction": "Your code should define an interface named 'IntersectionCalculator'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'Solution'."}, {"type": "file", "instruction": "Your code should not use the following libraries: 'algorithm', 'unordered_set'."}, {"type": "combination", "instruction": "In your code, the class 'Solution' should have these methods: 'findIntersectionValues'."}, {"type": "combination", "instruction": "The function 'findIntersectionValues' should return a 'vector<int>' as its result."}], "instruction_dependence": {"4": [0, 1, 2, 3], "7": [0, 1, 2, 6], "10": [0, 1, 2, 8], "11": [0, 1, 2, 5]}, "question_id": 51}
{"question": "You are given a two-dimensional integer matrix `grid` with 0-based indexing, of size `n * n` where values range from `[1, n2]`. Except for `a` appearing **twice** and `b` **missing**, each integer appears **exactly once**. The task is to find the repeated number `a` and the missing number `b`. Return an integer array `ans` of length `2` with 0-based indexing, where `ans[0]` equals `a` and `ans[1]` equals `b`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "function", "instruction": "Your code should include a function named findMissingAndRepeatedValues."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "file", "instruction": "Your code should be organized in a package named matrix_operations."}, {"type": "combination", "instruction": "In your code, the class Solution should have these properties grid."}, {"type": "combination", "instruction": "In your code, the class Solution should have these methods findMissingAndRepeatedValues."}, {"type": "combination", "instruction": "Your code should be organized in a package named matrix_operations, which should contain these functions findMissingAndRepeatedValues."}], "instruction_dependence": {"3": [0, 2], "6": [0, 4], "7": [0, 4], "8": [0, 5]}, "question_id": 52}
{"question": "Design a Java program that manages a collection of executable types for a job scheduling system. The system should be able to serialize and deserialize executable types to and from JSON format. The executable types are predefined and include JITL, Java, JavaScript_Graal, and JavaScript_Node. The program should provide the following functionalities: 1. Define an `enum` called `ExecutableType` with the predefined types. 2. Implement a method `fromString` that takes a `String` value and returns the corresponding `ExecutableType`. 3. Implement a method `toString` that returns the `String` representation of the `ExecutableType`. 4. Implement JSON serialization and deserialization methods using Jackson annotations. 5. Throw an `IllegalArgumentException` if an unknown type is provided to the `fromString` method. Write a class `ExecutableTypeManager` that includes the `enum` and the required methods. Also, provide test cases to verify the correctness of serialization and deserialization, as well as the `fromString` method.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the enum keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named executableType."}, {"type": "variable", "instruction": "Your code should define an enumeration named ExecutableType."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable executableType should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named fromString."}, {"type": "function", "instruction": "Your code should not use any functions from the Arrays.asList."}, {"type": "interface", "instruction": "Your code should define an interface named Serializable."}, {"type": "class", "instruction": "Your code should define a class named ExecutableTypeManager."}, {"type": "file", "instruction": "Your code should import the following libraries com.fasterxml.jackson.annotation."}, {"type": "combination", "instruction": "Your code should define a class named ExecutableTypeManager that implements the Serializable interface."}, {"type": "combination", "instruction": "The function fromString should take String as parameters."}], "instruction_dependence": {"6": [0, 1, 4], "7": [0, 1, 4], "13": [0, 1, 10, 11], "14": [0, 1, 8]}, "question_id": 53}
{"question": "You are given two integer arrays `X` and `Y` of the same length, where each pair `(X[i], Y[i])` represents a point on a 2D grid. You are initially at the point `(X[0], Y[0])` and you want to move to each point in the order given by the arrays. You can move in any of the 8 possible directions (horizontally, vertically, or diagonally) in a single step. Write a function `minStepsToCoverPoints` that takes in two vectors of integers `X` and `Y` and returns the minimum number of steps required to cover all the points in the order given by the arrays.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `steps`."}, {"type": "variable", "instruction": "Variable `steps` should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `MovementStrategy`."}, {"type": "file", "instruction": "Your code should be organized in a package named `point_movement`."}], "instruction_dependence": {"5": [0, 1, 4]}, "question_id": 54}
{"question": "Design a Java class that manages a blacklist system for an alarm center. The system should be able to add, remove, and query blacklist entries based on different dimensions such as IP addresses, user IDs, or device IDs. Each blacklist entry should contain a unique identifier, the type of dimension it belongs to, the actual value of the blacklisted entity, the staff member who added the entry, an optional nickname for the entry, the time until which the entry is valid (due time), and timestamps for when the entry was created and last modified. Implement the following functionalities: 1. `addBlacklistEntry`: Adds a new entry to the blacklist. 2. `removeBlacklistEntry`: Removes an entry from the blacklist by its unique identifier. 3. `queryBlacklistEntries`: Returns a list of all blacklist entries for a given dimension type. 4. `isBlacklisted`: Checks if a given value is blacklisted under a specific dimension. Ensure that the class is well-structured, and the code is written with best practices in mind. Include appropriate error handling and validation for the methods.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named blacklistEntries."}, {"type": "variable", "instruction": "Variable blacklistEntries, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the System.exit."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 55}
{"question": "Find the root of the following equation\n\na^2 + b^2 = c^2\na + b + c = 10\na = b\n\nDefine a python function solve() to solve the problem, returns a list of length 3 [a, b, c]", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named Solver."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named EquationSolver."}], "instruction_dependence": {"3": [0, 1, 2], "5": [0, 1, 4], "7": [0, 1, 6]}, "question_id": 56}
{"question": "Given an integer array `nums` starting from index **0**. A **mountain triplet** is considered to be a triplet `(i, j, k)` in `nums` if the following conditions hold: * `i < j < k` * `nums[i] < nums[j]` and `nums[k] < nums[j]`. Return the **sum of elements** in the smallest mountain triplet of `nums`. If no such triplet exists, return `-1`. Please complete the following implementation in C++: ```cpp class Solution { public: int minimumSum(vector<int> nums); };```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `min_sum`."}, {"type": "variable", "instruction": "Variable `min_sum`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `minimumSum`."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "file", "instruction": "Your code should import the following libraries `<vector>`."}, {"type": "file", "instruction": "Your code should use the function `push_back` from the library `<vector>`."}, {"type": "file", "instruction": "Your code should not use the following libraries `<algorithm>`."}], "instruction_dependence": {"3": [0, 2], "7": [0, 6]}, "question_id": 57}
{"question": "Design a RESTful API for a user management system using Spring Boot. The system should allow clients to perform CRUD operations on user data. Each user has an ID, username, password, email, role, and creation date. The role should be one of the predefined roles in the `RoleType` enum (e.g., USER, ADMIN). The system should provide the following endpoints:\n\n1. `GET /users`: Retrieve a list of all users.\n2. `GET /users/page`: Retrieve a paginated list of users. The page size and sorting should be customizable via query parameters.\n3. `GET /users/{id}`: Retrieve a specific user by their ID. If the user does not exist, return an appropriate error message.\n4. `POST /users`: Create a new user with the provided data. Assign the USER role by default.\n5. `PUT /users/{id}`: Update an existing user's password and email by their ID. If the user does not exist, return an appropriate error message.\n6. `DELETE /users/{id}`: Delete a user by their ID. If the user does not exist, return an appropriate error message.\n\nEnsure that the `PUT` operation is transactional and that the system handles exceptions gracefully, providing meaningful error messages to the client.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named userCount."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable userCount, the initial value should be 0."}, {"type": "interface", "instruction": "Your code should define an interface named UserRepository."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named UserService."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries org.springframework.data.jpa.repository.JpaRepository, org.springframework.stereotype.Service."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"5": [0, 4, 12], "6": [0, 4, 12], "8": [0, 7, 12], "10": [0, 9, 12]}, "question_id": 58}
{"question": "Write a Java program that performs the following tasks:\n\n1. **Calculate the Arithmetic Mean Above a Threshold**: Given an array of integers and a threshold value, calculate the arithmetic mean (average) of the elements that are strictly greater than the threshold.\n\n2. **Calculate the Arithmetic Mean Below a Threshold**: Similar to the first task, but calculate the arithmetic mean of the elements that are strictly less than the threshold.\n\n3. **Count Duplicate Elements**: Given a sorted array of integers, print the number of occurrences for each element that appears more than once.\n\n4. **Find Top Two Maximum Speeds**: Given an array of integers representing speeds, find the top two maximum speeds.\n\n5. **Sum Until Zero**: Given an array of integers, calculate the sum of the elements up to the first zero (exclusive). Also, count the number of elements added in the sum.\n\n6. **Count Initial Negative Numbers**: Given an array of doubles, return the count of negative numbers at the beginning of the array until a non-negative number is encountered.\n\n7. **Most Frequent Digit**: Given an integer, find the most frequent digit in it. If there are multiple digits with the same maximum frequency, return the largest one.\n\n8. **Convert Number to String Representation**: Given an integer between 1 and 99, return its string representation in English.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.program."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.ArrayList, java.util.HashMap."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.program, which should contain these functions calculateMeanAboveThreshold, calculateMeanBelowThreshold, countDuplicates, findTopTwoSpeeds, sumUntilZero, countInitialNegatives, mostFrequentDigit, convertNumberToString."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 6]}, "question_id": 59}
{"question": "Design a Java class `LedgerBalanceReportGenerator` that generates a report for a list of `LedgerBalanceWithMessage` objects. The report should include a summary of the ledger balances by account number and a detailed list of all ledger balances with their associated messages. The summary should include the total number of ledger balances and the total number of unique account numbers. The detailed list should be sorted by account number and then by sub-account number.\n\nImplement the `generateReport` method that takes a `List<LedgerBalanceWithMessage>` as input and returns a `String` representing the report. The report should be formatted as follows:\n\n```\nLedger Balance Report\n---------------------\nSummary:\nTotal Ledger Balances: {total_number_of_ledger_balances}\nTotal Unique Account Numbers: {total_unique_account_numbers}\n\nDetailed List:\nChart of Accounts Code | Account Number | Sub-Account Number | Financial Object Code | Position Number | Employee ID | Employee Name | Message\n{ledger_balance_details}\n```\n\nEach ledger balance detail should be on a new line and fields should be separated by a pipe `|` with a single space on each side.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `reportSummary`."}, {"type": "variable", "instruction": "Variable `reportSummary`, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the `java.util.stream` package."}, {"type": "class", "instruction": "Your code should define a class named `LedgerBalanceReportGenerator`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.ledger.reports`."}, {"type": "combination", "instruction": "In your code, the class `LedgerBalanceReportGenerator` should have these methods `generateReport`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.ledger.reports`, which should contain these functions `generateReport`."}], "instruction_dependence": {"5": [0, 1, 4], "9": [0, 1, 7], "10": [0, 1, 8]}, "question_id": 60}
{"question": "In the fictional world of DStories, each character has a set of chapters that describe their journey. However, some chapters are dependent on the completion of chapters from other characters. Your task is to write a program that determines if it is possible to read all the chapters in such a way that all dependencies are respected. A dependency is defined as a pair of chapters (A, B), where chapter A must be read before chapter B. Each test case will provide the number of characters, the number of dependencies, and the number of chapters each character has. Then, it will list the dependencies. Your program should output 'YES' if it is possible to read all the chapters while respecting the dependencies, and 'NO' otherwise.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the 'def' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'list'."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should include a function named 'can_read_all_chapters'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'ChapterDependency'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'ChapterScheduler'."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "10": [0, 1, 9]}, "question_id": 61}
{"question": "You are tasked with creating a script that organizes MARC (Machine-Readable Cataloging) records based on whether they have an associated EAD (Encoded Archival Description) file and a call number. The script should categorize the MARC records into three directories: one for records with an EAD link, one for records with a call number but no EAD link, and one for records with neither an EAD link nor a call number. The MARC records are XML files that may contain an EAD link in a `datafield` with tag `856` and a subfield with code `u`. They may also contain a call number in a `datafield` with tag `852` and a subfield with code `h`. The EAD files are also XML files, with a `unitid` element under `archdesc/did` that corresponds to the call number, and an `eadid` element that contains a collection ID. Write a Python script that: 1. Parses the EAD files to create a list of call numbers and collection IDs. 2. Parses the MARC records and checks for the presence of an EAD link or a call number. 3. Copies the MARC records into the appropriate directory based on the presence of an EAD link or a call number. The script should be robust, handle namespaces in XML, and use regular expressions to extract collection IDs from call numbers when necessary.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "variable", "instruction": "Your code should define a variable named `ead_files`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `ead_files`, the initial value should be an empty list."}, {"type": "variable", "instruction": "Variable `MAX_RECORDS`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `parse_ead_files`."}, {"type": "combination", "instruction": "The function `parse_ead_files` should take `file_path` as a parameter."}, {"type": "combination", "instruction": "The function `parse_ead_files` should return a dictionary as its result."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3], "8": [0, 1, 7], "9": [0, 1, 7]}, "question_id": 62}
{"question": "Please write a complete Python function `solve(smiles)`. The function should take a SMILES as input, and use RDKit to get a list of Van der Waals radii of non-hydrogen atoms in the molecule (the order should be the same as the atomic index, and the Van der Waals radius values should be rounded to two decimal places).", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named van_der_waals_radii."}, {"type": "variable", "instruction": "Variable van_der_waals_radii should not be a constant."}, {"type": "file", "instruction": "Your code should import the following libraries ['rdkit', 'rdkit.Chem', 'rdkit.Chem.AllChem']."}, {"type": "file", "instruction": "Your code should use the function MolFromSmiles from the library rdkit.Chem."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 10], "9": [0, 1, 2, 8, 10]}, "question_id": 63}
{"question": "Design a RESTful API for a friend management system where users can add friends, retrieve their friend list, and check the common friends between two users. The system should also allow users to block updates from other users and subscribe to updates from a user. The API should have the following endpoints: 1. `POST /add`: Accepts two email addresses and creates a friendship link between them. 2. `GET /friends`: Accepts an email address and returns a list of all friends for that email. 3. `GET /common-friends`: Accepts two email addresses and returns a list of common friends. 4. `POST /block`: Accepts two email addresses, where the first one blocks updates from the second one. 5. `POST /subscribe`: Accepts two email addresses, where the first one subscribes to updates from the second one. The system should validate all email addresses before processing any request. If any email address is invalid, the system should return an appropriate error message.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named `email_validator`."}, {"type": "function", "instruction": "Your code should include a function named `validate_email`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named `FriendManager`."}, {"type": "file", "instruction": "Your code should be organized in a package named `friend_management`."}, {"type": "file", "instruction": "Your code should import the following libraries `flask`, `re`."}, {"type": "file", "instruction": "Your code should use the function `Flask` from the library `flask`."}, {"type": "combination", "instruction": "In your code, the class `FriendManager` should have these methods `add_friend`, `get_friends`, `get_common_friends`, `block_updates`, `subscribe_to_updates`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `friend_management`, which should contain these functions `validate_email`, `add_friend`, `get_friends`, `get_common_friends`, `block_updates`, `subscribe_to_updates`."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 7], "9": [0, 1, 5], "10": [0, 1, 6]}, "question_id": 64}
{"question": "Design a Go program that manages user addresses in a database using the GORM ORM. The program should include functionality to add, retrieve, update, and delete addresses for a user. Each address should have a unique ID, be associated with a user, and contain fields for the name, whether it is the primary address, city, province, address lines, phone number, email, and postal code. The `Address` struct provided should be used as the model for the database table. Implement the following functions: - `AddAddress(db *gorm.DB, address Address) error`: Adds a new address to the database. It should return an error if the address cannot be added. - `GetAddressesByUserID(db *gorm.DB, userID string) ([]Address, error)`: Retrieves all addresses for a given user ID. - `UpdateAddress(db *gorm.DB, addressID string, newAddress Address) error`: Updates an existing address by its ID with the new address details. - `DeleteAddress(db *gorm.DB, addressID string) error`: Deletes an address by its ID. Ensure that you handle any potential errors that may occur during database operations. Write test cases to verify the correctness of each function.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should include a function named AddAddress."}, {"type": "interface", "instruction": "Your code should define an interface named AddressManager."}, {"type": "class", "instruction": "Your code should define a class named Address."}, {"type": "file", "instruction": "Your code should be organized in a package named addressmanager."}, {"type": "file", "instruction": "Your code should import the following libraries gorm.io/gorm, gorm.io/driver/sqlite."}, {"type": "combination", "instruction": "You should define an interface named AddressManager that includes these methods AddAddress, GetAddressesByUserID, UpdateAddress, DeleteAddress."}, {"type": "combination", "instruction": "Your code should define a class named Address that implements the AddressManager interface."}], "instruction_dependence": {"9": [0, 1, 2, 5], "10": [0, 1, 2, 5, 6]}, "question_id": 65}
{"question": "Design a Go program that simulates a simplified version of a cloud service provider's client management system. The system should be able to initialize clients for various cloud services and provide a method to list all initialized services. Each service client should have a unique identifier and a method to return its service name. The program should follow these requirements: 1. Define a `ServiceClient` interface with a `ServiceName` method that returns the name of the service. 2. Implement the `ServiceClient` interface for at least three mock services (e.g., `ComputeServiceClient`, `StorageServiceClient`, `NetworkingServiceClient`). 3. Create a `CloudServiceProvider` struct that contains a map of service clients, indexed by their unique identifiers. 4. Implement a method `InitializeService` on `CloudServiceProvider` that takes a service identifier and initializes the corresponding service client. 5. Implement a method `ListServices` on `CloudServiceProvider` that returns a list of names of all initialized services.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named ListServices."}, {"type": "interface", "instruction": "Your code should define an interface named ServiceClient."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CloudServiceProvider."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named cloudprovider."}, {"type": "file", "instruction": "Your code should import the following libraries fmt."}, {"type": "file", "instruction": "Your code should use the function Println from the library fmt."}, {"type": "combination", "instruction": "Your code should define a class named ComputeServiceClient that implements the ServiceClient interface."}, {"type": "combination", "instruction": "The function InitializeService should take serviceID as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 3, 12, 13], "6": [0, 5, 12, 13], "9": [0, 8, 12, 13], "10": [0, 3, 5, 12, 13], "11": [0, 2, 12, 13]}, "question_id": 66}
{"question": "Design a Go package named `nhapi` that provides a client for interacting with a fictional API similar to the NHentai API. The package should allow users to perform the following actions:\n\n1. Get details of a specific item by its ID.\n2. Search for items using a query string, an optional sort parameter, and a page number.\n3. Retrieve the thumbnail URL of an item's cover image based on its media ID.\n4. Get a random item ID from the API.\n\nThe client should be configurable with options such as API base URL and request timeout. Implement unit tests to verify the functionality of each method in the client.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "function", "instruction": "Your code should include a function named `GetItemDetails`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `APIClient`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `NHentaiClient`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `nhapi`."}, {"type": "file", "instruction": "Your code should not use the following libraries `net/http`, `encoding/json`."}, {"type": "combination", "instruction": "You should initialize an object named `client` as an instance of the `NHentaiClient` class using `baseURL` and `timeout` for initialization."}, {"type": "combination", "instruction": "The function `GetItemDetails` should take `itemID` as a parameter."}, {"type": "combination", "instruction": "Your code should be organized in a package named `nhapi`, which should contain these functions `GetItemDetails`, `SearchItems`, `GetThumbnailURL`, `GetRandomItemID`."}], "instruction_dependence": {"3": [0, 1, 2], "5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 6], "11": [0, 1, 2], "12": [0, 1, 8]}, "question_id": 67}
{"question": "Create a Python program that defines a data structure for storing metadata formats and provides functionality to add new formats, retrieve a list of all formats, and find a specific format by its prefix. The metadata formats should be represented by a class `MetadataFormatType` which includes a prefix, a schema, and a namespace. The main class `ListMetadataFormatsType` should use the `MetadataFormatType` to store a list of metadata formats. The `MetadataFormatType` should have the following attributes: `prefix`: A string representing the unique prefix for the metadata format, `schema`: A string representing the URL to the schema of the metadata format, `namespace`: A string representing the namespace URI of the metadata format. The `ListMetadataFormatsType` should provide the following methods: `add_format`: Adds a new `MetadataFormatType` to the list, `get_formats`: Returns a list of all `MetadataFormatType` instances, `find_format`: Takes a prefix as an argument and returns the `MetadataFormatType` with that prefix, or `None` if not found.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the `global` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `list`."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `metadata_list`."}, {"type": "class", "instruction": "Your code should define a class named `MetadataFormatType`."}, {"type": "class", "instruction": "Your code should define a class named `ListMetadataFormatsType`."}], "instruction_dependence": {}, "question_id": 68}
{"question": "Design a Go program that provides detailed version information for a software application. The program should be able to output the semantic version, build date, operating system, architecture, and the git commit hash (if available) of the application. The version information should be encapsulated in a package named `version`. The `version` package should expose a function named `Long` that returns a formatted string containing all the version details. The semantic version, build date, and git commit hash should be stored in package-level variables that can be set at build time using ldflags. The output format should be as follows: `<application name> version <semantic version> <operating system>/<architecture> - build date: <build date> git commit hash: <git commit hash>`. If the git commit hash is not available, the last line should be omitted. Write a Go program that imports the `version` package and prints the detailed version information using the `Long` function. Provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `versionInfo`."}, {"type": "variable", "instruction": "Variable `versionInfo`, type should be `string`."}, {"type": "function", "instruction": "Your code should not use any functions from the `fmt` package."}, {"type": "class", "instruction": "Your code should define a class named `Version`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `version`."}, {"type": "combination", "instruction": "In your code, the class `Version` should have these methods `Long`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `version`, which should contain these functions `Long`."}], "instruction_dependence": {"6": [0, 5], "9": [0, 8], "11": [0, 8], "12": [0, 10]}, "question_id": 69}
{"question": "Please modify the task to focus on specifying the requirements and conditions for validating user input of date and time in a Java program. The user will enter the date and time as a string in the format \"yyyy-MM-dd HH:mm:ss\". Ensure that the entered date and time are valid. If the input format is incorrect, specify that the program should return an error message indicating the issue. Utilize `SimpleDateFormat` and `ParseException` for validation. Describe that if the date and time are valid, the program should return \"Input is valid\", and if not, it should return \"Input format error, please re-enter\". Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\npublic class DateTimeFormatter {\n    public static String validateDateTime(String input) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 function."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named dateFormat."}, {"type": "variable", "instruction": "Variable dateFormat, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named validateDateTime."}, {"type": "function", "instruction": "Your code should not use any functions from the disallowed_function_list."}, {"type": "class", "instruction": "Your code should define a class named DateTimeFormatter."}, {"type": "file", "instruction": "Your code should import the following libraries java.text.ParseException, java.text.SimpleDateFormat."}, {"type": "combination", "instruction": "The function validateDateTime should take input as a parameter."}], "instruction_dependence": {"4": [0, 1, 3], "9": [0, 1, 5]}, "question_id": 70}
{"question": "There is a csv file of the model containing columns such as ID(int), Status(string), ModelName(string). Write a function in golang to read the csv file and parse it into a list of structures. The function signature that should be implemented is: `func ReadModelsFromCSV(filePath string) ([]Model, error)`", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Golang, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the 'defer' keyword."}, {"type": "variable", "instruction": "Your code should define a variable named 'models'."}, {"type": "variable", "instruction": "Variable 'models', type should be '[]Model'."}, {"type": "variable", "instruction": "Variable 'models', the initial value should be 'nil'."}, {"type": "function", "instruction": "Your code should not use any functions from the 'os' package."}, {"type": "class", "instruction": "Your code should define a class named 'Model'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'csvparser'."}, {"type": "file", "instruction": "Your code should import the following libraries 'encoding/csv', 'os'."}, {"type": "file", "instruction": "Your code should use the function 'ReadAll' from the library 'encoding/csv'."}, {"type": "combination", "instruction": "In your code, the class 'Model' should have these methods 'GetID', 'GetStatus', 'GetModelName'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'csvparser', which should contain these functions 'ReadModelsFromCSV'."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "10": [0, 1, 2, 9], "11": [0, 1, 2, 7], "12": [0, 1, 2, 8]}, "question_id": 71}
{"question": "You are given an array of non-negative integers `arr` and a starting position `start`. Your goal is to determine if you can reach any index with a value of `0` by starting at the `start` index and repeatedly making jumps of length equal to the value at the current index. You can jump either left or right, and you cannot jump outside of the array boundaries. Write a function `canReach` that takes in a vector of integers `arr` and an integer `start` and returns a boolean indicating whether it is possible to reach an index with a value of `0`. For example, given `arr = [4, 2, 3, 0, 3, 1, 2]` and `start = 5`, the function should return `true` because starting at index 5, you can jump with a length of 1 to index 4, which has a value of `0`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the return keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named jumpCount."}, {"type": "variable", "instruction": "Variable jumpCount, type should be int."}, {"type": "function", "instruction": "Your code should include a function named canReach."}, {"type": "interface", "instruction": "Your code should define an interface named Jumpable."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Jumper."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "In your code, the class Jumper should have these methods canJump, jumpLeft, jumpRight."}, {"type": "combination", "instruction": "The function canReach should return a bool as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "9": [0, 1, 2, 8, 14], "11": [0, 1, 2, 10, 14], "12": [0, 1, 2, 10, 14], "13": [0, 1, 2, 7, 14]}, "question_id": 72}
{"question": "Design a C++ program for an embedded system that manages the storage of configuration data in an external flash memory. The configuration data includes Wi-Fi credentials, device registration information, and a symmetric key for secure communication. The program should provide a way to initialize the storage, load the configuration from the flash memory, save new configuration data to the flash memory, and erase the configuration data when necessary. The external flash memory is accessed using a custom `ExtFlashLoader::QSPIFlash` class, and the configuration data is serialized and deserialized using the `MsgPack` library. The program should check for a specific signature ('AZ01') at the beginning of the flash memory to determine if valid configuration data is present. If the signature is not found, the program should clear the configuration data in memory. The program should be structured with a `Storage` class that encapsulates the functionality for managing the configuration data. The `Storage` class should have the following static members: `WiFiSSID`, `WiFiPassword`, `IdScope`, `RegistrationId`, `SymmetricKey`, `Init`, `Load()`, `Save()`, and `Erase()`. Provide a complete C++ program that includes the necessary imports, the `Storage` class definition, and test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `signature`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `ConfigStatus`."}, {"type": "variable", "instruction": "Variable `signature`, the initial value should be 'AZ01'."}, {"type": "interface", "instruction": "Your code should define an interface named `IConfigStorage`."}, {"type": "class", "instruction": "Your code should define a class named `Storage`."}, {"type": "file", "instruction": "Your code should be organized in a package named `ConfigManager`."}, {"type": "file", "instruction": "Your code should import the following libraries `MsgPack`, `ExtFlashLoader`."}, {"type": "combination", "instruction": "You should initialize an object named `flashMemory` as an instance of the `ExtFlashLoader::QSPIFlash` class using `flashAddress` for initialization."}], "instruction_dependence": {"5": [0, 1, 3], "10": [0, 1, 7]}, "question_id": 73}
{"question": "Design a telemetry data parser for a rocket's avionics system. The system receives various types of sensor data via a serial connection. Each data packet starts with a unique header byte that identifies the type of sensor data being transmitted. The data packets have different lengths depending on the sensor type. The parser should validate the header byte and the length of the data packet before parsing the data. The parser should handle the following types of sensor data: Accelerometer, Gyroscope, and Magnetometer (Header Byte: 0x31), Barometer (Header Byte: 0x32), GPS (Header Byte: 0x33), Oxidizer Tank Pressure (Header Byte: 0x34), Combustion Chamber Pressure (Header Byte: 0x35), Flight Phase (Header Byte: 0x36), Vent Status (Header Byte: 0x37), Load Cell Data (Header Byte: 0x40). Each data packet ends with a byte of value 0 to indicate the end of the packet. The parser should discard any packet that does not end with this byte. Implement the telemetry data parser in Go, ensuring that it can handle a stream of bytes and correctly parse each type of sensor data. The parser should also handle cases where the data stream is corrupted or contains unexpected bytes.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named packetBuffer."}, {"type": "function", "instruction": "Your code should not use any functions from the unsafe package."}, {"type": "interface", "instruction": "Your code should define an interface named SensorDataParser."}, {"type": "class", "instruction": "Your code should define a class named TelemetryParser."}, {"type": "file", "instruction": "Your code should be organized in a package named telemetry."}, {"type": "combination", "instruction": "You should define an interface named SensorDataParser that includes these methods ParseData, ValidateHeader, and ValidateLength."}, {"type": "combination", "instruction": "Your code should define a class named TelemetryParser that implements the SensorDataParser interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named telemetry, which should contain these classes TelemetryParser, SensorDataParser."}], "instruction_dependence": {"10": [0, 1, 7], "11": [0, 1, 7, 8], "12": [0, 1, 8, 9]}, "question_id": 74}
{"question": "Create a Python class `CodeExampleDirective` that extends the functionality of a Sphinx directive to include code examples in documentation. The directive should allow users to specify the programming language, the start and end markers within the source file to include, and the number of spaces to dedent from the beginning of each line. The directive should be registered in a Sphinx extension. The class should follow these specifications: 1. The class should be named `CodeExampleDirective` and inherit from `LiteralInclude`, a directive provided by Sphinx for including code from external files. 2. The class should override the `run` method to set default options for `language`, `start-after`, `end-before`, and `dedent`. These options should be customizable through directive options in the documentation source. 3. The `setup` function should be defined to register the `CodeExampleDirective` with Sphinx under the directive name `code-example`. 4. Include test cases in the form of docstrings that demonstrate how the directive would be used in a Sphinx documentation source file.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `language`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `MarkerType`."}, {"type": "variable", "instruction": "Variable `dedent`, type should be `int`."}, {"type": "variable", "instruction": "Variable `start_after` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `run`."}, {"type": "interface", "instruction": "Your code should define an interface named `CodeExampleInterface`."}, {"type": "combination", "instruction": "You should define an interface named `CodeExampleInterface` that includes these methods `set_language`, `set_markers`, `set_dedent`."}, {"type": "combination", "instruction": "The function `run` should return a `list` as its result."}], "instruction_dependence": {"4": [0, 2], "5": [0, 2], "8": [0, 7], "9": [0, 6]}, "question_id": 75}
{"question": "Design a changelog rendering system that generates a markdown changelog file for software releases. The system should be able to handle different formats of changelog entries by using templates. The changelog entries should be grouped by version and should include start and end delimiters for each version section to allow for easy parsing and manipulation. The system should consist of a `Renderer` struct that is responsible for writing the changelog data to a file. The `Renderer` should support the following features: 1. Customizable output file name, with a default of \"CHANGELOG.md\". 2. Optional grouping of changelog entries by components. 3. Customizable start and end delimiters for each version section, with default templates provided. 4. Ability to use a custom template file for rendering the changelog entries, with a default template provided if no custom file is specified. The `Renderer` struct should have a method `Write` that takes a `RenderContext` containing the version and changelog entries data, and writes the formatted changelog to the output file. Implement the `Renderer` struct with the following methods: - `NewRenderer(writers io.IOFactory) *Renderer`: Constructor for the `Renderer` struct. - `Write(data *RenderContext) error`: Writes the changelog data to the output file using the specified or default template. - `newTemplate() (*template.Template, error)`: Creates a new template based on the `TemplateFile` and `GroupComponents` settings. - `writeData(data *RenderContext, tpl *template.Template, writer sysio.WriteCloser) error`: Writes the changelog data to the writer using the provided template. Provide a `RenderContext` struct that contains the following fields: - `Version`: The version of the software release. - `Entries`: A slice of changelog entries for the release. Also, provide a simple default template and a grouped template as constants within the package.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should include a function named Write."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named RendererInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named changelog."}, {"type": "file", "instruction": "Your code should import the following libraries io, template, sysio."}, {"type": "combination", "instruction": "Your code should be organized in a package named changelog, which should contain these functions NewRenderer, Write, newTemplate, writeData."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 3, 10], "6": [0, 5, 10], "9": [0, 7, 10]}, "question_id": 76}
{"question": "Design a simple gRPC service that allows a client to send a string message to the server, and the server will respond with the same message but reversed. The service will be defined using Protocol Buffers (protobuf) and implemented in Go. The service definition in protobuf (not shown here) will have a service called `ReverseService` with a method `Reverse` that takes a `ReverseRequest` message containing a string field `message` and returns a `ReverseResponse` message containing a string field `reversed_message`. Implement the client-side code to connect to the `ReverseService` and send a message to be reversed. The client should print out the original message and the reversed message received from the server.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the defer keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should include a function named reverseMessage."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the strings package."}, {"type": "file", "instruction": "Your code should be organized in a package named reverser."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 8]}, "question_id": 77}
{"question": "Design a Java program that manages a database of suppliers for a procurement system. The system should be able to check if a supplier exists based on their name and retrieve their details. The supplier details include the supplier's name, address, and contact information. Your task is to create a `SupplierEntity` class that represents the supplier's details, an `ISupplierDao` interface that extends `CrudRepository` for database operations, and a `SupplierService` class that uses `ISupplierDao` to perform the operation of checking if a supplier exists by name. The `SupplierEntity` class should have the following fields: `String id` (the primary key), `String supplierName`, `String address`, `String contactNumber`. The `ISupplierDao` interface should have a method `getSupplierEntityByName` that takes a `String` supplierName and returns a `SupplierEntity` if found. The `SupplierService` class should have a method `checkSupplierExists` that takes a `String` supplierName and returns a boolean indicating whether the supplier exists. Provide test cases in a `SupplierServiceTest` class to verify the correctness of the `checkSupplierExists` method.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named supplierDetails."}, {"type": "function", "instruction": "Your code should include a function named checkSupplierExists."}, {"type": "file", "instruction": "Your code should import the following libraries org.springframework.data.repository.CrudRepository."}, {"type": "file", "instruction": "Your code should use the function save from the library CrudRepository."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.HashMap."}], "instruction_dependence": {"7": [0, 1, 6]}, "question_id": 78}
{"question": "I have a list:\n\n```python\nroll = [1, 2, 3]\n```\n\nFor converting each of the element into a string, can we directly do `roll = str(roll)` rather than iterating over it and calling `str()` on each element? Is this a correct way?\n\nPlease output \"yes\" or \"no\" in the first line without any extra comment. If no, please show the right code in the second line without any comment.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 function."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'result'."}, {"type": "variable", "instruction": "Variable 'result', should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'convert_to_string'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'StringConverter'."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6]}, "question_id": 79}
{"question": "Create a Java method named `getSpartanById` that retrieves a Spartan's information from a RESTful API by their ID and returns a `Map<String, Object>` containing the Spartan's details. The Spartan information includes fields such as `id`, `name`, `gender`, and `phone`. The method should perform the following: - Accept an integer parameter `spartanId` representing the ID of the Spartan to retrieve. - Send a GET request to the endpoint `/spartans/{id}` where `{id}` is the placeholder for the Spartan's ID. - Ensure the request accepts JSON as the response format. - Validate that the response status code is 200 (OK) and the content type is JSON. - Extract the Spartan's information from the response and return it as a `Map<String, Object>`. Provide a test case that verifies the correctness of the `getSpartanById` method by calling it with a known Spartan ID and asserting that the returned map contains the correct information.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "interface", "instruction": "Your code should define an interface named SpartanService."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6]}, "question_id": 80}
{"question": "Please design a Java method to configure the parameters of a network request. This method should be able to return the corresponding configuration object based on different request types (such as GET, POST, etc.). The configuration object should include basic information about the request, such as timeout duration, retry attempts, etc. Ensure that your code is completely standalone and includes all necessary import statements. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class RequestConfigurator {\n    public static Map<String, Integer> getRequestConfig(String requestType) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "variable", "instruction": "Your code should define a variable named requestConfig."}, {"type": "function", "instruction": "Your code should include a function named getRequestConfig."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named RequestConfigurator."}, {"type": "file", "instruction": "Your code should be organized in a package named network.config."}, {"type": "combination", "instruction": "You should initialize an object named config as an instance of the RequestConfigurator class using requestType for initialization."}, {"type": "combination", "instruction": "The function getRequestConfig should take requestType as a parameter."}, {"type": "combination", "instruction": "Your code should be organized in a package named network.config, which should contain these functions getRequestConfig."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 5], "8": [0, 1, 3], "9": [0, 1, 6]}, "question_id": 81}
{"question": "Write a Python function `create_urlpatterns` that generates a list of Django URL patterns for a given list of view functions. The function should take two arguments: a list of view function names (as strings) and a corresponding list of URL paths (also as strings). Each view function name should be associated with a URL path at the same index in their respective lists. The function should return a list of `path` objects, similar to the `urlpatterns` list in the given code snippet. Assume that the `path` function is imported from `django.urls` and that the view functions are imported from a module named `views`. Additionally, each URL pattern should be named using the view function name prefixed with 'url_'. For example, if the view function name is 'register', the URL name should be 'url_register'. Here is the function signature: ```python def create_urlpatterns(view_names, url_paths):     \"\"\"     Generates a list of Django URL patterns.      :param view_names: A list of strings representing the names of view functions.     :param url_paths: A list of strings representing the URL paths.     :return: A list of path objects representing the URL patterns.     \"\"\"     # Your code here ```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named url_patterns."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable url_patterns, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named create_urlpatterns."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries django.urls."}, {"type": "file", "instruction": "Your code should use the function path from the library django.urls."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "9": [0, 1, 8], "11": [0, 1, 10]}, "question_id": 82}
{"question": "Write a Python program that automates the process of downloading puzzle input data for the Advent of Code event. The Advent of Code is an annual December event where programmers solve daily coding puzzles. Each puzzle comes with a unique input data file that participants need to download from the event's website. Your program should meet the following requirements: 1. It should be able to download input data for a given year and day of the event. 2. The input data should be saved to a local file in a directory structure that follows the pattern `year/day/input.txt`. 3. If the input data file already exists, the program should not attempt to download it again. 4. The program should use a session cookie for authentication to download the input data. 5. The session cookie should be read from a JSON file named `.adventofcode.json` located in the current working directory. The JSON file should have a structure like `{\"session\": \"your-session-cookie\"}`. 6. The program should provide a command-line interface that allows the user to specify the year for which to download the input data. If the year is not specified, the current year should be used. 7. The program should attempt to download input data for all days (1 through 25) of the specified year.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should use the 'with' keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'session_cookie'."}, {"type": "function", "instruction": "Your code should include a function named 'download_input_data'."}, {"type": "interface", "instruction": "Your code should define an interface named 'DownloaderInterface'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'AdventOfCodeDownloader'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'advent_of_code'."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'requests', 'json', 'argparse']."}, {"type": "combination", "instruction": "You should initialize an object named 'downloader' as an instance of the 'AdventOfCodeDownloader' class using ['year', 'session_cookie'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'advent_of_code', which should contain these functions ['download_input_data', 'create_directory_structure', 'read_session_cookie']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "11": [0, 1, 2, 8], "12": [0, 1, 2, 9]}, "question_id": 83}
{"question": "Write a Go program that implements a simple HTTP/2 server which responds with a custom message to any incoming request. The server should listen on port 8080 and use TLS for secure communication. The server's response message should be 'Welcome to the secure HTTP/2 server!'. To set up the TLS configuration, you must generate a self-signed certificate and a private key using the following OpenSSL command: `openssl req -newkey rsa:2048 -nodes -keyout server.key -x509 -days 365 -out server.crt`. This command generates a 2048-bit RSA private key (`server.key`) and a self-signed X.509 certificate (`server.crt`) valid for 365 days. These files should be placed in the same directory as your Go program. Your program should handle any errors that occur during the setup of the HTTP/2 server, including issues with loading the TLS certificate and key, and it should log the error messages. Provide a clear docstring that describes the problem and how the program solves it. Include the necessary Go code to implement the solution, and ensure that all used packages are imported at the beginning of the code snippet.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'map'."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "function", "instruction": "Your code should include a function named 'startServer'."}, {"type": "function", "instruction": "The function names in your code should follow the 'camelCase' naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'ServerHandler'."}, {"type": "class", "instruction": "Your code should define a class named 'SecureServer'."}, {"type": "file", "instruction": "Your code should not use the following libraries 'net/http/pprof'."}, {"type": "combination", "instruction": "Your code should define a class named 'SecureServer' that implements the 'ServerHandler' interface."}], "instruction_dependence": {"5": [0, 1, 4], "9": [0, 1, 6, 7]}, "question_id": 84}
{"question": "Design a Go program that interacts with the Bing Image Search API to retrieve image URLs based on user queries. The program should provide two functionalities:\n\n1. `GetThumbnail`: Given a single search term (string), it should return the URL of the first thumbnail image related to the search term.\n2. `GetImage`: Given a list of search terms (slice of strings), it should return the URL of the first full-size image that matches the combined search terms.\n\nThe program should handle HTTP requests, parse JSON responses, and manage potential errors gracefully. It should also ensure that only one image result is retrieved for each query to minimize data usage.\n\nImplement the `Client` struct with the necessary fields and methods, including a private `bing` method that performs the actual API request. The `bing` method should construct the HTTP request, set the required headers, handle the response, and parse the JSON into a predefined `response` struct.\n\nThe `response` struct should be designed to parse the JSON response from the Bing Image Search API, focusing on extracting the `thumbnailUrl` and `contentUrl` fields.\n\nProvide test cases to verify the correctness of the `GetThumbnail` and `GetImage` methods.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure slice."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named GetThumbnail."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named ImageSearcher."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named bingimagesearch."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"6": [0, 1, 5, 10], "8": [0, 1, 7, 10]}, "question_id": 85}
{"question": "In the fictional world of Bureaucracy, bureaucrats are ranked by grades, which range from 1 (highest possible) to 150 (lowest possible). A `Bureaucrat` class has been created to manage the grades of its instances. The class should throw exceptions if an attempt is made to create a bureaucrat with an invalid grade or if an operation would result in an invalid grade. Your task is to implement the `Bureaucrat` class with the following specifications: - The `Bureaucrat` class should have a constructor that takes a `std::string` representing the name of the bureaucrat and an `int` representing the grade. The constructor should throw a `GradeTooHighException` if the grade is above 1, and a `GradeTooLowException` if the grade is below 150. - The class should have member functions `increaseGrade()` and `decreaseGrade()` to increase or decrease the bureaucrat's grade by 1. Each of these functions should throw the appropriate exception if the operation would result in an invalid grade. - The class should have a member function `std::string getName() const` that returns the name of the bureaucrat. - The class should have a member function `int getGrade() const` that returns the current grade of the bureaucrat. - Overload the insertion (`<<`) operator to print the bureaucrat's name and grade in the format: \"Bureaucrat [name], grade [grade].\"", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bureaucratCount."}, {"type": "variable", "instruction": "Variable bureaucratCount should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named printBureaucratInfo."}, {"type": "class", "instruction": "Your code should define a class named Bureaucrat."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named bureaucracy."}, {"type": "combination", "instruction": "In your code, the class Bureaucrat should have these properties name, grade."}, {"type": "combination", "instruction": "Your code should be organized in a package named bureaucracy, which should contain these functions printBureaucratInfo, increaseGrade, decreaseGrade."}], "instruction_dependence": {"6": [0, 1, 2, 5], "9": [0, 1, 2, 8], "11": [0, 1, 2, 8], "12": [0, 1, 2, 10]}, "question_id": 86}
{"question": "Design a C++ program that resolves and prints the style of a KML (Keyhole Markup Language) feature given its URL and ID. The program should fetch the KML file from the provided URL, parse it, and then resolve the style for the specified feature. The style should be printed in a human-readable format. The program should handle the following scenarios: - If the KML file cannot be fetched or parsed, the program should output an error message indicating the failure. - If the feature with the given ID does not exist in the KML file, the program should output an error message indicating that the feature was not found. - If the style is successfully resolved, the program should print the style in a pretty format.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named styleInfo."}, {"type": "variable", "instruction": "Variable styleInfo, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named resolveStyle."}, {"type": "interface", "instruction": "Your code should define an interface named StyleResolver."}, {"type": "class", "instruction": "Your code should define a class named KMLParser."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "The function resolveStyle should take url and featureId as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 12], "10": [0, 1, 2, 3, 9, 12], "11": [0, 1, 2, 3, 7, 12]}, "question_id": 87}
{"question": "Define the smarts of carboxyl group as 'C(O)=O', and that of phenyl ring as 'c1ccccc1'. Please write a complete Python function `solve(smiles)` that takes the SMILES of a molecule as input and uses the ReplaceSubstructs function to replace all carboxyl groups in the molecule with phenyl rings. The function should return the SMILES of the result (if there is no carboxyl group in the molecular structure, no changes should be made to the structure).", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named carboxyl_smarts."}, {"type": "variable", "instruction": "Variable carboxyl_smarts, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named MoleculeModifier."}, {"type": "file", "instruction": "Your code should be organized in a package named molecule_modifier."}, {"type": "file", "instruction": "Your code should import the following libraries rdkit."}, {"type": "file", "instruction": "Your code should use the function ReplaceSubstructs from the library rdkit."}, {"type": "combination", "instruction": "You should initialize an object named mol as an instance of the MoleculeModifier class using smiles for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named molecule_modifier, which should contain these classes MoleculeModifier."}], "instruction_dependence": {"7": [0, 1, 6], "11": [0, 1, 10], "12": [0, 1, 8], "13": [0, 1, 8, 9]}, "question_id": 88}
{"question": "Write a Python program that simulates a smart home system where switches can be treated as covers (e.g., window blinds, garage doors). The system should be able to handle the following functionalities:\n\n1. Initialize a smart home system with a given configuration.\n2. Add a switch to the system and configure it to act as a cover.\n3. Change the state of the switch and reflect the corresponding state in the cover.\n4. Provide services to toggle, open, and close the cover, as well as turn on and off the switch.\n5. Retrieve the current state of the switch and cover.\n\nThe program should use a class-based approach to represent the smart home system, switches, and covers. It should also include a testing framework to verify the correct behavior of the services and state changes.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should use the 'class' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'set'."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'home_system'."}, {"type": "variable", "instruction": "Variable 'home_system', should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named 'SmartHomeSystem'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'smart_home'."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'numpy']."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'smart_home', which should contain these classes ['SmartHomeSystem', 'Switch', 'Cover']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "11": [0, 1, 2, 3, 8, 9]}, "question_id": 89}
{"question": "Given a binary tree, write a program to find the maximum width of the tree. The width of a tree is the maximum number of nodes present in any level of the tree. For this problem, the width of a level is defined as the number of nodes between the leftmost and rightmost non-null nodes in the level, including both endpoints.\n\nFor example, consider the following binary tree:\n\n```\n        1\n       / \\\n      3   2\n     /     \\\n    5       9\n   /       /\n  6       7\n```\n\nThe maximum width of the tree is 4, as the last level has four nodes (6, null, null, 7).\n\nWrite a function `maxWidth(TreeNode head)` that takes the root node of a binary tree and returns the maximum width of the tree.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named max_width."}, {"type": "function", "instruction": "Your code should not use any functions from the collections module."}, {"type": "interface", "instruction": "Your code should define an interface named TreeInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TreeNode."}, {"type": "combination", "instruction": "You should initialize an object named root as an instance of the TreeNode class using head for initialization."}, {"type": "combination", "instruction": "Your code should define a class named TreeNode that implements the TreeInterface interface."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 11, 12], "9": [0, 1, 2, 8, 11, 12], "10": [0, 1, 2, 6, 8, 11, 12]}, "question_id": 90}
{"question": "Design a Python Django web application that provides various forms to interact with a competitive programming platform. The application should allow users to search for coding problems, analyze user profiles, calculate rating changes after contests, find the average gap between contest participations for a user, and compare two users' performances in a specific contest. Additionally, implement a form to generate a problem ladder for a user based on the number of problems they want to practice. The application should include the following forms: 1. `code_search_form`: To search for a specific problem using a user's name, contest code, and question code. 2. `analyse_profile_form`: To analyze a user's profile based on their username. 3. `rating_change_calculator`: To calculate the expected rating change for a user after a contest based on their old rating, rank, and contest code. 4. `average_gap_form`: To calculate the average gap (in days) between contest participations for a user. 5. `compare_contest_form`: To compare the performance of two users in a specific contest using their usernames and the contest code. 6. `ladder_form`: To generate a problem ladder for a user, which is a list of problems to practice, based on the user's name and the number of problems they want to include in the ladder. Each form should be designed using Django's forms framework and should include appropriate field types and choices where necessary.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define an enumeration named ContestType."}, {"type": "function", "instruction": "Your code should include a function named calculate_rating_change."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named UserProfile."}, {"type": "combination", "instruction": "The function calculate_rating_change should take old_rating, rank, and contest_code as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 5, 9], "8": [0, 1, 5, 9]}, "question_id": 91}
{"question": "Design a middleware for an HTTP server in Go that logs the time taken to execute each HTTP request. The middleware should log the start time, the end time, and the duration it took to process the request. The log should also include the HTTP method and the URL path of the request. The middleware should be designed as a function that takes an `http.HandlerFunc` and returns a new `http.HandlerFunc` that incorporates the logging functionality. Additionally, write a simple HTTP handler function that responds with 'Hello, World!' to demonstrate the use of the middleware. Finally, provide test cases that start an HTTP server, use the middleware, and verify that the logging is working as expected.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named requestTime."}, {"type": "variable", "instruction": "Variable requestTime should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named logRequest."}, {"type": "interface", "instruction": "Your code should define an interface named Logger."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Middleware."}], "instruction_dependence": {"7": [0, 1, 6], "10": [0, 1, 9]}, "question_id": 92}
{"question": "Design a web crawler using Scrapy to scrape English learning resources from the website 'kekenet.com'. The crawler should be able to navigate through different sections of the website, such as spoken English, listening, vocabulary, and reading. It should extract details like the title, type of resource (e.g., spoken English, listening), category, source URL, image URL, content, publication time, and media URL (if available). The crawler should also handle pagination and be able to scrape content from multiple pages of an article. The extracted data should be stored in a structured format using a custom Scrapy item.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the yield keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named page_count."}, {"type": "variable", "instruction": "Variable page_count, the initial value should be 1."}, {"type": "variable", "instruction": "Variable page_count should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named parse_article."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the ['os', 'sys']."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "9": [0, 1, 8]}, "question_id": 93}
{"question": "Write a Go program that demonstrates the use of `defer` statements in two different scenarios. The first scenario should show how deferred functions are executed in Last-In-First-Out (LIFO) order, and the second scenario should illustrate how arguments to deferred functions are evaluated when the `defer` statement is executed, not when the deferred function is actually invoked. The program should consist of two test functions: 1. `TestDeferEvaluation`: This test should demonstrate that the arguments to a deferred function are evaluated at the time the `defer` statement is executed. It should define a variable, defer a function call that prints the variable, then change the variable's value after the `defer` statement. The test should verify that the original value of the variable is printed, not the updated value. 2. `TestDeferLIFOOrder`: This test should demonstrate that deferred functions are called in LIFO order. It should defer multiple `fmt.Println` calls within a loop, each printing the loop's index variable. The test should verify that the numbers are printed in reverse order after the loop completes.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `map`."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `testVar`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `TestEnum`."}, {"type": "variable", "instruction": "Variable `testVar`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `testVar`, the initial value should be `10`."}, {"type": "function", "instruction": "Your code should include a function named `TestFunction`."}, {"type": "interface", "instruction": "Your code should define an interface named `TestInterface`."}, {"type": "file", "instruction": "Your code should import the following libraries `fmt`."}, {"type": "file", "instruction": "Your code should use the function `Println` from the library `fmt`."}, {"type": "combination", "instruction": "You should define an interface named `TestInterface` that includes these methods `TestMethod1, TestMethod2`."}, {"type": "combination", "instruction": "The function `TestFunction` should take `param1, param2` as parameters."}], "instruction_dependence": {"7": [0, 1, 5], "8": [0, 1, 5], "12": [0, 1, 11], "13": [0, 1, 10], "14": [0, 1, 9]}, "question_id": 94}
{"question": "Please design a Java program to manage book information. The specific requirements are as follows:\n\n- There needs to be a `Book` class that includes two attributes: the book name (`name`) and the author (`author`).\n- In the `Book` class, implement a method `setBookInfo` that takes two string parameters to set the book name and author.\n- Additionally, there should be a `BookManager` class containing a method `testSetBookInfo` to test whether the `setBookInfo` method in the `Book` class can correctly set the book name and author.\n- The `testSetBookInfo` method should print out the set book name and author to verify whether the setting was successful.\n- Ensure all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.System;\nclass Book {\n    private String name;\n    private String author;\n    public void setBookInfo(String name, String author) {\n    }\n    public String getName() {\n        return null;\n    }\n    public String getAuthor() {\n        return null;\n    }\n}\npublic class BookManager {\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the private keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named name."}, {"type": "variable", "instruction": "Variable name, type should be String."}, {"type": "variable", "instruction": "Variable name should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named BookInterface."}, {"type": "class", "instruction": "Your code should define a class named Book."}, {"type": "combination", "instruction": "In your code, the class Book should have these properties name, author."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "8": [0, 1, 7]}, "question_id": 95}
{"question": "Design a C++ program that simulates the heat diffusion in a 2D plate using the finite difference method. The program should implement a class `HeatDiffusionSimulator` that uses the `StructMechHeat2DDiffusiveVarSet` class to set up the simulation parameters and perform the heat diffusion calculations. The `HeatDiffusionSimulator` class should have the following functionalities: - Initialize the simulation with a given 2D grid size, initial temperature distribution, and boundary conditions. - Set the thermal conductivity, density, and specific heat capacity of the plate material. - Perform a time step in the simulation, updating the temperature distribution based on the heat equation. - Retrieve the current temperature distribution. The simulation should assume a constant time step and use the explicit finite difference method to update the temperature at each grid point. The boundary conditions should be constant temperatures at the edges of the plate.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `class` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `std::map`."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "file", "instruction": "Your code should be organized in a package named `heat_diffusion_simulator`."}, {"type": "file", "instruction": "Your code should import the following libraries `iostream`, `vector`."}, {"type": "file", "instruction": "Your code should use the function `push_back` from the library `vector`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `heat_diffusion_simulator`, which should contain these functions `initializeSimulation`, `setMaterialProperties`, `performTimeStep`, `getTemperatureDistribution`."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 4]}, "question_id": 96}
{"question": "Please write a Java method to generate and return a specific format string. This string is based on incoming ad unit information (including ad unit type, ad unit ID, and ad unit price) and some fixed parameters. This string is primarily used for network request parameters. Ensure your solution meets the following requirements:\n\n- The method name should be `generateAdRequestParams`.\n- The method takes three parameters: `adUnitType` (ad unit type, of type `String`), `adUnitID` (ad unit ID, of type `String`), and `adUnitPrice` (ad unit price, of type `int`).\n- The string format is as follows: `\"packageName=yourPackageName&deviceID=yourDeviceID&googleAID=yourGoogleAID&networkType=yourNetworkType&adType=adUnitType&adID=adUnitID&priceLevel=adUnitPrice\"`. Where `yourPackageName`, `yourDeviceID`, `yourGoogleAID`, and `yourNetworkType` are fixed string values, while `adUnitType`, `adUnitID`, and `adUnitPrice` are dynamically generated based on the method parameters.\n- Use the `&` symbol to connect each parameter.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.StringBuilder;\npublic class AdRequestGenerator {\n    public static String generateAdRequestParams(String adUnitType, String adUnitID, int adUnitPrice) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `packageName`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `AdRequestGenerator`."}, {"type": "combination", "instruction": "In your code, the class `AdRequestGenerator` should have these properties `generateAdRequestParams`."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 8], "7": [0, 1, 2, 6, 8]}, "question_id": 97}
{"question": "Design a class `Matrix` that represents a mathematical matrix and supports various matrix operations. The class should be able to handle matrix addition, subtraction, multiplication, scalar operations, and comparison. Additionally, implement error handling for operations that are not mathematically valid, such as adding matrices of different dimensions or multiplying incompatible matrices. The class should also support calculating the determinant and inverse of a matrix, although the actual implementation of these methods can be left unimplemented (returning a placeholder value). The `Matrix` class should have the following features: - Constructor that takes the number of rows and columns as arguments and initializes the matrix elements to zero. - Methods for matrix-matrix operations: addition (`operator+`), subtraction (`operator-`), and multiplication (`operator*`). - Methods for matrix-scalar operations: addition, subtraction, multiplication, and division. - In-place versions of the above operations (e.g., `operator+=`, `operator-=`). - A method to calculate the determinant of the matrix (`det`), which for now can return a placeholder value. - A method to calculate the inverse of the matrix (`inverse`), which for now can return a placeholder value. - Overloaded comparison operator (`operator==`) to check if two matrices are equal. - Error handling for invalid operations, with a default error handler that prints an error message and exits the program.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named matrix_data."}, {"type": "variable", "instruction": "Variable matrix_data, should not be a global variable."}, {"type": "variable", "instruction": "Variable matrix_data should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_determinant."}, {"type": "interface", "instruction": "Your code should define an interface named MatrixOperations."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Matrix."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named matrix_operations."}, {"type": "combination", "instruction": "You should define an interface named MatrixOperations that includes these methods add, subtract, multiply."}, {"type": "combination", "instruction": "The function calculate_determinant should take matrix as a parameter."}, {"type": "combination", "instruction": "Your code should be organized in a package named matrix_operations, which should contain these classes Matrix, MatrixOperations."}, {"type": "combination", "instruction": "Your code should be organized in a package named matrix_operations, which should contain these functions calculate_determinant, calculate_inverse."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "8": [0, 1, 7], "10": [0, 1, 9], "12": [0, 1, 7], "13": [0, 1, 6], "14": [0, 1, 9, 11], "15": [0, 1, 11]}, "question_id": 98}
{"question": "Design a Python module named `congress_utils` that provides utility functions for interacting with a fictional Congress API. The module should include the following functionalities:\n\n1. **CongressError**: A custom exception class for general Congress API errors. It should accept a message, an optional response object, and an optional URL where the error occurred.\n\n2. **NotFound**: A subclass of `CongressError` specifically for items not found in the API.\n\n3. **check_chamber**: A function that validates whether a given chamber is one of 'house', 'senate', or 'both'. It should raise a `TypeError` if the input is invalid.\n\n4. **get_congress**: A function that calculates the Congress number based on a given year. The first Congress started in 1789, and a new Congress starts every two years. It should raise a `CongressError` if the year is before 1789.\n\n5. **parse_date**: A function that parses a date string into a `datetime` object. It should use `dateutil.parser.parse` if available, otherwise fall back to `datetime.datetime.strptime`. It should handle both `datetime.datetime` and `datetime.date` objects as well.\n\n6. **u**: A function that ensures a given text is returned as a Unicode string, replacing CRLF with LF line endings.\n\n7. **get_offset**: A function that calculates the offset for pagination in the API. It assumes 20 items per page and should raise a `CongressError` if the page number is less than 1.\n\n8. **CURRENT_CONGRESS**: A constant that holds the current Congress number based on the current year.\n\nThe module should include appropriate error handling and input validation. Provide test cases to verify the correctness of each function.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the `class` keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `CURRENT_CONGRESS`."}, {"type": "variable", "instruction": "Variable `CURRENT_CONGRESS`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `check_chamber`."}, {"type": "file", "instruction": "Your code should be organized in a package named `congress_utils`."}, {"type": "file", "instruction": "Your code should not use the following libraries `pandas`."}, {"type": "combination", "instruction": "The function `get_congress` should take `year` as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 10], "9": [0, 1, 2, 6, 10]}, "question_id": 99}
{"question": "Design a RESTful API endpoint to manage extensions for a given endpoint in a container management platform. The endpoint should allow administrators to add new extensions to an endpoint by providing the extension type and URL. The extension type should be an integer, and the URL should be a valid URL. The endpoint ID is provided in the URL path. The API should perform the following actions: 1. Validate the endpoint ID from the URL path and ensure it corresponds to an existing endpoint. 2. Parse and validate the request body to ensure it contains a valid extension type and URL. 3. Check if the extension type is already associated with the endpoint to prevent duplicates. 4. Add the new extension to the endpoint and update the endpoint information. 5. Respond with the added extension information in JSON format or an appropriate error message and status code if any step fails. Use the given code snippet as a starting point to implement the `handlePostExtensions` function, which handles the POST request to add a new extension to an endpoint. Ensure that all necessary error handling and validations are in place.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "interface", "instruction": "Your code should define an interface named 'ExtensionInterface'."}, {"type": "class", "instruction": "Your code should define a class named 'EndpointManager'."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os', 'sys']."}, {"type": "combination", "instruction": "You should define an interface named 'ExtensionInterface' that includes these methods ['validate_extension', 'add_extension']."}, {"type": "combination", "instruction": "In your code, the class 'EndpointManager' should have these methods ['handle_post_extensions', 'validate_endpoint_id']."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 4], "9": [0, 1, 2, 3, 5]}, "question_id": 100}
{"question": "Design a class `PropertyManager` that manages a property value. The class should allow the property value to be set at construction and retrieved using a getter method. Additionally, the class should provide a method to concatenate a new string to the existing property value. The `PropertyManager` class should adhere to the following requirements: 1. The constructor should accept a single `String` argument that initializes the property value. 2. The class should provide a `getProperty` method that returns the current property value. 3. The class should provide an `appendToProperty` method that accepts a `String` argument and concatenates it to the current property value. 4. The class should override the `toString` method to return the current property value. Write a Java program that demonstrates the use of the `PropertyManager` class by creating an instance, appending a string to the property, and printing the property value.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should use the `final` keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `propertyValue`."}, {"type": "function", "instruction": "Your code should include a function named `appendToProperty`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `PropertyManager`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.property`."}, {"type": "combination", "instruction": "In your code, the class `PropertyManager` should have these properties `propertyValue`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.example.property`, which should contain these classes `PropertyManager`."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 5, 8], "12": [0, 1, 2, 3, 4, 5, 10], "13": [0, 1, 2, 3, 4, 5, 10, 11]}, "question_id": 101}
{"question": "Write a Python script that acts as a web crawler to extract all the hyperlinks from a specified webpage. The script should have the capability to perform a shallow (non-recursive) or deep (recursive) search based on user input. The crawler should handle exceptions gracefully and provide a summary of the links found, including the same-domain links, different-domain links, and any links that resulted in errors during the crawling process. The script should accept command-line arguments for the URL to crawl and a flag to indicate whether the search should be recursive. It should also generate a timestamped output file containing the list of found links categorized by their type. Use the given code snippet as a starting point to create the script, ensuring that all necessary packages are imported and that the script includes test cases to verify its correctness.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named extract_links."}, {"type": "class", "instruction": "Your code should define a class named WebCrawler."}, {"type": "file", "instruction": "Your code should be organized in a package named web_crawler."}, {"type": "combination", "instruction": "You should initialize an object named crawler as an instance of the WebCrawler class using url and recursive_flag for initialization."}, {"type": "combination", "instruction": "The function extract_links should return a dictionary as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named web_crawler, which should contain these classes WebCrawler."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 6, 11], "9": [0, 1, 2, 5, 11], "10": [0, 1, 2, 6, 7, 11]}, "question_id": 102}
{"question": "Design a taxi service simulation using the State Design Pattern in C++. The simulation should model the behavior of a taxi with respect to its duty status and passenger interactions. The taxi can be in one of three states: `OffDuty`, `OnDuty`, or `Arrived`. The state of the taxi changes based on the following events:\n\n- `hailed()`: A passenger hails the taxi. If the taxi is off-duty, it switches to on-duty and picks up the passenger. If the taxi is already on-duty or has arrived, it informs that it is already hailed.\n- `drive()`: The taxi drives the passenger to their destination. This is an internal transition that happens immediately after being hailed if the taxi was off-duty. If the taxi is on-duty, it drives to the destination. If the taxi has already arrived, it informs that they are at the destination.\n- `checkout()`: The passenger checks out and pays the bill. If the taxi is on-duty or has arrived, it processes the checkout and switches to off-duty. If the taxi is already off-duty, it indicates that there is no passenger to checkout.\n\nImplement the `Taxi` class and its associated `State` classes (`OffDutyLights`, `OnDutyLight`, and `Arrived`) to simulate this behavior. Each state should handle the `hailed()`, `drive()`, and `checkout()` events appropriately and transition the taxi to the correct state.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named taxiState."}, {"type": "function", "instruction": "Your code should include a function named handleHail."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Taxi."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named taxiService."}, {"type": "combination", "instruction": "Your code should be organized in a package named taxiService, which should contain these classes Taxi, OffDutyLights, OnDutyLight, Arrived."}], "instruction_dependence": {"7": [0, 1, 6], "9": [0, 1, 8], "11": [0, 1, 8, 10]}, "question_id": 103}
{"question": "Design a C++ program that provides functionality to represent and manipulate IPv4 and IPv6 addresses. The program should be able to convert host addresses into their compressed and uncompressed string representations. For IPv4, the compressed and uncompressed forms are the same and represented as four decimal octets separated by dots (e.g., '192.168.1.1'). For IPv6, the compressed form can use '::' to represent consecutive fields of zeros, while the uncompressed form should display all eight hexadecimal quartets separated by colons (e.g., '2001:0db8:85a3:0000:0000:8a2e:0370:7334'). The given code snippet provides the foundation for this functionality, including the `ipv4_as_compressed`, `ipv6_as_compressed`, and `ipv6_as_uncompressed` functions, as well as the singleton accessors for the `IpBits` class, which holds the IP version-specific details. Your task is to complete the implementation by providing the following: 1. The `IpBits` class definition, including the constructor and the `parts` method that splits the host address into its constituent parts. 2. The `Crunchy` class that represents large integers, which are necessary for handling IPv6 addresses, with at least the `one`, `zero`, and `parts` methods. 3. The `Rle` class that performs run-length encoding on an array of integers, which is used in the `ipv6_as_compressed` function to find sequences of zeros. 4. A main function that demonstrates the usage of the classes and functions to convert IP addresses to their string representations. Ensure that your program includes all necessary imports and that it compiles and runs correctly. Provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named ipv4_address."}, {"type": "variable", "instruction": "Variable ipv4_address, type should be std::string."}, {"type": "function", "instruction": "Your code should include a function named ipv4_as_compressed."}, {"type": "function", "instruction": "Your code should not use any functions from the std::regex library."}, {"type": "interface", "instruction": "Your code should define an interface named IPAddress."}, {"type": "class", "instruction": "Your code should define a class named IpBits."}, {"type": "file", "instruction": "Your code should be organized in a package named ip_utils."}, {"type": "combination", "instruction": "You should initialize an object named ipv6_address as an instance of the IpBits class using ipv6_host_address for initialization."}, {"type": "combination", "instruction": "Your code should define a class named Crunchy that implements the IPAddress interface."}, {"type": "combination", "instruction": "The function ipv6_as_compressed should return a std::string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named ip_utils, which should contain these classes IpBits, Crunchy, Rle."}, {"type": "global", "instruction": "Your function ipv6_as_uncompressed should not exceed 20 lines."}], "instruction_dependence": {"2": [0, 1, 12], "8": [0, 6, 12], "9": [0, 5, 6, 12], "10": [0, 3, 12], "11": [0, 6, 7, 12]}, "question_id": 104}
{"question": "Write a C++ program that implements a custom string formatting function similar to `sprintf`, but with dynamic memory allocation for the resulting string. The function, named `custom_asprintf`, should take a format string and a variable number of arguments, format them according to the format string, and allocate memory for the resulting string, which is then returned through a pointer-to-pointer argument. The function should return the number of characters in the resulting string (excluding the null terminator), or -1 if an error occurs. The caller is responsible for freeing the allocated memory using `free()`. The function should handle the basic format specifiers: `%s` for strings, `%d` for integers, and `%%` for a literal percent sign. You do not need to implement any length modifiers or flags.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should use the `new` keyword."}, {"type": "variable", "instruction": "Your code should define a variable named `result_length`."}, {"type": "variable", "instruction": "Variable `result_length`, should be a global variable."}, {"type": "variable", "instruction": "Variable `result_length` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `custom_asprintf`."}, {"type": "class", "instruction": "Your code should define a class named `StringFormatter`."}, {"type": "file", "instruction": "Your code should be organized in a package named `string_utils`."}, {"type": "combination", "instruction": "You should initialize an object named `formatter` as an instance of the `StringFormatter` class using `format_string` for initialization."}, {"type": "combination", "instruction": "The function `custom_asprintf` should take `format_string` and `args` as parameters."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "9": [0, 1, 2, 7], "10": [0, 1, 2, 6]}, "question_id": 105}
{"question": "Please write a Java program to implement a simple shopping cart function. In this shopping cart, users can add product names to the cart list, and they can also remove specified product names from the list. If the cart becomes empty, it should be set to null, indicating that the cart is empty. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\npublic class ShoppingCart {\n    private ArrayList<String> items;\n    public void addItem(String itemName) {\n    }\n    public void removeItem(String itemName) {\n    }\n    public boolean isEmpty() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cartStatus."}, {"type": "variable", "instruction": "Variable cartStatus should not be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named shopping."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 106}
{"question": "Please write a Java method that can query and return a specific database record. Suppose we have a database table `Students` that contains student information, such as student ID (`studentId`) and student name (`name`). Write a method `queryStudentNameById` that takes a student ID as a parameter and returns the corresponding student's name. If the given student ID does not exist in the database, return a string `\"Student information not found\"`. To simplify the problem, we will use a predefined `HashMap` to simulate database operations, where the key is the student ID and the value is the student name. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentQueryService {\n    public static String queryStudentNameById(String studentId) {\n    }\n    public static void check() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "variable", "instruction": "Your code should define a variable named `studentMap`."}, {"type": "variable", "instruction": "Variable `studentMap`, should be a global variable."}, {"type": "variable", "instruction": "Variable `studentMap`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `queryStudentNameById`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.studentquery`."}, {"type": "file", "instruction": "Your code should import the following libraries `java.util.HashMap, java.util.Map`."}, {"type": "combination", "instruction": "The function `queryStudentNameById` should return a `String` as its result."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "8": [0, 1, 5]}, "question_id": 107}
{"question": "Please write a C++ program to demonstrate how to use `Two ellipsis operators`. You need to write two test functions, one is `two_sum`, and the other is `multi_sum`. Another function `f` also needs to be written, which returns 1 when the argument is `two_sum`, and returns 2 when the argument is `multi_sum`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should use the `template` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `result`."}, {"type": "variable", "instruction": "The variable names in your code should follow the `snake_case` naming convention."}, {"type": "variable", "instruction": "Variable `result` should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `SumInterface`."}, {"type": "class", "instruction": "Your code should define a class named `Calculator`."}, {"type": "class", "instruction": "The class names in your code should follow the `PascalCase` naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `<iostream>, <vector>`."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 9]}, "question_id": 108}
{"question": "Implement a user authentication mechanism based on Basic Authentication. Create a simple Web application using the Python Flask framework with the following requirements:\n\n- There is a predefined user dictionary in the application to simulate user data storage.\n- Define a decorator `requires_auth` for authenticating HTTP requests. If the authentication is successful, it returns the result of the function being decorated. If the authentication fails, it returns an HTTP response with a 401 status code, indicating that Basic Authentication is required in the WWW-Authenticate field of the response header.\n- Define a `check_auth` function to verify that the username and password in the Basic Authentication of the request match the data in the predefined user dictionary.\n- Create a `'/'` route corresponding to a function that returns 'Hello, World!' This function uses the `requires_auth` decorator, meaning that Basic Authentication is required to access this route.\n\nThe finished application should be able to handle GET requests for the `'/'` route, return 'Hello, World!' for requests with correct Basic Authentication, and return a 401 status code and error message for requests with incorrect or no Basic Authentication.\nThe custom user dictionary is as follows:\nusers = {\n    \"username\": \"password\",\n}\nPlease write your code wrapped in a markdown ```python``` block.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named users."}, {"type": "interface", "instruction": "Your code should define an interface named AuthInterface."}, {"type": "class", "instruction": "Your code should define a class named AuthHandler."}, {"type": "file", "instruction": "Your code should be organized in a package named auth_package."}, {"type": "combination", "instruction": "In your code, the class AuthHandler should have these methods check_auth, requires_auth."}], "instruction_dependence": {"9": [0, 1, 7]}, "question_id": 109}
{"question": "Please write a Java program to implement a simple user class that includes a private string field `username` and provides a method `setUsername` to update the value of this field. Additionally, a `checkUsername` method needs to be written to verify whether the `setUsername` method is working correctly. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\npublic class User {\n    private String username;\n    public void setUsername(String name) {\n    }\n    public String getUsername() {\n        return null;\n    }\n    public static void checkUsername(List<String> names) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named username."}, {"type": "variable", "instruction": "Variable username, should be a global variable."}, {"type": "file", "instruction": "Your code should be organized in a package named userPackage."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.Arrays, java.util.List."}, {"type": "file", "instruction": "Your code should use the function checkUsername from the library java.util.List."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 6]}, "question_id": 110}
{"question": "Design a simple JSON parser that can parse a JSON string into a `JsonValue` structure as defined in the given code snippet. The parser should be able to handle JSON objects, arrays, strings, numbers (integers and floating-point), booleans, and null values. The parser should also be able to serialize a `JsonValue` back into a JSON string. The parser should be implemented as a class `JsonParser` with at least two public methods: `parse` and `serialize`. The `parse` method takes a `std::string` representing a JSON string and returns a `JsonValue`. The `serialize` method takes a `JsonValue` and returns a `std::string` representing the JSON string.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named `parse`."}, {"type": "interface", "instruction": "Your code should define an interface named `JsonValue`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `json_parser`."}, {"type": "file", "instruction": "Your code should import the following libraries `iostream`, `string`, `vector`, `map`."}, {"type": "combination", "instruction": "You should define an interface named `JsonValue` that includes these methods `getType`, `toString`."}, {"type": "combination", "instruction": "The function `parse` should take `jsonString` as a parameter."}], "instruction_dependence": {"7": [0, 1, 6], "10": [0, 1, 6], "11": [0, 1, 5]}, "question_id": 111}
{"question": "Design a system to manage the states of a country, ensuring that each state has a unique name and abbreviation (uf). The system should allow adding, updating, and removing states, as well as querying for a specific state by its ID, listing all states, and listing states with the number of cities they contain.\n\nThe `Estado` class should have the following attributes:\n- `id`: An integer representing the unique identifier of the state.\n- `nome`: A string representing the name of the state.\n- `uf`: A string representing the abbreviation of the state.\n\nThe `EstadoQtde` class should have the following attributes:\n- `estado`: An instance of `Estado`.\n- `qtdeCidades`: An integer representing the number of cities in the state.\n\nThe `EstadoService` class should provide the following functionalities:\n- `add(Estado estado)`: Adds a new state if it does not have a name or abbreviation that already exists.\n- `update(Estado estado)`: Updates an existing state if the new name or abbreviation does not already exist.\n- `remove(Estado estado)`: Removes a state.\n- `check(Estado estado, int idOld)`: Checks if the state's name or abbreviation already exists, excluding the state with the given `idOld`.\n- `getById(int id)`: Retrieves a state by its ID.\n- `getQtdeCidade(int idEstado)`: Retrieves the number of cities in a state.\n- `list()`: Lists all states.\n- `list(String valor, String tipo)`: Lists states based on a search criterion.\n- `listEstadoQtde()`: Lists states along with the number of cities they contain.\n\nImplement the `EstadoService` class with the given functionalities, ensuring data integrity and uniqueness of state names and abbreviations. Provide test cases to verify the correctness of the implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'HashMap'."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'stateCount'."}, {"type": "variable", "instruction": "Variable 'stateCount', should be a global variable."}, {"type": "variable", "instruction": "Variable 'stateCount', the initial value should be 0."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.estado.management'."}, {"type": "file", "instruction": "Your code should import the following libraries 'java.util.HashMap, java.util.List'."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 11], "8": [0, 1, 2, 6, 11]}, "question_id": 112}
{"question": "Design a system that manages user memberships and interactions within a group. The system should allow for the creation of users, members, and groups. Each member can have a messenger associated with them for communication purposes. Additionally, members can have availabilities and places associated with them. Groups can have a limited number of members and should track the number of current members and meetings. Implement the necessary classes and methods to support this functionality, ensuring that all data is properly encapsulated and that the system can handle the creation and modification of these entities. Write a Java program that uses the provided code snippet as a starting point to implement the following features: 1. Create a `User` with a unique email, phone number, and password. 2. Create a `Member` associated with a `User`, including a nickname and messenger. 3. Create a `Group` with a name, website, description, members limit, and a counter for members and meetings. 4. Ensure that the `Group` cannot have more members than the specified limit. 5. Allow for the creation and association of `Availability` and `Place` objects with a `Member`. 6. Implement methods to modify the details of a `User`, `Member`, and `Group`. 7. Include appropriate constructors, getters, setters, and builders for all classes. Provide test cases to demonstrate the creation of users, members, groups, and their interactions, as well as the enforcement of the group members limit.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure LinkedList."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named memberCount."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable memberCount should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named addMember."}, {"type": "interface", "instruction": "Your code should define an interface named MessagingService."}, {"type": "class", "instruction": "Your code should define a class named Group."}, {"type": "combination", "instruction": "Your code should define a class named Member that implements the MessagingService interface."}, {"type": "combination", "instruction": "In your code, the class User should have these properties email, phoneNumber, password."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 5, 13], "7": [0, 1, 5, 13], "11": [0, 1, 9, 10, 13], "12": [0, 1, 10, 13]}, "question_id": 113}
{"question": "International Morse Code defines a standard encoding method, mapping each letter to a string made up of a series of dots and dashes, for example: 'a' corresponds to \".-\" , 'b' corresponds to \"-...\" , 'c' corresponds to \"-.-.\" , and so on. For convenience, the Morse code table for all 26 English letters is as follows: [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-.\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]. You are given a string array words, each word can be written as a combination of Morse code corresponding to each letter. For instance, \"cab\" can be written as \"-.-..--...\" , which is the combination of \"-.-.\" + \".-\" + \"-...\" strings. We call such a connection process word translation. Now please write a complete Python function `morse(words: List[str]) -> int` to perform word translation for all words in words, and return the number of different word translations.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named morse_code_table."}, {"type": "variable", "instruction": "Variable morse_code_table, type should be list."}, {"type": "function", "instruction": "Your code should include a function named morse."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named MorseTranslator."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "In your code, the class MorseTranslator should have these methods translate_word, count_unique_translations."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "10": [0, 1, 2, 8]}, "question_id": 114}
{"question": "Design a smart home system that allows users to control the brightness of lights in their home. The system should include a `BrightnessProperty` that represents the brightness level of a light, which can range from 0 (off) to 100 (fully bright). The `BrightnessProperty` should be a specialized version of a more generic `IntegerProperty`, which represents an integer value with a specified minimum and maximum range. The `IntegerProperty` should have the following features: - A `Type` field to specify the type of property (e.g., 'Integer'). - A `Name` field to specify the name of the property (e.g., 'brightness'). - Methods to set and get the value of the property. - Methods to set and get the minimum and maximum values allowed for the property. - Optional: A method to set the unit of the property (e.g., percentage). The `BrightnessProperty` should inherit from `IntegerProperty` and should be initialized with the appropriate type, name, minimum value (0), and maximum value (100). Write the `IntegerProperty` class and the `BrightnessProperty` class in Go, and provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named 'SetUnit'."}, {"type": "class", "instruction": "Your code should define a class named 'IntegerProperty'."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "The function 'SetUnit' should take 'unit string' as parameters."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 8], "7": [0, 1, 2, 4, 8]}, "question_id": 115}
{"question": "Write a Python class named `AttributeManager` that manages attributes at both the instance level and the class level. The class should have the following features:\n\n1. A class attribute named `class_attr` initialized to the string `'class attribute'`.\n2. An instance method named `set_instance_attr` that takes an integer value and sets an instance attribute named `instance_attr` to that value.\n3. An instance method named `get_attributes` that returns a dictionary containing both the instance attribute `instance_attr` and the class attribute `class_attr`.\n\nThe `get_attributes` method should return the dictionary in the following format:\n```python\n{\n    'instance_attr': <current_value_of_instance_attr>,\n    'class_attr': <current_value_of_class_attr>\n}\n```\n\nIf the instance attribute `instance_attr` has not been set, the method should return `None` for its value in the dictionary.\n\nWrite a few test cases to demonstrate that the `AttributeManager` class works as expected.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `class_attr`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named `get_attributes`."}, {"type": "class", "instruction": "Your code should define a class named `AttributeManager`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7]}, "question_id": 116}
{"question": "Design a system that manages polling and idle timers for a Flux Monitor, which is a component in a blockchain network responsible for updating data feeds based on external price changes. The system should be able to handle periods of hibernation, during which polling is paused, and awaken from hibernation to resume operations. The system should also be able to reset timers based on the state of the current round of data aggregation. The `PollManager` should have the following functionalities: 1. Initialize with a configuration that specifies whether it starts in hibernation, the intervals for polling and idle timers, and whether these timers are enabled or disabled. 2. Provide methods to start and stop the polling and idle timers. 3. Reset the timers based on the state of the current round, which includes the timestamp when the round started. 4. Enter and exit hibernation mode, which affects the behavior of the timers. The `PollManager` interacts with a `PollTicker` and an `IdleTimer`, which are responsible for emitting ticks at specified intervals. The `PollTicker` should emit ticks at a regular interval unless paused or disabled. The `IdleTimer` should emit a tick only after a specified duration has passed since the last round started. Implement the `PollManager` with the given methods and any additional necessary components, such as `PollTicker` and `IdleTimer`. Ensure that the system behaves correctly according to the configuration and the current state.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named poll_interval."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable poll_interval, should not be a global variable."}, {"type": "variable", "instruction": "Variable poll_interval, the initial value should be 10."}, {"type": "variable", "instruction": "Variable poll_interval should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named start_polling."}, {"type": "class", "instruction": "Your code should define a class named PollManager."}, {"type": "combination", "instruction": "The function start_polling should return a boolean as its result."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "8": [0, 1, 5], "9": [0, 1, 5], "12": [0, 1, 10]}, "question_id": 117}
{"question": "Write a Go program that implements a simple logging utility using the `logrus` package with a custom formatter. The utility should be able to log messages at different levels (Info, Warning, Error) and include the ability to toggle color output in the logs. The custom formatter should be based on the `logrus` package's built-in formatter but with the following additional features: - A timestamp in the format `YYYY-MM-DD HH:MM:SS` - The log level should be displayed in uppercase - An option to disable color output in the logs. The program should include a function `SetupLogger` that initializes the logger with the custom formatter and a boolean parameter `noColors` that determines whether colors should be displayed in the log output. Additionally, provide three functions `LogInfo`, `LogWarning`, and `LogError` that log messages at their respective levels. Include test cases to verify that the logger correctly logs messages at different levels and respects the `noColors` setting.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named logger."}, {"type": "variable", "instruction": "Your code should define an enumeration named LogLevel."}, {"type": "variable", "instruction": "Variable noColors, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named CustomFormatter."}, {"type": "file", "instruction": "Your code should be organized in a package named logger."}, {"type": "combination", "instruction": "Your code should be organized in a package named logger, which should contain these classes CustomFormatter, Logger."}], "instruction_dependence": {"6": [0, 1, 4], "9": [0, 1, 7, 8]}, "question_id": 118}
{"question": "Please convert the following code to cpp, with the function signature `long do_algebra(std::vector<std::string> op, std::vector<long> operand)`. Note: 1. Implement only the target function and include the necessary headers, do not generate any other code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the std::pow, std::sqrt."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"2": [0, 1, 4]}, "question_id": 119}
{"question": "Design a class `IntegerAggregator` that can compute aggregates (such as MAX, MIN, COUNT, SUM, AVG) over a set of integer values. The class should support grouping of results by a group-by field and should be able to handle missing values appropriately. The `IntegerAggregator` class should provide the following functionalities: - Initialize the aggregator with information about the group-by field, the type of the group-by field, the aggregate field, and the aggregation operation. - Merge new tuples into the aggregate, grouping as indicated in the constructor. - Provide an iterator that can iterate over the group aggregate results. The aggregator should support the following aggregation operations: - MAX: Compute the maximum value. - MIN: Compute the minimum value. - COUNT: Count the number of values (including handling missing values). - SUM: Compute the sum of values. - AVG: Compute the average of values. The aggregator should be able to handle missing values by ignoring them for MAX, MIN, SUM, and AVG operations, but counting them for the COUNT operation. The `IntegerAggregator` should also provide a `getTupleDesc` method that returns the schema of the output tuples.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named group_by_field."}, {"type": "variable", "instruction": "Variable group_by_field, type should be str."}, {"type": "variable", "instruction": "Variable group_by_field should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named AggregateOperation."}, {"type": "class", "instruction": "Your code should define a class named IntegerAggregator."}, {"type": "combination", "instruction": "You should define an interface named AggregateOperation that includes these methods ['compute', 'handle_missing_values']."}, {"type": "combination", "instruction": "In your code, the class IntegerAggregator should have these methods ['initialize', 'merge', 'getTupleDesc', 'iterator']."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "8": [0, 6], "9": [0, 7]}, "question_id": 120}
{"question": "Please answer with Go language. The employee information is as follows. Based on the information below, count the number of employees older than 40 years. The function is CountEmployeesAgeLtV1(age int) int.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named CountEmployeesAgeLtV1."}, {"type": "interface", "instruction": "Your code should define an interface named EmployeeInterface."}, {"type": "class", "instruction": "Your code should define a class named EmployeeClass."}, {"type": "file", "instruction": "Your code should be organized in a package named employee."}, {"type": "file", "instruction": "Your code should not use the following libraries fmt."}, {"type": "combination", "instruction": "Your code should be organized in a package named employee, which should contain these classes EmployeeClass."}], "instruction_dependence": {"12": [0, 1, 9, 10]}, "question_id": 121}
{"question": "Create an Android application that simulates a simple dice roller. The application should have a user interface with a button to roll the dice and a TextView to display the result. When the user presses the button, the application should generate a random number between 1 and 6, inclusive, to simulate the roll of a six-sided die. The result should then be displayed in the TextView. The application should also handle configuration changes (such as screen rotation) without resetting the current dice value. To achieve this, the application should save the state of the TextView before the configuration change and restore it afterward.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Kotlin, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named diceValue."}, {"type": "function", "instruction": "Your code should include a function named rollDice."}, {"type": "class", "instruction": "Your code should define a class named DiceRollerActivity."}, {"type": "file", "instruction": "Your code should import the following libraries [androidx.appcompat.app.AppCompatActivity, android.os.Bundle, android.view.View, android.widget.Button, android.widget.TextView]."}, {"type": "file", "instruction": "Your code should use the function findViewById from the library android.view.View."}, {"type": "combination", "instruction": "In your code, the class DiceRollerActivity should have these methods [onCreate, onSaveInstanceState, onRestoreInstanceState]."}, {"type": "combination", "instruction": "The function rollDice should take [] as parameters."}, {"type": "combination", "instruction": "The function rollDice should return a Int as its result."}], "instruction_dependence": {"8": [0, 1, 7], "9": [0, 1, 6], "10": [0, 1, 5], "11": [0, 1, 5]}, "question_id": 122}
{"question": "You are given three integers `start`, `finish`, and `limit`. You are also given a string `s` starting from **0**, representing a **positive** integer. If a **positive** integer `x` ends with `s` (in other words, `s` is the **suffix** of `x`), and each digit in `x` is at most `limit`, then, we call `x` a **powerful** integer. Please return the **total number** of powerful integers in the interval `[start..finish]`. If a string `x` is a substring of `y`, from a certain index (including `0`) to the index `y.length - 1`, then we call `x` a suffix for `y`. For example, `25` is a suffix of `5125`, but it's not a suffix of `512`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `count`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named `numberOfPowerfulInt`."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "file", "instruction": "Your code should be organized in a package named `powerful_integers`."}, {"type": "combination", "instruction": "The function `numberOfPowerfulInt` should return a `long long` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `powerful_integers`, which should contain these classes `Solution`."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "11": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 9, 10]}, "question_id": 123}
{"question": "Design a Java class named `PacketPlayerPosition` that extends the abstract class `Packet`. This packet is used in a multiplayer game to update the server with the player's current position. The packet should include the player's `x`, `y`, and `z` coordinates as floating-point numbers and a boolean `onGround` to indicate whether the player is touching the ground or not. The `PacketPlayerPosition` class should adhere to the following guidelines: 1. It must be part of the `ethanjones.cubes.networking.packets` package. 2. It should be annotated with `@Direction(PacketDirection.TO_SERVER)` to indicate that this packet is sent from the client to the server. 3. It should be annotated with `@Priority(PacketPriority.HIGH)` to indicate that this packet has a high priority in the networking system. 4. The class should override the `write(DataOutputStream dataOutputStream)` method to serialize the player's position and `onGround` status. 5. The class should override the `read(DataInputStream dataInputStream)` method to deserialize the player's position and `onGround` status. 6. The class should override the `handlePacket()` method to update the server with the player's new position. 7. The class should override the `copy()` method to return a new instance of `PacketPlayerPosition`. 8. Include a constructor that accepts `float x`, `float y`, `float z`, and `boolean onGround` parameters to initialize the packet's data.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `playerPosition`."}, {"type": "variable", "instruction": "Variable `playerPosition`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `updatePosition`."}, {"type": "interface", "instruction": "Your code should define an interface named `PacketHandler`."}, {"type": "class", "instruction": "Your code should define a class named `PacketPlayerPosition`."}, {"type": "combination", "instruction": "You should initialize an object named `positionPacket` as an instance of the `PacketPlayerPosition` class using `x`, `y`, `z`, and `onGround` for initialization."}, {"type": "combination", "instruction": "You should define an interface named `PacketHandler` that includes these methods `handlePacket`, `write`, `read`, and `copy`."}, {"type": "combination", "instruction": "The function `updatePosition` should return a `boolean` as its result."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 7], "9": [0, 1, 6], "10": [0, 1, 5]}, "question_id": 124}
{"question": "Write a Java program that reverses the words in a given sentence without altering their positions and without using any built-in reverse functions. The program should take a string input representing the sentence and output the sentence with each word reversed. For example: - If the input is \"Hello World\", the output should be \"olleH dlroW\". - If the input is \"Java Programming\", the output should be \"avaJ gnimmargorP\". The program should handle multiple spaces between words and should maintain them in the output.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named reversedSentence."}, {"type": "variable", "instruction": "Variable reversedSentence, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named reverseWords."}, {"type": "function", "instruction": "Your code should not use any functions from the StringBuffer, StringBuilder, Collections."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.*."}, {"type": "file", "instruction": "Your code should use the function split from the library java.util.String."}, {"type": "combination", "instruction": "The function reverseWords should take sentence as parameters."}, {"type": "combination", "instruction": "The function reverseWords should return a String as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"5": [0, 1, 4, 12], "9": [0, 1, 8, 12], "10": [0, 1, 6, 12], "11": [0, 1, 6, 12]}, "question_id": 125}
{"question": "Design a RESTful API service that provides a search functionality for images based on tags. The service should maintain a priority queue of images for each tag, where the priority is determined by the probability score of the tag in the image. The service should use the Clarifai API to analyze images and extract tags with their corresponding probabilities. The service should consist of the following components: 1. An initialization process that reads a list of image URLs from a file, sends them to the Clarifai API for analysis, and stores the results in a map where each tag is associated with a priority queue of images sorted by probability score. 2. A RESTful search endpoint that takes a search query consisting of one or more tags and returns a JSON object containing a list of image URLs that match the search tags. The list should be sorted by the highest probability score of the matching tags. 3. The priority queue should only store the top 10 images for each tag to limit memory usage. 4. Implement CORS to allow cross-origin requests to the search endpoint. 5. Include error handling for file reading, HTTP requests, and JSON operations. 6. The service should listen on port 8000.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named image_queue."}, {"type": "variable", "instruction": "Variable image_queue, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named ImageService."}, {"type": "file", "instruction": "Your code should be organized in a package named image_search_service."}, {"type": "combination", "instruction": "You should initialize an object named image_service as an instance of the ImageService class using image_urls for initialization."}, {"type": "combination", "instruction": "In your code, the class ImageService should have these properties image_queue, tag_map, and clarifai_client."}, {"type": "combination", "instruction": "Your code should be organized in a package named image_search_service, which should contain these classes ImageService, ImageQueue, and TagMap."}], "instruction_dependence": {"4": [0, 3], "7": [0, 5], "8": [0, 5], "9": [0, 5, 6]}, "question_id": 126}
{"question": "Design a Java class `TicTacToe` that represents the game board of a Tic Tac Toe game and provides methods to determine the state of the game. The game board is a 3x3 grid where each cell can be either \"X\", \"O\", or an empty string \"\" representing an unoccupied cell. The `TicTacToe` class should provide the following functionalities: 1. A constructor that accepts a two-dimensional array of `String` representing the initial state of the game board. 2. A default constructor that initializes an empty game board. 3. A method `getRow(Integer value)` that returns the row at the specified index as an array of `String`. 4. A method `getColumn(Integer value)` that returns the column at the specified index as an array of `String`. 5. A method `isRowHomogeneous(Integer rowIndex)` that checks if all cells in a specified row contain the same non-empty value. 6. A method `isColumnHomogeneous(Integer columnIndex)` that checks if all cells in a specified column contain the same non-empty value. 7. A method `isDiagonalHomogeneous()` that checks if either of the two diagonals contain the same non-empty value. 8. A method `getWinner()` that returns \"X\" or \"O\" if there is a winner, or \"no winner\" if the game is a draw or still in progress. 9. A method `getBoard()` that returns the current state of the game board.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named boardState."}, {"type": "variable", "instruction": "Variable boardState, should be a global variable."}, {"type": "variable", "instruction": "Variable boardState, the initial value should be null."}, {"type": "variable", "instruction": "Variable boardState should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named GameBoard."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 9], "5": [0, 3, 9], "6": [0, 3, 9], "8": [0, 7, 9]}, "question_id": 127}
{"question": "Design a system that automates the creation of project templates based on existing project types in a project management application. Each project type has associated properties and work orders that need to be included in the project template. The system should provide a function to add a project template given a project type ID and ensure that all related properties and work orders are correctly attached to the new template. Write a Go function `addProjectTemplate` that takes a context, a client to the database, and a project type ID as arguments. The function should perform the following actions: 1. Query the project type by ID, including its properties and work orders. 2. Create a new project template with the same name and description as the project type. 3. For each property associated with the project type, create a corresponding template property type and link it to the new project template. 4. For each work order associated with the project type, create a corresponding work order definition and link it to the new project template. 5. Return the newly created project template. The function should handle any errors that occur during the process and return a detailed error message. Additionally, implement an Ent hook `ProjectAddTemplateHook` that automatically invokes `addProjectTemplate` when a new project is created, ensuring that the project is linked to a newly created template based on its type.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named projectTemplate."}, {"type": "variable", "instruction": "Variable projectTemplate, should be a global variable."}, {"type": "variable", "instruction": "Variable projectTemplate, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named addProjectTemplate."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named ProjectTemplateInterface."}, {"type": "class", "instruction": "Your code should define a class named ProjectTemplate."}, {"type": "file", "instruction": "Your code should be organized in a package named projectmanagement."}, {"type": "file", "instruction": "Your code should import the following libraries [\"context\", \"database/sql\", \"errors\"]."}, {"type": "combination", "instruction": "You should define an interface named ProjectTemplateInterface that includes these methods [\"AddTemplate\", \"GetTemplate\"]."}, {"type": "combination", "instruction": "Your code should be organized in a package named projectmanagement, which should contain these functions [\"addProjectTemplate\", \"ProjectAddTemplateHook\"]."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "5": [0, 4], "10": [0, 6], "11": [0, 8]}, "question_id": 128}
{"question": "Write a Go program that serves a simple web page indicating whether the server is running in a development environment or in production. The program should use the Google App Engine's `appengine` package to determine the environment. The web server should respond to all requests to the root path (`/`) with a message that states whether the server is running in development mode or not. The message should be in the format of 'Running in development mode: [true/false]'. Additionally, the server should handle a special endpoint `/check` that returns a JSON response with a boolean field `isDev` indicating the same information. Here are the requirements for your Go program: 1. Use the `net/http` package to create an HTTP server. 2. Use the `appengine` package to check if the server is running in development mode. 3. The root endpoint `/` should return a plain text response. 4. The `/check` endpoint should return a JSON response with the format `{'isDev': true}` or `{'isDev': false}`. 5. Include error handling for the JSON encoding process. 6. Write test cases to verify that both endpoints return the correct responses.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'map'."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'envStatus'."}, {"type": "variable", "instruction": "Variable 'envStatus' should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'checkEnvironment'."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries 'net/http', 'encoding/json', 'google.golang.org/appengine'."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 10], "8": [0, 1, 2, 7, 10]}, "question_id": 129}
{"question": "Write a function that removes duplicates from multiple texts using a simple MD5 method. The function name should be deduplicate_texts_md5. The function will take in a list containing multiple texts and return a list that has had duplicates removed.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named text_hash."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable text_hash should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named TextProcessor."}, {"type": "combination", "instruction": "You should define an interface named TextProcessor that includes these methods deduplicate_texts_md5."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7]}, "question_id": 130}
{"question": "Design a Hotel Reservation System that allows users to create an account, view their reservations, find and reserve a room, and access an admin menu for additional functionalities. The system should validate user inputs such as email addresses and dates, and provide feedback for invalid inputs or unavailable rooms. Implement the main menu with options to navigate through these functionalities.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user_data."}, {"type": "variable", "instruction": "Variable user_data should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named ReservationInterface."}, {"type": "class", "instruction": "Your code should define a class named HotelReservation."}, {"type": "file", "instruction": "Your code should import the following libraries ['datetime', 're']."}, {"type": "file", "instruction": "Your code should use the function match from the library re."}, {"type": "combination", "instruction": "You should define an interface named ReservationInterface that includes these methods ['create_reservation', 'view_reservation', 'cancel_reservation']."}, {"type": "combination", "instruction": "In your code, the class HotelReservation should have these properties ['user_id', 'reservation_id', 'room_number']."}, {"type": "combination", "instruction": "In your code, the class HotelReservation should have these methods ['create_account', 'find_room', 'reserve_room']."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 13], "9": [0, 1, 2, 8, 13], "10": [0, 1, 2, 6, 13], "11": [0, 1, 2, 7, 13], "12": [0, 1, 2, 7, 13]}, "question_id": 131}
{"question": "Write a Python function named `generate_trading_signals` that analyzes stock price changes and generates trading signals based on a given threshold. The function should take a Pandas DataFrame containing stock price percentage changes as input and add a new column to the DataFrame with the trading signals. The trading signals are determined as follows: If the percentage change is greater than the threshold, the signal is `1` (indicating a 'buy' signal). If the percentage change is less than the negative threshold, the signal is `-1` (indicating a 'sell' signal). If the percentage change is within the threshold bounds, the signal is `0` (indicating a 'hold' signal). The function should also take an optional parameter `threshold` that sets the percentage change required to trigger a buy or sell signal. The default value of the threshold should be `0.05` (5%). The DataFrame is expected to have columns representing different stocks with their respective percentage changes.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use data structure Pandas DataFrame."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the ['apply', 'iterrows']."}, {"type": "interface", "instruction": "Your code should define an interface named TradingSignalInterface."}, {"type": "class", "instruction": "Your code should define a class named TradingSignalGenerator."}, {"type": "file", "instruction": "Your code should be organized in a package named trading_signals."}, {"type": "combination", "instruction": "You should initialize an object named signal_generator as an instance of the TradingSignalGenerator class using ['threshold'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named trading_signals, which should contain these classes ['TradingSignalGenerator', 'TradingSignalInterface']."}], "instruction_dependence": {"9": [0, 1, 7], "10": [0, 1, 7, 8]}, "question_id": 132}
{"question": "Energy-Efficient Data Transfer Scheduler\n\nIn a mobile grid computing environment, devices are tasked with processing jobs that require data transfer. The goal is to maximize the number of jobs that can be completed without depleting the device's battery below a certain threshold. Each job has an input and output data size, and transferring this data consumes energy. The energy consumption for transferring data is specific to each device.\n\nWrite a Java class `EnergyEfficientDataScheduler` that schedules jobs for data transfer based on the available energy of the device and a specified maximum battery usage limit for data transfers. The scheduler should aim to transfer as much data as possible without exceeding the energy limit.\n\nThe class should implement the following functionalities:\n- Initialize the scheduler with a maximum battery usage limit for data transfers (as a percentage of the total battery).\n- Evaluate a given `DataAssignment` object, which contains a list of jobs assigned to a device and the device itself.\n- Calculate the total energy required to transfer the input and output data for each job.\n- Determine the number of jobs that can be completely transferred without exceeding the energy limit.\n- Calculate the total amount of data (in megabytes) that can be transferred within the energy limit.\n- Return the number of jobs that cannot be transferred due to energy constraints.\n\nThe `DataAssignment` class should have methods to set and get the following:\n- The total energy wasted in data transfers.\n- The total amount of affordable data transferred.\n- The number of jobs that can be completely transferred.\n\nAssume the existence of a `Device` class with methods to get the total battery capacity in joules, the last reported state of charge (SOC), and the energy waste in transferring data for a given size.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the final keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named maxBatteryUsage."}, {"type": "variable", "instruction": "Variable maxBatteryUsage, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named EnergyCalculator."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 9], "8": [0, 1, 2, 3, 7, 9]}, "question_id": 133}
{"question": "You are tasked with creating a system to update training records for a flight school. Each record contains various fields that need to be updated based on the type of training session conducted. The given code snippet provides functions to update different types of records based on the chapter (ch) of the training manual. Write a Python class `TrainingRecord` that represents a training record with the following attributes: `student`, `group`, `date`, `instructor1`, `instructor2`, `instructor3`, `exercise`, `time`, `grade`, `examiner`, `type`, `time_hours`, `time_mins`, `instrumental_time_hours`, `instrumental_time_mins`, `quantity_approach`, `quantity_landing`, `extra_time_hours`, `extra_time_mins`, `captain_hours`, `captain_mins`, `captain_route_hours`, `captain_route_mins`, `captain_night_hours`, `captain_night_mins`, `times_of_day`, `flight_permit`, `meteo_height`, `meteo_vis`, `meteo_wind`, `characteristic`, `remarks`, and `deletion_mark`. Additionally, implement a method `update_record` within the `TrainingRecord` class that takes a `request` object and a `chapter` number as parameters. The `request` object simulates an HTTP request and has an attribute `POST` which is a dictionary containing the new values for the record's attributes. The `chapter` number determines which fields need to be updated. Use the provided `change_funcs` dictionary to map the chapter number to the corresponding update function. The `update_record` method should call the appropriate update function from the `change_funcs` dictionary to update the record's attributes based on the chapter number.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "class", "instruction": "Your code should define a class named TrainingRecord."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'pandas']."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 8]}, "question_id": 134}
{"question": "Write a C++ program that finds the first and last occurrence of a target element in a sorted array. The program should implement a function `findOccurrences` that takes a sorted array of integers, the size of the array, and the target integer to find. The function should return a pair of integers representing the indices of the first and last occurrence of the target element. If the target is not found, both indices should be -1. The program should also demonstrate the use of the `findOccurrences` function by providing a test case with a sorted array and a target element, and then printing the results.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named `targetIndex`."}, {"type": "variable", "instruction": "Variable `targetIndex`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `arraySize`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `findOccurrences`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `ArraySearcher`."}, {"type": "file", "instruction": "Your code should be organized in a package named `arrayUtils`."}, {"type": "file", "instruction": "Your code should import the following libraries `iostream`, `vector`."}, {"type": "file", "instruction": "Your code should use the function `binary_search` from the library `algorithm`."}, {"type": "combination", "instruction": "In your code, the class `ArraySearcher` should have these methods `findFirstOccurrence`, `findLastOccurrence`."}, {"type": "combination", "instruction": "The function `findOccurrences` should return a `pair<int, int>` as its result."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "6": [0, 1, 5], "10": [0, 1, 9], "11": [0, 1, 7], "12": [0, 1, 5]}, "question_id": 135}
{"question": "Create a Go program that defines a `Colorizer` struct which implements the `Colorer` interface. The `Colorizer` struct should have a `Color` field that determines the color in which the text will be printed. The program should include a method `ColorizeText` that takes a string and returns the string wrapped in the specified color escape codes, using the `ColorString` function provided. The program should handle the case where the operating system does not support colorization (e.g., Windows), in which case it should return the original string without any color codes. Additionally, write a `main` function that demonstrates the usage of the `Colorizer` struct by colorizing a few strings with different colors and printing them to the console. Include test cases to verify that the colorization works as expected on supported systems and that it gracefully degrades on unsupported systems.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "variable", "instruction": "Your code should define a variable named colorizer."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color."}, {"type": "variable", "instruction": "Variable color should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named Colorer."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Colorizer."}, {"type": "combination", "instruction": "You should initialize an object named colorizerInstance as an instance of the Colorizer class using color for initialization."}], "instruction_dependence": {"5": [0, 1, 3], "7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 136}
{"question": "The number of nurses required in a 24h cycle at a certain hospital is as follows:\n- 2:00~6:00 10 people\n- 6:00~10:00 15 people\n- 10:00~14:00 25 people\n- 14:00~18:00 20 people\n- 18:00~22:00 18 people\n- 22:00~2:00 12 people.\nThe nurses start their shifts in 6 different batches at 2:00, 6:00, 10:00, 14:00, 18:00, 22:00 and they work continuously for 8 hours.\nTry to determine the minimum number of nurses that the hospital should employ, in order to meet its shift requirements.\n\nDefine a Python function named solve() to solve this problem and return the result.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named nurse_count."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable nurse_count, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named NurseScheduler."}, {"type": "file", "instruction": "Your code should be organized in a package named hospital_scheduling."}, {"type": "combination", "instruction": "You should initialize an object named scheduler as an instance of the NurseScheduler class using shift_requirements for initialization."}, {"type": "combination", "instruction": "In your code, the class NurseScheduler should have these methods calculate_min_nurses and get_shift_requirements."}, {"type": "combination", "instruction": "Your code should be organized in a package named hospital_scheduling, which should contain these functions solve and validate_input."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4], "9": [0, 7], "10": [0, 7], "11": [0, 8]}, "question_id": 137}
{"question": "Implement a Go package named `repochecker` that provides functionality to check the cloning status of a list of repositories. The package should include a `Client` struct with a method `WaitForReposToBeCloned` that waits for all repositories in the provided list to be cloned. The method should retry the check every 100 milliseconds and should time out after 30 seconds if not all repositories are cloned by then. The `Client` struct should have a method `GraphQL` that simulates sending a GraphQL query to check the cloning status of repositories. For the purpose of this exercise, the `GraphQL` method should be mocked to return a predefined response that indicates which repositories are cloned. The `WaitForReposToBeCloned` method should return an error if the timeout is reached or if there is an error in sending the GraphQL query. If all repositories are cloned before the timeout, the method should return `nil`. Provide a test case to verify the correctness of the `WaitForReposToBeCloned` method.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `timeoutDuration`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `RepoStatus`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `timeoutDuration`, should be a global variable."}, {"type": "file", "instruction": "Your code should import the following libraries `time`, `errors`, `sync`."}, {"type": "file", "instruction": "Your code should use the function `Sleep` from the library `time`."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 4, 10], "7": [0, 1, 4, 10], "9": [0, 1, 8, 10]}, "question_id": 138}
{"question": "Design a simple banking system that allows the creation of bank accounts for clients. Each client can have a savings account and a checking account. The savings account should accrue interest over time, while the checking account does not. Implement the following functionalities:\n\n1. Create a new client with a unique CPF and name.\n2. Open a savings account and a checking account for a client.\n3. Deposit money into either account.\n4. Withdraw money from either account, with the constraint that the checking account cannot be overdrawn.\n5. Calculate interest for the savings account based on a fixed annual interest rate.\n6. Transfer money between a client's own accounts.\n\nThe system should prevent the creation of accounts with negative balances and should handle invalid operations gracefully.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "variable", "instruction": "Your code should define a variable named annual_interest_rate."}, {"type": "variable", "instruction": "Variable annual_interest_rate, type should be float."}, {"type": "variable", "instruction": "Variable annual_interest_rate, the initial value should be 0.05."}, {"type": "interface", "instruction": "Your code should define an interface named AccountInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Client."}, {"type": "file", "instruction": "Your code should be organized in a package named banking_system."}, {"type": "combination", "instruction": "Your code should be organized in a package named banking_system, which should contain these classes Client, SavingsAccount, CheckingAccount."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4], "6": [0, 1, 2, 3, 4], "8": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 9, 10]}, "question_id": 139}
{"question": "Design a Python class `Trainer` that facilitates the training of an object detection model using TensorFlow's Object Detection API. The class should allow users to specify the model type, model directory, and optionally a pre-trained model checkpoint. It should also enable users to add training and evaluation samples with bounding box annotations and class labels. The class should handle the creation of TFRecord files for training and evaluation, the preparation of the model configuration, and the initiation of the training process. After training, the class should be able to export the trained model for inference. The `Trainer` class should have the following functionalities: - Initialize with model name, directory, type, and checkpoint. - Add training and evaluation samples with bounding box annotations. - Prepare the model directory, label map, and configuration files. - Write TFRecord files for training and evaluation samples. - Start the training process and handle interruptions. - Export the trained model for inference. The class should raise a custom exception `ModelDirectoryExists` if the model directory already exists to prevent overwriting.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the `class` keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `model_directory`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `ModelType`."}, {"type": "variable", "instruction": "Variable `model_directory`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `model_directory`, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named `Trainer`."}, {"type": "combination", "instruction": "You should initialize an object named `trainer` as an instance of the `Trainer` class using `model_name`, `model_directory`, `model_type`, and `checkpoint` for initialization."}, {"type": "combination", "instruction": "In your code, the class `Trainer` should have these properties `model_name`, `model_directory`, `model_type`, and `checkpoint`."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "10": [0, 1, 2, 9], "11": [0, 1, 2, 9]}, "question_id": 140}
{"question": "Please write a Java program to calculate the parking time. Suppose you have a parking lot management system that needs to calculate the parking duration based on the vehicle's arrival and departure times. You need to implement a method that accepts two parameters: the vehicle's arrival time and departure time, both of which are of type `java.util.Date`. Your task is to calculate and return the vehicle's parking duration in hours, ignoring time below minutes. If the departure time is earlier than the arrival time, return -1 to indicate an error. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Date;\npublic class ParkingDurationCalculator {\n    public static int calculateParkingDuration(Date arrival, Date departure) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named duration."}, {"type": "variable", "instruction": "Variable duration, should not be a global variable."}, {"type": "variable", "instruction": "Variable duration, the initial value should be 0."}, {"type": "interface", "instruction": "Your code should define an interface named TimeCalculator."}, {"type": "class", "instruction": "Your code should define a class named ParkingDurationCalculator."}, {"type": "combination", "instruction": "Your code should define a class named ParkingDurationCalculator that implements the TimeCalculator interface."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 8, 9]}, "question_id": 141}
{"question": "Design a RESTful API endpoint in Go that allows users to retrieve the current server time in a specified timezone. The endpoint should accept a timezone as a parameter and return the current time in that timezone in a JSON format. If the timezone is not provided or is invalid, the server should return an error message. The endpoint should be `/api/time` and it should accept a `GET` request with a query parameter `timezone`. The response should be a JSON object with a `time` field containing the formatted current time. Use the `time` package to handle time-related operations and the `net/http` package to create the HTTP server.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named timezone."}, {"type": "variable", "instruction": "Variable timezone, should be a global variable."}, {"type": "variable", "instruction": "Variable timezone, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named getCurrentTime."}, {"type": "function", "instruction": "Your code should not use any functions from the disallowed_function_list."}, {"type": "class", "instruction": "Your code should define a class named TimeHandler."}, {"type": "file", "instruction": "Your code should be organized in a package named timeapi."}, {"type": "combination", "instruction": "The function getCurrentTime should take timezone as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named timeapi, which should contain these functions getCurrentTime."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "8": [0, 4], "9": [0, 7]}, "question_id": 142}
{"question": "Please use Python to calculate the definite integral of sin(x^2) from negative infinity to infinity. Write a function named f, which returns a value of type float.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the return keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Your code should define an enumeration named IntegralType."}, {"type": "variable", "instruction": "Variable result, the initial value should be 0.0."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named f."}, {"type": "combination", "instruction": "The function f should return a float as its result."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "10": [0, 1, 2, 9]}, "question_id": 143}
{"question": "Design a Python class called `TestRegistry` that manages the registration and retrieval of test classes. Each test class should inherit from a base class `Test` and can have optional attributes and methods. The `TestRegistry` should provide the following functionalities:\n\n1. Register a new test class with a unique name.\n2. Prevent the registration of a class that does not inherit from `Test`.\n3. Prevent the registration of a class with a name that has already been registered.\n4. Retrieve a registered test class by its name.\n5. List all registered test class names.\n\nThe `Test` base class should have a method `name()` that returns the name of the class and a class method `description()` that returns a string description of the test class. If the description is not provided, it should return `None`.\n\nImplement the `TestRegistry` and `Test` classes following the above requirements, and provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "function", "instruction": "Your code should include a function named `description`."}, {"type": "interface", "instruction": "Your code should define an interface named `Test`."}, {"type": "class", "instruction": "Your code should define a class named `TestRegistry`."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `test_package`."}, {"type": "combination", "instruction": "Your code should define a class named `TestRegistry` that implements the `Test` interface."}, {"type": "combination", "instruction": "The function `description` should return a string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `test_package`, which should contain these functions `name`, `description`."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 4, 5], "9": [0, 1, 3], "10": [0, 1, 7]}, "question_id": 144}
{"question": "Please determine the number of new books added to an online library in a specific time period. Each book in the library has an entry date, and you need to determine whether the book was added during the given period based on this date. Ensure that the solution can accept two dates as input (start date and end date), and return the number of new books added during that period. Note that the start date and end date are inclusive, meaning if the book's entry date is equal to the start date or end date, it should also be counted. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nclass Book {\n    private Date addedDate; \n    public Book(Date addedDate) {\n    }\n    public Date getAddedDate() {\n        return null;\n    }\n}\npublic class Library {\n    private List<Book> books = new ArrayList<>();\n    public void addBook(Book book) {\n    }\n    public int countBooksAddedBetween(Date start, Date end) {\n        return 0;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named bookCount."}, {"type": "variable", "instruction": "Variable bookCount, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named LibraryInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named LibraryManager."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.stream."}, {"type": "combination", "instruction": "Your code should define a class named LibraryManager that implements the LibraryInterface interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"3": [0, 1, 2, 9], "5": [0, 1, 4, 9], "8": [0, 1, 4, 6, 9]}, "question_id": 145}
{"question": "Design a Python class `MysqlManager` that encapsulates the functionality to interact with a MySQL database. The class should provide methods to create a database, create a table within a database, insert records into a table, and commit changes to the database. The class should handle any exceptions that occur during database operations and print appropriate error messages. Additionally, the class should ensure that the database connection is properly closed when the object is no longer in use.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "variable", "instruction": "Your code should define a variable named db_connection."}, {"type": "variable", "instruction": "Your code should define an enumeration named ErrorType."}, {"type": "variable", "instruction": "Variable db_connection, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_database."}, {"type": "function", "instruction": "Your code should not use any functions from the os module."}, {"type": "interface", "instruction": "Your code should define an interface named DatabaseInterface."}, {"type": "combination", "instruction": "You should define an interface named DatabaseInterface that includes these methods create_database, create_table, insert, commit."}, {"type": "combination", "instruction": "The function create_database should take database_name as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 2, 10], "8": [0, 7, 10], "9": [0, 5, 10]}, "question_id": 146}
{"question": "Write a Python function `schedule_task` that uses Celery to schedule a task to be executed after a specified delay. The function should take two arguments: `task_name`, which is a string representing the name of the task to be scheduled, and `delay_seconds`, which is an integer representing the number of seconds to wait before executing the task. The task itself does not need to perform any specific action; it can simply print a message indicating that it has been executed. Assume that the Celery app is already configured as shown in the given code snippet. Additionally, write a test case to verify that the `schedule_task` function correctly schedules the task to be executed after the specified delay.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named task_id."}, {"type": "variable", "instruction": "Variable task_id, the initial value should be 0."}, {"type": "function", "instruction": "Your code should include a function named schedule_task."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os', 'sys']."}, {"type": "combination", "instruction": "The function schedule_task should return a bool as its result."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 9]}, "question_id": 147}
{"question": "Design a command-line application in Go that manages invitations to an organization within a secure messaging platform. The application should allow the creation of new invitations for users to join specific organizations. Each invitation requires the organization's name, the user's account address, and a routing ID that specifies the server where the user will be invited to. The application should use the Cobra library to handle command-line interactions and interact with a vault system to store and retrieve necessary data. Write a Go program that defines the command-line interface for creating organization invitations, including error handling to ensure all required flags are provided. Additionally, provide a mock handler function to simulate the creation of an invitation and output a success message.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "variable", "instruction": "Your code should define a variable named invitation."}, {"type": "variable", "instruction": "Your code should define an enumeration named InvitationStatus."}, {"type": "variable", "instruction": "Variable invitation, type should be struct."}, {"type": "file", "instruction": "Your code should be organized in a package named invite."}, {"type": "file", "instruction": "Your code should import the following libraries github.com/spf13/cobra, github.com/hashicorp/vault/api."}, {"type": "combination", "instruction": "Your code should be organized in a package named invite, which should contain these functions createInvitation, validateFlags, mockHandler."}], "instruction_dependence": {"4": [0, 1, 2], "7": [0, 1, 5]}, "question_id": 148}
{"question": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator should include two methods: `add` and `subtract`, which are used to calculate the sum and difference of two integers, respectively. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.function.BiFunction;\npublic class SimpleCalculator {\n    public int add(int a, int b) {\n    }\n    public int subtract(int a, int b) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named multiply."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named CalculatorOperations."}, {"type": "class", "instruction": "Your code should define a class named SimpleCalculator."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.function.BiFunction."}, {"type": "file", "instruction": "Your code should use the function apply from the library java.util.function.BiFunction."}, {"type": "combination", "instruction": "You should initialize an object named calculator as an instance of the SimpleCalculator class using no parameters for initialization."}, {"type": "combination", "instruction": "You should define an interface named CalculatorOperations that includes these methods add, subtract."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "12": [0, 1, 2, 11], "13": [0, 1, 2, 10], "14": [0, 1, 2, 9]}, "question_id": 149}
{"question": "Design a Java class named `PickupScheduler` that encapsulates the process of scheduling a pickup for shipment. The class should allow users to set the ready date and time, the latest pickup date and time, courier instructions, the type of pickup request, and the source of the pickup request. The class should also provide a method to validate if the pickup schedule is within business hours (9 AM to 5 PM) and if the ready time is before the latest pickup time. The `PickupScheduler` class should include the following functionalities: - Set and get the ready date and time. - Set and get the latest pickup date and time. - Set and get courier instructions. - Set and get the type of pickup request. - Set and get the source of the pickup request. - A method to validate the pickup times (`validatePickupTimes`) which checks: - The ready time and latest pickup time are within business hours. - The ready time is before the latest pickup time. - A method to schedule the pickup (`schedulePickup`) which: - Validates the pickup times. - If valid, returns a confirmation message. - If invalid, throws an exception with an appropriate error message. Assume the `PickupRequestType` and `PickupRequestSourceType` are enums that have been defined elsewhere in the package.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "file", "instruction": "Your code should import the following libraries java.time.LocalDateTime."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.ArrayList."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {}, "question_id": 150}
{"question": "Design a Go program that manages a collection of development tools, each with a unique name and version. The program should provide functionalities to add, update, and retrieve tools from the collection. The collection should be stored in memory and not persisted to disk. The program should define a `DevTool` struct with the following fields: `Name`: a string representing the name of the tool, and `Version`: a string representing the version of the tool. The program should also define a `DevToolsManager` struct that contains a map of `DevTool` instances, keyed by their names. Implement the following methods for the `DevToolsManager`: `AddTool(tool DevTool) error`: Adds a new tool to the collection. If a tool with the same name already exists, it should return an error. `UpdateTool(tool DevTool) error`: Updates the version of an existing tool in the collection. If the tool does not exist, it should return an error. `GetTool(name string) (DevTool, error)`: Retrieves a tool by its name. If the tool does not exist, it should return an error. Write test cases to verify the correctness of the implemented methods.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named GetTool."}, {"type": "class", "instruction": "Your code should define a class named DevToolsManager."}, {"type": "combination", "instruction": "In your code, the class DevToolsManager should have these properties map[string]DevTool."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 6, 8]}, "question_id": 151}
{"question": "Write a Go program that simulates a simple Boolean logic processor. The program should be able to evaluate a string expression consisting of Boolean literals (`true` and `false`), the logical AND operator (`&&`), the logical OR operator (`||`), and parentheses for grouping. The expression will be provided as an input to the function `evaluateBooleanExpression`. The function `evaluateBooleanExpression` should return a Boolean result indicating the outcome of the expression and an error if the expression is invalid. An expression is considered invalid if it contains characters other than `true`, `false`, `&&`, `||`, `(`, `)`, and whitespace. For example, the expression `\"true || (false && true)\"` should evaluate to `true`, while the expression `\"true && (false\"` should return an error due to the missing closing parenthesis.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named expression."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable expression, type should be string."}, {"type": "variable", "instruction": "Variable expression, should not be a global variable."}, {"type": "variable", "instruction": "Variable expression should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named evaluateBooleanExpression."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named booleanlogic."}, {"type": "combination", "instruction": "Your code should be organized in a package named booleanlogic, which should contain these functions evaluateBooleanExpression."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "5": [0, 2], "6": [0, 2], "8": [0, 7], "10": [0, 9]}, "question_id": 152}
{"question": "Design a C++ program that utilizes the provided `Time` structure and `Timer` class to create a simple stopwatch application. The application should allow a user to start the timer, stop the timer, and reset the timer. Additionally, the application should be able to display the current time and the elapsed time since the timer was started. The `Time` structure should be enhanced to include a function that converts the time to a string format (e.g., \"YYYY-MM-DD HH:MM:SS\"). The `Timer` class should be implemented with the following functionalities: 1. `start()`: Starts the timer from 0. 2. `stop()`: Stops the timer and records the elapsed time. 3. `reset()`: Resets the timer to 0. 4. `get_elapsed_time()`: Returns the elapsed time in seconds as a float. 5. `get_current_time_info()`: Returns the current system time as a `Time` structure. The application should also handle invalid operations gracefully, such as stopping a timer that has not been started or resetting a timer that is currently running.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named elapsed_time."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named convert_time_to_string."}, {"type": "function", "instruction": "Your code should not use any functions from the <ctime> library."}, {"type": "interface", "instruction": "Your code should define an interface named TimerInterface."}, {"type": "file", "instruction": "Your code should be organized in a package named stopwatch."}, {"type": "combination", "instruction": "The function convert_time_to_string should take time_struct as a parameter."}, {"type": "combination", "instruction": "Your code should be organized in a package named stopwatch, which should contain these functions: start, stop, reset, get_elapsed_time, get_current_time_info."}], "instruction_dependence": {"5": [0, 4], "10": [0, 6], "11": [0, 9]}, "question_id": 153}
{"question": "Write a Python program that scrapes concert setlist data from a given year's HTML page and populates a SQLite database with the song information. The program should be able to handle updates to the setlist by adding new songs without duplicating existing entries. The setlist data is structured in HTML with each concert's details contained within elements with the class 'setlist'. Each 'setlist' element contains an `<h3>` tag with the concert date and name, and `<a>` tags with the title attribute containing song titles. The SQLite database should have a table named 'songs' with the following columns: `dbid` (INT): A unique identifier for each song entry. `song` (TEXT): The title of the song. `show` (TEXT): The name of the show where the song was played. `track` (INT): The position of the song within the setlist. The program should include the following functions: `get_soup_from_url(url)`: Takes a URL and returns a BeautifulSoup object of the parsed HTML. `get_soup_show_name(show)`: Extracts and returns the show name from a 'setlist' BeautifulSoup object. `get_soup_show_date(show)`: Extracts and returns the show date from a 'setlist' BeautifulSoup object. `get_soup_show_songs(show)`: Extracts and returns a list of song titles from a 'setlist' BeautifulSoup object. `db_populate_songs_table(soup, db_filename)`: Takes a BeautifulSoup object containing setlist data and a database filename, then populates the 'songs' table with the data. `db_update_setlist_year(year, db_filename)`: Takes a year and a database filename, scrapes the setlist data for that year, and updates the 'songs' table in the database. The program should also handle the creation of the 'songs' table if it does not exist and ensure that the `dbid` column auto-increments for new entries.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named get_soup_from_url."}, {"type": "interface", "instruction": "Your code should define an interface named SongInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'numpy']."}, {"type": "combination", "instruction": "The function get_soup_from_url should return a BeautifulSoup object as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 4]}, "question_id": 154}
{"question": "Let's assume you are developing a backend service for an e-commerce platform, and you need to write a method to check whether a user exists in the database. If the user does not exist, your method should throw a custom exception indicating 'User record not found.' Based on this requirement, design a Java method, and ensure your code snippet is fully self-contained, including necessary import statements. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nclass UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String message) {\n        super(message);\n    }\n}\npublic class UserCheckService {\n    private List<Long> existingUserIds = Arrays.asList(1001L, 1002L, 1003L, 1004L);\n    public void checkUserExistence(long userId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.Arrays, java.util.List."}, {"type": "file", "instruction": "Your code should use the function contains from the library java.util.List."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.HashMap."}], "instruction_dependence": {"5": [0, 1, 4]}, "question_id": 155}
{"question": "You are given a string `s`, string `a`, string `b`, and an integer `k`, all of which are 0-indexed. A index `i` is considered a **beautiful index** if: * `0 <= i <= s.length - a.length` * `s[i..(i + a.length - 1)] == a` * There exists an index `j` such that: + `0 <= j <= s.length - b.length` + `s[j..(j + b.length - 1)] == b` + `|j - i| <= k` Return the beautiful indices **in ascending order** as an array. **Example 1:** **Input:** s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15 **Output:** [16,33] **Explanation:** There are 2 beautiful indices: [16,33]. - Index 16 is a beautiful index because s[16..17] == \"my\" and there exists index 4 where s[4..11] == \"squirrel\" and |16 - 4| <= 15. - Index 33 is a beautiful index because s[33..34] == \"my\" and there exists index 18 where s[18..25] == \"squirrel\" and |33 - 18| <= 15. Therefore, the result is [16,33]. **Example 2:** **Input:** s = \"abcd\", a = \"a\", b = \"a\", k = 4 **Output:** [0] **Explanation:** There is 1 beautiful index: [0]. - Index 0 is a beautiful index because s[0..0] == \"a\" and there exists index 0 where s[0..0] == \"a\" and |0 - 0| <= 4. Therefore, the result is [0]. **Tips:** * `1 <= k <= s.length <= 5 * 105` * `1 <= a.length, b.length <= 5 * 105` * `s`, `a`, and `b` only contain lowercase English letters. Please complete the following: ```cpp class Solution { public: vector<int> beautifulIndices(string s, string a, string b, int k); };```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named beautifulIndices."}, {"type": "interface", "instruction": "Your code should define an interface named BeautifulIndexFinder."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "file", "instruction": "Your code should be organized in a package named beautifulIndicesPackage."}, {"type": "combination", "instruction": "Your code should define a class named Solution that implements the BeautifulIndexFinder interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named beautifulIndicesPackage, which should contain these classes Solution."}], "instruction_dependence": {"9": [0, 1, 2, 6, 7], "10": [0, 1, 2, 7, 8]}, "question_id": 156}
{"question": "The above code seems to calculate something related to acute-angled triangles. Please understand the code and modify it to calculate the same thing for obtuse-angled triangles.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named triangle_type."}, {"type": "variable", "instruction": "Variable triangle_type, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_obtuse_triangle."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named TriangleInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 3, 9], "6": [0, 5, 9], "8": [0, 7, 9]}, "question_id": 157}
{"question": "Design a C++ class `UserDatabase` that encapsulates the functionality for managing a user database in a MySQL system. The class should provide methods for creating and initializing the database and user table, as well as for deleting them if necessary. The user table should have columns for user grade, email, and password. The email column should be unique to ensure that each user can be identified by their email address. Additionally, the class should provide a method to update the database schema if needed in the future. The class should follow these specifications: 1. The constructor should initialize the database and user table. If there is an issue during the creation, it should log an error message. 2. The class should use a singleton pattern to ensure that only one instance of the database manager exists. 3. The class should provide protected methods for creating the database and user table, and for deleting the database or a specific table. 4. The user table should include a method to add timestamps for record creation and updates. 5. The class should handle any necessary cleanup in its destructor. Write a C++ program that demonstrates the use of the `UserDatabase` class by creating an instance, initializing the database, and then cleaning up by deleting the database. Include all necessary imports and provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `dbInstance`."}, {"type": "variable", "instruction": "Variable `dbInstance`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `updateSchema`."}, {"type": "class", "instruction": "Your code should define a class named `UserDatabase`."}, {"type": "file", "instruction": "Your code should be organized in a package named `user_database`."}, {"type": "file", "instruction": "Your code should import the following libraries `mysql.h`, `iostream`, `string`."}, {"type": "file", "instruction": "Your code should use the function `mysql_real_connect` from the library `mysql.h`."}, {"type": "combination", "instruction": "In your code, the class `UserDatabase` should have these properties `dbName`, `tableName`, `connection`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `user_database`, which should contain these classes `UserDatabase`."}], "instruction_dependence": {"4": [0, 3], "9": [0, 8], "10": [0, 6], "11": [0, 6, 7]}, "question_id": 158}
{"question": "Please design a simple student information management system. This system should allow users to store students' names and their scores, and be able to query their scores by the students' names. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\npublic class StudentScoreManager {\n    private HashMap<String, Integer> studentScores;\n    public StudentScoreManager() {\n    }\n    public void addStudentScore(String name, int score) {\n    }\n    public int getStudentScore(String name) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named studentScores."}, {"type": "variable", "instruction": "Your code should define an enumeration named GradeLevel."}, {"type": "variable", "instruction": "Variable MAX_SCORE, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named ScoreManager."}, {"type": "class", "instruction": "Your code should define a class named StudentScoreManager."}, {"type": "combination", "instruction": "Your code should define a class named StudentScoreManager that implements the ScoreManager interface."}, {"type": "combination", "instruction": "In your code, the class StudentScoreManager should have these methods addStudentScore, getStudentScore."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"5": [0, 1, 3, 10], "8": [0, 1, 6, 7, 10], "9": [0, 1, 7, 10]}, "question_id": 159}
{"question": "Write a C++ program that generates a plot of the cosine function over the interval from `-2π` to `2π`, including grid lines and appropriate labels for the x-axis and y-axis. The x-axis should have tick marks at intervals of `π/2` with corresponding labels in terms of π (e.g., `-2π`, `-3π/2`, `-π`, etc.). The plot should have a title that reads \"cos(x) from -2π to 2π\". Additionally, the cosine curve should be colored red.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named x_interval."}, {"type": "variable", "instruction": "Variable x_interval, the initial value should be π/2."}, {"type": "function", "instruction": "Your code should include a function named plot_cosine."}, {"type": "class", "instruction": "Your code should define a class named Plotter."}, {"type": "file", "instruction": "Your code should import the following libraries [\"matplotlibcpp.h\"]."}, {"type": "file", "instruction": "Your code should use the function plot from the library matplotlibcpp.h."}, {"type": "combination", "instruction": "You should initialize an object named cosine_plotter as an instance of the Plotter class using [\"cos(x)\", \"red\"] for initialization."}, {"type": "combination", "instruction": "The function plot_cosine should return a void as its result."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 7], "9": [0, 1, 6], "10": [0, 1, 5]}, "question_id": 160}
{"question": "Please write a Java method that can query and return specific book information. Assume we have a book management system where each book has a unique ID, title, and author. We now need to fetch detailed information about a book based on its ID. Please implement a method named `getBookDetails` that receives the book ID as a parameter and returns a string containing the title and author. If the book ID does not exist, it should return a specified error message string. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private static Map<String, String[]> booksDatabase = new HashMap<>();\n    static {\n        booksDatabase.put(\"001\", new String[]{\"Java基础\", \"张三\"});\n        booksDatabase.put(\"002\", new String[]{\"算法导论\", \"李四\"});\n        booksDatabase.put(\"003\", new String[]{\"操作系统\", \"王五\"});\n    }\n    public static String getBookDetails(String bookId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bookDetails."}, {"type": "variable", "instruction": "Variable bookDetails, the initial value should be null."}, {"type": "class", "instruction": "Your code should define a class named BookFinder."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named com.book.management."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.book.management, which should contain these functions getBookDetails."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 161}
{"question": "Create a Java class named `ConfirmationDialogManager` that manages the creation and display of confirmation dialogs in an Android application. The class should provide a method to show a confirmation dialog with a customizable message, positive button text, negative button text, and corresponding actions. The confirmation dialog should be a fragment that can be reused across different activities within the application. When the user clicks the positive button, a specified action should be executed, and when the user clicks the negative button, the dialog should simply dismiss. Implement the `ConfirmationDialogManager` class with the following specifications: - The class should have a method `showConfirmationDialog` that accepts the following parameters: - `FragmentManager fragmentManager`: The FragmentManager to show the dialog. - `String message`: The message to display in the dialog. - `String positiveButtonText`: The text for the positive button. - `String negativeButtonText`: The text for the negative button. - `Runnable positiveAction`: The action to execute when the positive button is clicked. - `Runnable negativeAction`: The action to execute when the negative button is clicked (optional, can be null). - The dialog should be an instance of `DialogFragment` and should be shown using the provided `FragmentManager`. - The dialog should be styled using the AlertDialog.Builder and should handle screen rotation gracefully. - Include a simple `MainActivity` that demonstrates how to use the `ConfirmationDialogManager` to show a dialog and handle button clicks.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dialogFragment."}, {"type": "variable", "instruction": "Variable dialogFragment, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named DialogListener."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries [org.json, com.google.gson]."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7]}, "question_id": 162}
{"question": "Implement a Group Chat Management System using XMPP Protocol in C++", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named groupChatManager."}, {"type": "variable", "instruction": "Variable groupChatManager, type should be CManageGroupChatQxmpp."}, {"type": "variable", "instruction": "Variable groupChatManager, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named IGroupChatHandler."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries [boost, std::thread]."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 3, 9], "5": [0, 3, 9], "7": [0, 6, 9]}, "question_id": 163}
{"question": "Please write a Java method to update student information. The method accepts a student entity as a parameter. If the student's name already exists in the database, it does not update the information and returns an error message; if the student's name does not exist, it updates the student information and records the update time. After a successful update, it returns a success message. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentUpdateService {\n    private static Map<Integer, StudentEntity> studentDatabase = new HashMap<>();\n    static {\n    }\n    public static Callback updateStudent(StudentEntity studentEntity) {\n    }\n}\nclass StudentEntity {\n    private Integer id;\n    private String name;\n    private Date updateTime;\n    public StudentEntity(Integer id, String name, Date updateTime) {\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n    }\n    public Date getUpdateTime() {\n        return updateTime;\n    }\n    public void setUpdateTime(Date updateTime) {\n    }\n}\nclass Callback {\n    private boolean success;\n    private String message;\n    private Callback(boolean success, String message) {\n    }\n    public static Callback success(boolean success) {\n    }\n    public static Callback error(String message) {\n    }\n    public boolean isSuccess() {\n        return success;\n    }\n    public String getMessage() {\n        return message;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "variable", "instruction": "Your code should define a variable named studentDatabase."}, {"type": "variable", "instruction": "Variable studentDatabase, type should be Map<Integer, StudentEntity>."}, {"type": "function", "instruction": "Your code should include a function named updateStudent."}, {"type": "class", "instruction": "Your code should define a class named StudentUpdateService."}, {"type": "file", "instruction": "Your code should be organized in a package named student.management."}, {"type": "file", "instruction": "Your code should not use the following libraries [org.json, com.google.gson]."}, {"type": "combination", "instruction": "In your code, the class StudentEntity should have these methods [getId, setId, getName, setName, getUpdateTime, setUpdateTime]."}, {"type": "combination", "instruction": "The function updateStudent should return a Callback as its result."}], "instruction_dependence": {"3": [0, 1, 2], "8": [0, 1, 5], "9": [0, 1, 4]}, "question_id": 164}
{"question": "You are given an array of integers `nums` of length `n` and a positive integer `k`. Partition this array into one or more sub-arrays of length `3`, that satisfy the following conditions:\n\n* Every element in `nums` must exist in **exactly one** sub-array.\n* The difference between any two elements in a sub-array must be less than or equal to `k`.\n\nReturn a **two-dimensional array** containing all these sub-arrays. Return an empty array if it is not possible to satisfy these conditions. If there are multiple solutions, return **any one of them**.\n\n**Example 1:**\n\n```plaintext\n**Input:** nums = [1,3,4,8,7,9,3,5,1], k = 2\n**Output:** [[1,1,3],[3,4,5],[7,8,9]]\n**Explanation:** The array can be divided into the following sub-arrays: [1,1,3], [3,4,5], and [7,8,9].\nThe absolute difference between any two elements in a sub-array is less than or equal to 2.\nNote, the order of elements is not important.\n```\n\n**Example 2:**\n\n```plaintext\n**Input:** nums = [1,3,3,2,7,3], k = 3\n**Output:** []\n**Explanation:** It is not possible to partition the array to satisfy all the conditions.\n```\n\n**Hint:**\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `n` is a multiple of `3`\n* `1 <= nums[i] <= 105`\n* `1 <= k <= 105`\n\nPlease finish the following code implementation\n\n```python\nclass Solution(object):\n    def divideArray(self, nums, k):\n        '''\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        '''\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'result'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'Status'."}, {"type": "variable", "instruction": "Variable 'result' should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'divideArray'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'Solution'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'array_partition'."}, {"type": "combination", "instruction": "In your code, the class 'Solution' should have these properties ['nums', 'k']."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'array_partition', which should contain these functions ['divideArray']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 5], "9": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 11]}, "question_id": 165}
{"question": "Design a C++ class `TextureManager` that manages the loading and storing of textures for a graphics application. The class should be able to load textures from files, store them in a map for easy retrieval, and clean up the resources when they are no longer needed. The class should use the SOIL library for loading image data and OpenGL for creating and managing texture objects. The `TextureManager` should provide the following functionalities: - Load a texture from a file and store it in a map with a unique string identifier. - Retrieve a texture ID by its string identifier. - Clear all loaded textures from memory. The `TextureManager` should handle errors gracefully, such as when a file cannot be found or fails to load.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named textureMap."}, {"type": "variable", "instruction": "Variable textureMap, the initial value should be an empty std::map."}, {"type": "function", "instruction": "Your code should include a function named loadTexture."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the std::vector."}, {"type": "interface", "instruction": "Your code should define an interface named ITextureManager."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 5, 12], "8": [0, 1, 7, 12], "11": [0, 1, 10, 12]}, "question_id": 166}
{"question": "Write a program that requires a user password. If the password is 'ILovePython', print 'Login Successfully' in the terminal; otherwise, print 'Wrong password, try again!'. Please use the getpass module to ensure that the password is not visible when entered, and write a function `password_checker`.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "function", "instruction": "Your code should include a function named password_checker."}, {"type": "interface", "instruction": "Your code should define an interface named PasswordInterface."}, {"type": "class", "instruction": "Your code should define a class named PasswordManager."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named password_manager."}, {"type": "combination", "instruction": "You should initialize an object named manager as an instance of the PasswordManager class using ['ILovePython'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named PasswordInterface that includes these methods ['check_password']."}, {"type": "combination", "instruction": "The function password_checker should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named password_manager, which should contain these functions ['password_checker']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 4, 11], "7": [0, 1, 4, 11], "8": [0, 1, 3, 11], "9": [0, 1, 2, 11], "10": [0, 1, 6, 11]}, "question_id": 167}
{"question": "Create a configuration parser that can handle different types of configuration values, such as `Double`, `Integer`, `Boolean`, `String`, and `Enum`. The parser should be able to parse individual values as well as lists of values from a JSON-like structure. The configuration values are represented by the given classes, each handling the parsing of its respective type. The parser should provide a method `getConfigValue` that takes a `Class<T>` representing the type of the configuration value, a `String` key, and an `Object` representing the JSON-like structure (which can be a `Map<String, Object>` for simplicity). The method should return the parsed configuration value of the specified type. Implement the `ConfigurationParser` class with the `getConfigValue` method, and provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named configMap."}, {"type": "variable", "instruction": "Variable configMap, should be a global variable."}, {"type": "variable", "instruction": "Variable configMap, the initial value should be null."}, {"type": "class", "instruction": "Your code should define a class named ConfigurationParser."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4]}, "question_id": 168}
{"question": "Design a Go program that models a simple blogging platform with users and posts. The program should be able to connect to a PostgreSQL database, initialize the schema with the necessary tables, and save user and post data to the database. The schema should consist of two tables: `users` and `posts`. Each post should be associated with a user, representing the author of the post.\n\nThe `User` table should have the following fields:\n- `Id` (Primary Key, auto-incremented)\n- `Name` (String)\n\nThe `Post` table should have the following fields:\n- `Id` (Primary Key, auto-incremented)\n- `Content` (String)\n- `AuthorID` (Foreign Key referencing `User.Id`)\n\nThe program should include the following functionalities:\n1. A function to connect to the PostgreSQL database.\n2. A function to initialize the database schema, creating the `users` and `posts` tables if they do not exist.\n3. A function to insert sample user and post data into the database.\n4. A function to retrieve all posts along with their author's name.\n\nWrite a Go program that implements the above functionalities, ensuring that all database operations are handled correctly and efficiently. Provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named dbConnection."}, {"type": "variable", "instruction": "Variable dbConnection, should be a global variable."}, {"type": "variable", "instruction": "Variable dbConnection, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the unsafe package."}, {"type": "file", "instruction": "Your code should import the following libraries database/sql, fmt, log, github.com/lib/pq."}, {"type": "file", "instruction": "Your code should use the function Open from the library database/sql."}, {"type": "combination", "instruction": "You should define an interface named DatabaseOperations that includes these methods Connect, InitializeSchema, InsertData, RetrievePosts."}, {"type": "combination", "instruction": "Your code should define a class named BlogPlatform that implements the DatabaseOperations interface."}, {"type": "combination", "instruction": "In your code, the class BlogPlatform should have these properties dbConnection, userTableName, postTableName."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "6": [0, 5], "7": [0], "8": [0], "9": [0]}, "question_id": 169}
{"question": "Write a Python program to control a two-wheeled robot using the GoPiGo library to maintain a straight path. The robot's left and right wheel encoders are used to detect any deviation from the straight path, and the motor speeds are adjusted accordingly to correct the course. The program should include a function `set_motors(s1, s2)` that sets the speed of the two motors, and it should use the `enc_read` function to read the encoder values for both wheels. The robot should start moving with an initial target speed provided by the user. As the robot moves, it should continuously adjust the wheel speeds to correct for any differences in encoder readings, which indicate that the robot is veering off a straight path. The program should also handle the case where the error in encoder readings is positive, indicating that the robot is turning. In this case, the program should adjust the wheel speeds to bring the robot back to a straight path. The robot's movement should be continuous, and the program should run indefinitely until manually stopped.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named target_speed."}, {"type": "variable", "instruction": "Variable target_speed should not be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named robot_control."}, {"type": "combination", "instruction": "Your code should be organized in a package named robot_control, which should contain these functions set_motors, enc_read."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 9], "8": [0, 1, 2, 7, 9]}, "question_id": 170}
{"question": "Design a Python class `MockTestRunner` that simulates the execution of a series of layout tests for a web rendering engine. The class should be able to handle different types of tests, including text comparison tests, pixel tests (image comparison), and audio tests. The class should also be able to handle virtual tests and reference tests (reftests), which compare the rendering of a test file with a reference file. The `MockTestRunner` should provide methods to: - Add tests to the runner with their expected results (text, image checksum, or audio data). - Run all added tests and return a summary of the results, including the number of passed, failed, and skipped tests. - Output detailed results for each test, including the test name, the expected result, the actual result, and a pass/fail indication. The runner should simulate the test environment and not perform actual file I/O or network operations. Assume that the test environment is already set up with necessary mocks.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named run_tests."}, {"type": "interface", "instruction": "Your code should define an interface named TestInterface."}, {"type": "class", "instruction": "Your code should define a class named MockTestRunner."}, {"type": "file", "instruction": "Your code should be organized in a package named test_runner."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os', 'sys', 'requests']."}, {"type": "combination", "instruction": "You should define an interface named TestInterface that includes these methods ['add_test', 'run_tests', 'get_summary']."}, {"type": "combination", "instruction": "In your code, the class MockTestRunner should have these methods ['add_test', 'run_tests', 'get_summary']."}, {"type": "combination", "instruction": "The function run_tests should return a dict as its result."}], "instruction_dependence": {"8": [0, 4], "9": [0, 5], "10": [0, 3]}, "question_id": 171}
{"question": "Design a C++ program that uses the Boost Serialization library to serialize and deserialize a simple `Person` object. The `Person` object should contain a name (string) and age (int). The program should demonstrate the following:\n\n1. Serialization of a `Person` object to a text file.\n2. Deserialization of a `Person` object from the same text file.\n\nThe program should include error handling to manage cases where the file cannot be opened or the serialization process fails. Additionally, provide test cases to verify that the serialization and deserialization processes are working correctly.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named `person`."}, {"type": "variable", "instruction": "Variable `person`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `person`, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `Serializable`."}, {"type": "class", "instruction": "Your code should define a class named `Person`."}, {"type": "file", "instruction": "Your code should import the following libraries `boost/archive/text_oarchive.hpp`, `boost/archive/text_iarchive.hpp`, `boost/serialization/serialization.hpp`."}, {"type": "file", "instruction": "Your code should use the function `serialize` from the library `boost/serialization`."}, {"type": "combination", "instruction": "In your code, the class `Person` should have these properties `name`, `age`."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"3": [0, 1, 2, 10], "4": [0, 1, 2, 10], "8": [0, 1, 7, 10], "9": [0, 1, 6, 10]}, "question_id": 172}
{"question": "Design a Java program that implements a `ReportSaver` class, which is responsible for saving report data to files within a specified directory. The `ReportSaver` class should implement the `Consumer<FileData>` interface, where `FileData` is a custom data transfer object (DTO) that contains the file name and its content. The `ReportSaver` class should have the following specifications: 1. The constructor of the `ReportSaver` class should accept a `String` parameter representing the directory path where the files will be saved. 2. The `accept` method should take a `FileData` object as a parameter and save the content to a file with the specified file name in the provided directory. 3. If the file is saved successfully, the method should log an info message indicating the file name and the directory where it was saved. 4. If an `IOException` occurs during file saving, the method should throw an `IllegalStateException` with a message indicating the file name and the directory, along with the original exception. 5. The `FileData` DTO should contain a `getFileName()` method that returns the name of the file and a `getContent()` method that returns the file content as a byte array.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named directoryPath."}, {"type": "variable", "instruction": "Your code should define an enumeration named LogLevel."}, {"type": "variable", "instruction": "Variable directoryPath, type should be String."}, {"type": "interface", "instruction": "Your code should define an interface named Consumer."}, {"type": "class", "instruction": "Your code should define a class named ReportSaver."}, {"type": "file", "instruction": "Your code should import the following libraries java.io, java.nio.file, java.util.logging."}, {"type": "file", "instruction": "Your code should use the function write from the library java.nio.file.Files."}, {"type": "combination", "instruction": "In your code, the class FileData should have these properties fileName, content."}], "instruction_dependence": {"7": [0, 1, 5], "11": [0, 1, 10], "12": [0, 1, 9]}, "question_id": 173}
{"question": "Design a Go program that manages comments for delivery service requests in a content delivery network (CDN) system. The system should allow users to create, update, retrieve, and delete comments associated with delivery service requests. Each comment should be linked to a specific delivery service request by an ID. The program should define the following operations: 1. `CreateComment`: Given a delivery service request ID and a comment value, create a new comment and associate it with the delivery service request. 2. `UpdateCommentByID`: Given a comment ID and a new comment value, update the existing comment. 3. `GetCommentByID`: Retrieve a comment by its ID. 4. `GetAllComments`: Retrieve all comments associated with delivery service requests. 5. `DeleteCommentByID`: Delete a comment by its ID. Each comment should have the following structure: - `ID`: A unique identifier for the comment. - `DeliveryServiceRequestID`: The ID of the delivery service request the comment is associated with. - `Value`: The text content of the comment. Assume that the `TOSession` object is a client that communicates with the CDN system's API and has methods corresponding to the operations above. The `testData` variable contains initial data for testing, including delivery service requests and comments. Implement the program with appropriate test cases to verify the correctness of each operation.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named `commentManager`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `unsafe` package."}, {"type": "class", "instruction": "Your code should define a class named `CommentManager`."}, {"type": "file", "instruction": "Your code should import the following libraries: `fmt`, `encoding/json`, `net/http`."}, {"type": "file", "instruction": "Your code should use the function `NewRequest` from the library `net/http`."}, {"type": "file", "instruction": "Your code should not use the following libraries: `log`, `os`."}], "instruction_dependence": {"4": [0, 1, 2, 3], "8": [0, 1, 2, 7]}, "question_id": 174}
{"question": "Design a Java program that implements a simple user management system using the DAO (Data Access Object) pattern as suggested by the given code snippet. The system should be able to perform the following operations:\n\n1. Query all users in the system.\n2. Insert a new user into the system.\n3. Update an existing user's information.\n4. Delete a user from the system.\n\nEach user should have at least the following attributes:\n- User ID (int)\n- Username (String)\n- Email (String)\n- Password (String)\n\nThe `DAOUser` interface provided in the snippet should be implemented by a concrete class named `UserDAOImpl` that simulates a database using an `ArrayList<User>`. Assume that the `User` class has already been defined with the appropriate attributes and methods.\n\nProvide test cases to verify the correctness of the implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named userList."}, {"type": "variable", "instruction": "Variable userList should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named getUserById."}, {"type": "interface", "instruction": "Your code should define an interface named DAOUser."}, {"type": "class", "instruction": "Your code should define a class named UserDAOImpl."}, {"type": "file", "instruction": "Your code should be organized in a package named com.user.management."}, {"type": "file", "instruction": "Your code should not use the following libraries [java.sql, javax.persistence]."}, {"type": "combination", "instruction": "You should define an interface named DAOUser that includes these methods [getAllUsers, insertUser, updateUser, deleteUser]."}, {"type": "combination", "instruction": "In your code, the class UserDAOImpl should have these methods [getAllUsers, insertUser, updateUser, deleteUser]."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.user.management, which should contain these classes [User, DAOUser, UserDAOImpl]."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"3": [0, 2, 12], "9": [0, 5, 12], "10": [0, 6, 12], "11": [0, 6, 7, 12]}, "question_id": 175}
{"question": "Serial Port Data Relay with Counters\n\nIn this problem, you are required to implement a Go program that relays data between two serial ports and counts the number of bytes relayed in each direction. The program should use goroutines to handle the data relay and synchronization primitives to safely update the byte counters.\n\nThe program should accept command-line arguments to specify the serial port device names and the baud rate for the communication. It should open two serial ports, start relaying data between them, and increment the corresponding byte counters for each direction of data flow. Additionally, the program should periodically print the current count of bytes relayed in each direction.\n\n### Guidelines:\n- Use the `flag` package to parse command-line arguments for the serial port device names and baud rate.\n- Use the `github.com/tarm/serial` package to handle serial port operations.\n- Use a `Count` struct with `sync.RWMutex` to safely update and read the byte counters from multiple goroutines.\n- Implement `IncUp` and `IncDown` methods to increment the counters for each direction.\n- Implement a `Print` method to print the current count of bytes relayed.\n- Use the `io.Copy` function in goroutines to relay data between the serial ports.\n- Use a ticker to periodically print the byte counters.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "variable", "instruction": "Your code should define a variable named `baudRate`."}, {"type": "variable", "instruction": "Variable `baudRate`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `relayData`."}, {"type": "class", "instruction": "Your code should define a class named `SerialRelay`."}, {"type": "file", "instruction": "Your code should be organized in a package named `serialrelay`."}, {"type": "file", "instruction": "Your code should not use the following libraries `github.com/jacobsa/crypto`."}], "instruction_dependence": {"4": [0, 1, 2, 3]}, "question_id": 176}
{"question": "Design a Java program that simulates a simple Play Management System for a theater. The system should be able to add new plays, delete existing plays, update play details, and retrieve plays based on certain conditions. Each play has an ID, a title, a description, a genre, a duration, and a rating. The `Play` class should have the following attributes: `int playID`, `String title`, `String description`, `String genre`, `int duration`, and `String rating`. The `PlayMybatisDao` interface should provide the following methods: `int addPlay(Play play)`, `int delPlay(int playID)`, `int updatePlay(Play play)`, and `List<Play> getPlay(String condi)`. Implement the `Play` class and the `PlayMybatisDao` interface. Also, provide a mock implementation of the `PlayMybatisDao` interface for testing purposes, which will store plays in memory using a `List`. Include test cases to verify the correctness of the implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named playList."}, {"type": "variable", "instruction": "Variable playList, type should be List<Play>."}, {"type": "interface", "instruction": "Your code should define an interface named PlayMybatisDao."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.List."}, {"type": "file", "instruction": "Your code should use the function add from the library java.util.List."}, {"type": "combination", "instruction": "You should define an interface named PlayMybatisDao that includes these methods addPlay, delPlay, updatePlay, getPlay."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 5, 11], "9": [0, 1, 8, 11], "10": [0, 1, 7, 11]}, "question_id": 177}
{"question": "Design a rate-limiting filter for a microservices framework that can limit the rate of requests to a service as a whole and also to individual methods within the service. The rate-limiting should be configurable via a URL object that contains parameters for the service rate limit and individual method rate limits. The filter should also be able to be turned on and off via a switcher mechanism. The filter should be implemented in Go and use the `ratelimit` package to create token buckets for rate limiting. The filter should be part of a chain of filters and should be able to pass the request to the next filter in the chain if the rate limit allows it. The filter should be able to parse the rate limit configurations from the URL parameters, initialize the token buckets accordingly, and enforce the rate limits on incoming requests. If a request exceeds the rate limit, the filter should wait until a token is available before passing the request to the next filter. The filter should also provide methods to set and get the next filter in the chain, get the filter's name, check if there is a next filter, get the filter's index, and get the filter's type.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named RateLimitFilter."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named Filter."}, {"type": "class", "instruction": "Your code should define a class named RateLimiter."}, {"type": "file", "instruction": "Your code should be organized in a package named ratelimitfilter."}, {"type": "combination", "instruction": "In your code, the class RateLimiter should have these properties serviceRateLimit, methodRateLimits, isEnabled."}, {"type": "combination", "instruction": "Your code should be organized in a package named ratelimitfilter, which should contain these classes RateLimiter, Filter."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"6": [0, 5, 12], "10": [0, 8, 12], "11": [0, 8, 9, 12]}, "question_id": 178}
{"question": "Write a Python program to calculate various types of moving averages for a given time series data. The program should be able to calculate the following types of moving averages: 1. Simple Moving Average (SMA), 2. Exponential Moving Average (EMA), 3. Weighted Moving Average (WMA), 4. Hull Moving Average (HMA). The program should define a function for each type of moving average, which takes a list of numbers representing the time series data and an integer `period` representing the number of data points to consider for each moving average calculation. Each function should return a list of moving average values, with `None` for the indices where the moving average cannot be calculated due to insufficient data points.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named moving_averages."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable PERIOD, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_sma."}, {"type": "class", "instruction": "Your code should define a class named MovingAverageCalculator."}, {"type": "file", "instruction": "Your code should be organized in a package named moving_averages."}, {"type": "file", "instruction": "Your code should not use the following libraries numpy, pandas."}, {"type": "combination", "instruction": "In your code, the class MovingAverageCalculator should have these methods calculate_sma, calculate_ema, calculate_wma, calculate_hma."}, {"type": "combination", "instruction": "The function calculate_sma should take data, period as parameters."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "11": [0, 1, 8], "12": [0, 1, 7]}, "question_id": 179}
{"question": "Write a program that simulates a simple Read-Eval-Print Loop (REPL) for a fictional programming language called 'Monkey'. The REPL should welcome the current system user, prompt them to enter commands, and simply echo the commands back to the user. The REPL should continue to prompt the user until they type 'exit', at which point the program should say goodbye and terminate. The REPL should handle errors gracefully. If an error occurs while trying to retrieve the current user's information, the program should panic with an appropriate error message. Here are the requirements for your program: 1. The program should start by greeting the user with their username. 2. The program should display a prompt for the user to enter commands. 3. The program should read input from the user and print it back to the screen. 4. If the user types 'exit', the program should print a goodbye message and terminate. 5. If there is an error retrieving the user's information, the program should panic with an error message.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'list'."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'user_input'."}, {"type": "variable", "instruction": "Variable 'user_input', the initial value should be 'None'."}, {"type": "function", "instruction": "Your code should include a function named 'handle_input'."}, {"type": "interface", "instruction": "Your code should define an interface named 'REPLInterface'."}, {"type": "combination", "instruction": "You should define an interface named 'REPLInterface' that includes these methods 'start', 'prompt', 'read_input', 'echo_input', 'exit'."}, {"type": "combination", "instruction": "The function 'handle_input' should take 'input_string' as a parameter."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7], "9": [0, 1, 6]}, "question_id": 180}
{"question": "You are given an integer matrix of size `m * n`, starting from index **0**, named `values`, representing `m * n` different items in `m` different shops. Each shop has `n` items, the value of the `j-th` item in the `i-th` shop is `values[i][j]`. Besides, the items in the `i-th` shop have been sorted in a non-increasing order by their values. That is, for all `0 <= j < n - 1`, `values[i][j] >= values[i][j + 1]`. Every day, you can buy one item from one shop. Specifically, on the `d-th` day, you can: * Choose shop `i`. * Buy the right-most item `j` in the array, with a cost of `values[i][j] * d`. In other words, choose the item with the largest index `j` from the items that have not been purchased from this shop, and spend `values[i][j] * d` to buy it. **Note** that all items are considered different. For instance, if you have already bought item `0` from shop `1`, you can still buy item `0` from other shops. Please return the **maximum cost** required to purchase all `m * n` items.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `total_cost`."}, {"type": "variable", "instruction": "Variable `total_cost`, should be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named `shopping_cost`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `shopping_cost`, which should contain these functions `calculate_max_cost`."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6]}, "question_id": 181}
{"question": "Write a Java program using Selenium WebDriver that automates the following web interactions on a demo alert page:\n\n1. Navigate to the URL `http://demo.automationtesting.in/Alerts.html`.\n2. Interact with three types of alert boxes on the page:\n    - Click the button to display a simple alert box, accept the alert, and print the alert message to the console.\n    - Click the button to display a confirmation alert box, dismiss the alert, and verify that the correct status message is displayed on the page.\n    - Click the button to display a prompt alert box, send the text 'TechProEducation' to the alert, accept the alert, and verify that the correct welcome message is displayed on the page.\n\nYour program should include assertions to verify that the correct messages are displayed after interacting with the alerts. Use JUnit for writing the test case and assertions.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'alertMessage'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable 'alertMessage', the initial value should be 'null'."}, {"type": "class", "instruction": "Your code should define a class named 'AlertTest'."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries 'org.openqa.selenium', 'org.openqa.selenium.chrome.ChromeDriver', 'org.junit.jupiter.api.*', 'org.junit.jupiter.api.Assertions'."}, {"type": "file", "instruction": "Your code should use the function 'getText' from the library 'org.openqa.selenium.WebElement'."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "9": [0, 1, 8], "11": [0, 1, 10]}, "question_id": 182}
{"question": "Design a system for managing educational spaces within a university setting. The system should allow for the creation, retrieval, and filtering of educational spaces, known as `Espacio`. Each `Espacio` is associated with a `Foro` (forum) for discussions related to the space. The system should also provide functionalities to list spaces created by a professor and spaces in which a student is enrolled. The `Espacio` class should have the following attributes: `id`, `universidad`, `facultad`, `grado`, `curso`, `asignatura`, `capacidad`, and `foro`. The `Foro` class should have the following attributes: `id` and `titulo`. Implement the following functionalities in the `EspacioService` class: `findAll()`, `findDisponibles()`, `findOne()`, `save()`, `espaciosDeUnProfesor()`, `espaciosDeUnAlumno()`, and `espaciosConCapacidad()`. Assume that the `EspacioRepository` provides the necessary database operations to support the above functionalities. The `ForoService` and `AlumnoService` are used to manage forums and students, respectively.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named `espacioList`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `espacioList`, should be a global variable."}, {"type": "variable", "instruction": "Variable `espacioList` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `findDisponibles`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `System.exit` disallowed function list."}, {"type": "class", "instruction": "Your code should define a class named `EspacioService`."}, {"type": "combination", "instruction": "You should initialize an object named `espacioService` as an instance of the `EspacioService` class using `espacioRepository` for initialization."}, {"type": "combination", "instruction": "The function `findDisponibles` should return a `List<Espacio>` as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"2": [0, 1, 11], "3": [0, 1, 11], "4": [0, 1, 11], "6": [0, 5, 11], "9": [0, 8, 11], "10": [0, 5, 11]}, "question_id": 183}
{"question": "Please describe a Java method that accepts two string parameters: `projectName` and `taskName`. The purpose of this method is to generate a formatted string that represents a task in a specific project. Follow these rules:\n\n1. If `projectName` is `null` or a blank string, return only `taskName`.\n2. If `taskName` is `null` or a blank string, return `null`.\n3. If both parameters are non-null and non-blank strings, the returned format should be `\"projectName/taskName\"`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class TaskFormatter {\n    public static String formatTaskName(String projectName, String taskName) {\n    }\n    private static boolean isNullOrBlank(String str) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named formattedTask."}, {"type": "variable", "instruction": "Variable formattedTask, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named TaskFormatterInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TaskFormatter."}, {"type": "combination", "instruction": "In your code, the class TaskFormatter should have these properties projectName, taskName."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 9], "6": [0, 5, 9], "8": [0, 7, 9]}, "question_id": 184}
{"question": "Write a Python program that converts a given string into a new string where each word is replaced by a corresponding emoji code if it matches a known emoji representation. The program should be able to handle a predefined set of emoji representations and return the original word if no emoji match is found. The program should define a function `convert_to_emoji` that takes a single string argument and returns the converted string. The function should use a dictionary to map plain text representations of emojis to their corresponding emoji codes. For example, a smile represented by `\":)\"` should be converted to `\":smile:\"`, and a sad face represented by `\":(\"` should be converted to `\":sad:\"`. If the word does not match any of the predefined emoji representations, it should be left unchanged. The program should also include test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named emoji_map."}, {"type": "variable", "instruction": "Variable emoji_map, type should be dict."}, {"type": "variable", "instruction": "Variable emoji_map, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named convert_to_emoji."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named EmojiConverter."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named emoji_converter."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 185}
{"question": "Implement a matrix `CSRMatrix` expressed in CSR format in C++, and implement the multiplication of these two sparse matrices, with the resulting output represented in the `CSRMatrix` format. In order to facilitate inspection and debug, it is necessary to support the conversion of `CSRMatrix` into its dense matrix form in `CSRMatrix`. The function signatures are: `std::vector<std::vector<double>> to_dense()` and `void from_dense(const std::vector<std::vector<double>> &matrix)`. Individually support a multiplication function for a sparse matrix: `void sparseMatrixMultiply(const CSRMatrix& A, const CSRMatrix& B, CSRMatrix& C)`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `matrixData`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `MatrixType`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `matrixData`, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named `IMatrixOperations`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `CSRMatrix`."}, {"type": "combination", "instruction": "Your code should define a class named `CSRMatrix` that implements the `IMatrixOperations` interface."}], "instruction_dependence": {"6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "9": [0, 1, 2, 8], "11": [0, 1, 2, 8, 10]}, "question_id": 186}
{"question": "In the Elysian Oracle system, there is a need to track the prices of various assets as provided by different price feeders. The system should allow registered price feeders to submit price data for different assets. Each price data submission includes the asset identifier, the source of the price data, and the provider's address. Your task is to implement the `FeedPrice` function within the `MsgServer` service that handles incoming price feed messages. The function should validate that the price feeder is active before accepting the price data. If the price feeder is not active or does not exist, the function should return an error. If the price feeder is active, the function should store the price data along with the timestamp of the block in which the transaction is included. Additionally, implement the `GetPrice` function in the keeper that retrieves the price data for a given asset, source, and timestamp. If the price data is found, it should return the data and a boolean `true`, otherwise, it should return an empty struct and `false`. Use the provided code snippet as a starting point for your implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should use the `defer` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `map`."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `priceData`."}, {"type": "variable", "instruction": "Variable `priceData`, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named `PriceKeeper`."}, {"type": "file", "instruction": "Your code should import the following libraries `time`, `errors`."}, {"type": "file", "instruction": "Your code should use the function `Now` from the library `time`."}, {"type": "combination", "instruction": "You should initialize an object named `keeper` as an instance of the `PriceKeeper` class using `[]` for initialization."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "11": [0, 1, 2, 3, 8]}, "question_id": 187}
{"question": "In a tactical simulation game, AI agents need to select the best cover location based on their current situation. The game's AI uses a scoring system to evaluate potential cover locations. The scoring system takes into account the distance from the user's location to the cover, the distance from the cover to the target (an enemy or objective), and the angle between the user's facing direction and the direction to the target from the cover location. Your task is to implement a class `CoverScorer` that evaluates potential cover locations and returns a score based on the following criteria: 1. `ScoreByDistance`: The closer the cover is to the user's location, the higher the score. The score is inversely proportional to the distance, normalized by the maximum distance observed. 2. `ScoreByDistanceToTarget`: The score is highest when the cover is at an intermediate distance from the target. If the cover is too close or too far from the target, the score decreases. 3. `ScoreByAngle`: The score is based on the cosine of the angle between the user's facing direction and the direction to the target from the cover. A higher cosine value (closer to 1) means the cover is more directly between the user and the target, which is preferred. 4. `Score`: The final score is a weighted sum of the above three scores. The weights depend on the usage context (e.g., hiding or unhiding). Implement the `CoverScorer` class with the following methods: - `ScoreByDistance` - `ScoreByDistanceToTarget` - `ScoreByAngle` - `Score` The `Params` struct is provided to you with the following fields: - `Vec3 location`: The potential cover location. - `Vec3 userLocation`: The user's current location. - `Vec3 target`: The location of the target. - `Vec3 direction`: The user's facing direction. - `float totalLength`: The maximum distance observed for normalization. - `enum CoverUsage { eCU_Hide, eCU_UnHide } usage`: The context of usage.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure std::map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named maxScore."}, {"type": "variable", "instruction": "Your code should define an enumeration named CoverUsage."}, {"type": "variable", "instruction": "Variable maxScore, the initial value should be 0.0."}, {"type": "function", "instruction": "Your code should not use any functions from the std::sort."}, {"type": "class", "instruction": "Your code should define a class named CoverScorer."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named TacticalAI."}, {"type": "combination", "instruction": "Your code should be organized in a package named TacticalAI, which should contain these functions ScoreByDistance, ScoreByDistanceToTarget, ScoreByAngle, Score."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"7": [0, 1, 5, 13], "10": [0, 1, 9, 13], "12": [0, 1, 11, 13]}, "question_id": 188}
{"question": "Write a Go program that defines a function `reverseWordsInSentence` which takes a string `sentence` as input and returns a new string. The function should reverse each word in the `sentence` while keeping the word order intact. Words in the `sentence` are separated by spaces. It is guaranteed that the `sentence` does not have leading or trailing spaces and the words are separated by a single space.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named reversedSentence."}, {"type": "variable", "instruction": "Your code should define an enumeration named WordOrder."}, {"type": "variable", "instruction": "Variable reversedSentence should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named reverseWordsInSentence."}, {"type": "interface", "instruction": "Your code should define an interface named SentenceProcessor."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SentenceReverser."}, {"type": "file", "instruction": "Your code should be organized in a package named wordreverser."}, {"type": "combination", "instruction": "You should initialize an object named reverser as an instance of the SentenceReverser class using sentence for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named wordreverser, which should contain these classes SentenceReverser."}], "instruction_dependence": {"6": [0, 1, 2, 4], "9": [0, 1, 2, 8], "12": [0, 1, 2, 10], "13": [0, 1, 2, 10, 11]}, "question_id": 189}
{"question": "You are tasked with creating a Python script that automates the process of scraping job listings from various blockchain-related companies. Each company has a unique URL where their job listings are posted, and they all use the Greenhouse platform for their job boards. The script should be able to scrape job listings from multiple companies, extract relevant job details, and print them out. The job details to be extracted include: Job title, Location, Job description (a brief summary), and Application link. The script should use the Selenium WebDriver to navigate the web pages and scrape the required information. The provided code snippet includes a list of `CompanyItem` objects, each representing a company with attributes such as the company name, jobs URL, scraper type, company website, and industry type. Write a Python script that meets the following requirements: 1. Define a `CompanyItem` class with attributes for the company name, jobs URL, scraper type, company website, and industry type. 2. Define a `ScrapeGreenhouse` class with a method `getJobs` that takes a Selenium WebDriver instance, a jobs URL, and a company name as arguments and returns a list of dictionaries, each containing the job details mentioned above. 3. Use the provided list of `CompanyItem` objects to iterate over each company and scrape their job listings using the `ScrapeGreenhouse` class. 4. Print out the job details for each company. 5. Ensure the Selenium WebDriver is properly closed after the scraping is completed.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "function", "instruction": "Your code should include a function named getJobs."}, {"type": "class", "instruction": "Your code should define a class named ScrapeGreenhouse."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {}, "question_id": 190}
{"question": "Design a calculator for addition, subtraction, multiplication, and division using PyQt5. The interface has a text box for entering numbers and arithmetic expressions, which supports the input of expressions (including parentheses) such as: 1+2*3/4-5. The interface has a text box for displaying results. After the user enters the expression, when the calculation button is pressed, the content of the results display box is updated to the calculation result of the expression. When the user's input expression cannot be calculated, output 'Invalid expression!'. Code format requirements: encapsulate the entire ui code into a class named Calculator, name the expression input box as expression_input, the calculate button as calc_button, and the result display area as result_label.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Operation."}, {"type": "interface", "instruction": "Your code should define an interface named ICalculator."}, {"type": "class", "instruction": "Your code should define a class named Calculator."}, {"type": "combination", "instruction": "Your code should define a class named Calculator that implements the ICalculator interface."}, {"type": "combination", "instruction": "In your code, the class Calculator should have these methods ['calculate', 'validate_expression', 'update_result']."}], "instruction_dependence": {"7": [0, 1, 2, 5, 6], "8": [0, 1, 2, 6]}, "question_id": 191}
{"question": "Design a Java program that validates domain objects using Java Bean Validation (JSR 380) and throws a custom exception if any constraint violations are found. The domain objects should be part of a package named `br.com.vivian.condominioctapagar.domain`. Each domain object should extend from a base class `BaseDominio` that contains the validation logic. The `BaseDominio` class should have an abstract method `validarDominio()` that performs the validation of the domain object's properties. If any constraints are violated, the method should collect the violation messages and throw a custom exception named `DominioInvalidoException`. The exception message should be a concatenation of all violation messages, each separated by a newline character. The domain objects should be annotated with validation constraints (e.g., `@NotNull`, `@Size`, `@Pattern`) on their fields. The `BaseDominio` class should use the `Validator` API to validate the object and collect any constraint violations. Provide a concrete implementation of a domain object named `ContaPagar` with at least two fields with validation constraints. Also, provide a main method that creates an instance of `ContaPagar`, attempts to validate it, and catches the `DominioInvalidoException` to print the violation messages.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "variable", "instruction": "Your code should define a variable named validator."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable MAX_VIOLATIONS, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named validateDomain."}, {"type": "interface", "instruction": "Your code should define an interface named Validatable."}, {"type": "class", "instruction": "Your code should define a class named BaseDominio."}, {"type": "file", "instruction": "Your code should be organized in a package named br.com.vivian.condominioctapagar.domain."}, {"type": "combination", "instruction": "You should define an interface named Validatable that includes these methods validateDomain."}, {"type": "combination", "instruction": "The function validateDomain should take domainObject as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named br.com.vivian.condominioctapagar.domain, which should contain these classes BaseDominio, ContaPagar."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"3": [0, 2, 12], "4": [0, 2, 12], "9": [0, 6, 12], "10": [0, 5, 12], "11": [0, 7, 8, 12]}, "question_id": 192}
{"question": "Create a Java class named `AssetEntryTitleDisplayContributorField` that implements an interface `AssetDisplayContributorField` for handling the title of an `AssetEntry`. The class should be responsible for providing the key, label, type, and value of the title field of an asset entry. The title should be obtained from the `AssetEntry` object passed to the `getValue` method. The `AssetDisplayContributorField` interface should have the following methods: `String getKey()`, `String getLabel(Locale locale)`, `String getType()`, and `String getValue(AssetEntry assetEntry, Locale locale)`. The `AssetEntryTitleDisplayContributorField` class should be annotated with `@Component` to register it as an OSGi component with the property `model.class.name=com.liferay.asset.kernel.model.AssetEntry` and the service `AssetDisplayContributorField`.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `locale`."}, {"type": "variable", "instruction": "Variable `locale`, type should be `Locale`."}, {"type": "function", "instruction": "Your code should include a function named `getValue`."}, {"type": "interface", "instruction": "Your code should define an interface named `AssetDisplayContributorField`."}, {"type": "class", "instruction": "Your code should define a class named `AssetEntryTitleDisplayContributorField`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.liferay.asset.kernel.model`."}, {"type": "combination", "instruction": "Your code should define a class named `AssetEntryTitleDisplayContributorField` that implements the `AssetDisplayContributorField` interface."}, {"type": "combination", "instruction": "The function `getValue` should take `AssetEntry assetEntry, Locale locale` as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.liferay.asset.kernel.model`, which should contain these functions `getKey, getLabel, getType, getValue`."}], "instruction_dependence": {"3": [0, 2], "8": [0, 5, 6], "9": [0, 4], "10": [0, 7]}, "question_id": 193}
{"question": "Implement a Java class `AnalyticsEventTracker` that tracks events for different plugins and packages using Google Analytics. The class should be able to send both synchronous and asynchronous event tracking requests to Google Analytics, with the ability to anonymize IP addresses. The class should also provide a method to print the event details to the console for debugging purposes. The `AnalyticsEventTracker` class should have the following methods: - `trackEvent(String pluginName, String packageName, boolean async)`: Tracks an event with the given plugin name and package name. If `async` is true, the event is sent asynchronously; otherwise, it is sent synchronously. - `printEventDetails(EventHit event)`: Prints the details of the given `EventHit` to the console. The class should handle null values for `pluginName` and `packageName` by substituting them with `\"<No plugin name>\"` and `\"<No package name>\"` respectively.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named eventDetails."}, {"type": "function", "instruction": "Your code should include a function named trackEvent."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the System.exit disallowed function list."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 7, 10]}, "question_id": 194}
{"question": "Write a Python script that simulates a simple database migration system for a hypothetical web application. The application has a database table named `pages` which contains a column `url` that needs to be altered. Initially, the `url` column is non-nullable, but a new requirement has emerged to make this column nullable to accommodate pages that do not have a URL yet. Your task is to create two functions, `upgrade()` and `downgrade()`, which simulate the database migration process. The `upgrade()` function should alter the `url` column to be nullable, and the `downgrade()` function should revert this change, making the `url` column non-nullable again. The script should use the Alembic migration tool and SQLAlchemy to perform the database alterations. You must also provide test cases to verify the correctness of the migration functions.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named migration_status."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable migration_status, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named Migration."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['alembic', 'sqlalchemy']."}, {"type": "file", "instruction": "Your code should use the function alter_column from the library alembic."}, {"type": "combination", "instruction": "In your code, the class Migration should have these methods ['upgrade', 'downgrade']."}], "instruction_dependence": {"7": [0, 1, 6], "8": [0, 1, 6], "10": [0, 1, 9], "12": [0, 1, 11], "13": [0, 1, 9]}, "question_id": 195}
{"question": "Implement a simple thread-safe counter using eventfd. The counter should be able to increment and read its value atomically. The counter will be encapsulated in a class named `EventCounter`. The class should provide two methods: `increment()` to increment the counter by 1, and `get_value()` to read the current value of the counter. The `EventCounter` class should use the `eventfd` system call to create a file descriptor that will be used for atomic counter increments and reads. The `EFD_CLOEXEC` flag should be used when creating the eventfd to ensure that the file descriptor is automatically closed on exec() calls. The `increment()` method should write the value `1` to the eventfd, and the `get_value()` method should read the current value from the eventfd. Provide a main function that demonstrates the usage of the `EventCounter` class by creating an instance, incrementing the counter, and printing its value.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `counter_value`."}, {"type": "variable", "instruction": "Variable `counter_value`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `print_counter_value`."}, {"type": "interface", "instruction": "Your code should define an interface named `CounterInterface`."}, {"type": "class", "instruction": "Your code should define a class named `EventCounter`."}, {"type": "combination", "instruction": "You should define an interface named `CounterInterface` that includes these methods `increment`, `get_value`."}, {"type": "combination", "instruction": "In your code, the class `EventCounter` should have these properties `fd`, `counter_value`."}, {"type": "combination", "instruction": "In your code, the class `EventCounter` should have these methods `increment`, `get_value`."}, {"type": "combination", "instruction": "The function `get_value` should return a `uint64_t` as its result."}], "instruction_dependence": {"5": [0, 1, 4], "9": [0, 1, 7], "10": [0, 1, 8], "11": [0, 1, 8], "12": [0, 1, 6]}, "question_id": 196}
{"question": "Design a Go program that simulates a simplified version of a financial system's debit reversal process. The system should be able to reverse a debit transaction and track the status of the reversal. The program should include the following components:\n\n1. A `TreasuryDebitReversal` struct that represents a debit reversal with the following fields:\n   - `ID`: A unique identifier for the debit reversal.\n   - `Amount`: The amount of money to be reversed (in cents).\n   - `Currency`: The currency of the transaction (e.g., \"usd\").\n   - `FinancialAccount`: The identifier of the financial account from which funds are reversed.\n   - `Network`: The network used to reverse the funds (e.g., \"ach\", \"card\").\n   - `Status`: The current status of the debit reversal (e.g., \"failed\", \"processing\", \"succeeded\").\n   - `ReceivedDebit`: The identifier of the received debit being reversed.\n\n2. A function `ReverseDebit` that takes a `TreasuryDebitReversalParams` struct as input and returns a `TreasuryDebitReversal` struct. This function should simulate the reversal of a debit transaction by creating a new `TreasuryDebitReversal` object with a unique ID, the specified amount, currency, financial account, and network. The status should be set to \"processing\" initially.\n\n3. A function `UpdateDebitReversalStatus` that takes a `TreasuryDebitReversal` pointer and a new status as input and updates the status of the given `TreasuryDebitReversal`. If the new status is \"succeeded\", the function should also simulate the completion of the reversal by updating the `CompletedAt` timestamp in the `StatusTransitions` field.\n\n4. Test cases to verify the correctness of the `ReverseDebit` and `UpdateDebitReversalStatus` functions.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the struct keyword."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "function", "instruction": "Your code should include a function named ReverseDebit."}, {"type": "class", "instruction": "Your code should define a class named TreasuryDebitReversal."}, {"type": "combination", "instruction": "You should initialize an object named reversal as an instance of the TreasuryDebitReversal class using id, amount, currency, financialAccount, network, status, and receivedDebit for initialization."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 7, 8]}, "question_id": 197}
{"question": "Design a Go program that provides an authentication system using JSON Web Tokens (JWT). The system should be able to generate a JWT for a user with a unique identifier and validate the token to ensure it is correct and has not expired. The token should expire after 24 hours. The program should consist of two main functions: 1. `GenerateJwt(userID string) (string, error)`: This function takes a user's unique identifier as input and generates a JWT token that includes the user's ID as the `Subject` and has an expiration time of 24 hours from the time of generation. 2. `ParseJWT(jwtToken string) (string, error)`: This function takes a JWT token as input and validates it. If the token is valid and has not expired, it returns the user's ID contained in the `Subject` field of the token. If the token is invalid or expired, it returns an error. The JWT should be signed with a secret key that is retrieved from an environment variable `APP_KEY`.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `const` keyword."}, {"type": "variable", "instruction": "Your code should define an enumeration named `TokenStatus`."}, {"type": "function", "instruction": "Your code should include a function named `GenerateJwt`."}, {"type": "interface", "instruction": "Your code should define an interface named `TokenValidator`."}, {"type": "class", "instruction": "Your code should define a class named `JWTManager`."}, {"type": "file", "instruction": "Your code should be organized in a package named `auth`."}, {"type": "combination", "instruction": "The function `GenerateJwt` should take `userID string` as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named `auth`, which should contain these classes `JWTManager`."}], "instruction_dependence": {"7": [0, 1, 3], "8": [0, 1, 5, 6]}, "question_id": 198}
{"question": "Write a program that finds the median of three distinct integers. Given three different integers `a`, `b`, and `c`, the median is the value that would be in the middle if they were sorted. The program should take an integer `t` as input, which represents the number of test cases, followed by `t` sets of three integers each. For each set of three integers, the program should output the median value.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "variable", "instruction": "Your code should define a variable named median."}, {"type": "variable", "instruction": "Variable median, should be a global variable."}, {"type": "variable", "instruction": "Variable median, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named MedianFinder."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named MedianCalculator."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "In your code, the class MedianCalculator should have these methods findMedian."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 11, 12], "5": [0, 1, 2, 3, 11, 12], "7": [0, 1, 2, 6, 11, 12], "9": [0, 1, 2, 8, 11, 12], "10": [0, 1, 2, 8, 11, 12]}, "question_id": 199}
{"question": "Design a Java program that simulates a simple chatbot. The chatbot should be able to respond to a user's greeting with a personalized message. The program should take a user's name as input and output a greeting message that includes the user's name. The chatbot should also be able to handle different times of the day, such as 'morning', 'afternoon', and 'evening', and respond with an appropriate greeting for that time of day. For example, if the user's name is 'Karima' and the time of day is 'morning', the chatbot should respond with 'Good morning, Karima!'. The program should define a method `greetUser(String name, String timeOfDay)` that returns the greeting message.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named greetUser."}, {"type": "interface", "instruction": "Your code should define an interface named GreetingInterface."}, {"type": "class", "instruction": "Your code should define a class named Chatbot."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.Scanner."}, {"type": "file", "instruction": "Your code should use the function nextLine from the library java.util.Scanner."}, {"type": "combination", "instruction": "You should define an interface named GreetingInterface that includes these methods greetUser."}, {"type": "combination", "instruction": "Your code should define a class named Chatbot that implements the GreetingInterface interface."}], "instruction_dependence": {"8": [0, 1, 7], "9": [0, 1, 5], "10": [0, 1, 5, 6]}, "question_id": 200}
{"question": "Design a network connectivity system using the Union-Find data structure. The system should be able to process three types of commands:\n\n1. `C a b`: Check if nodes `a` and `b` are connected. If they are connected, output \"yes\"; otherwise, output \"no\".\n2. `I a b`: Connect nodes `a` and `b`. If they are not already connected, union their sets.\n3. `S`: Stop processing commands and output the connectivity status of the network. If the entire network is connected, output \"The network is connected.\"; otherwise, output \"There are X components.\", where X is the number of disconnected components in the network.\n\nThe nodes in the network are numbered from 1 to N, where N is the total number of nodes. Initially, each node is in its own set, disconnected from the others.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named `parent`."}, {"type": "variable", "instruction": "Variable `parent`, type should be list."}, {"type": "variable", "instruction": "Variable `parent`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `find`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `collections` module."}, {"type": "class", "instruction": "Your code should define a class named `UnionFind`."}, {"type": "file", "instruction": "Your code should not use the following libraries `numpy`, `pandas`."}, {"type": "combination", "instruction": "You should initialize an object named `uf` as an instance of the `UnionFind` class using `N` for initialization."}, {"type": "combination", "instruction": "The function `find` should take `x` as a parameter."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "5": [0, 4], "9": [0, 7], "10": [0, 4]}, "question_id": 201}
{"question": "Create a Python program that acts as a voice-activated assistant, capable of performing simple tasks such as searching Wikipedia, playing YouTube videos, opening websites, and telling the time. The assistant should greet the user based on the time of day and respond to specific voice commands. The program should include the following functionalities: 1. Greeting the user with 'Good Morning', 'Good Afternoon', or 'Good Evening' based on the current time, followed by an introduction and an offer to assist. 2. Taking voice commands from the user and recognizing the intent of the command. 3. If the command includes 'wikipedia', the assistant should search Wikipedia for the topic mentioned in the command and read out a summary. 4. If the command includes 'play', the assistant should play the requested song or video on YouTube. 5. If the command includes 'open youtube/google/gmail', the assistant should open the respective website in a web browser. 6. If the command includes 'the time', the assistant should tell the current time. 7. The assistant should be able to respond to simple greetings and questions like 'hello iris', 'what are you doing', and 'how are you'. 8. If the command is not recognized, the assistant should ask the user to repeat the command.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "variable", "instruction": "Your code should define a variable named 'assistant_name'."}, {"type": "variable", "instruction": "Variable 'assistant_name', the initial value should be 'Iris'."}, {"type": "variable", "instruction": "Variable 'assistant_name', should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'greet_user'."}, {"type": "interface", "instruction": "Your code should define an interface named 'VoiceCommandHandler'."}, {"type": "class", "instruction": "Your code should define a class named 'VoiceAssistant'."}, {"type": "combination", "instruction": "Your code should define a class named 'VoiceAssistant' that implements the 'VoiceCommandHandler' interface."}, {"type": "combination", "instruction": "The function 'greet_user' should take 'current_time' as a parameter."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "9": [0, 1, 2, 7, 8], "10": [0, 1, 2, 6]}, "question_id": 202}
{"question": "Create a 3D Scene with Interactive Camera and Objects using OpenGL and SDL2. The scene should include a large plane, multiple cubes, and triangles. Implement camera movement with keyboard inputs (WASD for movement and mouse for looking around). Cubes and triangles should rotate over time, with cubes rotating around all axes and triangles rotating around the Y-axis. Only render objects within the camera's field of view. The scene should have a clear color of magenta (RGB: 1.0, 0.0, 1.0). The application should close gracefully when the user presses the 'Q' key or closes the window.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cameraSpeed."}, {"type": "variable", "instruction": "Variable cameraSpeed, should not be a global variable."}, {"type": "variable", "instruction": "Variable cameraSpeed, the initial value should be 0.05."}, {"type": "function", "instruction": "Your code should include a function named handleInput."}, {"type": "class", "instruction": "Your code should define a class named SceneObject."}, {"type": "file", "instruction": "Your code should be organized in a package named graphics."}, {"type": "combination", "instruction": "The function handleInput should take deltaTime as a parameter."}, {"type": "combination", "instruction": "The function handleInput should return a void as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named graphics, which should contain these classes SceneObject, Camera, and Renderer."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "11": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 8], "13": [0, 1, 2, 3, 9, 10]}, "question_id": 203}
{"question": "Implement a simple encryption and decryption service that uses hexadecimal encoding. The service should be able to encode a given plaintext message into a hexadecimal string and decode a given hexadecimal string back into the original plaintext message. The service will be represented by a `HexCipher` struct with two methods: `Encrypt` and `Decrypt`. The `Encrypt` method takes a byte slice representing the plaintext and returns a byte slice representing the hexadecimal encoded string. The `Decrypt` method takes a byte slice representing the hexadecimal encoded string and returns a byte slice representing the original plaintext. The hexadecimal encoding should be done using the `encoding/hex` package from the Go standard library. Additionally, provide test cases to verify the correctness of the `Encrypt` and `Decrypt` methods.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `encodedMessage`."}, {"type": "variable", "instruction": "Variable `encodedMessage` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `TestHexCipher`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `HexCipher`."}, {"type": "combination", "instruction": "In your code, the class `HexCipher` should have these methods `Encrypt` and `Decrypt`."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 4, 10], "7": [0, 1, 6, 10], "9": [0, 1, 8, 10]}, "question_id": 204}
{"question": "Design a Java function that performs a zigzag level order traversal of a binary tree. A binary tree's zigzag level order traversal means the nodes at each level are traversed from left to right, then right to left for the next level, and alternate between. Write a function `zigzagLevelOrder` that takes the root of a binary tree and returns a list of lists of integers representing the zigzag level order traversal of the nodes' values. (i.e., from left to right, then right to left for the next level and alternate between). For example, given a binary tree:\n\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\nThe zigzag level order traversal of its nodes' values is:\n\n```\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure LinkedList."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Your code should define an enumeration named TraversalDirection."}, {"type": "variable", "instruction": "Variable result, the initial value should be new ArrayList<>()."}, {"type": "function", "instruction": "Your code should include a function named zigzagLevelOrder."}, {"type": "interface", "instruction": "Your code should define an interface named TreeTraversal."}, {"type": "class", "instruction": "Your code should define a class named TreeNode."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named binarytree."}, {"type": "combination", "instruction": "Your code should define a class named ZigzagTraversal that implements the TreeTraversal interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named binarytree, which should contain these classes TreeNode, ZigzagTraversal."}], "instruction_dependence": {"4": [0, 2], "8": [0, 7], "10": [0, 6, 7], "11": [0, 7, 9]}, "question_id": 205}
{"question": "Design a class `JsonSerializer` that uses Jackson to serialize Java objects to JSON strings. The class should provide a method `serialize` that takes a generic Java object and returns its JSON representation as a string. The class should also provide a method `configure` that allows enabling or disabling the pretty-print feature (indentation in the output JSON). The `JsonSerializer` class should be tested to ensure that: 1. It can serialize a simple POJO (Plain Old Java Object) to JSON. 2. It can serialize a list of POJOs to JSON. 3. It respects the pretty-print configuration. Provide a sample POJO class `Person` with at least two fields (e.g., `name` and `age`) for testing purposes.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "variable", "instruction": "Your code should define a variable named prettyPrintEnabled."}, {"type": "variable", "instruction": "Variable prettyPrintEnabled, should not be a global variable."}, {"type": "variable", "instruction": "Variable prettyPrintEnabled, the initial value should be false."}, {"type": "variable", "instruction": "Variable prettyPrintEnabled should not be a constant."}, {"type": "file", "instruction": "Your code should not use the following libraries Gson."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3]}, "question_id": 206}
{"question": "Design a Monte Carlo Tree Search (MCTS) based AI to play a simplified version of a 2-player turn-based strategy game on a square grid. The game is played on an `n x n` board where `n` is an even number greater than 2. Two players, Crosses (player 1) and Noughts (player 2), take turns placing their symbol (1 for Crosses, 2 for Noughts) on an empty cell. The game ends when all cells are filled. The winner is the player with the most symbols in a row, column, or diagonal. If neither player achieves this, the game is a draw.\n\nImplement the following functions to create the AI:\n\n1. `getChildren(parent, player)`: Generates all possible child states from the current state for the given player.\n2. `backpropagation(child)`: Propagates the value of a child node up the tree, updating the parent nodes' values.\n3. `updateValues(boardsToUpdate, feature)`: Updates the values of the given boards using a neural network model and backpropagates the values.\n4. `treeMove(gameTrees, feature, random)`: Selects the next move for each game tree, either randomly or based on the highest value, and updates the game trees.\n5. `montePlay(feature, board)`: Simulates multiple games using MCTS, updates the neural network model with the game outcomes, and returns the winning statistics.\n\nThe neural network model is represented by the `feature` object, which has a `calcValue` method that takes a list of game states and returns their predicted values, and `neuralTrainingGame` and `neuralContinuousTrain` methods for training the model with game outcomes.\n\nThe `terminate(board)` function checks the game state and returns 0 if the game is ongoing, 1 if Crosses win, 2 if Noughts win, or 3 if it's a draw.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `board_size`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `Player`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `board_size`, should be a constant."}, {"type": "file", "instruction": "Your code should not use the following libraries ['tensorflow', 'keras']."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 5, 10], "8": [0, 1, 2, 3, 5, 10]}, "question_id": 207}
{"question": "Please convert the following code to a C++ implementation with the function signature `std::string encrypt(std::string s)`. Only implement the target function and import the necessary packages, do not generate any other code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure std::string."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named s."}, {"type": "variable", "instruction": "Variable s, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named encrypt."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Encryptor."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named encryption."}, {"type": "combination", "instruction": "In your code, the class Encryptor should have these methods encrypt, decrypt."}], "instruction_dependence": {"5": [0, 4], "7": [0, 6], "9": [0, 8], "11": [0, 8]}, "question_id": 208}
{"question": "Please write a description of a Java program to find and print the names of all files with a specific extension in a given directory. The user needs to input the directory path and the file extension they want to search for. If the directory exists and contains files with the specified extension, print out the names of those files. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\npublic class 文件查找器 {\n    public static void 查找并打印文件(String 目录路径, String 文件扩展名) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 文件列表."}, {"type": "variable", "instruction": "Variable 文件列表, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 查找并打印文件."}, {"type": "class", "instruction": "Your code should define a class named 文件查找器."}, {"type": "file", "instruction": "Your code should import the following libraries java.io.File."}, {"type": "file", "instruction": "Your code should use the function listFiles from the library java.io.File."}, {"type": "combination", "instruction": "In your code, the class 文件查找器 should have these methods 查找并打印文件."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9], "11": [0, 1, 2, 8]}, "question_id": 209}
{"question": "Design a Java class `SunburstFilter` that applies a sunburst effect to an image. The sunburst effect should radiate from a specified center point and have configurable properties such as the number of rays, the intensity of the rays, and the color of the rays. The class should extend a base image filter operation and implement an interface for dynamic filtering with parameters. The class should provide methods to set and get the properties of the sunburst effect, including the number of rays, intensity, and color. It should also include a method to apply the filter to a `BufferedImage` source and return the resulting image. The `SunburstFilter` class should handle edge cases, such as invalid parameter values, and throw appropriate exceptions when necessary. The class should be well-documented with Javadoc comments explaining the purpose and usage of each method.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `extends` keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `centerPoint`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `RayColor`."}, {"type": "variable", "instruction": "Variable `MAX_RAYS`, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `DynamicFilter`."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"5": [0, 1, 3, 7]}, "question_id": 210}
{"question": "Implement a C++ class `ResizableRectangle` that inherits from a hypothetical `Rectangle` class and overrides the implicit size properties to allow resizing. The `ResizableRectangle` class should have the following features:\n\n1. It should have a constructor that takes the initial width and height as parameters.\n2. It should have member functions `setImplicitWidth` and `setImplicitHeight` to allow changing the implicit size of the rectangle.\n3. It should have member functions `getImplicitWidth` and `getImplicitHeight` to retrieve the current implicit size of the rectangle.\n4. It should have a member function `resize` that takes a new width and height and updates both the implicit size and the actual size of the rectangle.\n5. The actual size of the rectangle should never be smaller than the implicit size.\n\nAssume that the `Rectangle` class has protected member variables `implicitWidth` and `implicitHeight`, and public member functions `setWidth` and `setHeight` to set the actual size of the rectangle.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `resizeFactor`."}, {"type": "variable", "instruction": "Variable `resizeFactor` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `calculateArea`."}, {"type": "class", "instruction": "Your code should define a class named `ResizableRectangle`."}, {"type": "combination", "instruction": "In your code, the class `ResizableRectangle` should have these methods `setImplicitWidth`, `setImplicitHeight`, `getImplicitWidth`, `getImplicitHeight`, `resize`."}, {"type": "combination", "instruction": "The function `resize` should take `newWidth`, `newHeight` as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"5": [0, 1, 4, 10], "8": [0, 1, 7, 10], "9": [0, 1, 6, 10]}, "question_id": 211}
{"question": "Design a search API for a municipal signals system that allows users to search for signals and status messages using Elasticsearch. The API should support fuzzy searching, sorting, pagination, and filtering based on certain fields. The signals and status messages are stored in an Elasticsearch index and are represented by the `SignalDocument` and `StatusMessagesSearch` classes, respectively. The API should consist of two views: 1. `SearchSignalsView` - This view should allow users to search for signals by a search term and sort the results by the `created_at` field. It should also support pagination. 2. `SearchStatusMessagesView` - This view should allow users to search for status messages by a search term and filter the results by `state` and `active` fields. It should also support pagination. Both views should handle cases where the Elasticsearch service is unavailable and return appropriate error messages. The API should be secured with JWT authentication and should only be accessible to users with the appropriate permissions.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `search_results`."}, {"type": "variable", "instruction": "Variable `search_results`, the initial value should be an empty list."}, {"type": "variable", "instruction": "Variable `search_results` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `search_signals`."}, {"type": "file", "instruction": "Your code should import the following libraries ['elasticsearch', 'flask', 'jwt']."}, {"type": "combination", "instruction": "The function `search_signals` should take ['search_term', 'page', 'page_size'] as parameters."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "9": [0, 1, 7]}, "question_id": 212}
{"question": "Design a Go program that manages the graceful shutdown of services in a concurrent environment. The program should allow services to register their shutdown functions, which will be called when the program receives a termination signal (such as SIGTERM or SIGINT). The shutdown functions should be executed in a safe and concurrent manner, ensuring that all registered services have a chance to clean up before the program exits. The program should use the provided `graceful_shutdown` package, which includes a `Closer` struct with a method to subscribe shutdown functions and a constructor that initializes the shutdown signal listener. Your task is to implement a `main` function that demonstrates the usage of the `graceful_shutdown` package. You should create a mock service that registers a shutdown function with the `Closer`. The shutdown function should simulate a cleanup process by printing a message and optionally sleeping for a short duration. Additionally, provide test cases that verify the correct registration of shutdown functions and their execution upon receiving a shutdown signal.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named cleanup."}, {"type": "interface", "instruction": "Your code should define an interface named Service."}, {"type": "class", "instruction": "Your code should define a class named MockService."}, {"type": "file", "instruction": "Your code should import the following libraries [\"os\", \"os/signal\", \"syscall\", \"time\"]."}, {"type": "file", "instruction": "Your code should use the function Notify from the library os/signal."}, {"type": "file", "instruction": "Your code should not use the following libraries [\"log\"]."}, {"type": "combination", "instruction": "In your code, the class MockService should have these properties [\"name\", \"duration\"]."}, {"type": "combination", "instruction": "The function cleanup should take [\"serviceName\", \"duration\"] as parameters."}], "instruction_dependence": {"10": [0, 1, 2, 9], "12": [0, 1, 2, 8], "13": [0, 1, 2, 6]}, "question_id": 213}
{"question": "Please use the OpenCV library to solve the following problem: Given an image, convert it to grayscale, resize it to a size of (500,560), process it using Gaussian blur, then resize it to a size of (500,600) using linear interpolation, and return the average pixel value of the final image. The answer needs to meet the following requirements: 1. Define a Python function resize_image() that does not require any input parameters and returns the average pixel value of the processed image. 2. The image file is 'butterfly.jpg' and is stored in the same path as the code. 3. The Gaussian kernel function of Gaussian blur is (3,3), and sigma is 0. 4. The returned result retains two decimal places.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "function", "instruction": "Your code should include a function named resize_image."}, {"type": "function", "instruction": "Your code should not use any functions from the disallowed_function_list."}, {"type": "file", "instruction": "Your code should import the following libraries OpenCV."}, {"type": "file", "instruction": "Your code should use the function GaussianBlur from the library OpenCV."}, {"type": "combination", "instruction": "The function resize_image should take no parameters as parameters."}, {"type": "combination", "instruction": "The function resize_image should return a float as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 7], "5": [0, 1, 7], "6": [0, 1, 7]}, "question_id": 214}
{"question": "Given a matrix of dimensions `m x n` (where `m` is the number of rows and `n` is the number of columns), initially filled with zeros, and an array of `indices` where `indices[i] = [ri, ci]` represents an operation that needs to be applied to the matrix. For each operation, increment all values in the `ri`-th row and the `ci`-th column by 1. Write a method `oddCells` in the `Solution` class that takes the number of rows `m`, the number of columns `n`, and the array of indices `indices`, and returns the number of cells with odd values in the matrix after applying all the operations.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named matrix."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named oddCells."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the numpy library."}, {"type": "file", "instruction": "Your code should be organized in a package named matrix_operations."}], "instruction_dependence": {"4": [0, 3], "6": [0, 5]}, "question_id": 215}
{"question": "Given a sequence of unique integers, write a program to construct a binary search tree (BST) which has the same preorder traversal as the given sequence. The program should define a `TreeNode` structure representing a node in the binary search tree and a `Solution` class with a method `bstFromPreorder` that takes a vector of integers representing the preorder traversal of the desired BST and returns the root node of the constructed BST.\n\nThe `TreeNode` structure is defined as follows:\n```cpp\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode() : val(0), left(nullptr), right(nullptr) {}\n    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n};\n```\n\nThe `Solution` class should contain the following methods:\n- `TreeNode* constructBST(vector<int> preorder, int* preorderIdx, int key, int min, int max, int n)`: A helper method that recursively constructs the BST from the preorder sequence.\n- `TreeNode* bstFromPreorder(vector<int>& preorder)`: The main method that initializes the construction process and returns the root of the BST.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `stack`."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `index`."}, {"type": "variable", "instruction": "The variable names in your code should follow the `snake_case` naming convention."}, {"type": "variable", "instruction": "Variable `index`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `index`, the initial value should be `0`."}, {"type": "function", "instruction": "Your code should include a function named `construct_bst`."}, {"type": "function", "instruction": "The function names in your code should follow the `snake_case` naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `algorithm` library."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "class", "instruction": "The class names in your code should follow the `PascalCase` naming convention."}, {"type": "combination", "instruction": "The function `bstFromPreorder` should return a `TreeNode*` as its result."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "9": [0, 1, 8], "12": [0, 1, 11], "13": [0, 1, 8]}, "question_id": 216}
{"question": "Create a Java utility class named `ExcelExporter` that provides a method to export a list of Java objects to an Excel file using the EasyPOI library. The utility class should allow users to specify the sheet name, the data list, and the class type of the data list. The exported Excel file should be in `.xls` format and should be sent directly to the client through an `HttpServletResponse`. The method should handle any exceptions that occur during the export process and ensure that all resources are properly closed. The method should also set the appropriate response headers to indicate the content type and to prompt the user to download the file. Write a method `exportToExcel` in the `ExcelExporter` class that adheres to the following guidelines: - The method accepts four parameters: - `HttpServletResponse response`: The response object to which the Excel file will be written. - `String sheetName`: The name of the Excel sheet. - `List<?> dataList`: The list of data objects to be exported. - `Class<?> dataClass`: The class type of the data objects in the list. - The method sets the response header to `application/vnd.ms-excel` to indicate the MIME type of the Excel file. - The method uses the EasyPOI library to create an Excel workbook with the specified sheet name and data. - The method writes the Excel workbook to the `ServletOutputStream` of the response. - The method handles any `IOException` and ensures that the `ServletOutputStream` is flushed and closed properly.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `List`."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named `Exporter`."}, {"type": "interface", "instruction": "The interface names in your code should follow the `PascalCase` naming convention."}, {"type": "class", "instruction": "Your code should define a class named `ExcelExporter`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.utility.excel`."}, {"type": "combination", "instruction": "In your code, the class `ExcelExporter` should have these properties `response, sheetName, dataList, dataClass`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.utility.excel`, which should contain these functions `exportToExcel`."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 11], "9": [0, 1, 2, 7, 11], "10": [0, 1, 2, 8, 11]}, "question_id": 217}
{"question": "Design a simple chat client using Java NIO that can connect to a chat server, send messages, and receive messages. The client should be able to handle multiple incoming and outgoing messages in a non-blocking manner. The chat client should: - Connect to a server specified by hostname and port. - Use a selector to handle multiple channels. - Be able to send messages to the server. - Be able to receive messages from the server. - Print received messages to the console. - Send a predefined 'exit' message to disconnect from the server. The client should use a `SocketChannel` to connect to the server and should operate in non-blocking mode. It should register the channel with the selector for `OP_CONNECT`, `OP_READ`, and `OP_WRITE` operations. The client should handle the following scenarios: - When the channel is connectable, finish the connection setup. - When the channel is readable, read the message from the server and print it to the console. - When the channel is writable, write messages to the server.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the synchronized keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named clientSocket."}, {"type": "variable", "instruction": "Variable clientSocket, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named handleMessage."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ChatClient."}, {"type": "file", "instruction": "Your code should import the following libraries java.nio.channels, java.nio.ByteBuffer, java.net.InetSocketAddress, java.io.IOException."}, {"type": "combination", "instruction": "In your code, the class ChatClient should have these methods connectToServer, sendMessage, receiveMessage, disconnectFromServer."}], "instruction_dependence": {"7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "12": [0, 1, 2, 10]}, "question_id": 218}
{"question": "In a manufacturing system, there is a need to manage different types of parts (Pecas) that go through various stages of editing and processing. To facilitate the management of these parts, a custom annotation `@PecaEdicao` is used to qualify different components in the system for special processing or editing. Your task is to create a Java class named `PecaService` that will use the `@PecaEdicao` annotation to identify methods that are responsible for handling the editing process of parts. The `PecaService` class should have the following methods: 1. `editPeca`: This method should be annotated with `@PecaEdicao`. It takes an integer `id` representing the part's ID and a `String` representing the new details to be applied to the part. The method should return a `String` indicating that the part with the given ID has been edited with the new details. 2. `findPeca`: This method is not annotated with `@PecaEdicao`. It takes an integer `id` representing the part's ID and returns a `String` indicating the details of the part with the given ID. Write the `PecaService` class according to the above specifications and provide a simple test case in a `main` method to demonstrate the use of the `@PecaEdicao` annotation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named pecaDetails."}, {"type": "variable", "instruction": "Variable pecaDetails, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named editPeca."}, {"type": "function", "instruction": "Your code should not use any functions from the java.util.Collections."}, {"type": "class", "instruction": "Your code should define a class named PecaService."}, {"type": "file", "instruction": "Your code should be organized in a package named com.manufacturing."}, {"type": "file", "instruction": "Your code should import the following libraries java.lang.String."}, {"type": "combination", "instruction": "In your code, the class PecaService should have these properties id, details."}, {"type": "combination", "instruction": "The function editPeca should take id, newDetails as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.manufacturing, which should contain these classes PecaService, PecaTest."}], "instruction_dependence": {"6": [0, 1, 5], "12": [0, 1, 9], "13": [0, 1, 7], "14": [0, 1, 9, 10]}, "question_id": 219}
{"question": "Please design a Java method to add new book information to the book database and return the information of this added book. Assume you already have a class named `BookJpaRepository` which provides a method named `save` that can save a book object to the database and return the saved object. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Book {\n    private String bookId;\n    private String title;\n    private String author;\n    public Book(String bookId, String title, String author) {\n    }\n    public String getBookId() {\n    }\n    public void setBookId(String bookId) {\n    }\n    public String getTitle() {\n    }\n    public void setTitle(String title) {\n    }\n    public String getAuthor() {\n    }\n    public void setAuthor(String author) {\n    }\n    @Override\n    public String toString() {\n    }\n}\nclass BookJpaRepository {\n    public Book save(Book book) {\n    }\n}\npublic class BookManager {\n    private BookJpaRepository bookJpaRepository = new BookJpaRepository();\n    public Book addBook(Book book) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use data structure ArrayList."}, {"type": "variable", "instruction": "Your code should define a variable named newBook."}, {"type": "variable", "instruction": "Variable newBook, the initial value should be null."}, {"type": "interface", "instruction": "Your code should define an interface named BookRepository."}, {"type": "class", "instruction": "Your code should define a class named BookManager."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.library."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.ArrayList."}, {"type": "combination", "instruction": "Your code should define a class named BookManager that implements the BookRepository interface."}], "instruction_dependence": {"5": [0, 1, 2, 4], "10": [0, 1, 2, 6, 7]}, "question_id": 220}
{"question": "Design a Python program that uses the provided `EnumDef_2_0.py` module to create a neural network configuration class. This class should allow users to specify the type of neural network they want to create (fitting, binary classification, or multiple classification) and the method for initializing the network's weights (zero, normal, Xavier, or MSRA). The class should also include a method to display the selected configuration settings. The program should follow these requirements: - Use the `NetType` and `InitialMethod` enums from the `EnumDef_2_0.py` module to set the network type and initialization method. - Include a class named `NeuralNetworkConfig` with an `__init__` method that accepts `net_type` and `initial_method` as parameters. - Include a method named `display_config` within the `NeuralNetworkConfig` class that prints the current configuration to the console. - Validate the input parameters to ensure they are instances of the corresponding enums. - Include test cases to demonstrate the creation of different neural network configurations and the display of their settings.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the class keyword."}, {"type": "variable", "instruction": "Your code should define a variable named net_type."}, {"type": "variable", "instruction": "Your code should define an enumeration named NetType."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable net_type, should be a global variable."}, {"type": "variable", "instruction": "Variable net_type should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named display_config."}, {"type": "combination", "instruction": "The function display_config should return a None as its result."}], "instruction_dependence": {"4": [0, 1, 2], "5": [0, 1, 2], "6": [0, 1, 2], "8": [0, 1, 7]}, "question_id": 221}
{"question": "Write a Python function `sum_of_evens_or_odds` that calculates the sum of either even or odd numbers up to a given number `n` inclusive, based on the parity of `n`. If `n` is odd, the function should return the sum of all odd numbers up to `n`. If `n` is even, the function should return the sum of all even numbers up to `n`. The function should have the following signature:\n\n```python\ndef sum_of_evens_or_odds(n: int) -> int:\n    \"\"\"\n    Calculate the sum of even or odd numbers up to n inclusive.\n    \n    If n is odd, return the sum of odd numbers up to n.\n    If n is even, return the sum of even numbers up to n.\n    \n    Parameters:\n    n (int): The number up to which the sum is to be calculated.\n    \n    Returns:\n    int: The sum of either even or odd numbers up to n.\n    \n    Examples:\n    sum_of_evens_or_odds(7) should return 16 (1 + 3 + 5 + 7 = 16)\n    sum_of_evens_or_odds(10) should return 30 (2 + 4 + 6 + 8 + 10 = 30)\n    \"\"\"\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named `result`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named `sum_of_evens_or_odds`."}, {"type": "combination", "instruction": "The function `sum_of_evens_or_odds` should take `n` as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"3": [0, 1, 2, 6], "5": [0, 1, 4, 6]}, "question_id": 222}
{"question": "Design a Java class named `TweetSanitizer` that filters out tweets based on various criteria to ensure that the tweets are suitable for processing in a sentiment analysis system. The class should provide a method `isTweetSuitableForAnalysis` that takes a `Status` object (representing a tweet) and returns a boolean indicating whether the tweet meets the following criteria:\n\n1. The tweet is not a retweet.\n2. The tweet is in English.\n3. The tweet does not contain any URLs.\n4. The tweet does not contain any hashtags.\n5. The tweet does not contain any user mentions.\n6. The tweet is not from a weather update bot (identified by tweets starting with \"Get Weather Updates\").\n7. The tweet has a minimum length of 10 characters, excluding spaces.\n\nThe `Status` class is provided by the `twitter4j` library, which is a Java library for the Twitter API. You need to use the appropriate methods from the `Status` class to check each criterion.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should include a function named isTweetSuitableForAnalysis."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named TweetFilter."}, {"type": "class", "instruction": "Your code should define a class named TweetSanitizer."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries twitter4j."}, {"type": "combination", "instruction": "You should define an interface named TweetFilter that includes these methods isTweetSuitableForAnalysis."}, {"type": "combination", "instruction": "The function isTweetSuitableForAnalysis should take Status as parameters."}, {"type": "combination", "instruction": "The function isTweetSuitableForAnalysis should return a boolean as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "8": [0, 1, 7, 13], "10": [0, 1, 6, 13], "11": [0, 1, 4, 13], "12": [0, 1, 4, 13]}, "question_id": 223}
{"question": "Media Player Download Notification Service\n\nYou are tasked with creating a service for a media player application that handles the download of MP3 files and their corresponding lyrics files (LRC format). The service should run in the background and provide notifications to the user about the status of their downloads. The service should notify the user when a download starts, completes successfully, or fails.\n\nThe service should be able to handle multiple concurrent downloads and update the user on each download's progress. The notification should be dismissible once the user acknowledges it, but it should remain visible until then, even if the user navigates away from the media player app.\n\nImplement the `DownloadService` class, which extends `android.app.Service`, and includes the following features:\n\n1. A method to handle the start of the service and initiate the download process.\n2. A `DownloadThread` class that performs the download operation in a separate thread.\n3. A method to create notifications that inform the user of the download status.\n4. A method to update the notification with the appropriate message based on the download result.\n\nThe service should be able to handle the download of both the MP3 file and the corresponding LRC file. Assume that the `HttpDownload` class and the `Mp3Info` class are provided and work as expected.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named downloadStatus."}, {"type": "variable", "instruction": "Variable downloadStatus, type should be String."}, {"type": "variable", "instruction": "Variable downloadStatus, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named DownloadListener."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries android.app, android.content, android.os."}, {"type": "file", "instruction": "Your code should use the function startForeground from the library android.app.Service."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "9": [0, 8]}, "question_id": 224}
{"question": "Write a C++ program that implements the Jump Search algorithm to find a specific element in a sorted array. The Jump Search algorithm is a searching algorithm for sorted arrays that works by jumping ahead by fixed steps or skipping some elements in place of searching all elements. The input begins with an integer `n`, the size of the array. The next line contains `n` space-separated integers, the elements of the array. The third line contains an integer `key`, the element to be searched in the array. The program should output the index of the `key` in the array if it is present. If the `key` is not present in the array, the program should output `-1`. The array is assumed to be sorted in non-decreasing order, and all elements in the array are integers.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `step`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named `jump_search`."}, {"type": "class", "instruction": "Your code should define a class named `SearchAlgorithm`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `<iostream>, <vector>`."}, {"type": "file", "instruction": "Your code should use the function `sqrt` from the library `<cmath>`."}, {"type": "combination", "instruction": "In your code, the class `SearchAlgorithm` should have these properties `arr, key, step`."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"3": [0, 2, 10], "6": [0, 5, 10], "8": [0, 7, 10], "9": [0, 5, 10]}, "question_id": 225}
{"question": "Write a C++ program that finds all unique partitions of a positive integer `N`, where a partition is defined as a way of writing `N` as a sum of positive integers. The order of numbers in the partition does not matter, so only unique combinations (without considering the order) should be printed. For example, for `N = 4`, the unique partitions are `(4)`, `(3,1)`, `(2,2)`, and `(2,1,1)`. The program should define a recursive function `void uniquePartition(int N, vector<int> &currentPartition, int last)` that prints all unique partitions of `N`. The `last` parameter is used to ensure that the partitions are generated in a non-decreasing order, which helps in avoiding duplicates. The main function should read an integer `t` representing the number of test cases, followed by `t` integers, one for each test case. For each test case, the program should print all unique partitions of the given integer `N`, each partition enclosed in parentheses and separated by a space.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named currentPartition."}, {"type": "variable", "instruction": "Variable currentPartition should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named PartitionInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named partition."}, {"type": "file", "instruction": "Your code should import the following libraries iostream, vector."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6]}, "question_id": 226}
{"question": "Write a complete Python function `solve(mol1, mol2)`. The inputs are the PySCF molecule objects. The output is the MP2 binding energy of two molecules at the CBS limit.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'list'."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'EnergyType'."}, {"type": "function", "instruction": "Your code should include a function named 'calculate_energy'."}, {"type": "class", "instruction": "Your code should define a class named 'MoleculeProcessor'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'energy_calculator'."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'pandas']."}, {"type": "combination", "instruction": "The function 'calculate_energy' should take 'mol1, mol2' as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'energy_calculator', which should contain these classes ['MoleculeProcessor', 'EnergyCalculator']."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"10": [0, 1, 2, 6, 12], "11": [0, 1, 2, 7, 8, 12]}, "question_id": 227}
{"question": "Write a Python function `convert_number` that takes two arguments: an integer `number` and a string `base` which can be either 'binary', 'octal', or 'hexadecimal'. The function should convert the given integer into the specified base and return the result as a string. The function should also handle invalid base inputs by raising a `ValueError`. The function must have a proper docstring. The function should use a dictionary to map the base strings to the corresponding Python functions (`bin`, `oct`, `hex`). If the base is not one of the specified strings, the function should raise a `ValueError` with the message \"Invalid base: {base}\". The function should return the converted number as a string, without the Python-specific prefix (e.g., '0b', '0o', '0x').", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "variable", "instruction": "Your code should define a variable named base_mapping."}, {"type": "variable", "instruction": "Variable base_mapping, type should be dict."}, {"type": "variable", "instruction": "Variable base_mapping, should not be a global variable."}, {"type": "variable", "instruction": "Variable base_mapping should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named convert_number."}, {"type": "combination", "instruction": "The function convert_number should return a string as its result."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "5": [0, 1, 2], "7": [0, 1, 6]}, "question_id": 228}
{"question": "Design a simple forum board system where users can create, read, update, and delete posts. Each post can be identified by a unique board number, and users can search for posts based on certain criteria. Implement the necessary classes and methods to support these operations. The system should have the following features: - Insert a new post with a title, content, and author. - List all posts. - Read a specific post by its board number, which also increments the view count of the post. - Modify an existing post's title and content. - Delete a post by its board number. - Search for posts based on criteria such as title keywords, author, and date range. - Count the number of posts that match the search criteria. You are provided with a code snippet that outlines the `BoardServiceImpl` class. You need to implement the `BoardDAO` interface and the `BoardVO` and `SearchCriteria` classes. Additionally, provide test cases to verify the correctness of the implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the 'interface' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'ArrayList'."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'postCount'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'PostStatus'."}, {"type": "interface", "instruction": "Your code should define an interface named 'BoardDAO'."}, {"type": "class", "instruction": "Your code should define a class named 'BoardVO'."}, {"type": "combination", "instruction": "You should define an interface named 'BoardDAO' that includes these methods 'insertPost, listPosts, readPost, modifyPost, deletePost, searchPosts, countPosts'."}, {"type": "combination", "instruction": "In your code, the class 'BoardVO' should have these properties 'boardNumber, title, content, author, viewCount'."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"9": [0, 1, 7, 11], "10": [0, 1, 8, 11]}, "question_id": 229}
{"question": "Please write a Java class `AudioController`, which includes a method `decreaseBrightness` to reduce the brightness of an audio device. This method should ensure that the brightness value does not go below the minimum brightness `MIN_BRIGHTNESS`. If the brightness is already at the minimum value, it should not be reduced further. Please implement this functionality according to the following requirements:\n\n- The class should contain an integer member variable `brightness` to store the current brightness value.\n- The class should define an integer constant `MIN_BRIGHTNESS` with a value of 1, representing the minimum allowable brightness value.\n- The `decreaseBrightness` method should check the current brightness value and only decrease it if it is greater than `MIN_BRIGHTNESS`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.System;\npublic class AudioController {\n    private static final int MIN_BRIGHTNESS = 1;\n    private int brightness;\n    public AudioController(int initialBrightness) {\n    }\n    public void decreaseBrightness() {\n    }\n    public int getBrightness() {\n        return 0;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure integer."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "file", "instruction": "Your code should import the following libraries java.lang.System."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {}, "question_id": 230}
{"question": "Design a Python class `SessionsDAO` that interacts with a database to manage user sessions. The class should provide methods to check if a token exists, add a new session, and remove an existing session. The `SessionsDAO` class should inherit from a generic `DAO` class that handles common database operations. The `SessionsDAO` class should use PostgreSQL as the underlying database, and it should handle timezones correctly when storing session creation times. The `SessionsDAO` class should implement the following methods: - `__init__(self)`: Initializes the `SessionsDAO` instance, setting the table name to 'sessions' and a secret key for internal use. - `isTokenExist(self, token)`: Checks if a session with the given token exists in the database. - `add(self, user_id, duration, token)`: Adds a new session for a user with the given `user_id`, `duration` (in seconds), and `token`. If a session for the user already exists, it should update the existing session with the new `created_at` timestamp and `token`. The `created_at` timestamp should be stored in UTC. - `remove(self, token)`: Removes the session with the given token from the database. The `DAO` class is not provided, but you can assume it has a method `__perform_db_req__(self, query, params)` that executes a given SQL `query` with `params` against the database and returns the result.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named secret_key."}, {"type": "variable", "instruction": "Variable secret_key should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named SessionsDAO."}, {"type": "combination", "instruction": "You should initialize an object named session_dao as an instance of the SessionsDAO class using no parameters for initialization."}, {"type": "combination", "instruction": "In your code, the class SessionsDAO should have these methods ['__init__', 'isTokenExist', 'add', 'remove']."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "9": [0, 1, 7]}, "question_id": 231}
{"question": "Create a Java class named `RowTraversalTable` that extends `JTable` and overrides the default behavior of the tab and arrow keys to navigate through the rows instead of the columns. The table should allow the user to navigate to the next or previous row when pressing the right-arrow/left-arrow or tab/shift-tab keys. When the end or beginning of the table is reached, the navigation should optionally cycle back to the first or last row, respectively. The class should include the following features: - A constructor that accepts a `TableModel` and a `boolean` indicating whether the row navigation should cycle. - Overridden methods to configure the input and action maps to implement the custom row traversal behavior. - Inner classes `NextRowAction` and `PreviousRowAction` that define the actions to be performed when navigating to the next or previous row, respectively. Provide a main method with test cases that demonstrate the functionality of the `RowTraversalTable` with cycling enabled and disabled.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named `navigateToNextRow`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `System.exit`."}, {"type": "file", "instruction": "Your code should not use the following libraries `java.util.stream`."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"5": [0, 1, 4, 8]}, "question_id": 232}
{"question": "Design a Python Scrapy spider to crawl a university news website and extract news articles. The spider should navigate through the news listing pages and extract the URL, title, and publication date of each news article. The spider should be able to handle pagination and continue crawling until it has visited all listing pages. The website structure for the news listing pages is as follows: Each news listing page contains a table with news articles. Each row in the table represents a news article. The first column contains the title of the news article wrapped in a font tag within an anchor tag. The second column contains the publication date of the news article. The anchor tag in the first column has an href attribute containing the URL of the news article. The spider should be named `UniversityNewsSpider`, and it should yield items of type `NewsItem` with fields `news_url`, `news_title`, and `news_date`. The spider should start from a given URL and follow the pagination links to crawl all news listing pages.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should use the yield keyword."}, {"type": "variable", "instruction": "Your code should define a variable named start_url."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named parse_article."}, {"type": "class", "instruction": "Your code should define a class named UniversityNewsSpider."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named university_news."}, {"type": "file", "instruction": "Your code should not use the following libraries: requests, BeautifulSoup."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 10], "7": [0, 1, 2, 6, 10]}, "question_id": 233}
{"question": "Implement the `once_flag` class and `call_once` function which ensures that a function is called only once despite multiple thread calls. The corresponding function signature is: template<typename Callable> void call_once(once_flag& flag, Callable&& func);", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named flag_state."}, {"type": "variable", "instruction": "Variable flag_state, the initial value should be false."}, {"type": "class", "instruction": "Your code should define a class named once_flag."}, {"type": "file", "instruction": "Your code should be organized in a package named threading_utils."}, {"type": "combination", "instruction": "In your code, the class once_flag should have these properties flag_state."}, {"type": "combination", "instruction": "Your code should be organized in a package named threading_utils, which should contain these classes once_flag."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 1, 3, 9], "7": [0, 1, 5, 9], "8": [0, 1, 5, 6, 9]}, "question_id": 234}
{"question": "Create a command-line application that manages federation relationships between trust domains. The application should be able to show details of a specific federation relationship when provided with the trust domain name. The application should follow these specifications: 1. Implement a command-line interface using the provided code structure. 2. The command should be named `federation show`. 3. The command should accept a single flag `--trustDomain` which specifies the trust domain name of the federation relationship to show. 4. If the `--trustDomain` flag is not provided, the application should return an error indicating that a trust domain name is required. 5. The application should simulate fetching the federation relationship details from a server. For the purpose of this exercise, you can mock the server response. 6. The application should print the details of the federation relationship in a human-readable format. 7. Include error handling for cases where the federation relationship does not exist or the server is unreachable.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named trust_domain."}, {"type": "variable", "instruction": "Variable trust_domain, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named show_federation_details."}, {"type": "function", "instruction": "Your code should not use any functions from the os module."}, {"type": "interface", "instruction": "Your code should define an interface named FederationInterface."}, {"type": "class", "instruction": "Your code should define a class named FederationManager."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named federation_manager."}, {"type": "combination", "instruction": "You should initialize an object named manager as an instance of the FederationManager class using trust_domain for initialization."}, {"type": "combination", "instruction": "You should define an interface named FederationInterface that includes these methods show_details, fetch_details."}, {"type": "combination", "instruction": "In your code, the class FederationManager should have these properties trust_domain, server_url."}, {"type": "combination", "instruction": "Your code should be organized in a package named federation_manager, which should contain these classes FederationManager, FederationInterface."}], "instruction_dependence": {"3": [0, 2], "8": [0, 7], "10": [0, 7], "11": [0, 6], "12": [0, 7], "13": [0, 7, 9]}, "question_id": 235}
{"question": "Design a simple library management system where you can add books to the library's inventory. Each book is identified by a unique ISBN (International Standard Book Number). If a user tries to add a book that already exists in the inventory (i.e., a book with the same ISBN), the system should throw a `BookAlreadyExistsException`. Write a class `Library` with the following methods: - `addBook(String isbn, String title)`: Adds a new book to the library. If the book with the given ISBN already exists, it should throw a `BookAlreadyExistsException`. - `getBook(String isbn)`: Returns the title of the book with the given ISBN. If no book is found with that ISBN, return `null`. Additionally, write a `main` method to demonstrate the functionality of the `Library` class by adding a few books and handling any exceptions that may occur.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `bookInventory`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `BookStatus`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `bookInventory`, type should be `HashMap<String, String>`."}, {"type": "variable", "instruction": "Variable `MAX_BOOKS`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `checkBookAvailability`."}, {"type": "class", "instruction": "Your code should define a class named `Library`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `libraryManagement`."}, {"type": "file", "instruction": "Your code should import the following libraries `java.util.HashMap`, `java.util.Map`."}, {"type": "combination", "instruction": "The function `getBook` should return a `String` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `libraryManagement`, which should contain these functions `addBook`, `getBook`, `checkBookAvailability`."}], "instruction_dependence": {"5": [0, 1, 3], "6": [0, 1, 3], "7": [0, 1, 3], "10": [0, 1, 9], "13": [0, 1, 8], "14": [0, 1, 11]}, "question_id": 236}
{"question": "You have an integer array `nums` starting at index **0** and of **even** length, as well as an empty array `arr`. Alice and Bob decide to play a game where each round Alice and Bob each perform an operation. The game rules are as follows:\n\n* Every round, Alice first removes the **smallest** element from `nums`, and then Bob does the same.\n* Then, Bob adds the removed element to the array `arr`, followed by Alice doing the same.\n* The game continues until `nums` becomes empty.\n\nReturn the result array `arr`.\n\n**Example 1:**\n\n```\n**Input:** nums = [5,4,2,3]\n**Output:** [3,2,5,4]\n**Explanation:** In the first round, Alice removes 2 first, and then Bob removes 3. Then Bob adds 3 to arr first, followed by Alice adding 2 to arr. So arr = [3,2].\nAt the beginning of the second round, nums = [5,4]. Alice removes 4 first, and then Bob removes 5. Then they both add the removed elements to arr, arr becomes [3,2,5,4].\n```\n\n**Example 2:**\n\n```\n**Input:** nums = [2,5]\n**Output:** [5,2]\n**Explanation:** In the first round, Alice removes 2 first, then Bob removes 5. Bob then adds 5 to arr first, followed by Alice adding 2 to arr. So arr = [5,2].\n```\n\n**Hints:**\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `nums.length % 2 == 0`\n\nPlease complete the following implementation\n```cpp\nclass Solution {\npublic:\n    vector<int> numberGame(vector<int> nums);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "function", "instruction": "Your code should include a function named numberGame."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "file", "instruction": "Your code should be organized in a package named game."}, {"type": "combination", "instruction": "In your code, the class Solution should have these properties public."}, {"type": "combination", "instruction": "The function numberGame should return a vector<int> as its result."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 5]}, "question_id": 237}
{"question": "Implement a Python class `VoIPManager` that manages multiple VoIP calls using the `VoIPController` class provided in the code snippet. The `VoIPManager` should be able to start new calls, end calls, and manage the state of each call. Each call should have a unique call ID and should be able to handle state changes and audio frame callbacks. The `VoIPManager` should have the following methods: `start_call(call_id: int, endpoints: List[Endpoint], encryption_key: bytes, is_outgoing: bool)`, `end_call(call_id: int)`, `get_call_duration(call_id: int) -> float`, `set_call_state_changed_handler(call_id: int, handler: Callable[[CallState], None])`, and `set_call_audio_frame_handlers(call_id: int, send_handler: Callable[[int], bytes], recv_handler: Callable[[bytes], None])`. The `VoIPManager` should also handle exceptions and errors appropriately, ensuring that all resources are cleaned up when a call ends or an error occurs.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the `with` keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `call_state`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named `handle_call_state_change`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `CallStateHandler`."}, {"type": "class", "instruction": "Your code should define a class named `VoIPManager`."}, {"type": "combination", "instruction": "Your code should define a class named `VoIPManager` that implements the `CallStateHandler` interface."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 13], "9": [0, 1, 2, 3, 8, 13], "12": [0, 1, 2, 3, 10, 11, 13]}, "question_id": 238}
{"question": "Design a text generation system using a Long Short-Term Memory (LSTM) neural network. The system should be capable of learning from a given text corpus and generating new text sequences that mimic the style and content of the original corpus. The corpus will be provided in a JSON file containing Wikipedia content. The system should include the following functionalities:\n\n1. Download the dataset from an AWS S3 bucket.\n2. Preprocess the text data by tokenizing, removing punctuation, converting to lowercase, and filtering out stopwords.\n3. Prepare the data for training by creating sequences of a fixed length and their corresponding next characters.\n4. Build and train an LSTM model on the prepared data.\n5. Save the trained model to an AWS S3 bucket.\n6. Generate a shutdown command for the system after the training is complete.\n\nThe system should be configurable through environment variables, including the number of GPUs and CPUs to use, the S3 bucket names for the dataset and the model, and the shutdown time. The system should also log its progress at each step.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'config'."}, {"type": "variable", "instruction": "Variable 'config', should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'preprocess_data'."}, {"type": "file", "instruction": "Your code should import the following libraries ['boto3', 'nltk', 'tensorflow', 'numpy']."}, {"type": "file", "instruction": "Your code should use the function 'Tokenizer' from the library 'tensorflow.keras.preprocessing.text'."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 10], "9": [0, 1, 2, 8, 10]}, "question_id": 239}
{"question": "Design a simple C++ program that manages a collection of `Function` objects within a `Unit` class. Each `Function` object represents a function in a programming language, and the `Unit` class is responsible for managing these functions, including adding, removing, and generating machine code for them. The `Function` class should have a virtual method `output()` that prints the function's name and a virtual method `genMachineCode(AsmBuilder* builder)` that simulates generating machine code for the function. The `AsmBuilder` class is used to build the assembly code representation for the functions. The `Unit` class should have methods to insert and remove `Function` objects, output the names of all functions, and generate machine code for all functions. The `Unit` class should also handle the proper deletion of `Function` objects to prevent memory leaks. Implement the `Function`, `AsmBuilder`, and `MachineUnit` classes with minimal functionality to support the `Unit` class operations. Provide a main function with test cases to demonstrate the creation of a `Unit` object, insertion of `Function` objects, removal of a `Function` object, output of function names, and generation of machine code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named functionList."}, {"type": "variable", "instruction": "Variable functionList, should not be a global variable."}, {"type": "variable", "instruction": "Variable functionList should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named addFunction."}, {"type": "combination", "instruction": "The function addFunction should take Function* as parameters."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7]}, "question_id": 240}
{"question": "Please write a Java function that accepts an integer value that may be null. If the value is not null, it directly returns that value; if it is null, it returns a default value of 100. Use the `Optional` class to implement this logic to ensure code robustness. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Optional;\npublic class DefaultValueGetter {\n    public static int getNumberOrDefault(Integer number) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "variable", "instruction": "Your code should define a variable named defaultNumber."}, {"type": "variable", "instruction": "Variable defaultNumber, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named DefaultValueGetter."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.defaultvalue."}, {"type": "file", "instruction": "Your code should not use the following libraries [org.apache.commons.lang3]."}, {"type": "combination", "instruction": "In your code, the class DefaultValueGetter should have these methods [getNumberOrDefault, checkFunction]."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4], "9": [0, 1, 2, 3, 6]}, "question_id": 241}
{"question": "Design a Kubernetes Custom Resource and Controller Management System. You are tasked with creating a system that allows users to manage a custom Kubernetes resource named `Core` which is part of a custom resource definition (CRD) provided by the `vanus.ai` group. The `Core` resource represents a controller in the Vanus system, which is a distributed event streaming platform. Your system should provide the following functionalities: 1. Create a new `Core` resource with a specified name, namespace, and version, with the storage request set to '1Gi' by default. 2. List all `Core` resources in a given namespace. 3. Retrieve details of a specific `Core` resource by its name and namespace. 4. Delete a specific `Core` resource by its name and namespace. The system should handle errors gracefully, including scenarios where a `Core` resource does not exist when attempting to get or delete it.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `core_resource`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `core_resource`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `create_core_resource`."}, {"type": "class", "instruction": "Your code should define a class named `CoreManager`."}, {"type": "file", "instruction": "Your code should import the following libraries: `kubernetes`, `os`, `sys`."}, {"type": "combination", "instruction": "In your code, the class `CoreManager` should have these methods: `create_core`, `list_cores`, `get_core`, `delete_core`."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "8": [0, 6]}, "question_id": 242}
{"question": "Design an E-commerce simulation for health and wellness products where both customers and suppliers can interact to buy and sell items. The system should allow users to enter as either a customer or a supplier, with the goal of promoting trade and competitive pricing. The system should be focused on promoting health and hygiene products. The program should have the following functionalities: 1. Allow a user to specify if they are a customer or a supplier. 2. If the user is a customer, they should be able to: - Enter their name, bank account number, and address. - Choose to buy either a mask or hand sanitizer. - View a summary of their purchase, including the account charged, the price, the discount applied, the weight of the package, and the final price after discount. 3. If the user is a supplier, they should be able to: - Enter their name, delivery time, address, and category of the product they want to sell. - Choose to sell either a mask or hand sanitizer. - Set the price, product key, discount, and weight of the product. - View a summary of their sale, including the delivery time, price, discount, weight of the package, and the final price after discount. The program should calculate the final price by multiplying the cost by the weight in kilograms and then subtracting the discount.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the 'lambda' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'dictionary'."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named 'calculate_final_price'."}, {"type": "function", "instruction": "The function names in your code should follow the 'snake_case' naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'ECommerceSimulation'."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 9]}, "question_id": 243}
{"question": "Write a Python program that reads a phylogenetic tree in Nexus format and a tab-delimited CSV file containing metadata for the samples in the tree. The program should annotate the tree with the metadata from the CSV file and output the annotated tree in Nexus format. The CSV file contains a header row with the names of the metadata fields, and each subsequent row corresponds to a sample with its metadata. The first column of the CSV file is labeled 'SampleID' and contains unique identifiers for the samples, which match the names of the clades in the phylogenetic tree. The program should: - Read the Nexus file and the CSV file provided as command-line arguments. - Parse the CSV file and store the metadata for each sample. - Traverse the phylogenetic tree and for each clade with a name that matches a 'SampleID' in the CSV file, annotate the clade with the corresponding metadata. - Output the annotated phylogenetic tree in Nexus format to standard output. Metadata should be added to the clades as comments in the format `&key=\"value\"`, where `key` is the name of the metadata field and `value` is the corresponding value for the sample. The keys should be sorted alphabetically, and the 'SampleID' key should be excluded from the annotations.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named metadata_dict."}, {"type": "variable", "instruction": "Variable metadata_dict, the initial value should be {}."}, {"type": "function", "instruction": "Your code should not use any functions from the os library."}, {"type": "interface", "instruction": "Your code should define an interface named TreeAnnotator."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named NexusParser."}, {"type": "file", "instruction": "Your code should be organized in a package named tree_annotation."}, {"type": "file", "instruction": "Your code should import the following libraries: csv, sys."}, {"type": "file", "instruction": "Your code should not use the following libraries: pandas."}, {"type": "combination", "instruction": "Your code should be organized in a package named tree_annotation, which should contain these classes: NexusParser, TreeAnnotator."}, {"type": "combination", "instruction": "Your code should be organized in a package named tree_annotation, which should contain these functions: parse_csv, annotate_tree."}], "instruction_dependence": {"4": [0, 3], "7": [0, 6], "12": [0, 8, 9], "13": [0, 9]}, "question_id": 244}
{"question": "I want to pick one random number from each of these four intervals: 1~5, 5~10, 10~15, 15~20, and form an array to return. Please note that the range 1~5 includes the numbers 1, 2, 3, 4, 5. Can you check if there is something wrong with my code? If there's a problem, could you help fix it and show me the corrected version?", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named random_list."}, {"type": "variable", "instruction": "Variable random_list, type should be list."}, {"type": "variable", "instruction": "Variable random_list, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the random module."}, {"type": "interface", "instruction": "Your code should define an interface named RandomNumberGenerator."}, {"type": "class", "instruction": "Your code should define a class named RandomNumberPicker."}, {"type": "file", "instruction": "Your code should not use the following libraries numpy."}, {"type": "combination", "instruction": "In your code, the class RandomNumberPicker should have these methods get_random_list."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "12": [0, 1, 10]}, "question_id": 245}
{"question": "Implement a Scheduler Activity Tracker\n\nDesign a Java class `SchedulerActivity` that represents a single activity in a scheduler system. Each activity has the following attributes:\n\n- `optCounter`: A unique identifier for the operation.\n- `jobNumber`: The job number associated with the activity.\n- `attemptsLeft`: The number of attempts left to execute the activity.\n- `endTime`: The timestamp when the activity is scheduled to end.\n- `queueName`: The name of the queue where the activity is placed.\n- `result`: The result of the activity execution.\n- `state`: The current state of the activity.\n- `instanceRefNum`: A reference number for the instance of the activity.\n- `actualStartTime`: The actual start time of the activity.\n- `instanceRecovery`: A reference number for the instance recovery.\n- `preferredStartTime`: The preferred start time of the activity.\n- `sequence`: The sequence number of the activity.\n- `priority`: The priority of the activity.\n\nAdditionally, implement a `RowMapper` named `SchedulerActivityRowMapper` that can be used with Spring's `JdbcTemplate` to map rows of a `ResultSet` to instances of `SchedulerActivity`. The `RowMapper` should log the mapped `SchedulerActivity` object at the debug level.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `activityLog`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `SchedulerInterface`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 7]}, "question_id": 246}
{"question": "Design a class `StudySessionAnalyzer` that extends the given `A10_JuchaData` class. The `StudySessionAnalyzer` class should provide additional functionality to analyze study session data. The class should include the following features:\n\n1. Calculate the study session completion ratio as a percentage based on the `watchedTime` and `fullTime` for video content, or `readPage` and `fullPage` for text content. The times and page numbers are given as strings in the format \"HH:MM:SS\" for times and \"current/total\" for pages.\n\n2. Determine if the study session is considered successful. A session is successful if the completion ratio is 80% or higher.\n\n3. Provide a method to update the `totalRatio` field based on the calculated completion ratio.\n\n4. Include a method to enable or disable the study session based on certain criteria (e.g., if the session is successful, it can be enabled).\n\n5. Override the `toString` method to return a string representation of the study session, including the title, study date, completion ratio, and whether the session is successful.\n\nEnsure that all necessary packages are imported, and provide test cases to verify the solution's correctness.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `completionRatio`."}, {"type": "variable", "instruction": "Variable `completionRatio`, should be a global variable."}, {"type": "variable", "instruction": "Variable `completionRatio`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `calculateCompletionRatio`."}, {"type": "combination", "instruction": "The function `calculateCompletionRatio` should take `watchedTime`, `fullTime`, `readPage`, and `fullPage` as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "9": [0, 1, 2, 8]}, "question_id": 247}
{"question": "Define the SMARTS of carboxyl group as \"C(O)=O\" and benzene ring as \"c1ccccc1\". Please write a complete Python function `solve(smiles)`, which takes a molecule's SMILES as input, and uses the `ReplaceSubstructs` function to replace all carboxyl groups in the molecule with benzene rings. Return the SMILES of resulting molecule (if there is no carboxyl group in the molecular structure, do not modify the structure).", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named MoleculeModifier."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'pandas']."}], "instruction_dependence": {"5": [0, 1, 2, 4]}, "question_id": 248}
{"question": "Design a Java program that sorts an array of integers in descending order using the bubble sort algorithm. The program should include a class named `DescendingOrderSorter` with a method `sortDescending` that takes an array of integers as input and sorts the array in place. The method should also print the array after each pass of the bubble sort, showing the progress of the sorting. The main method should demonstrate the functionality of the `DescendingOrderSorter` class by creating an array of integers, printing the array before sorting, calling the `sortDescending` method, and finally printing the sorted array.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "class", "instruction": "Your code should define a class named DescendingOrderSorter."}, {"type": "file", "instruction": "Your code should be organized in a package named sorting."}, {"type": "combination", "instruction": "Your code should be organized in a package named sorting, which should contain these classes DescendingOrderSorter."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 7, 8]}, "question_id": 249}
{"question": "Design a C++ program that manages a collection of factories for creating different types of topological entities. The program should allow adding new factory instances, finding existing ones, removing specific factories, and clearing all factories. Additionally, it should provide a method to get a default factory instance for a given topological shape type. The topological entities are defined by the Open CASCADE Technology (OCCT) shape enumeration `TopAbs_ShapeEnum`, which includes the following types: `TopAbs_COMPOUND`, `TopAbs_COMPSOLID`, `TopAbs_SOLID`, `TopAbs_SHELL`, `TopAbs_FACE`, `TopAbs_WIRE`, `TopAbs_EDGE`, and `TopAbs_VERTEX`. Each factory type is represented by a class that inherits from the abstract `TopologyFactory` class. The program should use a map to associate unique string identifiers (GUIDs) with factory instances. Implement the `TopologyFactoryManager` class with the following methods: `Add`, `Find`, `ClearOne`, `ClearAll`, and `GetDefaultFactory`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure std::map."}, {"type": "variable", "instruction": "Your code should define a variable named factoryMap."}, {"type": "variable", "instruction": "Variable factoryMap, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named Add."}, {"type": "interface", "instruction": "Your code should define an interface named TopologyFactory."}, {"type": "combination", "instruction": "You should define an interface named TopologyFactory that includes these methods CreateShape."}, {"type": "combination", "instruction": "The function Add should take std::string guid, TopologyFactory* factory as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"3": [0, 2, 8], "6": [0, 5, 8], "7": [0, 4, 8]}, "question_id": 250}
{"question": "Please write a Java program to handle chord mode settings in a music application. In this application, users can select the mode of each chord through a dropdown menu. Your task is to create a class named `ChordManager` that contains a method named `setChordModes`. This method receives a string array, where each element represents the mode of a chord, and then applies these modes to the corresponding chords. Assume there is a class named `ChordSettings` that has a static method `setChordMode(int chordNumber, String mode)` for setting the mode of a specified chord. Ensure your code can handle the mode settings for at least 7 chords. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nclass ChordSettings {\n    static void setChordMode(int chordNumber, String mode) {\n    }\n}\npublic class ChordManager {\n    public void setChordModes(String[] modes) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named chordModes."}, {"type": "variable", "instruction": "Variable chordModes, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the Arrays class."}, {"type": "class", "instruction": "Your code should define a class named ChordManager."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7]}, "question_id": 251}
{"question": "Create a Python script that generates a configuration file for a Sphinx documentation project. The script should allow the user to specify the project name, author, version, and language. It should also include a set of predefined Sphinx extensions, theme options, and intersphinx mappings. The script should be able to handle different languages and include language-specific settings. Additionally, the script should provide a way to specify custom static files and create a redirection map for outdated pages.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named generate_config."}, {"type": "interface", "instruction": "Your code should define an interface named Configurable."}, {"type": "class", "instruction": "Your code should define a class named SphinxConfig."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'json']."}, {"type": "combination", "instruction": "Your code should define a class named SphinxConfig that implements the Configurable interface."}, {"type": "combination", "instruction": "In your code, the class SphinxConfig should have these properties ['project_name', 'author', 'version', 'language']."}, {"type": "combination", "instruction": "The function generate_config should take ['project_name', 'author', 'version', 'language'] as parameters."}], "instruction_dependence": {"9": [0, 1, 6, 7], "10": [0, 1, 7], "11": [0, 1, 5]}, "question_id": 252}
{"question": "Write a Python function `generate_report_query` that constructs a SQL query to generate a report from a database. The report should include data from two tables: `sales` and `customers`. The `sales` table contains the columns `id`, `customer_id`, `product_id`, `quantity`, and `sale_date`. The `customers` table contains the columns `id`, `name`, and `email`. The report should list the `name` and `email` of each customer along with the total quantity of products they have purchased. The results should be ordered by the total quantity in descending order. The function should take no arguments and return a string containing the SQL query.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named generate_report_query."}, {"type": "function", "instruction": "Your code should not use any functions from the ['exec', 'eval']."}, {"type": "combination", "instruction": "The function generate_report_query should return a string as its result."}], "instruction_dependence": {"5": [0, 1, 3]}, "question_id": 253}
{"question": "Please write a complete Python function `sha256_easy(data: str) -> str` for calculating and returning the hash value of the string data using the sha256 algorithm. Please write the code in a markdown ```python ``` wrapper.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "function", "instruction": "Your code should include a function named sha256_easy."}, {"type": "combination", "instruction": "The function sha256_easy should take data as a parameter."}, {"type": "combination", "instruction": "The function sha256_easy should return a str as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"3": [0, 2, 5], "4": [0, 2, 5]}, "question_id": 254}
{"question": "Write a Go program to determine if a binary tree is symmetric around its center. A binary tree is symmetric if the left subtree is a mirror reflection of the right subtree. Implement the function `isSymmetric(root *TreeNode) bool` which will take the root of a binary tree and return `true` if the tree is symmetric, or `false` if it is not. The `TreeNode` structure is defined as follows:\n\n```go\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `isSymmetricResult`."}, {"type": "variable", "instruction": "Variable `isSymmetricResult`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `isSymmetric`."}, {"type": "interface", "instruction": "Your code should define an interface named `TreeEvaluator`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `BinaryTree`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "The function `isSymmetric` should take `root *TreeNode` as parameters."}, {"type": "combination", "instruction": "The function `isSymmetric` should return a `bool` as its result."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7], "10": [0, 1, 2, 9], "11": [0, 1, 2, 6], "12": [0, 1, 2, 6]}, "question_id": 255}
{"question": "Design a function that updates the verification status of a user in a database and logs the process. The function should be part of a `UserCore` struct that has access to a service context (`svcCtx`) and a logger. The service context contains a `UsersDAO` which has an `UpdateUser` method that updates user information in the database. The function `UserUpdateVerified` should accept a request object `TLUserUpdateVerified` containing the user's ID (`UserId`) and the new verification status (`Verified`). It should return a boolean value wrapped in an `mtproto.Bool` indicating whether the update was successful, and an error if one occurred during the process. The `UpdateUser` method of `UsersDAO` takes a context, a map of fields to update, and the user's ID, and returns the number of rows affected and an error if one occurred. The `mtproto` package provides utility functions `FromBool` to convert a Go `bool` to an `mtproto.Bool`, and `ToBool` to convert the number of rows affected to an `mtproto.Bool` indicating success (`true`) or failure (`false`). The logger should log an error message if an error occurs during the update process.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "function", "instruction": "Your code should include a function named `UserUpdateVerified`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `UserDAO`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `UserCore`."}, {"type": "file", "instruction": "Your code should import the following libraries `context`, `log`, `mtproto`."}, {"type": "file", "instruction": "Your code should use the function `FromBool` from the library `mtproto`."}, {"type": "combination", "instruction": "In your code, the class `UserCore` should have these methods `UserUpdateVerified`."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"3": [0, 1, 2, 10], "5": [0, 1, 4, 10], "8": [0, 1, 7, 10], "9": [0, 1, 6, 10]}, "question_id": 256}
{"question": "Please write a Python function `convert_tree_traverse(preorder: List[int], inorder: List[int]) -> List[int]` to solve this problem: Given the Preorder traversal `preorder` and Inorder traversal `inorder` of a binary tree, calculate and return the Postorder traversal of the same tree. >>> convert_tree_traverse([1,2,4,5,3,6,7], [4,2,5,1,6,3,7]) [4,5,2,6,7,3,1] >>> has_close_elements([1,2,3], [2,1,3]) [2,3,1]", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named root_index."}, {"type": "variable", "instruction": "Variable root_index, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named convert_tree_traverse."}, {"type": "class", "instruction": "Your code should define a class named TreeNode."}, {"type": "file", "instruction": "Your code should be organized in a package named tree_traversal."}, {"type": "combination", "instruction": "You should initialize an object named root as an instance of the TreeNode class using preorder and inorder for initialization."}, {"type": "combination", "instruction": "In your code, the class TreeNode should have these properties val, left, right."}, {"type": "combination", "instruction": "The function convert_tree_traverse should take preorder and inorder as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 6], "9": [0, 1, 6], "10": [0, 1, 5]}, "question_id": 257}
{"question": "Write a Go program that performs the following operations:\n\n1. Define a `Person` struct with `Name` (string), `Age` (byte), and an unexported field `pin` (int).\n2. Implement a function `SavePersonToFile` that takes a `Person` object and a file name, then encodes the `Person` object into JSON format and writes it to the specified file using buffered I/O.\n3. Implement a function `ReadPersonFromFile` that takes a file name, reads the JSON-encoded `Person` data from the file, and decodes it into a `Person` object.\n4. Implement a function `PrintJSONString` that takes a `Person` object and prints its JSON string representation using the `bytes` package.\n5. Implement a function `DecodeUnknownJSON` that takes a JSON string of an unknown structure and decodes it into a `map[string]interface{}`. It should print the map in a formatted way.\n\nEnsure that the `pin` field is not included in the JSON encoding/decoding process.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the `defer` keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `buffer`."}, {"type": "variable", "instruction": "Variable `buffer` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `SavePersonToFile`."}, {"type": "function", "instruction": "Your code should not use any functions from the `os` package."}, {"type": "interface", "instruction": "Your code should define an interface named `Encoder`."}, {"type": "class", "instruction": "Your code should define a class named `Person`."}, {"type": "combination", "instruction": "Your code should define a class named `Person` that implements the `Encoder` interface."}, {"type": "combination", "instruction": "The function `SavePersonToFile` should take `person` and `filename` as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 14], "12": [0, 1, 2, 3, 10, 11, 14], "13": [0, 1, 2, 3, 8, 14]}, "question_id": 258}
{"question": "Design a program that models a simple logging system for a customer management application. The system should be able to record messages associated with customer activities and maintain a unique identifier for each log entry. The program should include the following components:\n\n1. A `Base` struct that contains an `id` field of type `int64`.\n2. A `Log` struct that embeds the `Base` struct and includes a `msg` field of type `string` to store log messages.\n3. A `Customer` struct that contains `Name` and `Age` fields of type `string`, and embeds the `Log` struct to keep track of customer-related log messages.\n4. A method `Add` attached to the `Log` struct that appends a new message to the existing log messages, separated by a newline character.\n5. A method `String` attached to the `Log` struct that returns the log messages as a string.\n6. A method `String` attached to the `Customer` struct that returns a string representation of the customer, including their name and associated log messages.\n\nThe program should demonstrate the creation of a `Customer` instance, the addition of log messages, and the printing of the customer's information along with the log messages.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the `struct` keyword."}, {"type": "variable", "instruction": "Your code should define a variable named `customerLog`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `LogLevel`."}, {"type": "variable", "instruction": "Variable `customerLog`, the initial value should be `nil`."}, {"type": "class", "instruction": "Your code should define a class named `Customer`."}, {"type": "class", "instruction": "The class names in your code should follow the `PascalCase` naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `fmt`, `strings`."}, {"type": "file", "instruction": "Your code should use the function `Join` from the library `strings`."}, {"type": "combination", "instruction": "You should initialize an object named `customer` as an instance of the `Customer` class using `Name` and `Age` for initialization."}], "instruction_dependence": {"5": [0, 1, 2, 3], "7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "10": [0, 1, 2, 6]}, "question_id": 259}
{"question": "Design a Python class `ConfigurationSearch` that allows searching for specific configuration variables within a given data structure, which represents a configuration of a software component. The class should be able to search for multiple variables at once and return their values. If a variable is not found, it should return `None` for that variable. The search should be recursive, meaning it should be able to find variables nested within other variables. The class should have the following features: - A constructor that takes a list of search terms (variable names) to look for within the configuration. - A `search` method that takes a configuration object and returns a dictionary with the search terms as keys and the found values as values. If a term is not found, its value should be `None`. The configuration object can be assumed to have a method `variables()` that returns a dictionary of its variables, which can be nested dictionaries. Write unit tests for the `ConfigurationSearch` class to verify that it correctly finds variables, respects search term priority, and handles not found variables.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the `def` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `list`."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `config`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `config`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `search`."}, {"type": "class", "instruction": "Your code should define a class named `ConfigurationSearch`."}, {"type": "combination", "instruction": "The function `search` should return a `dict` as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "10": [0, 1, 2, 8]}, "question_id": 260}
{"question": "Design a hotel booking system that integrates with external bank and tax services to process payments and submit invoices. The system should handle the booking lifecycle, including booking submission, cancellation, and the corresponding financial transactions. The hotel booking system should have the following features: 1. Submit a new booking with the necessary details (arrival date, departure date, customer information, room information). 2. Process payment for the booking through an external bank service. 3. Submit an invoice for the booking through an external tax service. 4. Handle exceptions from the bank and tax services, including `BankException`, `TaxException`, and `RemoteAccessException`. 5. Support booking cancellation, which involves canceling the payment and the invoice. 6. Implement retry logic for remote service calls that fail due to `RemoteAccessException`. Write a Java class `HotelBookingProcessor` that encapsulates the logic for processing bookings and handling the integration with the bank and tax services. Include JUnit tests to verify the correctness of the implementation, handling success and failure scenarios.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 5 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the `try` keyword."}, {"type": "variable", "instruction": "Your code should define an enumeration named `BookingStatus`."}, {"type": "function", "instruction": "Your code should include a function named `processBooking`."}, {"type": "function", "instruction": "Your code should not use any functions from the `System.exit`."}, {"type": "class", "instruction": "Your code should define a class named `HotelBookingProcessor`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.hotel.booking`."}, {"type": "combination", "instruction": "You should initialize an object named `bookingProcessor` as an instance of the `HotelBookingProcessor` class using `new HotelBookingProcessor()` for initialization."}, {"type": "combination", "instruction": "In your code, the class `HotelBookingProcessor` should have these methods `submitBooking`, `cancelBooking`, `processPayment`, `submitInvoice`."}, {"type": "combination", "instruction": "The function `processBooking` should return a `boolean` as its result."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 5]}, "question_id": 261}
{"question": "Given a set of networks represented in CIDR notation, write a function to find their supernet, i.e., the smallest network that can encompass all the given networks. Use the python ipaddress package to accomplish this task, implement the function `supernet(networks)`, which returns the result in CIDR notation.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `supernet_result`."}, {"type": "variable", "instruction": "Variable `supernet_result`, type should be `str`."}, {"type": "variable", "instruction": "Variable `supernet_result`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `supernet`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `ipaddress`."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"4": [0, 3, 9], "5": [0, 3, 9], "7": [0, 6, 9]}, "question_id": 262}
{"question": "Design a Shopping List Management System that allows users to create, modify, and manage multiple shopping lists. Each shopping list can contain multiple items, and each item has a name, type, unit price, and quantity. The system should also allow users to calculate the total cost of items in a shopping list, remove items, modify the quantity of items, and mark items as bought. Additionally, users should be able to rename and copy entire shopping lists. Implement a console-based user interface to interact with the system.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named shopping_lists."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named calculate_total_cost."}, {"type": "interface", "instruction": "Your code should define an interface named ShoppingListInterface."}, {"type": "class", "instruction": "Your code should define a class named ShoppingList."}, {"type": "file", "instruction": "Your code should be organized in a package named shopping_list_manager."}, {"type": "combination", "instruction": "Your code should define a class named ShoppingList that implements the ShoppingListInterface interface."}, {"type": "combination", "instruction": "In your code, the class ShoppingList should have these properties: name, items, total_cost."}, {"type": "combination", "instruction": "The function calculate_total_cost should return a float as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"2": [0, 1, 10], "7": [0, 4, 5, 10], "8": [0, 5, 10], "9": [0, 3, 10]}, "question_id": 263}
{"question": "Design a binary tree class and write a function to determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given target sum. A binary tree is defined using the following structure:\n\n```cpp\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n```\n\nImplement the `Solution` class with the following methods:\n\n- `bool hasPathSum(TreeNode* root, int targetSum)`: This method should return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`. Otherwise, return `false`.\n\nA leaf is a node with no children.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named pathSum."}, {"type": "variable", "instruction": "Variable pathSum, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named hasPathSum."}, {"type": "function", "instruction": "Your code should not use any functions from the STL."}, {"type": "interface", "instruction": "Your code should define an interface named TreeInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "You should define an interface named TreeInterface that includes these methods hasPathSum."}, {"type": "combination", "instruction": "In your code, the class Solution should have these properties root, targetSum."}], "instruction_dependence": {"5": [0, 1, 4], "9": [0, 1, 8], "11": [0, 1, 10], "12": [0, 1, 8], "13": [0, 1, 10]}, "question_id": 264}
{"question": "Design a Go program that interacts with a cloud service to manage snapshot repositories. The program should provide functionality to retrieve the configuration of a specific snapshot repository by its name and region. The snapshot repository configurations are managed by a cloud service, and the program should use an API client to communicate with the service. The program should define a `GetParams` struct to hold the parameters for the retrieval operation, including the API client, the region, and the repository name. It should also implement a `Validate` method for `GetParams` to ensure that all required parameters are provided and valid. The main functionality should be implemented in a `Get` function that takes `GetParams` as an argument, validates the parameters, and then calls the cloud service's API to retrieve the snapshot repository configuration. The `Get` function should return the configuration as a `models.RepositoryConfig` object or an error if the operation fails. The cloud service API client is represented by the `*api.API` field in the `GetParams` struct, and the authentication information is provided by the `AuthWriter` field in the `api.API` struct. Provide a clear problem description, implement the `Get` function, and include test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the `defer` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `config`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `config`, should be a global variable."}, {"type": "variable", "instruction": "Variable `config` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `Get`."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `api`, `models`, `errors`."}, {"type": "combination", "instruction": "The function `Get` should take `params` as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 9]}, "question_id": 265}
{"question": "Implement a function in Golang, calculateDurationBetweenTwoTimes, that accepts two time strings and returns the interval between them. The string format is: March 18, 2024 11:07:18", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Golang, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named duration."}, {"type": "interface", "instruction": "Your code should define an interface named TimeCalculator."}, {"type": "class", "instruction": "Your code should define a class named DurationCalculator."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named timeutils."}, {"type": "combination", "instruction": "You should define an interface named TimeCalculator that includes these methods CalculateDuration, ParseTime."}, {"type": "combination", "instruction": "Your code should define a class named DurationCalculator that implements the TimeCalculator interface."}], "instruction_dependence": {"4": [0, 3], "6": [0, 2], "7": [0, 2, 3]}, "question_id": 266}
{"question": "Given an integer array `nums` where all elements are distinct, write a function to return all possible subsets (the power set) of the array. The solution set must not contain duplicate subsets and can be returned in any order.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named `result`."}, {"type": "variable", "instruction": "Variable `result`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `subsets`."}, {"type": "interface", "instruction": "Your code should define an interface named `SubsetInterface`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `SubsetGenerator`."}, {"type": "file", "instruction": "Your code should import the following libraries `itertools`."}, {"type": "combination", "instruction": "You should initialize an object named `generator` as an instance of the `SubsetGenerator` class using `nums` for initialization."}, {"type": "combination", "instruction": "You should define an interface named `SubsetInterface` that includes these methods `generate_subsets`."}, {"type": "combination", "instruction": "In your code, the class `SubsetGenerator` should have these properties `nums`."}, {"type": "combination", "instruction": "The function `subsets` should return a `list` as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"2": [0, 1, 12], "5": [0, 4, 12], "8": [0, 6, 12], "9": [0, 4, 12], "10": [0, 6, 12], "11": [0, 3, 12]}, "question_id": 267}
{"question": "Design a logging middleware for an HTTP server that uses OpenTelemetry to record structured logs. The middleware should capture HTTP request details such as the method, URL, status code, and response time, and log them using the OpenTelemetry conventions. The logs should be structured and include attributes that can be queried later. The middleware should be compatible with the standard `net/http` package in Go and should be easy to integrate into an existing HTTP server setup. Write a Go program that defines the middleware and demonstrates how to attach it to an HTTP server. Include test cases that verify the middleware correctly logs the details of incoming HTTP requests.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named logger."}, {"type": "variable", "instruction": "Variable logger, type should be *log.Logger."}, {"type": "variable", "instruction": "Variable logger, should be a global variable."}, {"type": "variable", "instruction": "Variable logger, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named Logger."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "You should define an interface named Logger that includes these methods LogRequest, LogResponse."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "10": [0, 1, 2, 9], "11": [0, 1, 2, 9]}, "question_id": 268}
{"question": "Please implement the following code using cpp with the function signature `std::vector<long> strange_sort_list(std::vector<long> lst)`. Note: 1. You only need to implement the target function and include necessary headers, do not generate any other code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure stack."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, should not be a global variable."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "file", "instruction": "Your code should import the following libraries <vector>, <algorithm>."}, {"type": "file", "instruction": "Your code should use the function sort from the library <algorithm>."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "10": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 11]}, "question_id": 269}
{"question": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator needs to include four basic mathematical operations methods: addition, subtraction, multiplication, and division. Each method accepts two `double` type parameters and returns a `double` type result. The division method needs to handle the case where the divisor is zero; when the divisor is zero, it should throw an `IllegalArgumentException` exception. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.IllegalFormatException;\npublic class SimpleCalculator {\n    public double addition(double a, double b) {\n    }\n    public double subtraction(double a, double b) {\n    }\n    public double multiplication(double a, double b) {\n    }\n    public double division(double a, double b) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, the initial value should be 0.0."}, {"type": "function", "instruction": "Your code should include a function named addition."}, {"type": "combination", "instruction": "The function addition should return a double as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 8]}, "question_id": 270}
{"question": "Design a C++ program that provides a utility for managing a PostgreSQL database connection and executing various SQL operations. The program should include the following features:\n\n1. A function to reverse the bytes of a 64-bit integer.\n2. A function to tokenize a plain text query by replacing spaces with '&' and removing trailing '&' characters.\n3. A function to convert a plain text query into a PostgreSQL full-text search query.\n4. Functions to perform CRUD (Create, Read, Update, Delete) operations on the database using a connection reservoir interface.\n5. A function to check if a specific table exists in the database.\n6. A function to send a heartbeat to the database to ensure the connection is alive.\n7. A function to generate a unique time-based identifier for a given host ID.\n8. A function to retrieve the next value from a PostgreSQL sequence.\n9. A function to clear all tables in the database.\n\nThe program should handle exceptions and ensure that database connections are properly managed and returned to the reservoir after use. Provide test cases to verify the correctness of each function.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named reverseBytes."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named DatabaseManager."}, {"type": "combination", "instruction": "In your code, the class DatabaseManager should have these methods: reverseBytes, tokenizeQuery, convertToFullTextQuery, createRecord, readRecord, updateRecord, deleteRecord, checkTableExists, sendHeartbeat, generateUniqueID, getNextSequenceValue, clearAllTables."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 9], "8": [0, 1, 2, 7, 9]}, "question_id": 271}
{"question": "Please change the following code to be implemented in cpp, with the function signature `std::vector<std::string> bf(std::string planet1, std::string planet2)`. Note: 1. Only implement the target function and import the necessary packages, do not generate any other code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "global", "instruction": "Your code should use the std keyword."}, {"type": "variable", "instruction": "Your code should define a variable named planet_names."}, {"type": "variable", "instruction": "Your code should define an enumeration named Planet."}, {"type": "variable", "instruction": "Variable planet_names, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named bf."}, {"type": "class", "instruction": "Your code should define a class named SolarSystem."}, {"type": "file", "instruction": "Your code should be organized in a package named planets."}, {"type": "combination", "instruction": "Your code should be organized in a package named planets, which should contain these classes SolarSystem."}], "instruction_dependence": {"5": [0, 1, 2, 3], "9": [0, 1, 2, 7, 8]}, "question_id": 272}
{"question": "Implement a local storage type `CpuLocalStorage` for `CPU` using C++. This concept is similar to Thread Local Storage (TLS), but it targets the CPU rather than the thread. In some high-performance computations, the CpuLocal type can help reduce competition between threads, thus improving performance. The following requirements need to be met:\n\n1. Do not reference other third-party libraries to implement, but you can use the types provided in std.\n2. It needs to be a template type used to store any type.\n3. Implement the interface `T& At(), const T& At() const` to represent the object corresponding to the cpu id on which the thread is running.\n4. Implement the interface `T& At(uint32_t cpu_id), const T& At(uint32_t cpu_id) const` to represent the object on the specified cpu.\n5. Implement the interface `void ForEach(const std::function<void(T*)>& cb), void ForEach(const std::function<void(const T&)>& cb) const` to traverse and process the objects on each cpu.\n6. Implement the interface `uint32_t GetCpuNum() const` for users to get the number of `CPU`.\n7. Support both Linux and MacOS platforms.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "variable", "instruction": "Your code should define a variable named `cpu_num`."}, {"type": "variable", "instruction": "Variable `cpu_num`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `GetCpuNum`."}, {"type": "function", "instruction": "Your code should not use any functions from the `malloc` and `free`."}, {"type": "interface", "instruction": "Your code should define an interface named `CpuLocalStorageInterface`."}, {"type": "class", "instruction": "Your code should define a class named `CpuLocalStorage`."}, {"type": "file", "instruction": "Your code should not use the following libraries `boost`."}, {"type": "combination", "instruction": "Your code should define a class named `CpuLocalStorage` that implements the `CpuLocalStorageInterface` interface."}], "instruction_dependence": {"3": [0, 1, 2], "9": [0, 1, 6, 7]}, "question_id": 273}
{"question": "Given 2 polygons, determine whether they overlap. Solve with the shapely library, define a function called solve, which takes in 2 lists of polygon vertices and returns a boolean value indicating whether they overlap. There is a bug in the provided code, please fix it and write the correct code.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define an enumeration named PolygonType."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named PolygonInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named PolygonChecker."}, {"type": "combination", "instruction": "In your code, the class PolygonChecker should have these methods check_overlap, get_polygon_type."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "10": [0, 1, 9]}, "question_id": 274}
{"question": "Create a Python program that can encode and decode Morse code. The program should be able to take a string of text and determine whether it is in natural language or Morse code, then convert it to the other form. The Morse code will use a dash '—' to represent a dash, a dot '.' to represent a dot, a single space ' ' to separate letters or symbols, and two spaces '  ' to separate words. The Morse code alphabet supported will be the one shown on the provided Wikipedia page (https://es.wikipedia.org/wiki/Código_morse), but for simplicity, the program will only support the English alphabet and numbers 0-9, along with a few punctuation marks. The program should include two main functions: `encode` to convert natural language to Morse code, and `decode` to convert Morse code to natural language. The program should also handle cases where the input string contains unsupported characters by skipping them during encoding and decoding.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use the 'def' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'list'."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "class", "instruction": "Your code should define a class named 'MorseCodeConverter'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'morse_code'."}, {"type": "file", "instruction": "Your code should not use the following libraries ['re', 'numpy']."}, {"type": "combination", "instruction": "You should initialize an object named 'converter' as an instance of the 'MorseCodeConverter' class using ['encode', 'decode'] for initialization."}, {"type": "combination", "instruction": "In your code, the class 'MorseCodeConverter' should have these methods ['encode', 'decode']."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'morse_code', which should contain these classes ['MorseCodeConverter']."}], "instruction_dependence": {"8": [0, 1, 2, 5], "9": [0, 1, 2, 5], "10": [0, 1, 2, 5, 6]}, "question_id": 275}
{"question": "Create a class `AnimatablePathValueParser` that parses a JSON object representing an animatable path value and constructs an `AnimatablePathValue` object from it. The JSON object contains keyframes that describe the path's movement over time. Each keyframe is a JSON object that may contain the following properties:\n\n- `t`: The time of the keyframe in frames.\n- `s`: The starting point of the path segment as an array `[x, y]`.\n- `e`: The ending point of the path segment as an array `[x, y]`.\n- `to` and `ti`: The outgoing and incoming tangents for the cubic bezier curve as arrays `[x, y]`.\n- `o` and `i`: The outgoing and incoming interpolator control points as arrays `[x, y]`.\n- `h`: A hold value (0 or 1) indicating if the path should hold at the starting point until the next keyframe.\n\nThe `AnimatablePathValueParser` should handle errors in the JSON data and throw appropriate exceptions. The parser should also calculate the duration, delay, and interpolators for the animation based on the keyframes.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the `def` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `keyframe_data`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `InterpolationType`."}, {"type": "variable", "instruction": "Variable `keyframe_data` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `parse_keyframe`."}, {"type": "interface", "instruction": "Your code should define an interface named `PathSegment`."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'pandas']."}, {"type": "combination", "instruction": "The function `parse_keyframe` should return a `dict` as its result."}], "instruction_dependence": {"7": [0, 1, 2, 5], "11": [0, 1, 2, 8]}, "question_id": 276}
{"question": "Implement a new data structure `TtlShardCache` using C++, which needs to meet the following requirements,\n1. This `TtlShardCache` supports concurrent reading and writing, its `API` is thread-safe.\n2. The implementation of `Map` is template-based, allowing the user to customize flexibly.\n3. The implementation of `Key, Value, HashFunc, EqualFunc` is also templated.\n3. Implement the interface `bool Load(const Key& key, Value* value, uint32_t cur_ts = time(nullptr))`, which means to load a `Value` according to the `Key`.\n4. Implement the interface `bool Store(const Key& key, T&& value, int64_t kv_size, bool lease_ttl_on_touch, bool force, bool update_if_exist)`, which means to store a KV pair into the `Cache`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cache_size."}, {"type": "variable", "instruction": "Your code should define an enumeration named CacheStatus."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable cache_size, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the std::rand, std::srand disallowed_function_list."}, {"type": "interface", "instruction": "Your code should define an interface named CacheInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TtlShardCache."}, {"type": "combination", "instruction": "In your code, the class TtlShardCache should have these methods Load, Store."}], "instruction_dependence": {"5": [0, 1, 3], "6": [0, 1, 3], "9": [0, 1, 8], "11": [0, 1, 10]}, "question_id": 277}
{"question": "Write a Python function `update_course` that updates the title and URL of an existing course in a mock REST API. The function should take three parameters: `course_id`, `new_title`, and `new_url`. It should perform the following steps:\n\n1. Send a GET request to retrieve the current course information from the mock API endpoint `http://localhost:8000/api/v2/cursos/{course_id}/`.\n2. Verify that the course with the given `course_id` exists by checking the status code of the GET request response. If the course does not exist, raise a `ValueError` with the message \"Course not found\".\n3. Update the course information by sending a PUT request with the new title and URL to the same endpoint.\n4. Check the status code of the PUT request response to ensure that the update was successful. If the status code is not 200, raise an `Exception` with the message \"Failed to update course\".\n5. Return the updated course information as a dictionary.\n\nThe function should use the provided `headers` for authorization and should handle any potential exceptions that may occur during the HTTP requests.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the `def` keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named `CourseStatus`."}, {"type": "function", "instruction": "Your code should include a function named `update_course`."}, {"type": "class", "instruction": "Your code should define a class named `CourseManager`."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `course_manager`."}, {"type": "file", "instruction": "Your code should not use the following libraries `flask, django`."}, {"type": "combination", "instruction": "The function `update_course` should take `course_id, new_title, new_url` as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named `course_manager`, which should contain these functions `update_course, get_course`."}], "instruction_dependence": {"8": [0, 1, 2, 7], "11": [0, 1, 2, 6], "12": [0, 1, 2, 9]}, "question_id": 278}
{"question": "Design a utility class `LocationUtils` that provides various functionalities related to location and preferences in an Android application. The class should include the following methods:\n\n1. `isLocationUpdatesRequested(Context context)`: Checks whether the location updates are currently requested by the user. It should return a boolean value.\n\n2. `setLocationUpdatesRequested(Context context, boolean requested)`: Updates the preference to start or stop requesting location updates based on the boolean parameter provided.\n\n3. `formatTimestampToDateTime(long timestamp)`: Converts a Unix timestamp (in milliseconds) to a human-readable date and time string in the format \"dd/MM/yyyy h:mm aa\".\n\n4. `getReadableLocation(Location location)`: Returns a string representation of a `Location` object in the format \"(latitude, longitude)\". If the location is `null`, it should return \"Unknown location\".\n\n5. `localizeDistanceUnit(Context context, String distance)`: Converts the distance string from \"km\" to the Arabic equivalent \"كم\" if the device's current language is Arabic. Otherwise, it should return the distance string unchanged.\n\nWrite a self-contained solution with the necessary imports and provide test cases to verify the correctness of each method.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named isLocationUpdatesRequested."}, {"type": "function", "instruction": "Your code should not use any functions from the disallowed_function_list."}, {"type": "class", "instruction": "Your code should define a class named LocationUtils."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.locationutils."}, {"type": "file", "instruction": "Your code should import the following libraries android.content.Context, android.location.Location, java.text.SimpleDateFormat, java.util.Locale."}, {"type": "file", "instruction": "Your code should use the function getSystemService from the library android.content.Context."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.Date."}, {"type": "combination", "instruction": "You should initialize an object named locationUtils as an instance of the LocationUtils class using context for initialization."}, {"type": "combination", "instruction": "The function formatTimestampToDateTime should take long timestamp as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"9": [0, 1, 8, 13], "11": [0, 1, 6, 13], "12": [0, 1, 4, 13]}, "question_id": 279}
{"question": "Design a notification system for a commenting platform that determines whether to send email notifications to users and administrators based on various conditions. The system should include the following functionalities:\n\n1. `checkNeedSendEmailToUser`: Determine if an email notification should be sent to a user when their comment receives a reply. The conditions are:\n   - Do not send an email if the user replies to their own comment.\n   - Do not send an email for replies to comments that are in a pending state (awaiting moderation).\n   - Do not send an email if the user has disabled email notifications in their personal settings.\n   - Do not send an email to an administrator if the administrator email notifications are disabled globally.\n\n2. `checkNeedSendEmailToAdmin`: Determine if an email notification should be sent to an administrator when a comment is made. The conditions are:\n   - Do not send an email if the global configuration for admin email notifications is disabled.\n   - Do not send an email if the administrator replies to their own comment.\n   - Do not send an email if the user's reply is directed to the same administrator (to avoid duplicate notifications when `NoiseModeOn` is true).\n   - Do not send an email if the comment is from another administrator.\n   - Do not send an email if the administrator is not responsible for the site where the comment was made.\n   - Do not send an email if the administrator has disabled email notifications in their personal settings.\n\n3. `checkNeedMultiPush`: Determine if a multi-channel push notification should be sent for a comment. The conditions are:\n   - Do not send a notification for comments made by administrators.\n   - In non-noisy mode, ignore replies to non-root comments if the target is not an administrator.\n\nImplement the `NotifyPusher` struct with the necessary fields and methods to perform these checks. Assume that the `dao` field provides access to data access methods like `FetchUserForComment` and `CookUser`, and the `conf` field contains configuration settings.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `notificationSettings`."}, {"type": "variable", "instruction": "Variable `notificationSettings` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `checkNeedSendEmailToUser`."}, {"type": "interface", "instruction": "Your code should define an interface named `Notifier`."}, {"type": "class", "instruction": "Your code should define a class named `NotifyPusher`."}, {"type": "file", "instruction": "Your code should be organized in a package named `notification`."}, {"type": "file", "instruction": "Your code should import the following libraries `fmt`, `time`, `errors`."}, {"type": "file", "instruction": "Your code should use the function `time.Now()` from the library `time`."}, {"type": "file", "instruction": "Your code should not use the following libraries `log`."}, {"type": "combination", "instruction": "The function `checkNeedSendEmailToUser` should return a `bool` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `notification`, which should contain these functions `checkNeedSendEmailToUser`, `checkNeedSendEmailToAdmin`, `checkNeedMultiPush`."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"3": [0, 2, 13], "9": [0, 8, 13], "11": [0, 4, 13], "12": [0, 7, 13]}, "question_id": 280}
{"question": "What is the correlation between Verbal and Math scores for states with a Rate higher than 75? The data file is 'sat_scores.csv', please strictly refer to the header of the data and use python code to answer the question. Use 'pandas.read_csv' to read the data, the default data is in the same path as the code. The analysis code is written as a function called 'proc_data()', and this function does not require any input parameters, using the correlation in the question as the return value.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named 'correlation_result'."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable 'correlation_result', should be a global variable."}, {"type": "variable", "instruction": "Variable 'correlation_result', should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['os', 'sys']."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "4": [0, 1]}, "question_id": 281}
{"question": "Please write a Java program to implement a simple message queue management system. The system should allow users to add messages to the queue and retrieve and remove messages from the queue according to the FIFO (First-In-First-Out) principle. Ensure that your implementation is thread-safe. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.LinkedList;\npublic class MessageQueueManager {\n    private LinkedList<String> queue = new LinkedList<>();\n    public synchronized void addMessage(String message) {\n    }\n    public synchronized String getMessage() throws InterruptedException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the synchronized keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named queue."}, {"type": "variable", "instruction": "Variable queue, type should be LinkedList<String>."}, {"type": "function", "instruction": "Your code should include a function named addMessage."}, {"type": "class", "instruction": "Your code should define a class named MessageQueueManager."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.LinkedList."}, {"type": "combination", "instruction": "In your code, the class MessageQueueManager should have these properties queue."}, {"type": "combination", "instruction": "The function getMessage should return a String as its result."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"4": [0, 1, 3, 10], "8": [0, 1, 6, 10], "9": [0, 1, 5, 10]}, "question_id": 282}
{"question": "Please write a Java method to find the month with the highest sales in a year. Given an integer array where each element represents the sales for a month, return the month with the highest sales. The counting of months starts from 1, i.e., 1 represents January, 2 represents February, and so on. If there are multiple months with the same highest sales, return the first such month. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class SalesAnalyzer {\n    public static int findHighestSalesMonth(int[] monthlySales) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named maxSalesMonth."}, {"type": "variable", "instruction": "Variable maxSalesMonth, type should be int."}, {"type": "function", "instruction": "Your code should not use any functions from the Arrays class."}, {"type": "class", "instruction": "Your code should define a class named SalesAnalyzer."}, {"type": "file", "instruction": "Your code should be organized in a package named sales.analysis."}, {"type": "combination", "instruction": "In your code, the class SalesAnalyzer should have these properties: public static int findHighestSalesMonth(int[] monthlySales)."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"3": [0, 2, 8], "7": [0, 5, 8]}, "question_id": 283}
{"question": "Write a Python function `generate_saml_metadata_url` that takes a Django application's SAML authentication view function and returns a URL pattern for the SAML metadata endpoint. The function should create a URL pattern that matches the path `saml.xml` and associates it with the provided view function for handling SAML metadata requests. The function should adhere to the following requirements: 1. The function should accept one argument: the view function that handles SAML metadata requests. 2. The function should return a Django URL pattern that can be included in a Django application's `urlpatterns`. 3. The URL pattern should match the exact path `saml.xml` and route requests to the provided view function. 4. The name of the URL pattern should be `samlxml`. Include a docstring in the function that describes its purpose, parameters, and return value. Also, provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the lambda keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {}, "question_id": 284}
{"question": "Implement a Strong Enemy Class for a Game\n\nIn a 3D game, you are tasked with implementing a class for a strong enemy character that can be pooled for performance optimization. The strong enemy, referred to as `APooledStrongEnemy`, should have the following features:\n\n1. A capsule component for collision detection with a half-height of 140 and a radius of 60.\n2. A skeletal mesh component that uses a specific mesh asset.\n3. An AI controller that can possess the enemy and control its behavior.\n4. An animation instance to control the enemy's animations.\n5. The ability to spawn with a predefined amount of health points (HP).\n6. An axe as a weapon that can be attached to the enemy's mesh.\n7. The ability to attack a target, play an attack animation, and play a hit sound effect.\n8. A method to reset the enemy's health to its initial state.\n9. A method to handle damage taken by the enemy, updating its health points and logging the new health value.\n\nThe enemy should also have a sound component for the axe hit sound effect. The enemy's AI controller, animation instance, and axe weapon should be loaded from specified paths in the game's content.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named enemyHealth."}, {"type": "variable", "instruction": "Variable enemyHealth should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named AttackTarget."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named APooledStrongEnemy."}, {"type": "file", "instruction": "Your code should be organized in a package named EnemyPackage."}, {"type": "combination", "instruction": "Your code should be organized in a package named EnemyPackage, which should contain these classes APooledStrongEnemy."}, {"type": "combination", "instruction": "Your code should be organized in a package named EnemyPackage, which should contain these functions AttackTarget, ResetHealth, HandleDamage."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "11": [0, 1, 2, 9, 10], "12": [0, 1, 2, 10]}, "question_id": 285}
{"question": "Design a Java program that manages user information for an event management system. The system should be able to add new users, retrieve user details, and manage the events attended by each user. Each user has a unique ID, a name, an email address, and a set of roles. Additionally, users can attend multiple events, and this relationship should be tracked within the system. The `User` class has already been provided in the given code snippet. Your task is to implement the following functionalities: 1. A method `addUser(String name, String email, Set<UserRole> roles)` that adds a new user to the system. The method should validate that the name and email are not blank and that the email is in a valid format. If the validation fails, the method should throw an `IllegalArgumentException`. 2. A method `getUserDetails(Long userId)` that retrieves a user's details by their ID. If no user with the given ID exists, the method should return `null`. 3. A method `attendEvent(Long userId, Event event)` that records that a user has attended an event. If the user or event does not exist, the method should throw an `IllegalArgumentException`. 4. A method `getAttendedEvents(Long userId)` that returns a set of events attended by the user with the given ID. If no user with the given ID exists, the method should return an empty set. For simplicity, you can assume that the `Event` class is similar to the `User` class and has an ID and other relevant fields.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named userCount."}, {"type": "variable", "instruction": "Variable userCount, should be a global variable."}, {"type": "variable", "instruction": "Variable userCount, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named validateEmail."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named EventListener."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.*, java.text.*."}, {"type": "file", "instruction": "Your code should use the function format from the library java.text.SimpleDateFormat."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "10": [0, 1, 9]}, "question_id": 286}
{"question": "Implement the dataset processing method dataset_process(data, output_folder, max_len=20) using python, which processes the input data (the data format is [[content, label], ...]) and saves it to the specified folder. Processing requirements: 1. De-duplicate data based on content 2. Remove content that exceeds 20 in length 3. Randomly shuffle data 4. Divide train, valid, test into 8:1:1, and save them to train.txt, valid.txt, test.txt in the specified directory", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named processed_data."}, {"type": "variable", "instruction": "Variable processed_data, type should be list."}, {"type": "function", "instruction": "Your code should include a function named save_to_file."}, {"type": "interface", "instruction": "Your code should define an interface named DatasetProcessor."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'random']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'numpy']."}, {"type": "combination", "instruction": "You should define an interface named DatasetProcessor that includes these methods ['process_data', 'save_data']."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "11": [0, 1, 2, 3, 8]}, "question_id": 287}
{"question": "Write a C++ program to implement a linear search algorithm that searches for a specific integer in an array. The program should prompt the user to enter the integer they want to search for. Then, it should search through a predefined array of integers to find the target integer. The program should print each step of the loop, indicating the current loop iteration and whether the target integer has been found. If the integer is found, the program should print 'Number FOUND at index [index]' where [index] is the position of the integer in the array. If the integer is not found, the program should print 'Number NOT FOUND'. The array should be hardcoded into the program.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named targetNumber."}, {"type": "variable", "instruction": "Variable targetNumber, type should be int."}, {"type": "variable", "instruction": "Variable targetNumber, should be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the STL."}, {"type": "interface", "instruction": "Your code should define an interface named Searchable."}, {"type": "class", "instruction": "Your code should define a class named LinearSearch."}, {"type": "combination", "instruction": "You should initialize an object named searchObject as an instance of the LinearSearch class using targetNumber for initialization."}, {"type": "combination", "instruction": "You should define an interface named Searchable that includes these methods search, printResult."}, {"type": "combination", "instruction": "In your code, the class LinearSearch should have these properties targetNumber, array."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"3": [0, 2, 11], "4": [0, 2, 11], "8": [0, 7, 11], "9": [0, 6, 11], "10": [0, 7, 11]}, "question_id": 288}
{"question": "In the fictional city of Graphville, there are `n` houses numbered from `1` to `n`. The city council wants to establish a neighborhood watch program. To do this, they want to pair up houses to look out for each other. However, the city has a peculiar rule: houses that are paired must not have the same color. You are given a list of `n` integers representing the color of each house. Your task is to determine if it's possible to pair up houses according to the city's rule. If it is possible, print 'YES' followed by the pairs of houses. If it's not possible, print 'NO'. A pair is represented by two integers, indicating the house numbers. Each house can only be in one pair. Write a function `solve()` that reads the number of houses `n` and an array `a` of `n` integers where `a[i]` represents the color of the `i+1`-th house. The function should output the pairs of houses if possible, or indicate that it's not possible to pair up the houses according to the rule.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named house_pairs."}, {"type": "variable", "instruction": "Variable house_pairs, the initial value should be an empty list."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "class", "instruction": "Your code should define a class named HousePairing."}, {"type": "combination", "instruction": "You should initialize an object named pairing_solution as an instance of the HousePairing class using n and a for initialization."}, {"type": "combination", "instruction": "The function solve should return a string as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 4, 10], "8": [0, 1, 7, 10], "9": [0, 1, 6, 10]}, "question_id": 289}
{"question": "Design a chat system where messages can be sent between clients and agents. The system should be able to handle different types of messages, such as text, photo, and audio. Each message should have a unique identifier, a timestamp, and information about the sender. The system should also be able to track the status of each message, indicating whether it has been sent, arrived, or failed.\n\nImplement the `ChatMessage` class that extends the `BaseMessage` class provided in the code snippet. The `ChatMessage` class should include the following additional features:\n\n1. A method `send()` that will change the message's status to `STATE_SENDING` and simulate sending the message by changing the status to `STATE_ARRIVE` after a delay.\n2. A method `fail()` that will change the message's status to `STATE_FAILED`.\n3. A method `read()` that will mark the message as read.\n4. Override the `toString()` method to return a string representation of the message, including the type, content, sender, and status.\n\nEnsure that your implementation is thread-safe and that the message statuses are updated correctly.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named messageStatus."}, {"type": "variable", "instruction": "Variable messageStatus, should be a global variable."}, {"type": "variable", "instruction": "Variable messageStatus should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the Collections class."}, {"type": "interface", "instruction": "Your code should define an interface named MessageHandler."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ChatMessage."}, {"type": "file", "instruction": "Your code should be organized in a package named com.chatsystem."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.chatsystem, which should contain these classes ChatMessage, BaseMessage."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.chatsystem, which should contain these functions send, fail, read."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"5": [0, 4, 14], "6": [0, 4, 14], "9": [0, 8, 14], "12": [0, 10, 11, 14], "13": [0, 11, 14]}, "question_id": 290}
{"question": "Implement a new data structure `InstrumentedMutex` in c++, which should meet the following requirements,\n1. Similar to `std::mutex`, it also offers `lock/unlock/try_lock` these few `API`\n2. Supports the implementation of `IsOwned/IsNotOwned` two APIs, indicating whether the current thread holds this lock", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `mutex_owner`."}, {"type": "variable", "instruction": "Variable `mutex_owner`, type should be `std::thread::id`."}, {"type": "variable", "instruction": "Variable `mutex_owner`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `IsOwned`."}, {"type": "interface", "instruction": "Your code should define an interface named `Lockable`."}, {"type": "interface", "instruction": "The interface names in your code should follow the `PascalCase` naming convention."}, {"type": "class", "instruction": "Your code should define a class named `InstrumentedMutex`."}, {"type": "combination", "instruction": "Your code should define a class named `InstrumentedMutex` that implements the `Lockable` interface."}, {"type": "combination", "instruction": "In your code, the class `InstrumentedMutex` should have these properties `mutex_owner`, `mutex`."}, {"type": "combination", "instruction": "The function `IsOwned` should return a `bool` as its result."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"4": [0, 1, 3, 13], "5": [0, 1, 3, 13], "8": [0, 1, 7, 13], "10": [0, 1, 7, 9, 13], "11": [0, 1, 9, 13], "12": [0, 1, 6, 13]}, "question_id": 291}
{"question": "Implement a Java program that simulates an agent-based system for managing a transportation network. The system should be able to add new agents, each representing a node or an edge in the network, and define their roles and operations. The agents should be able to communicate with each other to form a coherent route from a starting point to a destination. The program should also be able to generate a unique identifier for each agent and convert the internal representation of the network to a human-readable format that includes the main identifiers in both English and Russian, the type of program (SCP program or agent SCP program), and the key elements of the process.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "function", "instruction": "Your code should include a function named generateUniqueIdentifier."}, {"type": "interface", "instruction": "Your code should define an interface named NetworkAgent."}, {"type": "class", "instruction": "Your code should define a class named TransportationNetwork."}, {"type": "file", "instruction": "Your code should not use the following libraries [org.json, com.google.gson]."}, {"type": "combination", "instruction": "The function generateUniqueIdentifier should return a String as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 8]}, "question_id": 292}
{"question": "Write a Python script that lists all `State` objects that contain the letter 'a' from the database `hbtn_0e_6_usa`. Your script should take 3 arguments: `mysql username`, `mysql password` and `database name`. You must use the SQLAlchemy module's `create_engine`, `sessionmaker`, and `Base` to interact with your MySQL database. The script should print the `id` and `name` of each `State` object that contains the letter 'a'. Your script should handle errors for invalid credentials and other SQLAlchemy errors.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the `lambda` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `list`."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `state_list`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `StateEnum`."}, {"type": "variable", "instruction": "Variable `state_list`, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named `DatabaseInterface`."}, {"type": "interface", "instruction": "The interface names in your code should follow the `PascalCase` naming convention."}], "instruction_dependence": {"8": [0, 1, 2, 6], "10": [0, 1, 2, 9]}, "question_id": 293}
{"question": "You are tasked with creating a Python script for a school's web application using Django. The application should have a URL configuration that routes different paths to their respective applications. Each application (students, teachers, staff, and classes) has its own set of views and URLs. Write a Python script that defines the URL patterns for the main application, `idealschool`. The script should include the following: 1. Import necessary modules and functions from Django to handle URLs and static files. 2. Define the `urlpatterns` list that includes: - The admin site URL. - URLs that route to the included URL configurations of the `studentdirectory`, `teacherdirectory`, `staffdirectory`, and `classesdirectory` applications. - A static URL pattern for serving media files during development. 3. Each application's URLs should be included with a namespace corresponding to the application name (e.g., 'students' for `studentdirectory`). 4. The `urlpatterns` should not include a URL pattern for the index view (it should be commented out as in the given code snippet). 5. Ensure that the URL patterns follow Django's best practices for URL configuration.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "variable", "instruction": "Your code should define a variable named urlpatterns."}, {"type": "variable", "instruction": "Variable urlpatterns, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named URLConfig."}, {"type": "file", "instruction": "Your code should be organized in a package named idealschool."}, {"type": "combination", "instruction": "In your code, the class URLConfig should have these properties ['urlpatterns']."}, {"type": "combination", "instruction": "Your code should be organized in a package named idealschool, which should contain these classes ['URLConfig']."}, {"type": "combination", "instruction": "Your code should be organized in a package named idealschool, which should contain these functions ['include', 'path', 'static']."}], "instruction_dependence": {"3": [0, 1, 2], "6": [0, 1, 4], "7": [0, 1, 4, 5], "8": [0, 1, 5]}, "question_id": 294}
{"question": "Write a function `minCut(s string) int` that calculates the minimum number of cuts needed to partition a string such that every substring of the partition is a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A single character is considered to be a palindrome for this problem. For example: - The string 'aab' can be partitioned into ['aa','b'] after one cut. - The string 'a' is already a palindrome, so it doesn't need any cuts. - The string 'ab' needs one cut to be partitioned into ['a','b'], where both 'a' and 'b' are palindromes.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure slice."}, {"type": "variable", "instruction": "Your code should define a variable named 'dp'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable 'dp', type should be []int."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"3": [0, 2, 5], "4": [0, 2, 5]}, "question_id": 295}
{"question": "Please write a Java program to verify if the domain part of a URL is valid. A domain is considered invalid if it contains special characters, such as a question mark (?). You need to implement a method called `checkDomainValidity`, which takes a string parameter representing the domain and returns a boolean value indicating whether the domain is valid. A valid domain returns `true`, while a domain that contains special characters returns `false`. Make sure your code includes a class called `DomainValidator` and a static method called `checkDomainValidity`. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.regex.Pattern;\npublic class DomainValidator {\n    public static boolean checkDomainValidity(String domain) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named isValidDomain."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable isValidDomain, the initial value should be true."}, {"type": "variable", "instruction": "Variable isValidDomain, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named checkDomainValidity."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.validator."}, {"type": "combination", "instruction": "The function checkDomainValidity should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.validator, which should contain these functions checkDomainValidity."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "6": [0, 3], "9": [0, 7], "10": [0, 8]}, "question_id": 296}
{"question": "Create a Python Django REST API that provides token-based authentication for two versions of an identity service: v2.0 (deprecated) and v3 (stable). The API should have two endpoints, `/v2.0/tokens` and `/v3/tokens`, which allow clients to obtain tokens by providing their tenant information. The tokens are used to authenticate against the identity service and retrieve a service catalog specific to the tenant. The API should handle the following scenarios: 1. A `GET` request to either endpoint should return the version details of the identity service. 2. A `POST` request to `/v3/tokens` should accept tenant information, authenticate the user, and return a token along with the v3 service catalog. 3. A `POST` request to `/v2.0/tokens` should also accept tenant information, authenticate the user, and return a token, but it should convert the v3 service catalog to the v2.0 format before returning it. The API should also handle errors gracefully and return appropriate HTTP status codes and error messages for various failure scenarios, such as invalid tenant information or issues with the identity service.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tenant_info."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the ['eval', 'exec'] list."}, {"type": "interface", "instruction": "Your code should define an interface named TokenInterface."}, {"type": "class", "instruction": "Your code should define a class named TokenService."}, {"type": "file", "instruction": "Your code should not use the following libraries ['flask', 'fastapi']."}, {"type": "combination", "instruction": "You should initialize an object named token_service as an instance of the TokenService class using ['tenant_info'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named TokenInterface that includes these methods ['authenticate', 'get_service_catalog']."}, {"type": "combination", "instruction": "In your code, the class TokenService should have these methods ['authenticate', 'get_service_catalog', 'convert_catalog']."}], "instruction_dependence": {"5": [0, 1, 4], "10": [0, 1, 8], "11": [0, 1, 7], "12": [0, 1, 8]}, "question_id": 297}
{"question": "Please write a Java method to check if the meteorological data collected by a weather station is within a reasonable range. The method will receive three parameters: temperature (float), humidity (float), and wind speed (integer). If all parameters are within the predefined valid range, the method returns `true`; otherwise, it returns `false`. Assume you already have three auxiliary methods: `checkTemperature`, `checkHumidity`, and `checkWindSpeed`, which are used to validate the temperature, humidity, and wind speed, respectively. Ensure your code is completely self-contained and includes all necessary import statements. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Math;\npublic class WeatherDataValidator {\n    public boolean checkWeatherData(float temperature, float humidity, int windSpeed) {\n    }\n    private boolean checkTemperature(float temperature) {\n    }\n    private boolean checkHumidity(float humidity) {\n    }\n    private boolean checkWindSpeed(int windSpeed) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'ArrayList'."}, {"type": "variable", "instruction": "Your code should define a variable named 'isValid'."}, {"type": "variable", "instruction": "Variable 'isValid', type should be 'boolean'."}, {"type": "function", "instruction": "Your code should include a function named 'checkWeatherData'."}, {"type": "class", "instruction": "Your code should define a class named 'WeatherDataValidator'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'weather.validation'."}, {"type": "combination", "instruction": "You should initialize an object named 'validator' as an instance of the 'WeatherDataValidator' class using 'temperature, humidity, windSpeed' for initialization."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 8]}, "question_id": 298}
{"question": "Write a Java class `Dec2Hex` that provides a method `convertToHex(int decimal)` which converts a given non-negative integer to its hexadecimal representation as a String. The hexadecimal representation should use uppercase letters and should not have leading zeros. Additionally, write a set of JUnit test cases in the class `Dec2HexTest` to verify the correctness of the `convertToHex` method. The test cases should cover various scenarios including edge cases.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named hexResult."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Dec2Hex."}, {"type": "combination", "instruction": "You should initialize an object named converter as an instance of the Dec2Hex class using no parameters for initialization."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"5": [0, 4, 8], "7": [0, 6, 8]}, "question_id": 299}
{"question": "Design a custom permission class for a Django REST Framework API that allows access to a resource in the following manner:\n\n- Any authenticated user can read the resource (GET, HEAD, OPTIONS).\n- Only admin users (staff members) can create (POST), update (PUT, PATCH), or delete (DELETE) the resource.\n\nThe permission class should be named `AdminWritePermission`. It should inherit from `permissions.BasePermission` and override the `has_permission` method to implement the above access policy.\n\nWrite a Python script that includes the `AdminWritePermission` class and demonstrates its usage within a simple API view. The script should also include test cases that verify the correctness of the permission class for different types of users and HTTP methods.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `super` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `list`."}, {"type": "variable", "instruction": "Your code should define a variable named `user`."}, {"type": "variable", "instruction": "Variable `user`, type should be `User`."}, {"type": "variable", "instruction": "Variable `user`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `test_permissions`."}, {"type": "class", "instruction": "Your code should define a class named `AdminWritePermission`."}, {"type": "class", "instruction": "The class names in your code should follow the `CamelCase` naming convention."}, {"type": "combination", "instruction": "The function `has_permission` should return a `bool` as its result."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "8": [0, 1, 7], "9": [0, 1, 6]}, "question_id": 300}
{"question": "Design a Go program that acts as a bot for a chat service, which allows users to register their GitHub ID and associate it with their chat service ID (traQ ID). The bot should listen for messages in the chat and perform the following actions:\n\n1. If a message starts with the command `/register <traQ ID> <GitHub ID>`, the bot should store this association in a MySQL database. If the traQ ID is already registered, it should update the existing GitHub ID. After successful registration, the bot should confirm by sending a \"Registered!\" message to the channel.\n\n2. If a message contains a GitHub URL that includes a registered GitHub ID, the bot should respond with a message tagging the corresponding traQ ID(s).\n\n3. The bot should also implement a cron job that refreshes the in-memory ID map from the database every day at midnight.\n\nThe program should handle errors gracefully and log them. It should also ensure that the database connection is properly closed when the program exits.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named dbConnection."}, {"type": "variable", "instruction": "Variable dbConnection, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named BotInterface."}, {"type": "class", "instruction": "Your code should define a class named ChatBot."}, {"type": "file", "instruction": "Your code should import the following libraries [\"database/sql\", \"github.com/go-sql-driver/mysql\", \"time\"]."}, {"type": "combination", "instruction": "You should initialize an object named bot as an instance of the ChatBot class using [\"dbConnection\"] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named ChatBot that implements the BotInterface interface."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6], "11": [0, 1, 2, 3, 4, 9], "12": [0, 1, 2, 3, 4, 8, 9]}, "question_id": 301}
{"question": "Please answer in Go language. There is an interface IPrint and two objects HDFS and Kafka. Please implement the following functionality: complete the methods for HDFS and Kafka to implement the IPrint interface and in the final CallName() invocation, output their respective Name:", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named CallName."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named IPrint."}, {"type": "class", "instruction": "Your code should define a class named HDFS."}, {"type": "file", "instruction": "Your code should be organized in a package named main."}, {"type": "combination", "instruction": "In your code, the class HDFS should have these properties Name."}, {"type": "combination", "instruction": "The function CallName should return a string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named main, which should contain these functions CallName."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 13], "10": [0, 1, 2, 8, 13], "11": [0, 1, 2, 5, 13], "12": [0, 1, 2, 9, 13]}, "question_id": 302}
{"question": "Write a Go program that simulates a basic countdown timer. The program should accept an integer `duration` representing the number of seconds for the countdown. It should then print each second as it counts down to zero. Once the countdown reaches zero, it should print \"Time's up!\".\n\nThe program should use a loop to simulate the countdown timer. Ensure that the loop behaves similarly to a `while` loop, as Go does not have a `while` keyword, but uses a `for` loop to achieve the same functionality.\n\nAdditionally, write a test function to verify that the countdown works correctly. The test should check that the countdown prints the correct sequence of numbers and the \"Time's up!\" message at the end.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define an enumeration named TimerState."}, {"type": "function", "instruction": "Your code should include a function named countdown."}, {"type": "interface", "instruction": "Your code should define an interface named TimerInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Timer."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named timer."}, {"type": "combination", "instruction": "You should define an interface named TimerInterface that includes these methods Start, Stop."}, {"type": "combination", "instruction": "The function countdown should take duration as a parameter."}], "instruction_dependence": {"8": [0, 1, 2, 7], "10": [0, 1, 2, 9], "12": [0, 1, 2, 7], "13": [0, 1, 2, 6]}, "question_id": 303}
{"question": "Please write a Java function that converts a student’s view object to a model object. Suppose we have a student tracking system where the `Student` class represents the model layer and the `StudentView` class represents the view layer. The `Student` class contains the student’s ID and name, while the `StudentView` class contains the student's view information such as name and email. You need to complete a function called `convertViewToModel` that takes a `StudentView` object as a parameter and returns a `Student` object. Note that you need to fetch the student’s name from the `StudentView` object and set it to the corresponding attribute of the `Student` object. Also, ensure all necessary packages are imported. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Student {\n    private int id;\n    private String name;\n    public Student() {}\n    public int getId() {\n    }\n    public void setId(int id) {\n    }\n    public String getName() {\n    }\n    public void setName(String name) {\n    }\n}\nclass StudentView {\n    private String name;\n    private String email;\n    public StudentView() {}\n    public String getName() {\n    }\n    public void setName(String name) {\n    }\n    public String getEmail() {\n    }\n    public void setEmail(String email) {\n    }\n}\npublic class StudentConverter {\n    public static Student convertViewToModel(StudentView sv) {\n    }\n    public static void checkConversion() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the static keyword."}, {"type": "function", "instruction": "Your code should include a function named convertViewToModel."}, {"type": "class", "instruction": "Your code should define a class named StudentConverter."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "The function convertViewToModel should return a Student as its result."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"4": [0, 1, 3, 6], "5": [0, 1, 2, 6]}, "question_id": 304}
{"question": "Create a Java class named `CustomTracingController` that extends the `TracingController` class from the Android SDK. The `CustomTracingController` class should provide a custom implementation for starting and stopping the tracing of web view performance data. The class should be designed to work with Android P (API level 28) and above. The `CustomTracingController` should have the following functionalities: 1. `start(TracingConfig tracingConfig)`: This method should start the tracing with the given `TracingConfig`. It should print a log message indicating that tracing has started and with which categories (obtained from `tracingConfig`). 2. `stop(OutputStream outputStream, Executor executor)`: This method should stop the tracing and write the trace data to the provided `OutputStream`. It should return `true` if the operation was successful and `false` otherwise. It should also print a log message indicating that tracing has stopped. 3. `isTracing()`: This method should return a boolean indicating whether tracing is currently active. Additionally, provide a simple test case to demonstrate the usage of the `CustomTracingController` class.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named isTracingActive."}, {"type": "variable", "instruction": "Variable isTracingActive, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named CustomTracingController."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.tracing."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.tracing, which should contain these classes CustomTracingController."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 8], "7": [0, 5, 6, 8]}, "question_id": 305}
{"question": "Please write a Java program to handle student grade information. Given an array of objects, each object represents different grade information of a student, including student ID, name, math grade, English grade, science grade, etc. You need to encapsulate this information into a student grade object and return this object. Please ensure that your code can handle different data types; for example, the math grade may be given in string form and needs to be converted to an integer. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass StudentScore {\n    private int studentId;\n    private String studentName;\n    private int mathScore;\n    private int englishScore;\n    private int scienceScore;\n    public StudentScore(int studentId, String studentName, int mathScore, int englishScore, int scienceScore) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class ScoreProcessor {\n    public StudentScore generateStudentScore(Object[] objectArray) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named generateStudentScore."}, {"type": "interface", "instruction": "Your code should define an interface named GradeCalculator."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named StudentScore."}, {"type": "file", "instruction": "Your code should be organized in a package named school.grades."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.Objects."}, {"type": "combination", "instruction": "You should define an interface named GradeCalculator that includes these methods calculateGrade, getGradeSummary."}, {"type": "combination", "instruction": "In your code, the class StudentScore should have these methods getStudentId, getStudentName, getMathScore, getEnglishScore, getScienceScore."}, {"type": "combination", "instruction": "The function generateStudentScore should return a StudentScore as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named school.grades, which should contain these functions generateStudentScore, calculateGrade."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 5, 14], "10": [0, 1, 5, 14], "11": [0, 1, 7, 14], "12": [0, 1, 4, 14], "13": [0, 1, 8, 14]}, "question_id": 306}
{"question": "Design a Java class `SensorDataProcessor` that can parse and process sensor data packets received from various devices. Each sensor data packet is a 64-byte array that contains a header, a timestamp, a device ID, and sensor data. The packets are received in a large byte array where each 64-byte segment represents a single sensor data packet. The `SensorDataProcessor` class should have the following functionalities: 1. Parse the received byte array into individual sensor data packets. 2. Validate the integrity of each packet using a checksum. 3. Extract and convert the temperature data from the packet if available. 4. Provide access to the timestamp and device ID for each packet. The temperature data is encoded in two bytes within the sensor data and should be converted to a `BigDecimal` representing the temperature in degrees Celsius. The conversion logic is already provided in the `convertTemp` method. The class should throw an exception if the packet size is incorrect or if the checksum validation fails. Implement the `SensorDataProcessor` class with the necessary methods to handle the parsing, validation, and data extraction. Provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named convertTemp."}, {"type": "interface", "instruction": "Your code should define an interface named SensorDataInterface."}, {"type": "class", "instruction": "Your code should define a class named SensorDataProcessor."}, {"type": "file", "instruction": "Your code should import the following libraries java.math.BigDecimal, java.util.Arrays."}, {"type": "combination", "instruction": "You should initialize an object named sensorProcessor as an instance of the SensorDataProcessor class using byte[] data for initialization."}, {"type": "combination", "instruction": "Your code should define a class named SensorDataProcessor that implements the SensorDataInterface interface."}, {"type": "combination", "instruction": "In your code, the class SensorDataProcessor should have these methods parseData, validateChecksum, extractTemperature, getTimestamp, getDeviceId."}], "instruction_dependence": {"7": [0, 5], "8": [0, 4, 5], "9": [0, 5]}, "question_id": 307}
{"question": "Design a program that can format and display a list of objects as a table in different formats such as plain text, CSV, and HTML. The program should be able to handle different types of objects as long as they have the attributes specified in the column names. The program should include a class hierarchy for different table formatters and a function to print the table using the specified formatter. The `TableFormatter` class is an abstract base class with methods `headings(self, headers)` and `row(self, rowdata)` that should be implemented by subclasses to emit the table headings and a single row of table data, respectively. The `TextTableFormatter`, `CSVTableFormatter`, and `HTMLTableFormatter` classes are concrete implementations of `TableFormatter` that format the table data as plain text, CSV, and HTML, respectively. The `FormatError` exception should be raised when an unknown format is requested. The `create_formatter(fmt)` function should return an instance of the appropriate formatter based on the `fmt` argument, which can be `'txt'`, `'csv'`, or `'html'`. The `print_table(lst, colnames, formatter)` function should print the table using the provided formatter. It takes a list of objects `lst`, a list of column names `colnames`, and a formatter instance `formatter`. It uses the `headings` method of the formatter to print the column names and the `row` method to print each object in the list.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named print_table."}, {"type": "class", "instruction": "Your code should define a class named TableFormatter."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named table_formatter."}, {"type": "file", "instruction": "Your code should import the following libraries csv, html."}, {"type": "file", "instruction": "Your code should use the function writer from the library csv."}, {"type": "combination", "instruction": "The function print_table should take lst, colnames, formatter as parameters."}, {"type": "combination", "instruction": "The function print_table should return a None as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named table_formatter, which should contain these classes TableFormatter, TextTableFormatter, CSVTableFormatter, HTMLTableFormatter."}, {"type": "combination", "instruction": "Your code should be organized in a package named table_formatter, which should contain these functions create_formatter, print_table."}], "instruction_dependence": {"6": [0, 5], "9": [0, 8], "10": [0, 4], "11": [0, 4], "12": [0, 5, 7], "13": [0, 7]}, "question_id": 308}
{"question": "Design a Java program that implements three different variations of the Insertion Sort algorithm to sort an array of integers in ascending order. The program should include the following three methods:\n\n1. `InsertSort1`: This method implements the basic Insertion Sort algorithm using a brute-force approach. It iterates through the array and for each element, it finds the correct position by comparing it with each of the elements before it and inserts it at the correct position.\n\n2. `InsertSort2`: This method optimizes the basic Insertion Sort by reducing the number of comparisons. It searches for the correct position of the current element while simultaneously shifting the elements one position to the right to make space for the insertion.\n\n3. `InsertSort3`: This method further optimizes the Insertion Sort by using data swapping instead of shifting elements. It swaps the current element with the previous element until it is in the correct position.\n\nThe program should also measure the time taken to sort the array using each method and print the sorted array along with the time taken in milliseconds.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `array`."}, {"type": "function", "instruction": "Your code should include a function named `InsertSort1`."}, {"type": "function", "instruction": "Your code should include a function named `InsertSort2`."}, {"type": "function", "instruction": "Your code should include a function named `InsertSort3`."}, {"type": "function", "instruction": "Your code should not use any functions from the `Arrays` class."}, {"type": "class", "instruction": "Your code should define a class named `InsertionSort`."}, {"type": "combination", "instruction": "The function `InsertSort1` should take `int[] array` as parameters."}, {"type": "combination", "instruction": "The function `InsertSort2` should take `int[] array` as parameters."}, {"type": "combination", "instruction": "The function `InsertSort3` should take `int[] array` as parameters."}, {"type": "combination", "instruction": "The function `InsertSort1` should return a `void` as its result."}, {"type": "combination", "instruction": "The function `InsertSort2` should return a `void` as its result."}, {"type": "combination", "instruction": "The function `InsertSort3` should return a `void` as its result."}], "instruction_dependence": {"12": [0, 1, 7, 7, 7], "15": [0, 1, 7, 7, 7]}, "question_id": 309}
{"question": "Design a Go program that simulates a simplified version of a node status reporting service for a cryptocurrency Lightning Network node. The service should periodically collect and send node status information to a remote server. The node status information should include: Node ID (a unique identifier for the node), Node version, Number of active channels, Number of inactive channels, Current block height, Whether the node's blockchain data is fully synchronized. The service should: Collect the node status information every 30 seconds, Sign the collected information using a mock signature function, Send the signed information as a JSON payload to a mock remote server via an HTTP POST request, Log the success or failure of each operation. The program should be able to handle errors gracefully and continue its operation unless a stop signal is received.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named nodeStatus."}, {"type": "variable", "instruction": "Variable nodeStatus, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named collectNodeStatus."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named NodeStatusReporter."}, {"type": "file", "instruction": "Your code should be organized in a package named nodestatus."}, {"type": "file", "instruction": "Your code should import the following libraries: 'net/http', 'time', 'encoding/json', 'log'."}, {"type": "file", "instruction": "Your code should use the function NewRequest from the library net/http."}, {"type": "combination", "instruction": "The function collectNodeStatus should take nodeID, nodeVersion, activeChannels, inactiveChannels, blockHeight, isSynced as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named nodestatus, which should contain these functions: collectNodeStatus, sendNodeStatus, logStatus."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"3": [0, 2, 12], "5": [0, 4, 12], "9": [0, 8, 12], "10": [0, 4, 12], "11": [0, 7, 12]}, "question_id": 310}
{"question": "In the realm of the game 'Mystic Alchemist,' players can use various potions to enhance their character's abilities. Each potion has a unique effect on the character's characteristics, such as experience, health points (hp), agility, intelligence, strength, and endurance. The `SetPotion` class is responsible for creating these effects based on the potion used. Your task is to implement the `SetPotion` class and its method `createChanges`, which takes an enum `name_potion` representing the type of potion and returns a `std::pair` containing the `changes_characteristic` (the characteristic that the potion affects) and an `int` (the amount by which the characteristic is changed). The `name_potion` enum and `changes_characteristic` enum are defined as follows: ```cpp enum class name_potion { experience, hp, agility, intelligence, strength, endurance }; enum class changes_characteristic { experience, hp, agility, intelligence, strength, endurance }; ``` The effects of the potions are as follows: - Experience potion increases experience by 100 points. - HP potion increases health points by 100 points. - Agility potion increases agility by 5 points. - Intelligence potion increases intelligence by 5 points. - Strength potion increases strength by 5 points. - Endurance potion increases endurance by 5 points. Implement the `SetPotion` class and the `createChanges` method. Then, write a main function to demonstrate the usage of the `SetPotion` class with a few test cases.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'vector'."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'potionEffect'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable 'potionEffect' should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named 'PotionEffectInterface'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'mysticAlchemist'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'mysticAlchemist', which should contain these functions 'createChanges', 'main'."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "9": [0, 1, 8]}, "question_id": 311}
{"question": "Design a class `TerrainGenerator` that uses the `LazyRegionBuilder` to generate a terrain height map for a 2D game. The terrain should be generated using Perlin noise to create a realistic-looking landscape. The `TerrainGenerator` should allow for specifying the dimensions of the map, the scale of the noise, and the seed for the random number generator. The `TerrainGenerator` should have the following features: - A method `generateHeightMap` that returns a 2D array of integers representing the height map. - A method `setDimensions` to set the width and height of the map. - A method `setScale` to set the scale of the Perlin noise. - A method `setSeed` to set the seed for the random number generator. The height map should be normalized to a range of values suitable for the game (e.g., 0 to 255 for an 8-bit height map).", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named height_map."}, {"type": "variable", "instruction": "Variable height_map, type should be list."}, {"type": "variable", "instruction": "Variable height_map, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generateHeightMap."}, {"type": "file", "instruction": "Your code should not use the following libraries numpy."}, {"type": "combination", "instruction": "The function generateHeightMap should return a list as its result."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "8": [0, 6]}, "question_id": 312}
{"question": "Create a Java program that demonstrates the potential for integer underflow when multiplying two integers. The program should include a method that takes an integer from an environment variable, multiplies it by a fixed number, and prints the result. The program should handle possible exceptions and edge cases, such as when the environment variable is not set or cannot be parsed as an integer, and when the multiplication results in integer underflow. The program should include three scenarios: 1. A 'bad' scenario where the multiplication is performed without checking for underflow, potentially leading to incorrect results. 2. A 'good' scenario with a guard (Good-to-Bad) where the multiplication is only performed if the input is non-negative, avoiding underflow. 3. A 'better' scenario with a guard (Good-to-Better) where the multiplication is performed with a check to prevent underflow, and a warning is issued if the input is too small. Provide test cases to verify that the program behaves correctly in each scenario.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the final keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inputValue."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable inputValue, type should be int."}, {"type": "interface", "instruction": "Your code should define an interface named Multiplier."}, {"type": "class", "instruction": "Your code should define a class named UnderflowDemo."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.stream."}, {"type": "combination", "instruction": "You should define an interface named Multiplier that includes these methods multiply, checkUnderflow."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "9": [0, 1, 8], "11": [0, 1, 7]}, "question_id": 313}
{"question": "Design a system that integrates with HashiCorp Vault to authenticate and configure Kubernetes-based authentication. The system should be able to ensure that the Kubernetes authentication method is enabled in Vault and configure it with the necessary parameters. The system should consist of a Go package named `auth` that provides an interface `Authenticator` with two methods: `EnsureAuth()` and `ConfigureAuth()`. The package should also provide a concrete implementation of this interface in the form of a `KubernetesAuthenticator` struct. The `KubernetesAuthenticator` struct should have methods to ensure that the Kubernetes authentication method is enabled (`EnsureAuth`) and to configure it with the necessary parameters (`ConfigureAuth`). The configuration parameters should be passed to the `KubernetesAuthenticator` via a struct named `K8sAuthenticatorOptions`. The `EnsureAuth` method should check if the Kubernetes authentication method is already enabled and enable it if not. The `ConfigureAuth` method should configure the authentication method with the provided parameters. The system should handle any errors that occur during the authentication and configuration process and return them to the caller.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the `defer` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `map`."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `vaultClient`."}, {"type": "variable", "instruction": "Variable `vaultClient`, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named `KubernetesAuthenticator`."}, {"type": "file", "instruction": "Your code should be organized in a package named `auth`."}, {"type": "file", "instruction": "Your code should import the following libraries `github.com/hashicorp/vault/api`, `fmt`, `errors`."}, {"type": "file", "instruction": "Your code should use the function `NewClient` from the library `github.com/hashicorp/vault/api`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `auth`, which should contain these classes `KubernetesAuthenticator`, `K8sAuthenticatorOptions`."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 12], "10": [0, 1, 2, 9, 12], "11": [0, 1, 2, 7, 8, 12]}, "question_id": 314}
{"question": "Create a simple Android application that uses a `BottomNavigationView` to switch between two fragments: `FirstFragment` and `SecondFragment`. Each fragment should display a distinct message on the screen.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Kotlin, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `override` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `navView`."}, {"type": "variable", "instruction": "Variable `navView`, type should be `BottomNavigationView`."}, {"type": "variable", "instruction": "Variable `navView`, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named `OnFragmentInteractionListener`."}, {"type": "class", "instruction": "Your code should define a class named `MainActivity`."}, {"type": "combination", "instruction": "You should define an interface named `OnFragmentInteractionListener` that includes these methods `onFragmentInteraction`."}, {"type": "combination", "instruction": "In your code, the class `MainActivity` should have these methods `onCreate`, `onNavigationItemSelected`."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"4": [0, 1, 3, 10, 11], "5": [0, 1, 3, 10, 11], "8": [0, 1, 6, 10, 11], "9": [0, 1, 7, 10, 11]}, "question_id": 315}
{"question": "Please write a Python function `max_subsequence(nums): int` to solve this problem: For a given sequence nums, calculate and return the length of the longest strictly increasing subsequence. A subsequence is a sequence derived from the array by deleting (or not deleting) elements in the array without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7]. >>> max_subsequence([1,2,3,7,2,10]) 5", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, type should be int."}, {"type": "file", "instruction": "Your code should be organized in a package named subsequence."}, {"type": "combination", "instruction": "Your code should be organized in a package named subsequence, which should contain these functions max_subsequence."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"5": [0, 4, 8, 9], "7": [0, 6, 8, 9]}, "question_id": 316}
{"question": "Create a Python class named `WebPageElements` that represents a collection of XPath constants for different elements on a web page. The class should contain the following elements:\n\n1. A header section with constants for a shop link, a search icon, a search bar, and a search button.\n2. A footer section with constants for a contact link, a terms of service link, and a privacy policy link.\n3. A sidebar section with constants for a user profile link, a notifications icon, and a settings link.\n\nThe class should also include a method `get_xpath(element_name)` that takes the name of an element as a string and returns the corresponding XPath constant. If the element name does not exist, the method should raise a `ValueError` with an appropriate error message.\n\nWrite the `WebPageElements` class following the guidelines and provide test cases to verify the correctness of the `get_xpath` method.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named `WebPageElements`."}, {"type": "variable", "instruction": "Variable `WebPageElements`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `WebPageElements` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `get_xpath`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named `WebPageElements`."}, {"type": "combination", "instruction": "In your code, the class `WebPageElements` should have these methods `get_xpath`."}, {"type": "combination", "instruction": "The function `get_xpath` should take `element_name` as parameters."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "10": [0, 1, 2, 6]}, "question_id": 317}
{"question": "You are given two arrays `nums1` and `nums2` consisting of positive integers and `0`. You must replace **all** `0` in the two arrays with **strictly** positive integers, and satisfy that the sum of all elements in the two arrays is **equal**. Return the **minimum** equal sum, if the two arrays cannot be made equal, return `-1`. Please complete the following implementation:\n```cpp\nclass Solution {\npublic:\n    long long minSum(vector<int> nums1, vector<int> nums2);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named sum1."}, {"type": "variable", "instruction": "Your code should define an enumeration named ReplacementStrategy."}, {"type": "interface", "instruction": "Your code should define an interface named SumCalculator."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "file", "instruction": "Your code should import the following libraries vector, algorithm."}, {"type": "file", "instruction": "Your code should use the function accumulate from the library algorithm."}, {"type": "combination", "instruction": "You should initialize an object named solution as an instance of the Solution class using default parameters for initialization."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 8], "10": [0, 1, 7]}, "question_id": 318}
{"question": "In a virtual environment simulation game, you are tasked with creating a dynamic weather system that can transition between different weather profiles, including a sunset profile. The sunset profile should gradually change the environment's lighting, sky color, and other atmospheric effects to simulate a realistic sunset. Your goal is to implement a `WeatherSystem` class in C++ that manages the transition between different weather profiles. One of the profiles you need to implement is the `SunsetProfile`, which should inherit from a base class `WeatherProfile`. The `SunsetProfile` class must override a virtual method `ApplyProfile` that applies the sunset effects to the environment. Additionally, you need to create a `WeatherController` class that can switch the current weather profile to the `SunsetProfile` and apply the changes to the environment. The `WeatherProfile` base class and the `SunsetProfile` derived class should be defined in separate header files. The `WeatherController` class should be implemented in a separate source file.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named sunsetIntensity."}, {"type": "variable", "instruction": "Variable sunsetIntensity, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named WeatherController."}, {"type": "file", "instruction": "Your code should be organized in a package named weather_system."}, {"type": "file", "instruction": "Your code should not use the following libraries [<iostream>, <vector>]."}, {"type": "combination", "instruction": "Your code should be organized in a package named weather_system, which should contain these classes [WeatherProfile, SunsetProfile, WeatherController]."}, {"type": "combination", "instruction": "Your code should be organized in a package named weather_system, which should contain these functions [ApplyProfile, SwitchProfile]."}], "instruction_dependence": {"5": [0, 1, 4], "9": [0, 1, 6, 7], "10": [0, 1, 7]}, "question_id": 319}
{"question": "Write a Python program that performs the following tasks:\n\n1. **Pyramid of Numbers**: Given an integer `n`, print a pyramid of numbers with `n` rows. The first row should start with the number 1, and each row should contain consecutive numbers increasing from left to right and starting from the last number of the previous row + 1.\n\n2. **String Character Analysis**: Given a string `s`, count the number of uppercase and lowercase characters in the string and return a tuple containing the counts `(uppercase_count, lowercase_count)`.\n\n3. **String Case Inversion**: Given a string `s`, return a new string where all lowercase characters are converted to uppercase and all uppercase characters are converted to lowercase.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `def` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `result`."}, {"type": "variable", "instruction": "Variable `result`, type should be `tuple`."}, {"type": "variable", "instruction": "Variable `result`, the initial value should be `(0, 0)`."}, {"type": "function", "instruction": "Your code should include a function named `invert_case`."}, {"type": "file", "instruction": "Your code should import the following libraries `string`."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 4, 9], "6": [0, 1, 4, 9]}, "question_id": 320}
{"question": "Please write a Java method that creates and returns an `ImageConfig` object configured with image loading parameters. If the object has already been created, the method should directly return the existing object; otherwise, it should create a new object and set the following parameters: crop the image to fit the center of the view, and set the loading priority to normal. Ensure that the method is thread-safe. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nclass ImageConfig {\n    private boolean centerCrop;\n    private int priority; \n    public ImageConfig() {\n    }\n    public ImageConfig centerCrop() {\n        return this;\n    }\n    public ImageConfig priority(int priority) {\n        return this;\n    }\n    public boolean isCenterCrop() {\n        return centerCrop;\n    }\n    public int getPriority() {\n        return priority;\n    }\n}\npublic class ImageLoader {\n    private static ImageConfig imageConfig;\n    private static final Lock lock = new ReentrantLock();\n    public static ImageConfig getImageConfig() {\n        return imageConfig;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure Lock."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named imageConfig."}, {"type": "variable", "instruction": "Variable imageConfig, should not be a global variable."}, {"type": "variable", "instruction": "Variable lock, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named ImageConfigInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ImageLoader."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.concurrent.locks.Lock, java.util.concurrent.locks.ReentrantLock."}, {"type": "combination", "instruction": "In your code, the class ImageConfig should have these properties centerCrop, priority."}, {"type": "combination", "instruction": "In your code, the class ImageConfig should have these methods centerCrop, priority, isCenterCrop, getPriority."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "10": [0, 8], "11": [0, 8]}, "question_id": 321}
{"question": "Write a Go program that simulates a simple banking system with the following functionalities:\n\n1. **Deposit**: Add a specified amount of money to the bank balance.\n2. **Withdraw**: Subtract a specified amount of money from the bank balance. If the withdrawal amount is greater than the current balance, an error should be thrown.\n3. **GetBalance**: Return the current balance.\n\nThe program should use the `try` and `catch` pattern to handle any errors that occur during the withdrawal process. Specifically, if a withdrawal is attempted that exceeds the available balance, the program should catch the error and print an appropriate message without crashing.\n\nImplement the `BankAccount` struct with the necessary methods to perform the above operations and demonstrate the error handling using the `try.Catch` function from the `github.com/apitalist/lang/v2/try` package.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named balance."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable balance, the initial value should be 0."}, {"type": "class", "instruction": "Your code should define a class named BankAccount."}, {"type": "file", "instruction": "Your code should be organized in a package named banking."}, {"type": "combination", "instruction": "You should initialize an object named account as an instance of the BankAccount class using initialBalance for initialization."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "7": [0, 1, 5]}, "question_id": 322}
{"question": "Design a C++ program that reads a configuration file and sets compilation flags based on the contents of the file. The configuration file will contain key-value pairs where the key is the name of the compilation flag and the value is either \"ON\", \"OFF\", or \"DEFAULT\". The program should define macros corresponding to the flags that are set to \"ON\" or \"OFF\", and it should ignore the flags set to \"DEFAULT\". If a flag is set to both \"ON\" and \"OFF\", the program should report an error. The program should also handle special cases for platform-specific flags. The configuration file format is as follows:\n```\nCATCH_CONFIG_ANDROID_LOGWRITE=ON\nCATCH_CONFIG_NO_ANDROID_LOGWRITE=OFF\nCATCH_CONFIG_COLOUR_WIN32=DEFAULT\nCATCH_CONFIG_NO_COLOUR_WIN32=ON\n...\n```\nThe program should parse this file and generate a header file with the appropriate `#define` and `#error` directives based on the rules described above.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "variable", "instruction": "Your code should define a variable named configFile."}, {"type": "variable", "instruction": "Your code should define an enumeration named FlagStatus."}, {"type": "variable", "instruction": "Variable configFile, type should be std::ifstream."}, {"type": "variable", "instruction": "Variable configFile, the initial value should be an opened file stream."}, {"type": "variable", "instruction": "Variable configFile should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named parseConfigFile."}, {"type": "file", "instruction": "Your code should import the following libraries <iostream>, <fstream>, <map>, <string>."}, {"type": "file", "instruction": "Your code should use the function getline from the library <string>."}, {"type": "combination", "instruction": "The function parseConfigFile should return a std::map<std::string, std::string> as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 1, 2, 11], "5": [0, 1, 2, 11], "6": [0, 1, 2, 11], "9": [0, 1, 8, 11], "10": [0, 1, 7, 11]}, "question_id": 323}
{"question": "Write a Go program that defines a custom `Power` function capable of handling both integer and floating-point exponentiation. The function should be able to compute the power of an integer raised to an integer, a float raised to a float, an integer raised to a float, and a float raised to an integer. The function should be robust and handle type checking internally, returning an appropriate error message if the arguments are not of the expected types. The program should include a `main` function that demonstrates the use of the `Power` function with various test cases, including edge cases. The output should clearly indicate the input values, the computed result, and any error messages if applicable.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "interface", "instruction": "Your code should define an interface named PowerInterface."}, {"type": "class", "instruction": "Your code should define a class named PowerClass."}, {"type": "combination", "instruction": "You should define an interface named PowerInterface that includes these methods ComputePower, CheckType."}, {"type": "combination", "instruction": "In your code, the class PowerClass should have these methods ComputePower, CheckType."}], "instruction_dependence": {"6": [0, 1, 2, 4], "7": [0, 1, 2, 5]}, "question_id": 324}
{"question": "Create a Java program that simulates the collision detection between two Oriented Bounding Boxes (OBBs) in a 2D space. The program should display a graphical user interface (GUI) where two rectangles rotate and move across the screen. The rectangles should change color when they intersect, indicating a collision. The rectangles should be represented by the `OBBRectangle` class, which includes methods for setting the position, size, and rotation of the rectangle, as well as for detecting collisions with other `OBBRectangle` instances. The GUI should be updated in real-time to reflect the movement and rotation of the rectangles, as well as the collision state. The program should use double buffering to prevent flickering during the rendering process.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named `rectangle1`."}, {"type": "variable", "instruction": "Variable `rectangle1`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `detectCollision`."}, {"type": "class", "instruction": "Your code should define a class named `OBBRectangle`."}, {"type": "file", "instruction": "Your code should not use the following libraries `java.awt.event`, `javax.swing.event`."}, {"type": "combination", "instruction": "In your code, the class `OBBRectangle` should have these properties `position`, `size`, `rotation`."}, {"type": "combination", "instruction": "The function `detectCollision` should take `OBBRectangle other` as parameters."}, {"type": "combination", "instruction": "The function `detectCollision` should return a `boolean` as its result."}], "instruction_dependence": {"2": [0, 1], "6": [0, 4], "7": [0, 3], "8": [0, 3]}, "question_id": 325}
{"question": "Create a custom Android `ImageView` that maintains an aspect ratio based on the dimensions provided by the user. The `AspectRatioImageView` should scale its height to maintain the aspect ratio when its width is set either through layout parameters or programmatically. The aspect ratio is determined by the `setSize` method which takes the desired width and height as parameters. The `AspectRatioImageView` should override the `onMeasure` method to calculate the new height based on the aspect ratio and the given width. If no size has been set, it should behave as a regular `AppCompatImageView`. Implement the `AspectRatioImageView` class and provide test cases to verify its correctness. The test cases should check if the `ImageView` scales correctly when sizes are set and when default behavior is expected.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Kotlin, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named `aspectRatio`."}, {"type": "variable", "instruction": "Variable `aspectRatio`, type should be `Float`."}, {"type": "function", "instruction": "Your code should not use any functions from the `Math` library."}, {"type": "interface", "instruction": "Your code should define an interface named `OnSizeChangedListener`."}, {"type": "class", "instruction": "Your code should define a class named `AspectRatioImageView`."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries `com.google.android.material`."}, {"type": "combination", "instruction": "Your code should define a class named `AspectRatioImageView` that implements the `OnSizeChangedListener` interface."}, {"type": "combination", "instruction": "In your code, the class `AspectRatioImageView` should have these properties `width`, `height`, and `aspectRatio`."}], "instruction_dependence": {"4": [0, 1, 2, 3], "8": [0, 1, 2, 7], "10": [0, 1, 2, 6, 7], "11": [0, 1, 2, 7]}, "question_id": 326}
{"question": "Design a simple network server framework that allows users to define custom behavior for handling client requests. The framework should be based on the concept of routers, where each router can have optional pre-processing, main processing, and post-processing steps. The given code snippet provides a `BaseRouter` class with empty implementations for `PreHandle`, `Handle`, and `PostHandle` methods. Your task is to: 1. Define an `IRequest` interface in the `ziface` package that represents a client request. The interface should have at least one method, `GetData()`, which returns the data associated with the request. 2. Implement a `Request` struct that satisfies the `IRequest` interface. 3. Extend the `BaseRouter` to create a custom router that overrides any combination of the `PreHandle`, `Handle`, and `PostHandle` methods. 4. Create a `Server` struct that can register a custom router and simulate handling a request by calling the router's methods in the correct order (PreHandle, Handle, PostHandle). 5. Write test cases to demonstrate that the custom router's methods are called correctly when a request is handled.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the `interface` keyword."}, {"type": "variable", "instruction": "Your code should define a variable named `requestData`."}, {"type": "variable", "instruction": "Variable `requestData` should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `IRequest`."}, {"type": "class", "instruction": "Your code should define a class named `CustomRouter`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `net`, `testing`."}, {"type": "file", "instruction": "Your code should use the function `Listen` from the library `net`."}, {"type": "combination", "instruction": "You should define an interface named `IRequest` that includes these methods `GetData`."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4, 12], "8": [0, 1, 2, 3, 7, 12], "10": [0, 1, 2, 3, 9, 12], "11": [0, 1, 2, 3, 6, 12]}, "question_id": 327}
{"question": "Design and implement a RESTful API using Spring Boot that manages a simple library system. The system should allow for the following functionalities:\n\n1. Add a new book to the library.\n2. Retrieve a list of all books in the library.\n3. Retrieve details of a specific book by its ID.\n4. Update the details of an existing book.\n5. Delete a book from the library by its ID.\n\nEach book should have the following attributes:\n- ID (unique identifier)\n- Title\n- Author\n- ISBN\n- Published Year\n\nThe RESTful service should follow the standard HTTP method semantics:\n- POST for creating a new book.\n- GET for reading books.\n- PUT for updating an existing book.\n- DELETE for removing a book.\n\nProvide appropriate endpoints for each functionality and ensure that the service handles requests and responses in JSON format.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "variable", "instruction": "Your code should define a variable named bookRepository."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable bookRepository should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named getAllBooks."}, {"type": "class", "instruction": "Your code should define a class named BookController."}, {"type": "file", "instruction": "Your code should import the following libraries org.springframework.web.bind.annotation.*, org.springframework.beans.factory.annotation.Autowired."}, {"type": "combination", "instruction": "You should initialize an object named bookService as an instance of the BookService class using bookRepository for initialization."}, {"type": "combination", "instruction": "In your code, the class BookController should have these methods addBook, getBookById, updateBook, deleteBook."}, {"type": "combination", "instruction": "The function getAllBooks should return a List<Book> as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"4": [0, 1, 3, 12], "5": [0, 1, 3, 12], "9": [0, 1, 7, 12], "10": [0, 1, 7, 12], "11": [0, 1, 6, 12]}, "question_id": 328}
{"question": "Write a C++ program that captures and filters UDP packets from a specified host and port using the pcap library. The program should be able to: 1. Open a pcap session on a specified network device. 2. Look up the network and netmask of the device. 3. Compile and set a filter for capturing only UDP packets from a given source host and source port. 4. Capture packets and return the next available packet. 5. Handle any errors that may occur during the process. The program should be verbose, printing information about the device, local network, netmask, compiled command, and datalink type when the verbose flag is set. It should also provide a function to retrieve the next captured packet, along with its length.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named packet_filter."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable packet_filter, type should be std::string."}, {"type": "variable", "instruction": "Variable packet_filter, should be a constant."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"5": [0, 1, 4, 8], "6": [0, 1, 4, 8], "7": [0, 1, 4, 8]}, "question_id": 329}
{"question": "Write a Java program that calculates the Fibonacci sequence up to a given number of elements and returns the sequence as an array. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. The first two numbers in the Fibonacci sequence are always 0 and 1. Your task is to implement the `FibonacciSequence` class with a static method `generateSequence(int count)` that takes an integer `count` representing the number of elements in the sequence and returns an array containing the Fibonacci sequence up to the `count`-th element.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named sequence."}, {"type": "variable", "instruction": "Variable sequence, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named generateSequence."}, {"type": "class", "instruction": "Your code should define a class named FibonacciSequence."}, {"type": "combination", "instruction": "In your code, the class FibonacciSequence should have these properties sequence."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"3": [0, 2, 7, 8], "6": [0, 5, 7, 8]}, "question_id": 330}
{"question": "Please write a Java method to format the current date as \"year-month-day\" and set it as the text of a given text box. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JTextField;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Locale;\npublic class DateFormatter {\n    public static void formatCurrentDateAndSetText(JTextField textField) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named formattedDate."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable DATE_FORMAT, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named formatCurrentDateAndSetText."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.dateformatter."}, {"type": "file", "instruction": "Your code should import the following libraries javax.swing.JTextField, java.text.SimpleDateFormat, java.util.Calendar, java.util.Locale."}, {"type": "file", "instruction": "Your code should use the function format from the library java.text.SimpleDateFormat."}, {"type": "combination", "instruction": "The function formatCurrentDateAndSetText should return a void as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.dateformatter, which should contain these functions formatCurrentDateAndSetText, checkFunction."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "8": [0, 7], "9": [0, 5], "10": [0, 6]}, "question_id": 331}
{"question": "Design a Django application model for a music marketplace where bands can list their merchandise. The application should have two main models: `Band` and `MerchandiseListing`. The `Band` model represents musical groups with attributes such as name, genre, biography, year formed, whether they are currently active, and their official homepage. The `MerchandiseListing` model represents items for sale, with attributes such as title, description, price, and a reference to the band selling the item. Ensure that the price field only allows positive values and includes a string representation for each model. Implement the models with appropriate fields, relationships, and validations. Write a Python code snippet that defines these models using Django's ORM, and provide test cases to demonstrate the creation of `Band` and `MerchandiseListing` instances, ensuring that the validations are working as expected.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named `create_band`."}, {"type": "interface", "instruction": "Your code should define an interface named `MerchandiseInterface`."}, {"type": "class", "instruction": "Your code should define a class named `Band`."}, {"type": "file", "instruction": "Your code should be organized in a package named `music_marketplace`."}, {"type": "file", "instruction": "Your code should import the following libraries `django.db.models`, `django.core.validators`."}, {"type": "file", "instruction": "Your code should use the function `MinValueValidator` from the library `django.core.validators`."}, {"type": "combination", "instruction": "You should define an interface named `MerchandiseInterface` that includes these methods `get_title`, `get_price`."}, {"type": "combination", "instruction": "The function `create_band` should return a `Band` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `music_marketplace`, which should contain these classes `Band`, `MerchandiseListing`."}], "instruction_dependence": {"9": [0, 1, 8], "10": [0, 1, 5], "11": [0, 1, 4], "12": [0, 1, 6, 7]}, "question_id": 332}
{"question": "Design a Django REST framework API that provides endpoints for managing a simple inventory system. The inventory system should have two main resources: `Product` and `Category`. Each `Product` should belong to a `Category`, and each `Category` can have multiple `Products`. The `Product` resource should have the following fields: `id` (auto-generated unique identifier), `name` (string, required), `description` (string, optional), `price` (decimal, required), `category` (foreign key to `Category`). The `Category` resource should have the following fields: `id` (auto-generated unique identifier), `name` (string, required). The API should provide the following endpoints: `GET /products/`: List all products, `POST /products/`: Create a new product, `GET /products/{product_id}/`: Retrieve a specific product by its `id`, `PUT /products/{product_id}/`: Update a specific product by its `id`, `DELETE /products/{product_id}/`: Delete a specific product by its `id`, `GET /categories/`: List all categories, `POST /categories/`: Create a new category, `GET /categories/{category_id}/`: Retrieve a specific category by its `id`, `PUT /categories/{category_id}/`: Update a specific category by its `id`, `DELETE /categories/{category_id}/`: Delete a specific category by its `id`.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named get_product_by_id."}, {"type": "class", "instruction": "Your code should define a class named Product."}, {"type": "combination", "instruction": "In your code, the class Product should have these properties id, name, description, price, category."}, {"type": "combination", "instruction": "In your code, the class Product should have these methods save, delete, update."}, {"type": "combination", "instruction": "The function get_product_by_id should take product_id as parameters."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7], "9": [0, 1, 2, 7], "10": [0, 1, 2, 6]}, "question_id": 333}
{"question": "Find the roots of the equations below:\n\nx_1 + 0.5 * (x_1 - x_2)^3 = 1\n0.5 * (x_2 - x_1)^3 + x2 = 0\n\nDefine a Python function solve() to solve the problem. It should return a list of length 2, representing the two roots of the equations.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the return keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "variable", "instruction": "Your code should define a variable named roots."}, {"type": "variable", "instruction": "Variable roots, the initial value should be [0, 0]."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "file", "instruction": "Your code should be organized in a package named equation_solver."}, {"type": "combination", "instruction": "The function solve should return a list as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 10], "9": [0, 1, 2, 3, 7, 10]}, "question_id": 334}
{"question": "Write a Python program that automates the creation of various types of documents with unique timestamps. The program should create a new directory with subdirectories for each document type (PDF, TXT, Excel, PowerPoint, and Word). Each subdirectory should contain a specified number of files of its respective type, each with a unique name that includes a timestamp and an index number. The program should follow these requirements: 1. Create a new directory named with the current timestamp in the format `YYYYMMDD-HHMMSS` on the user's Desktop within a folder named `WF`. If the directory already exists, it should notify the user without creating a new one. 2. Inside the new directory, create subdirectories for each document type: `ppt`, `pdf`, `txt`, `docs`, and `excel`. 3. Generate a specified number of files for each document type, with names that include the document type, a unique timestamp, and an index number (e.g., `pdf_doc_number20230315-1030001.pdf`). 4. The content of each file should be a simple placeholder text or value that includes the document type and index number. The program should include the following functions: - `create_pdf(path)`: Creates PDF files in the `pdf` subdirectory. - `create_txt(path)`: Creates text files in the `txt` subdirectory. - `create_excel(path)`: Creates Excel files in the `excel` subdirectory. - `create_presentation(path)`: Creates PowerPoint files in the `ppt` subdirectory. - `create_document(path)`: Creates Word documents in the `docs` subdirectory. Provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `with` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `set`."}, {"type": "variable", "instruction": "Your code should define a variable named `timestamp`."}, {"type": "variable", "instruction": "Variable `timestamp` should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `DocumentCreator`."}, {"type": "interface", "instruction": "The interface names in your code should follow the `PascalCase` naming convention."}, {"type": "class", "instruction": "Your code should define a class named `DocumentGenerator`."}, {"type": "file", "instruction": "Your code should import the following libraries `os`, `datetime`, `fpdf`, `openpyxl`, `python-pptx`, `docx`."}, {"type": "file", "instruction": "Your code should use the function `FPDF` from the library `fpdf`."}, {"type": "combination", "instruction": "Your code should define a class named `DocumentGenerator` that implements the `DocumentCreator` interface."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "9": [0, 1, 8], "10": [0, 1, 5, 7]}, "question_id": 335}
{"question": "Design a Java class that represents a simplified version of a Kafka to BigQuery Sink Connector. The connector should be able to start with a given configuration, create tasks based on the configuration, and handle schema retrieval for BigQuery tables. The connector should also be able to handle configuration exceptions and provide version information. The connector should have the following functionalities: `start(Map<String, String> properties)`, `taskClass()`, `taskConfigs(int maxTasks)`, `stop()`, `version()`, and `config()`. Additionally, the connector should use a `SchemaRetriever` to fetch schemas for BigQuery tables. The `SchemaRetriever` should have methods to configure itself, retrieve a schema for a given table, and set the last seen schema for a table.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `implements` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `LinkedList`."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `schemaRetriever`."}, {"type": "variable", "instruction": "Variable `schemaRetriever`, should be a global variable."}, {"type": "variable", "instruction": "Variable `schemaRetriever`, the initial value should be `null`."}, {"type": "function", "instruction": "Your code should include a function named `start`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.kafka.bigquery.sink`."}, {"type": "file", "instruction": "Your code should import the following libraries `java.util.Map`, `java.util.List`, `com.google.cloud.bigquery.Schema`."}, {"type": "file", "instruction": "Your code should use the function `getSchema` from the library `com.google.cloud.bigquery.SchemaRetriever`."}, {"type": "file", "instruction": "Your code should not use the following libraries `org.apache.kafka.connect.sink.SinkTask`."}, {"type": "combination", "instruction": "The function `taskConfigs` should return a `List<Map<String, String>>` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.kafka.bigquery.sink`, which should contain these functions `start`, `taskClass`, `taskConfigs`, `stop`, `version`, `config`."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7], "11": [0, 1, 10], "13": [0, 1, 7], "14": [0, 1, 9]}, "question_id": 336}
{"question": "You are tasked with creating a Python program that classifies images of human faces based on their associated personality traits. Each image has a unique identifier and is associated with a set of personality trait values. The program should distribute the images into folders based on whether the trait value for each image is above or below a certain threshold, indicating a high or low range for that trait. The personality traits are as follows: Warmth, Reasoning, Emotional Stability, Dominance, Liveliness, Rule Consciousness, Social Boldness, Sensitivity, Vigilance, Abstractedness, Privateness, Apprehension, Openness to Change, Self-Reliance, Perfectionism, and Tension. The program should: - Import the necessary data from JSON files containing the trait values and image identifiers for the training and validation datasets. - Use the provided trait thresholds to determine the classification range for each trait. - Copy the images into the appropriate classification folders, which are structured as follows: `../dataset/classification/{train_or_validation}/{trait}/{range}/` where `{train_or_validation}` can be either 'train' or 'validation', `{trait}` is the name of the personality trait, and `{range}` is either 'high-range' or 'low-range', depending on the trait value. Write a Python program that includes the following: - A function to import the trait values and image identifiers from the JSON files. - A function to extract the trait values into a list. - A function to distribute the images into the classification folders based on the trait values and thresholds. - Test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named threshold."}, {"type": "variable", "instruction": "Variable threshold, the initial value should be 0.5."}, {"type": "function", "instruction": "Your code should include a function named classify_images."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named ImageClassifier."}, {"type": "class", "instruction": "Your code should define a class named PersonalityTraitClassifier."}, {"type": "file", "instruction": "Your code should be organized in a package named image_classification."}, {"type": "combination", "instruction": "You should define an interface named ImageClassifier that includes these methods classify_images, import_data, extract_traits."}, {"type": "combination", "instruction": "In your code, the class PersonalityTraitClassifier should have these methods classify_images, import_data, extract_traits."}, {"type": "combination", "instruction": "The function classify_images should take image_data, trait_thresholds as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 13], "6": [0, 5, 13], "10": [0, 7, 13], "11": [0, 8, 13], "12": [0, 5, 13]}, "question_id": 337}
{"question": "Design a software component for a cross-platform compiler framework that can create compiler instances for different processor architectures and apply memory layout strategies based on the target architecture. The framework should support IA32, 32C, ARM, and THUMB architectures. It should also be capable of enabling optimizations for compilers that support them. The compiler instances should be created through a `CompilerFactory` class, which provides two main methods: `getCompiler` and `getMemoryLayout`. The `getCompiler` method should return a compiler instance for the specified architecture, and optionally wrap it with an optimizer if optimizations are enabled and supported. The `getMemoryLayout` method should return a memory layout strategy instance appropriate for the target architecture. Implement the `CompilerFactory` class, the `MemoryLayoutInterface`, and stubs for the architecture-specific compiler interfaces. Also, define the necessary enums, classes, and exceptions that are used in the provided code snippet.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `compilerFactory`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `MAX_ARCHITECTURES`, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named `CompilerFactory`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `compiler.framework`."}, {"type": "file", "instruction": "Your code should import the following libraries `java.util`, `java.lang`."}, {"type": "file", "instruction": "Your code should use the function `getInstance` from the library `java.util.Collections`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `compiler.framework`, which should contain these functions `getCompiler`, `getMemoryLayout`."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "6": [0, 5], "9": [0, 8], "10": [0, 7]}, "question_id": 338}
{"question": "Design a Java class named `MetadataExtractor` that uses the `KeysForAvroProperty` interface to extract metadata information from a given Avro record. The Avro record is represented by a `Map<String, Object>` where the keys are the field names and the values are the field values. The metadata fields are marked with the alias defined in `KeysForAvroProperty.METADATA_ALIAS_NAME`. The `MetadataExtractor` class should have a method `extractMetadata` that takes an Avro record (`Map<String, Object>`) as input and returns a `Map<String, Object>` containing only the metadata fields and their values. The class should also have a method `stripMetadata` that takes an Avro record (`Map<String, Object>`) as input and returns a new `Map<String, Object>` with all metadata fields removed.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `interface` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `ArrayList`."}, {"type": "variable", "instruction": "Your code should define a variable named `metadataMap`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `MetadataType`."}, {"type": "variable", "instruction": "The variable names in your code should follow the `camelCase` naming convention."}, {"type": "variable", "instruction": "Variable `metadataMap`, type should be `Map<String, Object>`."}, {"type": "class", "instruction": "Your code should define a class named `MetadataExtractor`."}], "instruction_dependence": {"5": [0, 1, 3], "6": [0, 1, 3]}, "question_id": 339}
{"question": "Design a Java program that simulates a simple text-based drawing application. The application should support creating a canvas of a specified width and height, and allow the user to draw horizontal or vertical lines using asterisks (*) on the canvas. The program should also be able to display the current state of the canvas. The canvas should be represented as a 2D character array, where spaces represent empty pixels, and asterisks represent drawn pixels. The top-left corner of the canvas is the origin (0,0). The program should include the following functionalities: `createCanvas(int width, int height)`: Initializes a new canvas of the given width and height. `drawLine(int x1, int y1, int x2, int y2)`: Draws a straight line from (x1, y1) to (x2, y2). This method should only support horizontal or vertical lines. `renderCanvas()`: Prints the current state of the canvas to the console. The program should handle invalid operations gracefully, such as attempting to draw outside the bounds of the canvas or creating a canvas with non-positive dimensions.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the static keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named canvas."}, {"type": "variable", "instruction": "Variable canvas, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named drawLine."}, {"type": "interface", "instruction": "Your code should define an interface named Drawable."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Canvas."}, {"type": "combination", "instruction": "Your code should define a class named Canvas that implements the Drawable interface."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 8], "11": [0, 1, 8, 10]}, "question_id": 340}
{"question": "Design a Python Flask application that serves as a user management system. The application should provide endpoints for user authentication (login, logout, register, refresh token), user information retrieval (get all users, get a single user), and user password update. The application should be structured using blueprints to organize these functionalities. The endpoints should perform the following actions: - `/auth/register`: Allows new users to register by providing a username, email, and password. - `/auth/login`: Authenticates a user by their email and password, returning a session token. - `/auth/logout`: Logs out a user by invalidating their session token. - `/auth/refresh`: Refreshes a user's session token. - `/user/all`: Retrieves a list of all registered users. - `/user/<user_id>`: Retrieves details of a specific user by their user ID. - `/user/update-password`: Allows a user to update their password. Write the Flask application code with the necessary blueprints and routes. Ensure that each route has a placeholder function that simulates the intended behavior with a simple return statement. For example, the register route should return a message indicating that a user has been registered.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the yield keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user_count."}, {"type": "variable", "instruction": "Your code should define an enumeration named UserRole."}, {"type": "variable", "instruction": "Variable user_count should not be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named user_management."}, {"type": "file", "instruction": "Your code should import the following libraries flask, flask_sqlalchemy, flask_jwt_extended."}], "instruction_dependence": {"6": [0, 1, 2, 4]}, "question_id": 341}
{"question": "In a simplified browser environment, we have a `RootWindow` class that manages the main window of a browser instance. Each `RootWindow` is associated with a unique browser ID. The `RootWindow` class provides a static method `GetForBrowser` that retrieves the `RootWindow` instance corresponding to a given browser ID. Your task is to implement the `RootWindow` class, the `MainContext` class, and the `RootWindowManager` class. The `RootWindow` class should have a constructor that takes an integer representing the browser ID and a static method `GetForBrowser` that returns the `RootWindow` instance for the given browser ID. The `MainContext` class should have a method `GetRootWindowManager` that returns a pointer to the `RootWindowManager` instance. The `RootWindowManager` class should manage multiple `RootWindow` instances and provide a method `GetWindowForBrowser` that returns the `RootWindow` instance for a given browser ID. If the `RootWindow` for the given ID does not exist, it should create a new one. Implement the classes and provide test cases to verify the correctness of your solution.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'browser_id'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'WindowState'."}, {"type": "variable", "instruction": "Variable 'browser_id', the initial value should be 0."}, {"type": "function", "instruction": "Your code should include a function named 'CreateRootWindow'."}, {"type": "function", "instruction": "Your code should not use any functions from the 'std::map'."}, {"type": "class", "instruction": "Your code should define a class named 'RootWindowManager'."}, {"type": "file", "instruction": "Your code should import the following libraries 'iostream', 'vector'."}, {"type": "file", "instruction": "Your code should use the function 'push_back' from the library 'vector'."}, {"type": "combination", "instruction": "The function 'GetWindowForBrowser' should return a 'RootWindow*' as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"5": [0, 1, 3, 12], "10": [0, 1, 9, 12], "11": [0, 1, 6, 12]}, "question_id": 342}
{"question": "Design a simple RESTful API for a calculator service that supports basic arithmetic operations: addition, subtraction, multiplication, and division. The API should be able to handle requests to perform calculations and return the results in JSON format. The service should also log each calculation request to a SQLite database with a timestamp for auditing purposes. The API should have the following endpoints: `POST /api/add` for addition, which accepts two numbers and returns their sum; `POST /api/subtract` for subtraction, which accepts two numbers and returns their difference; `POST /api/multiply` for multiplication, which accepts two numbers and returns their product; `POST /api/divide` for division, which accepts two numbers and returns their quotient. If division by zero is attempted, the service should return an appropriate error message. Each endpoint should expect a JSON payload with two fields: `number1` and `number2`, representing the operands for the calculation. The SQLite database should have a table named `calculations` with the following columns: `id` (integer, primary key, autoincrement), `operation` (text, the type of operation performed), `number1` (real, the first operand), `number2` (real, the second operand), `result` (real, the result of the calculation), `timestamp` (text, the time when the calculation was performed).", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the `global` keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `db_connection`."}, {"type": "variable", "instruction": "Variable `db_connection`, type should be `sqlite3.Connection`."}, {"type": "variable", "instruction": "Variable `db_connection` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `log_calculation`."}, {"type": "interface", "instruction": "Your code should define an interface named `CalculatorService`."}, {"type": "class", "instruction": "Your code should define a class named `Calculator`."}, {"type": "file", "instruction": "Your code should be organized in a package named `calculator_api`."}, {"type": "combination", "instruction": "The function `log_calculation` should take `operation`, `number1`, `number2`, `result`, `timestamp` as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named `calculator_api`, which should contain these classes `Calculator`, `CalculatorService`."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 13], "6": [0, 1, 2, 4, 13], "11": [0, 1, 2, 7, 13], "12": [0, 1, 2, 9, 10, 13]}, "question_id": 343}
{"question": "Please translate the following code into Python, adhering to the following requirements:\n1. Only need to generate the translated code.\n2. Function names should use lowercase letters separated by underscores.\n3. Please wrap the code in a markdown ```python```.\n\nThe code to be translated is as follows:\n\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n}", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named decimal."}, {"type": "variable", "instruction": "Your code should define an enumeration named BinaryFormat."}, {"type": "variable", "instruction": "Variable decimal should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named decimal_to_binary."}, {"type": "interface", "instruction": "Your code should define an interface named BinaryConverter."}, {"type": "file", "instruction": "Your code should be organized in a package named binary_conversion."}, {"type": "combination", "instruction": "The function decimal_to_binary should return a string as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 3, 10], "9": [0, 6, 10]}, "question_id": 344}
{"question": "Design a Turn Coordinator (TC) widget for an aircraft's cockpit instrumentation panel. The widget should display the aircraft's turn rate and slip/skid information, which are crucial for pilots during flight. The turn coordinator is an instrument that indicates the rate of turn and the coordination of the turn (slip/skid). The widget should be visually appealing and adhere to a theme that can be set programmatically. The widget should be implemented using C++ and the Qt framework, which is commonly used for creating cross-platform applications with a graphical user interface. The provided code snippet includes a class `WidgetTC` that inherits from `QWidget` and uses a custom `qfi_TC` class for the turn coordinator instrument display, as well as a `LayoutSquare` class for layout management. Your task is to implement the `WidgetTC` class, ensuring that it can: - Update the turn coordinator display with new data. - Set the turn rate (in degrees per second) and slip/skid indicator (in lateral G's). - Allow the theme of the widget to be changed (e.g., 'day' or 'night' theme). - Provide a clean and organized user interface setup. Additionally, provide test cases to verify the correctness of the implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure QMap."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named currentTheme."}, {"type": "variable", "instruction": "Variable currentTheme, type should be QString."}, {"type": "variable", "instruction": "Variable currentTheme, should be a global variable."}, {"type": "variable", "instruction": "Variable currentTheme should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named updateDisplay."}, {"type": "file", "instruction": "Your code should not use the following libraries Boost."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"6": [0, 1, 5, 11], "7": [0, 1, 5, 11], "8": [0, 1, 5, 11]}, "question_id": 345}
{"question": "Design a program that calculates the area and perimeter of different geometric shapes. The program should be able to handle circles and rectangles (squares are a special case of rectangles). The shapes should implement a `geometry` interface that requires two methods: `area()` and `perimeter()`. The `circle` struct should have a single field `radius`, and the `rectangle` struct should have `length` and `width` fields. Implement the `area()` and `perimeter()` methods for both structs. Additionally, create a function `displayInfo` that takes a `geometry` interface as an argument and prints out the area and perimeter of the given shape. Write a `main` function to create instances of `circle` and `rectangle`, and use the `displayInfo` function to display their area and perimeter.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure struct."}, {"type": "variable", "instruction": "Your code should define a variable named shapeInfo."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable shapeInfo, should be a global variable."}, {"type": "variable", "instruction": "Variable shapeInfo, the initial value should be null."}, {"type": "variable", "instruction": "Variable shapeInfo should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named displayInfo."}, {"type": "interface", "instruction": "Your code should define an interface named geometry."}, {"type": "class", "instruction": "Your code should define a class named Circle."}, {"type": "combination", "instruction": "You should define an interface named geometry that includes these methods area, perimeter."}, {"type": "combination", "instruction": "In your code, the class Circle should have these properties radius."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3], "7": [0, 1, 3], "11": [0, 1, 9], "12": [0, 1, 10]}, "question_id": 346}
{"question": "Design a Java Spring Boot application that serves as a backend service for managing a library of books using Neo4j as the database. The application should allow users to perform CRUD operations on books. Each book should have a unique identifier, title, author, and publication year. The application should also support the ability to find books by title and author. Implement the following functionalities: 1. Add a new book to the library. 2. Update an existing book's details. 3. Delete a book from the library. 4. Retrieve a book by its unique identifier. 5. Find all books by a given author. 6. Find all books with a title containing a specified string. Ensure that the application is properly configured to connect to a Neo4j database and that the necessary repositories are enabled. Provide test cases to verify the correctness of each operation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bookCount."}, {"type": "variable", "instruction": "Variable bookCount, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named findBooksByAuthor."}, {"type": "interface", "instruction": "Your code should define an interface named BookRepository."}, {"type": "class", "instruction": "Your code should define a class named BookService."}, {"type": "file", "instruction": "Your code should import the following libraries org.springframework.data.neo4j.repository.Neo4jRepository, org.springframework.stereotype.Service."}, {"type": "file", "instruction": "Your code should use the function save from the library Neo4jRepository."}, {"type": "combination", "instruction": "You should define an interface named BookRepository that includes these methods save, deleteById, findById, findByAuthor, findByTitleContaining."}, {"type": "combination", "instruction": "In your code, the class Book should have these properties id, title, author, publicationYear."}, {"type": "combination", "instruction": "The function findBooksByAuthor should take author as parameters."}, {"type": "combination", "instruction": "The function findBooksByAuthor should return a List<Book> as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 14], "9": [0, 8, 14], "10": [0, 6, 14], "11": [0, 7, 14], "12": [0, 5, 14], "13": [0, 5, 14]}, "question_id": 347}
{"question": "Design a C++ program that simulates a task management system for a distributed computing environment. The system should be able to handle different job placement strategies on a given topology of computing nodes. The `TaskManager` class provided in the code snippet is an abstract class that manages tasks and jobs. Your task is to implement the `TaskManager` class and its member functions to support the following features:\n\n1. Create tasks with different placement modes (Simple, Optimal, Advanced, Random) based on the job's requirements and the topology of the computing nodes.\n2. Search for the most suitable host(s) for optimal job placement.\n3. Fill actions for different topologies (Star, Grid, Cube, Tree, Full).\n4. Map jobs to the neighbor tree structure and calculate the mapping result.\n5. Add, update, and remove tasks and jobs from the system.\n6. Calculate the execution time for jobs and update tasks accordingly.\n\nThe `TaskManager` class should use the following abstract methods that you need to implement:\n\n- `createTaskInOptimalPlacementMode`\n- `createTaskInAdvancedPlacementMode`\n- `searchHostForOptimalPlacement`\n- `createTasks`\n\nAdditionally, provide a simple `main` function to demonstrate the creation of a `TaskManager` object, the addition of a job, and the creation of tasks with different placement modes. Use a mock `Topology` and `Job` objects for demonstration purposes.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named taskManager."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable taskManager, type should be TaskManager."}, {"type": "interface", "instruction": "Your code should define an interface named TaskManager."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TaskManager."}, {"type": "file", "instruction": "Your code should be organized in a package named taskManagement."}, {"type": "file", "instruction": "Your code should not use the following libraries [boost, pthread]."}, {"type": "combination", "instruction": "You should initialize an object named taskManager as an instance of the TaskManager class using topology and job for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named taskManagement, which should contain these functions [createTaskInOptimalPlacementMode, createTaskInAdvancedPlacementMode, searchHostForOptimalPlacement, createTasks]."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"2": [0, 1, 11], "3": [0, 1, 11], "5": [0, 4, 11], "9": [0, 6, 11], "10": [0, 7, 11]}, "question_id": 348}
{"question": "Design a `DenseLayer` class that inherits from the `BaseLayer` class provided in the given code snippet. The `DenseLayer` should represent a fully connected neural network layer with the following specifications:\n\n1. The constructor (`__init__`) should take two arguments: `input_size` (the number of input features) and `output_size` (the number of neurons in the layer). It should initialize the layer's weights and biases with random values.\n\n2. The `forward` method should take a single argument `x` (the input tensor) and compute the layer's output by applying a linear transformation (i.e., `output = x @ weights + biases`).\n\n3. The `backward` method should take two arguments: `grad_output` (the gradient of the loss with respect to the output of the layer) and `learning_rate` (a float specifying the learning rate for the gradient descent update). It should compute the gradients of the loss with respect to the layer's weights and biases, update the parameters accordingly, and return the gradient of the loss with respect to the layer's input.\n\n4. The `update_params` method should apply the gradient descent update to the layer's parameters using the stored gradients and the provided `learning_rate`.\n\nEnsure that your `DenseLayer` class adheres to the interface defined by the `BaseLayer` class. You may use the `numpy` library for numerical operations.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `learning_rate`."}, {"type": "variable", "instruction": "Variable `learning_rate`, the initial value should be `0.01`."}, {"type": "function", "instruction": "Your code should include a function named `forward`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named `DenseLayer`."}, {"type": "file", "instruction": "Your code should import the following libraries `numpy`."}, {"type": "file", "instruction": "Your code should use the function `random` from the library `numpy`."}, {"type": "file", "instruction": "Your code should not use the following libraries `tensorflow`."}], "instruction_dependence": {"5": [0, 4], "7": [0, 6], "10": [0, 9]}, "question_id": 349}
{"question": "Design a class `CalendarManager` that manages a collection of `CalendarInfo` objects. The `CalendarManager` should support the following functionalities:\n\n1. Add a new `CalendarInfo` to the collection.\n2. Remove a `CalendarInfo` from the collection by its `id`.\n3. Update the summary of an existing `CalendarInfo` by its `id`.\n4. Retrieve a `CalendarInfo` by its `id`.\n5. List all `CalendarInfo` objects sorted by their summary.\n6. Clone a `CalendarInfo` object by its `id` and add the clone to the collection with a new `id`.\n\nThe `CalendarManager` should ensure that each `CalendarInfo` has a unique `id`. If an attempt is made to add a `CalendarInfo` with an `id` that already exists in the collection, the operation should fail and not alter the collection.\n\nProvide a test case for each functionality to demonstrate the correctness of the implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named calendar_dict."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable calendar_dict, type should be dict."}, {"type": "function", "instruction": "Your code should include a function named add_calendar_info."}, {"type": "interface", "instruction": "Your code should define an interface named CalendarInterface."}, {"type": "file", "instruction": "Your code should be organized in a package named calendar_manager."}, {"type": "combination", "instruction": "You should define an interface named CalendarInterface that includes these methods add_calendar_info, remove_calendar_info, update_calendar_summary, retrieve_calendar_info, list_calendar_infos, clone_calendar_info."}, {"type": "combination", "instruction": "The function add_calendar_info should take calendar_info as parameters."}, {"type": "combination", "instruction": "The function add_calendar_info should return a boolean as its result."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "9": [0, 7], "10": [0, 6], "11": [0, 6]}, "question_id": 350}
{"question": "Create a Python program using Django that simulates the application of a coupon code to a shopping cart. The program should include a form to input the coupon code and a view to process the form submission. The coupon code should be validated against a predefined list of valid codes, each associated with a discount percentage. If the code is valid, the program should display the original price, the discount percentage, and the final price after the discount. If the code is invalid, the program should inform the user that the code is not valid. The program should follow these specifications: 1. Use Django forms to create a `CouponApplyForm` with a single field `code` for the coupon code input. 2. Define a view named `apply_coupon` that handles the form submission. 3. Use a dictionary to store valid coupon codes and their corresponding discount percentages. 4. The view should calculate the final price by applying the discount percentage to a fixed original price (e.g., $100). 5. If the coupon code is valid, the view should render a template displaying the original price, discount percentage, and final price. 6. If the coupon code is invalid, the view should render a template informing the user that the code is not valid. 7. Include test cases to verify the correctness of the coupon application.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `valid_coupons`."}, {"type": "variable", "instruction": "Variable `valid_coupons`, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named `CouponApplyForm`."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['flask', 'fastapi']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6]}, "question_id": 351}
{"question": "Design a thread-safe `KeyValueStore` that allows concurrent reads and writes. The store should support the following operations:\n\n1. `storeById(String id, String value)`: Stores a value associated with an ID. If the ID already exists, it should overwrite the existing value. This method should return `true` if the operation is successful, and `false` otherwise.\n2. `findById(String id)`: Retrieves the value associated with an ID. If the ID does not exist, it should return `null`.\n\nThe `KeyValueStore` should be able to handle multiple threads performing read and write operations concurrently without data corruption or loss of data integrity.\n\nWrite a test case class `KeyValueStoreTestCase` that extends `ComponentTestCase` and tests the following scenarios using JUnit:\n\n1. Concurrent reads after a series of writes have been performed.\n2. Concurrent reads and writes.\n3. Concurrent writes.\n4. Serial reads after serial writes.\n5. Store reload operation, which simulates closing and reopening the store, followed by serial reads to ensure data persistence.\n6. Serial writes followed by serial reads.\n\nEnsure that the test cases verify the correctness of the operations and the thread safety of the `KeyValueStore`.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `store`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `store`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `MAX_RETRIES`, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `KeyValueStoreInterface`."}, {"type": "class", "instruction": "Your code should define a class named `KeyValueStore`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.store`."}, {"type": "file", "instruction": "Your code should not use the following libraries `org.apache.commons.lang3`."}, {"type": "combination", "instruction": "You should define an interface named `KeyValueStoreInterface` that includes these methods `storeById`, `findById`."}, {"type": "combination", "instruction": "Your code should define a class named `KeyValueStore` that implements the `KeyValueStoreInterface` interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.example.store`, which should contain these functions `storeById`, `findById`."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3], "11": [0, 1, 7], "12": [0, 1, 7, 8], "13": [0, 1, 9]}, "question_id": 352}
{"question": "Write a Python program that downloads a text file containing baby names from a given URL, saves it to a local directory, and then counts the number of occurrences of a specific name in that file. The program should be able to handle the creation of the directory if it does not exist, and it should also handle any network errors during the download process. The program should define a function `count_name_occurrences(file_path, name)` that takes the path to the text file and the name to search for as arguments, and returns the number of times the name appears in the file. Each line in the file contains a single record with the format: `name,gender,count`, where `count` is the number of occurrences of the name. Additionally, the program should include test cases to verify the correctness of the `count_name_occurrences` function.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use the `global` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should include a function named `count_name_occurrences`."}, {"type": "interface", "instruction": "Your code should define an interface named `NameCounter`."}, {"type": "class", "instruction": "Your code should define a class named `BabyNameProcessor`."}, {"type": "file", "instruction": "Your code should be organized in a package named `baby_names`."}, {"type": "combination", "instruction": "You should initialize an object named `processor` as an instance of the `BabyNameProcessor` class using `url` and `directory` for initialization."}, {"type": "combination", "instruction": "Your code should define a class named `BabyNameProcessor` that implements the `NameCounter` interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named `baby_names`, which should contain these functions `download_file`, `save_file`, `count_name_occurrences`."}], "instruction_dependence": {"9": [0, 1, 2, 7], "10": [0, 1, 2, 6, 7], "11": [0, 1, 2, 8]}, "question_id": 353}
{"question": "Design a cloud account management system that allows users to perform CRUD (Create, Read, Update, Delete) operations on cloud accounts, as well as verify and list permissions associated with the accounts. The system should be implemented as a set of gRPC services, with each service handling a specific type of request. The system should also log information about each request and report metrics for API requests. The cloud account management system should provide the following functionalities: 1. Create a new cloud account. 2. Update an existing cloud account. 3. Migrate a cloud account to a new system or structure. 4. Delete an existing cloud account. 5. List all cloud accounts. 6. List permissions associated with a cloud account. 7. Verify the credentials of a cloud account. Each operation should log the request ID, action name, request details, and response details. Additionally, the system should report the API request metrics, including the action name, protocol used (gRPC), response code, and the time taken to process the request.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named account_manager."}, {"type": "variable", "instruction": "Variable account_manager, should not be a global variable."}, {"type": "variable", "instruction": "Variable account_manager should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named IAccountService."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named AccountManager."}, {"type": "file", "instruction": "Your code should be organized in a package named cloud_account_management."}, {"type": "combination", "instruction": "You should define an interface named IAccountService that includes these methods create_account, update_account, migrate_account, delete_account, list_accounts, list_permissions, verify_credentials."}, {"type": "combination", "instruction": "Your code should be organized in a package named cloud_account_management, which should contain these classes AccountManager, AccountService, AccountLogger."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "10": [0, 6], "11": [0, 8, 9]}, "question_id": 354}
{"question": "Design a Python program that uses computer vision techniques to track a person's eye movements and estimate their gaze direction in real-time. The program should use the MediaPipe library to detect facial landmarks, specifically focusing on the eyes and pupils. The program should be able to process video frames, detect the eyes and pupils, calculate the gaze angle, and visually indicate the detected eyes, pupils, and gaze direction on the video frames. The program should be encapsulated in a class `EyeTracker` with the following functionalities: 1. Initialization with the dimensions of the video frames. 2. Detection of facial landmarks in a given video frame. 3. Drawing of the facial mesh, eyes, and pupils on the video frame if specified. 4. Calculation and storage of the eye and pupil centers, as well as the gaze angle. 5. Visualization of the eyes, pupils, and gaze direction with circles and arrows. The `EyeTracker` class should be able to work with both static images and real-time video streams. Provide test cases to verify the correctness of the solution using static images.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named `frame_dimensions`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `GazeDirection`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named `calculate_gaze_angle`."}, {"type": "class", "instruction": "Your code should define a class named `EyeTracker`."}, {"type": "combination", "instruction": "In your code, the class `EyeTracker` should have these methods `__init__, detect_landmarks, draw_facial_mesh, calculate_gaze_angle, visualize_gaze`."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"4": [0, 1, 2, 8], "7": [0, 1, 6, 8]}, "question_id": 355}
{"question": "Please answer in Go language. The following code attempts to create and assign a map but fails. Please correct it.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named mp."}, {"type": "variable", "instruction": "Variable mp, should not be a global variable."}, {"type": "variable", "instruction": "Variable mp, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named debug_new_map."}, {"type": "function", "instruction": "Your code should not use any functions from the disallowed_function_list."}, {"type": "interface", "instruction": "Your code should define an interface named MapInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "The function debug_new_map should return a map[int]int as its result."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "10": [0, 1, 9], "11": [0, 1, 7]}, "question_id": 356}
{"question": "Please write a Java method that reads characters from a text file until one of the specified characters is encountered. The method should return a string containing all the characters from the start of the file up to (but not including) the first occurrence of any of the specified characters. If none of the specified characters are found in the file, the method should return the entire content of the file. Please follow these guidelines: - The method should accept two parameters: one is a string representing the file path, and the other is a character array containing the specified stopping characters. - Use exception handling to deal with potential file reading errors. - Ensure the file is closed after reading is completed. Please use Java to implement the complete code without the Main function. Please follow the following type definitions: ```java import java.io.FileReader; import java.io.IOException; import java.util.Arrays; public class FileReaderUtil { public static String readUntilChar(String filePath, char[] stopChars) throws IOException { } public static void checkFunction() { } }```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'fileReader'."}, {"type": "variable", "instruction": "Variable 'fileReader', type should be 'FileReader'."}, {"type": "variable", "instruction": "Variable 'fileReader', should not be a global variable."}, {"type": "variable", "instruction": "Variable 'fileReader', the initial value should be 'null'."}, {"type": "class", "instruction": "Your code should define a class named 'FileReaderUtil'."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named 'fileutils'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'fileutils', which should contain these classes ['FileReaderUtil']."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'fileutils', which should contain these functions ['readUntilChar', 'checkFunction']."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 13], "6": [0, 1, 2, 4, 13], "7": [0, 1, 2, 4, 13], "9": [0, 1, 2, 8, 13], "11": [0, 1, 2, 8, 10, 13], "12": [0, 1, 2, 10, 13]}, "question_id": 357}
{"question": "Please write a python program with the function: Length of longest subarray whose sum is not divisible by integer K. Given an array arr[] of size N and an integer k, our task is to find the length of longest subarray whose sum of elements is not divisible by k. If no such subarray exists then return -1. The function signature is `MaxSubarrayLength(arr, n, k)`", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named max_length."}, {"type": "variable", "instruction": "Variable max_length, the initial value should be 0."}, {"type": "interface", "instruction": "Your code should define an interface named SubarrayInterface."}, {"type": "combination", "instruction": "You should define an interface named SubarrayInterface that includes these methods MaxSubarrayLength."}], "instruction_dependence": {"7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 358}
{"question": "Design a Java class named `TaskScheduler` that uses the `SynchronousExecutor` class to execute tasks. The `TaskScheduler` should have the following functionalities:\n\n1. It should be able to schedule tasks to be executed immediately.\n2. It should provide a method to execute a list of tasks in the order they are added.\n3. It should handle any exceptions thrown by the tasks and log them without stopping the execution of subsequent tasks.\n\nEach task is represented by a `Runnable` object. The `TaskScheduler` should ensure that if a task throws an exception, it is caught and printed to the standard error stream, and the execution of other tasks continues uninterrupted.\n\nWrite a `main` method that demonstrates the use of the `TaskScheduler` by scheduling multiple tasks, some of which may throw exceptions, and verify that the tasks are executed and exceptions are handled properly.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named taskList."}, {"type": "function", "instruction": "Your code should include a function named executeTasks."}, {"type": "interface", "instruction": "Your code should define an interface named TaskHandler."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TaskScheduler."}, {"type": "file", "instruction": "Your code should be organized in a package named scheduler."}, {"type": "combination", "instruction": "You should define an interface named TaskHandler that includes these methods handleTask, logException."}, {"type": "combination", "instruction": "In your code, the class TaskScheduler should have these methods scheduleTask, executeTasks, handleException."}, {"type": "combination", "instruction": "The function executeTasks should return a void as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named scheduler, which should contain these classes TaskScheduler, TaskHandler."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 14], "10": [0, 1, 2, 6, 14], "11": [0, 1, 2, 8, 14], "12": [0, 1, 2, 5, 14], "13": [0, 1, 2, 8, 9, 14]}, "question_id": 359}
{"question": "Design a Go program that provides functionality to manage a collection of Points of Interest (POIs). Each POI should have the properties as defined in the given `Poi` struct. The program should implement the following features:\n\n1. Add a new POI to the collection.\n2. Retrieve a POI by its `PoiId`.\n3. Update the details of an existing POI.\n4. Delete a POI from the collection by its `PoiId`.\n5. List all POIs in the collection.\n\nThe program should ensure that each POI has a unique `PoiId`. If an attempt is made to add a POI with an existing `PoiId`, the program should return an error.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the var keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named poiCollection."}, {"type": "variable", "instruction": "Variable poiCollection, should be a global variable."}, {"type": "variable", "instruction": "Variable poiCollection should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named PoiManager."}, {"type": "file", "instruction": "Your code should be organized in a package named poi_management."}, {"type": "combination", "instruction": "Your code should be organized in a package named poi_management, which should contain these functions AddPOI, GetPOI, UpdatePOI, DeletePOI, ListPOIs."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "10": [0, 1, 9]}, "question_id": 360}
{"question": "\n\nWrite a Go program that demonstrates the initialization order of the `init` functions within a single package. The program should include a package named `config` with two `init` functions, similar to the provided code snippet. The `init` functions should set a package-level variable `Name` to different values and print a message indicating which `init` function is being called.\n\nThe main package should import the `config` package and print the final value of the `Name` variable after all `init` functions have been called. The program should illustrate the fact that `init` functions are called in the order they are presented in the file, and the last one to set the value determines the final value of the variable.\n\nAdditionally, provide test cases in the main package to verify the correctness of the initialization order and the final value of the `Name` variable.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "function", "instruction": "Your code should include a function named filter_event."}, {"type": "interface", "instruction": "Your code should define an interface named search_cut."}, {"type": "class", "instruction": "Your code should define a class named ProcessRequestPunish."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_kms."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the ProcessRequestPunish class using ['notification', 'report'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named ProcessRequestPunish that implements the search_cut interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_kms, which should contain these classes ['Account', 'SetPunishRecord', 'AddRoom']."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "11": [0, 1, 2, 9, 14], "12": [0, 1, 2, 8, 9, 14], "13": [0, 1, 2, 9, 10, 14]}, "question_id": 361}
{"question": "\n\nDesign a Go program that simulates an HTTP caching service. The service should be able to generate HTTP response headers and body based on the provided input data, which includes caching directives, status code, headers, and body content. The program should handle the following caching headers: `Cache-Control`, `Expires`, and `Last-Modified`. It should also be able to write a placeholder response when the actual content is not available but the cache metadata is known.\n\nThe input to the caching service should be provided through a struct named `Input` which contains the following fields:\n\n- `StatusCode`: an integer representing the HTTP status code.\n- `URL`: a pointer to a `url.URL` representing the requested URL.\n- `Header`: an `http.Header` map containing the HTTP headers.\n- `Body`: a string representing the response body.\n- `TTL`: a `time.Duration` representing the time-to-live for the cache entry.\n\nThe program should consist of the following functions:\n\n- `WriteHTTP(w io.Writer, input *Input) error`: Writes the full HTTP response including status line, headers, and body.\n- `WriteHTTPCachingHeaders(bw *bufio.Writer, input *Input) error`: Writes the caching-related headers.\n- `writeHTTPHeader(bw *bufio.Writer, input *Input) error`: Writes the non-caching HTTP headers.\n- `writeHTTPBody(bw *bufio.Writer, input *Input) (int, error)`: Writes the HTTP body and returns the number of bytes written.\n- `writeHTTPPlaceholder(w io.Writer, url *url.URL, expires time.Time) error`: Writes a placeholder HTTP response when the content is not available.\n\nThe program should handle errors appropriately and return them to the caller. The output should be written to an `io.Writer` interface to allow for flexibility in the destination of the output (e.g., a file, a buffer, or a network connection).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not use the default keyword."}, {"type": "structural control", "instruction": "Your code should use data structure struct."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define an enumeration named Degree"}, {"type": "function", "instruction": "Your code should include a function named search_view."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named create_user."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_log."}, {"type": "file", "instruction": "Your code should import the following libraries ['net']."}, {"type": "file", "instruction": "Your code should use the function search_view from the library bytes."}, {"type": "combination", "instruction": "Your code should define a class named Event that implements the create_user interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_log, which should contain these classes ['DisplayToken', 'HandleRecord']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "13": [0, 1, 2, 3, 12], "14": [0, 1, 2, 3, 9, 10], "15": [0, 1, 2, 3, 10, 11]}, "question_id": 362}
{"question": "\n\nWrite a function that takes the root node of a binary search tree and returns a new tree that is a mirror image of the original tree. The mirror image of a tree is formed by swapping the left and right children of all nodes at each level.\n\nThe TreeNode class and the insert method are provided to create and populate the binary search tree. The Solution class contains the method `invertTree` which should be implemented to perform the inversion.\n\nThe input will be a series of test cases. The first line contains an integer `n`, the number of test cases. For each test case, there will be a single line containing integers separated by spaces, representing the values to be inserted into the binary search tree in the given order.\n\nThe output should be the pre-order traversal of the inverted binary search trees for each test case, with the values separated by spaces.\n\nExample:\n\nInput:\n```\n2\n4 2 7 1 3 6 9\n3 1 4\n```\n\nOutput:\n```\n4 7 9 6 2 3 1\n3 4 1\n```\n\nExplanation:\nFor the first test case, the original binary search tree is:\n\n```\n    4\n   / \\\n  2   7\n / \\ / \\\n1  3 6  9\n```\n\nAfter inversion, the binary search tree becomes:\n\n```\n    4\n   / \\\n  7   2\n / \\ / \\\n9  6 3  1\n```\n\nThe pre-order traversal of the inverted tree is `4 7 9 6 2 3 1`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable request, should be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['sort_notification', 'delete_product', 'handle_product']."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_room."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named KmsForm."}, {"type": "combination", "instruction": "You should define an interface named calculate_room that includes these methods ['generate_log']."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"3": [0, 1, 2, 10], "4": [0, 1, 2, 10], "7": [0, 1, 6, 10], "9": [0, 1, 6, 10]}, "question_id": 363}
{"question": "\n\nDesign a class `ObTabletBarrierLogState` that manages the state of a tablet barrier log in a distributed database system. The class should be able to serialize and deserialize its state to and from a byte stream, which is useful for persisting the state or transferring it over the network.\n\nThe `ObTabletBarrierLogState` class should have the following features:\n\n1. It should maintain an internal state that can be one of the following enumerated values: `TABLET_BARRIER_LOG_INIT`, `TABLET_BARRIER_LOG_WRITING`, `TABLET_BARRIER_SOURCE_LOG_WRITTEN`, or `TABLET_BARRIER_DEST_LOG_WRITTEN`.\n\n2. It should store a system change number (SCN) that represents a logical point in time in the database.\n\n3. It should store a schema version number.\n\n4. It should provide a method to convert its state to a persistent state before serialization. The persistent state should be `TABLET_BARRIER_LOG_INIT` for both `TABLET_BARRIER_LOG_INIT` and `TABLET_BARRIER_LOG_WRITING` internal states, and it should remain the same for the other states.\n\n5. It should provide methods to serialize and deserialize its state, SCN, and schema version to and from a byte stream.\n\n6. It should provide a method to reset its state to the initial state, with the minimum SCN and a schema version of 0.\n\n7. It should provide a method to set its state, SCN, and schema version.\n\n8. It should provide a method to calculate the size of the serialized data.\n\nImplement the class with appropriate methods and data members, and provide test cases to verify the correctness of serialization and deserialization.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure stack."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "class", "instruction": "Your code should define a class named SubmitMessageOrder."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_kms."}, {"type": "combination", "instruction": "You should initialize an object named msg as an instance of the SubmitMessageOrder class using ['product', 'punish'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_kms, which should contain these classes ['SearchShipment', 'Message']."}], "instruction_dependence": {"7": [0, 1, 5], "8": [0, 1, 5, 6]}, "question_id": 364}
{"question": "Coinciding with the National Day of H country, the king invited n ministers to play a prize-winning game.\nFirst, he asked each minister to write an integer on their left and right hands, and the king himself also wrote an integer on his left and right hands. \nThen, he let the n ministers line up, with the king standing at the head of the line. After lining up, all ministers receive a number of gold coins as a reward from the king, which is equal to: the product of the numbers on the left hand of all the people in front of them divided by the number on their own right hand, then taking the result of rounding down.\nThe king doesn't want any one minister to receive overly high rewards, so he invites you to help him rearrange the order of the ministers, so that the minister who receives the most rewards gets as little as possible. Take note, the king's position is always at the front of the line.\n\nDefine a function solve(king, ministers) in Python, where king is a tuple representing the integers on the king's left and right hands, and ministers are a list of tuples representing the integers on each minister's left and right hands.\nThe function should return the number of gold coins awarded to the minister who received the most rewards after rearrangement.\n\"To solve this problem of allocating the least possible reward to the minister who gets the most reward, you can employ a greedy algorithm (a strategy that chooses the best or most optimal decision at each step, aiming for the outcome to be the best or most optimal).\n\n**Initial Idea** If we want the minister with the highest reward to get as few coins as possible, we need to try to make the reward of each minister as small as possible. That is, the product of the numbers on the left hand of all previous ministers should be as small as possible, while the number on their own right hands should be as large as possible.\n\n**Set Goals** The ministers with larger numbers on their right hands should be arranged as far forward as possible, while those with larger numbers on their left hands should be arranged toward the back.\n\n**Sorting Style** Sort all ministers in descending order of the numbers on their right hands. If the numbers on their right hands are the same, sort by the numbers on their left hands in ascending order.\n\n**Rules to Follow** Line up according to the order after sorting, with the king at the front of the line.\n\n**Results** Calculate the rewards for each minister according to the line order, and record the maximum reward.\"", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not use the and keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Variable bill, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named UserCut."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pytorch']."}, {"type": "combination", "instruction": "In your code, the class UserCut should have these properties ['log']."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 11], "8": [0, 1, 2, 7, 11], "10": [0, 1, 2, 7, 11]}, "question_id": 365}
{"question": "\n\nThe Moore's Law dataset contains information about the number of transistors in integrated circuits over time. The goal is to model the exponential growth of transistor counts using linear regression after applying a logarithmic transformation to the data.\n\nWrite a Python program that performs the following tasks:\n\n1. Load the Moore's Law dataset from a CSV file, where each line contains a year and the corresponding transistor count, separated by a tab character.\n2. Preprocess the data by:\n   - Extracting the year and transistor count from each line using regular expressions.\n   - Converting the transistor count to a logarithmic scale to linearize the exponential growth.\n   - Standardizing the year and logarithmic transistor count by subtracting the mean and dividing by the standard deviation.\n3. Implement a linear regression model using PyTorch to fit the standardized data.\n4. Train the model using Stochastic Gradient Descent (SGD) with a specified learning rate and momentum.\n5. Plot the training losses over epochs to visualize the training process.\n6. Plot the original data and the line of best fit predicted by the model.\n7. Calculate and print the following:\n   - The rate of growth `r` as the exponential of the slope of the line of best fit.\n   - The time `t_to_double` it takes for the transistor count to double, based on the rate of growth.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named set_punish."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Report."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_order."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django']."}, {"type": "combination", "instruction": "In your code, the class Report should have these properties ['form']."}, {"type": "global", "instruction": "Your answer in total should not exceed 25 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 12], "8": [0, 1, 2, 7, 12], "11": [0, 1, 2, 7, 12]}, "question_id": 366}
{"question": "\n\nDesign a Python application that performs sentiment analysis on tweets and TV show comments, compares TV show popularity, and visualizes the results. The application should have the following features:\n\n1. A function to scrape a specified number of recent tweets from a given Twitter account.\n2. A function to read comments from text files for different TV shows and perform sentiment analysis on them.\n3. A function to read TRP (Television Rating Point) data from a CSV file and display it in a tabular format in a GUI window.\n4. A function to plot pie charts for sentiment analysis results of individual TV shows.\n5. A function to plot a bar chart comparing the TRP of different TV shows.\n6. A function to plot a grouped bar chart comparing the positive, negative, and neutral sentiments of different TV shows.\n7. A GUI with buttons to trigger each of the above functionalities.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the not keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure deque."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, type should be tuple."}, {"type": "function", "instruction": "Your code should include a function named sort_event."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_message', 'handle_room', 'process_product']."}, {"type": "class", "instruction": "Your code should define a class named MsgProduct."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib', 'pytorch']."}, {"type": "file", "instruction": "Your code should use the function sort_event from the library Flask."}, {"type": "combination", "instruction": "The function sort_event should return a tuple as its result."}], "instruction_dependence": {"8": [0, 1, 2, 7], "10": [0, 1, 2, 9], "13": [0, 1, 2, 12], "15": [0, 1, 2, 14], "16": [0, 1, 2, 9]}, "question_id": 367}
{"question": " Write a C++ program that uses `swscanf` to parse different types of data from a wide string input. The program should be able to extract integers, floating-point numbers, and strings, and handle different width specifiers for strings. The program should also demonstrate the use of length modifiers for different data types.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named transform_report."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named DataRoom."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_account."}, {"type": "file", "instruction": "Your code should import the following libraries ['set']."}, {"type": "file", "instruction": "Your code should use the function get_bill from the library algorithm."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the DataRoom class using ['form'] for initialization."}, {"type": "combination", "instruction": "In your code, the class DataRoom should have these properties ['status', 'shipment']."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_account, which should contain these classes ['Token', 'CutOrder', 'CreateView']."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_account, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "10": [0, 1, 2, 9], "13": [0, 1, 2, 12], "14": [0, 1, 2, 9], "15": [0, 1, 2, 9], "16": [0, 1, 2, 9, 11], "17": [0, 1, 2, 11]}, "question_id": 368}
{"question": "\n\nGiven a collection of intervals, where each interval is a pair of integers `[start, end]`, write a function to merge all overlapping intervals. The intervals must be returned in a way that no interval is covered by another interval, and each interval is unique.\n\nFor example, given the intervals `[[1,3],[2,6],[8,10],[15,18]]`, the function should return `[[1,6],[8,10],[15,18]]` because intervals `[1,3]` and `[2,6]` overlap and should be merged into `[1,6]`.\n\n**Constraints**:\n- The input list may not be in any order.\n- The input list may contain intervals that are already non-overlapping.\n- The `start` of an interval will always be less than or equal to the `end`.\n- The number of intervals `n` will be in the range `[1, 10^4]`.\n- The `start` and `end` of each interval will be in the range `[-10^4, 10^4]`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "Variable item, the initial value should be product."}, {"type": "variable", "instruction": "Variable item should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_cut."}, {"type": "interface", "instruction": "Your code should define an interface named update_form."}, {"type": "class", "instruction": "Your code should define a class named RemoveInfo."}, {"type": "combination", "instruction": "In your code, the class RemoveInfo should have these properties ['user']."}], "instruction_dependence": {"10": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 8], "15": [0, 1, 2, 3, 14]}, "question_id": 369}
{"question": "Implement a function in Golang, `interleavedByChannel(nums []int, bytes []byte) (string, error)`. Inside the function, start two goroutines, each responsible for generating an element from an array into a string. The two goroutines interact through a channel to print the result, which is preserved in the returned string. If not aligned, return the mismatch nums exception. The function should not leak goroutines after exiting.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named update_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "combination", "instruction": "You should define an interface named update_record that includes these methods ['check_account']."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "8": [0, 1, 6]}, "question_id": 370}
{"question": "\nDesign a Python class `ModuleDependencyResolver` that can be used to resolve dependencies for software modules using the Environment Modules system (http://modules.sourceforge.net/). The resolver should be able to check for the existence of a module by name and optionally by version, and generate shell commands to load the required module.\n\nThe resolver should support two strategies for finding modules:\n1. `DirectoryModuleChecker`: It should search the paths listed in `modulepath` for a file or directory matching the module name. If a version is specified, it should search for files named `module/version`.\n2. `AvailModuleChecker`: It should parse the output of the `module avail` command, splitting module names into module and version on '/', and discarding a postfix matching `default_indicator` (by default '(default)'). Matching is done using the module and (if specified) the module version.\n\nThe resolver should be configurable through the following parameters:\n- `versionless`: If set to `True`, the resolver should be able to resolve a module without specifying a version.\n- `find_by`: Determines the strategy used to find modules (`directory` or `avail`).\n- `prefetch`: If set to `True`, the resolver should prefetch the list of available modules to speed up resolution.\n- `modulecmd`: The path to the `modulecmd` executable.\n- `modulepath`: The path to the directory containing module files.\n- `default_indicator`: A string that indicates the default version of a module in the `module avail` output.\n\nThe resolver should have a method `resolve` that takes a `requirement` object with `name`, `version`, and `type` attributes and returns a `ModuleDependency` object if the module is found or a `NullDependency` object if not found.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure deque."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, should be a global variable."}, {"type": "variable", "instruction": "Variable request, the initial value should be data."}, {"type": "function", "instruction": "Your code should include a function named transform_room."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_notification', 'manage_info', 'configure_user', 'get_report']."}, {"type": "class", "instruction": "Your code should define a class named CalculateCustomerInventory."}, {"type": "file", "instruction": "Your code should be organized in a package named process_info."}, {"type": "file", "instruction": "Your code should import the following libraries ['Flask', 'numpy']."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_info, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "9": [0, 1, 8], "14": [0, 1, 12]}, "question_id": 371}
{"question": "\n\nDesign a class `InputDataAnalyzer` that processes a string to separate and analyze its contents. The class should be able to identify and categorize digits, letters, and special characters from the input string. It should provide methods to retrieve the following:\n\n1. A list of all numbers found in the string.\n2. A list of all characters found in the string.\n3. A list of perfect square numbers from the numbers found.\n4. A list of odd numbers from the numbers found.\n5. A list of even numbers from the numbers found.\n6. A string of all uppercase characters found.\n7. A string of all lowercase characters found.\n8. A string of all special characters found (non-digit and non-letter).\n9. A string of all characters found.\n\nThe class should be able to handle any string passed to it and should ignore any non-numeric, non-letter characters when creating the list of numbers and letters.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the assert keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, type should be Map."}, {"type": "variable", "instruction": "Variable order, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named manage_msg."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['sort_customer', 'configure_shipment']."}, {"type": "class", "instruction": "Your code should define a class named GetCut."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_customer."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.util', 'java.nio']."}, {"type": "combination", "instruction": "In your code, the class GetCut should have these methods ['process_status', 'submit_cut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named generate_customer, which should contain these classes ['ConfigureOrder', 'Bill']."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 17], "7": [0, 1, 2, 5, 17], "9": [0, 1, 2, 8, 17], "12": [0, 1, 2, 11, 17], "15": [0, 1, 2, 11, 17], "16": [0, 1, 2, 11, 13, 17]}, "question_id": 372}
{"question": "\n\nCreate a Java class that simulates a simplified version of a Red Matter Furnace (RMFurnace) from a game. The RMFurnace should have the ability to burn fuel to cook items over time. The class should include methods to add fuel, add items to cook, check if the furnace is burning, get the remaining burn time, get the cooking progress, and retrieve the cooked item.\n\nThe RMFurnace has two main properties:\n- `burnTimeRemaining`: an integer representing the time left for the current fuel to burn. This value decreases over time when the furnace is burning.\n- `cookTime`: an integer representing the time required to cook an item. This value increases over time when the furnace is burning and resets to zero when an item is fully cooked.\n\nThe RMFurnace should have the following methods:\n- `addFuel(int time)`: Adds fuel to the furnace, increasing the `burnTimeRemaining` by the specified time.\n- `addItemToCook()`: Adds an item to the furnace to be cooked. If there is already an item being cooked, this method should do nothing.\n- `isBurning()`: Returns `true` if the furnace is currently burning fuel, otherwise `false`.\n- `getBurnTimeRemainingScaled(int scale)`: Returns the remaining burn time scaled to the specified value.\n- `getCookProgressScaled(int scale)`: Returns the cooking progress scaled to the specified value.\n- `retrieveCookedItem()`: Returns the cooked item if it is ready and resets the `cookTime` to zero. If the item is not ready or there is no item, it should return `null`.\n\nAssume that the `burnTimeRemaining` decreases by 1 every second and the `cookTime` increases by 1 every second when the furnace is burning. The `cookTime` should reach a predefined value (e.g., 100) to consider the item cooked.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, type should be String."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_cut."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.net', 'java.lang']."}, {"type": "combination", "instruction": "You should initialize an object named customer as an instance of the Form class using ['transaction', 'product'] for initialization."}, {"type": "combination", "instruction": "In your code, the class Form should have these properties ['punish', 'shipment']."}], "instruction_dependence": {"8": [0, 1, 2, 7], "13": [0, 1, 2, 9], "14": [0, 1, 2, 9]}, "question_id": 373}
{"question": "\n\nWrite a Python program to generate a random password based on user-provided input words. The generated password should be a scrambled version of the input words, ensuring that no character from the input words appears in the same index in the generated password as it did in the original words.\n\nThe program should:\n- Prompt the user to enter a word or phrase to be used for generating the password.\n- Scramble the characters of the input words to create a password.\n- Ensure that no character from the input appears in the same index in the password as it did in the input.\n- Print the generated password to the user.\n- Continue to prompt the user to generate a new password or exit the program.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, type should be list."}, {"type": "variable", "instruction": "Variable view, the initial value should be log."}, {"type": "function", "instruction": "Your code should include a function named check_log."}, {"type": "interface", "instruction": "Your code should define an interface named transform_profile."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SortTransactionProduct."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django']."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the SortTransactionProduct class using ['info', 'report'] for initialization."}, {"type": "combination", "instruction": "The function check_log should take ['tys'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"7": [0, 1, 6, 16], "8": [0, 1, 6, 16], "11": [0, 1, 10, 16], "14": [0, 1, 12, 16], "15": [0, 1, 9, 16]}, "question_id": 374}
{"question": "\n\nWrite a Go program that manages a simple internationalization (i18n) system for a multi-language application. The system should allow the registration of multiple locales, each with its own set of translations for various keys. The program should provide the following functionalities:\n\n1. Register a new locale with its translations.\n2. Retrieve the translation for a given key in a specified locale.\n3. Update the translation for a given key in a specified locale.\n4. List all registered locales.\n\nThe program should enforce the following constraints:\n\n- A locale can only be registered once. Attempting to register a locale that already exists should return an error (`ErrLocaleAlreadyExist`).\n- The arguments for registering or updating translations should be well-defined and not contain uncertain or variadic slices. If such an argument is passed, the program should return an error (`ErrUncertainArguments`).\n\nProvide a solution with appropriate error handling and test cases to verify the correctness of the implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should use the package keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named set_bill."}, {"type": "function", "instruction": "Your code should not use any functions from the ['remove_order', 'analyze_kms', 'generate_shipment', 'set_room']."}, {"type": "class", "instruction": "Your code should define a class named SubmitTys."}, {"type": "file", "instruction": "Your code should be organized in a package named update_message."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_message, which should contain these classes ['User', 'AnalyzeEvent', 'GetTransaction']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_message, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 6], "12": [0, 1, 2, 10, 11], "13": [0, 1, 2, 11]}, "question_id": 375}
{"question": "\n\nDesign a Go program that lists the availability zones from a mock cloud provider's API response. The program should parse the JSON response into a Go struct and provide a function to retrieve the names of the availability zones.\n\nThe JSON response from the mock API is structured as follows:\n\n```json\n{\n  \"availabilityZoneInfo\": [\n    {\n      \"zoneName\": \"us-east-1a\",\n      \"zoneState\": {\n        \"available\": true\n      },\n      \"hosts\": null\n    },\n    {\n      \"zoneName\": \"us-east-1b\",\n      \"zoneState\": {\n        \"available\": false\n      },\n      \"hosts\": null\n    }\n    // ... more zones\n  ]\n}\n```\n\nThe program should define the necessary structs to correctly unmarshal the JSON response and include a method to extract the names of the available zones (zones where `available` is `true`).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, type should be bool."}, {"type": "variable", "instruction": "Variable dwa, should be a global variable."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be report."}, {"type": "variable", "instruction": "Variable dwa should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named sort_token."}, {"type": "function", "instruction": "Your code should not use any functions from the ['sort_notification', 'analyze_event']."}, {"type": "interface", "instruction": "Your code should define an interface named manage_account."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named ManageDwa."}, {"type": "file", "instruction": "Your code should be organized in a package named add_product."}, {"type": "combination", "instruction": "The function sort_token should take ['credit', 'punish', 'request'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_product, which should contain these functions ."}], "instruction_dependence": {"6": [0, 5], "7": [0, 5], "8": [0, 5], "9": [0, 5], "13": [0, 12], "16": [0, 10], "17": [0, 15]}, "question_id": 376}
{"question": "\n\nDesign a JavaFX application for managing customer records. The application should allow users to add new customers to a database. The user interface should include fields for customer ID, name, address, postal code, phone number, and combo boxes for selecting the country and its corresponding first-level division (e.g., state, province). The application should enforce that all text fields are filled before allowing the user to save a new customer record.\n\nThe application should follow these requirements:\n\n1. The user interface should be built using JavaFX and FXML.\n2. The application should use MVC architecture, with the given code snippet being part of the controller class.\n3. The `CustomerDAO`, `CountryDAO`, and `FirstLevelDivisionDAO` classes should provide the necessary database operations. Assume these classes are already implemented and provide methods like `addCustomer`, `getCountries`, and `getFilteredDivisions`.\n4. The application should validate user input and display appropriate error messages using alerts if the user tries to save a customer without filling all the fields.\n5. When a country is selected, the first-level division combo box should be populated with the corresponding divisions.\n6. The application should handle SQL exceptions and display an error message if there is a problem accessing the database.\n7. The application should provide feedback to the user upon successful addition of a customer or if the operation fails.\n8. Include a cancel button that returns the user to the main customer view without saving any changes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "variable", "instruction": "Variable notification, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['generate_account', 'delete_msg']."}, {"type": "interface", "instruction": "Your code should define an interface named manage_transaction."}, {"type": "class", "instruction": "Your code should define a class named SetStatus."}, {"type": "combination", "instruction": "You should define an interface named manage_transaction that includes these methods ['create_order', 'configure_transaction', 'update_room']."}, {"type": "combination", "instruction": "In your code, the class SetStatus should have these properties ['info']."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 12], "6": [0, 1, 2, 4, 12], "10": [0, 1, 2, 8, 12], "11": [0, 1, 2, 9, 12]}, "question_id": 377}
{"question": " Implement and test a high-bit-depth intra prediction function for VP9 video codec.\n\nIn the VP9 video codec, intra prediction is used to predict the pixels of a block based on the pixels of previously encoded blocks. For high-bit-depth video, the pixel values can range from 0 to 2^bit_depth - 1, where bit_depth can be 8, 10, or 12. Your task is to implement a high-bit-depth intra prediction function that predicts a block of pixels using the DC prediction mode. The DC prediction mode predicts each pixel in the block by averaging the pixels above and to the left of the block.\n\nThe function should have the following signature:\n```cpp\nvoid high_bit_depth_dc_predictor(uint16_t *dst, ptrdiff_t stride, const uint16_t *above, const uint16_t *left, int block_size, int bit_depth);\n```\n\n- `dst`: Pointer to the destination block where the predicted pixels will be written.\n- `stride`: Stride of the destination block (i.e., the number of elements to skip to get to the next row).\n- `above`: Pointer to the row of pixels above the block to be predicted.\n- `left`: Pointer to the column of pixels to the left of the block to be predicted.\n- `block_size`: Size of the block to predict (e.g., 4, 8, 16, 32).\n- `bit_depth`: Bit depth of the pixels (e.g., 8, 10, 12).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the extern keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, type should be vector."}, {"type": "variable", "instruction": "Variable room, should be a global variable."}, {"type": "variable", "instruction": "Variable room, the initial value should be punish."}, {"type": "function", "instruction": "Your code should include a function named insert_report."}, {"type": "interface", "instruction": "Your code should define an interface named update_inventory."}, {"type": "class", "instruction": "Your code should define a class named TransformForm."}, {"type": "combination", "instruction": "You should initialize an object named report as an instance of the TransformForm class using ['log', 'notification', 'msg'] for initialization."}, {"type": "combination", "instruction": "The function insert_report should take ['status', 'notification', 'punish'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "6": [0, 1, 4, 13], "7": [0, 1, 4, 13], "11": [0, 1, 10, 13], "12": [0, 1, 8, 13]}, "question_id": 378}
{"question": "You have obtained the original data from a social media website, formatted as a python dict parsed from JSON. These data include the posts of users, the number of likes and comments of the posts. Your task is to write a Python program to analyze these data and find out the most active N users.\n\nThe format of the input data is as follows:\n\n[\n    {\n        'title': 'Post title',\n        'content': 'Post content',\n        'likes': [\n            'user ID 1',\n            'user ID 2',\n            ...\n            'user ID N'\n        ]\n        'comments': [\n            {\n                'content': 'comment content',\n                'author': 'comment user ID'\n            }\n            ...\n        ],\n        'author': 'author ID'\n    }\n]\n\nPlease write the get_most_active_users(json_data, number) function, return a list, containing the IDs of the most active number of users. Where json_data is the original data in dict format. The activity level is the sum of the number of posts, the number of likes (with a coefficient of 0.1) and the number of comments (with a coefficient of 0.5).", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Your code should define an enumeration named Priority"}, {"type": "variable", "instruction": "Variable customer, type should be float."}, {"type": "variable", "instruction": "Variable customer, the initial value should be record."}, {"type": "function", "instruction": "Your code should include a function named process_view."}, {"type": "interface", "instruction": "Your code should define an interface named set_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['scikit-learn']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Flask', 'requests']."}, {"type": "combination", "instruction": "You should define an interface named set_notification that includes these methods ['sort_request']."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "11": [0, 1, 2, 10], "14": [0, 1, 2, 10]}, "question_id": 379}
{"question": "\n\nWrite a program that takes an integer `N` and a string `S` as input and outputs the `N`-th character from the end of the string `S`. If `N` is larger than the length of the string, the program should output an error message \"Invalid position\".\n\nFor example:\n- If the input is `1 ABCDE`, the output should be `E`.\n- If the input is `2 hello`, the output should be `o`.\n- If the input is `6 hello`, the output should be `Invalid position`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the short keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Your code should define an enumeration named Status"}, {"type": "variable", "instruction": "Variable form, should be a global variable."}, {"type": "variable", "instruction": "Variable form should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named StatusInventory."}, {"type": "file", "instruction": "Your code should be organized in a package named create_cut."}, {"type": "file", "instruction": "Your code should not use the following libraries ['algorithm', 'set', 'map']."}, {"type": "combination", "instruction": "In your code, the class StatusInventory should have these properties ['request', 'product', 'transaction']."}, {"type": "combination", "instruction": "In your code, the class StatusInventory should have these methods ['search_product']."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_cut, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 6], "9": [0, 1, 2, 6], "13": [0, 1, 2, 10], "14": [0, 1, 2, 10], "15": [0, 1, 2, 11]}, "question_id": 380}
{"question": "\n\nDesign a system that tracks and reports the distribution of transaction processing times within a blockchain network. The system should be able to record the time taken to process individual transactions and then categorize these times into predefined time buckets for statistical analysis. The time buckets should be in the form of nanosecond ranges, and the system should be able to output the distribution in a JSON format that shows the count of transactions that fall into each bucket.\n\nThe system should also be able to generate a summary string of block assembly statistics, which includes various metrics such as the number of transactions processed, the total processing time, and any other relevant statistics. The summary should be easily readable and include only non-zero statistics to avoid clutter.\n\nImplement the `transactionProcessingTimeDistribution` and `AssembleBlockStats` types with the following methods:\n\n- `AddTransaction(duration time.Duration)`: Adds a transaction processing time to the distribution.\n- `MarshalJSON() ([]byte, error)`: Converts the distribution into a JSON byte slice.\n- `String() string`: Generates a summary string of block assembly statistics.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, should not be a global variable."}, {"type": "variable", "instruction": "Variable inventory, the initial value should be dwa."}, {"type": "interface", "instruction": "Your code should define an interface named insert_order."}, {"type": "file", "instruction": "Your code should be organized in a package named add_form."}, {"type": "file", "instruction": "Your code should import the following libraries ['math']."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_form, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"3": [0, 2, 9], "4": [0, 2, 9], "8": [0, 6, 9]}, "question_id": 381}
{"question": "\n\nDesign a Java program for a pet shop application that allows users to log in or sign up. The application should have a simple user interface with two buttons: one for logging in and another for signing up. When the user attempts to log in, the application should check the credentials against a database. If the credentials are valid, the user is taken to a new screen with additional options (represented by the `Buttons` class). If the credentials are invalid, the application should display a toast message indicating the failure. For the purpose of this question, assume the existence of a `DatabaseHelper` class with a method `CheckLoginStatus(String username, String password)` that returns a boolean indicating the success of the login attempt.\n\nImplement the `Login` class, which extends `AppCompatActivity`, and includes the necessary imports, member variables, and methods. Also, provide a simple test case to verify the correctness of the login functionality.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['get_user', 'set_shipment']."}, {"type": "interface", "instruction": "Your code should define an interface named update_profile."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.math', 'java.nio']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang', 'java.math', 'java.text']."}], "instruction_dependence": {"3": [0, 2], "6": [0, 5]}, "question_id": 382}
{"question": "\n\nDesign a permission management system that allows for the creation, updating, and listing of permission groups within a store. Each group should have a unique name and can contain a list of items that represent permissions in the format \"namespace-resource-method\". The system should enforce that group names are non-empty and unique. Additionally, it should provide functionality to update the items within a group and list all groups associated with a given namespace.\n\nImplement the following functions:\n\n- `CreateGroup(groupName string, users []string, roles []string, items []string) error`: Creates a new group with the specified name, users, roles, and items. It should return an error if the group name is empty or already exists.\n- `GetGroup(groupName string) (*Group, error)`: Retrieves the group with the specified name. It should return an error if the group does not exist.\n- `UpdateItems(groupName string, items []string) error`: Updates the items of the group with the specified name. It should return an error if the group does not exist or if the items list contains empty strings.\n- `ListNsGroup(namespace string) ([]*Group, error)`: Lists all groups associated with the specified namespace. It should return an error if no groups are associated with the namespace.\n\nThe `Group` struct should be defined as follows:\n\n```go\ntype Group struct {\n\tName  string\n\tUsers []string\n\tRoles []string\n\tItems []string\n}\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure channel."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Your code should define an enumeration named Direction"}, {"type": "variable", "instruction": "Variable item, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named remove_form."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named display_notification."}, {"type": "class", "instruction": "Your code should define a class named ModifyTys."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings', 'math']."}, {"type": "file", "instruction": "Your code should use the function remove_form from the library strings."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"7": [0, 1, 5, 15], "9": [0, 1, 8, 15], "12": [0, 1, 11, 15], "14": [0, 1, 13, 15]}, "question_id": 383}
{"question": "Assume you are developing a system to manage library books and you need to implement a feature to update book information. \n\nYou need to implement a method named `asyncUpdateBookInfo` that takes three parameters: `bookId` (the book's ID, type `String`), `newTitle` (the new title of the book, type `String`), and `newAuthor` (the new author of the book, type `String`). The method should asynchronously update the book information and return `\"Update successful\"` when the update succeeds, or `\"Update failed\"` if it encounters any errors.\n\nPlease use `CompletableFuture` to implement the asynchronous operation and assume you already have a synchronous method `updateBookInfo(String bookId, String newTitle, String newAuthor)` that can be called, which returns `true` when the update is successful and `false` when it fails.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\npublic class LibrarySystem {\n    public static CompletableFuture<String> asyncUpdateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return CompletableFuture.supplyAsync(() -> {\n        });\n    }\n    private static boolean updateBookInfo(String bookId, String newTitle, String newAuthor) {\n        return true; \n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not use the while keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Set."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable account, type should be int."}, {"type": "variable", "instruction": "Variable account, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named delete_report."}, {"type": "interface", "instruction": "Your code should define an interface named set_product."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "file", "instruction": "Your code should be organized in a package named process_tys."}, {"type": "combination", "instruction": "You should initialize an object named tys as an instance of the Kms class using ['item', 'record'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named set_product that includes these methods ['create_form', 'process_msg', 'execute_info']."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_tys, which should contain these classes ['TokenStatus', 'RetrieveRoomMsg']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 6], "14": [0, 1, 2, 3, 12], "15": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 12, 13]}, "question_id": 384}
{"question": "\n\nDesign a Java program that models a simple address book. The program should be able to store and retrieve personal information based on a person's name. Each person has an address associated with them. The address contains the street, city, state, and zip code. The program should provide the following functionalities:\n\n1. Add a new person along with their address.\n2. Retrieve a person's address by their name.\n3. Update the address for a given person.\n4. Remove a person from the address book.\n\nThe `Person` class has already been provided. You need to create an `Address` class and an `AddressBook` class to manage the collection of `Person` objects. Ensure that the `AddressBook` class handles cases where a person is not found.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the while keyword."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, type should be ArrayList."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be record."}, {"type": "function", "instruction": "Your code should include a function named retrieve_data."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FilterItem."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_msg."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_msg, which should contain these classes ['TransformStatusInfo', 'FilterCreditOrder']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"7": [0, 1, 6, 15], "8": [0, 1, 6, 15], "11": [0, 1, 10, 15], "14": [0, 1, 12, 13, 15]}, "question_id": 385}
{"question": "Please design a Java method to check if a user can successfully log in. The method takes two string parameters: username and password. If the username is \"admin\" and the password is \"123456\", the login is considered successful and returns `true`; otherwise, it returns `false`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class LoginValidator {\n    public boolean checkLogin(String username, String password) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the assert keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "variable", "instruction": "Variable customer, type should be boolean."}, {"type": "function", "instruction": "Your code should include a function named add_kms."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_event."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CreateProductShipment."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named display_report."}, {"type": "combination", "instruction": "You should define an interface named retrieve_event that includes these methods ['submit_transaction', 'remove_token', 'transform_bill']."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_report, which should contain these classes ['SubmitNotification', 'ModifyUserInfo', 'FilterBill']."}], "instruction_dependence": {"5": [0, 1, 3], "7": [0, 1, 6], "9": [0, 1, 8], "11": [0, 1, 10], "13": [0, 1, 8], "14": [0, 1, 10, 12]}, "question_id": 386}
{"question": "\n\nDesign a Kubernetes management tool that allows users to interact with a Kubernetes cluster to perform the following operations:\n\n1. Authenticate with the cluster by loading user credentials from a file or prompting the user for credentials if the file does not exist.\n2. Perform a rolling update on a set of pods managed by a specified replication controller, with a user-defined update period between pod updates.\n3. Stop a replication controller by setting the number of replicas to zero.\n4. Resize a replication controller to a specified number of replicas.\n5. Create a new replication controller with a specified number of replicas, running a specified image, and optionally create an associated service with a specified port.\n6. Delete a replication controller, ensuring that it has been stopped first (i.e., replicas set to zero).\n\nThe tool should be able to handle errors gracefully and provide informative messages to the user. It should also output the resulting state of replication controllers and services in YAML format after each operation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_info."}, {"type": "class", "instruction": "Your code should define a class named InventoryShipment."}, {"type": "file", "instruction": "Your code should not use the following libraries ['io', 'strconv', 'math']."}, {"type": "combination", "instruction": "You should define an interface named retrieve_info that includes these methods ['execute_transaction']."}, {"type": "combination", "instruction": "In your code, the class InventoryShipment should have these properties ['message']."}, {"type": "combination", "instruction": "In your code, the class InventoryShipment should have these methods ['execute_transaction']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 13], "10": [0, 1, 2, 3, 7, 13], "11": [0, 1, 2, 3, 8, 13], "12": [0, 1, 2, 3, 8, 13]}, "question_id": 387}
{"question": "\n\nDesign a Java program that interacts with a database to manage city information. The program should be able to find a city by its state. Each city is represented by a `City` class that contains at least the following fields: `id`, `name`, `state`, and `population`. The `CityMapper` interface, as shown in the given code snippet, is an abstraction for the database operations related to the `City` class.\n\nYour task is to implement the `CityMapper` interface and a `CityService` class that uses the `CityMapper` to retrieve city information from the database. The `CityService` should provide a method `getCityByState(String state)` that returns a `City` object for the given state.\n\nAdditionally, write a simple main program that demonstrates the use of the `CityService` to find a city by state. Assume that the database setup and MyBatis configuration are already in place and that the `CityMapper` is correctly configured to interact with the database.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_notification."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.net', 'java.awt']."}, {"type": "combination", "instruction": "You should define an interface named calculate_notification that includes these methods ['process_report', 'sort_report']."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "8": [0, 1, 6]}, "question_id": 388}
{"question": "Implement a function in Go, ProcessConcurrently(tasks []Task, maxConcurrent int, processFunc func(Task)), that accepts a task list and concurrently executes the task ProcessTask(task Task), requiring a limit of no more than maxConcurrent tasks executing at the same time.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Variable user, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named create_tys."}, {"type": "interface", "instruction": "Your code should define an interface named execute_event."}, {"type": "file", "instruction": "Your code should import the following libraries ['time', 'sort']."}, {"type": "file", "instruction": "Your code should use the function create_tys from the library math."}, {"type": "combination", "instruction": "You should define an interface named execute_event that includes these methods ['check_status', 'generate_view', 'get_notification']."}, {"type": "combination", "instruction": "The function create_tys should return a int as its result."}], "instruction_dependence": {"3": [0, 2], "7": [0, 6], "8": [0, 5], "9": [0, 4]}, "question_id": 389}
{"question": "Please write a Java program that contains a class named `Advertisement`, which is used to manage information about app install advertisements. This class should have a private member variable `adMapper`, which is an instance of the `AppInstallAdMapper` class. The `AppInstallAdMapper` class has a method `getTitle()`, which is used to get the title of the advertisement. In the `Advertisement` class, implement a public method `getAdTitle()`, which calls the `getTitle()` method of `adMapper` and returns the advertisement title.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass AppInstallAdMapper {\n    private String title;\n    public AppInstallAdMapper(String title) {}\n    public String getTitle() {}\n}\npublic class Advertisement {\n    private AppInstallAdMapper adMapper;\n    public Advertisement(AppInstallAdMapper adMapper) {}\n    public String getAdTitle() {}\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer, type should be String."}, {"type": "function", "instruction": "Your code should include a function named search_tys."}, {"type": "interface", "instruction": "Your code should define an interface named modify_msg."}, {"type": "class", "instruction": "Your code should define a class named DataToken."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql']."}, {"type": "combination", "instruction": "Your code should define a class named DataToken that implements the modify_msg interface."}, {"type": "combination", "instruction": "In your code, the class DataToken should have these methods ['insert_profile', 'process_event']."}, {"type": "combination", "instruction": "The function search_tys should return a ArrayList as its result."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 7], "10": [0, 1, 6, 7], "11": [0, 1, 7], "12": [0, 1, 5]}, "question_id": 390}
{"question": "\n\nDesign a Go program that provides an API for managing a simple in-memory messaging system based on the Whisper protocol. The API should allow clients to create identities, post messages, create message filters, and retrieve messages based on those filters. The API should be able to handle the following operations:\n\n1. `Version`: Retrieve the version of the Whisper protocol being used.\n2. `Post`: Send a message with given payload, recipient, sender, topics, priority, and time-to-live (TTL).\n3. `HasIdentity`: Check if a given identity exists in the system.\n4. `NewIdentity`: Create a new identity and return it.\n5. `NewFilter`: Create a new message filter based on recipient, sender, and topics, and return the filter ID.\n6. `UninstallFilter`: Remove an existing message filter by its ID.\n7. `GetFilterChanges`: Retrieve messages that match a filter ID and have been received since the last request.\n8. `GetMessages`: Retrieve all messages that match a filter ID.\n\nThe API should be robust, handling cases where the Whisper service is offline and providing appropriate error messages. The API should also be able to encode and decode request parameters and results.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, type should be slice."}, {"type": "function", "instruction": "Your code should include a function named search_account."}, {"type": "interface", "instruction": "Your code should define an interface named filter_form."}, {"type": "class", "instruction": "Your code should define a class named OrderTys."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_credit."}, {"type": "combination", "instruction": "You should initialize an object named user as an instance of the OrderTys class using ['transaction', 'kms', 'account'] for initialization."}, {"type": "combination", "instruction": "The function search_account should take ['status'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_credit, which should contain these classes ['ProfileRoom', 'User', 'KmsTys']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "10": [0, 1, 2, 8], "11": [0, 1, 2, 6], "12": [0, 1, 2, 8, 9]}, "question_id": 391}
{"question": "\n\nDesign a benchmarking system for comparing the performance of various image filtering and convolution operations between CPU (using `scipy.ndimage`) and GPU (using `cupyx.scipy.ndimage`). The system should be able to handle different image shapes, filter sizes, and data types. The benchmark should include a variety of operations such as uniform filtering, Gaussian filtering, maximum/minimum filtering, median filtering, percentile filtering, rank filtering, and convolution/correlation in both 1D and multi-dimensional forms.\n\nThe benchmarking system should be implemented as two classes: `FilterBench` and `ConvolveBench`, both inheriting from a base class `ImageBench`. The `ImageBench` class should handle the common setup for the benchmarks, while `FilterBench` and `ConvolveBench` should specialize in setting up the arguments for filter and convolution operations, respectively.\n\nThe benchmarking should be run for a predefined set of image shapes, filter sizes, and modes, and the results should be collected into a pandas DataFrame. The results should then be saved to a CSV file, a pickle file, and a markdown file for easy viewing and analysis.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable token, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_profile."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['delete_room', 'sort_dwa', 'calculate_cut']."}, {"type": "class", "instruction": "Your code should define a class named InfoPunish."}, {"type": "file", "instruction": "Your code should be organized in a package named add_report."}, {"type": "combination", "instruction": "You should initialize an object named view as an instance of the InfoPunish class using ['info'] for initialization."}, {"type": "combination", "instruction": "In your code, the class InfoPunish should have these methods ['transform_token', 'delete_order', 'set_room']."}, {"type": "combination", "instruction": "The function create_profile should take ['data', 'status', 'form'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_report, which should contain these classes ['Order']."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_report, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"3": [0, 2, 15], "4": [0, 2, 15], "6": [0, 5, 15], "10": [0, 8, 15], "11": [0, 8, 15], "12": [0, 5, 15], "13": [0, 8, 9, 15], "14": [0, 9, 15]}, "question_id": 392}
{"question": "\n\nDesign a Java class `IndexMerger` that merges two or more Lucene indexes into a single index. The class should handle empty indexes and indexes with term vectors properly. The `IndexMerger` should expose a method `mergeIndexes` that takes an array of `Directory` objects representing the Lucene directories to be merged and a `Directory` object where the merged index will be stored. The method should ensure that the merged index is optimized and checked for consistency.\n\nThe `IndexMerger` should use the `ParallelReader` class to merge the indexes and handle any exceptions that may occur during the merging process. The class should also ensure that all resources are properly closed after the operation is completed.\n\nProvide a test case that demonstrates the usage of the `IndexMerger` class by merging two empty indexes and one index with term vectors, and then verifying the correctness of the merged index.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should not be a global variable."}, {"type": "variable", "instruction": "Variable item, the initial value should be bill."}, {"type": "variable", "instruction": "Variable item, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_dwa."}, {"type": "class", "instruction": "Your code should define a class named TransformNotification."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql']."}, {"type": "combination", "instruction": "The function execute_dwa should take ['product'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "7": [0, 1, 2, 5, 14], "8": [0, 1, 2, 5, 14], "11": [0, 1, 2, 10, 14], "13": [0, 1, 2, 9, 14]}, "question_id": 393}
{"question": "There is a user struct User with two fields: FirstName and LastName. Write a function SortUsersByLastName in golang that accepts a slice of User and sorts it by the LastName field. If LastName is the same, then further sort by FirstName.\n```go\ntype User struct {\n    FirstName string\n    LastName  string\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, type should be slice."}, {"type": "variable", "instruction": "Variable tys, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named create_request."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeStatusTys."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_punish."}, {"type": "combination", "instruction": "Your code should define a class named AnalyzeStatusTys that implements the create_request interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_punish, which should contain these classes ['ExecuteProduct', 'SearchTransactionKms']."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"10": [0, 1, 2, 3, 4, 9, 17], "11": [0, 1, 2, 3, 4, 9, 17], "15": [0, 1, 2, 3, 4, 12, 13, 17], "16": [0, 1, 2, 3, 4, 13, 14, 17]}, "question_id": 394}
{"question": "Given question below:\n------------\nFollowing the example below, use Python to write a function that makes concurrent page requests,\n1. The web page request function is fetch_url, the input is a list of urls, and the return is the status code of the webpage\n2. The concurrent request function is execute_concurrently, the input is the function fetch_url and url_list.\n------------\n\nWe try to solve it with code:\n```python\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef fetch_url(url):\n    try:\n        response = requests.get(url)\n        return response.status_code\n    except requests.RequestException as e:\n        print(f\"Error fetching {url}: {e}\")\n        return None\n\ndef execute_concurrently(function, url_list, max_workers=5):\n    results = {}\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        future_to_url = {executor.submit(function, url): url for url in url_list}\n        \n        for future in as_completed(future_to_url):\n            url = future_to_url[future]\n            try:\n                result = future.result()\n                results[url] = result\n                print(f\"URL {url} fetched with status code {result}\")\n            except Exception as exc:\n                print(f\"{url} generated an exception: {exc}\")\n                results[url] = None\n    return results\n\nurls = [\n    \"http://example.com\",\n    \"http://nonexistent.domain\",\n    \"https://httpbin.org/status/404\",\n    \"https://httpbin.org/status/200\"\n]\n\nresults = execute_concurrently(fetch_url, urls)\nprint(\"Final results:\", results)\n```\n\nBut some error occurs during execution:\n------------\nTraceback (most recent call last):\n  File \"/tmp/tmpha0_yi_j/tmp21_trloq.py\", line 65, in <module>\n    check()\n  File \"/tmp/tmpha0_yi_j/tmp21_trloq.py\", line 60, in check\n    assert results == expected_results, f\"Expected {expected_results}, but got {results}\"\nAssertionError: Expected [200, 200, 200, 200], but got {'http://www.bing.com': 200, 'https://www.bytedance.com/zh/news': 200, 'https://www.bytedance.com/zh/': 200, 'https://www.bytedance.com': 200}\n\n------------\n\nPlease try to analyze the cause of the error and give the full code after the modification (with markdown code block format)", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not use the True keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be int."}, {"type": "interface", "instruction": "Your code should define an interface named delete_credit."}, {"type": "class", "instruction": "Your code should define a class named DwaAccount."}, {"type": "combination", "instruction": "Your code should define a class named DwaAccount that implements the delete_credit interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 13 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 10], "9": [0, 1, 2, 3, 7, 8, 10]}, "question_id": 395}
{"question": "\n\nDesign a Python Flask application that uses WTForms to handle user interactions for a social media platform. The application should include forms for user registration, login, profile editing, posting messages, and changing passwords. Each form should have appropriate fields and validation rules as per the given code snippet.\n\nThe application should have the following functionalities:\n\n1. User Registration: Allow new users to register by providing a username, email, password, and an optional image URL. The password should be at least 6 characters long, and the email should be valid.\n\n2. User Login: Allow users to log in using their username and password.\n\n3. Edit Profile: Enable users to edit their profile information, including username, email, optional image URLs for profile and header, location, bio, and password. The email should be valid, and the password should be at least 6 characters long.\n\n4. Post Message: Allow users to post messages with a text field that cannot be empty.\n\n5. Change Password: Allow users to change their password by providing the current password and confirming the new password twice. All passwords should be at least 6 characters long.\n\nImplement the Flask application with routes corresponding to each form and ensure that the forms are displayed and processed correctly. Use the given code snippet as a starting point for creating the WTForms.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the else keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, type should be float."}, {"type": "variable", "instruction": "Variable request, should not be a global variable."}, {"type": "variable", "instruction": "Variable request, the initial value should be notification."}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_customer."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeCustomerDwa."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_shipment."}, {"type": "combination", "instruction": "The function filter_customer should take ['msg', 'transaction'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_shipment, which should contain these classes ['ModifyPunish', 'SubmitPunish']."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_shipment, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "8": [0, 1, 4], "12": [0, 1, 9], "13": [0, 1, 10, 11], "14": [0, 1, 11]}, "question_id": 396}
{"question": "\nWrite a Python function `compare_finite_element_basis` that compares the basis functions of finite elements between the SymFEM and Basix libraries for a given element type, cell type, and order. The function should take the following parameters:\n\n- `cell_type`: A string representing the type of cell (e.g., \"interval\", \"triangle\", \"tetrahedron\", etc.).\n- `element_type`: A string representing the type of finite element (e.g., \"Lagrange\", \"Serendipity\", \"Bubble\", etc.).\n- `order`: An integer representing the order of the finite element.\n- `variant_args`: A list of tuples representing additional arguments for the element variant (e.g., [(\"LagrangeVariant\", \"equispaced\")]).\n\nThe function should create a lattice of points for the given cell type, instantiate the finite element in both SymFEM and Basix, tabulate the basis functions at the lattice points, and compare the results. If the basis functions agree within a tolerance, the function should return `True`, otherwise `False`.\n\nThe function should handle any exceptions or errors that arise due to missing libraries, unsupported element types, or other issues, and return `False` in such cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "function", "instruction": "Your code should include a function named insert_transaction."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named execute_order."}, {"type": "class", "instruction": "Your code should define a class named SortTys."}, {"type": "file", "instruction": "Your code should import the following libraries ['tensorflow', 'scikit-learn']."}, {"type": "combination", "instruction": "You should define an interface named execute_order that includes these methods ['configure_info']."}, {"type": "combination", "instruction": "Your code should define a class named SortTys that implements the execute_order interface."}, {"type": "combination", "instruction": "In your code, the class SortTys should have these properties ['profile']."}], "instruction_dependence": {"9": [0, 1, 2, 8], "13": [0, 1, 2, 10], "14": [0, 1, 2, 10, 11], "15": [0, 1, 2, 11]}, "question_id": 397}
{"question": "\n\nDesign a Flask web application that serves as a simple search engine with rate limiting and logging features. The application should have the following specifications:\n\n1. The application should initialize Sentry for error tracking and performance monitoring.\n2. It should have a rate-limiting feature that tracks the number of requests from each IP address. If an IP address makes more than 20 requests within a certain time frame, it should return a message indicating that the access rate is too high and ask the user to try again later. If an IP address exceeds 100 requests, it should return a 403 Forbidden status.\n3. The application should have two routes:\n    - The root route (`\"/\"`) should handle both GET and POST requests. For GET requests, it should display a search form. For POST requests, it should accept a search query, log the search along with the requester's IP address, and return search results using a utility function `utils.search(query)`. If the query is empty, contains only whitespace, or contains a specific string, it should return a message asking the user to input a class.\n    - The route `\"/generate_code\"` should handle GET requests and accept a result parameter. It should call a utility function `utils.get_course(result)` and render the results on a page.\n4. The application should log all search queries along with the timestamp and the requester's IP address to a file named \"search.log\".\n5. The application should use a background thread to clear the list of tracked IP addresses every second.\n6. The application should set a flag to stop the background thread when the application is shutting down.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['calculate_cut', 'search_profile']."}, {"type": "interface", "instruction": "Your code should define an interface named search_report."}, {"type": "class", "instruction": "Your code should define a class named SearchStatusCustomer."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch']."}, {"type": "file", "instruction": "Your code should use the function configure_info from the library pandas."}, {"type": "combination", "instruction": "Your code should define a class named SearchStatusCustomer that implements the search_report interface."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 1, 4, 12], "10": [0, 1, 9, 12], "11": [0, 1, 7, 8, 12]}, "question_id": 398}
{"question": "Implement a token bucket `TokenBucket` in C++, which is an algorithm for traffic control. It can limit the rate of data transmission to prevent data from being transmitted too quickly or too slowly. \n1. Implement a constructor based on raw pointers `TokenBucket(double tokens_per_sec, uint64_t capacity, uint64_t initial_tokens = 0)`, where `double tokens_per_sec` generates how many tokens per second, `uint64_t capacity` represents how many tokens there are at most, and `uint64_t initial_tokens` represent how many tokens there are at the beginning.\n2. Implement interface `bool TryConsume(uint64_t tokens = 1)` to try to get `tokens`. Return `false` means need to wait, return `true` means already acquired. \n3. Implement interface `int64_t ConsumeWithBorrow(uint64_t tokens = 1)` to get `tokens` and wait for how many nanoseconds.\n4. Implement interface `int64_t GetWaitTime(uint64_t tokens = 1)` to get so many `tokens` and wait for how many nanoseconds.\n5. Implement interface `void Return(uint64_t tokens = 1)` to return how many `tokens`.\n6. Implement interface `double GetTokensPerSec() const ` to generate how many tokens per second.\n7. Implement interface `uint64_t GetCapacity() const` to display the total number of tokens.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the bool keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['modify_credit', 'update_log']."}, {"type": "file", "instruction": "Your code should import the following libraries ['string', 'set']."}, {"type": "file", "instruction": "Your code should use the function insert_punish from the library cmath."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7]}, "question_id": 399}
{"question": "Implementing the Drawing of Various Shapes on a Canvas Using PyQt5\n1. The interface includes a canvas for displaying graphics, and two buttons for selecting the type of shape to be drawn. When the user clicks a button, we draw the corresponding shape on the canvas.\n2. Draw a red triangle, corresponding to the triangle_button\n3. Draw a green square, the corresponding button is the square_button\n4. Code format requirements: Encapsulate the entire ui code into a class called ShapeDrawer, using property shape and color to record the shape and color to be drawn currently.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the except keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Variable user, type should be str."}, {"type": "function", "instruction": "Your code should include a function named modify_account."}, {"type": "interface", "instruction": "Your code should define an interface named check_bill."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TransformData."}, {"type": "file", "instruction": "Your code should import the following libraries ['Flask']."}, {"type": "combination", "instruction": "You should initialize an object named notification as an instance of the TransformData class using ['message', 'view'] for initialization."}, {"type": "combination", "instruction": "The function modify_account should take ['dwa'] as parameters."}, {"type": "combination", "instruction": "The function modify_account should return a dict as its result."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8], "12": [0, 1, 2, 3, 4, 11], "15": [0, 1, 2, 3, 4, 13], "16": [0, 1, 2, 3, 4, 10], "17": [0, 1, 2, 3, 4, 10]}, "question_id": 400}
{"question": "\n\nDesign a simple in-memory key-value store with map-like semantics, where each key can have multiple values associated with it. The key-value store should support the following operations:\n\n1. `Set(key []byte, value MapPair)`: Associates the given value with the specified key. If the key already exists, the value should be appended to the list of values associated with that key.\n2. `Get(key []byte) ([]MapPair, error)`: Retrieves all values associated with the specified key. If the key does not exist, it should return an error.\n3. `Delete(key []byte, value MapPair) error`: Removes the specified value from the list of values associated with the given key. If the value does not exist, it should return an error.\n4. `Cursor() CursorMap`: Returns a cursor that can be used to iterate over all key-value pairs in the key-value store in sorted order by key.\n\nThe `MapPair` type represents a key-value pair within the map and is defined as follows:\n\n```go\ntype MapPair struct {\n\tKey   []byte\n\tValue []byte\n}\n```\n\nThe `CursorMap` interface should support the following operations:\n\n1. `First() ([]byte, []MapPair, error)`: Moves the cursor to the first key-value pair and returns it.\n2. `Next() ([]byte, []MapPair, error)`: Moves the cursor to the next key-value pair and returns it.\n3. `Seek(key []byte) ([]byte, []MapPair, error)`: Moves the cursor to the key-value pair with the specified key or the next larger key if the exact key is not found.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure channel."}, {"type": "interface", "instruction": "Your code should define an interface named add_room."}, {"type": "class", "instruction": "Your code should define a class named GetReportInfo."}, {"type": "file", "instruction": "Your code should be organized in a package named process_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings', 'net']."}, {"type": "file", "instruction": "Your code should use the function process_tys from the library strconv."}, {"type": "file", "instruction": "Your code should not use the following libraries ['io']."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_customer, which should contain these classes ['Transaction', 'ProcessToken', 'RoomCustomer']."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_customer, which should contain these functions ."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 6, 7], "12": [0, 1, 2, 3, 7]}, "question_id": 401}
{"question": "Quickly set up a webserver service using go, when a user access request, directly return \"Hello, World /\"\nRequirements:\n1. Implement the function `func StartWebServer()` to start the service\n2. Implement the function `func GetHttpWorld() string` to respond to requests.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable bill, the initial value should be report."}, {"type": "variable", "instruction": "Variable bill, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named add_notification."}, {"type": "class", "instruction": "Your code should define a class named Dwa."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_data."}, {"type": "combination", "instruction": "Your code should define a class named Dwa that implements the add_notification interface."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "5": [0, 2], "9": [0, 6, 7]}, "question_id": 402}
{"question": "\n\nDesign a WebSocket chat service that allows users to log in and match with other users for a chat session. The service should be able to handle different types of messages, such as login requests and match requests. Each message type should be processed differently.\n\nThe chat service should be implemented using Spring's WebSocket support and should be able to handle text messages received from clients. The service should parse the incoming JSON payload to determine the type of message and then perform the appropriate action.\n\nThe `WebSocketChatHandler` should be able to handle at least two types of messages:\n- `LOGIN`: When a login message is received, the service should deserialize the payload into a `UserLoginDto` object and then call the `login` method of the `WebSocketService`.\n- `MATCH`: When a match message is received, the service should deserialize the payload into a `MatchDto` object and then call the `match` method of the `WebSocketService`.\n\nThe `WebSocketService` should have methods `login` and `match` that handle the respective actions. The `login` method should register the user's session, and the `match` method should pair the user with another user who is looking for a match.\n\nProvide a complete implementation of the `WebSocketChatHandler` class, including necessary imports, and create a simple test case to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the enum keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable order, the initial value should be order."}, {"type": "class", "instruction": "Your code should define a class named HandleReportRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_log."}, {"type": "combination", "instruction": "In your code, the class HandleReportRecord should have these properties ['event', 'data']."}], "instruction_dependence": {"7": [0, 1, 5], "8": [0, 1, 5], "11": [0, 1, 9]}, "question_id": 403}
{"question": "\nDesign a C++ program that models a simplified version of a geometry system for a physics simulation. The system should be able to create and manage different types of geometric layers, specifically `CylinderLayer` and `PlaneLayer`. Each layer type should have a unique set of properties and should be able to report its type and relevant properties.\n\nThe `CylinderLayer` should be defined by a transformation matrix, a radius, and a half-length along the z-axis. The `PlaneLayer` should be defined by a transformation matrix and rectangle bounds (width and height). Both layer types should have an optional thickness property and should be able to report their surface type.\n\nImplement the following functionalities:\n1. Construction of `CylinderLayer` and `PlaneLayer` objects with their respective properties.\n2. A method to return the layer type (e.g., \"Cylinder\" or \"Plane\").\n3. A method to return the surface type name (e.g., \"CylinderSurface\" or \"PlaneSurface\").\n4. A method to return the thickness of the layer if it has been set.\n\nWrite unit tests to verify the correctness of the construction and property reporting for both `CylinderLayer` and `PlaneLayer`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the continue keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['display_report', 'sort_shipment', 'execute_account', 'transform_inventory']."}, {"type": "interface", "instruction": "Your code should define an interface named handle_report."}, {"type": "class", "instruction": "Your code should define a class named CreditData."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['queue']."}, {"type": "file", "instruction": "Your code should use the function transform_info from the library map."}, {"type": "combination", "instruction": "Your code should define a class named CreditData that implements the handle_report interface."}, {"type": "combination", "instruction": "In your code, the class CreditData should have these methods ['remove_profile', 'check_dwa', 'get_message']."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 16, 17], "7": [0, 1, 2, 5, 16, 17], "11": [0, 1, 2, 10, 16, 17], "13": [0, 1, 2, 12, 16, 17], "14": [0, 1, 2, 9, 10, 16, 17], "15": [0, 1, 2, 10, 16, 17]}, "question_id": 404}
{"question": "\n\nDesign a Java class that represents a repository for managing alarm records in a MongoDB database. The repository should provide the following functionalities:\n\n1. Count the number of alarms with a specific handling status.\n2. Retrieve a paginated list of alarms filtered by their level and handling status.\n3. Fetch only the IDs of alarms with a specific handling status.\n\nThe alarm records are represented by the `Alarm` class, which includes properties such as `id`, `alarmLevel`, and `status`. The `AlarmLevel` is an enumeration that defines the severity of the alarm (e.g., CRITICAL, MAJOR, MINOR, WARNING), and the `HandleStatus` is an enumeration that defines the handling status of the alarm (e.g., UNHANDLED, IN_PROGRESS, RESOLVED).\n\nImplement the `MongoAlarmRepository` interface that extends the `AlarmRepository` interface. Use Spring Data MongoDB annotations to define the required queries. Ensure that the repository is capable of interacting with a MongoDB database to perform the operations defined above.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable info, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_cut."}, {"type": "interface", "instruction": "Your code should define an interface named process_status."}, {"type": "class", "instruction": "Your code should define a class named HandleView."}, {"type": "combination", "instruction": "In your code, the class HandleView should have these methods ['submit_product', 'update_log', 'delete_product']."}, {"type": "combination", "instruction": "The function transform_cut should return a char as its result."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "9": [0, 1, 8], "10": [0, 1, 6]}, "question_id": 405}
{"question": "\n\nWrite a function `findMiddleElement` that takes the head of a singly linked list and returns the middle node of the linked list. If there are two middle nodes, return the second middle node. The singly linked list `ListNode` is defined as follows:\n\n```go\ntype ListNode struct {\n    Val  int\n    Next *ListNode\n}\n```\n\nThe function should have the following signature:\n\n```go\nfunc findMiddleElement(head *ListNode) *ListNode\n```\n\nFor example, given a linked list `1->2->3->4->5`, the function should return the node with the value `3`. Given `1->2->3->4->5->6`, the function should return the node with the value `4`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure struct."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, the initial value should be record."}, {"type": "variable", "instruction": "Variable inventory, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_log."}, {"type": "interface", "instruction": "Your code should define an interface named configure_bill."}, {"type": "class", "instruction": "Your code should define a class named RemoveStatusNotification."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'time']."}, {"type": "file", "instruction": "Your code should use the function transform_log from the library io."}, {"type": "combination", "instruction": "You should define an interface named configure_bill that includes these methods ['delete_tys']."}, {"type": "combination", "instruction": "In your code, the class RemoveStatusNotification should have these properties ['record', 'credit']."}, {"type": "combination", "instruction": "The function transform_log should return a string as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"3": [0, 2, 13], "4": [0, 2, 13], "9": [0, 8, 13], "10": [0, 6, 13], "11": [0, 7, 13], "12": [0, 5, 13]}, "question_id": 406}
{"question": "\nCalculate the Position of the Sun in the Ecliptic Coordinate System\n\nGiven a date and time, calculate the position of the Sun in the ecliptic coordinate system. The ecliptic coordinate system is a celestial coordinate system commonly used for representing the apparent positions and orbits of Solar System objects. In this system, the plane of the Earth's orbit around the Sun (the ecliptic plane) is taken as the primary plane.\n\nYour task is to write a C++ program that takes the year, month, day, hour, minute, and second as input and computes the position of the Sun in the ecliptic coordinate system. The position should be represented as a vector (r_x, r_y, r_z), where r_x, r_y, and r_z are the components of the Sun's position vector in astronomical units (AU).\n\nThe program should use the following astronomical formulas to compute the Sun's position:\n\n1. Calculate the Julian day number at 0 UT for any year between 1900 and 2100.\n2. Compute the number of Julian centuries (T) since J2000.0.\n3. Calculate the mean longitude of the Sun (lambda_M), the mean anomaly (M), and the ecliptic longitude (lambda_ecliptic).\n4. Compute the Sun's distance from the Earth (r) in AU.\n5. Calculate the Sun's position in the ecliptic coordinate system (r_x, r_y, r_z).\n\nThe formulas for these calculations are provided in the given code snippet.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure queue."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_report."}, {"type": "class", "instruction": "Your code should define a class named RetrieveCut."}, {"type": "file", "instruction": "Your code should be organized in a package named create_kms."}, {"type": "combination", "instruction": "You should initialize an object named msg as an instance of the RetrieveCut class using ['dwa', 'credit'] for initialization."}], "instruction_dependence": {"7": [0, 1, 2, 5]}, "question_id": 407}
{"question": "\n\nDesign a simple blockchain-based database system with a command-line interface that allows users to interact with a blockchain to store and query data using SQL-like commands. The system should support basic operations such as querying the blockchain, executing transactions to add data, viewing the current state of the blockchain, and providing help instructions.\n\nThe blockchain should consist of blocks that contain a unique block ID, a hash of the previous block, a hash of the current block, and data in the form of SQL statements or query results. The system should ensure the integrity of the blockchain by validating the hashes when adding new blocks.\n\nImplement the following commands:\n- `query \"<sql select query>\"`: Sends a query to the blockchain database and prints the output.\n- `execute \"<sql statement>\"`: Executes an SQL transaction that changes the blockchain database.\n- `state`: Prints the current state of the blockchain, including block IDs, previous hashes, and block hashes.\n- `help`: Prints a help message with available commands.\n- `exit`: Exits the application.\n\nEnsure that the system can handle invalid input and provide appropriate error messages. The system should also be able to recover from errors without crashing.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Your code should define an enumeration named Size"}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "class", "instruction": "Your code should define a class named RoomRecord."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['net', 'sort']."}, {"type": "file", "instruction": "Your code should use the function execute_record from the library fmt."}], "instruction_dependence": {"5": [0, 3], "7": [0, 6], "9": [0, 8]}, "question_id": 408}
{"question": "\n\nDesign a Python class named `DatabaseManager` that manages database connections. The class should support connecting to a MySQL database and handle configuration settings for the connection. The class should be able to read configuration settings from a YAML file and establish a connection to the database using these settings.\n\nThe `DatabaseManager` class should have the following methods:\n\n- `__init__(self, config_file)`: Constructor that takes the path to a YAML configuration file as an argument. The YAML file contains the database connection settings such as host, port, database name, username, and password.\n\n- `load_config(self)`: Reads the YAML configuration file and stores the connection settings.\n\n- `connect(self)`: Establishes a connection to the MySQL database using the stored configuration settings. If the connection is already established and open, it should return the existing connection.\n\n- `close(self)`: Closes the database connection if it is open.\n\nAdditionally, provide a sample YAML configuration file and test cases to verify the correctness of the `DatabaseManager` class.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['get_kms', 'remove_event']."}], "instruction_dependence": {"5": [0, 1, 4]}, "question_id": 409}
{"question": "Solving Linear Programming Problem\n\nmax z = c_1 x_1 + x_2\n\ns.t. x_1 + x_2 <= 6\nx_1 + 2 x_2 <= 10\nx_1, x_2 >= 0\n\nDefine a Python function solve(c1) to solve this problem. The input c1 is the value of c_1, and it returns a numpy array of length 2, representing the solution result.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the except keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be int."}, {"type": "function", "instruction": "Your code should include a function named transform_inventory."}, {"type": "interface", "instruction": "Your code should define an interface named delete_log."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_tys."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django']."}, {"type": "combination", "instruction": "You should define an interface named delete_log that includes these methods ['search_kms']."}], "instruction_dependence": {"5": [0, 1, 4], "10": [0, 1, 7]}, "question_id": 410}
{"question": "Implement a generic function Map using Go, which accepts a slice and a function as parameters. This function will be applied to each element of the slice and return a new slice that contains the results of the function application. Implement the function `func Map[F, T any](s []F, f func(F) T) []T`.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, should not be a global variable."}, {"type": "variable", "instruction": "Variable info should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_log."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_profile', 'remove_msg', 'create_view', 'update_room']."}, {"type": "interface", "instruction": "Your code should define an interface named remove_cut."}, {"type": "class", "instruction": "Your code should define a class named CalculateDwaProfile."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['time', 'os']."}, {"type": "file", "instruction": "Your code should use the function execute_log from the library bytes."}, {"type": "combination", "instruction": "Your code should define a class named CalculateDwaProfile that implements the remove_cut interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_room, which should contain these classes ['SubmitStatusCredit', 'PunishNotification', 'MessageBill']."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"4": [0, 1, 3, 16], "5": [0, 1, 3, 16], "7": [0, 1, 6, 16], "13": [0, 1, 12, 16], "14": [0, 1, 9, 10, 16], "15": [0, 1, 10, 11, 16]}, "question_id": 411}
{"question": "Please write a Java method that returns corresponding health advice based on the user's age. Specific requirements are as follows:\n\n- If the user's age is less than 12 years old, the advice is \"Drink plenty of water\".\n- If the user's age is between 12 and 18 years old (including 12 and 18), the advice is \"Maintain proper exercise\".\n- If the user's age is between 19 and 40 years old (including 19 and 40), the advice is \"Maintain a healthy diet\".\n- If the user's age is between 41 and 60 years old (including 41 and 60), the advice is \"Have regular checkups\".\n- If the user's age is over 60 years old, the advice is \"Stay positive\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class HealthAdvice {\n    public static String getHealthAdvice(int age) {\n    }\n    public static void checkHealthAdvice() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the case keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable inventory, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named CalculateBillRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named update_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.awt']."}, {"type": "file", "instruction": "Your code should use the function display_transaction from the library java.sql."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_message, which should contain these classes ['Kms', 'ModifyAccountData']."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"4": [0, 1, 3, 11], "5": [0, 1, 3, 11], "9": [0, 1, 8, 11], "10": [0, 1, 6, 7, 11]}, "question_id": 412}
{"question": "Please write a Java method that safely adds key-value pairs to a `HashMap`. If any exceptions are encountered during the addition process, the method should catch and ignore them, ensuring the continuation of the program.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\npublic class SafeAddToMap {\n    public static void safeAdd(HashMap<String, String> map, String key, String value) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the try keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Map."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, type should be Map."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named DisplayBillMessage."}, {"type": "combination", "instruction": "In your code, the class DisplayBillMessage should have these properties ['event']."}, {"type": "combination", "instruction": "In your code, the class DisplayBillMessage should have these methods ['filter_customer', 'check_tys']."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "8": [0, 1, 6]}, "question_id": 413}
{"question": "Write a process_command(command) function, where the input is a command string, and it returns an HTML string with style.\n\nTake 'ls -la *.txt' as an example, the requirements are as follows:\n\nThe main command name is displayed in green: 'ls' is represented as <font color=green>ls</font>.\nThe argument name remains unchanged, such as -la.\nThe value of the argument is underlined, such as *.txt is represented as <u>*.txt</u>.\n\nTherefore, the complete return value for the above example will be <font color=green>ls</font>&nbsp;-la&nbsp;<u>*.txt</u>.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the import keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "Variable item, type should be set."}, {"type": "interface", "instruction": "Your code should define an interface named process_message."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named AddCustomer."}], "instruction_dependence": {"8": [0, 1, 2, 6], "10": [0, 1, 2, 9]}, "question_id": 414}
{"question": "\n\nDesign a Java class named `ManagedResource` that represents a managed resource with operations and attributes that can be monitored and managed via JMX (Java Management Extensions). The class should have the following features:\n\n1. The class should be annotated as a managed object using `@ManagedObject`.\n2. It should have at least two attributes:\n   - `status`: A `String` attribute representing the current status of the resource.\n   - `uptime`: A `long` attribute representing the uptime of the resource in milliseconds.\n3. These attributes should be exposed as managed attributes using `@ManagedAttribute`.\n4. The class should have at least one operation:\n   - `reset()`: A method to reset the resource's state.\n5. This operation should be exposed as a managed operation using `@ManagedOperation`.\n6. Include a constructor that initializes the status and uptime.\n7. Include appropriate getters for the attributes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "function", "instruction": "Your code should include a function named set_inventory."}, {"type": "interface", "instruction": "Your code should define an interface named update_transaction."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.awt']."}, {"type": "combination", "instruction": "You should define an interface named update_transaction that includes these methods ['submit_user']."}, {"type": "combination", "instruction": "The function set_inventory should return a Set as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"9": [0, 1, 2, 7, 11], "10": [0, 1, 2, 6, 11]}, "question_id": 415}
{"question": "\n\nDesign a class `CrossBitmap` that encapsulates a `BufferedImage` object and provides a common interface for image manipulation, independent of the platform. The class should allow the following operations:\n\n1. Create a new `CrossBitmap` from an existing `CrossBitmap`.\n2. Create a new blank `CrossBitmap` with specified width and height.\n3. Get and set the `BufferedImage` associated with the `CrossBitmap`.\n4. Get a `CrossCanvas` object to draw on the `CrossBitmap`.\n5. Get and set individual pixel colors using RGB values.\n6. Get the width and height of the `CrossBitmap`.\n7. Extract a sub-image from the `CrossBitmap`.\n8. Clone the `CrossBitmap`.\n9. Scale the `CrossBitmap` to a new size, with an option for smooth scaling.\n\nThe `CrossBitmap` class should also provide methods to get the red, green, and blue components of a pixel color separately.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable log should not be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named create_bill."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.math']."}, {"type": "file", "instruction": "Your code should use the function execute_data from the library java.sql."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.time']."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_bill, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"6": [0, 1, 4, 13], "7": [0, 1, 4, 13], "10": [0, 1, 9, 13], "12": [0, 1, 8, 13]}, "question_id": 416}
{"question": "\n\nDesign a simple file system using the Composite Design Pattern, where both files and directories can be treated uniformly. A file contains a name and a size in bytes, while a directory can contain any number of files and subdirectories. Implement the following functionalities:\n\n1. `File` - Represents a single file. It should have a name and a size.\n2. `Directory` - Represents a directory that can contain multiple files and directories.\n3. `getSize()` - Returns the total size of the file or the directory. In the case of a directory, it should return the sum of sizes of all files and subdirectories contained within it.\n4. `display()` - Prints the structure of the file system. For a directory, it should print its name and then list the contents (files and subdirectories) with an indentation to represent the hierarchy.\n\nUse the given code snippet as a starting point to implement the `File` and `Directory` classes, which should inherit from a common `Component` class. The `Component` class should define the interface for `getSize()` and `display()` methods.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the dynamic_cast keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Status"}, {"type": "class", "instruction": "Your code should define a class named AccountRoom."}, {"type": "combination", "instruction": "In your code, the class AccountRoom should have these properties ['cut']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6]}, "question_id": 417}
{"question": " Robot Catalog Management System\n\nYou are tasked with creating a Robot Catalog Management System that allows customers to view a list of available robots, get detailed component information for a specific robot, and manage customer orders. The system should read robot data from a file, allow customers to select a robot and view its components, and track customer orders by name.\n\nThe robot catalog is stored in a file named `robotcatalog.txt`, where each line represents a robot with its details separated by commas in the following order: Robot Name, Part Number, Price, Quantity Available, Weight, Description, Locomotor Part Name, Arm Part Name, Battery Part Name, Torso Part Name, Head Part Name.\n\nCustomers should be able to:\n- View a list of robots with their basic information.\n- Select a robot by its index number to view detailed component information.\n- Retrieve the name of a robot they wish to buy.\n- Calculate the final price of a robot based on the quantity they want to purchase.\n- View the total number of robot models available.\n- Enter their name to find their order history, which includes order number, model name, quantity, and total price.\n\nImplement the `Customer` class with the following methods:\n- `printRobot()`: Prints the list of robots with their basic information.\n- `robotcompinfo()`: Prints detailed component information for a selected robot.\n- `retrbtnmcust(int robotbuy)`: Returns the name of the robot a customer wishes to buy.\n- `returnrobotfprice(int custquant)`: Returns the final price of a robot based on the quantity.\n- `showcustdata()`: Allows a customer to view their order history by entering their name.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Your code should define an enumeration named Direction"}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named modify_credit."}, {"type": "interface", "instruction": "Your code should define an interface named configure_token."}, {"type": "class", "instruction": "Your code should define a class named CreateReport."}, {"type": "combination", "instruction": "You should initialize an object named customer as an instance of the CreateReport class using ['order'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named configure_token that includes these methods ['execute_token']."}, {"type": "combination", "instruction": "The function modify_credit should take ['info'] as parameters."}, {"type": "combination", "instruction": "The function modify_credit should return a map as its result."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"7": [0, 5, 15], "11": [0, 10, 15], "12": [0, 9, 15], "13": [0, 8, 15], "14": [0, 8, 15]}, "question_id": 418}
{"question": "\n\nIn a distant land, there is a forest represented by a 2D grid where each cell contains an integer value that denotes the height of the tree at that location. The forest is mapped into a text file where each line represents a row of trees, and each character in a line represents the height of a tree (0-9) at that position.\n\nYour task is to write a program that reads the forest map from a file and finds the total height of all trees in the forest. The program should use the `TreeMapReader` class provided to read the map from the file.\n\nAdditionally, implement a function `TotalTreeHeight(grid [][]int) int` that takes the 2D grid of tree heights and returns the sum of all tree heights.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the defer keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "function", "instruction": "Your code should not use any functions from the ['generate_log', 'manage_message']."}, {"type": "class", "instruction": "Your code should define a class named ManageEventBill."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['net']."}, {"type": "file", "instruction": "Your code should use the function remove_message from the library sort."}, {"type": "combination", "instruction": "You should initialize an object named event as an instance of the ManageEventBill class using ['request', 'bill'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_punish, which should contain these classes ['Form', 'Dwa', 'FilterProduct']."}], "instruction_dependence": {"9": [0, 1, 8], "10": [0, 1, 6], "11": [0, 1, 6, 7]}, "question_id": 419}
{"question": "\nWrite a C++ program that provides a command-line interface for calculating various string similarity and distance metrics. The program should support the following metrics:\n\n1. Jaro Distance\n2. Jaro-Winkler Distance\n3. Levenshtein Distance\n4. Normalized Levenshtein Distance\n\nThe program should allow the user to input two strings and select the desired metric for comparison. The result should be displayed to the user. The program should continue to prompt the user for input until the user decides to exit.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the reinterpret_cast keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named handle_transaction."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named manage_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CalculateMessage."}, {"type": "combination", "instruction": "You should initialize an object named product as an instance of the CalculateMessage class using ['log'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CalculateMessage should have these properties ['status', 'log', 'token']."}, {"type": "combination", "instruction": "In your code, the class CalculateMessage should have these methods ['display_account', 'modify_cut']."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8], "11": [0, 1, 2, 3, 4, 10], "13": [0, 1, 2, 3, 4, 12], "14": [0, 1, 2, 3, 4, 12], "15": [0, 1, 2, 3, 4, 12]}, "question_id": 420}
{"question": "\nGiven a matrix of integers, where each row represents a sequence of consecutive numbers that increase by 1 and each column represents a sequence of numbers that increase by 7, write a program to determine if the matrix follows this pattern correctly.\n\nThe first number of the matrix is given by `B[0][0]`. For any other number `B[i][j]` in the matrix, it should satisfy the following conditions:\n- The number directly above it (if it exists) should be `B[i][j] - 7`.\n- The number directly to the left of it (if it exists) should be `B[i][j] - 1`.\n\nThe program should read the dimensions of the matrix `N` (number of rows) and `M` (number of columns) from the standard input, followed by the matrix elements row by row. The program should output \"Yes\" if the matrix follows the pattern, and \"No\" otherwise.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the short keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure stack."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable token, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named check_punish."}, {"type": "class", "instruction": "Your code should define a class named CreditProduct."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['map']."}, {"type": "file", "instruction": "Your code should use the function retrieve_status from the library map."}, {"type": "combination", "instruction": "Your code should define a class named CreditProduct that implements the check_punish interface."}, {"type": "combination", "instruction": "In your code, the class CreditProduct should have these properties ['item']."}, {"type": "combination", "instruction": "In your code, the class CreditProduct should have these methods ['add_user', 'set_account']."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6, 17], "8": [0, 1, 2, 3, 4, 6, 17], "11": [0, 1, 2, 3, 4, 10, 17], "13": [0, 1, 2, 3, 4, 12, 17], "14": [0, 1, 2, 3, 4, 9, 10, 17], "15": [0, 1, 2, 3, 4, 10, 17], "16": [0, 1, 2, 3, 4, 10, 17]}, "question_id": 421}
{"question": "Please write a Java function to achieve the following functionality: Find and display the name of the last registered team from a football World Cup match, and populate a drop-down list (ComboBox) with the names of all players from that team. Ensure that your code snippet is completely self-contained and includes all necessary package imports.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JComboBox;\nimport java.util.ArrayList;\nimport java.util.List;\nclass Team {\n    private String name;\n    private List<String> players = new ArrayList<>();\n    public Team(String name, List<String> players) {\n    }\n    public String getName() {\n    }\n    public List<String> getPlayers() {\n    }\n}\nclass WorldCup {\n    private List<Team> teams = new ArrayList<>();\n    public void addTeam(Team team) {\n    }\n    public List<Team> getTeams() {\n    }\n}\npublic class TeamDisplay {\n    JComboBox<String> teamComboBox = new JComboBox<>();\n    JComboBox<String> playerComboBox = new JComboBox<>();\n    WorldCup worldCup = new WorldCup();\n    public TeamDisplay() {\n    }\n    public void displayLastTeamAndPlayers() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable account, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named SortBill."}, {"type": "file", "instruction": "Your code should be organized in a package named set_form."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.math', 'java.lang']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_form, which should contain these classes ['Customer', 'CheckReport', 'RoomDwa']."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 11], "6": [0, 1, 2, 4, 11], "10": [0, 1, 2, 7, 8, 11]}, "question_id": 422}
{"question": "\n\nImplement a C++ class `MultipleShooting` that performs the multiple shooting method for solving optimal control problems. The class should inherit from an abstract base class `Transcription` and use a given ordinary differential equation (ODE) approximation to discretize the control problem.\n\nThe `MultipleShooting` class should have the following functionalities:\n\n1. A constructor that takes a shared pointer to an `OdeApprox` object and initializes the `Transcription` base class with it.\n2. A destructor.\n3. A method `get_constraints` that computes the constraints for the multiple shooting method. It should return a vector of CasADi expressions representing the difference between the state at the next time step and the state obtained by integrating the ODE using the current state and control input.\n4. A method `set_J_real` that computes the sum of the constraints over all shooting intervals and sets a CasADi function `J_real_` that represents this sum. The function should take the state space `X`, control space `U`, and final time `tf` as inputs.\n5. A private method `clone` that returns a new instance of `MultipleShooting` with the same ODE approximation.\n\nThe `OdeApprox` class is assumed to have the following interface:\n- A method `f()` that returns the ODE function.\n- A `state_space_` object with a method `X()` that returns the state variables.\n- A `control_space_` object with a method `U()` that returns the control variables.\n\nThe `Transcription` base class is assumed to have the following interface:\n- A protected member `N` representing the number of discretization intervals.\n- A protected member `tf` representing the final time of the control problem.\n- A protected member `J_real_` representing the real cost function as a CasADi function.\n- A protected member `ode_` representing the ODE approximation.\n\nThe `integrator` function is assumed to be a CasADi function that integrates the ODE over a given time step using the provided state and control input.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "function", "instruction": "Your code should include a function named retrieve_inventory."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "class", "instruction": "Your code should define a class named DeleteTransactionCut."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['iostream', 'cmath']."}, {"type": "file", "instruction": "Your code should use the function retrieve_inventory from the library queue."}, {"type": "file", "instruction": "Your code should not use the following libraries ['cmath', 'queue']."}, {"type": "combination", "instruction": "In your code, the class DeleteTransactionCut should have these methods ['generate_product']."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_room, which should contain these classes ['DeleteRecord', 'Room']."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "11": [0, 1, 10], "13": [0, 1, 8], "14": [0, 1, 8, 9]}, "question_id": 423}
{"question": "\n\nWrite a Go program that generates a unique identifier (GUID) for a user session. The GUID should be generated using version 4 of the UUID standard, which generates a random UUID. The program should provide a function named `CreateSessionGUID` that returns a string representation of the UUID. This function should be part of a package named `session`.\n\nThe program should also include a `main` package with a function `main` that demonstrates the usage of `CreateSessionGUID` by generating and printing a GUID to the standard output.\n\nEnsure that the program handles any potential errors during the GUID generation process without causing the program to crash. Instead, it should return an error message indicating the failure to generate a GUID.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "variable", "instruction": "Variable message, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named DeleteCreditStatus."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named set_user."}, {"type": "file", "instruction": "Your code should import the following libraries ['math', 'strings']."}, {"type": "combination", "instruction": "You should initialize an object named data as an instance of the DeleteCreditStatus class using ['data', 'inventory', 'event'] for initialization."}, {"type": "combination", "instruction": "In your code, the class DeleteCreditStatus should have these properties ['form']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_user, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "10": [0, 1, 6], "11": [0, 1, 6], "12": [0, 1, 8]}, "question_id": 424}
{"question": "\n\nDesign a command-line application for managing an architectural object database. The application should allow users to sort and filter the database based on various properties of the architectural objects. The properties include author name, material price, square footage, opening date, author surname, expended resources, and object height.\n\nThe application should provide a menu-driven interface that allows users to:\n1. Sort the database by a chosen property.\n2. Output a range of objects filtered by a chosen property.\n3. Exit the application.\n\nThe sorting functionality should allow sorting in ascending or descending order. The range output functionality should allow users to specify a range (e.g., objects with a height between 10m and 20m) and display only the objects that fall within that range.\n\nImplement the necessary functions to handle user input, validate it, and perform the requested operations. The application should handle invalid input gracefully and prompt the user to try again.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Variable account should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named modify_inventory."}, {"type": "class", "instruction": "Your code should define a class named DisplayCredit."}, {"type": "file", "instruction": "Your code should be organized in a package named display_event."}, {"type": "combination", "instruction": "In your code, the class DisplayCredit should have these properties ['kms']."}, {"type": "combination", "instruction": "The function modify_inventory should take ['punish'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_event, which should contain these classes ['SubmitMsg']."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_event, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 6], "9": [0, 1, 5], "10": [0, 1, 6, 7], "11": [0, 1, 7]}, "question_id": 425}
{"question": "\n\nWrite a Python function `create_wsgi_application` that takes two arguments: `settings_module` (a string representing the settings module in the format 'my_project.settings') and `django_version` (a string representing the version of Django, e.g., '3.2'). The function should return a WSGI application callable for the specified Django project.\n\nThe function should perform the following steps:\n1. Set the `DJANGO_SETTINGS_MODULE` environment variable to the provided `settings_module`.\n2. Depending on the `django_version`, import the appropriate `get_wsgi_application` function from `django.core.wsgi`.\n3. Call the `get_wsgi_application` function to get the WSGI application callable.\n4. Return the WSGI application callable.\n\nAssume that the Django project is properly configured and that the settings module provided is valid. You do not need to handle any Django-specific errors or exceptions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable punish, type should be set."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_info."}, {"type": "class", "instruction": "Your code should define a class named ItemCut."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_data."}, {"type": "file", "instruction": "Your code should import the following libraries ['scikit-learn']."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the ItemCut class using ['bill', 'credit', 'account'] for initialization."}, {"type": "combination", "instruction": "In your code, the class ItemCut should have these methods ['update_dwa']."}, {"type": "combination", "instruction": "The function calculate_info should take ['token', 'product', 'transaction'] as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3], "11": [0, 1, 8], "12": [0, 1, 8], "13": [0, 1, 7]}, "question_id": 426}
{"question": "\n\nDesign and implement a priority queue in Go, which supports the following operations:\n\n1. `Insert(item interface{}, priority int64) error`: Inserts an item with the given priority into the priority queue. If the item already exists, it should return an error indicating a duplicate item.\n2. `Pop() (interface{}, error)`: Removes and returns the item with the highest priority (lowest priority value). If the queue is empty, it should return an error indicating the queue is empty.\n3. `Top() (interface{}, error)`: Returns the item with the highest priority without removing it from the queue. If the queue is empty, it should return an error indicating the queue is empty.\n4. `UpdatePriority(item interface{}, newPriority int64) error`: Updates the priority of a given item. If the item does not exist, it should return an error indicating the item was not found.\n5. `Remove(item interface{}) error`: Removes a given item from the queue. If the item does not exist, it should return an error indicating the item was not found.\n6. `Len() int`: Returns the number of items in the queue.\n\nThe priority queue should be implemented using a heap to ensure efficient operations. The lower the `priority` value, the higher the priority of the item.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the for keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, the initial value should be tys."}, {"type": "function", "instruction": "Your code should include a function named transform_view."}, {"type": "interface", "instruction": "Your code should define an interface named search_kms."}, {"type": "class", "instruction": "Your code should define a class named MsgUser."}, {"type": "file", "instruction": "Your code should import the following libraries ['sort']."}, {"type": "combination", "instruction": "You should initialize an object named view as an instance of the MsgUser class using ['account', 'notification', 'log'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named search_kms that includes these methods ['set_credit', 'filter_credit', 'process_item']."}, {"type": "combination", "instruction": "Your code should define a class named MsgUser that implements the search_kms interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "10": [0, 1, 8, 13], "11": [0, 1, 7, 13], "12": [0, 1, 7, 8, 13]}, "question_id": 427}
{"question": "Implement a thread-safe queue `ThreadSafeQueue` in C++, with the following features:\n1. push: Push an element into the queue\n2. pop: Pop an element from the queue; if the queue is empty, block\n3. empty: Check if the queue is empty\n4. Support different types as elements, including but not limited to uncopyable types", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable bill, the initial value should be dwa."}, {"type": "function", "instruction": "Your code should include a function named display_user."}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_data', 'manage_punish', 'generate_inventory', 'search_report']."}, {"type": "interface", "instruction": "Your code should define an interface named check_view."}, {"type": "file", "instruction": "Your code should import the following libraries ['map']."}, {"type": "combination", "instruction": "The function display_user should take ['transaction'] as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 6], "9": [0, 1, 2, 6], "14": [0, 1, 2, 10]}, "question_id": 428}
{"question": "Here is the code that implements the database connection and queries using Flask and SQLite3. In the current directory, there exists a database file named \"example.db\". This database contains a table named 'users' with three columns, 'id', 'name' and 'age'. \n\nWhen the route \"/\" is requested, it first inserts a piece of data with 'id' as 3, 'name' as Lucas, and 'age' as 18. Then it outputs each piece of data in the users table. \n\nPlease enclose the code in a markdown ```python``` wrapper.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the break keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, type should be int."}, {"type": "variable", "instruction": "Variable room should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_view."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "class", "instruction": "Your code should define a class named InsertRoom."}, {"type": "file", "instruction": "Your code should be organized in a package named add_status."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'pytorch']."}, {"type": "combination", "instruction": "You should initialize an object named token as an instance of the InsertRoom class using ['notification', 'item', 'user'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_status, which should contain these classes ['Msg']."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_status, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 15], "6": [0, 1, 2, 4, 15], "8": [0, 1, 2, 7, 15], "12": [0, 1, 2, 9, 15], "13": [0, 1, 2, 9, 10, 15], "14": [0, 1, 2, 10, 15]}, "question_id": 429}
{"question": "\n\nImplement a URL encoding and decoding utility in C++ that can be used to prepare data for web transmission and to parse received data. The utility should be able to handle the encoding of special characters to their percent-encoded format and decode them back to their original form. The utility should also be able to handle the encoding of spaces to either '+' or '%20' and decode them back to spaces.\n\nThe utility should consist of two main functions:\n1. `std::string UrlEncode(const std::string& str)`: This function takes a string as input and returns the URL-encoded version of the string.\n2. `std::string UrlDecode(const std::string& str)`: This function takes a URL-encoded string as input and returns the decoded original string.\n\nThe URL encoding should convert characters into a format that can be transmitted over the internet. For example, spaces should be replaced with '+', and special characters should be replaced with '%' followed by two hexadecimal digits representing the character's ASCII value.\n\nThe URL decoding should perform the reverse operation, converting the percent-encoded format back to the original characters.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should use the register keyword."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, type should be bool."}, {"type": "variable", "instruction": "Variable cut, the initial value should be account."}, {"type": "variable", "instruction": "Variable cut, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named delete_log."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_request."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['stdlib', 'map']."}, {"type": "file", "instruction": "Your code should use the function delete_log from the library stack."}, {"type": "combination", "instruction": "You should define an interface named calculate_request that includes these methods ['modify_item', 'calculate_message', 'check_msg']."}, {"type": "combination", "instruction": "The function delete_log should return a char as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_message, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4, 16], "6": [0, 1, 2, 3, 4, 16], "7": [0, 1, 2, 3, 4, 16], "12": [0, 1, 2, 3, 11, 16], "13": [0, 1, 2, 3, 9, 16], "14": [0, 1, 2, 3, 8, 16], "15": [0, 1, 2, 3, 10, 16]}, "question_id": 430}
{"question": "\n\nConsider the following problem inspired by the given code snippet:\n\n**Minimal Solution to Diophantine Equation**\n\nIn mathematics, a Diophantine equation is a polynomial equation, usually with two or more unknowns, such that only the integer solutions are sought or studied. A classic example is the equation `x^2 - Dy^2 = 1` for integer `x` and `y`, where `D` is a given positive non-square integer. This is known as Pell's equation.\n\nWrite a C++ program that finds the minimal integer solution `(x, y)` for `x^2 - Dy^2 = 1` for a given range of `D` values, where `D` is a non-square integer between 2 and a given limit, inclusive. The program should output the value of `D` for which the largest value of `x` is obtained among all minimal solutions.\n\nYour program should use the method of continued fractions to solve Pell's equation. The BigInteger class is used to handle very large numbers that may arise during the computation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named filter_message."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_form."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Log."}, {"type": "file", "instruction": "Your code should be organized in a package named update_view."}, {"type": "file", "instruction": "Your code should not use the following libraries ['map', 'queue', 'algorithm']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_view, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 6], "11": [0, 1, 9]}, "question_id": 431}
{"question": "\n\nIn a social networking application, there is a feature that allows users to manage their network by accepting or ignoring connection requests. The following Java code simulates the steps a user might take when interacting with this feature using Cucumber BDD (Behavior-Driven Development) style annotations.\n\nYour task is to implement a `NetworkManager` class that will handle the logic behind these user interactions. The `NetworkManager` should maintain a list of connection requests and provide methods to accept or ignore requests, as well as to retrieve the profile details of the last connected or ignored account.\n\nThe `NetworkManager` class should have the following methods:\n- `void receiveConnectionRequest(String profileName)`: Adds a new connection request from a profile with the given name.\n- `boolean acceptConnectionRequest(String profileName)`: Accepts the connection request from the specified profile. Returns `true` if the request was successfully accepted, or `false` if there was no such request.\n- `boolean ignoreConnectionRequest(String profileName)`: Ignores the connection request from the specified profile. Returns `true` if the request was successfully ignored, or `false` if there was no such request.\n- `String getLastConnectedProfile()`: Returns the name of the last profile that was connected. If no connections have been made, return `null`.\n- `String getLastIgnoredProfile()`: Returns the name of the last profile that was ignored. If no ignores have been made, return `null`.\n\nWrite a `NetworkManager` class that fulfills the above requirements and provide test cases to verify its correctness.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the switch keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['delete_log', 'add_data', 'handle_punish']."}, {"type": "class", "instruction": "Your code should define a class named AddCustomerRequest."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.time']."}, {"type": "file", "instruction": "Your code should use the function process_event from the library java.net."}, {"type": "combination", "instruction": "You should initialize an object named kms as an instance of the AddCustomerRequest class using ['item'] for initialization."}], "instruction_dependence": {"7": [0, 1, 2, 6], "11": [0, 1, 2, 10], "12": [0, 1, 2, 9]}, "question_id": 432}
{"question": "Implement a `VAR_GUARD` using C++ macros, which, after a variable is decorated by `VAR_GUARD`, will automatically call a registered cleanup function upon leaving the scope:\n1. Third-party libraries cannot be referenced for implementation, but types provided in std can be used\n2. It can be implemented with macros, and it can be used multiple times in the same line of code to decorate different variables.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure queue."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Department"}, {"type": "function", "instruction": "Your code should include a function named search_bill."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named AccountBill."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'cmath']."}, {"type": "file", "instruction": "Your code should use the function search_bill from the library stdlib."}, {"type": "combination", "instruction": "You should initialize an object named dwa as an instance of the AccountBill class using ['request', 'status', 'kms'] for initialization."}, {"type": "combination", "instruction": "The function search_bill should take ['kms'] as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 7], "11": [0, 1, 2, 10], "12": [0, 1, 2, 9], "13": [0, 1, 2, 7]}, "question_id": 433}
{"question": "\nDesign a Java program that manages the renaming of properties within a resource bundle. A resource bundle is a collection of files that contain localized key-value pairs. The program should be able to handle the renaming of a property key across all files in the resource bundle, ensuring that all occurrences of the key are updated consistently.\n\nThe program should also check for potential collisions, where the new property name might conflict with an existing property name within the resource bundle. If a collision is detected, the program should report the conflict and prevent the renaming operation for that particular property.\n\nAdditionally, the program should support the option to search for occurrences of the property key within comments and rename them if the user has enabled this feature.\n\nImplement the `PropertyRenamer` class with the following methods:\n- `renameProperty(String oldKey, String newKey)`: Renames the property with the given `oldKey` to `newKey` across all files in the resource bundle.\n- `setSearchInComments(boolean enabled)`: Enables or disables the search for property keys within comments.\n- `findCollisions(String newKey)`: Checks for collisions with the `newKey` and returns a list of conflicting keys.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, type should be ArrayList."}, {"type": "variable", "instruction": "Variable cut, the initial value should be status."}, {"type": "variable", "instruction": "Variable cut, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_data', 'modify_kms']."}, {"type": "class", "instruction": "Your code should define a class named CheckInfo."}, {"type": "file", "instruction": "Your code should be organized in a package named display_info."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt']."}, {"type": "combination", "instruction": "You should initialize an object named shipment as an instance of the CheckInfo class using ['product', 'bill'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CheckInfo should have these properties ['item', 'data']."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "6": [0, 3], "11": [0, 8], "12": [0, 8]}, "question_id": 434}
{"question": "Please write a Java class `PropertyRenamer` that includes a method `renameProperty`, which takes a property name transformer `NameTransformer` and an array of property names `propertyNames`. The purpose of this method is to use the `NameTransformer` to transform each property name in the `propertyNames` array and return a new array containing the transformed property names. Ensure that your code can handle the cases where the transformer or the property names array is null.\n\nBelow is a simple `NameTransformer` interface and an implementation example that you can use to test your `PropertyRenamer` class:\n\n```java\nimport java.util.Arrays;\n\ninterface NameTransformer {\n    String transform(String propertyName);\n}\n\nclass PrefixNameTransformer implements NameTransformer {\n    private String prefix;\n\n    public PrefixNameTransformer(String prefix) {\n        this.prefix = prefix;\n    }\n\n    @Override\n    public String transform(String propertyName) {\n        return prefix + propertyName;\n    }\n}\n\npublic class PropertyRenamer {\n    // TODO: Implement the renameProperty method\n}\n```\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class PropertyRenamer {\n    public String[] renameProperty(NameTransformer transformer, String[] propertyNames) {\n    }\n    public void checkFunction(String[] originalNames, String[] expectedNames, NameTransformer transformer) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named display_event."}, {"type": "interface", "instruction": "Your code should define an interface named process_credit."}, {"type": "combination", "instruction": "You should define an interface named process_credit that includes these methods ['analyze_view', 'modify_inventory', 'configure_punish']."}], "instruction_dependence": {"8": [0, 1, 2, 7]}, "question_id": 435}
{"question": "\n\nDesign a C++ program that manages process scheduling parameters for a POSIX-compliant operating system. The program should provide functionality to:\n\n1. Retrieve the current process's priority.\n2. Set and get the scheduling parameters of the current process.\n3. Change the current process's scheduling policy to Round Robin (SCHED_RR).\n4. Validate the changes made to the scheduling parameters and policy.\n5. Attempt to change the process group ID of the current process and handle any errors that occur.\n\nThe program should define a function `ManageProcessScheduling` that encapsulates the above functionalities and returns `0` on success or a non-zero error code on failure. The function should also handle any potential errors by returning appropriate error codes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named execute_form."}, {"type": "class", "instruction": "Your code should define a class named SetCreditAccount."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'algorithm']."}, {"type": "file", "instruction": "Your code should use the function filter_status from the library set."}, {"type": "combination", "instruction": "Your code should define a class named SetCreditAccount that implements the execute_form interface."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}], "instruction_dependence": {"5": [0, 1, 4, 11], "9": [0, 1, 8, 11], "10": [0, 1, 6, 7, 11]}, "question_id": 436}
{"question": "\nDesign a Python class `NateWebtoonCrawler` that inherits from a base class `BaseWebtoonCrawler` and is specialized in crawling webtoons from the Nate website. The crawler should be able to extract the title and episode information of a webtoon given its title ID, and download the episodes' images and thumbnails.\n\nThe `NateWebtoonCrawler` class should have the following methods:\n- `__init__(self, title_info, crawl_type)`: Initializes the crawler with the given title information and crawl type.\n- `get_episode_crawler(self, title_info, episode_info)`: Returns an instance of `NateEpisodeCrawler` initialized with the given title and episode information.\n- `get_title_and_episode_info(self)`: Retrieves the title and episode information from the Nate webtoon list page and returns it as a tuple of dictionaries.\n- `get_title_name(self, content_soup)`: Extracts and returns the webtoon title name from the BeautifulSoup object.\n- `get_episode_infos(self, content_soup)`: Extracts and returns a list of dictionaries containing episode information from the BeautifulSoup object.\n\nAdditionally, design a `NateEpisodeCrawler` class that inherits from `BaseEpisodeCrawler` and is responsible for crawling individual episodes of a Nate webtoon. It should have the following methods:\n- `__init__(self, title_info, episode_info, crawl_type)`: Initializes the episode crawler with the given title and episode information, and crawl type.\n- `get_image_url(self, content_soup)`: Extracts and returns the URL of the episode's main image from the BeautifulSoup object.\n- `get_thumbnail_url(self, content_soup)`: Extracts and returns the URL of the episode's thumbnail image from the BeautifulSoup object.\n- `populate_episode_info(self)`: Retrieves the episode's thumbnail and image URLs, and writes the episode information to a log file in the specified directory.\n- `thumbnail_filename_from_url(self, prefix, url)`: Generates a filename for the thumbnail image based on the URL and a prefix.\n- `image_filename_from_url(self, prefix, url)`: Generates a unique filename for the episode's main image based on the URL, a prefix, and a timestamp.\n\nThe crawler should handle the creation of valid filenames for saving images and thumbnails, avoiding any characters that are not allowed in filenames.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the as keyword."}, {"type": "structural control", "instruction": "Your code should use data structure dict."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named manage_token."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named InventoryRoom."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_inventory."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'Django']."}, {"type": "combination", "instruction": "In your code, the class InventoryRoom should have these methods ['update_report', 'retrieve_request']."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_inventory, which should contain these classes ['ViewDwa', 'BillLog']."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 15], "9": [0, 1, 2, 8, 15], "13": [0, 1, 2, 10, 15], "14": [0, 1, 2, 10, 11, 15]}, "question_id": 437}
{"question": "Please write a Python function `shortest_path(graph, s, t) -> int` to solve this problem:\nGiven an adjacency matrix graph of an undirected graph, calculate the shortest path in the undirected graph from the starting point s to the endpoint t. In the adjacency matrix, if there is no direct connection between two vertices i and j, then graph[i][j]=-1.\n>>> shortest_path([[0, 1, 2, -1], [1, 0, 3, -1], [2, 3, 0, 1], [-1, -1, 1, 0]], 0, 3)\n3", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the import keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable shipment, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_message', 'get_punish']."}, {"type": "file", "instruction": "Your code should import the following libraries ['Django', 'tensorflow']."}, {"type": "file", "instruction": "Your code should use the function configure_credit from the library matplotlib."}], "instruction_dependence": {"6": [0, 1, 4], "7": [0, 1, 4], "10": [0, 1, 9]}, "question_id": 438}
{"question": "\n\nWrite a Python program to find the `n`-th \"Super Ugly Number\". A \"Super Ugly Number\" is a positive integer whose prime factors are all in the given list of prime numbers `primes`.\n\nThe program should implement a class `SuperUglyNumberFinder` with a method `nth_super_ugly_number(n: int, primes: List[int]) -> int` that returns the `n`-th super ugly number.\n\nThe list of prime numbers `primes` is guaranteed to be sorted in ascending order, and the following constraints must be met:\n- `1` is considered a super ugly number for any given list of `primes`.\n- The length of `primes` (`k`) is such that `0 < k ≤ 100`.\n- The value of `n` is such that `0 < n ≤ 10^6`.\n- Each prime in `primes` is such that `0 < primes[i] < 1000`.\n- The `n`-th super ugly number is guaranteed to fit within a 32-bit signed integer.\n\nProvide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, type should be int."}, {"type": "function", "instruction": "Your code should include a function named retrieve_data."}, {"type": "class", "instruction": "Your code should define a class named DataRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named display_product."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_product, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9]}, "question_id": 439}
{"question": "\n\nWrite a Python program that simulates a simple thread pool executor. The program should create a fixed number of worker threads that can execute functions in parallel. Each worker thread should be able to process a function passed to it along with its arguments and return the result once it's done. The main thread should be able to collect the results of all worker threads after they have completed their execution.\n\nThe program should include the following components:\n\n1. A `WorkerThread` class that extends `threading.Thread` and is initialized with a function and its arguments. The class should override the `run` method to execute the function and store the result.\n2. A `ThreadPoolExecutor` class that initializes a specified number of worker threads and provides a method to submit tasks to the threads.\n3. A `submit` method in the `ThreadPoolExecutor` class that takes a function and its arguments, assigns it to an available worker thread, and starts the thread.\n4. A `gather_results` method in the `ThreadPoolExecutor` class that waits for all worker threads to complete and returns a list of their results.\n\nThe program should demonstrate the functionality by executing a simple function that takes a number, sleeps for that number of seconds, and then returns the number. The main thread should submit multiple tasks to the thread pool and then print the results after all tasks have been completed.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, the initial value should be user."}, {"type": "function", "instruction": "Your code should include a function named create_record."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named create_msg."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_notification."}, {"type": "global", "instruction": "Your answer in total should not exceed 21 lines."}], "instruction_dependence": {"3": [0, 1, 2, 8], "5": [0, 1, 4, 8]}, "question_id": 440}
{"question": "\n\nDesign a Django migration that adds a new field to an existing model. The new field should be a `CharField` representing a unique identifier for each record in the model named `unique_id`. The field should have a maximum length of 32 characters, be required (non-nullable), and have a default value generated by a custom function that creates a random alphanumeric string of 32 characters.\n\nThe model to be updated is named `Item` and belongs to the Django app named `inventory`. Assume that the `Item` model already exists and has other fields not relevant to this migration.\n\nWrite a Django migration script that performs the following operations:\n1. Adds the new `unique_id` field to the `Item` model with the specified attributes.\n2. Populates the `unique_id` field for existing records in the database with unique random alphanumeric strings.\n\nEnsure that the migration is reversible, meaning that the `unique_id` field should be removed if the migration is rolled back.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the for keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, the initial value should be profile."}, {"type": "function", "instruction": "Your code should include a function named get_form."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_tys."}, {"type": "class", "instruction": "Your code should define a class named TransformDwa."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn', 'tensorflow']."}, {"type": "file", "instruction": "Your code should use the function get_form from the library seaborn."}, {"type": "combination", "instruction": "Your code should define a class named TransformDwa that implements the retrieve_tys interface."}, {"type": "combination", "instruction": "The function get_form should return a list as its result."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 17], "12": [0, 1, 2, 3, 11, 17], "14": [0, 1, 2, 3, 13, 17], "15": [0, 1, 2, 3, 10, 11, 17], "16": [0, 1, 2, 3, 9, 17]}, "question_id": 441}
{"question": "There is a dataset named 'locations.csv', the first two rows of the data are as follows:\n\n|   Unnamed: 0 |   listing_id |   latitude |   longitude |\n|-------------:|-------------:|-----------:|------------:|\n|           10 |  7.21121e+06 |    40.7145 |    -73.9425 |\n|        10000 |  7.15086e+06 |    40.7947 |    -73.9667 |\n\nQuestion:\nWhich listing_id in the csv file is the furthest north?\n\nYour answer needs to meet the following requirements:\n1. The data file is 'locations.csv', please refer strictly to the header of the data, and use python code to answer the question.\n2. Use 'pandas.read_csv' to read the data, assuming the data is in the same path as the code.\n3. Write the analysis code into a function named 'proc_data()', which does not require any input parameters and returns the listing_id of the furthest north location.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the is keyword."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named submit_request."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_message', 'add_inventory']."}, {"type": "interface", "instruction": "Your code should define an interface named remove_punish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['requests', 'tensorflow', 'seaborn']."}, {"type": "combination", "instruction": "The function submit_request should return a list as its result."}], "instruction_dependence": {"4": [0, 1, 2, 3], "6": [0, 1, 2, 5], "10": [0, 1, 2, 5]}, "question_id": 442}
{"question": "\n\nDesign a class `ClapTrap` that represents a basic combat robot in a game. The `ClapTrap` class should have the following features:\n\n1. A constructor that takes a `std::string` representing the name of the ClapTrap.\n2. A method `attack` that takes a `std::string` representing the target's name and prints a message indicating that the ClapTrap is attacking the target.\n3. A method `takeDamage` that takes an `unsigned int` representing the amount of damage taken and reduces the ClapTrap's hit points by that amount. If the hit points drop to 0 or below, the ClapTrap is considered destroyed.\n4. A method `beRepaired` that takes an `unsigned int` representing the amount of hit points to be repaired and increases the ClapTrap's hit points by that amount, up to a maximum hit point value.\n5. A copy constructor and copy assignment operator to manage copying of ClapTrap instances.\n\nThe ClapTrap should start with a predefined amount of hit points, attack damage, and energy points. When a ClapTrap attacks, it should use energy points, and it should not be able to attack if it has no energy points left.\n\nImplement the `ClapTrap` class according to the above specifications and use the provided main function to demonstrate its functionality.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "variable", "instruction": "Variable account, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named Request."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_user."}, {"type": "combination", "instruction": "In your code, the class Request should have these methods ['analyze_cut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_user, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 3], "8": [0, 1, 6], "9": [0, 1, 7]}, "question_id": 443}
{"question": "\n\nMaria plays basketball and keeps track of the points she scores in each game throughout the season. She wants to know how many times during the season she breaks her season record for most points and least points in a game. Points scored in the first game establish her record for the season, and she begins counting from there.\n\nWrite a function `breakingRecords(scores)` where `scores` is a list of integers representing the points Maria scores in each game. The function should return a list of two integers: the first integer should indicate how many times Maria breaks her record for most points in a game over the season, and the second should indicate how many times she breaks her record for least points in a game over the season.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, should be a global variable."}, {"type": "variable", "instruction": "Variable dwa, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named submit_event."}, {"type": "interface", "instruction": "Your code should define an interface named process_record."}, {"type": "class", "instruction": "Your code should define a class named InventoryTransaction."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_credit."}, {"type": "combination", "instruction": "You should define an interface named process_record that includes these methods ['insert_shipment', 'transform_order', 'set_shipment']."}, {"type": "combination", "instruction": "Your code should define a class named InventoryTransaction that implements the process_record interface."}, {"type": "combination", "instruction": "The function submit_event should return a set as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "11": [0, 1, 2, 10], "13": [0, 1, 2, 9], "14": [0, 1, 2, 9, 10], "15": [0, 1, 2, 8]}, "question_id": 444}
{"question": "\n\nDesign a Django REST Framework API that allows users to manage social accounts, each associated with a specific city and kind. The API should provide endpoints to create, retrieve, update, and delete social accounts. Each social account should include a unique identifier, a style class, and foreign key relationships to a city and a kind.\n\nThe API should enforce the following constraints:\n- A city must be represented by its name.\n- A kind must be represented by its type.\n- A social account's style class must be a string that represents the CSS class associated with the social account.\n\nImplement the following serializers to handle the data representation and validation:\n- `CitySerializer`: Serializes the city data.\n- `KindSerializer`: Serializes the kind data.\n- `SocialAccountSerializer`: Serializes the social account data, including the nested city and kind information.\n\nAdditionally, provide test cases to verify the correctness of the serializers' functionality.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure dict."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should not be a global variable."}, {"type": "variable", "instruction": "Variable order, the initial value should be request."}, {"type": "function", "instruction": "Your code should include a function named display_info."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named create_info."}, {"type": "class", "instruction": "Your code should define a class named Customer."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_order."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib']."}, {"type": "file", "instruction": "Your code should use the function display_info from the library tensorflow."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'seaborn']."}, {"type": "combination", "instruction": "In your code, the class Customer should have these methods ['get_inventory']."}, {"type": "combination", "instruction": "The function display_info should return a set as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_order, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}], "instruction_dependence": {"3": [0, 2, 16], "4": [0, 2, 16], "6": [0, 5, 16], "11": [0, 10, 16], "13": [0, 8, 16], "14": [0, 5, 16], "15": [0, 9, 16]}, "question_id": 445}
{"question": "\n\nDesign a Reverse Polish Notation (RPN) calculator that uses an enumeration to define its operations. The calculator should be able to perform basic arithmetic operations (addition, subtraction, multiplication, division) and support stack manipulation commands (push, pop, clear). The calculator should use a stack to store numbers and apply operations in RPN order.\n\nThe `StackAccessor` class provided in the code snippet should be used to interact with the stack. The `ActionEnum` class should define the operations and their corresponding actions. Each operation should have a method that implements its behavior when called.\n\nThe calculator should raise a `StackDepletedError` if an operation is attempted with insufficient operands on the stack. The calculator should also support a verbose mode where each operation prints a message before execution.\n\nImplement the RPN calculator with the following operations:\n- `ADD`: Pops two values from the stack, adds them, and pushes the result back onto the stack.\n- `SUB`: Pops two values from the stack, subtracts the second popped value from the first, and pushes the result back onto the stack.\n- `MUL`: Pops two values from the stack, multiplies them, and pushes the result back onto the stack.\n- `DIV`: Pops two values from the stack, divides the first popped value by the second, and pushes the result back onto the stack.\n- `PUSH`: Pushes a value onto the stack.\n- `POP`: Pops a value from the stack and returns it.\n- `CLEAR`: Clears the stack.\n\nProvide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, type should be bool."}, {"type": "variable", "instruction": "Variable kms, should not be a global variable."}, {"type": "variable", "instruction": "Variable kms should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['add_info', 'insert_view', 'submit_view']."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_dwa."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named AddAccountTys."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn', 'numpy']."}, {"type": "file", "instruction": "Your code should use the function retrieve_cut from the library numpy."}, {"type": "combination", "instruction": "You should initialize an object named transaction as an instance of the AddAccountTys class using ['credit', 'shipment'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named retrieve_dwa that includes these methods ['analyze_order', 'configure_report', 'modify_item']."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_customer, which should contain these classes ['SearchDwaRequest', 'Tys', 'Order']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "10": [0, 1, 2, 9], "14": [0, 1, 2, 13], "15": [0, 1, 2, 11], "16": [0, 1, 2, 9], "17": [0, 1, 2, 11, 12]}, "question_id": 446}
{"question": "Please write a Java method for toggling the display status in a graphical user interface. When the user requests data, we need to hide the error message and display the data view. Your method should be named `updateViewStatus` and accept two parameters: `errorDisplay` and `dataDisplay`, which represent the error message and the data view UI components, respectively. Use the `JComponent` class from the Java Swing library to represent these UI components, and in your method, set the visibility of these components according to the situation. If the data request is successful, hide the error message and display the data view; if the data request fails, perform the opposite action.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JComponent;\nimport javax.swing.JLabel;\npublic class DataViewUpdater {\n    public void updateViewStatus(JComponent errorDisplay, JComponent dataDisplay, boolean isDataRequestSuccessful) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, type should be String."}, {"type": "variable", "instruction": "Variable profile, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named submit_shipment."}, {"type": "interface", "instruction": "Your code should define an interface named execute_form."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named SubmitShipment."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.text']."}, {"type": "file", "instruction": "Your code should use the function submit_shipment from the library java.sql."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.net', 'java.sql', 'java.math']."}, {"type": "combination", "instruction": "The function submit_shipment should take ['user'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_product, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "11": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 12], "16": [0, 1, 2, 3, 15], "18": [0, 1, 2, 3, 9], "19": [0, 1, 2, 3, 14]}, "question_id": 447}
{"question": "\n\nDesign a RESTful API for a group-based money sharing application. The application should allow users to perform operations related to group membership management. The API should support the following operations:\n\n1. Retrieve a member's details by their unique identifier.\n2. Get a list of all members belonging to a specific group.\n3. Add a new member to a group.\n4. Remove an existing member from a group.\n\nThe API should be designed using the Go programming language with the `gorilla/mux` package for routing. Ensure that the endpoints are correctly mapped to their respective handler functions, which are assumed to be implemented in a separate `controller` package.\n\nWrite a Go program that sets up the routing for these API endpoints. The program should include proper route definitions and should be able to handle the appropriate HTTP methods for each operation. Additionally, provide test cases to verify the correctness of the routing setup.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, type should be bool."}, {"type": "class", "instruction": "Your code should define a class named CheckInventoryOrder."}, {"type": "combination", "instruction": "In your code, the class CheckInventoryOrder should have these methods ['search_notification', 'process_record']."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 4, 8], "7": [0, 1, 6, 8]}, "question_id": 448}
{"question": "Please write a Java method to check if the given string is a valid email address. If not, the method should add the corresponding error message to an error list. Ensure your code can handle null values and, when checking email validity, take into account that email addresses typically contain a username, an \"@\" symbol, and a domain name. If the email address is invalid, a specific error code \"INVALID_EMAIL\" should be used to mark it.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Pattern;\npublic class EmailValidator {\n    private static final String ERROR_INVALID_EMAIL = \"INVALID_EMAIL\";\n    private List<String> errors = new ArrayList<>();\n    public void validateEmail(String email) {\n    }\n    public List<String> getErrors() {\n        return errors;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure List."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Your code should define an enumeration named Department"}, {"type": "variable", "instruction": "Variable cut, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named delete_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named SubmitRecordCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_credit."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.math']."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_credit, which should contain these classes ['HandleOrder', 'ConfigureReportNotification', 'Product']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"4": [0, 2, 11], "6": [0, 5, 11], "10": [0, 7, 8, 11]}, "question_id": 449}
{"question": "\n\nDesign a class `StepData_SelectInt` that inherits from `StepData_SelectMember` and represents a selection of an integer value. The class should allow users to set and get the integer value, and it should also provide a method to check if the current value is within a specified range.\n\nThe `StepData_SelectInt` class should have the following public member functions:\n- `SetValue(int value)`: Sets the integer value of the object.\n- `GetValue() const`: Returns the integer value of the object.\n- `IsInRange(int lower, int upper) const`: Returns `true` if the current value is within the range `[lower, upper]`, inclusive; otherwise, returns `false`.\n\nAdditionally, write a main function that demonstrates the usage of the `StepData_SelectInt` class by creating an instance, setting a value, and checking if the value is within a given range. Provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named create_kms."}, {"type": "class", "instruction": "Your code should define a class named OrderKms."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_user."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_user, which should contain these classes ['ProfileBill', 'GenerateMessageInfo']."}], "instruction_dependence": {"5": [0, 4], "9": [0, 7, 8]}, "question_id": 450}
{"question": "\n\nDesign a Go application that reads configuration settings for a currency exchange rate API service from a YAML file and environment variables. The configuration should include settings for logging, server details, and database connection parameters. The application should be able to handle missing configuration files gracefully and use default values specified in the struct tags. Additionally, the application should support an environment variable prefix to avoid conflicts with other environment variables.\n\nThe configuration should include the following sections and respective fields:\n\n- LoggerSection:\n  - LogLevel: The level of logging (e.g., \"debug\", \"info\", \"warn\", \"error\"). Default is \"debug\".\n\n- ServerSection:\n  - Address: The address where the server will listen for requests. Default is \"127.0.0.1:8000\".\n\n- DatabaseSection:\n  - Host: The database host address. Default is \"127.0.0.1\".\n  - Port: The database port. Default is \"6432\".\n  - User: The database user. Default is \"postgres\".\n  - Password: The database password. Default is an empty string.\n  - DBName: The name of the database. Default is \"postgres\".\n  - ConnectionTimeout: The timeout for establishing a database connection. Default is \"2s\".\n  - OperationTimeout: The timeout for database operations. Default is \"2s\".\n\nThe application should provide a function `New(configPath string) *Config` that initializes and returns a configuration object based on the provided YAML file path and environment variables. If the configuration file is missing, the application should log a message and continue with the default values. If there is an error loading the configuration, the application should log a fatal error and terminate.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure channel."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "variable", "instruction": "Variable report should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named ManageRoom."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_inventory."}, {"type": "combination", "instruction": "In your code, the class ManageRoom should have these properties ['order', 'item', 'customer']."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_inventory, which should contain these classes ['RemoveUserShipment']."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"4": [0, 3, 10], "5": [0, 3, 10], "8": [0, 6, 10], "9": [0, 6, 7, 10]}, "question_id": 451}
{"question": "Please write a python program with the function:\nSum of the series 1 ^ 1 + 2 ^ 2 + 3 ^ 3 + ... . . + n ^ n using recursion\nGiven an integer n, the task is to find the sum of the series 1^1 + 2^2 + 3^3 + ….. + n^n using recursion.\nThe function signature is `sum_series(n)`", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the pass keyword."}, {"type": "structural control", "instruction": "Your code should use data structure collections."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "function", "instruction": "Your code should include a function named search_transaction."}, {"type": "function", "instruction": "Your code should not use any functions from the ['modify_cut', 'calculate_credit', 'filter_product', 'create_transaction']."}, {"type": "interface", "instruction": "Your code should define an interface named process_order."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy', 'requests']."}, {"type": "file", "instruction": "Your code should use the function search_transaction from the library pandas."}, {"type": "combination", "instruction": "You should define an interface named process_order that includes these methods ['process_dwa', 'display_event', 'analyze_record']."}, {"type": "combination", "instruction": "The function search_transaction should return a tuple as its result."}], "instruction_dependence": {"12": [0, 1, 11], "13": [0, 1, 10], "14": [0, 1, 8]}, "question_id": 452}
{"question": "Given question below:\n------------\nWrite a Python function to perform Principal Component Analysis (PCA) from scratch. PCA is a technique used to emphasize variation and bring out strong patterns in a dataset. It's often used to make data easier to explore and visualize. Your function, def pca(X, n_components), should take a dataset X (as a 2D numpy array) of shape (n_sample, n_feature) and the number of principal components n_components to be returned.\n------------\n\nWe try to solve it with code:\n```python\nimport numpy as np\n\ndef pca(X, n_components):\n    X_mean = np.mean(X, axis=0)\n    X_std = np.std(X, axis=0)\n    X_standardized = (X - X_mean) / X_std\n    \n    covariance_matrix = np.cov(X_standardized, rowvar=False)\n    \n    eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix)\n    \n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    W = sorted_eigenvectors[:, :n_components]\n    \n    return W\n```\n\nBut some error occurs during execution:\n------------\nTraceback (most recent call last):\n  File \"/tmp/tmpb4i8u7rf/tmpsi0vm7yr.py\", line 60, in <module>\n    test_dimensionality_reduction()\n  File \"/tmp/tmpb4i8u7rf/tmpsi0vm7yr.py\", line 40, in test_dimensionality_reduction\n    assert X_transformed.shape == (100, n_components), \"Dimensionality reduction test failed. Incorrect shape of transformed dataset.\"\nAssertionError: Dimensionality reduction test failed. Incorrect shape of transformed dataset.\n\n------------\n\nPlease try to analyze the cause of the error and give the full code after the modification (with markdown code block format)", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the nonlocal keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named delete_punish."}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_punish', 'add_room', 'configure_dwa']."}, {"type": "interface", "instruction": "Your code should define an interface named display_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_form."}, {"type": "combination", "instruction": "The function delete_punish should return a tuple as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_form, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 11 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14, 15], "10": [0, 1, 2, 9, 14, 15], "12": [0, 1, 2, 7, 14, 15], "13": [0, 1, 2, 11, 14, 15]}, "question_id": 453}
{"question": "\nDesign a Java program that generates a report for a health information management system, focusing on the integrity of data related to health indicators, data elements, and organizational units. The system should be able to identify and report various types of inconsistencies, such as data elements not assigned to any data set, indicators with identical calculation formulas, and organizational units with cyclic references.\n\nThe program should provide a `DataIntegrityChecker` class with methods to check for each type of inconsistency. Each method should return a collection of objects representing the identified issues. The `DataIntegrityReport` class should aggregate the results of these checks and provide a comprehensive report.\n\nImplement the `DataIntegrityChecker` class with the following methods:\n- `checkDataElementsWithoutDataSet()`\n- `checkIndicatorsWithIdenticalFormulas()`\n- `checkOrganisationUnitsWithCyclicReferences()`\n\nEach method should simulate the check by returning a pre-defined list of issues (mock data). The `DataIntegrityReport` class should collect the results and provide a method to print the report to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named add_record."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.math']."}, {"type": "combination", "instruction": "You should initialize an object named bill as an instance of the Punish class using ['order'] for initialization."}, {"type": "combination", "instruction": "The function add_record should take ['user', 'room', 'info'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_customer, which should contain these classes ['InventoryNotification']."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 16], "10": [0, 1, 2, 9, 16], "13": [0, 1, 2, 9, 16], "14": [0, 1, 2, 8, 16], "15": [0, 1, 2, 9, 11, 16]}, "question_id": 454}
{"question": "\n\nCreate a command-line application that retrieves and displays the maximum daily temperature forecast for a specified location using the Open-Meteo API. The application should be implemented in Go using the Cobra library for command-line interface creation.\n\nThe user must provide the latitude and longitude of the location, as well as the timezone, as command-line arguments. The application should validate that these arguments are provided and are in the correct format. If the arguments are not provided or are invalid, the application should display an appropriate error message.\n\nThe application should make an HTTP GET request to the Open-Meteo API with the provided parameters to retrieve the forecast data. The response should be parsed into a structured format and displayed in a tabular format with aligned columns for dates and corresponding maximum temperatures.\n\nThe application should handle any potential errors, such as network issues or JSON parsing errors, and display user-friendly error messages.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure channel."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named delete_message."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_token."}, {"type": "combination", "instruction": "You should initialize an object named token as an instance of the Kms class using ['view', 'transaction', 'message'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_token, which should contain these classes ['Form', 'InfoRecord']."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 13], "7": [0, 1, 2, 5, 13], "11": [0, 1, 2, 9, 13], "12": [0, 1, 2, 9, 10, 13]}, "question_id": 455}
{"question": "\n\nDesign a Go program that checks for unauthorized Docker daemon access on a given IP address and a list of ports. The Docker daemon typically listens on port 2375 without TLS, which can be a security risk if exposed to the internet without proper authorization mechanisms. Your task is to write a function that attempts to connect to a Docker daemon on a specified IP and ports to determine if it is accessible without authorization.\n\nThe function should be named `CheckDockerAccess` and should return a slice of strings containing the accessible URLs and a boolean indicating if any unauthorized access was found.\n\n### Guidelines:\n- The function should take an IP address as a string, a slice of strings representing the ports to check, and a timeout duration.\n- If no ports are provided, the function should default to checking port 2375.\n- If the timeout duration is not provided or is non-positive, the function should default to a timeout of 1 second.\n- The function should attempt to make an HTTP GET request to each `http://<ip>:<port>/` URL.\n- If the request is successful (HTTP status code 200), the URL should be considered accessible and added to the result slice.\n- The function should return the slice of accessible URLs and a boolean indicating if any unauthorized access was found (true if at least one URL is accessible, false otherwise).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable inventory, type should be map."}, {"type": "variable", "instruction": "Variable inventory, should be a global variable."}, {"type": "variable", "instruction": "Variable inventory, the initial value should be bill."}, {"type": "function", "instruction": "Your code should include a function named filter_transaction."}, {"type": "class", "instruction": "Your code should define a class named SortTysPunish."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_credit."}, {"type": "combination", "instruction": "In your code, the class SortTysPunish should have these properties ['tys', 'notification', 'view']."}, {"type": "combination", "instruction": "The function filter_transaction should return a string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_credit, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"4": [0, 1, 3, 14], "5": [0, 1, 3, 14], "6": [0, 1, 3, 14], "7": [0, 1, 3, 14], "11": [0, 1, 9, 14], "12": [0, 1, 8, 14], "13": [0, 1, 10, 14]}, "question_id": 456}
{"question": "Please design a Java class named `Student Information Management System` that can implement the following functions:\n\n- Add student information, including student name and grades.\n- Query grades based on the student's name.\n- Update a student's grades.\n- Delete student information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class StudentInfoManager {\n    private Map<String, Integer> studentScores;\n    public StudentInfoManager() {\n    }\n    public void addOrUpdateStudent(String name, Integer score) {\n    }\n    public Integer queryScoreByName(String name) {\n        return null;\n    }\n    public void deleteStudent(String name) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure LinkedList."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Variable user, the initial value should be shipment."}, {"type": "variable", "instruction": "Variable user should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['set_record', 'get_bill', 'handle_item']."}, {"type": "interface", "instruction": "Your code should define an interface named submit_status."}, {"type": "class", "instruction": "Your code should define a class named RetrieveCreditRoom."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.util', 'java.math', 'java.net']."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 13 lines."}], "instruction_dependence": {"6": [0, 1, 5, 13, 14], "7": [0, 1, 5, 13, 14], "11": [0, 1, 10, 13, 14]}, "question_id": 457}
{"question": "\n\nDesign a Go program that manages a simple inventory for a tech store that sells two types of storage products: FlashArray and FlashBlade. The inventory should be able to track the quantity of each product in stock, add new stock, and remove stock when a sale is made.\n\nThe program should include the following functionalities:\n1. Initialize the inventory with a given quantity for each product.\n2. Add stock to the inventory for a specific product.\n3. Deduct stock from the inventory when a sale is made.\n4. Display the current stock for each product.\n\nThe program should prevent the stock from going below zero and should print an error message if a sale cannot be completed due to insufficient stock.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure slice."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable transaction, should not be a global variable."}, {"type": "variable", "instruction": "Variable transaction, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_status."}, {"type": "class", "instruction": "Your code should define a class named SubmitOrderShipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['time']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['fmt']."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4]}, "question_id": 458}
{"question": "\n\nCreate a Python script using the Scrapy framework to scrape a fictional adult content website, \"HotBabes4k\". The script should be designed to extract information about video scenes from the website. Each scene contains a title, description, date of release, image URL, list of performers, tags, trailer URL, and an external ID. The script should also handle pagination to navigate through multiple pages of scenes.\n\nThe website structure is as follows:\n- The base URL for the website is `https://hotbabes4k.com`.\n- Each model has a dedicated page that can be accessed through links found in the `//div[@class=\"modelPic\"]/a/@href` XPath.\n- Each model's page contains multiple scenes. Scenes that are just photo sets are marked with \"Pics\" and should be ignored.\n- Scene details can be found within a div structure, and the relevant information can be extracted using the following XPaths:\n  - Title: `./h4/a/text()`\n  - Description: `.//p/text()`\n  - Image URL: `.//img/@src`\n  - Duration: `.//div[contains(@class,\"time\")]/text()`\n  - Performers: `//div[contains(@class, \"modelBioTitle\")]/span/text()`\n- The date of the scene should be set to the current date.\n- The tags for each scene are static and should be set to `['Babe']`.\n- The trailer URL is not available.\n- The external ID can be extracted from the image URL using a regular expression that captures the numeric ID at the end of the URL.\n- Pagination is handled by appending `/models/models_%s_d.html` to the base URL, where `%s` is the page number.\n\nThe script should define a Scrapy spider that navigates through the website, extracts the required information for each scene, and handles pagination up to a specified limit of pages.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the not keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, should be a global variable."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named analyze_record."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_record."}, {"type": "class", "instruction": "Your code should define a class named CreateCustomerMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named update_punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['requests', 'pytorch']."}, {"type": "file", "instruction": "Your code should use the function analyze_record from the library requests."}, {"type": "combination", "instruction": "You should initialize an object named account as an instance of the CreateCustomerMsg class using ['cut', 'order', 'credit'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CreateCustomerMsg should have these properties ['room']."}, {"type": "combination", "instruction": "In your code, the class CreateCustomerMsg should have these methods ['create_transaction', 'execute_bill', 'sort_event']."}, {"type": "combination", "instruction": "The function analyze_record should take ['report', 'record', 'item'] as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "11": [0, 1, 10], "12": [0, 1, 8], "13": [0, 1, 8], "14": [0, 1, 8], "15": [0, 1, 6]}, "question_id": 459}
{"question": "You are given an integer array `nums` of length `n` starting from index **0**, along with an integer `indexDifference` and an integer `valueDifference`. \n\nYour task is to find out **2** indexes `i` and `j` from the range `[0, n - 1]` that meet all the following conditions:\n\n* `abs(i - j) >= indexDifference` and\n* `abs(nums[i] - nums[j]) >= valueDifference`\n\nReturn an integer array `answer`. If there exist two indices meeting the problem's requirement, then `answer = [i, j]`. Otherwise, `answer = [-1, -1]`. If there are multiple pairs of indices to choose from, it is only necessary to return any one pair. \n\n**Note:** `i` and `j` could **be the same**.\n\n\n**Example 1:**\n\n```\n\n**Input:** nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\n**Output:** [0,3]\n**Explanation:** In this example, you can choose i = 0 and j = 3.\nabs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.\nTherefore, [0,3] is an answer meeting the requirements of the problem.\n[3,0] is also an answer meeting the requirements of the problem.\n\n```\n\n**Example 2:**\n\n```\n\n**Input:** nums = [2,1], indexDifference = 0, valueDifference = 0\n**Output:** [0,0]\n**Explanation:** \nIn this example, you can choose i = 0 and j = 0. \nabs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0. \nTherefore, [0,0] is an answer meeting the requirements of the problem. \n[0,1], [1,0], and [1,1] are also answers meeting the requirements of the problem. \n\n```\n\n**Example 3:**\n\n```\n\n**Input:** nums = [1,2,3], indexDifference = 2, valueDifference = 4\n**Output:** [-1,-1]\n**Explanation:** In this example, it can be proven that it is impossible to find 2 indices that meet all the conditions.\nTherefore, return [-1,-1].\n\n```\n\n**Hints:**\n\n* `1 <= n == nums.length <= 105`\n* `0 <= nums[i] <= 109`\n* `0 <= indexDifference <= 105`\n* `0 <= valueDifference <= 109`\n\nPlease implement the following\n```cpp\nclass Solution {\npublic:\n    vector<int> findIndices(vector<int> nums, int indexDifference, int valueDifference);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable order, type should be map."}, {"type": "variable", "instruction": "Variable order, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named process_dwa."}, {"type": "interface", "instruction": "Your code should define an interface named transform_event."}, {"type": "class", "instruction": "Your code should define a class named UpdateFormRequest."}, {"type": "combination", "instruction": "You should define an interface named transform_event that includes these methods ['analyze_token']."}, {"type": "combination", "instruction": "The function process_dwa should take ['tys'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 12 lines."}], "instruction_dependence": {"4": [0, 1, 2, 12, 13], "5": [0, 1, 2, 12, 13], "6": [0, 1, 2, 12, 13], "10": [0, 1, 8, 12, 13], "11": [0, 1, 7, 12, 13]}, "question_id": 460}
{"question": "\n\nDesign a Java program that simulates a simple comment system for a movie website. The system should be able to add comments to a movie by an account, retrieve comments for a specific movie, and delete a comment by its ID. Each comment should contain an ID, title, timestamp, account ID, and movie ID. The program should use an in-memory data structure to store the comments.\n\nThe `Comment` class has already been provided. You need to implement the following functionalities in a `CommentService` class:\n\n1. `addComment(Comment comment)`: Adds a new comment to the system.\n2. `getCommentsByMovieId(int movieId)`: Retrieves a list of comments for a given movie ID.\n3. `deleteCommentById(int commentId)`: Deletes a comment by its ID.\n\nEnsure that you handle edge cases, such as adding a comment with an existing ID, retrieving comments for a non-existing movie, and deleting a non-existing comment.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable credit, type should be double."}, {"type": "class", "instruction": "Your code should define a class named FormBill."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_message."}, {"type": "combination", "instruction": "In your code, the class FormBill should have these properties ['info', 'notification']."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"5": [0, 1, 4, 11], "6": [0, 1, 4, 11], "8": [0, 1, 7, 11], "10": [0, 1, 7, 11]}, "question_id": 461}
{"question": "\n\nYou are given a problem where you need to calculate the maximum constant speed at which a car can travel to reach a destination at the same time as the slowest of several other cars. The destination is at a distance `d` from the start point, and there are `n` other cars on the road. Each of the `n` cars has a starting position and a speed. The car you are controlling can travel at any constant speed, but it cannot overtake any of the other cars (i.e., it must reach the destination exactly when the slowest car does).\n\nWrite a program that calculates the maximum constant speed at which your car can travel to reach the destination at the same time as the slowest car. The input will be a series of test cases. The first line of input contains an integer `TN`, the number of test cases. Each test case starts with a line containing a floating-point number `d` (the distance to the destination) and an integer `n` (the number of other cars). The following `n` lines each contain two floating-point numbers: the starting position `pos` and the speed `spd` of a car.\n\nYour program should output the maximum constant speed for each test case, formatted as \"Case #x: y\", where `x` is the test case number (starting from 1) and `y` is the maximum constant speed, rounded to nine decimal places.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not use the volatile keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Your code should define an enumeration named Language"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named modify_data."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_tys."}, {"type": "file", "instruction": "Your code should import the following libraries ['iostream']."}, {"type": "file", "instruction": "Your code should use the function modify_data from the library cmath."}, {"type": "combination", "instruction": "The function modify_data should take ['notification'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_tys, which should contain these functions ."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 5, 7], "10": [0, 1, 2, 3, 4, 5, 7], "14": [0, 1, 2, 3, 4, 5, 13], "15": [0, 1, 2, 3, 4, 5, 11], "16": [0, 1, 2, 3, 4, 5, 12]}, "question_id": 462}
{"question": "Please write a complete Python function `solve(smiles)`, which takes a SMILES input, first reads the SMILES and converts it to RDKit's Mol type, then defines the reaction using the reaction SMARTS \"[c:1][#7:2]>>[c:1][C:2](=[O])[O-]\" and the `AllChem.ReactionFromSmarts` function. Next, use `rxn_dBOC.RunReactants([mol])` to run the reaction. If products exist, select the first product and return its SMILES.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the continue keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, the initial value should be msg."}, {"type": "interface", "instruction": "Your code should define an interface named get_order."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named CreateDataKms."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['tensorflow']."}, {"type": "file", "instruction": "Your code should use the function remove_notification from the library matplotlib."}, {"type": "combination", "instruction": "You should initialize an object named dwa as an instance of the CreateDataKms class using ['customer', 'customer'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named get_order that includes these methods ['delete_view', 'transform_bill', 'retrieve_shipment']."}, {"type": "combination", "instruction": "In your code, the class CreateDataKms should have these methods ['delete_view', 'transform_bill', 'retrieve_shipment']."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "9": [0, 1, 8], "11": [0, 1, 10], "12": [0, 1, 8], "13": [0, 1, 6], "14": [0, 1, 8]}, "question_id": 463}
{"question": "\n\nDesign a Python class called `ScanManager` that manages different types of file scans. The `ScanManager` should be able to register different scan types and execute them based on the file extension. The supported scan types are `BinaryScan`, `FileScan`, `JsonScan`, `ArrowScan`, `DocScan`, `MaterializedScan`, and `PandasScan`. Each scan type is specialized in handling specific file formats:\n\n- `BinaryScan`: Handles binary files (`.bin`).\n- `FileScan`: Handles generic files without a specific format.\n- `JsonScan`: Handles JSON files (`.json`).\n- `ArrowScan`: Handles Apache Arrow files (`.arrow`).\n- `DocScan`: Handles document files (`.docx`, `.pdf`).\n- `MaterializedScan`: Handles materialized views, not tied to a specific file extension.\n- `PandasScan`: Handles CSV files (`.csv`).\n\nThe `ScanManager` should have the following methods:\n\n- `register_scan(scan_type, file_extensions)`: Registers a scan type along with the associated file extensions.\n- `execute_scan(file_path)`: Executes the appropriate scan based on the file extension of the given `file_path`. If the file extension is not recognized, it should raise a `ValueError`.\n\nEach scan type class should have an `execute` method that simulates scanning the file and returns a string indicating the type of scan and the file that was scanned (e.g., `\"BinaryScan executed for file: example.bin\"`).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "structural control", "instruction": "Your code should use data structure dict."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, type should be float."}, {"type": "variable", "instruction": "Variable kms, should be a global variable."}, {"type": "variable", "instruction": "Variable kms should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named add_bill."}, {"type": "class", "instruction": "Your code should define a class named DataMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named check_punish."}, {"type": "combination", "instruction": "In your code, the class DataMsg should have these properties ['report']."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_punish, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "8": [0, 1, 5], "12": [0, 1, 10], "13": [0, 1, 11]}, "question_id": 464}
{"question": "Please write a Java method to generate a simple report showing the number of books of different types in a virtual library. The report should be returned in text format, with each type of book on a new line in the format \"Type: Quantity\". The book types and their counts are passed through a `Map<String, Integer>` parameter, where the key is the book type and the value is the number of books of that type. Ensure that the method includes all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Map;\npublic class LibraryReportGenerator {\n    public static String generateReport(Map<String, Integer> bookStats) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named create_view."}, {"type": "class", "instruction": "Your code should define a class named ItemForm."}, {"type": "combination", "instruction": "You should define an interface named create_view that includes these methods ['manage_punish', 'submit_record']."}, {"type": "combination", "instruction": "Your code should define a class named ItemForm that implements the create_view interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"5": [0, 1, 4, 10], "8": [0, 1, 6, 10], "9": [0, 1, 6, 7, 10]}, "question_id": 465}
{"question": "\n\nDesign a Go program that manages virtual user data for an application that uses virtual phone numbers and user IDs to uniquely identify users in a virtual meeting environment. The program should be able to create, update, and retrieve virtual user information from a data store.\n\nThe `VirtualUser` struct represents the virtual user data, which includes a base struct with common fields, a `BaseVirtualUser` struct with user-specific fields, and additional fields for the virtual phone number and virtual user ID.\n\nThe `BaseVirtualUser` struct contains the user's real ID, nickname, the product ID (AppId), and an optional course time ID.\n\nYour task is to implement the following functionalities:\n\n1. A function `CreateVirtualUser` that takes a `VirtualUser` object and stores it in the data store. It should validate the input to ensure that the `UserId`, `Name`, and `AppId` are provided and that the `Name` is between 1 and 64 characters. The function should return an error if the validation fails or if the user cannot be created.\n\n2. A function `UpdateVirtualUser` that updates an existing virtual user's information in the data store based on the provided `VirtualUser` object. It should perform the same validations as the `CreateVirtualUser` function and return an error if the update fails.\n\n3. A function `GetVirtualUser` that retrieves a virtual user's information from the data store using the virtual user ID. It should return the `VirtualUser` object and an error if the user cannot be found.\n\nAssume that the data store operations (create, update, retrieve) are abstracted away by a `DataStore` interface with methods `Create`, `Update`, and `Get` that you do not need to implement.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "function", "instruction": "Your code should include a function named analyze_shipment."}, {"type": "interface", "instruction": "Your code should define an interface named get_user."}, {"type": "class", "instruction": "Your code should define a class named ProcessToken."}, {"type": "file", "instruction": "Your code should be organized in a package named check_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['sort', 'strconv']."}, {"type": "file", "instruction": "Your code should use the function analyze_shipment from the library math."}, {"type": "combination", "instruction": "You should define an interface named get_user that includes these methods ['update_shipment', 'display_form']."}, {"type": "combination", "instruction": "In your code, the class ProcessToken should have these properties ['bill']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "14": [0, 1, 2, 3, 13], "15": [0, 1, 2, 3, 10], "16": [0, 1, 2, 3, 11]}, "question_id": 466}
{"question": "\n\nCreate a Java class that parses an XML file containing a message footer and extracts information such as the message code, severity, and texts. The message footer is a part of an XML-based response that provides additional information about the response, such as warnings or errors.\n\nThe XML message footer structure is as follows:\n\n```xml\n<MessageFooter>\n    <Code>413</Code>\n    <Severity>Information</Severity>\n    <Texts>\n        <Text>Response too large due to client request</Text>\n        <Text>Some other information or warning</Text>\n    </Texts>\n</MessageFooter>\n```\n\nYour task is to implement a method that parses the XML message footer and returns an object of type `MessageFooter` containing the parsed information. The `MessageFooter` class should have the following structure:\n\n```java\npublic class MessageFooter {\n    private int code;\n    private String severity;\n    private List<String> texts;\n\n    // Constructor, getters, and setters\n}\n```\n\nThe parser should be able to handle exceptions and provide meaningful error messages if the XML is not well-formed or does not match the expected structure.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the break keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "variable", "instruction": "Variable message, should not be a global variable."}, {"type": "variable", "instruction": "Variable message, the initial value should be info."}, {"type": "function", "instruction": "Your code should include a function named retrieve_tys."}, {"type": "class", "instruction": "Your code should define a class named ManageItem."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.io']."}, {"type": "combination", "instruction": "In your code, the class ManageItem should have these properties ['tys', 'bill', 'kms']."}, {"type": "combination", "instruction": "The function retrieve_tys should return a List as its result."}], "instruction_dependence": {"6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "11": [0, 1, 2, 9], "12": [0, 1, 2, 8]}, "question_id": 467}
{"question": "\n\nDesign a Django database migration that creates a new model `ClassRoom` with the following requirements:\n\n1. The `ClassRoom` model should have an `id` field that serves as the primary key. This field should be an auto-incrementing integer.\n2. The model should have a `class_name` field that stores the name of the classroom as a string with a maximum length of 200 characters.\n3. The `school` field should be a one-to-one relationship with another model called `School`. Assume that the `School` model exists in the same Django app named 'quiz'.\n4. The `students` field should be a many-to-many relationship with a model called `SchoolProfile`. The related name for the reverse relationship from `SchoolProfile` to `ClassRoom` should be 'classrooms'.\n5. The `teacher` field should be a one-to-one relationship with the `SchoolProfile` model. The related name for the reverse relationship from `SchoolProfile` to `ClassRoom` should be 'teacher_classroom'.\n6. The combination of `school` and `class_name` should be unique across all `ClassRoom` instances.\n\nWrite a Django migration script that creates the `ClassRoom` model and enforces the unique constraint on the combination of `school` and `class_name`. Ensure that the migration script is compatible with Django's migration framework.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "Variable tys, should be a global variable."}, {"type": "variable", "instruction": "Variable tys should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named update_tys."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_status."}, {"type": "class", "instruction": "Your code should define a class named Shipment."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'matplotlib', 'pandas']."}, {"type": "combination", "instruction": "In your code, the class Shipment should have these properties ['view', 'report']."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "13": [0, 1, 2, 11]}, "question_id": 468}
{"question": "Please write a Java method to copy the contents of a text file to another new text file. The method should accept two parameters: the source file path and the target file path. Ensure that during the copying process, if the target file does not exist, it is automatically created. Also, handle all possible IO exceptions and ensure that all used resources are properly closed after the operation is complete.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileCopier {\n    public static void copyTextFile(String sourcePath, String targetPath) throws IOException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure Map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named display_status."}, {"type": "class", "instruction": "Your code should define a class named TransactionKms."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_info."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt', 'java.net']."}, {"type": "file", "instruction": "Your code should use the function display_status from the library java.io."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.io', 'java.math']."}, {"type": "combination", "instruction": "You should initialize an object named order as an instance of the TransactionKms class using ['log', 'profile'] for initialization."}, {"type": "combination", "instruction": "The function display_status should take ['log'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_info, which should contain these functions ."}], "instruction_dependence": {"6": [0, 5], "11": [0, 10], "13": [0, 8], "14": [0, 7], "15": [0, 9]}, "question_id": 469}
{"question": "\n\nWrite a C++ program that removes all whitespace characters from a given string and returns the modified string. The program should be able to handle not only spaces but also tabs and newlines. The input string will be provided by the user at runtime.\n\nThe program should also count the number of whitespace characters removed and print this information along with the modified string.\n\n### Example:\n\n**Input**:\n```\nHello, World! This is an example.\n```\n\n**Output**:\n```\nModified string: Hello,World!Thisisanexample.\nWhitespace characters removed: 6\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Variable user, type should be double."}, {"type": "variable", "instruction": "Variable user, should be a global variable."}, {"type": "variable", "instruction": "Variable user, the initial value should be kms."}, {"type": "function", "instruction": "Your code should include a function named display_data."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named add_profile."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_token."}, {"type": "combination", "instruction": "Your code should define a class named Form that implements the add_profile interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_token, which should contain these functions ."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4], "7": [0, 4], "9": [0, 8], "11": [0, 10], "14": [0, 10, 12], "15": [0, 13]}, "question_id": 470}
{"question": "\n\nWrite a C++ program that provides a wrapper function for a hypothetical external library function `oauxfw_`, which is used to open an auxiliary file with a specific format and identifier. The wrapper function should be named `openAuxiliaryFile` and should be part of a namespace called `fluka`. The external function `oauxfw_` takes the following parameters:\n\n- `const char* cFile`: A C-style string representing the file name to be opened.\n- `const int& lenFil`: An integer representing the length of the file name string.\n- `const int& IONUMB`: An integer representing the file identifier.\n- `const char* cForm`: A C-style string representing the file format.\n- `const int& lenFor`: An integer representing the length of the file format string.\n- `int& IERR`: An integer reference that will be set to a non-zero value if an error occurs.\n\nThe `openAuxiliaryFile` function should accept the file name and file format as `std::string` and the file identifier as an `int`. It should also return an error code as an `int`. The function should handle the conversion from `std::string` to C-style strings and the calculation of their lengths. The function should be enclosed within preprocessor directives checking for `G4_USE_FLUKA`.\n\nProvide a main function that demonstrates the use of `openAuxiliaryFile` with a test case, assuming that the `oauxfw_` function is correctly linked and available.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should not be a global variable."}, {"type": "variable", "instruction": "Variable status should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named delete_msg."}, {"type": "class", "instruction": "Your code should define a class named ProcessTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named update_view."}, {"type": "file", "instruction": "Your code should import the following libraries ['queue']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_view, which should contain these classes ['SetCredit']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_view, which should contain these functions ."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "8": [0, 5, 6], "9": [0, 6]}, "question_id": 471}
{"question": "\n\nDesign a Go program that manages Azure Operational Insights Workspaces within a given Azure Resource Group. The program should be able to create a new Operational Insights Workspace within a specified Resource Group and retrieve the details of an existing Workspace by its name.\n\nThe program should follow these specifications:\n\n1. Define a struct `ResourceGroup` that contains the name of the Azure Resource Group.\n2. Define a struct `WorkSpace` that embeds `ResourceGroup` and a pointer to `operationalinsights.Workspace`.\n3. Implement a function `NewWorkSpace` that takes a resource group name and workspace properties, and returns a new `WorkSpace` instance.\n4. Implement a function `Create` that creates a new Operational Insights Workspace in Azure within the specified Resource Group.\n5. Implement a function `GetDetails` that retrieves the details of an existing Operational Insights Workspace by its name.\n\nThe program should include error handling to manage any issues that arise during the creation or retrieval of the Workspace.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_order', 'execute_user']."}, {"type": "class", "instruction": "Your code should define a class named MsgBill."}, {"type": "file", "instruction": "Your code should not use the following libraries ['sort', 'io', 'strings']."}, {"type": "combination", "instruction": "In your code, the class MsgBill should have these properties ['event', 'request']."}, {"type": "combination", "instruction": "In your code, the class MsgBill should have these methods ['execute_product']."}], "instruction_dependence": {"5": [0, 1, 4], "9": [0, 1, 7], "10": [0, 1, 7]}, "question_id": 472}
{"question": "\n\nDesign a Go program that automates the process of database schema migrations for a MySQL database. The program should be able to apply new migrations to update the database schema to the latest version. The migrations are SQL scripts stored in a file system directory, and the program should be able to locate and apply them in sequence.\n\nThe program should use the `golang-migrate/migrate` package for handling migrations and the `go-kratos/kratos` package for logging. It should be able to handle the case where there are no new migrations to apply (indicated by the \"no change\" error) and should log this event without failing. The program should also handle and log any errors that occur during the migration process.\n\nThe configuration for the database connection and the migration directory path should be provided through a `conf.Data` struct, which includes the database driver, source, and migration path.\n\nWrite a function `MigrateUp` that takes a `*conf.Data` and a `log.Logger` as arguments, connects to the MySQL database, and applies the migrations. The function should return an error if any step of the migration process fails, except for the \"no change\" case, which should be logged as a debug message indicating that the database schema is already up to date.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the struct keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named remove_tys."}, {"type": "class", "instruction": "Your code should define a class named Request."}, {"type": "file", "instruction": "Your code should be organized in a package named update_profile."}, {"type": "combination", "instruction": "In your code, the class Request should have these properties ['profile']."}, {"type": "combination", "instruction": "The function remove_tys should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_profile, which should contain these classes ['ConfigureViewItem', 'RemoveStatusLog', 'Credit']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_profile, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"9": [0, 1, 2, 7, 13], "10": [0, 1, 2, 6, 13], "11": [0, 1, 2, 7, 8, 13], "12": [0, 1, 2, 8, 13]}, "question_id": 473}
{"question": "\n\nDesign a Go program that simulates a simplified version of a database migration system for a cloud platform. The system should be able to perform migrations for different modules such as users, OAuth tokens, applications, history logs, machines, and configuration settings. Each module has its own migration logic encapsulated in a separate package with a `Migrate()` function that returns an error if the migration fails.\n\nYour task is to implement the `MigrateAll` function that sequentially performs the migrations for all modules. If any migration fails, the function should log the error and stop the migration process, returning the error to the caller. The function should return `nil` if all migrations are successful.\n\nUse the provided code snippet as inspiration for the structure of your program. Ensure that you include proper error handling and logging.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Your code should define an enumeration named Size"}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named display_account."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SubmitInfo."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_punish."}, {"type": "combination", "instruction": "You should initialize an object named product as an instance of the SubmitInfo class using ['record', 'punish', 'customer'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_punish, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 14 lines."}], "instruction_dependence": {"6": [0, 1, 4, 14], "8": [0, 1, 7, 14], "10": [0, 1, 9, 14], "12": [0, 1, 9, 14], "13": [0, 1, 11, 14]}, "question_id": 474}
{"question": "Please design a Java program to manage the information of books in a library. You need to implement a class named `BookManager`, which contains a method `addBook` that accepts the title of the book (`String` type) and the ISBN number of the book (`String` type) as parameters, and stores this information in a collection. Additionally, you need to implement a `displayBooks` method to print all the added book information. Ensure your program is self-contained and all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    private List<String> books;\n    public BookManager() {\n    }\n    public void addBook(String name, String isbn) {\n    }\n    public void displayBooks() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable notification, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named generate_request."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named NotificationTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named get_credit."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.math', 'java.lang']."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_credit, which should contain these classes ['ConfigureTysProduct']."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "11": [0, 1, 8, 9]}, "question_id": 475}
{"question": "\n\nCreate a Java program that simulates a simple news management system using the Dependency Injection (DI) design pattern. The system should be able to list news articles and allow for editing of existing news articles. Each news article is represented by a `NewsArticle` class containing a title and content. The `NewsListFragment` class should be responsible for displaying the list of news articles, and the `NewsEditFragment` class should be responsible for editing a specific news article.\n\nYour task is to:\n1. Define the `NewsArticle` class with appropriate attributes and methods.\n2. Implement the `NewsListFragment` class with a method to display all news articles.\n3. Implement the `NewsEditFragment` class with methods to get and update a news article.\n4. Create a `NewsModule` class that uses the DI pattern to inject dependencies into `NewsListFragment` and `NewsEditFragment`.\n5. Write a main method to demonstrate the functionality of the news management system.\n\nEnsure that your code follows the Dependency Injection pattern and that you provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, should not be a global variable."}, {"type": "variable", "instruction": "Variable room, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named display_status."}, {"type": "interface", "instruction": "Your code should define an interface named delete_status."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "combination", "instruction": "The function display_status should take ['request', 'order', 'record'] as parameters."}, {"type": "combination", "instruction": "The function display_status should return a boolean as its result."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 12], "6": [0, 1, 2, 4, 12], "9": [0, 1, 2, 8, 12], "10": [0, 1, 2, 7, 12], "11": [0, 1, 2, 7, 12]}, "question_id": 476}
{"question": "\n\nDesign a Go package that provides a persistent store for managing initialization bundles for clusters. The store should support adding new bundles, retrieving existing bundles, checking for ID and name collisions, and revoking bundles. The store should be implemented using RocksDB as the underlying storage engine.\n\nThe initialization bundle metadata (`InitBundleMeta`) should include at least the following fields:\n- `Id`: A unique identifier for the bundle.\n- `Name`: A human-readable name for the bundle.\n- `IsRevoked`: A boolean flag indicating whether the bundle has been revoked.\n\nThe store should provide the following functionalities:\n- `Add(ctx context.Context, meta *storage.InitBundleMeta) error`: Adds a new bundle to the store. It should return an error if a bundle with the same ID or name already exists.\n- `Get(ctx context.Context, id string) (*storage.InitBundleMeta, error)`: Retrieves a bundle by its ID. It should return an error if the bundle does not exist or has been revoked.\n- `GetAll(ctx context.Context) ([]*storage.InitBundleMeta, error)`: Retrieves all non-revoked bundles from the store.\n- `Revoke(ctx context.Context, id string) error`: Revokes a bundle by its ID. It should return an error if the bundle does not exist.\n\nWrite a test suite to verify the correctness of the store's implementation. The test suite should include tests for adding bundles with unique IDs and names, handling ID and name collisions, and revoking bundles.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, should not be a global variable."}, {"type": "variable", "instruction": "Variable data, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named submit_form."}, {"type": "function", "instruction": "Your code should not use any functions from the ['add_bill', 'add_item']."}, {"type": "class", "instruction": "Your code should define a class named CheckEvent."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_shipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['net', 'fmt']."}, {"type": "file", "instruction": "Your code should use the function submit_form from the library os."}, {"type": "combination", "instruction": "You should initialize an object named dwa as an instance of the CheckEvent class using ['profile', 'account', 'item'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CheckEvent should have these methods ['generate_notification', 'submit_data']."}, {"type": "combination", "instruction": "The function submit_form should return a struct as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_shipment, which should contain these classes ['UpdateBillTys']."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"5": [0, 1, 4, 17], "6": [0, 1, 4, 17], "12": [0, 1, 11, 17], "13": [0, 1, 9, 17], "14": [0, 1, 9, 17], "15": [0, 1, 7, 17], "16": [0, 1, 9, 10, 17]}, "question_id": 477}
{"question": "Given an array of n positive integers and a positive integer target.  \nFind the length of the smallest continuous subarray [numsl, numsl+1, ..., numsr-1, numsr] in the array such that its sum is greater than or equal to target, and return its length. If there is no such subarray, return 0.  \nPlease answer in Go language and implement the function `func MinSubArrayLen(s int, nums []int) int`", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Variable user, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named sort_transaction."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['fmt', 'strconv', 'io']."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"3": [0, 2, 7], "5": [0, 4, 7]}, "question_id": 478}
{"question": "\n\nDesign a Java class named `SocialMediaConnector` that represents a generic social media connection template. The class should be able to handle authorization and store an access token for a social media service. The class should provide methods to check if a user is authorized and to post a message to the social media service. The posting capability should only be available if the user is authorized (i.e., an access token is present).\n\nThe `SocialMediaConnector` class should adhere to the following requirements:\n\n1. It should have a constructor that accepts an access token.\n2. It should have a method `isAuthorized()` that returns a boolean indicating whether the user is authorized.\n3. It should have a method `postMessage(String message)` that allows posting a message to the social media service. If the user is not authorized, this method should throw an `IllegalStateException`.\n4. It should have a method `getAccessToken()` that returns the current access token.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_room', 'calculate_event', 'add_record', 'calculate_report']."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql', 'java.time']."}, {"type": "file", "instruction": "Your code should use the function get_msg from the library java.lang."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7]}, "question_id": 479}
{"question": "Please implement the Dijkstra algorithm in Python, which is used to find the shortest path from the start node to all other nodes in the graph. The function is defined as def dijkstra(graph, start), where graph is a dictionary representing the adjacency matrix of the graph, and start is a key representing the start node. The return value of the function is a dictionary, where the key is the node and the value is the shortest path length from the start node to the node.\nThe Dijkstra algorithm is an algorithm used to find the shortest path from a single source in a graph. Its basic idea is as follows:\n\n1. **Initialization**: First, an array or dictionary is needed to store the shortest distance from the start node to each node. For all nodes, except for the start node, initialize the shortest distance as infinity (or a very large number). The distance from the start node to itself is set to 0.\n2. **Select the node with the shortest distance**: Select a node with the shortest distance from the unprocessed nodes. The `shortest_paths` dictionary is used to store the shortest distance from the start node to each node, and `priority_queue` is used to store the unprocessed node and its current shortest distance.\n3. **Update the distance**: Each time a node with the shortest distance is taken out from the `priority_queue`, then update the shortest distance of its neighbors, and add these neighbor nodes to the `priority_queue`.\n4. **Mark the processed nodes**: `heapq.heappop(priority_queue)` takes out the node with the shortest distance and its distance from the priority queue. Check whether the shortest known path of the current node is longer than the current distance.\n5. **Repeat steps 2-4**: Repeat the above steps until shortest distances of all nodes have been determined.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the None keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "combination", "instruction": "In your code, the class Kms should have these properties ['room']."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 7]}, "question_id": 480}
{"question": "\n\nDesign a Java class `CsvToObjectMapper` that reads a CSV file and maps its records to instances of a specified Java class. The class should be able to handle CSV files that conform to RFC 4180 and support custom field separators and comment lines. The CSV file is assumed to be UTF-8 encoded.\n\nThe `CsvToObjectMapper` class should provide the following functionalities:\n- Set a custom field separator (default is a comma `,`).\n- Set a string that indicates the start of a comment line in the CSV file.\n- Read the CSV file and map each record to an instance of the specified class.\n- Skip empty lines and lines that start with the specified comment string.\n- Provide meaningful error messages if the CSV file has missing or invalid header fields, or if a value cannot be parsed into the expected field type.\n\nThe class should use reflection to instantiate objects of the specified class and set their fields based on the CSV data. It should also support fields of type `Code` by using a provided `BiFunction<Class<?>, Object, Object>` to create instances of `Code` objects.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_event."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named update_event."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SortCut."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_item."}, {"type": "combination", "instruction": "You should define an interface named update_event that includes these methods ['insert_token', 'process_transaction', 'configure_customer']."}, {"type": "combination", "instruction": "Your code should define a class named SortCut that implements the update_event interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_item, which should contain these functions ."}], "instruction_dependence": {"5": [0, 4], "7": [0, 6], "9": [0, 8], "12": [0, 8], "13": [0, 8, 10], "14": [0, 11]}, "question_id": 481}
{"question": "You are given an integer array `nums` which is indexed from **0**. A **strong pair** of integers `x` and `y` is defined as follows:\n\n* `|x - y| <= min(x, y)`\n\nYou need to select two integers from the `nums` array which satisfy the condition that these two integers can form a strong pair and their bitwise XOR (`XOR`) value is the **maximum** among all strong pairs in the array.\n\nReturn the **maximum** bitwise XOR value among all possible strong pairs in the `nums` array.\n\n**Note**: You can select the same integer twice to form a strong pair.\n\n**Example 1:**\n\n```\n**Input:** nums = [1,2,3,4,5]\n**Output:** 7\n**Explanation:** There are 11 strong pairs in the `nums` array: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5), and (5, 5).\nThe maximum bitwise XOR value among these strong pairs is 3 XOR 4 = 7.\n```\n\n**Example 2:**\n\n```\n**Input:** nums = [10,100]\n**Output:** 0\n**Explanation:** There are 2 strong pairs in the `nums` array: (10, 10), and (100, 100).\nThe maximum bitwise XOR value among these strong pairs is 10 XOR 10 = 0, the XOR value of the pair (100, 100) is also 100 XOR 100 = 0.\n```\n\n**Example 3:**\n\n```\n**Input:** nums = [500,520,2500,3000]\n**Output:** 1020\n**Explanation:** There are 6 strong pairs in the `nums` array: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000), and (3000, 3000).\nThe maximum bitwise XOR value among these strong pairs is 500 XOR 520 = 1020; another non-zero XOR value pair is (2500, 3000), its XOR value is 2500 XOR 3000 = 636.\n```\n\n**Hints:**\n\n* `1 <= nums.length <= 5 * 104`\n* `1 <= nums[i] <= 220 - 1`\n\nPlease accomplish the following instantation\n```cpp\nclass Solution {\npublic:\n    int maximumStrongPairXor(vector<int> nums);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "structural control", "instruction": "Your code should use data structure pair."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable transaction, type should be char."}, {"type": "variable", "instruction": "Variable transaction, the initial value should be transaction."}, {"type": "function", "instruction": "Your code should include a function named filter_tys."}, {"type": "interface", "instruction": "Your code should define an interface named remove_message."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "combination", "instruction": "Your code should define a class named Event that implements the remove_message interface."}, {"type": "combination", "instruction": "The function filter_tys should take ['credit', 'request', 'profile'] as parameters."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "11": [0, 1, 10], "12": [0, 1, 9, 10], "13": [0, 1, 8]}, "question_id": 482}
{"question": "\nWrite a Python function `find_extreme_weights` that takes a list of weights (floats) and returns the heaviest and the lightest weights among them. The function should follow these specifications:\n\n1. The function should accept a list of floats as its only argument.\n2. The function should return a tuple containing two floats: the heaviest weight and the lightest weight, in that order.\n3. If the list is empty, the function should return `(None, None)`.\n\nHere is the function signature:\n```python\ndef find_extreme_weights(weights: List[float]) -> Tuple[Optional[float], Optional[float]]:\n    \"\"\"\n    Finds the heaviest and lightest weights in a list.\n\n    :param weights: A list of weights (floats).\n    :return: A tuple containing the heaviest and lightest weights, or (None, None) if the list is empty.\n    \"\"\"\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should use the False keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, type should be tuple."}, {"type": "variable", "instruction": "Variable form, the initial value should be order."}, {"type": "variable", "instruction": "Variable form should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named HandleMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_request."}, {"type": "file", "instruction": "Your code should import the following libraries ['tensorflow', 'pandas']."}, {"type": "file", "instruction": "Your code should use the function create_status from the library scikit-learn."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_request, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 5, 7, 16], "9": [0, 1, 2, 3, 4, 5, 7, 16], "10": [0, 1, 2, 3, 4, 5, 7, 16], "14": [0, 1, 2, 3, 4, 5, 13, 16], "15": [0, 1, 2, 3, 4, 5, 12, 16]}, "question_id": 483}
{"question": "\n\nDesign a simple Android application that displays a list of names using a `RecyclerView`. The application should have two activities: `MainActivity` and `FormActivity`. \n\nIn `MainActivity`, there should be a `RecyclerView` to display the names and a `Button` to navigate to `FormActivity`. The `NameAdapter` is a custom adapter for the `RecyclerView` that handles the display of names. The `DataManager` is a singleton class that provides the list of names to be displayed.\n\nWhen the application starts, `MainActivity` should display the list of names using the `NameAdapter`. When the user clicks the button, `FormActivity` should be launched. For the purpose of this question, you do not need to implement `FormActivity` or `DataManager`.\n\nImplement the `MainActivity` with the following requirements:\n- Use `LinearLayoutManager` for the `RecyclerView`.\n- Update the `RecyclerView` with the list of names every time `MainActivity` resumes.\n- Ensure that the `Button` properly navigates to `FormActivity`.\n\nProvide a simple implementation of `NameAdapter` that can display a list of strings in the `RecyclerView`. Also, include test cases to verify the correctness of the `MainActivity`'s behavior.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure Queue."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, type should be boolean."}, {"type": "function", "instruction": "Your code should include a function named check_product."}, {"type": "class", "instruction": "Your code should define a class named CreateStatus."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql']."}, {"type": "combination", "instruction": "In your code, the class CreateStatus should have these properties ['data']."}], "instruction_dependence": {"8": [0, 1, 7], "12": [0, 1, 10]}, "question_id": 484}
{"question": "\nWrite a program that performs a series of string manipulations on a given input string. The program should be able to:\n\n1. Report the size of the input string.\n2. Remove a specified range of characters from the string.\n3. Insert a new substring at a specified position in the string.\n4. Replace a specified substring with another substring within the string.\n\nThe program should read the input string from the standard input, followed by a series of commands, each on a new line. Each command will be in one of the following formats:\n\n- `SIZE`: Outputs the current size of the string.\n- `ERASE <start> <length>`: Erases `<length>` characters from the string starting at index `<start>`. The first character of the string is at index 0.\n- `INSERT <position> <substring>`: Inserts `<substring>` into the string at index `<position>`.\n- `REPLACE <old_substring> <new_substring>`: Replaces all occurrences of `<old_substring>` in the string with `<new_substring>`.\n\nThe program should output the result of each command on a new line. If a command is invalid or cannot be performed, the program should output \"INVALID COMMAND\".\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named check_dwa."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named insert_inventory."}, {"type": "class", "instruction": "Your code should define a class named HandleProduct."}, {"type": "file", "instruction": "Your code should be organized in a package named check_info."}, {"type": "file", "instruction": "Your code should not use the following libraries ['vector']."}, {"type": "combination", "instruction": "Your code should define a class named HandleProduct that implements the insert_inventory interface."}, {"type": "combination", "instruction": "In your code, the class HandleProduct should have these methods ['configure_room', 'filter_report', 'update_msg']."}, {"type": "combination", "instruction": "The function check_dwa should return a float as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_info, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 6], "9": [0, 1, 8], "14": [0, 1, 10, 11], "15": [0, 1, 11], "16": [0, 1, 8], "17": [0, 1, 12]}, "question_id": 485}
{"question": "Implement a read-write spin lock type `RwSpinLock` in c++, which needs to meet the following requirements:\n1. You cannot directly use the implementation of the read-write lock provided by other third-party libraries\n2. You can use the type implementation of `std::atomic`\n3. Implement the interface `void RLock()` for adding read locks\n4. Implement the interface `void RUnLock()` for unlocking read locks\n5. Implement the interface `void WLock()` for adding write locks\n6. Implement the interface `void WUnLock()` for unlocking write locks\n7. Implement the interface `void ReadParallel()` to represent the current read concurrency", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should use the unsigned keyword."}, {"type": "structural control", "instruction": "Your code should use data structure pair."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Variable account, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_status."}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_info', 'delete_record', 'handle_notification', 'add_form']."}, {"type": "class", "instruction": "Your code should define a class named NotificationReport."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_order."}, {"type": "combination", "instruction": "In your code, the class NotificationReport should have these methods ['search_shipment', 'insert_kms', 'filter_cut']."}], "instruction_dependence": {"8": [0, 1, 2, 7], "12": [0, 1, 2, 11], "14": [0, 1, 2, 11]}, "question_id": 486}
{"question": "\n\nDesign a Go program that provides a secure way to authenticate users via JSON Web Tokens (JWT) in a web application. The program should include two primary functionalities:\n\n1. Generating a JWT for a user with a unique access ID and a configurable expiration time.\n2. Middleware to authenticate incoming HTTP requests by validating the provided JWT in the `Authorization` header.\n\nThe JWT should be signed with a secret key and should include claims for the user's access ID and the token's expiration time. The middleware should reject requests with no `Authorization` header, an invalid token, or an expired token, responding with the appropriate HTTP status code and error message in JSON format.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Mode"}, {"type": "function", "instruction": "Your code should include a function named filter_shipment."}, {"type": "interface", "instruction": "Your code should define an interface named configure_status."}, {"type": "class", "instruction": "Your code should define a class named ProfileShipment."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['sort']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['time', 'fmt', 'io']."}, {"type": "combination", "instruction": "You should define an interface named configure_status that includes these methods ['retrieve_info']."}, {"type": "combination", "instruction": "The function filter_shipment should return a bool as its result."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"9": [0, 1, 2, 8, 14], "12": [0, 1, 2, 7, 14], "13": [0, 1, 2, 6, 14]}, "question_id": 487}
{"question": "\n\nDesign a C++ program that models a power grid's generator startup process using the provided code snippet as inspiration. The program should include a `GeneratorStartup` class with attributes for predefined active power setpoint, marginal cost, planned outage rate, and forced outage rate. Additionally, implement a `GeneratorStartupBuilder` class to construct `GeneratorStartup` objects using the builder pattern.\n\nThe `GeneratorStartup` class should have the following public interface:\n- A constructor that initializes all attributes.\n- Getters for each attribute.\n- A `toString` method that returns a string representation of the generator startup details.\n\nThe `GeneratorStartupBuilder` class should have the following public interface:\n- Setter methods for each attribute that return the builder object itself to allow method chaining.\n- A `build` method that creates a new `GeneratorStartup` object with the set attributes.\n\nWrite a main function that demonstrates the creation of a `GeneratorStartup` object using the `GeneratorStartupBuilder`, and prints the details of the created object.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "Variable event, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named process_order."}, {"type": "interface", "instruction": "Your code should define an interface named transform_profile."}, {"type": "class", "instruction": "Your code should define a class named CalculatePunish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['queue', 'stack', 'set']."}, {"type": "combination", "instruction": "Your code should define a class named CalculatePunish that implements the transform_profile interface."}, {"type": "combination", "instruction": "The function process_order should return a bool as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 2, 3, 12], "10": [0, 1, 2, 7, 8, 12], "11": [0, 1, 2, 6, 12]}, "question_id": 488}
{"question": "\n\nDesign a RESTful API client for managing API resources. The client should be able to create, retrieve, update, and delete API resources. Each API resource should have a unique name and associated data that can be provided when creating or updating the resource.\n\nThe client should be implemented in Go and must handle the HTTP requests and responses, including error handling and JSON serialization/deserialization. The client should be able to connect to a given API server with a configurable host URL and base path.\n\nThe `ApiResourceCreate` and `ApiResourceUpdate` structs represent the data models for creating and updating resources, respectively. The `ApiResource` struct represents the data model for an API resource that is retrieved from the server.\n\nProvide a clear and concise problem description, and implement the solution with appropriate methods for each action (Create, Retrieve, Update, Delete). Include test cases to verify the correctness of the implemented client methods.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Your code should define an enumeration named Priority"}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "function", "instruction": "Your code should include a function named update_msg."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_transaction."}, {"type": "class", "instruction": "Your code should define a class named ExecuteReport."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_request."}, {"type": "file", "instruction": "Your code should not use the following libraries ['math', 'os']."}, {"type": "combination", "instruction": "Your code should define a class named ExecuteReport that implements the retrieve_transaction interface."}, {"type": "combination", "instruction": "In your code, the class ExecuteReport should have these methods ['check_inventory']."}, {"type": "combination", "instruction": "The function update_msg should take ['msg'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 11 lines."}], "instruction_dependence": {"7": [0, 1, 5, 16], "13": [0, 1, 9, 10, 16], "14": [0, 1, 10, 16], "15": [0, 1, 8, 16]}, "question_id": 489}
{"question": "\n\nWrite a Go package `osutils` that provides utility functions for common file system operations. The package should include the following functions:\n\n1. `FileOrPathExists(path string) bool`: Checks if a file or directory exists at the given path.\n2. `CopyFile(src, dest string) error`: Copies a file from the source path to the destination path.\n3. `CreateDirectoryIfNotExists(path string, perm os.FileMode) error`: Creates a directory at the given path with the specified permissions if it does not already exist.\n4. `CreateFileIfNotExists(fileName string) error`: Creates a new file at the given path if it does not already exist.\n\nEach function should handle potential errors and return them to the caller if necessary. Write unit tests for each function to ensure they work as expected under various conditions, including both \"happy\" paths (where the operation should succeed) and \"unhappy\" paths (where the operation should fail and return an error).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the struct keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure interface."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "function", "instruction": "Your code should include a function named sort_data."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named get_request."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named get_profile."}, {"type": "combination", "instruction": "You should define an interface named get_request that includes these methods ['create_message', 'check_tys']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "13": [0, 1, 2, 10]}, "question_id": 490}
{"question": "\n\nDesign a class `BinarySearchTree` that encapsulates the operations of a binary search tree (BST) and provides the following functionalities:\n\n1. `insert(int value)`: Inserts a new value into the BST.\n2. `findTargetSum(int target)`: Returns `true` if there exist two elements in the BST that add up to the given target sum, otherwise returns `false`.\n3. `flattenToLinkedList()`: Flattens the BST into a sorted linked list in-place (using the right pointers to point to the next node in the list).\n4. `balance()`: Balances an unbalanced BST to become a height-balanced BST.\n5. `constructFromPreorder(vector<int> &preorder)`: Constructs a BST from a given preorder traversal vector.\n\nThe BST nodes should have the following structure:\n\n```cpp\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n```\n\nThe linked list nodes should have the following structure:\n\n```cpp\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should not be a global variable."}, {"type": "variable", "instruction": "Variable status, the initial value should be view."}, {"type": "function", "instruction": "Your code should include a function named configure_bill."}, {"type": "interface", "instruction": "Your code should define an interface named remove_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SortInfoRecord."}, {"type": "combination", "instruction": "You should define an interface named remove_punish that includes these methods ['display_order', 'remove_msg', 'generate_profile']."}, {"type": "combination", "instruction": "Your code should define a class named SortInfoRecord that implements the remove_punish interface."}, {"type": "combination", "instruction": "The function configure_bill should take ['token', 'log', 'item'] as parameters."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4], "6": [0, 1, 2, 3, 4], "9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 8, 10], "13": [0, 1, 2, 3, 7]}, "question_id": 491}
{"question": "\n\nWrite a Go program that defines a custom static code analysis tool to enforce a coding style where variable declarations inside `if` statements should be as short as possible. The tool should be named `IfShortener` and it should check for `if` statements where a variable is declared before the `if` statement but is only used within the scope of the `if` block. The tool should suggest converting such variable declarations into short variable declarations within the `if` statement itself.\n\nFor example, given the following code snippet:\n```go\nx := someFunction()\nif x > 0 {\n    fmt.Println(\"x is positive\")\n}\n```\nThe `IfShortener` tool should suggest refactoring it to:\n```go\nif x := someFunction(); x > 0 {\n    fmt.Println(\"x is positive\")\n}\n```\n\nThe program should include the `IfShortener` tool implementation and test cases to verify its correctness.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the default keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, type should be int."}, {"type": "variable", "instruction": "Variable token, the initial value should be notification."}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named check_account."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named ConfigureView."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_token."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv']."}, {"type": "file", "instruction": "Your code should use the function check_account from the library time."}, {"type": "combination", "instruction": "In your code, the class ConfigureView should have these methods ['transform_dwa']."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 18], "9": [0, 1, 2, 3, 7, 18], "10": [0, 1, 2, 3, 7, 18], "12": [0, 1, 2, 3, 11, 18], "16": [0, 1, 2, 3, 15, 18], "17": [0, 1, 2, 3, 13, 18]}, "question_id": 492}
{"question": "\n\nCreate a Java program that simulates a simplified version of the Minecraft chunk loading system. The program should allow users to select a chunk area size and determine if a given chunk position is within the range of the player's current chunk position. The chunk area sizes are predefined and correspond to square areas of chunks around the player's current chunk.\n\nThe program should include the following components:\n\n1. A `ChunkPos` class that represents the position of a chunk in the Minecraft world. It should have two integer properties, `x` and `z`, representing the chunk's coordinates.\n\n2. An `Enum` called `ChunkArea` that defines the possible chunk area sizes with their corresponding names and range values. The range value determines how far from the player's current chunk position the area extends in all directions.\n\n3. A `ChunkAreaSetting` class that allows users to select a chunk area size and check if a given chunk position is within the selected range. It should also provide a method to simulate retrieving chunks within the selected range, assuming the player's current chunk position is at the origin (0,0).\n\n4. A main method to demonstrate the functionality of the `ChunkAreaSetting` class by selecting a chunk area size, checking if specific chunk positions are within range, and printing out the simulated chunks within the selected range.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, type should be List."}, {"type": "variable", "instruction": "Variable notification, should not be a global variable."}, {"type": "variable", "instruction": "Variable notification, the initial value should be account."}, {"type": "function", "instruction": "Your code should include a function named remove_log."}, {"type": "interface", "instruction": "Your code should define an interface named display_event."}, {"type": "class", "instruction": "Your code should define a class named Token."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_view."}, {"type": "combination", "instruction": "In your code, the class Token should have these properties ['tys', 'record', 'message']."}, {"type": "combination", "instruction": "The function remove_log should take ['inventory', 'tys'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_view, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 11 lines."}], "instruction_dependence": {"4": [0, 1, 3, 15], "5": [0, 1, 3, 15], "6": [0, 1, 3, 15], "10": [0, 1, 9, 15], "12": [0, 1, 9, 15], "13": [0, 1, 7, 15], "14": [0, 1, 11, 15]}, "question_id": 493}
{"question": "Implement a class in C++ similar to the python library terminaltables\npython example:\n```\nfrom terminaltables import AsciiTable\ntable_data = [\n    ['Heading1', 'Heading2'],\n    ['row1 column1', 'row1 column2'],\n    ['row2 column1', 'row2 column2'],\n    ['row3 column1', 'row3 column2']\n]\ntable = AsciiTable(table_data)\nprint table.table\n```\nOutput:\n```\n+--------------+--------------+\n| Heading1     | Heading2     |\n+--------------+--------------+\n| row1 column1 | row1 column2 |\n| row2 column1 | row2 column2 |\n| row3 column1 | row3 column2 |\n+--------------+--------------+\n```\n\nC++ implementation needs to meet the following requirements:\n1. Table output display, support for titles, support for directly passing in vector<vector> and using the first row as header, support for missing rows/columns;\n2. Support for passing in different types by row and automatically outputting after ToString: `table = AsciiTable(vector<string>, vector<float>, vector<int>)`\n3. Support for incremental output of table, the width of the incremental part of the column adapts automatically: `table.delta_table()`\n4. Support for outputting custom types to table rows and columns, only need to find the `ToString(const Type &f)` function\n5. Support for expanding one row to pass in any number of any type, such as `table.append_row(int index, string name, float auc, float label, float pred)`", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "function", "instruction": "Your code should include a function named process_transaction."}, {"type": "interface", "instruction": "Your code should define an interface named generate_shipment."}, {"type": "class", "instruction": "Your code should define a class named ModifyInventoryStatus."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_request."}, {"type": "combination", "instruction": "You should define an interface named generate_shipment that includes these methods ['create_notification', 'manage_item']."}, {"type": "combination", "instruction": "Your code should define a class named ModifyInventoryStatus that implements the generate_shipment interface."}, {"type": "combination", "instruction": "The function process_transaction should return a vector as its result."}], "instruction_dependence": {"7": [0, 1, 4], "8": [0, 1, 4, 5], "9": [0, 1, 3]}, "question_id": 494}
{"question": "Please solve the following problem using the OpenCV library: Given a black and white image, where the background color is black and the foreground is white, count the number of triangles in the image.\nResponding to the problem requires meeting the following requirements:\n1. Define the Python function find_triangles(), which has no input parameters and returns the number of triangles.\n2. The image file is \"blackwhite_geometry.png\", located in the same path as the code.\n3. The image contains various geometric shapes: triangles, polygons, etc.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the and keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named retrieve_cut."}, {"type": "file", "instruction": "Your code should be organized in a package named update_account."}, {"type": "combination", "instruction": "The function retrieve_cut should return a list as its result."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 11], "10": [0, 1, 2, 8, 11]}, "question_id": 495}
{"question": "You are given a string `word` starting from index **0**.\n\nIn one operation, you can choose any index `i` in `word` and modify `word[i]` into any lowercase English letter.\n\nPlease return the **minimum** number of operations to eliminate all adjacent **approximately equal** characters in `word`.\n\nTwo characters `a` and `b` are said to be **approximately equal** if `a == b` or `a` and `b` are adjacent in the alphabet.\n\n**Example 1:**\n\n```\n**Input:** word = \"aaaaa\"\n**Output:** 2\n**Explanation:** We can transform the word into \"a***c***a***c***a\" where there are no adjacent approximately equal characters.\nEliminating all adjacent approximately equal characters in word requires at least 2 operations.\n\n```\n\n**Example 2:**\n\n```\n**Input:** word = \"abddez\"\n**Output:** 2\n**Explanation:** We can transform the word into \"***y***bd***o***ez\" where there are no adjacent approximately equal characters.\nEliminating all adjacent approximately equal characters in word requires at least 2 operations.\n\n```\n\n**Example 3:**\n\n```\n**Input:** word = \"zyxyxyz\"\n**Output:** 3\n**Explanation:** We can transform the word into \"z***a***x***a***x***a***z\" where there are no adjacent approximately equal characters.\nEliminating all adjacent approximately equal characters in word requires at least 3 operations.\n\n```\n\n\n**Hints:**\n\n* `1 <= word.length <= 100`\n* `word` contains only lowercase English letters.\n\nPlease complete the following class implementation:\n```cpp\nclass Solution {\npublic:\n    int removeAlmostEqualCharacters(string word);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the reinterpret_cast keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named handle_form."}, {"type": "file", "instruction": "Your code should import the following libraries ['algorithm', 'vector']."}, {"type": "file", "instruction": "Your code should use the function handle_form from the library map."}], "instruction_dependence": {"7": [0, 1, 2, 6]}, "question_id": 496}
{"question": "\n\nDesign a Go program that implements a `ResolversContainerFactory` which is responsible for creating a set of resolvers for blockchain data retrieval. Each resolver is a component that knows how to fetch and process specific types of data (e.g., blocks, transactions, accounts) from the network or local storage.\n\nThe `ResolversContainerFactory` should use the provided `FactoryArgs` struct for its configuration. The factory should have a method `CreateResolvers()` that returns a map of resolvers, where each resolver is identified by a string key that corresponds to the type of data it handles.\n\nThe program should also include a simple `Resolver` interface with at least one method `Resolve(dataKey []byte) ([]byte, error)`, which takes a data key and returns the corresponding data or an error if the data cannot be found or processed.\n\nImplement a `BlockResolver` that satisfies the `Resolver` interface and is capable of resolving block data. For simplicity, you can assume that the `BlockResolver` retrieves data from a provided `dataRetriever.StorageService`.\n\nProvide test cases to verify that the `ResolversContainerFactory` correctly creates a `BlockResolver` and that the `BlockResolver` can resolve a block data key.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable punish, type should be map."}, {"type": "variable", "instruction": "Variable punish, the initial value should be event."}, {"type": "function", "instruction": "Your code should include a function named add_view."}, {"type": "class", "instruction": "Your code should define a class named CalculateInfoRequest."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "In your code, the class CalculateInfoRequest should have these methods ['retrieve_item']."}, {"type": "combination", "instruction": "The function add_view should return a struct as its result."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "4": [0, 1], "7": [0, 6], "8": [0, 6], "9": [0, 5]}, "question_id": 497}
{"question": "Please use unittest to write unit test cases for the following python function:\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\nThe answer should meet the following requirements:\n1. These unit test cases should use the testing framework correctly, with reasonable input and assertion of test results.\n2. Please write the test code in a markdown ```python``` wrapper.\n3. Please only provide test code and unittest.main(), to execute all test cases and output test results. There is no need to write or import the function under test.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the try keyword."}, {"type": "function", "instruction": "Your code should include a function named create_report."}, {"type": "interface", "instruction": "Your code should define an interface named search_event."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "combination", "instruction": "The function create_report should take ['product'] as parameters."}, {"type": "combination", "instruction": "The function create_report should return a list as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6], "8": [0, 1, 2, 3, 4, 5], "9": [0, 1, 2, 3, 4, 5]}, "question_id": 498}
{"question": "\n\nWrite a Go program that determines if a binary tree is symmetric around its center. A binary tree is symmetric if the left subtree is a mirror reflection of the right subtree.\n\nImplement three functions `IsSymmetric`, `IsSymmetric2`, and `IsSymmetricProMax` that take the root node of a binary tree and return a boolean indicating whether the tree is symmetric or not.\n\n- `IsSymmetric`: Implement this function using recursive approach.\n- `IsSymmetric2`: Implement this function using iterative approach with a queue.\n- `IsSymmetricProMax`: Implement this function with any optimized approach you can think of, ensuring the best possible performance.\n\nThe TreeNode structure is defined as follows:\n\n```go\ntype TreeNode struct {\n    Val   int\n    Left  *TreeNode\n    Right *TreeNode\n}\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, type should be int."}, {"type": "variable", "instruction": "Variable punish, the initial value should be customer."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_user."}, {"type": "interface", "instruction": "Your code should define an interface named configure_room."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named AddView."}, {"type": "file", "instruction": "Your code should not use the following libraries ['net']."}, {"type": "combination", "instruction": "You should initialize an object named product as an instance of the AddView class using ['dwa', 'inventory', 'record'] for initialization."}, {"type": "combination", "instruction": "The function generate_user should take ['punish'] as parameters."}, {"type": "combination", "instruction": "The function generate_user should return a struct as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "11": [0, 1, 2, 10], "14": [0, 1, 2, 12], "15": [0, 1, 2, 9], "16": [0, 1, 2, 9]}, "question_id": 499}
{"question": "Please write a Java program to implement a simple calculator class `SimpleCalculator`, which can perform basic arithmetic operations: addition, subtraction, multiplication, and division. Ensure that your implementation can handle integer operations, and in the case of a division operation where the divisor is 0, return a specific error message instead of throwing an exception.\n\nYou need to provide a method `calculate` that accepts three parameters: two integers `num1` and `num2`, and a character `operator`, representing the operation to be performed (`'+'` for addition, `'-'` for subtraction, `'*'` for multiplication, `'/'` for division). This method should return a string containing the result of the operation or an error message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public String calculate(int num1, int num2, char operator) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the new keyword."}, {"type": "structural control", "instruction": "Your code should use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, should be a global variable."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_view."}, {"type": "interface", "instruction": "Your code should define an interface named search_report."}, {"type": "combination", "instruction": "You should define an interface named search_report that includes these methods ['add_event', 'execute_transaction', 'handle_user']."}, {"type": "combination", "instruction": "The function execute_view should take ['dwa', 'tys', 'customer'] as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 7], "9": [0, 1, 2, 7], "12": [0, 1, 2, 11], "13": [0, 1, 2, 10]}, "question_id": 500}
{"question": "\n\nDesign a Java Spring Boot application that serves as a backend for a dashboard system. The application should expose a REST API to manage a collection of widgets. Each widget has a unique identifier, a name, a description, and a type (e.g., \"chart\", \"table\", \"text\"). The API should support the following operations:\n\n1. Create a new widget with a given name, description, and type.\n2. Retrieve a list of all widgets.\n3. Retrieve a single widget by its unique identifier.\n4. Update the details of an existing widget by its unique identifier.\n5. Delete a widget by its unique identifier.\n\nThe application should not use a database, but rather store the widgets in memory using a simple data structure (e.g., a map or list). Ensure that the application is properly structured, with separate layers for the controller, service, and repository.\n\nProvide a solution with the necessary Spring Boot annotations and classes to implement the REST API described above. Include test cases to verify the correctness of the API operations.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, should not be a global variable."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['add_item', 'remove_inventory']."}, {"type": "interface", "instruction": "Your code should define an interface named create_customer."}, {"type": "class", "instruction": "Your code should define a class named CustomerMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_event."}, {"type": "combination", "instruction": "Your code should define a class named CustomerMsg that implements the create_customer interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_event, which should contain these classes ['Report']."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7, 16], "9": [0, 1, 2, 3, 4, 7, 16], "14": [0, 1, 2, 3, 4, 11, 12, 16], "15": [0, 1, 2, 3, 4, 12, 13, 16]}, "question_id": 501}
{"question": "\n\nDesign a Go program that generates a list of fake user profiles for testing purposes. Each user profile should contain the following fields: Name, Gender, Email, Phone, Country, UserAgent, and BirthdayMonth. The program should use the `gofakeit` library to generate random values for these fields.\n\nThe program should include a function `GenerateFakeUsers` that takes an integer `n` as an argument and returns a JSON-encoded byte slice representing a list of `n` fake user profiles. Each user profile should be represented as a struct with appropriate JSON tags.\n\nAdditionally, the program should include a main function that demonstrates the usage of `GenerateFakeUsers` by generating a list of 5 fake user profiles and printing the JSON string to the standard output.\n\nEnsure that all necessary packages are imported and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the range keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "interface", "instruction": "Your code should define an interface named get_room."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named CreateLogNotification."}, {"type": "file", "instruction": "Your code should import the following libraries ['net']."}, {"type": "combination", "instruction": "Your code should define a class named CreateLogNotification that implements the get_room interface."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 4, 6]}, "question_id": 502}
{"question": "Please write a Java program which includes a class named `DateManager` that contains a static method `resetTimeMarkers`. This method is used to calculate and return an array of type `long` containing three time points: the start of today, the start of yesterday, and the start of this year. These three time points are represented as timestamps in milliseconds, corresponding to 0:00 of the current day, 0:00 of the previous day, and 0:00 on January 1st of the current year, respectively. Ensure that the returned timestamps are accurate and take timezone effects into account.\n\nPlease implement the code according to the following requirements:\n\n1. Use the `java.util.Calendar` class to get and set the time.\n2. In the array returned by the method, the first element should be the timestamp for the start of today, the second element should be the timestamp for the start of yesterday, and the third element should be the timestamp for the start of this year.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Calendar;\nimport java.util.TimeZone;\npublic class DateManager {\n    public static long[] resetTimeMarkers() {\n    }\n    public static void checkTimeMarkers(long[] timeMarkers) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Your code should define an enumeration named Role"}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable data, the initial value should be msg."}, {"type": "variable", "instruction": "Variable data should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named display_log."}, {"type": "class", "instruction": "Your code should define a class named ShipmentMessage."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_tys."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_tys, which should contain these classes ['ProcessReport', 'AnalyzeRecordTys']."}], "instruction_dependence": {"7": [0, 1, 5], "8": [0, 1, 5], "9": [0, 1, 5], "13": [0, 1, 11, 12]}, "question_id": 503}
{"question": "\nWrite a program that compresses a binary matrix using the Quadtree encoding algorithm. The input matrix is of size `N x N`, where `N` is a power of 2, and contains only 0s and 1s. The Quadtree encoding algorithm works as follows:\n\n1. If the current submatrix contains all 0s, it is encoded as '0'.\n2. If the current submatrix contains all 1s, it is encoded as '1'.\n3. If the current submatrix contains a mix of 0s and 1s, it is divided into four equal-sized quadrants, and each quadrant is recursively encoded. The four encoded quadrants are then concatenated in the order of top-left, top-right, bottom-left, and bottom-right, and the concatenated string is enclosed in parentheses.\n\nThe program should read the size of the matrix `N` and the matrix elements from standard input, perform the Quadtree encoding, and output the encoded string to standard output.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should use the union keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable room should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named insert_log."}, {"type": "class", "instruction": "Your code should define a class named FormCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named search_user."}, {"type": "file", "instruction": "Your code should not use the following libraries ['stack', 'vector']."}, {"type": "combination", "instruction": "You should initialize an object named user as an instance of the FormCustomer class using ['info', 'record'] for initialization."}, {"type": "combination", "instruction": "The function insert_log should take ['kms', 'customer'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 14], "7": [0, 1, 2, 3, 5, 14], "12": [0, 1, 2, 3, 9, 14], "13": [0, 1, 2, 3, 8, 14]}, "question_id": 504}
{"question": "\n\nIn a fantasy game, each character can equip a limited number of magical items called `AMateria`. Each `AMateria` can be used to cast a spell on a target. The `Character` class is responsible for managing the `AMateria` objects a character can equip. The maximum number of `AMateria` objects a character can equip is defined by a constant `_size`.\n\nYour task is to implement the `Character` class and the `AMateria` interface, as well as a concrete `AMateria` implementation called `FireSpell`. The `Character` class should allow equipping, unequipping, and using `AMateria` objects. The `FireSpell` class should print a message indicating that a fire spell has been cast on the target.\n\nThe `AMateria` interface should have at least the following pure virtual functions:\n- `clone()`: which returns a new instance of the same type of `AMateria`.\n- `use(ICharacter&)`: which takes a reference to an `ICharacter` and performs the spell's effect on it.\n\nThe `Character` class should have the following public member functions:\n- A constructor that takes a `std::string` name.\n- A copy constructor.\n- A destructor.\n- An assignment operator.\n- `equip(AMateria*)`: which takes a pointer to an `AMateria` and equips it if there is an empty slot.\n- `unequip(int)`: which takes an index and unequips the `AMateria` at that index without deleting it.\n- `use(int, ICharacter&)`: which takes an index and a reference to an `ICharacter` and uses the `AMateria` at that index on the target.\n\nThe `Character` class should also have a private helper function:\n- `_findEmptySlot()`: which returns the index of the first empty slot or -1 if there is no empty slot.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should not be a global variable."}, {"type": "variable", "instruction": "Variable item, the initial value should be cut."}, {"type": "function", "instruction": "Your code should include a function named calculate_log."}, {"type": "interface", "instruction": "Your code should define an interface named remove_report."}, {"type": "class", "instruction": "Your code should define a class named TransactionShipment."}, {"type": "file", "instruction": "Your code should be organized in a package named set_bill."}, {"type": "combination", "instruction": "Your code should define a class named TransactionShipment that implements the remove_report interface."}, {"type": "combination", "instruction": "In your code, the class TransactionShipment should have these properties ['transaction', 'profile']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_bill, which should contain these classes ['Record', 'Dwa']."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "11": [0, 1, 8, 9], "12": [0, 1, 9], "13": [0, 1, 9, 10]}, "question_id": 505}
{"question": "\n\nDesign a C++ program that simulates a simple inventory system for a bicycle shop that specializes in mountain bikes (`RowerGorski` in Polish). The shop has a class `RowerGorski` representing a mountain bike with the following features:\n\n- A constructor that prints \"Mountain Bike Created\".\n- A destructor that prints \"Mountain Bike Destroyed\".\n- A member function `info()` that prints \"This is a Mountain Bike\".\n\nAdditionally, create a class `BikeInventory` that manages an inventory of `RowerGorski` objects. The `BikeInventory` class should have the following functionalities:\n\n- A method `addBike()` that adds a new `RowerGorski` to the inventory and prints the current number of bikes in the inventory.\n- A method `sellBike()` that removes a `RowerGorski` from the inventory if there is at least one bike available, and prints the current number of bikes in the inventory. If no bikes are available, it should print \"No bikes available to sell\".\n- A method `inventoryCount()` that returns the current number of bikes in the inventory.\n\nWrite a main function that demonstrates the following:\n- Creating an instance of `BikeInventory`.\n- Adding three `RowerGorski` bikes to the inventory.\n- Selling two bikes.\n- Printing the final count of bikes in the inventory.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the friend keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "function", "instruction": "Your code should include a function named insert_product."}, {"type": "class", "instruction": "Your code should define a class named RoomData."}, {"type": "combination", "instruction": "In your code, the class RoomData should have these methods ['set_account']."}], "instruction_dependence": {"8": [0, 1, 2, 7]}, "question_id": 506}
{"question": "\nWater Purchase Optimization\n\nAlice needs to buy water for her hostel which has `n` students. Each student requires exactly 1 liter of water per day. Alice can buy water in two ways:\n\n1. From a nearby shop where 1 liter of water costs `a` dollars.\n2. From a water delivery service that charges `b` dollars for every 2 liters of water.\n\nAlice wants to minimize the cost of buying exactly `n` liters of water. However, the water delivery service has a special offer: for orders of even liters, they charge a discounted rate of `c` dollars for every 2 liters, where `c` is less than or equal to `2 * a`.\n\nWrite a program that calculates the minimum amount of money Alice has to spend to buy exactly `n` liters of water.\n\n**Input**:\nThe first line contains an integer `q` (1 ≤ q ≤ 10^5), the number of test cases.\nEach of the next `q` lines describes a test case with three integers `n`, `a`, and `c` (1 ≤ n, a, c ≤ 10^9, c ≤ 2 * a), where `n` is the number of liters of water Alice needs to buy, `a` is the cost of 1 liter of water at the shop, and `c` is the cost of 2 liters of water from the delivery service.\n\n**Output**:\nFor each test case, print a single line containing one integer — the minimum amount of money Alice has to spend to buy exactly `n` liters of water.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the try keyword."}, {"type": "structural control", "instruction": "Your code should use data structure queue."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable profile, type should be float."}, {"type": "file", "instruction": "Your code should be organized in a package named update_data."}, {"type": "file", "instruction": "Your code should import the following libraries ['string']."}, {"type": "file", "instruction": "Your code should use the function submit_form from the library stdlib."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10]}, "question_id": 507}
{"question": "\n\nDesign a Go program that simulates a simple betting system with the following requirements:\n\n1. Implement a function `CreateBet` that takes a description, terms, amount, moderator address, and expiration date to create a new `Bet`. The function should generate a unique `bet_id` and set the initial status to \"open\". The `date_created` and `date_updated` should be set to the current time.\n\n2. Implement a function `PlaceBet` that allows an `Account` to place a bet by creating a `Player` entry. The function should take a `bet_id`, an `address`, and a boolean `inFavor`. It should check if the bet is still open and not expired.\n\n3. Implement a function `SignBet` that allows an `Account` to sign a bet by creating a `Signature` entry. The function should take a `bet_id`, an `address`, a `nonce`, and a `signature` string. It should check if the account has not already signed the bet and if the bet is still open.\n\n4. Implement a function `CloseBet` that takes a `bet_id` and changes the status of the bet to \"closed\". It should update the `date_updated` to the current time.\n\n5. Write test cases to verify the correctness of these functions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should use the else keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure struct."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named analyze_dwa."}, {"type": "function", "instruction": "Your code should not use any functions from the ['remove_msg', 'delete_profile', 'configure_event', 'retrieve_data']."}, {"type": "class", "instruction": "Your code should define a class named Item."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named process_order."}, {"type": "combination", "instruction": "You should initialize an object named account as an instance of the Item class using ['message', 'credit'] for initialization."}, {"type": "combination", "instruction": "The function analyze_dwa should return a float64 as its result."}], "instruction_dependence": {"7": [0, 1, 2, 6], "11": [0, 1, 2, 10], "13": [0, 1, 2, 10], "14": [0, 1, 2, 8]}, "question_id": 508}
{"question": "Write a Python program days_between_dates, where both arguments are date strings in the format of YYYY-MM-DD. The function returns the number of days between these two dates. If the second date comes first, it returns a negative number. If either date is invalid, it returns None.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the del keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "class", "instruction": "Your code should define a class named TransformNotification."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_report."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_report, which should contain these classes ['TysTransaction', 'UpdateRequest', 'TransformStatus']."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_report, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 6, 7], "9": [0, 1, 2, 7]}, "question_id": 509}
{"question": "\n\nIn a population of organisms, individuals may possess different genotypes that affect their traits. For the purpose of this problem, we will consider a simplified model of inheritance for a single gene with two alleles: a dominant allele (A) and a recessive allele (a). The possible genotypes are AA (homozygous dominant), Aa (heterozygous), and aa (homozygous recessive).\n\nGiven a population with six different genotype pairings, we want to calculate the expected number of offspring displaying the dominant phenotype in the next generation. The six genotype pairings are:\n\n1. AA-AA\n2. AA-Aa\n3. AA-aa\n4. Aa-Aa\n5. Aa-aa\n6. aa-aa\n\nThe file `genotype_counts.txt` contains the number of couples in the population that correspond to each of the six genotype pairings listed above, separated by spaces.\n\nThe probability that an offspring will display the dominant phenotype from each genotype pairing is as follows:\n\n1. AA-AA: 100% (1)\n2. AA-Aa: 100% (1)\n3. AA-aa: 100% (1)\n4. Aa-Aa: 75% (0.75)\n5. Aa-aa: 50% (0.5)\n6. aa-aa: 0% (0)\n\nAssuming that each couple has exactly two offspring, write a function `calculate_dominant_offspring` that reads the number of couples from a file and calculates the expected number of offspring displaying the dominant phenotype.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_token."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Flask', 'Django', 'pandas']."}], "instruction_dependence": {"4": [0, 1, 3]}, "question_id": 510}
{"question": "Implement a thread pool using C++ that supports the following interfaces:\n1. `explicit ThreadPool(size_t)`: Initialize a thread pool with n threads\n2. `explicit ThreadPool(const std::string& thread_name, size_t threads,\n                      std::function<void(void)>&& init_func);`: Support setting a thread name prefix and a thread initialization function\n3. `template<class F, class... Args>\n    void enqueue(F&& f, Args&&... args)`: Support submitting any function to the thread pool for execution", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the continue keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "function", "instruction": "Your code should include a function named transform_item."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named delete_punish."}, {"type": "class", "instruction": "Your code should define a class named GetRecordTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_item."}, {"type": "file", "instruction": "Your code should import the following libraries ['algorithm']."}, {"type": "combination", "instruction": "You should define an interface named delete_punish that includes these methods ['check_tys']."}, {"type": "combination", "instruction": "In your code, the class GetRecordTransaction should have these properties ['event', 'punish', 'cut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_item, which should contain these classes ['DwaShipment', 'AddProfileEvent']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "11": [0, 1, 2, 7], "12": [0, 1, 2, 8], "13": [0, 1, 2, 8, 9]}, "question_id": 511}
{"question": "\n\nYou are given a sequence of `n` integers. Your task is to find the minimum number of elements that must be removed from the sequence so that the remaining sequence is sorted in strictly increasing order starting from 1. If it is not possible to achieve such a sequence, return -1.\n\nWrite a function `min_removals_to_sort` that takes an integer `n` and an array `num` of integers as input and returns the minimum number of elements to remove to achieve the desired sequence. If it is not possible, the function should return -1.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "structural control", "instruction": "Your code should use data structure stack."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should be a global variable."}, {"type": "variable", "instruction": "Variable record should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named retrieve_data."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named handle_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SortProduct."}], "instruction_dependence": {"7": [0, 1, 6], "8": [0, 1, 6], "10": [0, 1, 9], "12": [0, 1, 11]}, "question_id": 512}
{"question": "You are given an integer array `nums` indexed from **0**.\n\n\nPlease find and return the maximum value of index triplets from all that satisfy `i < j < k`. If all the values of the triplets that satisfy the conditions are negative, return `0`.\n\n\nThe value of the **index triplet** `(i, j, k)` is `(nums[i] - nums[j]) * nums[k]`.\n\n\n \n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [12,6,1,2,7]\n**Output:** 77\n**Explanation:** the value of index triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77. \nIt can be proven that there is no ordered index triplet with a value greater than 77.\n\n```\n\n**Example 2：**\n\n\n\n```\n\n**Input:** nums = [1,10,3,4,19]\n**Output:** 133\n**Explanation:** the value of index triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be proven that there is no ordered index triplet with a value greater than 133. \n\n```\n\n**Example 3：**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 0\n**Explanation:** The only index triplet (0, 1, 2) has a negative value, (nums[0] - nums[1]) * nums[2] = -3. Therefore, the answer is 0.\n\n```\n\n \n\n\n**Note：**\n\n\n* `3 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\nPlease complete the following implementation\n```python\nclass Solution(object):\n    def maximumTripletValue(self, nums):\n        '''\n        :type nums: List[int]\n        :rtype: int\n        '''\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the while keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, type should be tuple."}, {"type": "function", "instruction": "Your code should include a function named submit_room."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"5": [0, 1, 4, 8], "7": [0, 1, 6, 8]}, "question_id": 513}
{"question": "\n\nDesign a Go program that initializes a PostgreSQL database connection using the Gorp library, applies database migrations, and provides functionality to close the database connection. The program should be able to handle different database configurations for production and testing environments.\n\nThe database configuration should include parameters such as host, port, user, password, and database name. The program should also be able to apply database migrations both upwards and downwards, given a directory path where the migration files are located.\n\nAdditionally, the program should include a function to truncate specific tables for test database cleanup purposes.\n\nWrite a Go program that includes the following functions:\n1. `InitDB(config config.DatabaseConfig) *gorp.DbMap`: Initializes the database connection and returns a `gorp.DbMap` instance.\n2. `CloseDB(database *gorp.DbMap)`: Closes the database connection.\n3. `InitTestDb(t *testing.T)`: Initializes the test database and truncates specific tables.\n4. `CleanTestDb(t *testing.T)`: Closes the test database connection.\n5. `ApplyMigrations(operation, path string, database *sql.DB) error`: Applies database migrations in the specified direction (\"up\" or \"down\") from the given path.\n\nInclude a sample configuration and test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named create_msg."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named StatusBill."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "The function create_msg should take ['credit', 'request', 'data'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"5": [0, 1, 4, 9], "7": [0, 1, 6, 9], "8": [0, 1, 3, 9]}, "question_id": 514}
{"question": "Use Go language to write code to implement JSON serialization and deserialization for a user structure `User`. The structure `User` contains `FirstName`, `LastName` and `Age` fields. \nRequirements: \nThe `FirstName` and `LastName` fields should start with a lowercase letter in JSON (i.e., `firstName` and `lastName`).\nThe `Age` field should not be displayed in JSON, even if it has a value. \nThe function signatures to be implemented are: `func SerializeUser(u User) (string, error)` and `func DeserializeUser(jsonStr string) (User, error)`.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the select keyword."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "function", "instruction": "Your code should include a function named configure_shipment."}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_notification', 'update_order', 'transform_view']."}, {"type": "interface", "instruction": "Your code should define an interface named configure_bill."}, {"type": "class", "instruction": "Your code should define a class named MsgToken."}, {"type": "combination", "instruction": "In your code, the class MsgToken should have these properties ['tys']."}, {"type": "combination", "instruction": "The function configure_shipment should take ['tys', 'user', 'log'] as parameters."}, {"type": "combination", "instruction": "The function configure_shipment should return a slice as its result."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6], "13": [0, 1, 2, 3, 12], "14": [0, 1, 2, 3, 9], "15": [0, 1, 2, 3, 9]}, "question_id": 515}
{"question": "\n\nDesign a Go package named `producer` that provides an interface to interact with a hypothetical Producer service responsible for managing ETL (Extract, Transform, Load) cycles and schedules for various data sources.\n\nThe package should include the following functionalities:\n\n1. Trigger an Immediate ETL cycle for a specific connection, optionally for a specific data source and cycle. If the data source and cycle are not provided, it should trigger the ETL for all data sources in the configuration.\n\n2. Retrieve a list of ETL schedules for a given organization, with optional filters for specific applications and data sources.\n\nThe package should handle HTTP requests, basic authentication, JSON encoding/decoding, and error handling. It should also provide logging capabilities.\n\nImplement the `Context` struct to hold the necessary configuration for connecting to the Producer service, including the service URL, client credentials, and a logger instance.\n\nImplement the `ImmediateETL` method to trigger an ETL cycle and the `GetSchedules` method to fetch ETL schedules.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure channel."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Your code should define an enumeration named Language"}, {"type": "variable", "instruction": "Variable user, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named modify_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named RetrieveRecord."}, {"type": "combination", "instruction": "You should initialize an object named status as an instance of the RetrieveRecord class using ['room', 'kms', 'shipment'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named RetrieveRecord that implements the modify_notification interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 25 lines."}], "instruction_dependence": {"8": [0, 1, 6, 14], "10": [0, 1, 9, 14], "12": [0, 1, 11, 14], "13": [0, 1, 9, 11, 14]}, "question_id": 516}
{"question": "Implement Python function `marginal(m: numpy.ndarray): numpy.ndarray`, such that give a matrix `m` representing the joint distribution of two random variables `X` and `Y`, where `m[i][j]=P(X=i, Y=j)`, return the marginal distribution of `X` and `Y` representing by two vectors.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure tuple."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, type should be bool."}, {"type": "function", "instruction": "Your code should include a function named insert_status."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named UpdateTransactionKms."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_kms."}, {"type": "combination", "instruction": "You should initialize an object named product as an instance of the UpdateTransactionKms class using ['kms', 'msg'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_kms, which should contain these classes ['ConfigureStatus']."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 8], "11": [0, 1, 8, 9]}, "question_id": 517}
{"question": "\n\nDesign a class `Date` that represents a calendar date with year, month, and day components. The class should be able to output the date as a string in the format \"YYYY-MM-DD\" using the overloaded `operator<<` for both `std::ostream` and `std::wostream`. Additionally, the class should provide conversion operators to `std::string` and `std::wstring` that return the date in the same string format.\n\nThe `Date` class should have a nested `Value` struct that holds the year, month, and day as integers. The class should also have a constructor that takes three integers for the year, month, and day, and a member function `value()` that returns a const reference to the `Value` struct.\n\nImplement the `Date` class following the above specifications and provide test cases to verify the correctness of the implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Your code should define an enumeration named Language"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "function", "instruction": "Your code should include a function named remove_record."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['delete_report', 'set_transaction', 'execute_cut']."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'vector']."}, {"type": "file", "instruction": "Your code should use the function remove_record from the library stdlib."}, {"type": "file", "instruction": "Your code should not use the following libraries ['iostream']."}], "instruction_dependence": {"4": [0, 1, 2], "6": [0, 1, 5], "9": [0, 1, 8]}, "question_id": 518}
{"question": "\n\nImplement a disk-backed external sorting algorithm for large datasets that do not fit into memory. The algorithm should read data from an input source, sort it based on specified ordering columns, and write the sorted data to an output destination. The sorting should be stable, meaning that records with equal keys will retain their relative order.\n\nThe external sorting algorithm should use a combination of in-memory sorting and disk-based merge passes to efficiently sort the data. The in-memory sorting can use any efficient sorting algorithm (e.g., quicksort, heapsort), and the merge passes should merge multiple sorted runs into a single sorted output.\n\nThe input data is represented as a series of batches, where each batch is a collection of columns with a fixed number of rows. Each column has a specific data type, and the sorting should be able to handle different data types.\n\nThe `externalSorter` struct provided in the code snippet is the starting point for the implementation. The `newExternalSorter` function initializes the sorter with the necessary components, such as an allocator for memory management, an input operator that provides the data, the data types of the input columns, and the ordering columns that specify how the data should be sorted.\n\nThe `externalSorter` should implement the `Operator` interface, which includes the `Init` method for initialization and the `Next` method for retrieving the next batch of sorted data.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the switch keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Your code should define an enumeration named Status"}, {"type": "variable", "instruction": "Variable profile should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named update_item."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_shipment', 'filter_dwa', 'calculate_view', 'modify_order']."}, {"type": "interface", "instruction": "Your code should define an interface named insert_user."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named DwaTys."}, {"type": "file", "instruction": "Your code should import the following libraries ['io', 'net']."}, {"type": "file", "instruction": "Your code should use the function update_item from the library net."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6, 16], "12": [0, 1, 2, 3, 11, 16], "15": [0, 1, 2, 3, 14, 16]}, "question_id": 519}
{"question": "\n\nDesign a simple object-oriented program to model a Bedroom with various components such as walls, a ceiling, a bed, and a lamp. The Bedroom class should have a method `makeBed()` that simulates the action of making the bed and returns a message indicating that the bed has been made.\n\nThe Bedroom class should have the following characteristics:\n- It should have a constructor that takes the name of the bedroom, four Wall objects (each representing one wall of the room), a Ceiling object, a Bed object, and a Lamp object.\n- The Wall class should have a single constructor that takes the direction the wall is facing (e.g., \"North\", \"South\", \"East\", \"West\").\n- The Ceiling class should have a constructor that takes the height and painted color as integers.\n- The Bed class should have a constructor that takes the style of the bed, and four integers representing the dimensions (height, length, width, and pillows).\n- The Lamp class should have a constructor that takes the style of the lamp, a boolean indicating if it is on or off, and the luminosity as an integer.\n- The `makeBed()` method should return a string that includes the message \"The bed is being made\" followed by \"The bed is ready\".\n\nWrite a JUnit test case using parameterized tests to verify the `makeBed()` method's functionality. The test should check if the method returns the correct message based on the provided Bedroom instance.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Variable bill, the initial value should be msg."}, {"type": "variable", "instruction": "Variable bill, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_profile."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Account."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_item."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang']."}, {"type": "combination", "instruction": "You should initialize an object named customer as an instance of the Account class using ['status'] for initialization."}, {"type": "combination", "instruction": "In your code, the class Account should have these properties ['transaction', 'inventory']."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_item, which should contain these classes ['ModifyNotificationData', 'FilterCut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_item, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "9": [0, 1, 8], "13": [0, 1, 10], "14": [0, 1, 10], "15": [0, 1, 10, 11], "16": [0, 1, 11]}, "question_id": 520}
{"question": "\n\nYou are tasked with creating a Django application that manages information about outlets for a retail company. Each outlet is uniquely identified by a UUID. The application should provide two main functionalities:\n\n1. List all the outlets.\n2. Retrieve the details of a specific outlet using its UUID.\n\nWrite a Django view class for each functionality:\n\n- `OutletList` should be a class-based view that returns a JSON response with a list of all outlets. Each outlet in the list should be represented as a dictionary with at least the following keys: `id`, `name`, and `location`.\n- `OutletDetail` should be a class-based view that returns a JSON response with the details of a single outlet specified by its UUID. The response should include the same keys as the `OutletList` view.\n\nAdditionally, define the URL patterns for these views using Django's `url` function. The URL pattern for the `OutletList` view should be the root URL, and the URL pattern for the `OutletDetail` view should capture a UUID as a URL parameter.\n\nEnsure that the UUID_REGEX provided is used to validate the UUID in the URL pattern for the `OutletDetail` view.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable form, type should be float."}, {"type": "class", "instruction": "Your code should define a class named CalculateTransactionCredit."}, {"type": "file", "instruction": "Your code should not use the following libraries ['tensorflow', 'seaborn']."}, {"type": "combination", "instruction": "In your code, the class CalculateTransactionCredit should have these properties ['status', 'transaction', 'order']."}, {"type": "combination", "instruction": "In your code, the class CalculateTransactionCredit should have these methods ['update_event', 'submit_transaction', 'add_view']."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "8": [0, 1, 2, 6], "9": [0, 1, 2, 6]}, "question_id": 521}
{"question": "\n\nDesign a Java program that simulates a blog post service, where users can search for blog posts by title and within a date range. The program should be able to handle the following functionalities:\n\n1. Retrieve a blog post by its unique identifier (ID).\n2. Search for blog posts that contain a specific text in their titles.\n3. Perform a full search on blog posts that contain a specific text and are published within a given date range.\n\nThe blog post data should be represented by a `Post` class, and the data transfer object should be represented by a `PostDTO` class. The `PostService` class should use a `PostRepository` to interact with the data source, which is abstracted for this exercise.\n\nThe `PostService` class should handle cases where a blog post is not found by throwing a custom exception `ResourceNotFoundException`. Additionally, the service should be able to parse date strings into `Instant` objects, providing a default value in case of a parsing error.\n\nImplement the `Post`, `PostDTO`, `PostRepository`, `ResourceNotFoundException`, and `PostService` classes, and provide test cases to verify the correctness of the implemented functionalities.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should not use the return keyword."}, {"type": "structural control", "instruction": "Your code should use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named delete_cut."}, {"type": "interface", "instruction": "Your code should define an interface named process_kms."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 522}
{"question": "\n\nIn a system that manages user permissions, there are several types of permissions that can be granted to users, such as updating permissions, viewing permissions, creating operations, updating operations, creating users, and viewing users. Each permission type is represented by a unique name.\n\nYour task is to write a Go program that defines a `PermissionMatcher` which can check if a given permission name matches a specific permission type. The `PermissionMatcher` should be able to handle two types of permissions: `UpdatePermissions` and `ViewPermissions`. Each permission type should have a corresponding function that returns a `PermissionMatcher` for that type.\n\nThe `PermissionMatcher` should have a method `Match` that takes a permission name and returns `true` if the name matches the permission type, and `false` otherwise.\n\nAdditionally, you need to write test cases using the `testify` suite package to verify the correctness of the `PermissionMatcher`. The test cases should check that the `Match` method correctly identifies the granted permission name among other permission names.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "variable", "instruction": "Variable account, should be a global variable."}, {"type": "variable", "instruction": "Variable account, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_profile', 'filter_user', 'search_credit']."}, {"type": "interface", "instruction": "Your code should define an interface named set_credit."}, {"type": "class", "instruction": "Your code should define a class named DeleteData."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['time', 'fmt']."}, {"type": "file", "instruction": "Your code should use the function process_form from the library strings."}, {"type": "combination", "instruction": "Your code should define a class named DeleteData that implements the set_credit interface."}, {"type": "combination", "instruction": "In your code, the class DeleteData should have these methods ['check_record']."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_room, which should contain these classes ['HandleToken', 'ProcessInventoryStatus', 'Transaction']."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_room, which should contain these functions ."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "6": [0, 3], "10": [0, 9], "13": [0, 12], "14": [0, 8, 9], "15": [0, 9], "16": [0, 9, 11], "17": [0, 11]}, "question_id": 523}
{"question": "Implement posterior update where the prior is a Gamma distribution and the likelihood is a poisson distribution in Python. The function is of the form `posterior_update(alpha_prior, beta_prior, X)`, where `alpha_prior` and `beta_prior` are the parameter of the prior Gamma distribution, and `X` is the data (a list of integers representing the samples from the poisson distribution). The function should output the parameter of the posterior distribution. You are not allowed to use any external package.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the if keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Variable transaction, type should be list."}, {"type": "function", "instruction": "Your code should include a function named analyze_info."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named ModifyProduct."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_credit."}, {"type": "file", "instruction": "Your code should import the following libraries ['Django']."}, {"type": "combination", "instruction": "The function analyze_info should take ['inventory', 'transaction', 'order'] as parameters."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "9": [0, 1, 8], "12": [0, 1, 6]}, "question_id": 524}
{"question": "Please design a simple Java function that handles the price calculation for items in a shopping cart. Given the unit price and quantity of an item, calculate and return the total price of that item. Ensure your code is self-contained and includes the necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.math.BigDecimal;\npublic class ShoppingCartCalculator {\n    public static BigDecimal calculateTotalPrice(BigDecimal unitPrice, int quantity) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the protected keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "function", "instruction": "Your code should include a function named calculate_notification."}, {"type": "interface", "instruction": "Your code should define an interface named add_status."}, {"type": "class", "instruction": "Your code should define a class named TransformStatus."}, {"type": "file", "instruction": "Your code should be organized in a package named set_message."}, {"type": "combination", "instruction": "You should define an interface named add_status that includes these methods ['manage_order', 'handle_customer']."}, {"type": "combination", "instruction": "In your code, the class TransformStatus should have these properties ['record']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_message, which should contain these classes ['InsertLogOrder']."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "11": [0, 1, 2, 8, 14], "12": [0, 1, 2, 9, 14], "13": [0, 1, 2, 9, 10, 14]}, "question_id": 525}
{"question": "\n\nDesign a Python class `WtExecApi` that serves as a wrapper for a trading execution monitoring DLL/SO library. The class should be able to load the appropriate library based on the operating system and architecture (32-bit or 64-bit), and provide methods to interact with the underlying C library for trading execution tasks.\n\nThe class should include the following functionalities:\n\n1. Dynamically load the correct version of the library (`WtExecMon.dll` for Windows or `libWtExecMon.so` for Linux) based on the system's architecture (32-bit or 64-bit) and operating system.\n2. Provide a method `run` to start the execution monitoring.\n3. Provide a method `release` to release any resources held by the library.\n4. Provide a method `write_log` to write logs with a specific level and message, optionally including a category name.\n5. Provide a method `config` to configure the execution monitoring using a JSON configuration file.\n6. Provide a method `initialize` to initialize the C interface with a logging configuration file.\n7. Provide a method `set_position` to set the target position for a given standard code.\n\nThe class should handle the conversion of Python strings to the appropriate C types and manage the memory correctly to avoid leaks or crashes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable form, the initial value should be status."}, {"type": "function", "instruction": "Your code should include a function named delete_kms."}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_tys', 'handle_record']."}, {"type": "class", "instruction": "Your code should define a class named Item."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['matplotlib']."}, {"type": "combination", "instruction": "In your code, the class Item should have these properties ['credit', 'credit']."}, {"type": "combination", "instruction": "In your code, the class Item should have these methods ['remove_record', 'filter_view']."}, {"type": "combination", "instruction": "The function delete_kms should take ['form'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"4": [0, 1, 3, 14], "5": [0, 1, 3, 14], "9": [0, 1, 8, 14], "11": [0, 1, 8, 14], "12": [0, 1, 8, 14], "13": [0, 1, 6, 14]}, "question_id": 526}
{"question": "\n\nDesign a RESTful API for an album management system that allows users to perform CRUD operations on albums and tracks. The system should support pagination, searching by album name, and retrieving an album by its ID. The API should be tested using an in-memory SQLite database to simulate the backend storage.\n\nThe API should have the following endpoints:\n\n1. `GET /album`: Retrieves a list of albums with pagination support. It should return a 400 Bad Request error if the required pagination parameters (`offset` and `limit`) are not provided.\n2. `GET /album/:id`: Retrieves a single album by its ID. It should return a 200 OK if the album exists or a 400 Bad Request error if the ID is invalid or the album does not exist.\n3. `GET /album/search`: Searches for albums by name with pagination support. It should return a list of albums that match the search query.\n\nThe album data model should include at least the following fields: `ID`, `Name`, `Artist`, and `Tracks`. Each track should have an `ID`, `Name`, and `Duration`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named insert_request."}, {"type": "class", "instruction": "Your code should define a class named ViewTys."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_user."}, {"type": "combination", "instruction": "The function insert_request should take ['token', 'status'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_user, which should contain these classes ['EventKms', 'SetView', 'AccountRequest']."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_user, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 4], "8": [0, 1, 5, 6], "9": [0, 1, 6]}, "question_id": 527}
{"question": "\n\nDesign a Java class named `CodeSubmissionTracker` that tracks the submission of code to a remote online judge system. The class should be able to submit code, check if the submission was successful, and retrieve the maximum run ID for a given user and problem ID. The online judge system requires users to be logged in before submitting code.\n\nThe `CodeSubmissionTracker` class should have the following methods:\n\n1. `submitCode(String userId, String problemId, String language, String sourceCode)`: Submits the code to the online judge system and returns a boolean indicating whether the submission was successful.\n\n2. `getMaxRunId(String userId, String problemId)`: Retrieves the maximum run ID for the given user and problem ID from the online judge system. If no submissions are found, it should return -1.\n\n3. `needsLogin()`: Returns a boolean indicating whether the user needs to be logged in to submit code.\n\nAssume that the `DedicatedHttpClient` class is available and provides the following methods:\n\n- `String get(String url)`: Sends a GET request to the specified URL and returns the response body as a String.\n- `void post(String url, HttpEntity entity, HttpBodyValidator validator)`: Sends a POST request with the given entity to the specified URL and validates the response body using the provided `HttpBodyValidator`.\n\nThe `HttpBodyValidator` class has a constructor that takes a String argument, which is the expected response body for a successful submission.\n\nImplement the `CodeSubmissionTracker` class, including any necessary imports, and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the void keyword."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['manage_bill', 'modify_record', 'display_item']."}, {"type": "interface", "instruction": "Your code should define an interface named set_report."}, {"type": "class", "instruction": "Your code should define a class named AddLog."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "combination", "instruction": "You should define an interface named set_report that includes these methods ['manage_user']."}], "instruction_dependence": {"4": [0, 1, 2, 3], "8": [0, 1, 2, 7], "9": [0, 1, 2, 6]}, "question_id": 528}
{"question": "\nMatrix Chain Multiplication Optimization\n\nGiven a sequence of matrices, the goal is to find the most efficient way to multiply these matrices together. The problem is not actually to perform the multiplications, but merely to decide in which order to perform the multiplications.\n\nWe have many options to multiply a chain of matrices because matrix multiplication is associative. In other words, no matter how we parenthesize the product, the result will be the same. For example, if we had four matrices A, B, C, and D, we would have:\n\n    (ABC)D = (AB)(CD) = A(BCD) = ...\n\nHowever, the order in which we parenthesize the product affects the number of simple arithmetic operations needed to compute the product, or the efficiency. For example, suppose A is a 10 × 30 matrix, B is a 30 × 5 matrix, and C is a 5 × 60 matrix. Then,\n\n    (AB)C = (10×30×5) + (10×5×60) = 1500 + 3000 = 4500 operations\n    A(BC) = (30×5×60) + (10×30×60) = 9000 + 18000 = 27000 operations.\n\nClearly, the first parenthesization requires less number of operations.\n\nGiven an array `p[]` which represents the chain of matrices such that the ith matrix Ai is of dimension `p[i-1] x p[i]`. We need to write a function `MatrixChainOrder()` that should return the minimum number of multiplications needed to multiply the chain.\n\n**Input**:\n- An integer `n`, representing the number of matrices.\n- `n` pairs of integers, where each pair `(a, b)` represents the dimensions of a matrix in the chain.\n\n**Output**:\n- An integer representing the minimum number of multiplications needed to multiply the chain of matrices.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named manage_data."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_token."}, {"type": "combination", "instruction": "You should initialize an object named token as an instance of the Event class using ['form', 'customer'] for initialization."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "11": [0, 1, 2, 8]}, "question_id": 529}
{"question": "\n\nDesign a Java program for a school management system where the `DisplayManager` is responsible for managing the display of different user interfaces for teachers, students, and administrators. The `DisplayManager` should be able to create screens, show specific screens, and handle the system shutdown process. The user interfaces are represented by stub classes `ManageTeacherUI`, `ManageStudentUI`, `LoginUI`, and `AdminUI`. Each UI class should have a `setVisible(boolean visible)` method to control its visibility.\n\nThe `MainManager` class is responsible for managing the overall system and provides access to the `TeacherManager` and `StudentManager`, which are responsible for teacher and student-related operations, respectively.\n\nImplement the `DisplayManager` class with the following functionalities:\n- `createScreens()`: Initializes all the user interfaces and shows the login screen.\n- `showScreen1()`: Makes the login screen visible.\n- `showScreen2()`: Makes the manage teacher screen visible.\n- `exitFRS()`: Hides all screens and performs any necessary housekeeping before system shutdown.\n\nAdditionally, provide stub implementations for `ManageTeacherUI`, `ManageStudentUI`, `LoginUI`, `AdminUI`, `MainManager`, `TeacherManager`, and `StudentManager` with minimal functionality just to support the `DisplayManager` operations.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should use the catch keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Map."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, the initial value should be msg."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 530}
{"question": "\n\nDesign and implement a RESTful API for managing financial transactions using the Go programming language and the Gin web framework. The API should provide endpoints for creating, retrieving, updating, and deleting transaction records. Each transaction should include the following fields:\n\n- ID: A unique identifier for the transaction.\n- Code: A required string representing the transaction code.\n- Currency: A string representing the currency used in the transaction.\n- Price: A required float representing the amount of the transaction.\n- Emitter: A string representing the entity that emits the transaction.\n- Receiver: A string representing the entity that receives the transaction.\n- Date: A string representing the date of the transaction.\n\nThe API should perform basic validation on the input data and return appropriate HTTP status codes and messages for different scenarios, such as missing required fields, invalid token authentication, or transaction not found.\n\nImplement the following endpoints:\n\n- `GET /transactions`: Retrieve all transactions.\n- `POST /transactions`: Create a new transaction.\n- `PUT /transactions/:id`: Update an existing transaction by ID.\n- `PATCH /transactions/:id`: Partially update an existing transaction by ID.\n- `DELETE /transactions/:id`: Delete an existing transaction by ID.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Your code should define an enumeration named Priority"}, {"type": "variable", "instruction": "Variable dwa, type should be bool."}, {"type": "variable", "instruction": "Variable dwa, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named remove_message."}, {"type": "class", "instruction": "Your code should define a class named ProcessView."}, {"type": "combination", "instruction": "In your code, the class ProcessView should have these properties ['msg', 'user', 'credit']."}, {"type": "combination", "instruction": "The function remove_message should return a float64 as its result."}], "instruction_dependence": {"5": [0, 3], "6": [0, 3], "9": [0, 8], "10": [0, 7]}, "question_id": 531}
{"question": "Please write a Java program to demonstrate how to use `BufferedReader` to read the contents of a text file line by line. Ensure that your program can handle exceptions and properly close resources after reading the file. Furthermore, your program should be able to count and print the number of lines contained in the file.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class LineCounter {\n    public static int countLines(String filePath) throws IOException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "class", "instruction": "Your code should define a class named UserMsg."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "In your code, the class UserMsg should have these methods ['add_report', 'handle_user']."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5]}, "question_id": 532}
{"question": "\n\nWrite a Java program that calculates the average age of a group of people. The ages of the people are passed as command-line arguments to the program. The program should handle any non-integer values by ignoring them and calculating the average based on the valid integer ages provided. If no valid integer ages are provided, the program should output a message indicating that no valid ages were entered.\n\nThe program should follow these guidelines:\n- It should be able to handle an arbitrary number of command-line arguments.\n- It should ignore any non-integer values and not include them in the average age calculation.\n- If no valid integer ages are provided, it should output a specific message.\n- The average should be calculated as an integer value.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable shipment should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named submit_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ModifyLogOrder."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 1, 3, 9, 10], "5": [0, 1, 3, 9, 10], "7": [0, 1, 6, 9, 10]}, "question_id": 533}
{"question": "\nDesign a Bingo Game Checker\n\nBingo is a game where each player has a 5x5 grid of numbers. A number is called out, and if it is on the player's grid, it is marked. The first player to have a specified pattern of marked numbers wins. The most common winning patterns are any row, column, or diagonal, but other patterns are possible.\n\nIn this problem, you are given a 5x5 grid of numbers and a sequence of numbers that are called out. Your task is to determine after how many numbers called the player wins the game, considering that the player wins if at least three rows, columns, or diagonals are completely marked.\n\nWrite a program that reads a 5x5 grid of numbers and a sequence of numbers that are called out. The program should output the count of numbers called when the player wins the game.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named analyze_dwa."}, {"type": "interface", "instruction": "Your code should define an interface named get_cut."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_kms."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.nio']."}, {"type": "combination", "instruction": "The function analyze_dwa should return a char as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_kms, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 3], "8": [0, 1, 5]}, "question_id": 534}
{"question": "\n\nWrite a Python program that uses Selenium to automate the process of verifying a button's clickability and the presence of a success message on a webpage. The program should follow these steps:\n\n1. Open a web browser using Selenium WebDriver.\n2. Navigate to the URL `http://suninjuly.github.io/wait2.html`.\n3. Wait for up to 5 seconds for the button with the ID `verify` to become clickable.\n4. Once the button is clickable, click on it.\n5. After clicking the button, find the element with the ID `verify_message`.\n6. Check if the text of the `verify_message` element contains the word \"successful\".\n7. If the word \"successful\" is present in the message, print \"Verification successful!\" to the console.\n8. If the word \"successful\" is not present, print \"Verification failed!\" to the console.\n9. Ensure the browser is closed after the verification is complete, regardless of the outcome.\n\nThe program should handle any exceptions that may occur during the process and ensure that the browser is closed properly in such cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the except keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named delete_order."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "file", "instruction": "Your code should import the following libraries ['scikit-learn']."}, {"type": "file", "instruction": "Your code should use the function delete_order from the library tensorflow."}, {"type": "combination", "instruction": "The function delete_order should take ['credit', 'order'] as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "8": [0, 1, 7], "9": [0, 1, 5]}, "question_id": 535}
{"question": " Write a C++ program that generates a sequence of the first `N` triangular numbers using a functor. A triangular number or triangle number counts objects arranged in an equilateral triangle. The `n`th triangular number is the number of dots in the triangle with `n` dots on a side and is equal to the sum of the `n` natural numbers from 1 to `n`. The sequence starts with 1, 3, 6, 10, 15, and so on.\n\nThe program should define a functor named `TriangularNumber` that keeps track of the current position and calculates the next triangular number when invoked. The functor should be used with the `std::generate` algorithm to populate a `std::vector` with the first `N` triangular numbers. The program should then print the generated sequence.\n\nAdditionally, provide a main function that demonstrates the use of the `TriangularNumber` functor by generating and printing the first 10 triangular numbers.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named DeleteBill."}, {"type": "file", "instruction": "Your code should import the following libraries ['string']."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the DeleteBill class using ['report', 'shipment', 'form'] for initialization."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 10], "9": [0, 1, 2, 7, 10]}, "question_id": 536}
{"question": "\n\nIn a certain programming competition, the problems are arranged in a dependency graph where some problems are prerequisites for others. A problem can only be attempted if all of its prerequisite problems have been solved. Given the number of problems `N` and a list of `M` sequences representing the order in which problems must be solved, your task is to determine a valid order in which all the problems can be attempted. If no such order exists, your program should output `0`.\n\nEach of the `M` sequences starts with an integer `t` representing the number of problems in that sequence, followed by `t` problem numbers. Each problem number will be unique within a single sequence, but may appear in multiple sequences. The order of problems within a sequence must be respected in the final ordering.\n\nWrite a program that reads the number of problems `N`, the number of sequences `M`, and then the `M` sequences. The program should output a valid order of problems to attempt, one per line, or `0` if no such order exists.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should not use the typedef keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Variable log, should not be a global variable."}, {"type": "variable", "instruction": "Variable log, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named configure_product."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['transform_form', 'create_punish', 'retrieve_token', 'update_room']."}, {"type": "interface", "instruction": "Your code should define an interface named update_token."}, {"type": "class", "instruction": "Your code should define a class named Transaction."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_log."}, {"type": "file", "instruction": "Your code should not use the following libraries ['string']."}, {"type": "combination", "instruction": "In your code, the class Transaction should have these methods ['modify_order', 'retrieve_bill']."}, {"type": "combination", "instruction": "The function configure_product should return a char as its result."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "8": [0, 1, 2, 7], "14": [0, 1, 2, 11], "15": [0, 1, 2, 7]}, "question_id": 537}
{"question": " Implement a Python code transformation tool that applies three specific transformations to a given Python code snippet:\n\n1. **Integer Division Transformation**: Wrap all integer division operations in a call to `fractions.Fraction` to ensure the result is a fraction rather than a floating-point number.\n2. **Automatic Symbol Definition**: Automatically define any undefined symbols using `diofant.core.symbol.Symbol`. This is particularly useful for symbolic computation where variables are often used before being explicitly defined.\n3. **Float Rationalization**: Convert all floating-point numbers to `fractions.Fraction` objects to maintain precision during mathematical operations.\n4. **Unicode Identifiers Normalization**: Transform all unicode identifiers in the code to ASCII-compliant names to avoid issues with non-standard characters in variable names.\n\nThe tool should be able to process a string containing Python code, apply the transformations, and return the transformed code as a string. The tool should ignore built-in Python names and already defined names in the provided namespace.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "function", "instruction": "Your code should include a function named transform_transaction."}, {"type": "interface", "instruction": "Your code should define an interface named sort_item."}, {"type": "class", "instruction": "Your code should define a class named DataKms."}, {"type": "file", "instruction": "Your code should import the following libraries ['Django']."}, {"type": "file", "instruction": "Your code should use the function transform_transaction from the library seaborn."}, {"type": "combination", "instruction": "Your code should define a class named DataKms that implements the sort_item interface."}, {"type": "combination", "instruction": "In your code, the class DataKms should have these properties ['shipment', 'request']."}, {"type": "combination", "instruction": "The function transform_transaction should take ['status'] as parameters."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 4, 5], "9": [0, 1, 2, 5], "10": [0, 1, 2, 3]}, "question_id": 538}
{"question": "\n\nWrite a Java program that finds the index of the column with the largest sum in a 2D array of integers. The program should prompt the user to input the dimensions of the 2D array and then the elements of the array. After calculating, the program should output the index of the column with the largest sum. If there are multiple columns with the same largest sum, the program should return the index of the first such column.\n\nThe program should include the following functionalities:\n- A method `takeInputIn2DArr()` that takes user input to fill the 2D array.\n- A method `columnWithLargestSum(int[][] arr)` that calculates and returns the index of the column with the largest sum.\n- A `main` method that calls the above methods and displays the index of the column with the largest sum.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the new keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_msg', 'get_record', 'analyze_transaction']."}, {"type": "interface", "instruction": "Your code should define an interface named insert_customer."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Account."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "combination", "instruction": "Your code should define a class named Account that implements the insert_customer interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 11], "10": [0, 1, 2, 6, 8, 11]}, "question_id": 539}
{"question": "Implement a simplified version of a smart pointer called `SharedPtr` using the C++ programming language. The completed `SharedPtr` class needs to meet the following requirements:\n1. Use template programming so that it can manage objects of different data types.\n2. It must be able to track the reference count of the `SharedPtr` pointer, that is, it needs to maintain a reference counter that records how many `SharedPtr` pointers currently point to the same object.\n3. It can handle the allocation and release of dynamically allocated memory. That is, when all `SharedPtr` no longer point to a certain object, it needs to automatically release the memory occupied by that object.\n4. Ensure that the operations on `SharedPtr` are thread-safe in a multithreaded environment.\n\nEmphasize that the main interfaces and functions that the SharedPtr class needs to provide are:\n- Constructor, used to take over the memory management rights of a dynamically allocated object.\n- Dereference operators (operator* and operator->), used to access the object pointed to by `SharedPtr`.\n- Assignment operations (including copy assignment and move assignment), used to make a `SharedPtr` start pointing to another object, while maintaining the reference count well.\n- use_count function, which returns how many `SharedPtr` currently point to the same object.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, type should be float."}, {"type": "variable", "instruction": "Variable event, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named analyze_bill."}, {"type": "interface", "instruction": "Your code should define an interface named sort_inventory."}, {"type": "file", "instruction": "Your code should import the following libraries ['map', 'set']."}, {"type": "combination", "instruction": "The function analyze_bill should return a float as its result."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "10": [0, 1, 7]}, "question_id": 540}
{"question": " Print Range Configuration System\n\nYou are tasked with creating a system that manages print dialog configurations for a printing application. The system should allow users to set and retrieve various print dialog options, such as enabling specific features, setting the print range, and defining the minimum and maximum pages that can be printed. Additionally, users should be able to specify a range of pages to print from and to, and query the current configuration to determine the printer's settings.\n\nImplement a class `PrintDialogManager` that encapsulates the functionality provided by the given code snippet. The class should provide methods to:\n\n- Execute the print dialog and return an integer status code.\n- Add an enabled option to the print dialog.\n- Set multiple enabled options at once.\n- Check if a specific option is enabled.\n- Set the print range (e.g., all pages, selection, or page range).\n- Get the current print range setting.\n- Set the minimum and maximum pages that can be printed.\n- Get the current minimum and maximum page settings.\n- Set the range of pages to print from and to.\n- Get the current from and to page settings.\n- Retrieve the printer handle.\n\nFor simplicity, assume that `QAbstractPrintDialog`, `QAbstractPrintDialog::PrintDialogOption`, `QAbstractPrintDialog::PrintDialogOptions`, and `QAbstractPrintDialog::PrintRange` are enums or similar constructs that are already defined in the system.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "variable", "instruction": "Variable user, type should be char."}, {"type": "interface", "instruction": "Your code should define an interface named display_order."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['iostream']."}, {"type": "file", "instruction": "Your code should use the function update_msg from the library algorithm."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 11], "8": [0, 1, 2, 7, 11], "10": [0, 1, 2, 9, 11]}, "question_id": 541}
{"question": "Implement a function in Golang that replaces the model_name, server_time, and req_time in this sql with variables. The type of time variable should be time.Time.\n```sql\nSELECT toDate(req_time) AS date, model_name, COUNT(1) AS count, debiasAuc(predict{'head_1'}, label{'head_1'}, sample_rate{'head_1'}) AS debias_auc_0 FROM `reckon_theta`.`deep_insight_theta` WHERE toDate(server_time) BETWEEN '2024-02-06' AND '2024-02-07' AND model_name IN ('aweme_ctr_base_streaming_1kbs_32p_r3180802_0') AND toDate(req_time) BETWEEN '2024-02-05' AND '2024-02-07' AND isNotNull(label{'head_1'}) AND sample_rate{'head_1'} > 0 GROUP BY (date, model_name) ORDER BY (date, model_name) DESC LIMIT 1000\n```", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure struct."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, type should be slice."}, {"type": "variable", "instruction": "Variable form, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named generate_credit."}, {"type": "file", "instruction": "Your code should import the following libraries ['os']."}, {"type": "file", "instruction": "Your code should use the function configure_event from the library strconv."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 10], "6": [0, 1, 2, 4, 10], "9": [0, 1, 2, 8, 10]}, "question_id": 542}
{"question": "\n\nWrite a Python program that reads a CSV file containing a list of audio file paths and generates SQL insert statements for two tables: `audio` and `jerarquia`. Each row in the CSV file represents a hierarchical path to an audio file, with the hierarchy levels separated by commas and the last element being the audio file name.\n\nThe `audio` table should contain the following columns:\n- `id`: An auto-incrementing integer ID for the audio file.\n- `nombre_original`: The original name of the audio file (without the file extension).\n- `nombre_audio`: The same as `nombre_original`.\n- `ruta`: The full path to the audio file, prefixed with \"chimbila/\".\n\nThe `jerarquia` table should contain the following columns:\n- `id`: An auto-incrementing integer ID for the hierarchy level.\n- `nombre_coleccion`: The name of the collection or hierarchy level.\n- `antecesor_id`: The ID of the parent hierarchy level (null for the root level).\n- `usuario_id`: An integer ID representing the user associated with the hierarchy level.\n\nThe program should also handle the following:\n- Each hierarchy level name must be unique across all users.\n- The user IDs are provided in a dictionary with user names as keys and their corresponding IDs as values.\n- The program should print the SQL insert statements for both `audio` and `jerarquia` tables to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "class", "instruction": "Your code should define a class named CreatePunish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['requests', 'pytorch', 'numpy']."}, {"type": "combination", "instruction": "In your code, the class CreatePunish should have these properties ['order']."}], "instruction_dependence": {"7": [0, 1, 5]}, "question_id": 543}
{"question": "\n\nCreate a Go program that provides a service for processing video files uploaded by users. The service should include the following functionalities:\n\n1. Check if a given directory path exists on the local file system. If the path does not exist, the function should be able to create it.\n2. Extract the first frame of an uploaded video file and save it as an image. This function should use the `ffmpeg` command-line tool to perform the extraction.\n3. Save the uploaded video file to a specified directory on the local file system. The saved file should have a unique name that includes a timestamp to prevent name collisions.\n\nThe program should define a function for each of the functionalities mentioned above. Additionally, provide test cases to verify the correctness of each function.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, the initial value should be punish."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named submit_tys."}, {"type": "class", "instruction": "Your code should define a class named AddEventInfo."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_credit."}, {"type": "combination", "instruction": "The function submit_tys should take ['request'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_credit, which should contain these functions ."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "8": [0, 7], "10": [0, 6], "11": [0, 9]}, "question_id": 544}
{"question": "Calculate $\\int_{x=0}^{1} \\int_{y=x}^{2-x} xy dy dx$\nDefine a Python function named solve to solve the problem and return the result.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use data structure deque."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "interface", "instruction": "Your code should define an interface named set_token."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_token."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "file", "instruction": "Your code should use the function check_shipment from the library Flask."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pytorch', 'numpy', 'tensorflow']."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 8]}, "question_id": 545}
{"question": "\n\nDesign a Binary Search Tree (BST) class in C++ that supports insertion, searching, and various tree traversal methods. The BST should be able to perform the following operations:\n\n1. Insert a new node with a given value into the tree.\n2. Find a node with a given value in the tree.\n3. Print the tree in pre-order traversal.\n4. Print all descendants of a node with a given value.\n5. Calculate the sum of all node values in the tree.\n6. Count the number of leaf nodes in the tree.\n7. Determine the height of the tree.\n\nThe BST should be implemented using a node structure that contains an integer value, and pointers to the left and right child nodes. The class should have member functions corresponding to each of the operations listed above. The class should also handle edge cases such as inserting duplicate values or searching for values that do not exist in the tree.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the long keyword."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named insert_transaction."}, {"type": "file", "instruction": "Your code should import the following libraries ['stack', 'iostream']."}, {"type": "file", "instruction": "Your code should use the function submit_message from the library cmath."}, {"type": "combination", "instruction": "You should define an interface named insert_transaction that includes these methods ['transform_view']."}], "instruction_dependence": {"4": [0, 1, 2, 3], "7": [0, 1, 2, 6], "8": [0, 1, 2, 5]}, "question_id": 546}
{"question": "\n\nDesign a command-line interface (CLI) client for Mail.tm, a disposable mail service. The client should be able to display its version information when the `-v` flag is provided. The version information includes the version number, the date of the release, and the commit hash.\n\nThe client should also display a default message when no flags are provided, indicating that it is a CLI client for the Mail.tm disposable mail service.\n\nImplement a test suite to verify the functionality of the `NewCmd` function, which is responsible for creating the CLI client with the appropriate behavior based on the provided flags. The test suite should include tests for the following scenarios:\n\n1. `TestNewCmd_WithoutFlags`: Verifies that the default message is displayed when no flags are provided.\n2. `TestNewCmd_WithVersionFlag`: Verifies that the version information is displayed when the `-v` flag is provided.\n\nUse the provided code snippet as a starting point for your implementation. Ensure that all necessary packages are imported, and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the go keyword."}, {"type": "structural control", "instruction": "Your code should use data structure struct."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named create_request."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named get_msg."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named ProfileToken."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_msg."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'time']."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the ProfileToken class using ['token', 'info'] for initialization."}, {"type": "combination", "instruction": "The function create_request should take ['log'] as parameters."}, {"type": "combination", "instruction": "The function create_request should return a float64 as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_msg, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 17], "9": [0, 1, 2, 8, 17], "13": [0, 1, 2, 10, 17], "14": [0, 1, 2, 6, 17], "15": [0, 1, 2, 6, 17], "16": [0, 1, 2, 11, 17]}, "question_id": 547}
{"question": "\n\nDesign a Python class `TrainingModel` that encapsulates the process of training a neural network model using PyTorch. The class should support both regression and classification tasks by allowing the user to specify the type of loss function to be used: Mean Squared Error (MSE) for regression and Cross-Entropy for classification. The class should handle the training process, including batching the data, performing forward and backward passes, updating model parameters, and calculating training and validation accuracy for classification tasks.\n\nThe class should also provide a method to visualize the training loss and, if applicable, the training and validation accuracy over epochs using matplotlib.\n\nThe `TrainingModel` class should have the following methods:\n- `__init__(self, model, max_epoch, batch_size, learning_rate, input_shape, loss_function)`: Initializes the training model with the specified parameters.\n- `training(self, train_x, train_y, test_x, test_y)`: Trains the model using the provided training and validation datasets and returns the trained model.\n\nThe class should be able to handle input data and labels as NumPy arrays and should convert them to PyTorch tensors. It should also handle the device placement of the model and data (CPU or GPU).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not use the break keyword."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should be a global variable."}, {"type": "variable", "instruction": "Variable order, the initial value should be product."}, {"type": "variable", "instruction": "Variable order should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named TransformViewProfile."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch', 'Django']."}, {"type": "combination", "instruction": "You should initialize an object named user as an instance of the TransformViewProfile class using ['product', 'cut', 'token'] for initialization."}, {"type": "combination", "instruction": "In your code, the class TransformViewProfile should have these methods ['remove_log']."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "6": [0, 1, 2, 3], "9": [0, 1, 2, 7], "10": [0, 1, 2, 7]}, "question_id": 548}
{"question": "\n\nDesign a custom double-ended queue (deque) class template named `Doublelist` that can store elements of any data type. The `Doublelist` should support the following operations:\n\n1. `push_front(const T& value)`: Insert an element at the front of the deque.\n2. `push_back(const T& value)`: Insert an element at the back of the deque.\n3. `front()`: Access the first element.\n4. `back()`: Access the last element.\n5. `begin()`: Return an iterator pointing to the first element.\n6. `end()`: Return an iterator pointing to the past-the-end element.\n7. `size()`: Return the number of elements in the deque.\n\nThe `Doublelist` class should be iterable using a range-based for loop. Additionally, the class should be compatible with standard algorithms such as `std::accumulate`.\n\nWrite a program that demonstrates the use of the `Doublelist` class with both `std::string` and `int` types. The program should perform the following tasks:\n\n- Create a `Doublelist` of `std::string` and add several names to it using `push_front` and `push_back`.\n- Print the size of the `Doublelist` of `std::string`.\n- Iterate over the `Doublelist` of `std::string` and print each name.\n- Print the first and last names in the `Doublelist` of `std::string`.\n- Create a `Doublelist` of `int` and add several integers to it using `push_back`.\n- Calculate and print the sum of all integers in the `Doublelist` of `int` using `std::accumulate`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure queue."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, should not be a global variable."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named configure_transaction."}, {"type": "class", "instruction": "Your code should define a class named OrderShipment."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named create_bill."}, {"type": "combination", "instruction": "Your code should define a class named OrderShipment that implements the configure_transaction interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"4": [0, 3, 11], "5": [0, 3, 11], "8": [0, 7, 11], "10": [0, 6, 7, 11]}, "question_id": 549}
{"question": "\n\nDesign a Java program that finds the longest palindromic substring within a given string. A palindrome is a string that reads the same backward as forward. The program should consider both odd and even length palindromes.\n\nFor example, in the string \"babad\", the longest palindromic substring is \"bab\" (or \"aba\"). In the string \"cbbd\", the longest palindromic substring is \"bb\".\n\nWrite a class `LongestPalindromicSubstring` with a method `longestPalindrome` that takes a string as input and returns the longest palindromic substring. The method should handle two cases: palindromes with an odd number of characters and palindromes with an even number of characters.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the long keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Stack."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, the initial value should be credit."}, {"type": "function", "instruction": "Your code should include a function named configure_notification."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named remove_report."}, {"type": "class", "instruction": "Your code should define a class named CreditKms."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_punish."}, {"type": "combination", "instruction": "Your code should define a class named CreditKms that implements the remove_report interface."}, {"type": "combination", "instruction": "In your code, the class CreditKms should have these properties ['token', 'item', 'request']."}, {"type": "combination", "instruction": "In your code, the class CreditKms should have these methods ['calculate_notification', 'transform_status']."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_punish, which should contain these classes ['TransformDwa', 'DeleteRecord', 'Customer']."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 18], "10": [0, 1, 2, 3, 9, 18], "14": [0, 1, 2, 3, 11, 12, 18], "15": [0, 1, 2, 3, 12, 18], "16": [0, 1, 2, 3, 12, 18], "17": [0, 1, 2, 3, 12, 13, 18]}, "question_id": 550}
{"question": "Please write a Java program to manage school course information. Specific requirements are as follows:\n\n- There needs to be a Course class that includes four attributes: course code (code), course name (name), semester (semester), and credits (credits).\n- Provide a constructor for the Course class that can initialize these four attributes.\n- Provide a method `getCode()` to retrieve the course code.\n\nEnsure the code is self-contained and clear, including necessary package imports.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport org.junit.jupiter.api.Assertions;\npublic class SchoolManagement {\n    static class Course {\n        private String code;\n        private String name;\n        private int semester;\n        private int credits;\n        public Course(String code, String name, int semester, int credits) {\n        }\n        public String getCode() {\n            return code;\n        }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the extends keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, the initial value should be record."}, {"type": "variable", "instruction": "Variable order should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named update_log."}, {"type": "interface", "instruction": "Your code should define an interface named handle_customer."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named check_info."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.io']."}, {"type": "combination", "instruction": "You should define an interface named handle_customer that includes these methods ['remove_transaction']."}, {"type": "combination", "instruction": "The function update_log should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_info, which should contain these classes ['DataOrder', 'ProcessStatus']."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 18], "8": [0, 1, 2, 6, 18], "12": [0, 1, 2, 11, 18], "15": [0, 1, 2, 10, 18], "16": [0, 1, 2, 9, 18], "17": [0, 1, 2, 11, 13, 18]}, "question_id": 551}
{"question": "In Python, we have a definition for a MinHeap as follows:\n```python\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def __init__(self, nums):\n        self.heap = []\n        for num in nums:\n            self.insert(num)\n\n    def parent(self, i):\n        return (i - 1) // 2\n\n    def left_child(self, i):\n        return 2 * i + 1\n\n    def right_child(self, i):\n        return 2 * i + 2\n\n    def has_parent(self, i):\n        return self.parent(i) >= 0\n\n    def has_left_child(self, i):\n        return self.left_child(i) < len(self.heap)\n\n    def has_right_child(self, i):\n        return self.right_child(i) < len(self.heap)\n\n    def swap(self, i, j):\n        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n\n    def display(self):\n        return self.heap\n\n    def insert(self, num):\n        self.heap.append(num)\n        self.heapify_up(len(self.heap) - 1)\n\n    def heapify_up(self, i):\n        while self.has_parent(i) and self.heap[i] < self.heap[self.parent(i)]:\n            self.swap(i, self.parent(i))\n            i = self.parent(i)\n```\nPlease continue to write this class, add a function remove_min(self), to delete the smallest element from the min heap, and at the same time return this smallest element and the remaining heap. \n\nNote, please copy all existing code, do not omit.\n>>> MinHeap([3,1,6,4]).remove_min()\n1, [3, 4, 6]", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, the initial value should be dwa."}, {"type": "variable", "instruction": "Variable profile should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named update_product."}, {"type": "interface", "instruction": "Your code should define an interface named get_item."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['requests']."}, {"type": "file", "instruction": "Your code should use the function update_product from the library pandas."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 13], "7": [0, 1, 2, 3, 5, 13], "10": [0, 1, 2, 3, 9, 13], "12": [0, 1, 2, 3, 11, 13]}, "question_id": 552}
{"question": "\n\nDesign a Go package that provides functionality to work with geographical line strings, which are sequences of latitude and longitude points. The package should allow for the creation, manipulation, and analysis of line strings, including the ability to convert them to various formats and to perform spatial operations.\n\nThe package should include the following features:\n\n1. A `LineString` type that represents a sequence of geographical points.\n2. Methods to marshal and unmarshal `LineString` objects to and from JSON.\n3. Conversion methods to transform a `LineString` into formats used by the S2 geometry library and Google Maps API.\n4. Spatial operations such as checking if a point is contained within the line string, or if the line string intersects with a given cell.\n5. The ability to create GeoJSON objects from a `LineString`.\n\nThe `LineString` type should implement the `s2.Region` interface from the S2 geometry library, which includes methods like `CapBound`, `RectBound`, `ContainsCell`, `IntersectsCell`, `ContainsPoint`, and `CellUnionBound`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, type should be float64."}, {"type": "function", "instruction": "Your code should include a function named sort_view."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['execute_user', 'get_item', 'get_room']."}, {"type": "interface", "instruction": "Your code should define an interface named execute_punish."}, {"type": "class", "instruction": "Your code should define a class named RemoveMessage."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named search_report."}, {"type": "combination", "instruction": "Your code should define a class named RemoveMessage that implements the execute_punish interface."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 7], "12": [0, 1, 2, 3, 11], "14": [0, 1, 2, 3, 10, 11]}, "question_id": 553}
{"question": "\n\nDesign a Go program that simulates a simple transaction processing system for a cryptocurrency. The system should be able to handle the creation of new transactions and store them in a memory pool. Each transaction should have a unique ID, a sender address, a recipient address, and an amount. The program should provide functionality to add a new transaction to the pool and to retrieve all transactions from the pool.\n\nThe `CreateTransactionRequest` struct provided in the given code snippet should be used to represent a request to create a new transaction. Extend this struct to include a `Transaction` struct with the necessary fields. Implement the following functionalities:\n\n1. A function `NewTransaction` that takes sender address, recipient address, and amount as parameters and returns a `Transaction` struct with a unique ID.\n2. A function `AddTransaction` that takes a `Transaction` struct and adds it to the `CreateTransactionRequest`'s `Transactions` slice.\n3. A function `GetTransactions` that returns all the transactions currently in the pool.\n\nEnsure that your program includes error handling for cases such as invalid amounts (e.g., negative values) and incomplete transaction details.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named modify_bill."}, {"type": "class", "instruction": "Your code should define a class named UpdateAccountToken."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_cut."}, {"type": "file", "instruction": "Your code should import the following libraries ['sort', 'time']."}, {"type": "combination", "instruction": "You should initialize an object named item as an instance of the UpdateAccountToken class using ['account', 'punish', 'item'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named UpdateAccountToken that implements the modify_bill interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_cut, which should contain these classes ['CalculateToken']."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_cut, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 16], "12": [0, 1, 2, 9, 16], "13": [0, 1, 2, 8, 9, 16], "14": [0, 1, 2, 9, 10, 16], "15": [0, 1, 2, 10, 16]}, "question_id": 554}
{"question": "Create a Python function to implement majority voting for classification. Majority voting is a technique used in ensemble learning where the final class label for a given instance is determined by the majority vote of the classifiers. Define the function as def majority_voting(classifier_outputs), where classifier_outputs is a list of lists, each containing the predicted class labels from a different classifier for the same set of instances.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the None keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, should be a global variable."}, {"type": "variable", "instruction": "Variable tys should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_user."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_order', 'submit_profile', 'update_bill']."}, {"type": "interface", "instruction": "Your code should define an interface named create_request."}, {"type": "class", "instruction": "Your code should define a class named SubmitRoomRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named create_user."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Flask', 'numpy']."}, {"type": "combination", "instruction": "You should initialize an object named order as an instance of the SubmitRoomRecord class using ['profile'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named create_request that includes these methods ['submit_message', 'generate_order']."}, {"type": "combination", "instruction": "The function transform_user should return a str as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_user, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"6": [0, 1, 5, 18], "7": [0, 1, 5, 18], "14": [0, 1, 11, 18], "15": [0, 1, 10, 18], "16": [0, 1, 8, 18], "17": [0, 1, 12, 18]}, "question_id": 555}
{"question": "\n\nDesign a Python module that provides a set of utility functions to manage and read configuration data for a test environment. The module should be able to read configuration data from an INI file and provide this data to test cases in a testing framework such as pytest. The configuration data should include a base URL for API testing and database connection parameters.\n\nThe module should include the following functionalities:\n1. A function to read a value from an INI file given a section and an option.\n2. Pytest fixtures to provide:\n   - The base URL for API testing as a session-scoped fixture.\n   - The database connection parameters as a session-scoped fixture.\n   - A `BaseRequests` instance for making HTTP requests that manages cookies automatically, also as a session-scoped fixture.\n\nThe module should be structured in a way that it can be easily imported into test cases, and it should handle the addition of the project directory to `sys.path` to ensure that imports work correctly when running tests from the command line.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the and keyword."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable credit should not be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_cut."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 7], "5": [0, 1, 2, 3, 7]}, "question_id": 556}
{"question": "\n\nDesign a Go program that acts as a client to a Star Wars themed gRPC service. The service provides several functionalities related to characters, heroes, and reviews within the Star Wars universe. The client should be able to send requests to the server to perform the following operations:\n\n1. Search for a character by name.\n2. Get the hero of a specific episode.\n3. Create a review for an episode.\n4. Get all reviews for a specific episode.\n\nThe client should be able to handle user input from the command line to perform these operations. The input format is as follows:\n\n- `c/name`: Search for a character by name.\n- `h/episode`: Get the hero of the specified episode.\n- `k/episode/stars/commentary`: Create a review for the episode with the given number of stars and commentary.\n- `r/episode`: Get all reviews for the specified episode.\n- `x`: Exit the program.\n\nThe program should also establish a connection to the gRPC server running on port 9002 and handle any errors that may occur during the connection or while making requests.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the import keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, should be a global variable."}, {"type": "variable", "instruction": "Variable view should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named Token."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_data."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_data, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "8": [0, 1, 2, 7], "10": [0, 1, 2, 9]}, "question_id": 557}
{"question": "\nDesign a C++ addon for Node.js that provides a simple `Graph` class with the following functionality:\n- The `Graph` class should be able to store a single numeric value.\n- It should have a constructor that accepts an initial value for this numeric property.\n- It should have a method `plusOne` that increments the stored value by one.\n\nThe addon should be implemented using the V8 engine and Node.js native addon API. The `Graph` class should be exposed to the Node.js runtime so that it can be instantiated and used within a JavaScript context.\n\nWrite a C++ program that sets up the `Graph` class as described, and then provide JavaScript test cases that demonstrate the creation of a `Graph` instance and the use of the `plusOne` method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "function", "instruction": "Your code should include a function named execute_report."}, {"type": "class", "instruction": "Your code should define a class named FilterCredit."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_cut."}, {"type": "combination", "instruction": "The function execute_report should take ['record', 'info', 'product'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_cut, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 7], "10": [0, 1, 2, 6], "11": [0, 1, 2, 9]}, "question_id": 558}
{"question": "The code to implement database connection and query using Flask and SQLite3 is given. In the current directory, there exists a database file named \"example.db\". The database contains a table named users with three columns: id, name, and age. When requesting the route \"/\", the name of the data with id 1 will be first changed to Lucas, and then each record in the user table will be printed out.\n\nPlease wrap the code in a markdown ```python```.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named handle_item."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named delete_token."}, {"type": "class", "instruction": "Your code should define a class named ModifyToken."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_user."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib']."}, {"type": "file", "instruction": "Your code should use the function handle_item from the library seaborn."}, {"type": "combination", "instruction": "You should define an interface named delete_token that includes these methods ['generate_record']."}, {"type": "combination", "instruction": "In your code, the class ModifyToken should have these properties ['event', 'shipment']."}, {"type": "combination", "instruction": "The function handle_item should take ['user', 'inventory'] as parameters."}, {"type": "combination", "instruction": "The function handle_item should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_user, which should contain these classes ['TransactionTys', 'View']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "13": [0, 1, 2, 12], "14": [0, 1, 2, 9], "15": [0, 1, 2, 10], "16": [0, 1, 2, 7], "17": [0, 1, 2, 7], "18": [0, 1, 2, 10, 11]}, "question_id": 559}
{"question": "Using Python, write a function to download a web page txt file and finally organize the file into a csv file output. The txt contains content separated by commas.\n1. The function to download the txt is download_txt, which takes url and filename as inputs\n2. The conversion function is txt_to_csv, which takes txt_filename and csv_filename as inputs\n3. Combine the calls to these two functions into one function: download_txt_and_convert_to_csv", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not use the if keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named execute_data."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named configure_cut."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named GetViewMessage."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas']."}, {"type": "file", "instruction": "Your code should use the function execute_data from the library pandas."}, {"type": "combination", "instruction": "You should initialize an object named message as an instance of the GetViewMessage class using ['customer'] for initialization."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 12], "16": [0, 1, 2, 3, 15], "17": [0, 1, 2, 3, 14]}, "question_id": 560}
{"question": "\n\nDesign a simple thread pool class in C++ that allows for parallel execution of tasks. The thread pool should be able to start a specified number of worker threads, queue tasks for execution, and gracefully shut down all threads upon request. Each task is represented as a `std::function<void()>` object, which allows for a wide variety of functions to be executed by the thread pool.\n\nThe thread pool class should provide the following functionalities:\n- `start(int threadNum)`: Starts the specified number of worker threads.\n- `queueJob(const std::function<void()>& job)`: Queues a task for execution by the thread pool.\n- `busy()`: Returns `true` if there are tasks in the queue that have not yet been executed; otherwise, returns `false`.\n- `stop()`: Signals all worker threads to finish their current tasks and stop execution, then joins all threads.\n\nEnsure that the thread pool handles synchronization properly to avoid race conditions and deadlocks.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure queue."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, type should be double."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_notification."}, {"type": "class", "instruction": "Your code should define a class named RemoveItem."}, {"type": "file", "instruction": "Your code should import the following libraries ['iostream', 'map']."}, {"type": "combination", "instruction": "In your code, the class RemoveItem should have these properties ['item', 'dwa', 'room']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "11": [0, 1, 2, 9]}, "question_id": 561}
{"question": "Please complete a Java programming task to implement a URL redirection service class that returns different page paths based on a user's roles.\n\n**Task Requirements:**\n\nImplement a Java class named `UrlRedirectService` that includes the following method:\n\n- **Method Signature**: `public String redirectToHomePage(List<String> roles)`\n- **Parameter Explanation**: The method takes a list of strings, `roles`, which represents the user's roles.\n- **Return Value**: Based on the list of roles, return the corresponding page path:\n  - If the role list contains `\"ADMIN\"`, return `\"/dashboard\"`.\n  - If the role list contains `\"USER\"` (but does not contain `\"ADMIN\"`), return `\"/homepage\"`.\n  - If the role list contains neither `\"ADMIN\"` nor `\"USER\"`, return `\"/login\"`.\n\nPlease implement the complete code in Java without a `Main` function, adhering to the following type definition:\n\n```java\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class UrlRedirectService {\n    public String redirectToHomePage(List<String> roles) { }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "function", "instruction": "Your code should include a function named process_room."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_form."}, {"type": "class", "instruction": "Your code should define a class named RetrieveCredit."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_account."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.math', 'java.awt']."}, {"type": "combination", "instruction": "You should initialize an object named customer as an instance of the RetrieveCredit class using ['token', 'notification', 'profile'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named retrieve_form that includes these methods ['insert_customer', 'transform_account', 'execute_dwa']."}, {"type": "combination", "instruction": "The function process_room should return a Map as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_account, which should contain these classes ['CheckEventData']."}, {"type": "global", "instruction": "Your answer in total should not exceed 12 lines."}], "instruction_dependence": {"10": [0, 1, 2, 9, 17], "13": [0, 1, 2, 9, 17], "14": [0, 1, 2, 8, 17], "15": [0, 1, 2, 7, 17], "16": [0, 1, 2, 9, 11, 17]}, "question_id": 562}
{"question": "\n\nWrite a Python function named `load_config` that reads a JSON configuration file and returns the configuration data as a dictionary. The function should handle common exceptions that may occur during file reading and JSON parsing, such as `FileNotFoundError` if the file does not exist, and `json.JSONDecodeError` if the file is not a valid JSON.\n\nThe function should have the following signature:\n\n```python\ndef load_config(filepath: str) -> dict:\n    \"\"\"\n    Reads a JSON configuration file and returns the configuration data as a dictionary.\n\n    Parameters:\n    - filepath (str): The path to the JSON configuration file.\n\n    Returns:\n    - dict: The configuration data.\n\n    Raises:\n    - FileNotFoundError: If the JSON file does not exist at the given filepath.\n    - json.JSONDecodeError: If the file is not a valid JSON.\n    \"\"\"\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named modify_account."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named transform_transaction."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_record."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django', 'Flask', 'tensorflow']."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5]}, "question_id": 563}
{"question": "\n\nCreate a Django web application that displays a list of blog entries and individual detail pages for each entry. The application should have the following features:\n\n1. A homepage that lists all blog entries with their titles and a short excerpt. Each entry should be clickable and lead to a detailed page for that entry.\n2. A detailed page for each blog entry that displays the title, publication date, author, and full content of the entry.\n3. An \"About Me\" page that displays static information about the blog author.\n4. A \"Contact\" page with static contact information.\n\nThe provided code snippet includes Django class-based views that need to be completed and used in the application. The `Entry` model is assumed to have the following fields: `title`, `pub_date`, `author`, and `content`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Variable account, type should be float."}, {"type": "variable", "instruction": "Variable account, the initial value should be status."}, {"type": "variable", "instruction": "Variable account should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named modify_tys."}, {"type": "class", "instruction": "Your code should define a class named ExecuteTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named process_cut."}, {"type": "combination", "instruction": "You should define an interface named modify_tys that includes these methods ['search_report', 'set_cut']."}, {"type": "combination", "instruction": "In your code, the class ExecuteTransaction should have these methods ['search_report', 'set_cut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_cut, which should contain these classes ['ExecuteMsg']."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "6": [0, 1, 2, 3], "10": [0, 1, 2, 7], "11": [0, 1, 2, 8], "12": [0, 1, 2, 8, 9]}, "question_id": 564}
{"question": "\n\nWrite a Python function `generate_permutations_with_replacement` that generates all possible permutations of length `m` from a given list of `n` elements, allowing for the replacement of elements (i.e., elements can be repeated in the permutations). The function should take two arguments: a list of elements `elements` and an integer `m` representing the length of each permutation.\n\nThe function should print each permutation on a new line, with elements separated by a space. The order in which the permutations are printed does not matter.\n\nFor example, given the list `['a', 'b', 'c']` and `m = 2`, the function should print:\n```\na a\na b\na c\nb a\nb b\nb c\nc a\nc b\nc c\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the or keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable shipment, should be a global variable."}, {"type": "variable", "instruction": "Variable shipment, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_info."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas']."}, {"type": "file", "instruction": "Your code should use the function calculate_info from the library Django."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "10": [0, 1, 2, 9], "13": [0, 1, 2, 12]}, "question_id": 565}
{"question": "Please write a complete Python function `solve(smiles)` that takes a molecule's SMILES as input \nand cuts all the rotatable bonds (as defined in RDKit's RotatableBondSmarts), \nreturning a set of fragment SMILES.\nYou can use `mol.GetSubstructMatches` to match `rdkit.Chem.Lipinski.RotatableBondSmarts` to get both ends of all rotatable bonds \nand use `mol.GetBondBetweenAtoms().GetIdx()` to find the index of the rotatable bonds.\nThen use `Chem.FragmentOnBonds()` to cut the rotatable bonds and `Chem.GetMolFrags()` to obtain the cut fragments.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable user, type should be bool."}, {"type": "variable", "instruction": "Variable user, the initial value should be dwa."}, {"type": "variable", "instruction": "Variable user should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named check_transaction."}, {"type": "function", "instruction": "Your code should not use any functions from the ['process_log', 'get_bill']."}, {"type": "interface", "instruction": "Your code should define an interface named handle_record."}, {"type": "class", "instruction": "Your code should define a class named SubmitKmsReport."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named display_log."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib']."}, {"type": "combination", "instruction": "Your code should define a class named SubmitKmsReport that implements the handle_record interface."}, {"type": "combination", "instruction": "The function check_transaction should take ['punish', 'status', 'data'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_log, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"4": [0, 3, 18], "5": [0, 3, 18], "6": [0, 3, 18], "7": [0, 3, 18], "12": [0, 11, 18], "15": [0, 10, 11, 18], "16": [0, 8, 18], "17": [0, 13, 18]}, "question_id": 566}
{"question": "Please write a Java method that handles the user login process. The method should accept two string parameters representing the username and password. If the username exists and the password is correct, set the user's login status to logged in and save the updated user information to the database. If the login fails, return false.\n\nPlease implement the method according to the following requirements:\n- The method name is `authenticateUser`.\n- Use a class named `UserDatabase` to simulate database operations. This class should contain two methods: `findUserByName` and `updateUserStatus`.\n- The `findUserByName` method looks up a user by username. If found, it returns a `User` object; otherwise, it returns null.\n- The `updateUserStatus` method updates the user's login status and saves it to the database.\n- The `User` class should contain three methods: `getUsername`, `getPassword`, and `setLoggedIn`.\n- Return true if the user logs in successfully; otherwise, return false.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass User {\n    private String username;\n    private String password;\n    private boolean loggedIn;\n    public User(String username, String password) {\n    }\n    public String getUsername() {\n    }\n    public String getPassword() {\n    }\n    public void setLoggedIn(boolean loggedIn) {\n    }\n}\nclass UserDatabase {\n    private Map<String, User> users = new HashMap<>();\n    public UserDatabase() {\n    }\n    public User findUserByName(String username) {\n    }\n    public void updateUserStatus(User user) {\n    }\n}\npublic class AuthenticationSystem {\n    private UserDatabase userDatabase = new UserDatabase();\n    public boolean authenticateUser(String username, String password) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named insert_cut."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "file", "instruction": "Your code should be organized in a package named set_account."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql', 'java.text']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"3": [0, 1, 2, 8, 9], "5": [0, 1, 4, 8, 9]}, "question_id": 567}
{"question": "\n\nWrite a program called `PrintPattern` that prompts the user for a positive integer `n`, and prints a pattern of numbers from 1 to `n` as shown in the examples below. The program should use a `do-while` loop to print the numbers and should throw an `IllegalArgumentException` if the input is not a positive integer.\n\nThe pattern should be as follows:\n- For `n = 1`, the output is `1`\n- For `n = 2`, the output is `1 2`\n- For `n = 3`, the output is `1 2 3`\n- And so on...\n\nExample of the program execution:\n```\nEnter a positive integer: 5\n1 2 3 4 5\n```\n\nIf the user enters a non-positive integer, the program should print an error message and terminate:\n```\nEnter a positive integer: -3\nError: Input must be a positive integer.\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable event, should not be a global variable."}, {"type": "variable", "instruction": "Variable event, the initial value should be profile."}, {"type": "class", "instruction": "Your code should define a class named CustomerForm."}, {"type": "file", "instruction": "Your code should be organized in a package named check_user."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang', 'java.text', 'java.awt']."}, {"type": "combination", "instruction": "In your code, the class CustomerForm should have these methods ['delete_record']."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 3, 12], "6": [0, 3, 12], "11": [0, 7, 12]}, "question_id": 568}
{"question": "\n\nDesign a Python class `Messenger` that acts as a wrapper for a set of functions from different modules (`get`, `send`, `setting`) related to messaging operations. The class should initialize with a `requests.Session` object, a `c_user` identifier, and an `fb_dtsg` token. It should provide a simplified interface to call the functions from the included modules without needing to pass the session, `c_user`, and `fb_dtsg` every time.\n\nThe `Messenger` class should have the following features:\n- A method to copy the provided `Session` object and use it for subsequent API calls.\n- Properties to get and set the `Session` object.\n- A method to fetch and wrap functions from the given modules (`get`, `send`, `setting`) so that they can be called as methods of the `Messenger` instance with the session, `c_user`, and `fb_dtsg` pre-filled.\n- An `update` method to update the `c_user` and `fb_dtsg` values and re-fetch the module methods if necessary.\n\nThe class should raise an `AttributeError` if an attempt is made to access a method that does not exist in the API.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the import keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "class", "instruction": "Your code should define a class named CutItem."}, {"type": "file", "instruction": "Your code should be organized in a package named check_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['Django']."}, {"type": "file", "instruction": "Your code should use the function analyze_cut from the library pandas."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'scikit-learn', 'requests']."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the CutItem class using ['user', 'order', 'message'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_customer, which should contain these classes ['Account']."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_customer, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 7], "10": [0, 1, 5], "11": [0, 1, 5, 6], "12": [0, 1, 6]}, "question_id": 569}
{"question": "\n\nDesign a system that allows for the verification of a user's email address in a database. The system should consist of a transaction that updates the email verification status and the user's record to reflect that their email has been verified.\n\nThe `VerifyEmailTX` function should be part of a `SQLStore` struct that manages database operations. The function takes a `context.Context` and `VerifyEmailTXParams` as arguments, where `VerifyEmailTXParams` includes an `EmailID` (the unique identifier for the email verification record) and a `Secret` (a unique token associated with the email verification process).\n\nThe function should perform the following operations within a database transaction:\n1. Update the email verification record using the provided `EmailID` and `Secret`. This operation should ensure that the secret matches the one stored in the database for the given email ID.\n2. Update the user record associated with the email verification record to set the `IsEmailVerified` field to `true`. This operation should only occur if the email verification record update is successful.\n\nThe function should return a `VerifyEmailTXResult` struct containing the updated `User` and `VerifyEmail` records if the transaction is successful. If any step in the transaction fails, the function should return an error and the transaction should be rolled back to ensure data consistency.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, type should be struct."}, {"type": "variable", "instruction": "Variable notification, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named generate_form."}, {"type": "class", "instruction": "Your code should define a class named InventoryMsg."}, {"type": "combination", "instruction": "In your code, the class InventoryMsg should have these methods ['delete_report', 'modify_account', 'handle_account']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"5": [0, 1, 4, 10], "6": [0, 1, 4, 10], "9": [0, 1, 8, 10]}, "question_id": 570}
{"question": "\nGiven an array of integers `nums` and an integer `k`, return the number of unique k-diff pairs in the array.\n\nA k-diff pair is defined as an integer pair `(nums[i], nums[j])`, where `i` and `j` are the indices of the two numbers in the array and their absolute difference is `k`.\n\n**Note**:\n- The pairs `(i, j)` and `(j, i)` are considered the same pair, and the number of unique pairs is what should be returned.\n- The array may contain duplicates, and the same element of the array can be used in different pairs as long as the pairs themselves are unique.\n- `k` is a non-negative integer.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the signed keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, the initial value should be room."}, {"type": "function", "instruction": "Your code should include a function named process_room."}, {"type": "interface", "instruction": "Your code should define an interface named submit_user."}, {"type": "class", "instruction": "Your code should define a class named UpdateShipmentReport."}, {"type": "file", "instruction": "Your code should import the following libraries ['cmath', 'iostream']."}, {"type": "file", "instruction": "Your code should use the function process_room from the library string."}, {"type": "combination", "instruction": "You should define an interface named submit_user that includes these methods ['execute_product', 'update_record']."}, {"type": "combination", "instruction": "In your code, the class UpdateShipmentReport should have these properties ['transaction']."}, {"type": "combination", "instruction": "The function process_room should return a bool as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "12": [0, 1, 2, 3, 11], "13": [0, 1, 2, 3, 9], "14": [0, 1, 2, 3, 10], "15": [0, 1, 2, 3, 8]}, "question_id": 571}
{"question": " Point Cloud Registration with GROR and Optional ICP Refinement\n\nIn this problem, you are given two point clouds representing 3D scans of an environment or object from different viewpoints. Your task is to implement a point cloud registration algorithm that aligns the source point cloud to the target point cloud using the Generalized Registration with Optimal Correspondences (GROR) algorithm. Optionally, you can refine the alignment using the Iterative Closest Point (ICP) algorithm.\n\nThe input to your program will be:\n1. The file path to the source point cloud (in PCD or PLY format).\n2. The file path to the target point cloud (in PCD or PLY format).\n3. The resolution threshold for the GROR algorithm (default 0.1).\n4. The optimal threshold for the GROR algorithm (default 800).\n5. A boolean flag indicating whether to perform ICP refinement after GROR alignment.\n\nYour program should output:\n1. The transformation matrix that aligns the source point cloud to the target point cloud.\n2. The time taken for the GROR alignment (and ICP refinement, if applicable).\n3. A visualization of the point clouds before and after registration.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the switch keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "variable", "instruction": "Variable notification, type should be string."}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named calculate_data."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named DwaToken."}, {"type": "file", "instruction": "Your code should not use the following libraries ['cmath']."}, {"type": "combination", "instruction": "In your code, the class DwaToken should have these properties ['credit', 'cut']."}, {"type": "combination", "instruction": "The function calculate_data should return a int as its result."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "10": [0, 1, 2, 9], "13": [0, 1, 2, 11], "14": [0, 1, 2, 9]}, "question_id": 572}
{"question": "Write a Python function is_spanning_set_of_null_space_of_M(vector_set), the purpose of which is to determine whether the given vector set vector_set constitutes the generating set of the null space for a specific matrix M. \nHere, matrix M is a known 3x3 real matrix, defined as M = [[1,3,-2], [2,1,-1],[-4,-2,2]].", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be dict."}, {"type": "variable", "instruction": "Variable credit, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named execute_profile."}, {"type": "class", "instruction": "Your code should define a class named ExecuteMsgCut."}, {"type": "file", "instruction": "Your code should import the following libraries ['Flask']."}, {"type": "file", "instruction": "Your code should use the function get_dwa from the library tensorflow."}, {"type": "combination", "instruction": "You should define an interface named execute_profile that includes these methods ['submit_bill']."}, {"type": "combination", "instruction": "In your code, the class ExecuteMsgCut should have these properties ['view', 'room']."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 12], "5": [0, 3, 12], "9": [0, 8, 12], "10": [0, 6, 12], "11": [0, 7, 12]}, "question_id": 573}
{"question": "\n\nDesign a configuration parser that reads in settings from a string map and provides defaults for missing or invalid values. The parser should handle boolean, string, integer, and unsigned integer types. The settings are case-insensitive and boolean values can be represented as \"true\", \"yes\", \"y\" for true, and any other non-empty string as false. An empty string for a boolean should be configurable to be considered as true or false based on the provided parameter.\n\nImplement the `ConfigParser` struct with the following methods:\n- `NewConfigParser(settings map[string]string, trueIfBlank bool) *ConfigParser`: Constructs a new `ConfigParser` with the given settings and a flag indicating if blank strings should be considered as true for boolean values.\n- `GetBool(key string, defaultValue bool) bool`: Retrieves a boolean value for the given key. If the key is not present or not a valid boolean, it returns the `defaultValue`.\n- `GetString(key string, defaultValue string) string`: Retrieves a string value for the given key. If the key is not present, it returns the `defaultValue`.\n- `GetInt(key string, defaultValue int) int`: Retrieves an integer value for the given key. If the key is not present or not a valid integer, it returns the `defaultValue`.\n- `GetUInt(key string, defaultValue uint) uint`: Retrieves an unsigned integer value for the given key. If the key is not present or not a valid unsigned integer, it returns the `defaultValue`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure interface."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, should not be a global variable."}, {"type": "variable", "instruction": "Variable product should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_event."}, {"type": "interface", "instruction": "Your code should define an interface named display_transaction."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named ItemView."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the ItemView class using ['kms', 'order', 'inventory'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named ItemView that implements the display_transaction interface."}, {"type": "combination", "instruction": "The function create_event should take ['report'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"6": [0, 1, 5, 15], "7": [0, 1, 5, 15], "10": [0, 1, 9, 15], "12": [0, 1, 11, 15], "13": [0, 1, 9, 11, 15], "14": [0, 1, 8, 15]}, "question_id": 574}
{"question": "\n\nWrite a function `maxNumberOfBalloons` that takes a string `text` as input and returns the maximum number of instances of the word \"balloon\" that can be formed by using the letters from `text`. Each letter from `text` can be used at most once.\n\nThe word \"balloon\" contains the following frequency of characters:\n- 'b' occurs 1 time\n- 'a' occurs 1 time\n- 'l' occurs 2 times\n- 'o' occurs 2 times\n- 'n' occurs 1 time\n\nThe function should count the frequency of each letter in the input string `text` and determine the minimum number of times the set of characters {'b', 'a', 'l', 'o', 'n'} can be repeated such that the word \"balloon\" can be formed. Note that the letters 'l' and 'o' must be counted twice.\n\nFor example, the input string \"balloonballoonx\" can form the word \"balloon\" twice, so the function should return 2.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Your code should define an enumeration named Status"}, {"type": "variable", "instruction": "Variable status, type should be string."}, {"type": "variable", "instruction": "Variable status, should be a global variable."}, {"type": "variable", "instruction": "Variable status, the initial value should be log."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named GetReportToken."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_account."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_account, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 4], "7": [0, 1, 4], "8": [0, 1, 4], "9": [0, 1, 4], "12": [0, 1, 11]}, "question_id": 575}
{"question": "\n\nIn a futuristic version of the game Rock-Paper-Scissors, scientists have developed an AI that can play the game with a twist. The AI uses a strategy based on a sequence of letters that are translated into hand shapes. The game has two parts, and the AI's strategy changes depending on the part it is playing.\n\nYour task is to implement the logic for the AI's strategy and determine the outcome of a series of rounds in a Rock-Paper-Scissors game.\n\nThe hand shapes are defined as follows:\n- Rock\n- Paper\n- Scissors\n\nThe letters are translated to hand shapes according to the following rules:\n- For Part 1:\n  - 'A' or 'X' translates to Rock\n  - 'B' or 'Y' translates to Paper\n  - 'C' or 'Z' translates to Scissors\n- For Part 2:\n  - 'A', 'B', 'C' follow the same rules as Part 1\n  - 'X' translates to the hand shape that would lose to the opponent's last hand shape\n  - 'Y' translates to the same hand shape as the opponent's last hand shape (a tie)\n  - 'Z' translates to the hand shape that would win against the opponent's last hand shape\n\nThe game consists of a series of rounds, and you need to implement the `RPSRound` struct to represent each round. You also need to implement the `winningShape` function that determines the winning hand shape between two given hand shapes.\n\nThe `winningShape` function should return a pointer to the winning hand shape, or `nil` if there is a tie.\n\nWrite a program that takes a series of letters representing the AI's strategy and the opponent's hand shapes for each round. The program should output the results of each round, indicating whether the AI won, lost, or tied.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named remove_bill."}, {"type": "function", "instruction": "Your code should not use any functions from the ['display_product', 'check_room', 'insert_message']."}, {"type": "interface", "instruction": "Your code should define an interface named sort_punish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['sort']."}, {"type": "combination", "instruction": "The function remove_bill should take ['dwa', 'event'] as parameters."}], "instruction_dependence": {"10": [0, 1, 2, 6]}, "question_id": 576}
{"question": "\n\nWrite a Python program that automates the process of injecting logging statements into Java source code files. The program should traverse a given directory, find all Java files, and perform the following modifications:\n\n1. Import a custom logger class at the beginning of each Java file, if it's not already imported.\n2. For each global variable, insert a logging statement after any line where the variable is modified outside of static methods.\n3. Ensure that logging statements are not added within comment blocks or inline comments.\n\nThe logger should be imported as `import logger.Logger;` and the logging statement should be in the form of `Logger.log(this, \"variableName\");` where `variableName` is the name of the global variable being modified.\n\nThe program should also attempt to create a subdirectory named `logger` within the source code directory and copy a provided `Logger.java` file into this new directory.\n\nProvide a clear docstring for the program, explaining its functionality, and include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "Variable message, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named check_data."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named ShipmentReport."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pytorch', 'tensorflow']."}, {"type": "combination", "instruction": "You should initialize an object named shipment as an instance of the ShipmentReport class using ['item', 'view', 'data'] for initialization."}, {"type": "combination", "instruction": "In your code, the class ShipmentReport should have these properties ['order', 'product', 'transaction']."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 8], "11": [0, 1, 8]}, "question_id": 577}
{"question": "\nDesign and implement a system for managing a user's address book using Domain-Driven Design (DDD) principles. The system should allow for the following operations:\n\n1. Find a specific address by its unique identifier.\n2. Retrieve all addresses associated with a particular owner.\n3. Create a new address entry for an owner.\n4. Update an existing address entry.\n5. Delete an address entry.\n\nEach address entry should contain the following information:\n- A unique identifier for the address (AddressID).\n- The owner's unique identifier (OwnerID).\n- The full name of the person or entity associated with the address.\n- A zip code.\n- A state or region.\n- The first line of the address (Line1).\n- An optional second line of the address (Line2).\n- A phone number.\n\nThe system should validate the input data and handle errors gracefully, providing meaningful error messages. Implement the necessary domain models, repositories, and use case interactors to achieve these functionalities.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, type should be int."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named modify_cut."}, {"type": "interface", "instruction": "Your code should define an interface named process_view."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named OrderView."}, {"type": "combination", "instruction": "You should initialize an object named message as an instance of the OrderView class using ['inventory'] for initialization."}, {"type": "combination", "instruction": "The function modify_cut should take ['data'] as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "9": [0, 1, 2, 3, 7], "12": [0, 1, 2, 3, 11], "14": [0, 1, 2, 3, 13], "15": [0, 1, 2, 3, 10]}, "question_id": 578}
{"question": "\n\nDesign a C++ class `Joystick12` that represents a 2-axis analog joystick. The joystick provides analog input along the X and Y axes, which should be read from two analog pins. The values read from the joystick should be normalized to a range of -1 to 1, with 0 representing the center position.\n\nThe class should include the following public member functions:\n- A constructor that takes two integers representing the analog pins connected to the X and Y axes of the joystick.\n- A destructor.\n- `getXInput()`: A member function that returns the current X-axis value as a float.\n- `getYInput()`: A member function that returns the current Y-axis value as a float.\n\nThe class should also include private member variables to store the context for the analog pins (using `mraa_aio_context`) and static constants to represent the expected analog values for the left, center, and right positions on both axes.\n\nWrite a program that demonstrates the usage of the `Joystick12` class by creating an instance of the joystick, reading the X and Y inputs, and printing them to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, type should be vector."}, {"type": "function", "instruction": "Your code should include a function named generate_room."}, {"type": "interface", "instruction": "Your code should define an interface named remove_bill."}, {"type": "class", "instruction": "Your code should define a class named ConfigureStatus."}, {"type": "file", "instruction": "Your code should import the following libraries ['cmath', 'algorithm']."}, {"type": "file", "instruction": "Your code should use the function generate_room from the library queue."}, {"type": "combination", "instruction": "Your code should define a class named ConfigureStatus that implements the remove_bill interface."}, {"type": "combination", "instruction": "The function generate_room should take ['token'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13, 14], "10": [0, 1, 9, 13, 14], "11": [0, 1, 7, 8, 13, 14], "12": [0, 1, 6, 13, 14]}, "question_id": 579}
{"question": "\nDesign a C++ program that uses the Message Passing Interface (MPI) to perform a simple communication task between processes in a parent-child relationship. The program should consist of two separate applications: a parent and a child. The parent application will spawn a specified number of child processes and then wait to receive a message from each child. The child processes will determine their rank within their communicator and send a unique message back to the parent. Specifically, if a child process has rank 2, it should send the total number of child processes back to the parent. Otherwise, it should send its rank. The parent should print out the messages received from each child process.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_credit."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TransformToken."}, {"type": "file", "instruction": "Your code should import the following libraries ['map']."}, {"type": "combination", "instruction": "You should initialize an object named dwa as an instance of the TransformToken class using ['request'] for initialization."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "9": [0, 1, 7]}, "question_id": 580}
{"question": " Implement a Network Message Handler for a Cryptocurrency Protocol\n\nIn a cryptocurrency network, nodes communicate with each other by sending and receiving messages. Each message has a header that includes information such as the command name and the size of the message. The body of the message contains the actual data being transmitted. Your task is to implement a network message handler that can process incoming messages and respond appropriately based on the command type.\n\nThe message handler should be able to:\n- Validate incoming message headers.\n- Parse the command from the message header.\n- Handle different types of messages based on the command.\n- Maintain a list of all known message types.\n- Provide functionality to check if a node has all desirable service flags.\n\nYou are provided with the following classes and functions:\n- `CMessageHeader`: Represents the header of a network message.\n- `CInv`: Represents an inventory message used to transmit data such as transactions or blocks.\n- `GetDesirableServiceFlags`: Returns the desirable service flags based on the current state of the node.\n- `SetServiceFlagsIBDCache`: Sets the state of the initial block download completion.\n- `getAllNetMessageTypes`: Returns a list of all known network message types.\n- `HasAllDesirableServiceFlags`: Checks if a node has all the desirable service flags.\n\nImplement the `NetworkMessageHandler` class with the following methods:\n- `ProcessMessage`: Takes a `CMessageHeader` and a payload as input, validates the message, and calls the appropriate handler based on the command.\n- `HandleVersion`: Handles the \"version\" command.\n- `HandleVerack`: Handles the \"verack\" command.\n- `HandleAddr`: Handles the \"addr\" command.\n- `HandleInv`: Handles the \"inv\" command.\n- `HandleGetData`: Handles the \"getdata\" command.\n- `HandleNotFound`: Handles the \"notfound\" command.\n- `HandlePing`: Handles the \"ping\" command.\n- `HandlePong`: Handles the \"pong\" command.\n\nYou may assume that the payload is a byte array that can be deserialized into the appropriate message type based on the command. You do not need to implement the deserialization logic or the actual handling logic for each command; simply provide the method stubs that would be called for each command.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "function", "instruction": "Your code should include a function named handle_msg."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_transaction."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named KmsProfile."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_status."}, {"type": "combination", "instruction": "In your code, the class KmsProfile should have these methods ['display_record', 'filter_info']."}, {"type": "combination", "instruction": "The function handle_msg should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_status, which should contain these classes ['ManageReport', 'ExecuteBillUser', 'UpdateUserCustomer']."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}], "instruction_dependence": {"6": [0, 5, 12], "9": [0, 7, 12], "10": [0, 4, 12], "11": [0, 7, 8, 12]}, "question_id": 581}
{"question": "Please write a Java program to manage the borrowing information of books in a library. Specifically, you need to implement a method that receives a book ID as a parameter and returns the last borrowing time of the book. If the book has never been borrowed, it should return null.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookLoanManager {\n    private Map<Long, Long> bookBorrowTimes;\n    public BookLoanManager() {\n    }\n    public void setBorrowTime(Long bookId, Long borrowTime) {\n    }\n    public Long getLastBorrowedTime(Long bookId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be Map."}, {"type": "variable", "instruction": "Variable credit, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named display_info."}, {"type": "interface", "instruction": "Your code should define an interface named manage_view."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_room."}, {"type": "combination", "instruction": "You should initialize an object named customer as an instance of the Form class using ['view'] for initialization."}, {"type": "combination", "instruction": "In your code, the class Form should have these properties ['product', 'notification']."}, {"type": "combination", "instruction": "The function display_info should take ['order'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_room, which should contain these classes ['MsgTys']."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "9": [0, 1, 8], "12": [0, 1, 10], "13": [0, 1, 10], "14": [0, 1, 7], "15": [0, 1, 10, 11]}, "question_id": 582}
{"question": "Reimplement the following code to optimize its performance.\n```python\nfrom math import sqrt\n\ndef count_square_sum_triples(n: int) -> int:\n    '''\n    Calculate the number of square triples (a, b, c) where a^2 + b^2 = c^2 and 1 <= a, b, c <= n.\n\n    Args:\n    n (int): The upper limit for a, b, and c.\n\n    Returns:\n    int: The number of square triples within the given range.\n    Example:\n    assert count_square_sum_triples(5) == 1\n    '''\n\n    count = 0\n    for a in range(1, n+1):\n        for b in range(a, n+1):  # 注意这里b从a开始，避免重复计数\n            for c in range(b, n+1):  # 注意这里c从b开始，避免重复计数\n                if a*a + b*b == c*c:\n                    count += 1\n    return count\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the yield keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named execute_token."}, {"type": "class", "instruction": "Your code should define a class named SetRequestTys."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_token."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas']."}, {"type": "combination", "instruction": "In your code, the class SetRequestTys should have these methods ['manage_user', 'manage_customer']."}, {"type": "combination", "instruction": "The function execute_token should take ['form', 'msg'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_token, which should contain these classes ['Log', 'Cut', 'RemoveKmsBill']."}, {"type": "global", "instruction": "Your answer in total should not exceed 21 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 14], "11": [0, 1, 2, 3, 7, 14], "12": [0, 1, 2, 3, 6, 14], "13": [0, 1, 2, 3, 7, 9, 14]}, "question_id": 583}
{"question": "\n\nImplement a Q-learning agent to solve the Taxi-v3 environment from OpenAI's Gym. The Taxi-v3 task involves picking up a passenger at one location and dropping them off at another within a grid world. There are four designated locations in the grid world, and the taxi must navigate to the correct location, pick up the passenger, and drop them off at their target destination.\n\nYour task is to write a Python function `train_taxi_q_learning` that trains a Q-learning agent on the Taxi-v3 environment. The function should return the Q-table learned during training and a list of average rewards per episode.\n\nThe function should accept the following parameters with default values:\n- `learning_rate`: The learning rate for the Q-learning update rule. Default value should be 0.9.\n- `discount_rate`: The discount factor for future rewards. Default value should be 0.8.\n- `epsilon_decay_rate`: The rate at which the exploration probability decays. Default value should be 0.005.\n- `num_episodes`: The number of episodes to train the agent for. Default value should be 1000.\n- `max_steps`: The maximum number of steps per episode. Default value should be 99.\n\nThe Q-learning update rule is as follows:\n```\nQ[state, action] = Q[state, action] + learning_rate * (reward + discount_rate * max(Q[new_state, :]) - Q[state, action])\n```\n\nThe exploration-exploitation tradeoff should be managed using an epsilon-greedy strategy, where the value of epsilon decays exponentially after each episode according to the `epsilon_decay_rate`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable credit, type should be bool."}, {"type": "variable", "instruction": "Variable credit, should be a global variable."}, {"type": "variable", "instruction": "Variable credit should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named manage_shipment."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named SortEvent."}, {"type": "combination", "instruction": "The function manage_shipment should return a set as its result."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"6": [0, 1, 5, 14], "7": [0, 1, 5, 14], "8": [0, 1, 5, 14], "9": [0, 1, 5, 14], "11": [0, 1, 10, 14], "13": [0, 1, 10, 14]}, "question_id": 584}
{"question": "\n\nWrite a program that finds the maximum sum of two adjacent numbers in a sequence of integers. The sequence is provided by the user and must contain more than one element. The program should prompt the user to enter the number of elements in the sequence, followed by the actual elements. After processing the input, the program should output the largest sum of two adjacent numbers in the sequence.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable profile, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named get_request."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "class", "instruction": "Your code should define a class named RemoveRequestUser."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "combination", "instruction": "In your code, the class RemoveRequestUser should have these properties ['dwa']."}, {"type": "combination", "instruction": "The function get_request should take ['profile', 'item', 'tys'] as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "9": [0, 1, 8], "10": [0, 1, 8], "11": [0, 1, 6]}, "question_id": 585}
{"question": "\n\nDesign a Django application that manages series and user reviews. Each series can have multiple reviews, but a user can only leave one review per series. Reviews consist of a rating from 1 to 5. The application should automatically calculate and update the average rating of a series whenever a new review is added or an existing review is updated.\n\nImplement the `Review` model with the following requirements:\n\n1. The `Review` model should have a `rating` field that accepts integers from 1 to 5.\n2. The `Review` model should have a `serie` field that creates a foreign key relationship with a `Serie` model (not provided in the snippet).\n3. The `Review` model should have a `user` field that creates a foreign key relationship with a `User` model (not provided in the snippet).\n4. Ensure that a user can only leave one review per series by setting the appropriate constraints.\n5. Override the `save` method to calculate and update the average rating of the series associated with the review.\n\nWrite a Python script that defines the `Review` model according to the above specifications. Also, provide test cases to verify that the average rating is correctly calculated and updated when a review is saved.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the True keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable item, should be a global variable."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "file", "instruction": "Your code should use the function sort_report from the library scikit-learn."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "8": [0, 1, 2, 7]}, "question_id": 586}
{"question": "\n\nWrite a program that prompts the user to enter a floating point number and then outputs the number rounded to the nearest integer. The program should handle invalid input gracefully by displaying an error message.\n\nThe program should follow these steps:\n1. Prompt the user to enter a floating point number.\n2. Read the input from the user.\n3. Check if the input is a valid floating point number.\n4. If the input is valid, round the number to the nearest integer.\n5. If the input is invalid (not a floating point number), display an error message.\n6. Print the rounded integer.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the chan keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named search_form."}, {"type": "file", "instruction": "Your code should be organized in a package named create_account."}], "instruction_dependence": {"5": [0, 1, 4]}, "question_id": 587}
{"question": "Please convert the following code to a cpp implementation, with the function signature `std::vector<std::string> words_string(std::string s)`.  \nNote:  \n1. Only implement the target function and import the necessary packages, do not generate other code.\n\n```python\n\ndef words_string(s):\n    \n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable inventory, type should be float."}, {"type": "variable", "instruction": "Variable inventory, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named process_profile."}, {"type": "interface", "instruction": "Your code should define an interface named check_customer."}, {"type": "class", "instruction": "Your code should define a class named HandlePunishAccount."}, {"type": "file", "instruction": "Your code should not use the following libraries ['iostream']."}, {"type": "combination", "instruction": "The function process_profile should take ['order', 'account', 'shipment'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 15], "8": [0, 1, 2, 6, 15], "9": [0, 1, 2, 6, 15], "14": [0, 1, 2, 10, 15]}, "question_id": 588}
{"question": "\nDesign a simple Qt application that creates a main window with a vertical layout containing two scrollable areas. Each scrollable area should contain a horizontal layout with five buttons labeled \"Button 1\" to \"Button 5\". The application should be resizable, and the scrollable areas should show scroll bars when the window is too small to display all buttons.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, type should be vector."}, {"type": "variable", "instruction": "Variable order, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_event."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named DeleteMsg."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_bill."}, {"type": "combination", "instruction": "In your code, the class DeleteMsg should have these methods ['calculate_view']."}, {"type": "combination", "instruction": "The function calculate_event should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_bill, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 10], "14": [0, 1, 2, 3, 8], "15": [0, 1, 2, 3, 12]}, "question_id": 589}
{"question": "\n\nDesign a Go program that utilizes the provided `letter` package to perform frequency analysis of runes in multiple strings. The program should be able to process a list of strings and calculate the frequency of each rune (character) both sequentially and concurrently. The frequency analysis should be case-insensitive, meaning that 'A' and 'a' should be counted as the same rune.\n\nThe program should include two functions:\n\n1. `SequentialFrequency(texts []string) FreqMap`: This function should take a slice of strings and return a `FreqMap` that represents the frequency of each rune across all strings, calculated sequentially.\n\n2. `ConcurrentFrequency(texts []string) FreqMap`: This function should take a slice of strings and return a `FreqMap` that represents the frequency of each rune across all strings, calculated concurrently. The function should use goroutines to parallelize the computation, with each goroutine processing one string from the slice.\n\nThe `FreqMap` type is a map where the key is a rune and the value is the count of how many times that rune appears in the input strings.\n\nWrite test cases to verify the correctness of both functions, ensuring that they produce the same results.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "function", "instruction": "Your code should include a function named set_order."}, {"type": "class", "instruction": "Your code should define a class named CutProfile."}, {"type": "combination", "instruction": "You should initialize an object named account as an instance of the CutProfile class using ['report'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CutProfile should have these properties ['order', 'dwa', 'status']."}, {"type": "combination", "instruction": "The function set_order should take ['customer'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"5": [0, 1, 4, 8], "6": [0, 1, 4, 8], "7": [0, 1, 3, 8]}, "question_id": 590}
{"question": "\n\nWrite a function `find_accumulator_before_loop` that reads a file containing a simple set of instructions for a boot code and returns the value of the accumulator right before any instruction is executed a second time, which would indicate the start of an infinite loop.\n\nThe boot code is represented in a text file where each line contains an instruction consisting of an operation (`op`) and an argument (`arg`). The possible operations are:\n\n- `acc` increases or decreases a single global value called the accumulator by the value given in the argument. For example, `acc +7` would increase the accumulator by 7. The accumulator starts at 0.\n- `jmp` jumps to a new instruction relative to itself. The next instruction to execute is found using the argument as an offset from the `jmp` instruction; for example, `jmp +2` would skip the next instruction, `jmp +1` would continue to the instruction immediately below it, and `jmp -20` would cause the instruction 20 lines above to be executed next.\n- `nop` stands for No OPeration - it does nothing. The instruction immediately below it is executed next.\n\nThe function should take the filename of the boot code as its argument and return the value of the accumulator.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure collections."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Your code should define an enumeration named Language"}, {"type": "variable", "instruction": "Variable order, the initial value should be dwa."}, {"type": "variable", "instruction": "Variable order, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named transform_token."}, {"type": "class", "instruction": "Your code should define a class named TransactionDwa."}, {"type": "combination", "instruction": "You should initialize an object named form as an instance of the TransactionDwa class using ['shipment'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named TransactionDwa that implements the transform_token interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"6": [0, 1, 4, 12], "7": [0, 1, 4, 12], "10": [0, 1, 9, 12], "11": [0, 1, 8, 9, 12]}, "question_id": 591}
{"question": "\n\nDesign a Python class `LinearRegressionDiagnostics` that extends the functionality of a simple linear regression model to include various diagnostic measures. The class should be able to fit a linear regression model to the provided training data, calculate and store the model's coefficients, and provide several diagnostic statistics to evaluate the model's performance and assumptions.\n\nThe class should include the following features:\n\n1. Fit a linear regression model to the training data.\n2. Calculate the F-statistic and its associated p-value to assess the overall significance of the model.\n3. Calculate the t-statistics and their associated p-values for each coefficient to assess their individual significance.\n4. Calculate Cook's distance for each observation to identify potential outliers or influential points.\n5. Calculate leverage values to assess the influence of each observation on the model's predictions.\n6. Calculate studentized residuals to identify outliers in the response variable.\n7. Predict the response variable for a new set of observations.\n\nThe class should handle both numerical and categorical predictors. If a categorical predictor is specified, the class should create dummy variables for the categories and include them in the model.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "Variable kms, type should be tuple."}, {"type": "variable", "instruction": "Variable kms, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named modify_data."}, {"type": "interface", "instruction": "Your code should define an interface named check_account."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named GenerateDwaCredit."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch', 'requests']."}, {"type": "file", "instruction": "Your code should use the function modify_data from the library scikit-learn."}, {"type": "combination", "instruction": "You should define an interface named check_account that includes these methods ['process_punish', 'set_dwa']."}], "instruction_dependence": {"5": [0, 3], "6": [0, 3], "9": [0, 8], "11": [0, 10], "13": [0, 12], "14": [0, 8]}, "question_id": 592}
{"question": "Please write a Java program that implements a function in a simple book management system: reset the status of all books to not borrowed. In this system, each book has a status indicating whether it is borrowed. We use a `Book` class to represent each book, which contains a boolean member variable `isBorrowed` that indicates the borrowing status of the book (`true` means borrowed, `false` means not borrowed). You need to write a class named `Library`, which contains a method `resetBooksStatus` that resets the status of all books in the inventory to not borrowed.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\nclass Book {\n    boolean isBorrowed;\n    public Book(boolean isBorrowed) {\n    }\n    public void setBorrowed(boolean isBorrowed) {\n    }\n    public boolean isBorrowed() {\n    }\n}\nclass Library {\n    Book[] books;\n    public Library(Book[] books) {\n    }\n    public void resetBooksStatus() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named sort_kms."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named update_account."}, {"type": "class", "instruction": "Your code should define a class named TysRequest."}, {"type": "file", "instruction": "Your code should be organized in a package named update_notification."}, {"type": "combination", "instruction": "You should define an interface named update_account that includes these methods ['add_profile']."}, {"type": "combination", "instruction": "Your code should define a class named TysRequest that implements the update_account interface."}, {"type": "combination", "instruction": "In your code, the class TysRequest should have these methods ['add_profile']."}, {"type": "combination", "instruction": "The function sort_kms should take ['status', 'profile', 'notification'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_notification, which should contain these classes ['ProcessInventory', 'User', 'AddDwaRoom']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 8], "13": [0, 1, 2, 3, 10], "14": [0, 1, 2, 3, 10, 11], "15": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 8], "17": [0, 1, 2, 3, 11, 12]}, "question_id": 593}
{"question": "Please write a Java program to validate if the user's input phone number meets specific format requirements. The format requirements for the phone number are as follows: it must start with \"13\", \"14\", \"15\", \"17\", or \"18\", followed by 9 digits. If the phone number meets the format requirements, the function returns `true`; if it does not, a custom exception `InvalidPhoneNumberException` should be thrown with the message \"Invalid phone number\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.function.Predicate;\nimport java.util.regex.Pattern;\nclass InvalidPhoneNumberException extends Exception {\n    public InvalidPhoneNumberException(String message) {\n        super(message);\n    }\n}\npublic class PhoneNumberValidator {\n    private static final String PHONE_NUMBER_PATTERN = \"^(13|14|15|17|18)\\\\d{9}$\";\n    public boolean validatePhoneNumber(String phoneNumber) throws InvalidPhoneNumberException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "function", "instruction": "Your code should include a function named remove_inventory."}, {"type": "interface", "instruction": "Your code should define an interface named search_data."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text']."}, {"type": "combination", "instruction": "Your code should define a class named Form that implements the search_data interface."}, {"type": "combination", "instruction": "The function remove_inventory should take ['record', 'view'] as parameters."}, {"type": "combination", "instruction": "The function remove_inventory should return a int as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 21 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 15], "10": [0, 1, 2, 3, 9, 15], "12": [0, 1, 2, 3, 8, 9, 15], "13": [0, 1, 2, 3, 7, 15], "14": [0, 1, 2, 3, 7, 15]}, "question_id": 594}
{"question": "\nWrite a program that finds the largest integer within a given range that has a digit sum equal to a specified value. The program should take three integers as input: `n`, `m`, and `k`, where `n` and `m` define the inclusive range `[n, m]`, and `k` is the target digit sum. The program should output the largest integer within the range `[n, m]` whose sum of digits equals `k`. If no such number exists, the program should output `-1`.\n\nFor example, if the input is `n = 10`, `m = 100`, and `k = 2`, the program should output `20` because it is the largest number between 10 and 100 whose digits sum up to 2.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure set."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable order, should not be a global variable."}, {"type": "variable", "instruction": "Variable order, the initial value should be msg."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_room', 'submit_profile']."}, {"type": "interface", "instruction": "Your code should define an interface named update_order."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CutShipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['algorithm']."}, {"type": "file", "instruction": "Your code should use the function check_data from the library queue."}, {"type": "file", "instruction": "Your code should not use the following libraries ['set']."}, {"type": "combination", "instruction": "In your code, the class CutShipment should have these methods ['configure_dwa', 'display_message']."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 17], "7": [0, 1, 2, 5, 17], "8": [0, 1, 2, 5, 17], "11": [0, 1, 2, 10, 17], "14": [0, 1, 2, 13, 17], "16": [0, 1, 2, 12, 17]}, "question_id": 595}
{"question": "\n\nDesign a PID controller for an autonomous rover that navigates a predefined path. The PID controller should adjust the rover's speed to maintain a set distance from an obstacle detected by a sensor. The controller should prevent overshooting and oscillations around the setpoint distance.\n\nThe PID controller should have the following features:\n- It should be able to handle minimum and maximum speed constraints.\n- It should include anti-windup to prevent the integral term from accumulating excessively when the rover is at a standstill or when the error is too large.\n- It should be able to update its PID constants (Kp, Ki, Kd) during runtime to adapt to different terrains or obstacles.\n\nWrite a C++ class `PID` that implements the PID controller with the following methods:\n- A constructor that initializes the PID controller with minimum and maximum speed values, and PID constants (Kp, Ki, Kd).\n- A `compute` method that takes the setpoint distance, the measured distance from the obstacle, and the time delta since the last update, and returns the new speed command for the rover.\n- An `updateConstants` method that allows updating the PID constants during runtime.\n\nThe PID controller should ensure that the output speed command is within the specified minimum and maximum speed constraints.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named filter_order."}, {"type": "class", "instruction": "Your code should define a class named MessageCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_token."}, {"type": "file", "instruction": "Your code should not use the following libraries ['set', 'cmath', 'queue']."}, {"type": "combination", "instruction": "In your code, the class MessageCustomer should have these methods ['transform_punish', 'sort_record']."}, {"type": "combination", "instruction": "The function filter_order should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_token, which should contain these functions ."}], "instruction_dependence": {"4": [0, 3], "9": [0, 6], "10": [0, 5], "11": [0, 7]}, "question_id": 596}
{"question": "Please write a Java program to handle specific encoding conversions in a string. Specifically, you need to implement a class named `StringEncoder` which contains a method named `convertEncoding`. This method accepts two string parameters: the first parameter `originalString` represents the original string, and the second parameter `desiredEncoding` represents the desired encoding format (such as \"UTF-8\", \"ISO-8859-1\", etc.). If the conversion is successful, the method should return the converted string; if the conversion fails, it should throw an `UnsupportedEncodingException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.UnsupportedEncodingException;\npublic class StringEncoder {\n    public String convertEncoding(String originalString, String desiredEncoding) throws UnsupportedEncodingException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable punish, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named get_token."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named CalculateLogCustomer."}, {"type": "combination", "instruction": "In your code, the class CalculateLogCustomer should have these methods ['execute_event', 'remove_transaction']."}, {"type": "combination", "instruction": "The function get_token should take ['room', 'profile', 'account'] as parameters."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "10": [0, 1, 2, 6]}, "question_id": 597}
{"question": "\n\nDesign a system that manages customer questions and their corresponding responses from counselors. The system should be able to record the details of customer questions, including the customer ID, question title, question content, and registration date. Additionally, when a counselor responds to a question, the system should record the counselor's ID, response content, response date, and a check state indicating the status of the response (e.g., pending, reviewed, resolved).\n\nImplement a `QuestionReceiveDTO` class that serves as a Data Transfer Object (DTO) to encapsulate all the information related to a question and its response. The class should include fields for question sequence, counselor ID, response content, creation date of the response, response date, check state, customer ID, question title, question content, registration date of the question, and counselor name.\n\nProvide a static method `readFrom(QuestionReceive q)` within the `QuestionReceiveDTO` class that takes an instance of `QuestionReceive` (which contains the question and counselor information) and constructs a `QuestionReceiveDTO` object with all the relevant data.\n\nThe `QuestionReceive` class and its related classes (`Question` and `Counselor`) are not provided, but you can assume they have the necessary getters to retrieve their respective fields.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable punish, should be a global variable."}, {"type": "variable", "instruction": "Variable punish, the initial value should be user."}, {"type": "class", "instruction": "Your code should define a class named Shipment."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql', 'java.net']."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the Shipment class using ['credit'] for initialization."}, {"type": "combination", "instruction": "In your code, the class Shipment should have these properties ['transaction', 'view']."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "5": [0, 1, 2], "7": [0, 1, 6], "10": [0, 1, 6], "11": [0, 1, 6]}, "question_id": 598}
{"question": "\n\nIn a 2D game environment, we have entities that can move around within a certain boundary. The `Entity` class is a subclass of `pyglet.sprite.Sprite` and represents any object in the game that has a position. The `Character` class is a subclass of `Entity` and represents a character in the game that can move to a specific coordinate.\n\nYour task is to extend the given code snippet to include the following functionalities:\n\n1. Implement the `move` method in the `Character` class that updates the character's position by a given delta for x and y coordinates. The character should not move outside the specified width and height boundaries of the game environment.\n\n2. Implement the `is_within_bounds` method in the `Character` class that checks if the character is within the game boundaries after a potential move.\n\n3. Write a `GameEnvironment` class that initializes with a width and height and can add characters to the environment. It should have a method `update` that moves all characters in the environment by their specified deltas if they remain within bounds.\n\n4. Ensure that the `Character` class correctly initializes the sprite using the `__init__` method from the `Entity` class.\n\n5. Provide test cases to verify that characters can move within the game environment and are correctly bounded by the environment's limits.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named search_message."}, {"type": "file", "instruction": "Your code should be organized in a package named update_credit."}, {"type": "file", "instruction": "Your code should not use the following libraries ['scikit-learn', 'requests', 'Django']."}, {"type": "combination", "instruction": "The function search_message should take ['token', 'transaction', 'order'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_credit, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 5], "9": [0, 1, 2, 6]}, "question_id": 599}
{"question": "Please write a Java method `convertToChineseName` that receives an integer parameter `directionCode` and returns the corresponding Chinese direction name based on the parameter. Specific requirements are as follows:\n\n- If `directionCode` is 1, return \"上\".\n- If `directionCode` is 2, return \"下\".\n- If `directionCode` is 3, return \"左\".\n- If `directionCode` is 4, return \"右\".\n- If `directionCode` is not 1, 2, 3, or 4, throw an `IllegalArgumentException` with the message \"无效的方向代码\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class DirectionConverter {\n    public static String convertToChineseName(int directionCode) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Your code should define an enumeration named Status"}, {"type": "variable", "instruction": "Variable token, the initial value should be item."}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named Shipment."}], "instruction_dependence": {"5": [0, 3], "6": [0, 3]}, "question_id": 600}
