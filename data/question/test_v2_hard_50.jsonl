{"question": "Implement the function `create_ECOC_dataset(X, y, M)` that creates datasets for Error-Correcting Output Codes. The function receives the dataset `(X, y)` and code book `M` as input, and returns a list of datasets `[(X1, y1), ..., (Xn, yn)]`. The `i`-th dataset `(Xi, yi)` is used to train classifiers that predict whether bit `i` is on or off. Ensure the function handles type mismatches correctly.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the numpy library."}, {"type": "class", "instruction": "Your code should define a class named ECOCDataset."}, {"type": "file", "instruction": "Your code should import the following libraries numpy."}, {"type": "file", "instruction": "Your code should not use the following libraries pandas."}, {"type": "combination", "instruction": "In your code, the class ECOCDataset should have these methods create_dataset."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 4, 8]}, "question_id": 1}
{"question": "Implement a map that blocks the routine when the key does not exist, until data is written in. The corresponding interface is as follows.\n```go\ntype BMap interface {\n\tBSet(key string, val interface{})\n\tBGet(key string, timeout time.Duration) (interface{}, bool)\n}\n\nRequirements:\n1. The name of the implemented type should be `BlockMap`\n2. In addition to the above interface, you also need to implement `func NewBlockMap() *BlockMap` for construction.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named blockMap."}, {"type": "variable", "instruction": "Variable blockMap, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named BMap."}, {"type": "class", "instruction": "Your code should define a class named BlockMap."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries sync, time."}, {"type": "file", "instruction": "Your code should use the function NewCond from the library sync."}, {"type": "combination", "instruction": "You should define an interface named BMap that includes these methods BSet, BGet."}], "instruction_dependence": {"8": [0, 1, 2, 7], "11": [0, 1, 2, 10], "13": [0, 1, 2, 12], "14": [0, 1, 2, 9]}, "question_id": 2}
{"question": "Write a C++ program that performs a 2D transformation on a point in space. The transformation includes a rotation followed by a translation. The point and the transformation parameters (rotation angle and translation vector) should be provided by the user. The rotation should be performed around the origin (0,0) and the translation should be applied after the rotation. The rotation angle is given in degrees and the translation vector is a 2D vector. The program should use the Eigen library to define and manipulate vectors and matrices. The output should be the transformed point in 2D space.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named transformed_point."}, {"type": "variable", "instruction": "Variable transformed_point, type should be Eigen::Vector2d."}, {"type": "variable", "instruction": "Variable transformed_point, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named transformPoint."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the std::vector library."}, {"type": "class", "instruction": "Your code should define a class named Transformation."}, {"type": "combination", "instruction": "In your code, the class Transformation should have these properties rotation_angle, translation_vector."}, {"type": "combination", "instruction": "In your code, the class Transformation should have these methods applyRotation, applyTranslation."}, {"type": "combination", "instruction": "The function transformPoint should return a Eigen::Vector2d as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"2": [0, 1, 11, 12], "3": [0, 1, 11, 12], "5": [0, 4, 11, 12], "8": [0, 7, 11, 12], "9": [0, 7, 11, 12], "10": [0, 4, 11, 12]}, "question_id": 3}
{"question": "Design a Go application that simulates a simplified version of a content management system (CMS) with fake data for spaces, groups, and users. The system should provide RESTful API endpoints to manage and retrieve this fake data. The application should include the following functionalities:\n\n1. **Get Space List**: Retrieve a list of fake spaces with pagination support.\n2. **Get Group List**: Retrieve a list of fake groups with pagination support.\n3. **Get User List by Group Name**: Retrieve a list of fake users belonging to a specific group with pagination support.\n4. **Get User by Username**: Retrieve a single fake user by their username.\n5. **Configure Fake Data**: Configure the fake data for groups, spaces, and users.\n6. **Render Index Page**: Render an index page with the counts of spaces, groups, and users, and their details in JSON format.\n7. **Download Zip File**: Provide a URL for downloading a zip file based on a given path.\n8. **File Download**: Serve a file for download, either from a specified path or a default file if the specified one does not exist.\n\nThe application should use an in-memory cache to store a \"success\" flag that determines if the endpoints should return a successful response or an error. If the \"success\" flag is not set to true, the endpoints should return an HTTP 401 error.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cache."}, {"type": "variable", "instruction": "Variable cache, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named configureFakeData."}, {"type": "interface", "instruction": "Your code should define an interface named CacheManager."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named User."}, {"type": "file", "instruction": "Your code should be organized in a package named cms."}, {"type": "file", "instruction": "Your code should not use the following libraries [\"net/http\", \"encoding/json\"]."}, {"type": "combination", "instruction": "In your code, the class User should have these methods [\"GetUsername\", \"GetGroup\"]."}, {"type": "combination", "instruction": "Your code should be organized in a package named cms, which should contain these classes [\"User\", \"Group\", \"Space\"]."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 13], "7": [0, 6, 13], "11": [0, 8, 13], "12": [0, 8, 9, 13]}, "question_id": 4}
{"question": "Design a Java program that manages a simple client database using Apache Cassandra as the backend storage. The program should provide functionalities to create, retrieve, update, and delete client information. Each client should have a unique name, an email address, and a registration date. The program should enforce the uniqueness of client names and handle any potential conflicts or errors that may arise during database operations.\n\nImplement the `ClientService` class with the following methods:\n\n- `createClient(String name, String email, LocalDate registrationDate)`: Adds a new client to the database. If a client with the given name already exists, it should throw a `ServiceException` indicating a conflict.\n- `fetchAllClients()`: Retrieves a list of all clients from the database.\n- `findClientByName(String name)`: Retrieves a single client by their unique name. If the client does not exist, it should throw a `ServiceException` indicating the client was not found.\n- `updateClientEmail(String name, String newEmail)`: Updates the email address of an existing client. If the client does not exist, it should throw a `ServiceException`.\n- `deleteClient(String name)`: Removes a client from the database by their unique name. If the client does not exist, it should throw a `ServiceException`.\n\nThe `ClientEntity` class should be defined with appropriate fields, constructors, getters, and setters.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named clientCount."}, {"type": "variable", "instruction": "Variable clientCount, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named ClientOperations."}, {"type": "class", "instruction": "Your code should define a class named ClientService."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.clientdb."}, {"type": "file", "instruction": "Your code should import the following libraries com.datastax.oss.driver.api.core.CqlSession, com.datastax.oss.driver.api.core.cql.ResultSet, com.datastax.oss.driver.api.core.cql.Row."}, {"type": "combination", "instruction": "You should initialize an object named session as an instance of the CqlSession class using no parameters for initialization."}, {"type": "combination", "instruction": "You should define an interface named ClientOperations that includes these methods createClient, fetchAllClients, findClientByName, updateClientEmail, deleteClient."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.clientdb, which should contain these functions createClient, fetchAllClients, findClientByName, updateClientEmail, deleteClient."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7], "11": [0, 1, 2, 7], "12": [0, 1, 2, 6], "13": [0, 1, 2, 9]}, "question_id": 5}
{"question": "Design a Python Django application that models a news aggregation system. The system should be able to track news articles from various sources and associate them with politicians. The application should consist of two models: `Source` and `Article`. The `Source` model represents the news sources and should include the following fields: `name`, `rss`, `type`, and `image`. The `Article` model represents the news articles and should include the following fields: `headline`, `source`, `published`, `link`, `first_image_url`, `guid`, `created`, and `politician`. Additionally, the `Article` model should have a string representation that returns its headline and a Meta class with a `verbose_name_plural` set to \"Articles\".", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `source_count`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `source_count` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `get_article_count`."}, {"type": "class", "instruction": "Your code should define a class named `NewsAggregator`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `news_aggregator`."}, {"type": "file", "instruction": "Your code should not use the following libraries: `pandas`, `numpy`."}, {"type": "combination", "instruction": "The function `get_article_count` should return a integer as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `news_aggregator`, which should contain these functions: `get_article_count`, `add_source`, `remove_source`."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10], "14": [0, 1, 2, 9], "15": [0, 1, 2, 12]}, "question_id": 6}
{"question": "Design a Go program that parses a stream of bytes representing a Program Specific Information (PSI) table from a digital television stream. The PSI table contains metadata about the television program and is used by digital televisions to display information about the program and its associated streams. The PSI table has the following structure: - A pointer field, which is a single byte indicating the number of bytes until the start of the PSI data. - A table header, which includes: - Table ID (1 byte): An identifier for the type of table. - Section Syntax Indicator (1 bit): A flag indicating if the table uses section syntax. - Private Indicator (1 bit): A flag indicating if the table contains private data. - Section Length (12 bits): The length of the entire section following the table header. Your task is to implement a set of functions to extract this information from a given byte slice representing the PSI table. The functions you need to implement are: - `PointerField(psi []byte) uint8`: Returns the pointer field from the PSI table. - `TableID(psi []byte) uint8`: Returns the table ID from the PSI table. - `SectionSyntaxIndicator(psi []byte) bool`: Returns true if the section syntax indicator is set. - `PrivateIndicator(psi []byte) bool`: Returns true if the private indicator is set. - `SectionLength(psi []byte) uint16`: Returns the section length from the PSI table.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named psiData."}, {"type": "variable", "instruction": "Your code should define an enumeration named TableType."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named ParsePSITable."}, {"type": "interface", "instruction": "Your code should define an interface named PSIParser."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named psi."}, {"type": "combination", "instruction": "The function ParsePSITable should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named psi, which should contain these functions PointerField, TableID, SectionSyntaxIndicator, PrivateIndicator, SectionLength."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 13], "9": [0, 1, 2, 8, 13], "11": [0, 1, 2, 7, 13], "12": [0, 1, 2, 10, 13]}, "question_id": 7}
{"question": "Design a Java program that simulates different types of vehicles driving on various kinds of roads. The program should demonstrate the use of polymorphism, inheritance, and method overriding. The program should include the following components: 1. An abstract class `Road` with an abstract method `describeRoad()`. 2. Concrete classes `Highway`, `ServiceRoad`, and `CountryRoad` that extend `Road` and override the `describeRoad()` method to print out a unique description for each type of road. 3. An abstract class `Vehicle` with an abstract method `drive()`. 4. Concrete classes `BMW`, `Mercedes`, and `Auto` that extend `Vehicle` and override the `drive()` method to print out a unique driving experience for each vehicle. 5. A `RoadTest` class that contains a `testDrive()` method, which accepts a `Road` and a `Vehicle` object and simulates the vehicle driving on the road by calling their respective methods. The program should be able to demonstrate the driving experience of different vehicles on different roads using polymorphism.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the final keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named roadType."}, {"type": "variable", "instruction": "Your code should define an enumeration named VehicleType."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable roadType, should be a global variable."}, {"type": "variable", "instruction": "Variable roadType should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named simulateDrive."}, {"type": "class", "instruction": "Your code should define a class named RoadTest."}, {"type": "combination", "instruction": "In your code, the class RoadTest should have these properties road, vehicle."}, {"type": "combination", "instruction": "The function simulateDrive should take road, vehicle as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"8": [0, 1, 6, 15], "9": [0, 1, 6, 15], "10": [0, 1, 6, 15], "13": [0, 1, 12, 15], "14": [0, 1, 11, 15]}, "question_id": 8}
{"question": "Please write a Java method that retrieves all follower information for a specified user. Assume we have a user table and a following relationship table, each relationship records who follows whom. Now, given a user ID, we need to return the detailed information of all followers of this user. The follower information should include user ID and username. Ensure that your code is completely self-contained and includes all necessary import statements. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.ArrayList;\nclass User {\n    Long userId;\n    String userName;\n    public User(Long userId, String userName) {\n    }\n    public Long getUserId() {\n    }\n    public void setUserId(Long userId) {\n    }\n    public String getUserName() {\n    }\n    public void setUserName(String userName) {\n    }\n}\nclass FollowRelation {\n    Long followerId;\n    Long followingId;\n    public FollowRelation(Long followerId, Long followingId) {\n    }\n    public Long getFollowerId() {\n    }\n    public void setFollowerId(Long followerId) {\n    }\n    public Long getFollowingId() {\n    }\n    public void setFollowingId(Long followingId) {\n    }\n}\npublic class UserFollowService {\n    private List<User> users = new ArrayList<>();\n    private List<FollowRelation> followRelations = new ArrayList<>();\n    public UserFollowService(List<User> users, List<FollowRelation> followRelations) {\n    }\n    public List<User> getFollowers(Long userId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named followerList."}, {"type": "variable", "instruction": "Your code should define an enumeration named UserType."}, {"type": "variable", "instruction": "Variable followerList, type should be List<User>."}, {"type": "variable", "instruction": "Variable followerList should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named getFollowers."}, {"type": "class", "instruction": "Your code should define a class named UserFollowService."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.List, java.util.stream.Collectors, java.util.ArrayList."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.HashMap."}, {"type": "combination", "instruction": "In your code, the class User should have these properties userId, userName."}, {"type": "combination", "instruction": "The function getFollowers should return a List<User> as its result."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "13": [0, 1, 2, 10], "14": [0, 1, 2, 9]}, "question_id": 9}
{"question": "Implement a class `FibonacciCoder` that provides methods to encode and decode integers using Fibonacci coding. Fibonacci coding is a universal code which encodes positive integers into binary code words. It uses the Fibonacci sequence where each number is the sum of the two preceding ones, starting from 0 and 1. The sequence starts as 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on.\n\nThe encoding process for a number `x` is as follows:\n1. Find the largest Fibonacci number less than or equal to `x`.\n2. Subtract this number from `x`.\n3. Repeat the process with the remainder until `x` becomes 0.\n4. Write down a '1' for each Fibonacci number used and a '0' for the others, then append an additional '1' at the end.\n\nThe decoding process is the reverse of encoding:\n1. Sum the Fibonacci numbers corresponding to each '1' in the code word, excluding the last '1'.\n2. The result is the original number.\n\nThe class should have the following methods:\n- `encode(int x)`: Encodes the integer `x` into a Fibonacci code word and returns the encoded binary string.\n- `decode(string code)`: Decodes the given Fibonacci code word into the original integer.\n\n**Constraints**:\n- The input to `encode` is a positive integer.\n- The input to `decode` is a valid Fibonacci code word string.\n- The methods should handle errors appropriately.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `fib_sequence`."}, {"type": "variable", "instruction": "Variable `fib_sequence`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `generate_fibonacci`."}, {"type": "interface", "instruction": "Your code should define an interface named `CoderInterface`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `FibonacciCoder`."}, {"type": "file", "instruction": "Your code should be organized in a package named `fibonacci_coder`."}, {"type": "file", "instruction": "Your code should import the following libraries `math`."}, {"type": "file", "instruction": "Your code should use the function `sqrt` from the library `math`."}, {"type": "combination", "instruction": "You should initialize an object named `fib_coder` as an instance of the `FibonacciCoder` class using `[]` for initialization."}, {"type": "combination", "instruction": "In your code, the class `FibonacciCoder` should have these methods `encode`, `decode`."}, {"type": "combination", "instruction": "The function `encode` should return a `str` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `fibonacci_coder`, which should contain these classes `FibonacciCoder`."}], "instruction_dependence": {"7": [0, 1, 2, 6], "10": [0, 1, 2, 9], "14": [0, 1, 2, 13], "15": [0, 1, 2, 11], "16": [0, 1, 2, 11], "17": [0, 1, 2, 8], "18": [0, 1, 2, 11, 12]}, "question_id": 10}
{"question": "Please write a Java program to implement a simple book loan record pagination query function in a library management system. Considering that there may be a large number of loan records stored in the database, it needs to be optimized through pagination. Each query returns one page of loan records, with a fixed number of records per page. The specific requirements are as follows:\n\n- Define a class named `BookLoan` containing three attributes: book ID (`bookId`), borrower ID (`borrowerId`), and borrowing date (`borrowDate`).\n- Implement a class named `BookLoanService` that includes a method `fetchLoanRecordsByPage`, which accepts two parameters: `pageNumber` (current page number) and `pageSize` (number of records per page), and returns the current page's list of loan records.\n- Assume there is a class named `BookLoanDAO` which includes a method `findAll` that can return the list of all loan records (in practical application, this might be obtained through database access).\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nclass BookLoan {\n    int bookId;\n    int borrowerId;\n    Date borrowDate;\n    public BookLoan(int bookId, int borrowerId, Date borrowDate) {\n        \n    }\n}\n\nclass BookLoanDAO {\n    public List<BookLoan> findAll() {\n        \n    }\n}\n\nclass BookLoanService {\n    BookLoanDAO bookLoanDAO = new BookLoanDAO();\n    public List<BookLoan> fetchLoanRecordsByPage(int pageNumber, int pageSize) {\n        \n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `loanRecords`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `LoanStatus`."}, {"type": "variable", "instruction": "Variable `pageNumber`, the initial value should be 1."}, {"type": "variable", "instruction": "Variable `pageSize` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `calculateTotalPages`."}, {"type": "file", "instruction": "Your code should import the following libraries `java.util.ArrayList`, `java.util.Date`, `java.util.List`."}, {"type": "file", "instruction": "Your code should use the function `findAll` from the library `BookLoanDAO`."}, {"type": "combination", "instruction": "The function `fetchLoanRecordsByPage` should take `pageNumber`, `pageSize` as parameters."}, {"type": "global", "instruction": "Your function `fetchLoanRecordsByPage` should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 4, 12, 13], "7": [0, 4, 12, 13], "10": [0, 9, 12, 13], "11": [0, 8, 12, 13]}, "question_id": 11}
{"question": "Design a class `EnhancedQuickUnionUF` that extends the functionality of the `QuickUnionUF` class to include a method `countComponents()` which returns the number of connected components in the union-find data structure. A connected component is a set of elements where each element is connected to at least one other element in the set. Additionally, implement a method `componentSize(int p)` that returns the size of the component to which element `p` belongs. If `p` is not a valid element, the method should throw an `IllegalArgumentException`. The `EnhancedQuickUnionUF` class should maintain all the functionality of the `QuickUnionUF` class, including the `connected`, `union`, and private `root` methods.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `HashMap`."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `componentCount`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `ComponentStatus`."}, {"type": "variable", "instruction": "Variable `componentCount`, type should be `int`."}, {"type": "variable", "instruction": "Variable `componentCount`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `findRoot`."}, {"type": "function", "instruction": "Your code should not use any functions from the `Collections`."}, {"type": "interface", "instruction": "Your code should define an interface named `UnionFind`."}, {"type": "class", "instruction": "Your code should define a class named `EnhancedQuickUnionUF`."}, {"type": "combination", "instruction": "You should initialize an object named `uf` as an instance of the `EnhancedQuickUnionUF` class using `int size` for initialization."}, {"type": "combination", "instruction": "You should define an interface named `UnionFind` that includes these methods `connected`, `union`, `root`."}, {"type": "combination", "instruction": "The function `componentSize` should take `int p` as parameters."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "13": [0, 1, 2, 12], "14": [0, 1, 2, 11], "15": [0, 1, 2, 9]}, "question_id": 12}
{"question": "Design a custom `RecyclerView.Adapter` for an Android application that displays a list of posts similar to a social media feed. Each post should contain a title, a description, and an image. The adapter should manage a list of `Post` objects and display them in a vertical list. The `Post` class should have the following structure:\n```java\npublic class Post {\n    private String title;\n    private String description;\n    private String imageUrl;\n\n    public Post(String title, String description, String imageUrl) {\n        this.title = title;\n        this.description = description;\n        this.imageUrl = imageUrl;\n    }\n\n    // Getters and setters for each field\n}\n```\nThe `RecyclerView.Adapter` should be named `PostAdapter` and should include the following functionalities:\n- A constructor that takes a list of `Post` objects.\n- A `ViewHolder` inner class that holds references to the title, description, and image views.\n- Implement the `onCreateViewHolder`, `onBindViewHolder`, and `getItemCount` methods to manage the display of posts.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named postList."}, {"type": "variable", "instruction": "Your code should define an enumeration named PostType."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable postList should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named bindPost."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named PostAdapter."}, {"type": "combination", "instruction": "In your code, the class Post should have these properties title, description, imageUrl."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 5, 13], "8": [0, 1, 5, 13], "10": [0, 1, 9, 13], "12": [0, 1, 11, 13]}, "question_id": 13}
{"question": "Implement a Go package that provides a thread-safe mechanism for managing a unique identifier for a cluster of nodes. The identifier, once set, should not change throughout the lifetime of the cluster. The package should allow for the identifier to be set, retrieved, and displayed in a human-readable format. Additionally, provide a way to reset the identifier, which should only be used for testing purposes.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the 'sync' keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'clusterID'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable 'clusterID', the initial value should be 'nil'."}, {"type": "function", "instruction": "Your code should include a function named 'GetClusterID'."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'IdentifierManager'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries 'unsafe'."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 11]}, "question_id": 14}
{"question": "Design a Java program that simulates a subscription service for a VIP user system. The system should allow users to select different VIP levels and subscription durations, with the cost varying based on the selected options. Some durations offer discounts or surcharges. The program should calculate the total cost for the user based on their selections and display it in a formatted manner. The VIP levels and their base monthly costs are as follows: VIP Level 1: $100,000 per month, VIP Level 2: $200,000 per month, VIP Level 3: $300,000 per month. The subscription durations and their adjustments are: 1 month: 10% surcharge, 3 months: no adjustment, 6 months: 5% discount, 1 year (12 months): 10% discount. The program should include the following functionalities: A method to select the VIP level, A method to select the subscription duration, A method to calculate the total cost based on the selections, A method to format and display the total cost.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named totalCost."}, {"type": "variable", "instruction": "Variable totalCost, should not be a global variable."}, {"type": "variable", "instruction": "Variable totalCost should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculateTotalCost."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the Math library."}, {"type": "interface", "instruction": "Your code should define an interface named SubscriptionService."}, {"type": "file", "instruction": "Your code should not use the following libraries: java.util.stream."}, {"type": "combination", "instruction": "You should define an interface named SubscriptionService that includes these methods: selectVIPLevel, selectDuration, calculateTotalCost, displayTotalCost."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "6": [0, 1, 4, 13], "8": [0, 1, 7, 13], "12": [0, 1, 10, 13]}, "question_id": 15}
{"question": "Implement a multi-threaded task processing mechanism in Python. The required features are as follows:\n\n- Create a message queue that can receive tasks.\n- Create multiple worker threads, each of which can fetch tasks from the queue for processing. Simulate the processing time of each task to be 1 second.\n- Stop the worker threads and return all processed tasks when all tasks have been processed.\n\nYou need to complete a function `threaded_task`, whose input parameters are the number of worker threads `num_worker_threads` and a list `source` from pending tasks, outputting a list containing all the tasks that have been processed.\n\nThe main workflow of this function is:\n\n- First, it initializes an empty queue `q`, a thread list `threads`, and a result list `result_list`.\n- Then, based on the size of `num_worker_threads`, it creates and starts a corresponding number of worker threads. These worker threads will fetch tasks from the queue and process them, and the results will be added to `result_list`.\n- After that, it adds all tasks from `source` to the queue.\n- Afterwards, it waits for all tasks in the queue to be processed.\n- Finally, it stops all worker threads and returns `result_list`, i.e., all processed tasks.\n\nThe workflow of the worker thread is:\n\n- Continuously fetch tasks from the queue for processing, if the fetched task is `None`, end the loop and exit the thread.\n- Add the result of the processing to `result_list`, simulating the processing time of each task to be 1 second.\n- After each task is processed, call `q.task_done()` to inform the queue that this task has been processed.\nPlease write the code in a markdown ```python``` wrapper.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the nonlocal keyword."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, type should be dict."}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named create_tys."}, {"type": "class", "instruction": "Your code should define a class named ModifyDwaRequest."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_inventory."}, {"type": "combination", "instruction": "Your code should define a class named ModifyDwaRequest that implements the create_tys interface."}, {"type": "combination", "instruction": "In your code, the class ModifyDwaRequest should have these properties ['product', 'report', 'event']."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_inventory, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 12], "5": [0, 1, 2, 3, 12], "9": [0, 1, 2, 6, 7, 12], "10": [0, 1, 2, 7, 12], "11": [0, 1, 2, 8, 12]}, "question_id": 16}
{"question": "Please design a Java function to validate student registration information. The student information includes name, age, and class. The name cannot be empty, the age should be between 6 and 18 years old, and the class should be an integer between 1 and 12. If any of these conditions are not met, an IllegalArgumentException should be thrown with an appropriate error message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class StudentRegistrationValidator {\n    public static void validateStudentInput(StudentDto studentDto) {\n    }\n}\nclass StudentDto {\n    private String name;\n    private Integer age;\n    private Integer grade;\n    public StudentDto(String name, Integer age, Integer grade) {\n    }\n    public String getName() {\n        return name;\n    }\n    public Integer getAge() {\n        return age;\n    }\n    public Integer getGrade() {\n        return grade;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the interface keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure HashSet."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, should not be a global variable."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_view."}, {"type": "interface", "instruction": "Your code should define an interface named process_info."}, {"type": "class", "instruction": "Your code should define a class named Record."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt', 'java.sql']."}, {"type": "file", "instruction": "Your code should use the function generate_view from the library java.sql."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.io', 'java.lang']."}, {"type": "combination", "instruction": "You should define an interface named process_info that includes these methods ['filter_user', 'analyze_inventory']."}, {"type": "combination", "instruction": "In your code, the class Record should have these methods ['filter_user', 'analyze_inventory']."}, {"type": "combination", "instruction": "The function generate_view should return a List as its result."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 18], "7": [0, 1, 2, 5, 18], "11": [0, 1, 2, 10, 18], "13": [0, 1, 2, 12, 18], "15": [0, 1, 2, 9, 18], "16": [0, 1, 2, 10, 18], "17": [0, 1, 2, 8, 18]}, "question_id": 17}
{"question": "Write a function that uses pandas to output the quantiles of each column in a table. The input is the path to the csv file and a list of quantiles, and the output is the quantile information.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure collections."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "interface", "instruction": "Your code should define an interface named process_log."}, {"type": "class", "instruction": "Your code should define a class named Inventory."}, {"type": "combination", "instruction": "You should initialize an object named info as an instance of the Inventory class using ['dwa', 'bill', 'kms'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named process_log that includes these methods ['create_bill']."}, {"type": "combination", "instruction": "In your code, the class Inventory should have these properties ['transaction', 'notification', 'message']."}], "instruction_dependence": {"7": [0, 1, 6], "8": [0, 1, 5], "9": [0, 1, 6]}, "question_id": 18}
{"question": "Implement a generic `Result` class using C++, which can wrap any type of return value, provide status information, and ensure as low overhead as possible via move semantics. This `Result` class will include a `Status` object, which is used to represent the operation status, as well as an optional return value.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "variable", "instruction": "Variable msg, type should be int."}, {"type": "function", "instruction": "Your code should include a function named execute_record."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named process_log."}, {"type": "class", "instruction": "Your code should define a class named InventoryCredit."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_transaction."}, {"type": "file", "instruction": "Your code should not use the following libraries ['queue']."}, {"type": "combination", "instruction": "You should define an interface named process_log that includes these methods ['display_dwa']."}, {"type": "combination", "instruction": "In your code, the class InventoryCredit should have these methods ['display_dwa']."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_transaction, which should contain these classes ['ManageMsgTys', 'AddFormRecord']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6, 18], "10": [0, 1, 2, 3, 9, 18], "15": [0, 1, 2, 3, 11, 18], "16": [0, 1, 2, 3, 12, 18], "17": [0, 1, 2, 3, 12, 13, 18]}, "question_id": 19}
{"question": "\n\nCreate a Python class-based system to generate HTML elements dynamically. The system should allow users to create HTML tags, set their attributes, and nest child elements. The tags should be able to render themselves as HTML strings. The system should also include a factory for creating tags easily and support both singleton tags (like `<br>`, `<img>`, etc.) and container tags (like `<div>`, `<p>`, etc.).\n\nThe system should enforce the following rules:\n- Singleton tags cannot have children. If an attempt is made to add children to a singleton tag, a `TagSingletonError` should be raised.\n- Certain tags require specific attributes to be set (e.g., `<img>` requires `src`, `<link>` requires `href`). If these required attributes are not provided, a `KeyError` should be raised.\n- The class names should be handled with a `class_` keyword due to `class` being a reserved keyword in Python. The classes should be space-separated in the final HTML string.\n- The system should escape any unsafe content unless the `safe` attribute is set to `True` on the tag.\n\nImplement the system following the provided code snippet, ensuring that all classes and methods are well-documented. Include test cases to demonstrate the creation of different HTML elements, setting attributes, nesting children, and handling errors.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named sort_room."}, {"type": "class", "instruction": "Your code should define a class named UpdateTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named search_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "file", "instruction": "Your code should use the function sort_room from the library Flask."}, {"type": "combination", "instruction": "The function sort_room should take ['message'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_product, which should contain these classes ['SearchCustomer', 'TransformProfile']."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 4, 13], "10": [0, 9, 13], "11": [0, 6, 13], "12": [0, 7, 8, 13]}, "question_id": 20}
{"question": "\n\nIn a game modding community, there is a need to maintain a database of known \"bad\" mod files that cause issues with the game. These files are identified by their MD5 checksums. Your task is to create a program that can check if a given mod file is on the \"bad\" list and provide the corresponding mod name and version.\n\nWrite a C++ program that defines a structure to represent a mod file entry with the following information: file path, MD5 checksum, and mod description. The program should include a function `isBadMod` that takes a file path and an MD5 checksum (as an array of 16 bytes) and returns a string with the mod description if the file is on the \"bad\" list, or an empty string if it is not.\n\nThe program should also include a function `printBadModInfo` that takes a file path and an MD5 checksum and prints out whether the file is on the \"bad\" list and, if so, its description.\n\nUse the given code snippet as a starting point to define the `MD5ModFileEntry` structure and the `badMOD` array containing the \"bad\" mod entries. Implement the `isBadMod` and `printBadModInfo` functions, and provide test cases to verify the correctness of your solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure set."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, the initial value should be bill."}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named search_product."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named sort_report."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'cmath']."}, {"type": "file", "instruction": "Your code should use the function search_product from the library iostream."}, {"type": "combination", "instruction": "You should define an interface named sort_report that includes these methods ['update_inventory', 'execute_notification']."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"6": [0, 1, 5, 17], "7": [0, 1, 5, 17], "9": [0, 1, 8, 17], "11": [0, 1, 10, 17], "13": [0, 1, 12, 17], "15": [0, 1, 14, 17], "16": [0, 1, 10, 17]}, "question_id": 21}
{"question": "\nCreate a simple 2D game where the player controls a sprite that can move around the screen. The player should be able to move the sprite using the arrow keys and make the sprite jump with the spacebar. The sprite should also be able to toggle invisibility when the 'A' key is pressed. The game should include a basic collision detection system that prevents the sprite from moving outside the boundaries of the window.\n\nThe game should be implemented using a simple game loop, and the following classes are provided: `WinApp` for window management, `DirectXCommon` for DirectX functionality, `Input` for handling user input, `Sprite` and `SpriteCommon` for sprite management, `Object3d` and `Model` for 3D object management (though only 2D functionality will be used in this game).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named manage_transaction."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_report', 'transform_customer', 'remove_notification']."}, {"type": "interface", "instruction": "Your code should define an interface named search_info."}, {"type": "class", "instruction": "Your code should define a class named CreateViewMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_token."}, {"type": "file", "instruction": "Your code should import the following libraries ['map']."}, {"type": "file", "instruction": "Your code should use the function manage_transaction from the library stack."}, {"type": "combination", "instruction": "In your code, the class CreateViewMsg should have these methods ['calculate_record']."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_token, which should contain these classes ['RemoveProductMessage', 'CreditTys', 'UpdateLog']."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_token, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 16], "12": [0, 1, 2, 3, 11, 16], "13": [0, 1, 2, 3, 9, 16], "14": [0, 1, 2, 3, 9, 10, 16], "15": [0, 1, 2, 3, 10, 16]}, "question_id": 22}
{"question": "\n\nWrite a Go program that defines a function `calculate` which performs addition, subtraction, multiplication, and division on two integer inputs. The function should return all four results. The division result should be of type float64 to accommodate non-integer division. If a division by zero is attempted, the function should return an error for the division result.\n\nThe program should also include a `main` function that demonstrates the use of the `calculate` function with test cases, including a case that handles division by zero. The results should be printed to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "class", "instruction": "Your code should define a class named FilterKms."}, {"type": "file", "instruction": "Your code should be organized in a package named set_profile."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os']."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the FilterKms class using ['customer'] for initialization."}, {"type": "combination", "instruction": "In your code, the class FilterKms should have these properties ['message', 'report']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_profile, which should contain these classes ['ConfigureRequestEvent', 'SearchDwaMessage']."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 9], "7": [0, 1, 2, 3, 9], "8": [0, 1, 2, 3, 4, 9]}, "question_id": 23}
{"question": "\n\nWrite a program called `MatrixPatternPrinter` that prints a matrix of numbers. The program should take two integer inputs: `rows` and `columns`. It should print a matrix where each row contains the row number repeated `columns` times.\n\nFor example, if the input is `rows = 4` and `columns = 8`, the output should be:\n\n```\n1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4\n```\n\nThe program should include a main method that demonstrates the functionality with a few test cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the else keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be int."}, {"type": "function", "instruction": "Your code should include a function named handle_cut."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_token', 'set_record', 'submit_bill', 'delete_product']."}, {"type": "interface", "instruction": "Your code should define an interface named insert_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SubmitProfileReport."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.io']."}, {"type": "combination", "instruction": "In your code, the class SubmitProfileReport should have these properties ['token', 'dwa', 'request']."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8], "11": [0, 1, 2, 3, 4, 10], "14": [0, 1, 2, 3, 4, 13], "17": [0, 1, 2, 3, 4, 15]}, "question_id": 24}
{"question": "Implement the template class `template <typename T, size_t kSize = 8> class AutoVec` in C++, similar to `std::vector`. `AutoVec` will place the first part of the array on the `stack` and the tail of the array on the `heap`, enhancing the performance of short `vector`.\n1. Implement a constructor `AutoVec(size_t size, const T default_value = T())`, which constructs an `AutoVec` with `size` number of `default_value`.\n2. Implement copy constructor/copy assignment function/move constructor/move assignment function.\n3. Overload the subscript operator for easier element access.\n4. Implement the interface `template <class... Args> void EmplaceBack(Args&&... args)` to insert an element at the end of the buffer.\n5. Implement the interface `void PopBack()` to delete an element from the end.\n6. Implement the interface `T &Front(), const T &Front() const` to get the front element.\n7. Implement the interface `T &Back(), const T &Back() const` to get the end element.\n8. Implement the interface `T& GetBack(), const T& GetBack() const` to get the end element.\n9. Implement the interface `bool IsEmpty() const` to check whether `AutoVec` is empty.\n10. Implement the interface `size_t Size()` to get the element count.\n11. Implement the interface `void Clear()` to clear the buffer.\n12. Implement the interface `void Resize(size_t new_size, const T default_value = T())` which sets the `AutoVec` size to `size`. If the size is increased, elements are removed from the end. If the buffer gets bigger, elements are inserted at the end and default constructed with `default_value`.\n13. Implement the interface `void Clear()` to clear the array.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should not be a global variable."}, {"type": "variable", "instruction": "Variable shipment should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named configure_customer."}, {"type": "class", "instruction": "Your code should define a class named SetProduct."}, {"type": "combination", "instruction": "You should initialize an object named account as an instance of the SetProduct class using ['request'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named configure_customer that includes these methods ['execute_cut', 'submit_shipment']."}, {"type": "combination", "instruction": "Your code should define a class named SetProduct that implements the configure_customer interface."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"3": [0, 2, 10], "4": [0, 2, 10], "7": [0, 6, 10], "8": [0, 5, 10], "9": [0, 5, 6, 10]}, "question_id": 25}
{"question": "\n\nDesign a C++ program that simulates a simple graphical user interface (GUI) for creating and deleting shapes in a drawing application. The program should use the provided code snippet as a starting point and expand upon it to include the following functionalities:\n\n1. Define a `Figure` class hierarchy with at least two derived classes, such as `Circle` and `Rectangle`. Each derived class should override a virtual `draw()` method that prints the shape's type and its dimensions to the console.\n\n2. Implement the `DynamicArray` and `DynamicList` templates that can store `std::unique_ptr<Figure>` objects. These containers should support adding and removing elements.\n\n3. The `ArrayCreation` and `ListCreation` namespaces should contain static methods `createRandomShapes` and `deleteAllShapes`. The `createRandomShapes` method should populate the given container with a specified number of random shapes, while `deleteAllShapes` should clear the container.\n\n4. Implement the `GuiArrayCreation` class with methods `checkForShapeArrayCreation`, `checkForShapeArrayDeletion`, `checkForShapeListCreation`, and `checkForShapeListDeletion`. These methods simulate button presses in a GUI and call the appropriate methods from `ArrayCreation` or `ListCreation`.\n\n5. Write a `main` function that creates instances of `DynamicArray` and `DynamicList`, simulates button presses to create and delete shapes, and prints the contents of the containers to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_tys."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named update_customer."}, {"type": "class", "instruction": "Your code should define a class named OrderInventory."}, {"type": "file", "instruction": "Your code should be organized in a package named update_user."}, {"type": "combination", "instruction": "In your code, the class OrderInventory should have these properties ['event', 'token', 'punish']."}, {"type": "combination", "instruction": "The function transform_tys should take ['log'] as parameters."}, {"type": "combination", "instruction": "The function transform_tys should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_user, which should contain these classes ['LogNotification', 'GetNotification', 'CalculateProfileReport']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_user, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 1, 4, 17], "6": [0, 1, 4, 17], "8": [0, 1, 7, 17], "12": [0, 1, 10, 17], "13": [0, 1, 7, 17], "14": [0, 1, 7, 17], "15": [0, 1, 10, 11, 17], "16": [0, 1, 11, 17]}, "question_id": 26}
{"question": "\n\nCreate a Python program using the Tkinter library that simulates a simple drawing application. The application should allow users to draw freehand paths on a canvas by clicking and dragging the mouse. The user should be able to control the following aspects of the drawing:\n\n1. The color of the path (options: \"Black\", \"Red\", \"Blue\", \"Green\").\n2. The speed of the drawing (options: \"Speed X 1\", \"Speed X 2\", \"Speed X 3\"), which affects the density of points in the path.\n3. The ability to start and stop the drawing process.\n\nThe program should have a GUI with the following elements:\n\n- A canvas area where the user can draw.\n- A label displaying the current path color.\n- A dropdown menu to select the path color.\n- A label displaying the current drawing speed.\n- A dropdown menu to select the drawing speed.\n- A button to start the drawing process.\n- A button to stop the drawing process and clear the canvas.\n\nThe program should initialize the global variables as provided in the given code snippet and use them to manage the state of the application.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, type should be tuple."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_cut."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_status."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn']."}, {"type": "file", "instruction": "Your code should use the function set_event from the library numpy."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"4": [0, 3, 9], "8": [0, 7, 9]}, "question_id": 27}
{"question": "\n\nDesign a class `DrawableAirplane` that extends the abstract class `DrawableObject`. The `DrawableAirplane` class represents an airplane that moves across a graphical frame and occasionally drops parachutists. The airplane should have the following behavior:\n\n1. The airplane moves from right to left across the frame.\n2. The airplane's vertical position is fixed at twice its height.\n3. When the airplane moves off the left edge of the frame, it should reappear on the right edge.\n4. As the airplane moves, it should randomly drop parachutists. The chance of dropping a parachutist is determined by the airplane's current x-coordinate. If the x-coordinate is between the airplane's width and the frame width minus the airplane's width, and if the x-coordinate modulo a random number between 1 and 5 times 70 equals 0, a parachutist is dropped.\n5. The `paint` method should return `true` if the painting operation is successful.\n\nThe `DrawableObject` class provides the following fields that `DrawableAirplane` can use:\n- `currentX`: The current x-coordinate of the airplane.\n- `currentY`: The current y-coordinate of the airplane.\n- `objectWidth`: The width of the airplane.\n- `objectHeight`: The height of the airplane.\n- `objectSpeed`: The speed at which the airplane moves.\n- `image`: The image representation of the airplane.\n\nThe `DrawableObjectsManager` class provides a static method `dropParachutist(int x, int y)` that should be called to drop a parachutist at the specified x and y coordinates.\n\nImplement the `DrawableAirplane` class according to the above specifications. Also, provide a simple test case to demonstrate the functionality of the `DrawableAirplane` class.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the default keyword."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "function", "instruction": "Your code should include a function named analyze_info."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_inventory', 'search_notification', 'handle_room', 'configure_product']."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util']."}], "instruction_dependence": {"5": [0, 1, 4]}, "question_id": 28}
{"question": "\nDesign a system that allows for asynchronous notification handling in a simulated environment where agents and crowds can perform various activities. The system should be able to notify specific workers about agent and crowd activities and allow for waiting on these notifications with optional filters.\n\nThe system should include the following features:\n1. A subsystem (`UWorkerUpstreamNotifySubsystem`) that can notify workers about agent and crowd activities.\n2. The ability to wait for any agent or crowd notification, with the option to filter notifications based on certain criteria.\n3. The ability to wait for notifications only once or continuously until manually stopped.\n\nImplement the following classes and their member functions:\n- `UWorkerUpstreamNotifySubsystem`\n  - `NotifyCrowdActivityWorker`\n  - `NotifyWorldActivityWorker`\n- `UAsyncAction_WaitAnyAgentNotify`\n  - `WaitAnyAgentNotify`\n  - `Activate`\n  - `EndAction`\n  - `OnAgentNotifyCallback`\n- `UAsyncAction_WaitAnyAgentNotifyFiltered`\n  - `WaitAnyAgentNotifyFiltered`\n  - `Activate`\n  - `EndAction`\n  - `OnAgentNotifyCallback`\n- `UAsyncAction_WaitAnyCrowdNotify`\n  - `WaitAnyCrowdNotify`\n  - `Activate`\n  - `EndAction`\n  - `OnCrowdNotifyCallback`\n- `UAsyncAction_WaitAnyCrowdNotifyFiltered`\n  - `WaitAnyCrowdNotifyFiltered`\n  - `Activate`\n  - `EndAction`\n  - `OnCrowdNotifyCallback`\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named create_record."}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_report', 'add_bill']."}, {"type": "interface", "instruction": "Your code should define an interface named sort_data."}, {"type": "class", "instruction": "Your code should define a class named PunishTys."}, {"type": "file", "instruction": "Your code should import the following libraries ['vector', 'iostream']."}, {"type": "file", "instruction": "Your code should use the function create_record from the library stack."}, {"type": "combination", "instruction": "You should define an interface named sort_data that includes these methods ['create_view']."}, {"type": "combination", "instruction": "In your code, the class PunishTys should have these methods ['create_view']."}, {"type": "combination", "instruction": "The function create_record should take ['credit', 'room'] as parameters."}, {"type": "combination", "instruction": "The function create_record should return a set as its result."}], "instruction_dependence": {"6": [0, 1, 5], "12": [0, 1, 11], "13": [0, 1, 9], "14": [0, 1, 10], "15": [0, 1, 7], "16": [0, 1, 7]}, "question_id": 29}
{"question": "\n\nDesign a Java program that manages trade entries for a financial application. The program should be able to clone a trade entry object, ensuring that all the details of the trade are duplicated correctly. The `TradeEntryDO` class provided represents a trade entry with various attributes such as trade ID, company ID, trade dates, quantities, prices, and other relevant information.\n\nYour task is to implement a `TradeEntryService` class that provides the following functionalities:\n\n1. `cloneTradeEntry`: Takes a `TradeEntryDO` object and returns a deep copy of it.\n2. `updateTradeEntry`: Takes a `TradeEntryDO` object and an `UpdateTradeEntryDTO` object containing updated fields. It should update the trade entry with the new values and return the updated object.\n3. `printTradeEntry`: Takes a `TradeEntryDO` object and prints all its attributes in a readable format.\n\nFor simplicity, assume that all attributes in `TradeEntryDO` are either immutable or can be cloned by their respective clone methods (e.g., `BigDecimal` and `LocalDate` are immutable, and custom objects would implement `Cloneable`).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable shipment, the initial value should be log."}, {"type": "interface", "instruction": "Your code should define an interface named handle_message."}, {"type": "class", "instruction": "Your code should define a class named DeleteAccountBill."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_view."}, {"type": "combination", "instruction": "You should define an interface named handle_message that includes these methods ['set_message', 'configure_credit', 'remove_msg']."}, {"type": "combination", "instruction": "In your code, the class DeleteAccountBill should have these methods ['set_message', 'configure_credit', 'remove_msg']."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_view, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 13], "6": [0, 1, 2, 4, 13], "10": [0, 1, 2, 7, 13], "11": [0, 1, 2, 8, 13], "12": [0, 1, 2, 9, 13]}, "question_id": 30}
{"question": "\n\nWrite a Python function `swap_and_search` that performs the following tasks:\n\n1. Takes three arguments:\n    - `n`: an integer representing the number of times to print \"Hello\".\n    - `names_list`: a list of strings representing names.\n    - `people_dict`: a dictionary where keys are names (strings) and values are phone numbers (also strings).\n\n2. The function should first call a helper function `say_hello` that prints \"Hello\" `n` times.\n\n3. Then, the function should check if the string \"sri\" is in `names_list`. If it is, print \"found\"; otherwise, print \"not found\".\n\n4. Next, the function should check if \"sri\" is a key in `people_dict`. If it is, print \"Found : \" followed by the corresponding value.\n\n5. Finally, the function should swap the values of two variables `x` and `y` (initialized to 1 and 5, respectively) and print their values before and after the swap.\n\nThe function should not return anything.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the for keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named submit_account."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeData."}, {"type": "combination", "instruction": "You should define an interface named submit_account that includes these methods ['handle_log', 'execute_shipment']."}, {"type": "combination", "instruction": "Your code should define a class named AnalyzeData that implements the submit_account interface."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 9, 10]}, "question_id": 31}
{"question": "\nDice Cup Outcomes\n\nIn a board game, two players are rolling two dice, each with a different number of faces. The first die has `N` faces numbered from `1` to `N`, and the second die has `M` faces numbered from `1` to `M`. After rolling both dice, the sum of the numbers on the top faces is recorded.\n\nYour task is to write a program that determines which sums are most likely to occur and prints them out in ascending order. The most likely sums are those that have the highest number of combinations to occur.\n\nFor example, if `N = 4` and `M = 3`, the possible sums are `2` through `7`. The sum `5` can occur in three ways: `(1, 4)`, `(2, 3)`, and `(3, 2)`, making it the most likely sum.\n\n**Input**: Two integers `N` and `M`, where `1 <= N, M <= 100`.\n\n**Output**: All the most likely sums, one per line, in ascending order.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure queue."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "interface", "instruction": "Your code should define an interface named display_account."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FilterPunishRoom."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_event."}, {"type": "file", "instruction": "Your code should import the following libraries ['iostream']."}, {"type": "file", "instruction": "Your code should use the function analyze_data from the library cmath."}, {"type": "combination", "instruction": "You should initialize an object named event as an instance of the FilterPunishRoom class using ['room', 'info', 'order'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named display_account that includes these methods ['generate_profile']."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_event, which should contain these classes ['Credit']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9], "11": [0, 1, 2, 7], "12": [0, 1, 2, 5], "13": [0, 1, 2, 7, 8]}, "question_id": 32}
{"question": "Please write a Python function `convert(n): int` to solve this problem:\nFor a given decimal number n, calculate and return its binary representation.\n>>> convert(1025)\n10000000001", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "variable", "instruction": "Variable notification, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_order."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_data', 'remove_kms', 'create_msg', 'handle_punish']."}, {"type": "interface", "instruction": "Your code should define an interface named search_user."}, {"type": "class", "instruction": "Your code should define a class named Request."}, {"type": "file", "instruction": "Your code should be organized in a package named create_punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib', 'pytorch']."}, {"type": "file", "instruction": "Your code should use the function execute_order from the library matplotlib."}, {"type": "combination", "instruction": "In your code, the class Request should have these methods ['update_event', 'delete_message']."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_punish, which should contain these classes ['ViewKms', 'ConfigureForm', 'Dwa']."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_punish, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "13": [0, 1, 12], "14": [0, 1, 10], "15": [0, 1, 10, 11], "16": [0, 1, 11]}, "question_id": 33}
{"question": "\nWrite a program that calculates the sum of the greatest common divisors (GCDs) of all possible triplets of numbers from 1 to `K`, inclusive. The GCD of a triplet `(a, b, c)` is defined as the greatest common divisor of the three numbers `a`, `b`, and `c`.\n\nYour program should read an integer `K` from the standard input and output the sum of all GCDs for every triplet `(a, b, c)` where `1 <= a, b, c <= K`.\n\nFor example, if `K` is 2, the triplets are `(1, 1, 1)`, `(1, 1, 2)`, `(1, 2, 1)`, `(1, 2, 2)`, `(2, 1, 1)`, `(2, 1, 2)`, `(2, 2, 1)`, and `(2, 2, 2)`. The sum of the GCDs for these triplets is `1 + 1 + 1 + 1 + 1 + 1 + 1 + 2 = 9`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the const_cast keyword."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_customer."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named handle_log."}, {"type": "class", "instruction": "Your code should define a class named CreateMsgDwa."}, {"type": "file", "instruction": "Your code should not use the following libraries ['set', 'stdlib', 'algorithm']."}, {"type": "combination", "instruction": "Your code should define a class named CreateMsgDwa that implements the handle_log interface."}, {"type": "combination", "instruction": "In your code, the class CreateMsgDwa should have these methods ['insert_tys']."}], "instruction_dependence": {"3": [0, 1, 2], "5": [0, 1, 4], "9": [0, 1, 6, 7], "10": [0, 1, 7]}, "question_id": 34}
{"question": "\n\nDesign a blockchain-based reward distribution system where delegators can receive bonuses from validators they have delegated their tokens to. The system should be able to handle the following functionalities:\n\n1. Increase the QOS (token) balance of a delegator's account when they receive a bonus.\n2. Decrease the QOS balance of a delegator's account when necessary (e.g., for fee payment).\n3. Ensure that the bonus distribution only decreases the validator's economic fee pool if specified.\n4. Validate that the accounts involved are indeed QOS accounts before performing any operations.\n5. Provide clear error messages for any operation that fails due to insufficient balance or incorrect account types.\n\nImplement the `BonusToDelegator` function to distribute bonuses to delegators and the `IncrAccountQOS` and `DecrAccountQOS` functions to increase and decrease the QOS balance of an account, respectively. Ensure that all functions handle errors appropriately and log relevant information for debugging purposes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure struct."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be struct."}, {"type": "variable", "instruction": "Variable data, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named set_transaction."}, {"type": "combination", "instruction": "The function set_transaction should take ['order', 'customer'] as parameters."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4], "8": [0, 7]}, "question_id": 35}
{"question": "\n\nGiven a 2D grid of non-negative integers where each cell represents the cost of stepping on it, write a program to find the minimum path sum from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.\n\nThe grid is represented as a vector of vectors of integers, and the function `minPathSum` should return the minimum sum of the path.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the namespace keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "variable", "instruction": "Variable cut, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_profile', 'filter_event', 'display_record', 'update_room']."}, {"type": "interface", "instruction": "Your code should define an interface named search_request."}, {"type": "class", "instruction": "Your code should define a class named AddKms."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_user."}], "instruction_dependence": {"5": [0, 1, 3], "9": [0, 1, 8]}, "question_id": 36}
{"question": "\n\nDesign a Go program that manages pricing plans for a cloud service provider. Each plan has a base price and a set of features, which include storage, stages, backups, and scaling options. The program should be able to:\n\n1. Represent the pricing plans with their respective features and prices.\n2. Convert the unit of the base price of a plan from bytes to gibibytes or vice versa.\n3. Calculate the total cost of a plan based on the included features and any exceedances in usage.\n\nThe program should include the following functionalities:\n\n- A method to convert the base price of a plan from one unit to another (bytes to gibibytes or vice versa).\n- A method to calculate the total cost of a plan, taking into account the included features and any exceedances. The total cost should be represented as a `currency.Amount`.\n- A method to display the details of a plan, including its ID, name, base price, and features.\n\nUse the given code snippet as a starting point to define the necessary structs and methods. Ensure that all possible errors are handled gracefully.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, type should be slice."}, {"type": "function", "instruction": "Your code should include a function named process_form."}, {"type": "class", "instruction": "Your code should define a class named UpdateTokenReport."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['fmt']."}, {"type": "combination", "instruction": "The function process_form should return a slice as its result."}, {"type": "global", "instruction": "Your function should not exceed 11 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 10], "7": [0, 1, 2, 6, 10], "9": [0, 1, 2, 5, 10]}, "question_id": 37}
{"question": "\n\nDesign a Python class `SATTileTree2D` that efficiently computes the sum and average of elements in a 2D region of a 3D array with multiple channels. The class should use a Summed-Area Table (SAT) approach to allow for fast queries of rectangular regions within the array. The class should support the following operations:\n\n1. `__init__(self, values)`: Initialize the SATTileTree2D with a 4D NumPy array `values` of shape `(depth, height, width, channels)`. The constructor should precompute the SAT for the given array.\n\n2. `query_sum(self, z1, y1, x1, z2, y2, x2)`: Return the sum of elements in the rectangular region defined by the corners `(z1, y1, x1)` and `(z2, y2, x2)` for each channel. The region is inclusive of `z1, y1, x1` and exclusive of `z2, y2, x2`.\n\n3. `query_average(self, z1, y1, x1, z2, y2, x2)`: Return the average of elements in the rectangular region defined by the corners `(z1, y1, x1)` and `(z2, y2, x2)` for each channel.\n\n4. `get_sat(self)`: Return the computed SAT as a 4D NumPy array.\n\n5. `size(self)`: Return the size in bytes of the SAT data structure.\n\nThe class should handle cases where the query region is partially or completely outside the bounds of the array by returning appropriate sums or averages (e.g., treating out-of-bounds areas as having zero values).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure collections."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named search_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django', 'pandas', 'matplotlib']."}, {"type": "combination", "instruction": "You should define an interface named search_customer that includes these methods ['process_credit', 'get_profile', 'add_record']."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 12, 13], "11": [0, 1, 2, 8, 12, 13]}, "question_id": 38}
{"question": "\n\nDesign a session storage system that interfaces with an SQLite database to manage session data. The system should provide the following functionalities:\n\n1. Initialize the database connection and prepare the session table.\n2. Create a new session with a unique key, value, and expiration time.\n3. Retrieve a session value by its key.\n4. Update an existing session with a new value and reset its expiration time.\n5. Delete a session by its key.\n6. Check if a session exists by its key.\n7. Store and retrieve session data in JSON format.\n8. Enable debug mode for additional logging.\n\nThe session storage system should also support automatic database table creation (automigration) if the session table does not exist. The system should be able to handle concurrent access to the session data.\n\nProvide a Go package named `sessionstore` with a `Store` struct and associated methods to implement the above functionalities. Include unit tests to verify the correctness of each method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named display_dwa."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "combination", "instruction": "Your code should define a class named Punish that implements the display_dwa interface."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 5, 6]}, "question_id": 39}
{"question": " Implement a Java method that generates an SQL `SELECT` statement based on a given table name, a list of column names, and an optional `WHERE` clause. The method should return the complete SQL query as a string. The `WHERE` clause should be represented by a separate class that contains the column name, the operator (e.g., `=`, `<`, `>`, `LIKE`), and the value to compare against. If the `WHERE` clause is not provided, the method should generate a simple `SELECT` statement that fetches all records.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, type should be char."}, {"type": "variable", "instruction": "Variable inventory, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named process_form."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_form', 'transform_transaction']."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.nio']."}, {"type": "file", "instruction": "Your code should use the function process_form from the library java.nio."}, {"type": "combination", "instruction": "The function process_form should take ['data', 'msg', 'shipment'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_message, which should contain these functions ."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "11": [0, 10], "12": [0, 6], "13": [0, 9]}, "question_id": 40}
{"question": "\n\nImplement a thread-safe `PacketProcessor` class that manages a queue of `Packet` objects to be processed. The class should provide the following functionalities:\n\n1. `enqueuePacket(Packet packet)`: Adds a `Packet` to the queue for processing.\n2. `processNextPacket()`: Processes the next `Packet` in the queue if available, otherwise waits for a packet to be enqueued. Processing a packet is simulated by simply printing the packet's content to the console.\n3. `stopProcessing()`: Stops the packet processing, ensuring that any ongoing processing is completed before shutting down.\n\nThe `PacketProcessor` should use a `BlockingDeque` to manage the packets and should be capable of handling concurrent access from multiple threads. Ensure that the class is designed to be safely used in a multithreaded environment.\n\nWrite a JUnit test case to verify the correctness of the `PacketProcessor` class. The test should create multiple threads that enqueue packets to the processor and a separate thread that processes the packets. The test should verify that all packets are processed correctly.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the private keyword."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, type should be int."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "variable", "instruction": "Variable report, the initial value should be kms."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named modify_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.net']."}, {"type": "file", "instruction": "Your code should use the function execute_punish from the library java.time."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the Punish class using ['tys', 'order', 'form'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named modify_log that includes these methods ['delete_profile', 'get_cut', 'delete_profile']."}, {"type": "combination", "instruction": "Your code should define a class named Punish that implements the modify_log interface."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "9": [0, 1, 2, 5], "11": [0, 1, 2, 10], "14": [0, 1, 2, 13], "15": [0, 1, 2, 12], "16": [0, 1, 2, 10], "17": [0, 1, 2, 10, 12]}, "question_id": 41}
{"question": "\n\nDesign a function `ReverseStack` that takes a stack of integers and reverses the elements using only stack operations (push and pop). The stack is implemented using a linked list, similar to the LinkedListStack in the provided code snippet. The function should not return anything, but instead, the original stack should be reversed.\n\nTo demonstrate the usage of the `ReverseStack` function, you should also write a `main` function that creates a stack, pushes some elements onto it, prints the original stack, calls `ReverseStack`, and then prints the reversed stack.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named insert_status."}, {"type": "class", "instruction": "Your code should define a class named Dwa."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_room."}, {"type": "combination", "instruction": "In your code, the class Dwa should have these properties ['customer', 'kms', 'view']."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_room, which should contain these classes ['Tys', 'AnalyzeRoomTys', 'AnalyzeOrder']."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7], "10": [0, 1, 7], "11": [0, 1, 7, 9]}, "question_id": 42}
{"question": "Please write a Java method to handle a request for initiating a WeChat corporate payment to a user. The method should receive the user's OpenID and the server's IP address as parameters, and construct a data set with the necessary information to initiate the payment. Note that the payment amount and merchant order number should be passed to the method as parameters, rather than hardcoded in the code. Additionally, a validation function needs to be implemented to verify whether the payment request contains all necessary information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentService {\n    public static void initiatePayment(String userOpenId, String serverIp, String orderAmount, String merchantOrderNo) throws Exception {\n    }\n    public static boolean checkPaymentData(Map<String, String> data) {\n        return false;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_form', 'create_view', 'add_order', 'search_record']."}, {"type": "interface", "instruction": "Your code should define an interface named generate_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ItemPunish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.io', 'java.util', 'java.lang']."}, {"type": "combination", "instruction": "Your code should define a class named ItemPunish that implements the generate_punish interface."}, {"type": "combination", "instruction": "In your code, the class ItemPunish should have these methods ['check_form', 'modify_account', 'get_record']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"4": [0, 1, 3, 12], "7": [0, 1, 6, 12], "10": [0, 1, 6, 8, 12], "11": [0, 1, 8, 12]}, "question_id": 43}
{"question": "\nCreate a Java program that tracks and visualizes the logout locations of players in a multiplayer game. The program should render a 3D box at the location where a player logged out, along with a name tag that includes the player's name and coordinates. The box and name tag should be customizable in color and visibility, and the program should only render logout spots within a certain range of the current player. Additionally, implement a rainbow color mode that cycles the box and name tag colors through the spectrum.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the long keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should not be a global variable."}, {"type": "variable", "instruction": "Variable record should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named SubmitTransactionData."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_request."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.io']."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the SubmitTransactionData class using ['request', 'event'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_request, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7], "9": [0, 1, 2, 3, 4, 7], "13": [0, 1, 2, 3, 4, 10], "14": [0, 1, 2, 3, 4, 11]}, "question_id": 44}
{"question": "Implement the `WaitGroup` type from `Go` in c++, which is used to wait for a group of coroutines/threads to complete and can conveniently synchronize multiple coroutines. It is used to coordinate one or more threads until certain operations are completed before continuing execution. This is achieved through a counter set to a specific value at initialization. Each time a thread completes its tasks, the counter decrements by 1. When the counter reaches zero, all threads waiting on this counter will be awakened to continue execution. The following requirements need to be met:\n1. Not to reference other third-party libraries, but std-provided types can be utilized\n2. Provide a constructor `WaitGroup(size_t count)` to set the initial value of the wait counter\n3. Implement the interface `void Wait()` representing that the current thread waits until the counter reaches zero\n4. Implement the interface `void Done()` representing decreasing the counter value. If the counter value reaches zero, all waiting threads will be awakened\n5. Implement the interface `size_t GetCount()` which is used to return the current value of the counter\n6. Implement the interface `void Add(int64_t n)` to increase the wait counter value. delta can be a positive or negative number", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "interface", "instruction": "Your code should define an interface named display_message."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the Punish class using ['tys'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named Punish that implements the display_message interface."}, {"type": "combination", "instruction": "In your code, the class Punish should have these properties ['shipment', 'credit', 'log']."}, {"type": "combination", "instruction": "In your code, the class Punish should have these methods ['transform_report']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"4": [0, 3, 8], "5": [0, 2, 3, 8], "6": [0, 3, 8], "7": [0, 3, 8]}, "question_id": 45}
{"question": "Solving Integer Programming Problem\n\nmax z = 8x_1 + 2x_2 - 4x_3 - 7x_4 - 5x_5\ns.t.\n3x_1 + 3x_2 + x_3 + 2x_4 + 3x_5 <= 4\n5x_1 + 3x_2 - 2x_3 - x_4 + x_5 <= 4\nx_i \\in {0, 1}, i = 1, ..., 5\n\nDefine a Python function solve() to solve this problem, and return the optimal z.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the continue keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named check_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas']."}, {"type": "file", "instruction": "Your code should use the function handle_shipment from the library pandas."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 12], "9": [0, 1, 2, 3, 8, 12], "11": [0, 1, 2, 3, 10, 12]}, "question_id": 46}
{"question": "\n\nDesign a Python function `create_and_cleanup_vmax_volume` that automates the process of creating a new volume on an EMC VMAX storage array, and ensures that any volumes created during the process are cleaned up afterwards. The function should adhere to the following specifications:\n\n1. The function should take two arguments:\n    - `size_in_gb`: The desired size of the volume to be created, in gigabytes.\n    - `test_case`: An object that has an `addCleanup` method, which is used to register cleanup callbacks.\n\n2. The function should read the VMAX configuration from a YAML file, as done in the `_read_vmax_yaml` function provided in the code snippet.\n\n3. The function should create a new volume with the specified size, rounded up to the nearest allocation unit as determined by the `vmax_allocation_unit` function.\n\n4. The function should register a cleanup callback using the `test_case.addCleanup` method to ensure that the created volume is deleted after the test case is completed.\n\n5. The function should return the ID of the created volume.\n\n6. Include error handling to manage any exceptions that may occur during the volume creation and cleanup process, and print appropriate error messages.\n\n7. Provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be bool."}, {"type": "interface", "instruction": "Your code should define an interface named insert_bill."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['Django', 'pandas']."}, {"type": "file", "instruction": "Your code should use the function search_account from the library seaborn."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 47}
{"question": "\n\nDesign a simple racing car game data access object (DAO) that interacts with a hypothetical database to store and retrieve game-related data. The DAO should provide the ability to insert a new game record and count the total number of games played. Each game record is represented by a `GameEntity` object which contains details about the game such as the game ID, the name of the winner, and the total time taken to finish the race.\n\nImplement the `GameDao` interface with the following methods:\n- `insert(GameEntity gameEntity)`: This method should accept a `GameEntity` object and insert it into the database. It should return the ID of the newly inserted game record.\n- `countGames()`: This method should return the total number of games stored in the database.\n\nFor the purpose of this exercise, you do not need to implement an actual database connection. Instead, simulate the database operations using in-memory data structures (e.g., a list).\n\nProvide a concrete implementation of the `GameDao` interface in the `InMemoryGameDao` class. Also, include a simple `GameEntity` class with appropriate attributes and methods.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the do keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named Inventory."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_record."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_record, which should contain these classes ['ConfigureOrder', 'EventToken', 'TokenBill']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "9": [0, 1, 2, 6, 8]}, "question_id": 48}
{"question": "\n\nDesign a Kubernetes node drainer that respects PodDisruptionBudgets.\n\nIn a Kubernetes cluster, it is sometimes necessary to drain nodes to perform maintenance or to decommission them. Draining a node involves safely evicting all the pods running on it, while respecting any PodDisruptionBudgets (PDBs) that have been set. PDBs are policies that limit the number of concurrently disrupted pods in a replicated application, ensuring high availability.\n\nYour task is to implement a `NodeDrainer` in Go that performs the following steps:\n\n1. List all the pods running on a given node.\n2. Evict these pods using the Kubernetes Eviction API, which respects PDBs.\n3. Wait for the pods to be successfully deleted before completing the drain operation.\n\nThe provided code snippet contains a simplified version of such a drainer, which you can use as a starting point. Your implementation should be robust, handle errors gracefully, and log relevant information for debugging purposes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named manage_bill."}, {"type": "interface", "instruction": "Your code should define an interface named filter_view."}, {"type": "class", "instruction": "Your code should define a class named Request."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['fmt', 'os']."}, {"type": "combination", "instruction": "Your code should define a class named Request that implements the filter_view interface."}, {"type": "combination", "instruction": "In your code, the class Request should have these methods ['execute_shipment', 'create_data', 'get_kms']."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 5, 15], "11": [0, 1, 10, 15], "13": [0, 1, 9, 10, 15], "14": [0, 1, 10, 15]}, "question_id": 49}
{"question": "\n\nDesign a RESTful API endpoint for a video server that allows the deletion of video records. The endpoint should be able to receive a DELETE request with a video ID and add a deletion record to the database. If the operation is successful, the server should respond with a success message. If there is an error, the server should respond with an appropriate error message and status code.\n\nThe video server uses a package named `dbops` which has a function `AddVideoDeletionRecord(vid string) error` that handles the database operation required to mark a video for deletion.\n\nWrite a Go program that implements the `vidDelRecHandler` function, which is the HTTP handler for this endpoint. The handler should extract the video ID from the URL parameters, call the `AddVideoDeletionRecord` function, and then write the appropriate response to the client.\n\nAdditionally, provide a mock implementation of the `dbops` package with the `AddVideoDeletionRecord` function for testing purposes, and write test cases to verify the correctness of the `vidDelRecHandler` function.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not use the import keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named process_tys."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named SubmitDwaData."}, {"type": "file", "instruction": "Your code should be organized in a package named add_account."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv', 'sort']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['math', 'os', 'time']."}, {"type": "combination", "instruction": "In your code, the class SubmitDwaData should have these properties ['inventory']."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_account, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "13": [0, 1, 2, 9], "14": [0, 1, 2, 10]}, "question_id": 50}
