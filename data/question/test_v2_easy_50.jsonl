{"question": "Design a taxi service simulation using the State Design Pattern in C++. The simulation should model the behavior of a taxi with respect to its duty status and passenger interactions. The taxi can be in one of three states: `OffDuty`, `OnDuty`, or `Arrived`. The state of the taxi changes based on the following events:\n\n- `hailed()`: A passenger hails the taxi. If the taxi is off-duty, it switches to on-duty and picks up the passenger. If the taxi is already on-duty or has arrived, it informs that it is already hailed.\n- `drive()`: The taxi drives the passenger to their destination. This is an internal transition that happens immediately after being hailed if the taxi was off-duty. If the taxi is on-duty, it drives to the destination. If the taxi has already arrived, it informs that they are at the destination.\n- `checkout()`: The passenger checks out and pays the bill. If the taxi is on-duty or has arrived, it processes the checkout and switches to off-duty. If the taxi is already off-duty, it indicates that there is no passenger to checkout.\n\nImplement the `Taxi` class and its associated `State` classes (`OffDutyLights`, `OnDutyLight`, and `Arrived`) to simulate this behavior. Each state should handle the `hailed()`, `drive()`, and `checkout()` events appropriately and transition the taxi to the correct state.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named taxiState."}, {"type": "function", "instruction": "Your code should include a function named handleHail."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Taxi."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named taxiService."}, {"type": "combination", "instruction": "Your code should be organized in a package named taxiService, which should contain these classes Taxi, OffDutyLights, OnDutyLight, Arrived."}], "instruction_dependence": {"7": [0, 1, 6], "9": [0, 1, 8], "11": [0, 1, 8, 10]}, "question_id": 1}
{"question": "Implement a C++ class `ResizableRectangle` that inherits from a hypothetical `Rectangle` class and overrides the implicit size properties to allow resizing. The `ResizableRectangle` class should have the following features:\n\n1. It should have a constructor that takes the initial width and height as parameters.\n2. It should have member functions `setImplicitWidth` and `setImplicitHeight` to allow changing the implicit size of the rectangle.\n3. It should have member functions `getImplicitWidth` and `getImplicitHeight` to retrieve the current implicit size of the rectangle.\n4. It should have a member function `resize` that takes a new width and height and updates both the implicit size and the actual size of the rectangle.\n5. The actual size of the rectangle should never be smaller than the implicit size.\n\nAssume that the `Rectangle` class has protected member variables `implicitWidth` and `implicitHeight`, and public member functions `setWidth` and `setHeight` to set the actual size of the rectangle.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `resizeFactor`."}, {"type": "variable", "instruction": "Variable `resizeFactor` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `calculateArea`."}, {"type": "class", "instruction": "Your code should define a class named `ResizableRectangle`."}, {"type": "combination", "instruction": "In your code, the class `ResizableRectangle` should have these methods `setImplicitWidth`, `setImplicitHeight`, `getImplicitWidth`, `getImplicitHeight`, `resize`."}, {"type": "combination", "instruction": "The function `resize` should take `newWidth`, `newHeight` as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"5": [0, 1, 4, 10], "8": [0, 1, 7, 10], "9": [0, 1, 6, 10]}, "question_id": 2}
{"question": "Write a Python script that cleans up a database by removing records associated with source IDs that are no longer active. The script should perform the following tasks:\n\n1. Retrieve a list of active source IDs from a utility module.\n2. Establish a database connection using a utility module.\n3. Identify and delete records from specified tables where the source ID is not in the list of active source IDs.\n\nThe script should be designed to work with a legacy system, and it should use a utility module named `modules_legacy.utils` which provides two functions:\n\n- `get_sources()`: Returns a dictionary where keys are active source IDs (as strings) and values are additional information about the sources.\n- `get_dbconn()`: Returns a database connection object.\n\nThe script should iterate over a predefined list of table names and execute SQL DELETE statements to remove records with inactive source IDs. The script should print the SQL DELETE statements that would be executed.\n\nAssume that the database connection object returned by `get_dbconn()` has a `cursor()` method that returns a cursor object supporting the `execute()` and `fetchall()` methods.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "variable", "instruction": "Your code should define a variable named active_sources."}, {"type": "variable", "instruction": "Variable active_sources should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named cleanup_database."}, {"type": "class", "instruction": "Your code should define a class named DatabaseCleaner."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "The function cleanup_database should take table_names as parameters."}], "instruction_dependence": {"3": [0, 1, 2], "6": [0, 1, 5], "7": [0, 1, 4]}, "question_id": 3}
{"question": "Design a Shopping List Management System that allows users to create, modify, and manage multiple shopping lists. Each shopping list can contain multiple items, and each item has a name, type, unit price, and quantity. The system should also allow users to calculate the total cost of items in a shopping list, remove items, modify the quantity of items, and mark items as bought. Additionally, users should be able to rename and copy entire shopping lists. Implement a console-based user interface to interact with the system.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named shopping_lists."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named calculate_total_cost."}, {"type": "interface", "instruction": "Your code should define an interface named ShoppingListInterface."}, {"type": "class", "instruction": "Your code should define a class named ShoppingList."}, {"type": "file", "instruction": "Your code should be organized in a package named shopping_list_manager."}, {"type": "combination", "instruction": "Your code should define a class named ShoppingList that implements the ShoppingListInterface interface."}, {"type": "combination", "instruction": "In your code, the class ShoppingList should have these properties: name, items, total_cost."}, {"type": "combination", "instruction": "The function calculate_total_cost should return a float as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"2": [0, 1, 10], "7": [0, 4, 5, 10], "8": [0, 5, 10], "9": [0, 3, 10]}, "question_id": 4}
{"question": "You are tasked with creating a Python script that automates the process of scraping job listings from various blockchain-related companies. Each company has a unique URL where their job listings are posted, and they all use the Greenhouse platform for their job boards. The script should be able to scrape job listings from multiple companies, extract relevant job details, and print them out. The job details to be extracted include: Job title, Location, Job description (a brief summary), and Application link. The script should use the Selenium WebDriver to navigate the web pages and scrape the required information. The provided code snippet includes a list of `CompanyItem` objects, each representing a company with attributes such as the company name, jobs URL, scraper type, company website, and industry type. Write a Python script that meets the following requirements: 1. Define a `CompanyItem` class with attributes for the company name, jobs URL, scraper type, company website, and industry type. 2. Define a `ScrapeGreenhouse` class with a method `getJobs` that takes a Selenium WebDriver instance, a jobs URL, and a company name as arguments and returns a list of dictionaries, each containing the job details mentioned above. 3. Use the provided list of `CompanyItem` objects to iterate over each company and scrape their job listings using the `ScrapeGreenhouse` class. 4. Print out the job details for each company. 5. Ensure the Selenium WebDriver is properly closed after the scraping is completed.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "function", "instruction": "Your code should include a function named getJobs."}, {"type": "class", "instruction": "Your code should define a class named ScrapeGreenhouse."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {}, "question_id": 5}
{"question": "Design a Go program that manages user addresses in a database using the GORM ORM. The program should include functionality to add, retrieve, update, and delete addresses for a user. Each address should have a unique ID, be associated with a user, and contain fields for the name, whether it is the primary address, city, province, address lines, phone number, email, and postal code. The `Address` struct provided should be used as the model for the database table. Implement the following functions: - `AddAddress(db *gorm.DB, address Address) error`: Adds a new address to the database. It should return an error if the address cannot be added. - `GetAddressesByUserID(db *gorm.DB, userID string) ([]Address, error)`: Retrieves all addresses for a given user ID. - `UpdateAddress(db *gorm.DB, addressID string, newAddress Address) error`: Updates an existing address by its ID with the new address details. - `DeleteAddress(db *gorm.DB, addressID string) error`: Deletes an address by its ID. Ensure that you handle any potential errors that may occur during database operations. Write test cases to verify the correctness of each function.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should include a function named AddAddress."}, {"type": "interface", "instruction": "Your code should define an interface named AddressManager."}, {"type": "class", "instruction": "Your code should define a class named Address."}, {"type": "file", "instruction": "Your code should be organized in a package named addressmanager."}, {"type": "file", "instruction": "Your code should import the following libraries gorm.io/gorm, gorm.io/driver/sqlite."}, {"type": "combination", "instruction": "You should define an interface named AddressManager that includes these methods AddAddress, GetAddressesByUserID, UpdateAddress, DeleteAddress."}, {"type": "combination", "instruction": "Your code should define a class named Address that implements the AddressManager interface."}], "instruction_dependence": {"9": [0, 1, 2, 5], "10": [0, 1, 2, 5, 6]}, "question_id": 6}
{"question": "Create a Python class `CodeExampleDirective` that extends the functionality of a Sphinx directive to include code examples in documentation. The directive should allow users to specify the programming language, the start and end markers within the source file to include, and the number of spaces to dedent from the beginning of each line. The directive should be registered in a Sphinx extension. The class should follow these specifications: 1. The class should be named `CodeExampleDirective` and inherit from `LiteralInclude`, a directive provided by Sphinx for including code from external files. 2. The class should override the `run` method to set default options for `language`, `start-after`, `end-before`, and `dedent`. These options should be customizable through directive options in the documentation source. 3. The `setup` function should be defined to register the `CodeExampleDirective` with Sphinx under the directive name `code-example`. 4. Include test cases in the form of docstrings that demonstrate how the directive would be used in a Sphinx documentation source file.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `language`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `MarkerType`."}, {"type": "variable", "instruction": "Variable `dedent`, type should be `int`."}, {"type": "variable", "instruction": "Variable `start_after` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `run`."}, {"type": "interface", "instruction": "Your code should define an interface named `CodeExampleInterface`."}, {"type": "combination", "instruction": "You should define an interface named `CodeExampleInterface` that includes these methods `set_language`, `set_markers`, `set_dedent`."}, {"type": "combination", "instruction": "The function `run` should return a `list` as its result."}], "instruction_dependence": {"4": [0, 2], "5": [0, 2], "8": [0, 7], "9": [0, 6]}, "question_id": 7}
{"question": "Write a function that removes duplicates from multiple texts using a simple MD5 method. The function name should be deduplicate_texts_md5. The function will take in a list containing multiple texts and return a list that has had duplicates removed.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named text_hash."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable text_hash should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named TextProcessor."}, {"type": "combination", "instruction": "You should define an interface named TextProcessor that includes these methods deduplicate_texts_md5."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7]}, "question_id": 8}
{"question": "Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, write a program to find all the elements of `[1, n]` inclusive that do not appear in `nums`. The algorithm should run in `O(n)` time and use constant extra space. Your task is to implement the `Solution` class with the `findDisappearedNumbers` method, which takes a vector of integers as input and returns a vector of all the missing numbers in the range `[1, n]`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "variable", "instruction": "Your code should define a variable named `nums`."}, {"type": "variable", "instruction": "Variable `nums`, type should be `std::vector<int>`."}, {"type": "function", "instruction": "Your code should include a function named `findDisappearedNumbers`."}, {"type": "interface", "instruction": "Your code should define an interface named `SolutionInterface`."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "file", "instruction": "Your code should be organized in a package named `missing_numbers`."}, {"type": "combination", "instruction": "The function `findDisappearedNumbers` should take `std::vector<int>& nums` as parameters."}, {"type": "combination", "instruction": "The function `findDisappearedNumbers` should return a `std::vector<int>` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `missing_numbers`, which should contain these classes `Solution`."}], "instruction_dependence": {"3": [0, 1, 2], "8": [0, 1, 4], "9": [0, 1, 4], "10": [0, 1, 6, 7]}, "question_id": 9}
{"question": "Find the roots of the equations below:\n\nx_1 + 0.5 * (x_1 - x_2)^3 = 1\n0.5 * (x_2 - x_1)^3 + x2 = 0\n\nDefine a Python function solve() to solve the problem. It should return a list of length 2, representing the two roots of the equations.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the return keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "variable", "instruction": "Your code should define a variable named roots."}, {"type": "variable", "instruction": "Variable roots, the initial value should be [0, 0]."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "file", "instruction": "Your code should be organized in a package named equation_solver."}, {"type": "combination", "instruction": "The function solve should return a list as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 10], "9": [0, 1, 2, 3, 7, 10]}, "question_id": 10}
{"question": "Design a class `BitcoinExchange` that reads historical Bitcoin exchange rate data from a file and then processes a separate file containing Bitcoin transaction values to calculate the equivalent amount in USD for each transaction based on the exchange rate on the date of the transaction. The exchange rate data file is expected to have a header with the format 'date,exchange_rate' followed by lines containing the date in 'YYYY-MM-DD' format and the exchange rate as a floating-point number. The transaction values file is expected to have a header with the format 'date | value' followed by lines containing the date in 'YYYY-MM-DD' format and the transaction value as a floating-point number. The class should handle various exceptions such as invalid file format, incorrect date format, invalid date values, and out-of-range values for the transaction. If the exact date of the transaction is not available in the exchange rate data, the class should use the most recent available rate before the transaction date. Implement the `BitcoinExchange` class with the following methods: - `readPriceFile(std::string priceFileName)`: Reads the exchange rate data from the given file and stores it in a suitable data structure. - `exec(std::string valFileName)`: Reads the transaction values from the given file and calculates the equivalent amount in USD for each transaction, printing the results to the console.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named exchangeRates."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable exchangeRates, type should be std::map<std::string, double>."}, {"type": "variable", "instruction": "Variable exchangeRates, the initial value should be an empty map."}, {"type": "function", "instruction": "Your code should include a function named calculateUSDValue."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries <iostream>, <fstream>, <map>, <string>."}, {"type": "file", "instruction": "Your code should use the function find from the library std::map."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "10": [0, 1, 2, 9], "12": [0, 1, 2, 11]}, "question_id": 11}
{"question": "Design a Python function that retrieves media records associated with a specific robotics team and year from a datastore. The function should filter out any media that does not match the team key or the specified year. The media records are stored in a datastore using Google App Engine's NDB client library. Each media record is an instance of the `Media` class, which has the following attributes: `id`, `media_type_enum`, `foreign_key`, `references`, and `year`. The `TeamYearMediaQuery` class is responsible for executing the query. It has a constructor that takes a `team_key` and a `year`, and a `fetch` method that returns a list of `Media` instances that match the query criteria. Implement the `TeamYearMediaQuery` class and the `fetch` method following the test cases provided in the given code snippet. Ensure that the `fetch` method correctly filters out media records that do not have the correct team key, year, or both.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "function", "instruction": "Your code should include a function named fetch."}, {"type": "interface", "instruction": "Your code should define an interface named TeamYearMediaQuery."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['flask', 'django']."}, {"type": "combination", "instruction": "The function fetch should return a list as its result."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 2]}, "question_id": 12}
{"question": "Create a command-line application that manages federation relationships between trust domains. The application should be able to show details of a specific federation relationship when provided with the trust domain name. The application should follow these specifications: 1. Implement a command-line interface using the provided code structure. 2. The command should be named `federation show`. 3. The command should accept a single flag `--trustDomain` which specifies the trust domain name of the federation relationship to show. 4. If the `--trustDomain` flag is not provided, the application should return an error indicating that a trust domain name is required. 5. The application should simulate fetching the federation relationship details from a server. For the purpose of this exercise, you can mock the server response. 6. The application should print the details of the federation relationship in a human-readable format. 7. Include error handling for cases where the federation relationship does not exist or the server is unreachable.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named trust_domain."}, {"type": "variable", "instruction": "Variable trust_domain, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named show_federation_details."}, {"type": "function", "instruction": "Your code should not use any functions from the os module."}, {"type": "interface", "instruction": "Your code should define an interface named FederationInterface."}, {"type": "class", "instruction": "Your code should define a class named FederationManager."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named federation_manager."}, {"type": "combination", "instruction": "You should initialize an object named manager as an instance of the FederationManager class using trust_domain for initialization."}, {"type": "combination", "instruction": "You should define an interface named FederationInterface that includes these methods show_details, fetch_details."}, {"type": "combination", "instruction": "In your code, the class FederationManager should have these properties trust_domain, server_url."}, {"type": "combination", "instruction": "Your code should be organized in a package named federation_manager, which should contain these classes FederationManager, FederationInterface."}], "instruction_dependence": {"3": [0, 2], "8": [0, 7], "10": [0, 7], "11": [0, 6], "12": [0, 7], "13": [0, 7, 9]}, "question_id": 13}
{"question": "Design a Go program that interacts with a cloud service to manage snapshot repositories. The program should provide functionality to retrieve the configuration of a specific snapshot repository by its name and region. The snapshot repository configurations are managed by a cloud service, and the program should use an API client to communicate with the service. The program should define a `GetParams` struct to hold the parameters for the retrieval operation, including the API client, the region, and the repository name. It should also implement a `Validate` method for `GetParams` to ensure that all required parameters are provided and valid. The main functionality should be implemented in a `Get` function that takes `GetParams` as an argument, validates the parameters, and then calls the cloud service's API to retrieve the snapshot repository configuration. The `Get` function should return the configuration as a `models.RepositoryConfig` object or an error if the operation fails. The cloud service API client is represented by the `*api.API` field in the `GetParams` struct, and the authentication information is provided by the `AuthWriter` field in the `api.API` struct. Provide a clear problem description, implement the `Get` function, and include test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the `defer` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `config`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `config`, should be a global variable."}, {"type": "variable", "instruction": "Variable `config` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `Get`."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `api`, `models`, `errors`."}, {"type": "combination", "instruction": "The function `Get` should take `params` as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 9]}, "question_id": 14}
{"question": "Implement a type list and associated operations in C++ using template metaprogramming. A type list is a compile-time list that holds types instead of values. Your task is to create a `type_list` class template that can store a list of types and provide the following operations:\n\n1. `size()`: A static member function that returns the number of types in the type list.\n2. `concat_type`: A template struct that takes a type and a `type_list` and produces a new `type_list` with the type concatenated to the front of the given `type_list`.\n3. `remove_type`: A template struct that takes a type and a `type_list` and produces a new `type_list` with all instances of the type removed.\n\nYou are also required to write unit tests using Google Test to verify the correctness of each operation.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "variable", "instruction": "Your code should define a variable named `type_list_size`."}, {"type": "function", "instruction": "Your code should include a function named `calculate_size`."}, {"type": "interface", "instruction": "Your code should define an interface named `TypeListOperations`."}, {"type": "class", "instruction": "Your code should define a class named `TypeList`."}, {"type": "file", "instruction": "Your code should not use the following libraries `boost`."}, {"type": "combination", "instruction": "In your code, the class `TypeList` should have these properties `size`, `concat_type`, `remove_type`."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7]}, "question_id": 15}
{"question": "Design a Java class `WebhookArtifactManager` that manages the extraction and processing of artifacts from webhook payloads. The class should be able to handle different sources of webhooks and extract artifacts based on templates defined for each source. The templates are JSON files that define how to extract artifacts from the webhook payload. The `WebhookArtifactManager` should provide the following functionalities: 1. Register a source and its corresponding template file path. 2. Extract artifacts from a given webhook payload based on the source's template. 3. Log the successful processing of artifacts or errors during extraction. An artifact is represented by the `Artifact` class, which contains properties such as `type`, `name`, `version`, and `location`. The extraction process should convert the webhook payload into a list of `Artifact` objects. The `WebhookArtifactManager` should use an `ObjectMapper` to parse the webhook payload and a custom `MessageArtifactTranslator` to apply the template and extract artifacts. Implement the `WebhookArtifactManager` class with the necessary components and methods. Provide test cases to verify the correctness of the artifact extraction process.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named artifactList."}, {"type": "variable", "instruction": "Variable artifactList, the initial value should be new ArrayList<Artifact>()."}, {"type": "function", "instruction": "Your code should include a function named extractArtifacts."}, {"type": "interface", "instruction": "Your code should define an interface named ArtifactTranslator."}, {"type": "class", "instruction": "Your code should define a class named WebhookArtifactManager."}, {"type": "combination", "instruction": "In your code, the class Artifact should have these properties type, name, version, and location."}, {"type": "global", "instruction": "Your answer in total should not exceed 150 lines."}], "instruction_dependence": {"5": [0, 4, 10], "9": [0, 8, 10]}, "question_id": 16}
{"question": "Marathon Race Tracker\n\nIn a marathon race, all participants are required to register before the race begins. During the race, several checkpoints are set up to track the progress of the participants. Unfortunately, due to a system error, one participant's checkpoint data was lost, and they were not recorded as having completed the race. Your task is to write a program that can determine which participant did not finish the race.\n\nWrite a function `findIncompleteParticipant` that takes in two arrays of strings: `participants` and `checkpoints`. The `participants` array contains the names of all the registered participants, and the `checkpoints` array contains the names of the participants who have been recorded at the final checkpoint (i.e., those who have completed the race). The function should return the name of the participant who did not finish the race. It is guaranteed that exactly one participant did not reach the final checkpoint.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 function."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named ParticipantStatus."}, {"type": "interface", "instruction": "Your code should define an interface named RaceTracker."}, {"type": "class", "instruction": "Your code should define a class named Marathon."}, {"type": "file", "instruction": "Your code should import the following libraries ['collections']."}, {"type": "combination", "instruction": "Your code should define a class named Marathon that implements the RaceTracker interface."}, {"type": "combination", "instruction": "In your code, the class Marathon should have these properties ['participants', 'checkpoints']."}], "instruction_dependence": {"10": [0, 1, 2, 7, 8], "11": [0, 1, 2, 8]}, "question_id": 17}
{"question": "Write a Python program that automates the process of downloading puzzle input data for the Advent of Code event. The Advent of Code is an annual December event where programmers solve daily coding puzzles. Each puzzle comes with a unique input data file that participants need to download from the event's website. Your program should meet the following requirements: 1. It should be able to download input data for a given year and day of the event. 2. The input data should be saved to a local file in a directory structure that follows the pattern `year/day/input.txt`. 3. If the input data file already exists, the program should not attempt to download it again. 4. The program should use a session cookie for authentication to download the input data. 5. The session cookie should be read from a JSON file named `.adventofcode.json` located in the current working directory. The JSON file should have a structure like `{\"session\": \"your-session-cookie\"}`. 6. The program should provide a command-line interface that allows the user to specify the year for which to download the input data. If the year is not specified, the current year should be used. 7. The program should attempt to download input data for all days (1 through 25) of the specified year.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should use the 'with' keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'session_cookie'."}, {"type": "function", "instruction": "Your code should include a function named 'download_input_data'."}, {"type": "interface", "instruction": "Your code should define an interface named 'DownloaderInterface'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'AdventOfCodeDownloader'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'advent_of_code'."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'requests', 'json', 'argparse']."}, {"type": "combination", "instruction": "You should initialize an object named 'downloader' as an instance of the 'AdventOfCodeDownloader' class using ['year', 'session_cookie'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'advent_of_code', which should contain these functions ['download_input_data', 'create_directory_structure', 'read_session_cookie']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "11": [0, 1, 2, 8], "12": [0, 1, 2, 9]}, "question_id": 18}
{"question": "Design a class `BoardPiece` that represents a rectangular piece of a board game. The class should have the following features:\n\n1. Two private integer fields `x` and `y` representing the dimensions of the board piece. The `x` dimension should always be greater than or equal to the `y` dimension.\n2. A private `BigDecimal` field `pieceArea` that stores the area of the board piece.\n3. A private boolean field `isCut` that indicates whether the board piece has been cut or not.\n4. A constructor that takes two integers `x` and `y` as parameters and initializes the board piece. If `x` is less than `y`, the values should be swapped to maintain the invariant that `x` is greater than or equal to `y`. The area of the board piece should be calculated and stored in `pieceArea`.\n5. Getter methods for `x`, `y`, and `pieceArea`.\n6. A method `isCut()` that returns the value of the `isCut` field.\n7. A method `setCut(boolean cut)` that sets the value of the `isCut` field.\n\nWrite a program that demonstrates the use of the `BoardPiece` class by creating an instance, setting its `isCut` status, and printing out its dimensions and area.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "class", "instruction": "Your code should define a class named BoardPiece."}, {"type": "file", "instruction": "Your code should be organized in a package named boardgame."}, {"type": "combination", "instruction": "In your code, the class BoardPiece should have these properties x, y, pieceArea, isCut."}, {"type": "combination", "instruction": "Your code should be organized in a package named boardgame, which should contain these classes BoardPiece."}, {"type": "combination", "instruction": "Your code should be organized in a package named boardgame, which should contain these functions getX, getY, getPieceArea, isCut, setCut."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7, 12], "10": [0, 1, 2, 3, 7, 8, 12], "11": [0, 1, 2, 3, 8, 12]}, "question_id": 19}
{"question": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator needs to include four basic mathematical operations methods: addition, subtraction, multiplication, and division. Each method accepts two `double` type parameters and returns a `double` type result. The division method needs to handle the case where the divisor is zero; when the divisor is zero, it should throw an `IllegalArgumentException` exception. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.IllegalFormatException;\npublic class SimpleCalculator {\n    public double addition(double a, double b) {\n    }\n    public double subtraction(double a, double b) {\n    }\n    public double multiplication(double a, double b) {\n    }\n    public double division(double a, double b) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, the initial value should be 0.0."}, {"type": "function", "instruction": "Your code should include a function named addition."}, {"type": "combination", "instruction": "The function addition should return a double as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 8]}, "question_id": 20}
{"question": "Please write a simple web server code using the Flask framework with the following requirements:\n- Implement a \"/test\" GET interface. The function of this interface is to query the order based on the order_id parameter input by the user. The order information can be found in the orders data table. The schema of the data table is \n```\nid integer PRIMARY KEY,\norder_id integer,\nuid integer,\nname text,\naddress text,\nprice integer\n```\nThe orders table is located in the local database ./test.db. You can use the sqlite3.connect method to connect to the database.\nBesides, you can query the uid corresponding to the user through the get_uid(cookie: ImmutableMultiDict) -> int interface.\n- If any exceptions are captured during this process, please return the string 'Error'.\n- Do not specify the port by yourself when starting the service.\n- You don't have to define the get_uid function.\n- You need to ensure that the generated code is as safe as possible.\n\nPlease write your code wrapped in a markdown```python ``` block.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "variable", "instruction": "Your code should define a variable named db_connection."}, {"type": "variable", "instruction": "Your code should define an enumeration named OrderStatus."}, {"type": "class", "instruction": "Your code should define a class named OrderService."}, {"type": "combination", "instruction": "You should initialize an object named order_service as an instance of the OrderService class using db_connection for initialization."}, {"type": "combination", "instruction": "In your code, the class OrderService should have these methods ['get_order_by_id', 'handle_exception']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6]}, "question_id": 21}
{"question": "Please write a python program with the function: Length of longest subarray whose sum is not divisible by integer K. Given an array arr[] of size N and an integer k, our task is to find the length of longest subarray whose sum of elements is not divisible by k. If no such subarray exists then return -1. The function signature is `MaxSubarrayLength(arr, n, k)`", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named max_length."}, {"type": "variable", "instruction": "Variable max_length, the initial value should be 0."}, {"type": "interface", "instruction": "Your code should define an interface named SubarrayInterface."}, {"type": "combination", "instruction": "You should define an interface named SubarrayInterface that includes these methods MaxSubarrayLength."}], "instruction_dependence": {"7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 22}
{"question": "Design a Go program that manages comments for delivery service requests in a content delivery network (CDN) system. The system should allow users to create, update, retrieve, and delete comments associated with delivery service requests. Each comment should be linked to a specific delivery service request by an ID. The program should define the following operations: 1. `CreateComment`: Given a delivery service request ID and a comment value, create a new comment and associate it with the delivery service request. 2. `UpdateCommentByID`: Given a comment ID and a new comment value, update the existing comment. 3. `GetCommentByID`: Retrieve a comment by its ID. 4. `GetAllComments`: Retrieve all comments associated with delivery service requests. 5. `DeleteCommentByID`: Delete a comment by its ID. Each comment should have the following structure: - `ID`: A unique identifier for the comment. - `DeliveryServiceRequestID`: The ID of the delivery service request the comment is associated with. - `Value`: The text content of the comment. Assume that the `TOSession` object is a client that communicates with the CDN system's API and has methods corresponding to the operations above. The `testData` variable contains initial data for testing, including delivery service requests and comments. Implement the program with appropriate test cases to verify the correctness of each operation.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named `commentManager`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `unsafe` package."}, {"type": "class", "instruction": "Your code should define a class named `CommentManager`."}, {"type": "file", "instruction": "Your code should import the following libraries: `fmt`, `encoding/json`, `net/http`."}, {"type": "file", "instruction": "Your code should use the function `NewRequest` from the library `net/http`."}, {"type": "file", "instruction": "Your code should not use the following libraries: `log`, `os`."}], "instruction_dependence": {"4": [0, 1, 2, 3], "8": [0, 1, 2, 7]}, "question_id": 23}
{"question": "Implement a C++ class `DSF::File` that represents a Direct Stream Digital (DSD) file in the DSF format. The class should be able to read the file's metadata, including properties such as file size and metadata offset, and should support reading and writing ID3v2 tags. The class should also provide a method to save any changes made to the file's metadata or tags back to the file. The DSF file format consists of several chunks, including the DSD chunk, format chunk, data chunk, and metadata chunk. The class should validate the file structure and provide appropriate error handling. The `DSF::File` class should have the following public interface: - A constructor that takes a file name or an IOStream and a boolean indicating whether to read properties, as well as a `Properties::ReadStyle` enum value. - A destructor. - A method `ID3v2::Tag* tag()` to access the file's ID3v2 tag. - A method `PropertyMap properties()` to get a map of the file's properties. - A method `PropertyMap setProperties(const PropertyMap &properties)` to set the file's properties. - A method `DSF::Properties* audioProperties()` to access the audio properties of the file. - A method `bool save()` to save changes to the file. The class should also have private methods to handle the reading and parsing of the file.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Properties::ReadStyle."}, {"type": "function", "instruction": "Your code should not use any functions from the std::vector."}, {"type": "class", "instruction": "Your code should define a class named DSF::File."}, {"type": "file", "instruction": "Your code should import the following libraries <iostream>, <fstream>, <string>, <map>."}, {"type": "file", "instruction": "Your code should use the function std::map::find from the library <map>."}, {"type": "combination", "instruction": "In your code, the class DSF::File should have these properties fileSize, metadataOffset."}, {"type": "combination", "instruction": "In your code, the class DSF::File should have these methods tag(), properties(), setProperties(), audioProperties(), save()."}], "instruction_dependence": {"7": [0, 1, 6], "8": [0, 1, 5], "9": [0, 1, 5]}, "question_id": 24}
{"question": "Please write a Java function that can convert an integer into a 4-byte byte array. The conversion of the integer should be in big-endian order (i.e., the most significant byte is at the lowest address of the byte array). Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.nio.ByteBuffer;\npublic class IntegerToBytesConverter {\n    public static byte[] convertIntToBigEndianBytes(int number) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named convertIntToBigEndianBytes."}, {"type": "class", "instruction": "Your code should define a class named IntegerToBytesConverter."}, {"type": "file", "instruction": "Your code should be organized in a package named converter."}, {"type": "combination", "instruction": "You should initialize an object named converter as an instance of the IntegerToBytesConverter class using number for initialization."}, {"type": "combination", "instruction": "The function convertIntToBigEndianBytes should return a byte[] as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named converter, which should contain these classes IntegerToBytesConverter."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"8": [0, 1, 2, 6, 11], "9": [0, 1, 2, 5, 11], "10": [0, 1, 2, 6, 7, 11]}, "question_id": 25}
{"question": "Design a multithreaded application in C++ that simulates a simple task queue system using semaphores for synchronization. The system should consist of a fixed number of worker threads that execute tasks from a shared queue. Each task is represented by a unique integer ID. The main thread should be able to add tasks to the queue, and worker threads should pick up tasks and execute them in a FIFO order. The application should use the provided Unix semaphore implementation for synchronization. The semaphore should be initialized with a count of 0, indicating that the queue is initially empty. When a task is added to the queue, the semaphore should be posted (incremented), and when a worker thread picks up a task, it should wait on the semaphore (decremented). The application should provide the following functionalities: - A method to add a task to the queue. - A method for worker threads to retrieve and execute tasks from the queue. - Proper synchronization to ensure that tasks are executed in the order they are added and that no task is executed by more than one worker.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure stack."}, {"type": "variable", "instruction": "Your code should define a variable named taskQueue."}, {"type": "variable", "instruction": "Variable taskQueue, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named TaskExecutor."}, {"type": "class", "instruction": "Your code should define a class named WorkerThread."}, {"type": "file", "instruction": "Your code should not use the following libraries boost."}, {"type": "combination", "instruction": "Your code should define a class named WorkerThread that implements the TaskExecutor interface."}, {"type": "combination", "instruction": "In your code, the class WorkerThread should have these properties taskID, isBusy."}], "instruction_dependence": {"3": [0, 2], "7": [0, 4, 5], "8": [0, 5]}, "question_id": 26}
{"question": "Design a Go program that simulates a simplified version of a cloud service provider's client management system. The system should be able to initialize clients for various cloud services and provide a method to list all initialized services. Each service client should have a unique identifier and a method to return its service name. The program should follow these requirements: 1. Define a `ServiceClient` interface with a `ServiceName` method that returns the name of the service. 2. Implement the `ServiceClient` interface for at least three mock services (e.g., `ComputeServiceClient`, `StorageServiceClient`, `NetworkingServiceClient`). 3. Create a `CloudServiceProvider` struct that contains a map of service clients, indexed by their unique identifiers. 4. Implement a method `InitializeService` on `CloudServiceProvider` that takes a service identifier and initializes the corresponding service client. 5. Implement a method `ListServices` on `CloudServiceProvider` that returns a list of names of all initialized services.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named ListServices."}, {"type": "interface", "instruction": "Your code should define an interface named ServiceClient."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CloudServiceProvider."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named cloudprovider."}, {"type": "file", "instruction": "Your code should import the following libraries fmt."}, {"type": "file", "instruction": "Your code should use the function Println from the library fmt."}, {"type": "combination", "instruction": "Your code should define a class named ComputeServiceClient that implements the ServiceClient interface."}, {"type": "combination", "instruction": "The function InitializeService should take serviceID as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 3, 12, 13], "6": [0, 5, 12, 13], "9": [0, 8, 12, 13], "10": [0, 3, 5, 12, 13], "11": [0, 2, 12, 13]}, "question_id": 27}
{"question": "Write a Python module named `version_checker` that provides functionality to check the version information of a software package. The module should expose two attributes: `__version_info__` as a tuple of integers representing the major, minor, and patch versions, and `__version__` as a string representation of the semantic version. The module should also include the following functions: 1. `is_version_info_exposed()`: Checks if the `__version_info__` attribute is exposed. 2. `is_version_info_semantic()`: Checks if the `__version_info__` attribute is a tuple of three integers. 3. `is_version_exposed()`: Checks if the `__version__` attribute is exposed. 4. `is_version_semantic()`: Checks if the `__version__` attribute is a string that follows the semantic versioning pattern. 5. `is_version_consistent()`: Checks if the `__version__` string is consistent with the `__version_info__` tuple. The module should raise an `AssertionError` with an appropriate message if any of the checks fail.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the `global` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `version_info`."}, {"type": "variable", "instruction": "Variable `version_info`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `version_info` should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named `VersionChecker`."}, {"type": "combination", "instruction": "You should initialize an object named `checker` as an instance of the `VersionChecker` class using `version_info` for initialization."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9]}, "question_id": 28}
{"question": "Design a card game where players can use special cards with musical powers. One such card is the 'MusicalBrass' card, which applies musical powers to the player when used. The card game is played in a turn-based environment where each player can use a card against themselves or an opponent. The 'MusicalBrass' card has the following properties and behaviors: It is a skill card with a special rarity and targets the player itself. It has a base cost of 0 energy to use. When used, it applies a 'BrassPower' to the player, which has an initial amount of 1. This power can be any positive effect, such as increasing the player's defense or attack on the next turn. It also applies a 'StringsPower' to the player with an amount of -1. This power can be any negative effect, such as decreasing the player's defense or attack on the next turn. The card is exhaustible, meaning it can only be used once per game. The card belongs to the 'MUSICAL' custom tag category. When the card is upgraded, the amount of 'BrassPower' applied is increased by 1. Write a Java class `MusicalBrass` that extends `CustomCard` and implements the described behavior. Include methods for using the card, upgrading the card, and initializing the card with the given properties.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the 'switch' keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'CardType'."}, {"type": "function", "instruction": "Your code should include a function named 'upgradeCard'."}, {"type": "interface", "instruction": "Your code should define an interface named 'MusicalPower'."}, {"type": "class", "instruction": "Your code should define a class named 'MusicalBrass'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'cardgame'."}, {"type": "combination", "instruction": "In your code, the class 'MusicalBrass' should have these properties 'rarity', 'target', 'baseCost', 'exhaustible', 'tag', 'brassPower', 'stringsPower'."}, {"type": "combination", "instruction": "The function 'upgradeCard' should return a 'void' as its result."}], "instruction_dependence": {"11": [0, 1, 2, 9], "12": [0, 1, 2, 7]}, "question_id": 29}
{"question": "Write a Python program that processes a string containing purchase information and writes the parsed data to an Excel file. The input string is in the format of key-value pairs separated by '&' characters, with keys such as 't' for timestamp, 's' for the sum of purchase, 'fn' for fiscal number, 'i' for invoice number, and 'fp' for fiscal sign, 'n' for number of items. The program should include the following functionalities: 1. Check if the input data string has already been processed to avoid duplicates. 2. Parse the timestamp from the format 'yyyymmddThhmmss' to a more readable format 'dd.mm.yyyy' for the date and 'HH:MM:SS' for the time. 3. Extract and print the date of purchase, time of purchase, and sum of purchase. 4. Write the parsed data to an Excel file with columns for Date, Time, and Sum. The program should handle any errors that occur during the parsing or writing process and inform the user accordingly.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named input_string."}, {"type": "variable", "instruction": "Variable input_string, type should be str."}, {"type": "variable", "instruction": "Variable input_string, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named parse_purchase_data."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named PurchaseProcessor."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'datetime']."}, {"type": "file", "instruction": "Your code should use the function to_datetime from the library pandas."}, {"type": "file", "instruction": "Your code should not use the following libraries ['openpyxl']."}, {"type": "combination", "instruction": "You should initialize an object named processor as an instance of the PurchaseProcessor class using input_string for initialization."}, {"type": "combination", "instruction": "The function parse_purchase_data should take input_string as a parameter."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "10": [0, 9], "12": [0, 8], "13": [0, 6]}, "question_id": 30}
{"question": "\n\nDesign a Python function `create_email_log_entry` that creates a new entry in an email log database table. The function should take parameters for the recipient's email, recipient's name, email subject, and status code of the email sending operation. It should use the Django ORM to interact with the database.\n\nThe function should also ensure that the `created_at` and `updated_at` fields are automatically set to the current date and time when the entry is created, and the `updated_at` field should be updated to the current date and time whenever the entry is modified.\n\nAdditionally, write a function `update_email_log_status` that updates the status code of an existing email log entry identified by its primary key `id`.\n\nProvide test cases to verify the correctness of both functions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the if keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "function", "instruction": "Your code should include a function named check_product."}, {"type": "class", "instruction": "Your code should define a class named ManageMsgEvent."}, {"type": "file", "instruction": "Your code should be organized in a package named create_notification."}, {"type": "combination", "instruction": "The function check_product should take ['credit'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_notification, which should contain these classes ['Punish', 'SetShipment', 'Status']."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"6": [0, 1, 3, 8], "7": [0, 1, 4, 5, 8]}, "question_id": 31}
{"question": "\n\nDesign a Go program that automates the process of database schema migrations for a MySQL database. The program should be able to apply new migrations to update the database schema to the latest version. The migrations are SQL scripts stored in a file system directory, and the program should be able to locate and apply them in sequence.\n\nThe program should use the `golang-migrate/migrate` package for handling migrations and the `go-kratos/kratos` package for logging. It should be able to handle the case where there are no new migrations to apply (indicated by the \"no change\" error) and should log this event without failing. The program should also handle and log any errors that occur during the migration process.\n\nThe configuration for the database connection and the migration directory path should be provided through a `conf.Data` struct, which includes the database driver, source, and migration path.\n\nWrite a function `MigrateUp` that takes a `*conf.Data` and a `log.Logger` as arguments, connects to the MySQL database, and applies the migrations. The function should return an error if any step of the migration process fails, except for the \"no change\" case, which should be logged as a debug message indicating that the database schema is already up to date.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the struct keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named remove_tys."}, {"type": "class", "instruction": "Your code should define a class named Request."}, {"type": "file", "instruction": "Your code should be organized in a package named update_profile."}, {"type": "combination", "instruction": "In your code, the class Request should have these properties ['profile']."}, {"type": "combination", "instruction": "The function remove_tys should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_profile, which should contain these classes ['ConfigureViewItem', 'RemoveStatusLog', 'Credit']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_profile, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"9": [0, 1, 2, 7, 13], "10": [0, 1, 2, 6, 13], "11": [0, 1, 2, 7, 8, 13], "12": [0, 1, 2, 8, 13]}, "question_id": 32}
{"question": "Reimplement the following code to optimize its performance.\n```python\nfrom math import sqrt\n\ndef count_square_sum_triples(n: int) -> int:\n    '''\n    Calculate the number of square triples (a, b, c) where a^2 + b^2 = c^2 and 1 <= a, b, c <= n.\n\n    Args:\n    n (int): The upper limit for a, b, and c.\n\n    Returns:\n    int: The number of square triples within the given range.\n    Example:\n    assert count_square_sum_triples(5) == 1\n    '''\n\n    count = 0\n    for a in range(1, n+1):\n        for b in range(a, n+1):  # 注意这里b从a开始，避免重复计数\n            for c in range(b, n+1):  # 注意这里c从b开始，避免重复计数\n                if a*a + b*b == c*c:\n                    count += 1\n    return count\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the yield keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named execute_token."}, {"type": "class", "instruction": "Your code should define a class named SetRequestTys."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_token."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas']."}, {"type": "combination", "instruction": "In your code, the class SetRequestTys should have these methods ['manage_user', 'manage_customer']."}, {"type": "combination", "instruction": "The function execute_token should take ['form', 'msg'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_token, which should contain these classes ['Log', 'Cut', 'RemoveKmsBill']."}, {"type": "global", "instruction": "Your answer in total should not exceed 21 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 14], "11": [0, 1, 2, 3, 7, 14], "12": [0, 1, 2, 3, 6, 14], "13": [0, 1, 2, 3, 7, 9, 14]}, "question_id": 33}
{"question": "\n\nDesign a Go program that manages a local repository of notes using Git for version control. The program should provide functionality to initialize a new repository, add new notes, commit changes, and log any Git-related errors to a file. Each note is a text file stored in a directory that represents the repository's home directory.\n\nThe program should include the following features:\n\n1. Initialize a new Git repository in a specified directory.\n2. Add a new note to the repository.\n3. Commit all changes with a custom commit message.\n4. Handle Git-related errors by logging them to a `git-errors.log` file.\n\nThe `note.List` type represents a list of notes and has a method `HomeDir()` that returns the path to the repository's home directory.\n\nUse the given code snippet as a starting point to implement the program. Ensure that the program is modular and uses appropriate error handling. Provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the func keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure interface."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named set_dwa."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_kms."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings']."}, {"type": "file", "instruction": "Your code should use the function set_dwa from the library io."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the Kms class using ['info', 'form', 'cut'] for initialization."}, {"type": "combination", "instruction": "In your code, the class Kms should have these properties ['tys']."}, {"type": "combination", "instruction": "The function set_dwa should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_kms, which should contain these classes ['GenerateReportRecord', 'GetTys', 'Shipment']."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_kms, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "11": [0, 1, 2, 10], "12": [0, 1, 2, 8], "13": [0, 1, 2, 8], "14": [0, 1, 2, 7], "15": [0, 1, 2, 8, 9], "16": [0, 1, 2, 9]}, "question_id": 34}
{"question": "\n\nDesign a Kubernetes management tool that allows users to interact with a Kubernetes cluster to perform the following operations:\n\n1. Authenticate with the cluster by loading user credentials from a file or prompting the user for credentials if the file does not exist.\n2. Perform a rolling update on a set of pods managed by a specified replication controller, with a user-defined update period between pod updates.\n3. Stop a replication controller by setting the number of replicas to zero.\n4. Resize a replication controller to a specified number of replicas.\n5. Create a new replication controller with a specified number of replicas, running a specified image, and optionally create an associated service with a specified port.\n6. Delete a replication controller, ensuring that it has been stopped first (i.e., replicas set to zero).\n\nThe tool should be able to handle errors gracefully and provide informative messages to the user. It should also output the resulting state of replication controllers and services in YAML format after each operation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_info."}, {"type": "class", "instruction": "Your code should define a class named InventoryShipment."}, {"type": "file", "instruction": "Your code should not use the following libraries ['io', 'strconv', 'math']."}, {"type": "combination", "instruction": "You should define an interface named retrieve_info that includes these methods ['execute_transaction']."}, {"type": "combination", "instruction": "In your code, the class InventoryShipment should have these properties ['message']."}, {"type": "combination", "instruction": "In your code, the class InventoryShipment should have these methods ['execute_transaction']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 13], "10": [0, 1, 2, 3, 7, 13], "11": [0, 1, 2, 3, 8, 13], "12": [0, 1, 2, 3, 8, 13]}, "question_id": 35}
{"question": "\n\nDesign a Java program that extends the functionality of the `Funcionario` (Employee) class provided in the given code snippet. The program should include the following:\n\n1. A subclass named `Gerente` (Manager) that inherits from `Funcionario` and includes the following additional properties:\n   - A double field named `salario` (salary).\n   - A String field named `departamento` (department).\n\n2. The `Gerente` class should have a constructor that accepts the first name, last name, salary, and department of the manager.\n\n3. Implement getter and setter methods for the `salario` and `departamento` fields.\n\n4. Override the `toString` method in the `Gerente` class to return a string representation of the manager's details, including their name, surname, salary, and department.\n\n5. Write a `main` method that creates an instance of `Gerente`, sets its properties, and prints the object using the `toString` method.\n\nEnsure that your code follows Java best practices and includes appropriate documentation for each method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should use the for keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Your code should define an enumeration named Priority"}, {"type": "variable", "instruction": "Variable token, type should be String."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "variable", "instruction": "Variable token, the initial value should be view."}, {"type": "variable", "instruction": "Variable token, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named submit_transaction."}, {"type": "class", "instruction": "Your code should define a class named SetPunish."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "combination", "instruction": "In your code, the class SetPunish should have these methods ['display_report', 'execute_bill']."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "9": [0, 1, 2, 5], "10": [0, 1, 2, 5], "13": [0, 1, 2, 12], "15": [0, 1, 2, 12]}, "question_id": 36}
{"question": "\n\nWrite a Java program that finds the index of the column with the largest sum in a 2D array of integers. The program should prompt the user to input the dimensions of the 2D array and then the elements of the array. After calculating, the program should output the index of the column with the largest sum. If there are multiple columns with the same largest sum, the program should return the index of the first such column.\n\nThe program should include the following functionalities:\n- A method `takeInputIn2DArr()` that takes user input to fill the 2D array.\n- A method `columnWithLargestSum(int[][] arr)` that calculates and returns the index of the column with the largest sum.\n- A `main` method that calls the above methods and displays the index of the column with the largest sum.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the new keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_msg', 'get_record', 'analyze_transaction']."}, {"type": "interface", "instruction": "Your code should define an interface named insert_customer."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Account."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "combination", "instruction": "Your code should define a class named Account that implements the insert_customer interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 11], "10": [0, 1, 2, 6, 8, 11]}, "question_id": 37}
{"question": "Please write a Java program to manage school course information. Specific requirements are as follows:\n\n- There needs to be a Course class that includes four attributes: course code (code), course name (name), semester (semester), and credits (credits).\n- Provide a constructor for the Course class that can initialize these four attributes.\n- Provide a method `getCode()` to retrieve the course code.\n\nEnsure the code is self-contained and clear, including necessary package imports.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport org.junit.jupiter.api.Assertions;\npublic class SchoolManagement {\n    static class Course {\n        private String code;\n        private String name;\n        private int semester;\n        private int credits;\n        public Course(String code, String name, int semester, int credits) {\n        }\n        public String getCode() {\n            return code;\n        }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the extends keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, the initial value should be record."}, {"type": "variable", "instruction": "Variable order should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named update_log."}, {"type": "interface", "instruction": "Your code should define an interface named handle_customer."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named check_info."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.io']."}, {"type": "combination", "instruction": "You should define an interface named handle_customer that includes these methods ['remove_transaction']."}, {"type": "combination", "instruction": "The function update_log should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_info, which should contain these classes ['DataOrder', 'ProcessStatus']."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 18], "8": [0, 1, 2, 6, 18], "12": [0, 1, 2, 11, 18], "15": [0, 1, 2, 10, 18], "16": [0, 1, 2, 9, 18], "17": [0, 1, 2, 11, 13, 18]}, "question_id": 38}
{"question": "\n\nDesign a Java program for a pet shop application that allows users to log in or sign up. The application should have a simple user interface with two buttons: one for logging in and another for signing up. When the user attempts to log in, the application should check the credentials against a database. If the credentials are valid, the user is taken to a new screen with additional options (represented by the `Buttons` class). If the credentials are invalid, the application should display a toast message indicating the failure. For the purpose of this question, assume the existence of a `DatabaseHelper` class with a method `CheckLoginStatus(String username, String password)` that returns a boolean indicating the success of the login attempt.\n\nImplement the `Login` class, which extends `AppCompatActivity`, and includes the necessary imports, member variables, and methods. Also, provide a simple test case to verify the correctness of the login functionality.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['get_user', 'set_shipment']."}, {"type": "interface", "instruction": "Your code should define an interface named update_profile."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.math', 'java.nio']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang', 'java.math', 'java.text']."}], "instruction_dependence": {"3": [0, 2], "6": [0, 5]}, "question_id": 39}
{"question": "\n\nWrite a program called `PrintPattern` that prompts the user for a positive integer `n`, and prints a pattern of numbers from 1 to `n` as shown in the examples below. The program should use a `do-while` loop to print the numbers and should throw an `IllegalArgumentException` if the input is not a positive integer.\n\nThe pattern should be as follows:\n- For `n = 1`, the output is `1`\n- For `n = 2`, the output is `1 2`\n- For `n = 3`, the output is `1 2 3`\n- And so on...\n\nExample of the program execution:\n```\nEnter a positive integer: 5\n1 2 3 4 5\n```\n\nIf the user enters a non-positive integer, the program should print an error message and terminate:\n```\nEnter a positive integer: -3\nError: Input must be a positive integer.\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable event, should not be a global variable."}, {"type": "variable", "instruction": "Variable event, the initial value should be profile."}, {"type": "class", "instruction": "Your code should define a class named CustomerForm."}, {"type": "file", "instruction": "Your code should be organized in a package named check_user."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang', 'java.text', 'java.awt']."}, {"type": "combination", "instruction": "In your code, the class CustomerForm should have these methods ['delete_record']."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 3, 12], "6": [0, 3, 12], "11": [0, 7, 12]}, "question_id": 40}
{"question": "\n\nDesign a Java program that models a simple address book. The program should be able to store and retrieve personal information based on a person's name. Each person has an address associated with them. The address contains the street, city, state, and zip code. The program should provide the following functionalities:\n\n1. Add a new person along with their address.\n2. Retrieve a person's address by their name.\n3. Update the address for a given person.\n4. Remove a person from the address book.\n\nThe `Person` class has already been provided. You need to create an `Address` class and an `AddressBook` class to manage the collection of `Person` objects. Ensure that the `AddressBook` class handles cases where a person is not found.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the while keyword."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, type should be ArrayList."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be record."}, {"type": "function", "instruction": "Your code should include a function named retrieve_data."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FilterItem."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_msg."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_msg, which should contain these classes ['TransformStatusInfo', 'FilterCreditOrder']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"7": [0, 1, 6, 15], "8": [0, 1, 6, 15], "11": [0, 1, 10, 15], "14": [0, 1, 12, 13, 15]}, "question_id": 41}
{"question": "\n\nDesign a Python program that simulates a simple job dependency system where jobs can depend on other jobs. A job is represented by a function, and dependencies are specified using a decorator `@job`. The decorator should take an optional argument that specifies the name of the job it depends on and a `desc` argument that describes the job.\n\nThe program should include the following features:\n1. A decorator `@job` that can be used to decorate job functions. The decorator should store the dependencies and descriptions of the jobs.\n2. A function `run_job` that takes the name of a job and runs it along with all its dependencies in the correct order (i.e., dependencies first).\n3. A function `list_jobs` that prints out all the jobs with their descriptions and dependencies.\n\nAssume that job names are unique and that there are no circular dependencies.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure dict."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, the initial value should be notification."}, {"type": "variable", "instruction": "Variable product, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_product."}, {"type": "interface", "instruction": "Your code should define an interface named delete_product."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Profile."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'pytorch']."}, {"type": "combination", "instruction": "Your code should define a class named Profile that implements the delete_product interface."}, {"type": "combination", "instruction": "The function execute_product should take ['info', 'view'] as parameters."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "10": [0, 1, 9], "13": [0, 1, 9, 11], "14": [0, 1, 8]}, "question_id": 42}
{"question": "\n\nWrite a C++ program that defines a function `countFrequencies` which takes a vector of integers as input and returns a vector of pairs, where each pair contains a unique integer from the input vector and the number of times it appears in that vector. The output vector should be sorted by the integers in ascending order.\n\nThe function should be implemented using the standard library functions `std::sort`, `std::upper_bound`, and `std::distance` to count the frequencies of each unique integer.\n\nAdditionally, write a `main` function that demonstrates the use of `countFrequencies` by reading a vector of integers from the user, calling the function, and then printing the results in the format \"Element - Frequency\".\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_kms."}, {"type": "function", "instruction": "Your code should not use any functions from the ['remove_form', 'retrieve_form', 'submit_data']."}, {"type": "class", "instruction": "Your code should define a class named SubmitRecord."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'queue']."}, {"type": "file", "instruction": "Your code should use the function filter_kms from the library vector."}, {"type": "combination", "instruction": "You should initialize an object named order as an instance of the SubmitRecord class using ['inventory', 'form'] for initialization."}, {"type": "combination", "instruction": "In your code, the class SubmitRecord should have these properties ['event', 'record', 'report']."}, {"type": "combination", "instruction": "The function filter_kms should return a double as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9], "12": [0, 1, 2, 11], "13": [0, 1, 2, 9], "14": [0, 1, 2, 9], "15": [0, 1, 2, 7]}, "question_id": 43}
{"question": "\n\nDesign a Go program that manages a conference's speaker quota system. The system should be able to track the number of speaking slots allocated to each speaker and ensure that no speaker exceeds their assigned quota.\n\nThe `SpeakerQuotaType` struct provided above is used to represent a speaker's quota. The `ID` is a unique identifier for the speaker, `Name` is the speaker's name, `Time` is the timestamp when the quota was last updated, `CurrentCount` is the number of speaking slots the speaker has already used, and `Total` is the total number of slots allocated to the speaker.\n\nImplement the following functionalities:\n\n1. `NewSpeakerQuota(id, name string, total int) *SpeakerQuotaType`: This function creates a new `SpeakerQuotaType` with the given `id`, `name`, and `total` slots, setting `CurrentCount` to 0 and `Time` to the current time.\n\n2. `UseSlot(speakerQuota *SpeakerQuotaType) error`: This function is used when a speaker uses one of their allocated slots. It should increment the `CurrentCount` by 1 and update the `Time` to the current time. If the speaker has already used all their slots (`CurrentCount` equals `Total`), it should return an error indicating that the quota has been exceeded.\n\n3. `RemainingSlots(speakerQuota *SpeakerQuotaType) int`: This function returns the number of remaining slots for the speaker.\n\nWrite a Go program that includes the `SpeakerQuotaType` struct, the three functions described above, and test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the case keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should be a global variable."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named get_data."}, {"type": "class", "instruction": "Your code should define a class named UserItem."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named create_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['time']."}, {"type": "file", "instruction": "Your code should use the function update_user from the library math."}, {"type": "file", "instruction": "Your code should not use the following libraries ['strings', 'fmt', 'math']."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the UserItem class using ['info', 'bill'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named UserItem that implements the get_data interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_product, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 17, 18], "6": [0, 1, 2, 4, 17, 18], "9": [0, 1, 2, 8, 17, 18], "12": [0, 1, 2, 11, 17, 18], "14": [0, 1, 2, 8, 17, 18], "15": [0, 1, 2, 7, 8, 17, 18], "16": [0, 1, 2, 10, 17, 18]}, "question_id": 44}
{"question": "There is a dataset named 'locations.csv', the first two rows of the data are as follows:\n\n|   Unnamed: 0 |   listing_id |   latitude |   longitude |\n|-------------:|-------------:|-----------:|------------:|\n|           10 |  7.21121e+06 |    40.7145 |    -73.9425 |\n|        10000 |  7.15086e+06 |    40.7947 |    -73.9667 |\n\nQuestion:\nWhich listing_id in the csv file is the furthest north?\n\nYour answer needs to meet the following requirements:\n1. The data file is 'locations.csv', please refer strictly to the header of the data, and use python code to answer the question.\n2. Use 'pandas.read_csv' to read the data, assuming the data is in the same path as the code.\n3. Write the analysis code into a function named 'proc_data()', which does not require any input parameters and returns the listing_id of the furthest north location.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the is keyword."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named submit_request."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_message', 'add_inventory']."}, {"type": "interface", "instruction": "Your code should define an interface named remove_punish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['requests', 'tensorflow', 'seaborn']."}, {"type": "combination", "instruction": "The function submit_request should return a list as its result."}], "instruction_dependence": {"4": [0, 1, 2, 3], "6": [0, 1, 2, 5], "10": [0, 1, 2, 5]}, "question_id": 45}
{"question": "\n\nImplement a `Queue` using a linked list in Python. The queue should support the following operations:\n\n1. `enqueue(data)`: Add an element to the end of the queue.\n2. `dequeue()`: Remove the element from the front of the queue and return it. If the queue is empty, return `None`.\n3. `peek()`: Return the element at the front of the queue without removing it. If the queue is empty, return `None`.\n4. `is_empty()`: Return `True` if the queue is empty, otherwise `False`.\n5. `show()`: Print all elements in the queue from front to back.\n\nEach element in the queue should be a `QueueNode` object, which is defined in the `queue_node` module. The `QueueNode` class has the following methods:\n\n- `__init__(data)`: Initialize a new node with the given data.\n- `getData()`: Return the data stored in the node.\n- `getNext()`: Return the next node in the linked list.\n- `setNext(next_node)`: Set the next node in the linked list.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not use the del keyword."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, the initial value should be token."}, {"type": "function", "instruction": "Your code should not use any functions from the ['display_customer', 'add_form', 'retrieve_customer']."}, {"type": "interface", "instruction": "Your code should define an interface named process_customer."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named DeleteNotificationForm."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_data."}, {"type": "combination", "instruction": "Your code should define a class named DeleteNotificationForm that implements the process_customer interface."}, {"type": "combination", "instruction": "In your code, the class DeleteNotificationForm should have these methods ['update_event']."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 15], "10": [0, 1, 2, 3, 9, 15], "13": [0, 1, 2, 3, 9, 11, 15], "14": [0, 1, 2, 3, 11, 15]}, "question_id": 46}
{"question": " Task Management System\n\nYou are required to implement a simplified task management system for a hypothetical music player application. The system should be able to handle multiple tasks, each with a unique ID, a name, a progress indicator, and a flag that indicates whether the task blocks collection scans. The system should provide functionality to start a new task, update task progress, mark tasks as finished, and query the current progress of a task.\n\nThe task manager should be thread-safe, as it will be accessed from multiple threads within the music player application. It should emit signals when tasks are changed, and when collection watchers need to be paused or resumed based on the blocking status of tasks.\n\nImplement the `TaskManager` class with the following methods:\n\n- `StartTask(const QString &name)`: Starts a new task with the given name and returns its unique ID.\n- `GetTasks()`: Returns a list of all current tasks.\n- `SetTaskBlocksCollectionScans(const int id)`: Marks the task with the given ID as one that blocks collection scans.\n- `SetTaskProgress(const int id, const qint64 progress, const qint64 max)`: Sets the progress and maximum progress for the task with the given ID.\n- `IncreaseTaskProgress(const int id, const qint64 progress, const qint64 max)`: Increases the progress by a certain amount for the task with the given ID, optionally updating the maximum progress.\n- `SetTaskFinished(const int id)`: Marks the task with the given ID as finished and removes it from the task list.\n- `GetTaskProgress(int id)`: Returns the current progress of the task with the given ID.\n\nAdditionally, implement the following signals:\n\n- `TasksChanged()`: Emitted whenever the list of tasks changes.\n- `PauseCollectionWatchers()`: Emitted when a task that blocks collection scans is started or updated.\n- `ResumeCollectionWatchers()`: Emitted when there are no more tasks blocking collection scans.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the private keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "function", "instruction": "Your code should include a function named handle_view."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_product', 'process_shipment', 'sort_tys', 'analyze_dwa']."}, {"type": "interface", "instruction": "Your code should define an interface named add_item."}, {"type": "file", "instruction": "Your code should be organized in a package named set_order."}, {"type": "file", "instruction": "Your code should import the following libraries ['queue']."}, {"type": "file", "instruction": "Your code should use the function handle_view from the library queue."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 7], "11": [0, 1, 2, 3, 4, 10], "16": [0, 1, 2, 3, 4, 15]}, "question_id": 47}
{"question": "Implementing File Reading, Modifying, and Writing using Python's Asynchronous Programming\n\nYour task is to define an asynchronous function named read_modify_write. This function receives two parameters, the filename to be read file_name, and the new filename new_file_name, which will be written with the modified data. The implementation of the function should meet the following requirements:\n\nAsynchronously read data from the source file file_name. If necessary, you should use the asyncio.to_thread function to execute the file reading operation in a new thread to avoid blocking the event loop.\nProcess the read data, replacing all 'old_string' with 'new_string'.\nAsynchronously write the processed data to the target file new_file_name. Like file reading, you should also execute the file writing operation outside of the thread.\nEnsure that the file context manager is used correctly during file reading and writing operations to close the file correctly. Once again, avoid blocking operations in asynchronous functions.\nPlease write the code in a markdown ```python``` wrapper.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named submit_dwa."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named execute_request."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FormBill."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "Your code should define a class named FormBill that implements the execute_request interface."}, {"type": "combination", "instruction": "In your code, the class FormBill should have these properties ['form']."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "8": [0, 1, 7], "10": [0, 1, 9], "11": [0, 1, 7, 9], "12": [0, 1, 9]}, "question_id": 48}
{"question": "\nDesign a Java Swing application that allows users to manage actors in a movie database. The application should provide the following functionalities:\n\n1. Search for an actor by their ID and display their details.\n2. Update the first name, last name, and last update timestamp of an existing actor.\n3. Clean the input fields to allow for new data entry.\n4. Return to the main menu of the application.\n\nThe application should have a user-friendly interface with text fields for entering the actor's ID, first name, and last name, and buttons for each of the functionalities. The last update timestamp should be generated automatically and should not be editable by the user. The application should also display a table with the list of actors, which updates based on the search criteria or after an actor's details have been updated.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named retrieve_user."}, {"type": "interface", "instruction": "Your code should define an interface named create_credit."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named process_kms."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.time']."}, {"type": "combination", "instruction": "The function retrieve_user should take ['kms'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_kms, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"3": [0, 1, 2, 11], "6": [0, 1, 5, 11], "9": [0, 1, 4, 11], "10": [0, 1, 7, 11]}, "question_id": 49}
{"question": "\n\nWrite a Python program that uses Selenium to automate the process of verifying a button's clickability and the presence of a success message on a webpage. The program should follow these steps:\n\n1. Open a web browser using Selenium WebDriver.\n2. Navigate to the URL `http://suninjuly.github.io/wait2.html`.\n3. Wait for up to 5 seconds for the button with the ID `verify` to become clickable.\n4. Once the button is clickable, click on it.\n5. After clicking the button, find the element with the ID `verify_message`.\n6. Check if the text of the `verify_message` element contains the word \"successful\".\n7. If the word \"successful\" is present in the message, print \"Verification successful!\" to the console.\n8. If the word \"successful\" is not present, print \"Verification failed!\" to the console.\n9. Ensure the browser is closed after the verification is complete, regardless of the outcome.\n\nThe program should handle any exceptions that may occur during the process and ensure that the browser is closed properly in such cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "easy", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the except keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named delete_order."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "file", "instruction": "Your code should import the following libraries ['scikit-learn']."}, {"type": "file", "instruction": "Your code should use the function delete_order from the library tensorflow."}, {"type": "combination", "instruction": "The function delete_order should take ['credit', 'order'] as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "8": [0, 1, 7], "9": [0, 1, 5]}, "question_id": 50}
