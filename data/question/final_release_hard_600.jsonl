{"question": "Write a program called `TemperatureConverter` that converts temperatures between Fahrenheit and Celsius. The program should prompt the user to enter a temperature and the scale to convert from (either 'F' for Fahrenheit or 'C' for Celsius). It should then perform the conversion and print the result in the opposite scale. The formulas for conversion are as follows: - From Celsius to Fahrenheit: `F = C * 9/5 + 32` - From Fahrenheit to Celsius: `C = (F - 32) * 5/9`. The program should handle invalid input gracefully by displaying an appropriate error message and not performing any conversion if the input scale is not 'F' or 'C'.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named temperature."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable temperature, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named convert_temperature."}, {"type": "function", "instruction": "Your code should not use any functions from the math library."}, {"type": "interface", "instruction": "Your code should define an interface named TemperatureScale."}, {"type": "file", "instruction": "Your code should be organized in a package named temperature_converter."}, {"type": "file", "instruction": "Your code should import the following libraries sys."}, {"type": "file", "instruction": "Your code should use the function print from the library sys."}, {"type": "combination", "instruction": "The function convert_temperature should take temperature, scale as parameters."}], "instruction_dependence": {"7": [0, 1, 6], "8": [0, 1, 6], "14": [0, 1, 13], "15": [0, 1, 9]}, "question_id": 1}
{"question": "Design a Java class named `InventoryManager` that manages a collection of `Note` objects. The `InventoryManager` should provide the following functionalities:\n\n1. Add a new `Note` to the inventory.\n2. Remove a `Note` from the inventory by its name.\n3. Update the price and count of a `Note` in the inventory.\n4. Calculate the total value of the inventory.\n5. List all `Note` objects in the inventory.\n\nThe `InventoryManager` should handle cases where a `Note` with the same name already exists in the inventory when adding a new `Note`. In such cases, the count of the existing `Note` should be updated instead of adding a new entry.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Your code should define an enumeration named NoteCategory."}, {"type": "variable", "instruction": "Variable inventory, the initial value should be new HashMap<>()."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named InventoryOperations."}, {"type": "class", "instruction": "Your code should define a class named Note."}, {"type": "file", "instruction": "Your code should be organized in a package named inventory."}, {"type": "combination", "instruction": "Your code should define a class named InventoryManager that implements the InventoryOperations interface."}, {"type": "combination", "instruction": "In your code, the class InventoryManager should have these methods addNote, removeNote, updateNote, calculateTotalValue, listNotes."}], "instruction_dependence": {"6": [0, 1, 4], "7": [0, 1, 4], "11": [0, 1, 8, 9], "12": [0, 1, 9]}, "question_id": 2}
{"question": "Create a simple text-based quiz game using Python. The game should present a series of questions to the user, accept their answers, and keep track of their score. The questions and their correct answers are provided in a separate data source named `quiz_data`, which is a list of dictionaries where each dictionary contains a 'question' and its 'correct_answer'. The game should have the following features: - Display each question to the user and prompt them for an answer. - Check the user's answer against the correct answer. - Provide feedback to the user indicating whether their answer was correct or incorrect. - Display the correct answer if the user's answer was incorrect. - Keep track of the number of correct answers and display the user's score after each question. - Continue to the next question until there are no more questions. - Display the user's final score at the end of the quiz. The game should be implemented using two classes: `Question` and `Quiz`. The `Question` class should store the text of a question and its correct answer. The `Quiz` class should manage the quiz by loading questions, prompting the user, checking answers, and keeping score.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `score`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `QuizStatus`."}, {"type": "variable", "instruction": "Variable `score`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `check_answer`."}, {"type": "function", "instruction": "Your code should not use any functions from the `os` module."}, {"type": "interface", "instruction": "Your code should define an interface named `QuizInterface`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `Quiz`."}, {"type": "file", "instruction": "Your code should be organized in a package named `quiz_game`."}, {"type": "combination", "instruction": "The function `check_answer` should take `user_answer` and `correct_answer` as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named `quiz_game`, which should contain these functions `start_quiz`, `check_answer`, and `display_score`."}], "instruction_dependence": {"7": [0, 1, 2, 5], "11": [0, 1, 2, 10], "14": [0, 1, 2, 8], "15": [0, 1, 2, 13]}, "question_id": 3}
{"question": "It is known that some 2D points are generated by y = a * exp(-b * x + c x^2) + d. Given these points, please fit a, b, c, d. Define a python function solve(arr) to solve the problem. Input a [N, 2] numpy array, return a numpy array of length 4 representing [a, b, c, d].", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named coefficients."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "interface", "instruction": "Your code should define an interface named FittingInterface."}, {"type": "class", "instruction": "Your code should define a class named FittingModel."}, {"type": "file", "instruction": "Your code should be organized in a package named fitting_package."}, {"type": "combination", "instruction": "You should initialize an object named model as an instance of the FittingModel class using coefficients for initialization."}, {"type": "combination", "instruction": "In your code, the class FittingModel should have these properties a, b, c, d."}, {"type": "combination", "instruction": "The function solve should take arr as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named fitting_package, which should contain these classes FittingModel, FittingInterface."}], "instruction_dependence": {"12": [0, 1, 2, 10], "13": [0, 1, 2, 10], "14": [0, 1, 2, 8], "15": [0, 1, 2, 10, 11]}, "question_id": 4}
{"question": "Design a RESTful API for a simple online voting system using the Gin web framework in Go. The system should allow users to submit votes for different options, retrieve the current leaderboard of options with their vote counts, and view a user's voting history. The API should include the following endpoints:\n\n1. `POST /submit` - Submit a vote. The request body should include the user's identifier and the option they are voting for. The system should record the vote and update the option's vote count.\n\n2. `GET /leaderboard` - Retrieve the current leaderboard. This endpoint should return a list of options sorted by their vote counts in descending order.\n\n3. `GET /history/:user` - Retrieve the voting history of a specific user. The `:user` parameter in the URL should be replaced with the user's identifier. The response should include a list of all the options the user has voted for.\n\n4. `POST /vote` - This endpoint is similar to `/submit` but is placed under a different route group that checks the user agent of the request. If the user agent is not from an allowed list, the request should be rejected.\n\nImplement the necessary handlers for these endpoints and include middleware to check the user agent for the `/vote` endpoint. Ensure that all routes are registered correctly in the `InitRoute` function.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named allowedUserAgents."}, {"type": "variable", "instruction": "Variable allowedUserAgents, should be a global variable."}, {"type": "variable", "instruction": "Variable allowedUserAgents, the initial value should be [\"Mozilla/5.0\", \"PostmanRuntime/7.26.8\"]."}, {"type": "variable", "instruction": "Variable allowedUserAgents should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named VoteHandler."}, {"type": "class", "instruction": "Your code should define a class named VoteService."}, {"type": "file", "instruction": "Your code should be organized in a package named voting."}, {"type": "file", "instruction": "Your code should import the following libraries [\"github.com/gin-gonic/gin\", \"net/http\"]."}, {"type": "combination", "instruction": "You should initialize an object named voteService as an instance of the VoteService class using [] for initialization."}, {"type": "combination", "instruction": "You should define an interface named VoteHandler that includes these methods [\"SubmitVote\", \"GetLeaderboard\", \"GetVotingHistory\"]."}, {"type": "combination", "instruction": "Your code should be organized in a package named voting, which should contain these classes [\"VoteService\", \"VoteHandler\"]."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "12": [0, 1, 9], "13": [0, 1, 8], "14": [0, 1, 9, 10]}, "question_id": 5}
{"question": "Please write a Java method to remove a student with a specified ID from a list that stores student information. If the student is found and successfully deleted, the method should return \"Deletion successful\"; if the student with the specified ID is not found in the list, it should return \"Student not found\". Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class StudentManager {\n    private List<Student> studentList = new ArrayList<>();\n    public StudentManager() {\n    }\n    public String deleteStudent(int studentId) {\n        return \"\";\n    }\n    static class Student {\n        private int id;\n        private String name;\n        public Student(int id, String name) {\n        }\n        public int getId() {\n            return 0;\n        }\n        public String getName() {\n            return \"\";\n        }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the 'final' keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'studentId'."}, {"type": "variable", "instruction": "Variable 'studentId', should not be a global variable."}, {"type": "variable", "instruction": "Variable 'studentId', should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'deleteStudent'."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the 'System.out.println'."}, {"type": "class", "instruction": "Your code should define a class named 'StudentManager'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.example.studentmanagement'."}, {"type": "file", "instruction": "Your code should import the following libraries 'java.util.ArrayList, java.util.List'."}, {"type": "file", "instruction": "Your code should use the function 'removeIf' from the library 'java.util.List'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'com.example.studentmanagement', which should contain these classes 'StudentManager, Student'."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6, 17], "8": [0, 1, 2, 3, 4, 6, 17], "10": [0, 1, 2, 3, 4, 9, 17], "15": [0, 1, 2, 3, 4, 14, 17], "16": [0, 1, 2, 3, 4, 12, 13, 17]}, "question_id": 6}
{"question": "Please write a complete Python function `solve(smiles)` that labels each atom in the molecule with an Atom Map, with the value being the atom index +1, and then convert the labeled molecule back to SMILES.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "class", "instruction": "Your code should define a class named MoleculeProcessor."}, {"type": "file", "instruction": "Your code should be organized in a package named chemistry_tools."}, {"type": "file", "instruction": "Your code should import the following libraries ['rdkit', 're']."}, {"type": "combination", "instruction": "You should initialize an object named molecule as an instance of the MoleculeProcessor class using ['smiles'] for initialization."}, {"type": "combination", "instruction": "The function solve should return a string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named chemistry_tools, which should contain these classes ['MoleculeProcessor', 'AtomMapper']."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"8": [0, 1, 5, 11], "9": [0, 1, 4, 11], "10": [0, 1, 5, 6, 11]}, "question_id": 7}
{"question": "Create a text-based command-line interface (CLI) help system for a hypothetical text editor application. The help system should provide general help instructions for file and editor commands, as well as detailed help for specific commands when requested. The help instructions should include ANSI escape codes to format the output with colors for better readability. The CLI help system should be implemented as a Python class named `EditorHelp`. The class should have the following methods: `general_help()`: This method should return a string containing the general help instructions for file and editor commands. The instructions should be color-coded and formatted as shown in the given code snippet. `detailed_help(command)`: This method should take a string argument `command` and return a string containing detailed help instructions for the specified command. If the command does not exist or there is no detailed help available for it, the method should return an error message indicating that the command is invalid or lacks detailed information. The commands for which detailed help should be provided are: `load`, `replace`, `rspaces`, `save`, and `lscript`.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameter."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `command`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `command`, type should be string."}, {"type": "function", "instruction": "Your code should not use any functions from the `os` module."}, {"type": "class", "instruction": "Your code should define a class named `EditorHelp`."}, {"type": "combination", "instruction": "In your code, the class `EditorHelp` should have these methods `general_help`, `detailed_help`."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "10": [0, 1, 2, 9]}, "question_id": 8}
{"question": "Design a simple UDP echo server that listens for messages from clients and sends back the same message to the client. The server should be able to handle both Windows and Unix-based systems as shown in the given code snippet. The server should be able to receive a message from a client, print the received message to the console, and then send the same message back to the client. The server should also handle any potential errors during the socket operations and print appropriate error messages. The server should implement the following functionalities: 1. Initialize the UDP socket. 2. Bind the socket to a specified local port. 3. Receive messages from clients. 4. Echo the received messages back to the clients. 5. Close the socket upon termination.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named server_socket."}, {"type": "variable", "instruction": "Variable server_socket, type should be socket."}, {"type": "variable", "instruction": "Variable server_socket, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named handle_client."}, {"type": "interface", "instruction": "Your code should define an interface named SocketHandler."}, {"type": "class", "instruction": "Your code should define a class named UDPServer."}, {"type": "combination", "instruction": "Your code should define a class named UDPServer that implements the SocketHandler interface."}, {"type": "combination", "instruction": "In your code, the class UDPServer should have these properties ['port', 'socket']."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 4, 12], "6": [0, 4, 12], "10": [0, 8, 9, 12], "11": [0, 9, 12]}, "question_id": 9}
{"question": "Please write a Java program that implements a method which takes an integer array as input and returns a new array containing all the even numbers from the input array. Ensure that your code is self-contained and includes all necessary import statements. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\npublic class EvenNumbersFilter {\n    public static int[] filterEvenNumbers(int[] numbers) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named filterEvenNumbers."}, {"type": "function", "instruction": "Your code should not use any functions from the ArrayList class."}, {"type": "interface", "instruction": "Your code should define an interface named NumberFilter."}, {"type": "class", "instruction": "Your code should define a class named EvenNumbersFilter."}, {"type": "combination", "instruction": "You should initialize an object named filter as an instance of the EvenNumbersFilter class using no parameters for initialization."}, {"type": "combination", "instruction": "In your code, the class EvenNumbersFilter should have these properties numbers."}, {"type": "combination", "instruction": "The function filterEvenNumbers should return a int[] as its result."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"10": [0, 1, 2, 3, 4, 9, 13], "11": [0, 1, 2, 3, 4, 9, 13], "12": [0, 1, 2, 3, 4, 6, 13]}, "question_id": 10}
{"question": "Design a Java program that demonstrates the use of the `final` keyword in different contexts. The program should include the following:\n\n1. A `final` class that cannot be inherited.\n2. A `final` method that cannot be overridden by subclasses.\n3. A `final` variable that cannot be reassigned after its initial assignment.\n\nAdditionally, the program should include a main class with a `main` method that creates instances of the classes and attempts to perform operations that are not allowed by the `final` keyword, such as extending the final class, overriding the final method, and reassigning the final variable. The program should catch these attempts and print appropriate error messages.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the `static` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `ArrayList`."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `errorMessage`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named `printErrorMessage`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `ErrorHandler`."}, {"type": "class", "instruction": "Your code should define a class named `FinalDemo`."}, {"type": "file", "instruction": "Your code should be organized in a package named `finalKeywordDemo`."}, {"type": "combination", "instruction": "You should initialize an object named `demoInstance` as an instance of the `FinalDemo` class using `String message` for initialization."}, {"type": "combination", "instruction": "The function `printErrorMessage` should take `String message` as parameters."}, {"type": "combination", "instruction": "The function `printErrorMessage` should return a `void` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `finalKeywordDemo`, which should contain these classes `FinalDemo`, `ErrorHandler`."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 9], "14": [0, 1, 2, 3, 12], "15": [0, 1, 2, 3, 9], "16": [0, 1, 2, 3, 9], "17": [0, 1, 2, 3, 12, 13]}, "question_id": 11}
{"question": "Please implement a thread-safe priority queue class `ThreadSafePriorityQueue` in C++. This class should be defined as a template class and support template parameter overload so that users can provide their own comparison functions. The thread-safe priority queue class is required to provide the following methods:\n1. `void push(T item)`: Adds an element to the priority queue.\n2. `T wait_and_pop()`: Removes and returns the element with the highest priority from the queue. If the queue is empty, this method will block until an element is available.\n\nPlease make modifications according to the test code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "variable", "instruction": "Your code should define a variable named queueMutex."}, {"type": "variable", "instruction": "Your code should define an enumeration named PriorityLevel."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable queueMutex, the initial value should be nullptr."}, {"type": "function", "instruction": "Your code should include a function named checkQueueStatus."}, {"type": "interface", "instruction": "Your code should define an interface named QueueInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries <mutex>, <queue>, <condition_variable>."}, {"type": "file", "instruction": "Your code should not use the following libraries <atomic>."}, {"type": "combination", "instruction": "You should define an interface named QueueInterface that includes these methods push, wait_and_pop."}, {"type": "global", "instruction": "Your function should not exceed 30 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 14], "7": [0, 1, 2, 4, 14], "10": [0, 1, 2, 9, 14], "13": [0, 1, 2, 9, 14]}, "question_id": 12}
{"question": "In a software system designed to interact with a wiki API, there is a need to load and verify the contents of a table from a JSON file that represents wiki data. The system should be able to mock HTTP requests to the wiki API for testing purposes, read the JSON data from a file, and compare the loaded data with a predefined ground truth table to ensure correctness. Your task is to implement a function `loadWikiTable` that takes the name of the table and an authentication token as parameters and returns a `WikiTable` object representing the table data. The `WikiTable` is a vector of unordered maps, where each map represents a row in the table with key-value pairs corresponding to the column names and their respective values. Additionally, you need to write a unit test using the provided testing framework to verify that the `loadWikiTable` function works correctly. The unit test should mock the HTTP request to the wiki API, read the expected JSON data from a file, and compare the loaded `WikiTable` with the predefined ground truth `WikiTable` (`GT_WIKI_TABLE`).", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "variable", "instruction": "Your code should define a variable named 'authToken'."}, {"type": "variable", "instruction": "Variable 'authToken', the initial value should be 'testToken123'."}, {"type": "function", "instruction": "Your code should include a function named 'loadWikiTable'."}, {"type": "interface", "instruction": "Your code should define an interface named 'IWikiTableLoader'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'WikiTableLoader'."}, {"type": "combination", "instruction": "You should initialize an object named 'loader' as an instance of the 'WikiTableLoader' class using 'authToken' for initialization."}, {"type": "combination", "instruction": "In your code, the class 'WikiTableLoader' should have these properties 'tableName', 'authToken'."}, {"type": "combination", "instruction": "The function 'loadWikiTable' should return a 'WikiTable' as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 4, 5, 14], "9": [0, 1, 2, 3, 4, 8, 14], "11": [0, 1, 2, 3, 4, 10, 14], "12": [0, 1, 2, 3, 4, 10, 14], "13": [0, 1, 2, 3, 4, 7, 14]}, "question_id": 13}
{"question": "Write a program that continuously reads integers from the standard input and for each non-zero integer `n`, calculates the sum of all integers from 1 to `n` (inclusive) using the formula T(n) = n * (n + 1) / 2. The program should output the result for each input number on a new line and terminate when a zero is entered. Optimize the code to calculate the triangular number without using a loop.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `input_num`."}, {"type": "variable", "instruction": "Variable `input_num`, type should be `int`."}, {"type": "function", "instruction": "Your code should not use any functions from the `math` library."}, {"type": "interface", "instruction": "Your code should define an interface named `TriangularNumberCalculator`."}, {"type": "interface", "instruction": "The interface names in your code should follow the `PascalCase` naming convention."}, {"type": "class", "instruction": "Your code should define a class named `TriangularNumber`."}, {"type": "class", "instruction": "The class names in your code should follow the `PascalCase` naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries `numpy`."}, {"type": "combination", "instruction": "You should define an interface named `TriangularNumberCalculator` that includes these methods `calculate`."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7], "10": [0, 1, 9], "12": [0, 1, 7]}, "question_id": 14}
{"question": "Design a Java program that simulates a simple payment processing system. The system should be able to handle the creation and retrieval of payment records. Each payment record is represented by the `PaymentDTO` class, which includes the payment number (`pno`), member number (`mno`), price (`price`), and payment date (`pdate`). Your task is to implement the `PaymentService` class with the following functionalities: 1. `addPayment(PaymentDTO payment)`: Adds a new payment record to the system. 2. `getPaymentByPno(int pno)`: Retrieves a payment record by its payment number. 3. `getAllPayments()`: Retrieves a list of all payment records in the system. For simplicity, you can store the payment records in-memory using a suitable data structure (e.g., a `List` or `Map`). Assume that the payment number (`pno`) is unique for each payment. Additionally, write a main method that demonstrates the functionality of the `PaymentService` by adding a few payment records and then retrieving and displaying them.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named paymentRecords."}, {"type": "variable", "instruction": "Variable paymentRecords, the initial value should be an empty ArrayList."}, {"type": "variable", "instruction": "Variable paymentRecords should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the Collections class."}, {"type": "interface", "instruction": "Your code should define an interface named PaymentServiceInterface."}, {"type": "class", "instruction": "Your code should define a class named PaymentService."}, {"type": "file", "instruction": "Your code should be organized in a package named payment.system."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.ArrayList, java.util.List."}, {"type": "file", "instruction": "Your code should use the function add from the library java.util.List."}, {"type": "combination", "instruction": "In your code, the class PaymentDTO should have these properties pno, mno, price, pdate."}, {"type": "combination", "instruction": "Your code should be organized in a package named payment.system, which should contain these functions addPayment, getPaymentByPno, getAllPayments."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"5": [0, 4, 15], "6": [0, 4, 15], "12": [0, 11, 15], "13": [0, 9, 15], "14": [0, 10, 15]}, "question_id": 15}
{"question": "Write a Python function `calculate_heat_index` that calculates the heat index given the temperature and dewpoint temperature in Celsius. The heat index is a measure of how hot it feels when relative humidity is factored in with the actual air temperature. The function should use the provided code snippet as a basis for the calculation, which includes the use of the Lans Rothfusz formula for computing the heat index in Fahrenheit and then converting it to Celsius. The function should handle cases where the temperature is below 26.5°C or the dewpoint temperature is higher than the actual temperature by returning `NaN` (Not a Number) to indicate invalid input for heat index calculation. The function should have the following signature:\n\n```python\ndef calculate_heat_index(temperature: float, dewpoint_temperature: float) -> float:\n    \"\"\"\n    Calculate the heat index given the temperature and dewpoint temperature in Celsius.\n    \n    Parameters:\n    - temperature (float): The air temperature in degrees Celsius.\n    - dewpoint_temperature (float): The dewpoint temperature in degrees Celsius.\n    \n    Returns:\n    - float: The heat index in degrees Celsius, or NaN if the input is invalid.\n    \"\"\"\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'list'."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'heat_index'."}, {"type": "variable", "instruction": "Variable 'heat_index', type should be 'float'."}, {"type": "variable", "instruction": "Variable 'heat_index' should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named 'HeatIndexCalculator'."}, {"type": "interface", "instruction": "The interface names in your code should follow the 'PascalCase' naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'HeatIndex'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'weather_utils'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'weather_utils', which should contain these classes 'HeatIndex'."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "10": [0, 1, 2, 9], "13": [0, 1, 2, 11, 12]}, "question_id": 16}
{"question": "Design a C++ class `AIS_FixRelation` that inherits from the `AIS_Relation` class. The `AIS_FixRelation` class should represent a fixed geometric relationship between two entities in a CAD system. The relationship should ensure that the two entities maintain a constant distance and orientation relative to each other. The `AIS_FixRelation` class should have the following functionalities: 1. A constructor that takes two entity identifiers and establishes a fixed relationship between them. 2. A method `MaintainRelation()` that ensures the relationship is maintained even if one of the entities is transformed. 3. A method `GetEntities()` that returns the identifiers of the two entities involved in the relation. 4. A method `BreakRelation()` that removes the fixed relationship between the two entities. Additionally, provide a simple test case to demonstrate the usage of the `AIS_FixRelation` class.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the std::vector."}, {"type": "interface", "instruction": "Your code should define an interface named IRelation."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named AIS_FixRelation."}, {"type": "file", "instruction": "Your code should be organized in a package named CADSystem."}, {"type": "file", "instruction": "Your code should import the following libraries iostream, string."}, {"type": "file", "instruction": "Your code should use the function cout from the library iostream."}, {"type": "combination", "instruction": "You should initialize an object named fixRelation as an instance of the AIS_FixRelation class using entity1, entity2 for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named CADSystem, which should contain these functions MaintainRelation, GetEntities, BreakRelation."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 5, 13], "10": [0, 1, 9, 13], "11": [0, 1, 7, 13], "12": [0, 1, 8, 13]}, "question_id": 17}
{"question": "Write a Go program that retrieves the first non-loopback IPv4 address and its corresponding MAC address from the available network interfaces on the system. The program should ignore any downed interfaces or loopback interfaces. If no suitable interface is found, the program should return `nil` for both the IP and MAC addresses. The program should consist of two functions: 1. `GetIp`: This function should return the first non-loopback IPv4 address and its corresponding MAC address from the available network interfaces. 2. `getIpFromAddr`: This helper function should extract the IPv4 address from a given `net.Addr` object. The program should handle any errors that occur during the retrieval of interfaces and addresses by returning `nil` values. Provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `interfaceList`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `InterfaceStatus`."}, {"type": "variable", "instruction": "Variable `interfaceList`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `GetIp`."}, {"type": "class", "instruction": "Your code should define a class named `NetworkInterface`."}, {"type": "file", "instruction": "Your code should be organized in a package named `network`."}, {"type": "file", "instruction": "Your code should import the following libraries `net`, `errors`."}, {"type": "combination", "instruction": "In your code, the class `NetworkInterface` should have these methods `GetIP`, `GetMAC`."}, {"type": "combination", "instruction": "The function `GetIp` should return a `(string, string)` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `network`, which should contain these classes `NetworkInterface`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `network`, which should contain these functions `GetIp`, `getIpFromAddr`."}, {"type": "global", "instruction": "Your function `GetIp` should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 5, 16, 17], "12": [0, 1, 9, 16, 17], "13": [0, 1, 8, 16, 17], "14": [0, 1, 9, 10, 16, 17], "15": [0, 1, 10, 16, 17]}, "question_id": 18}
{"question": "Create a Java class that simulates a simple graphical user interface (GUI) for a fictional 'Potion Mixer' machine in a game. The GUI should display the current power level of the machine, the progress of the potion mixing process, and the owner of the machine. The GUI should also allow the user to interact with the machine by starting or stopping the mixing process. The machine has the following properties: a maximum power capacity (`maxPower`), the current power level (`currentPower`), a mixing process that takes a certain amount of time to complete (`mixingTime`), the current progress of the mixing process (`currentMixingTime`), and the name of the owner of the machine (`ownerName`). The GUI should visually represent the power level and mixing progress as vertical bars that fill up as the values increase. The power level bar should be red, and the mixing progress bar should be green. The GUI should also display the owner's name and have a start/stop button to control the mixing process.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'ArrayList'."}, {"type": "variable", "instruction": "Your code should define a variable named 'ownerName'."}, {"type": "variable", "instruction": "Variable 'currentPower', the initial value should be '0'."}, {"type": "function", "instruction": "Your code should include a function named 'startMixing'."}, {"type": "class", "instruction": "Your code should define a class named 'PotionMixerGUI'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.game.potionmixer'."}, {"type": "combination", "instruction": "You should initialize an object named 'mixer' as an instance of the 'PotionMixerGUI' class using 'maxPower, currentPower, mixingTime, currentMixingTime, ownerName' for initialization."}, {"type": "combination", "instruction": "In your code, the class 'PotionMixerGUI' should have these methods 'startMixing, stopMixing, updatePowerLevel, updateMixingProgress'."}, {"type": "combination", "instruction": "The function 'startMixing' should take 'mixingTime' as a parameter."}, {"type": "combination", "instruction": "The function 'startMixing' should return a 'boolean' as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'com.game.potionmixer', which should contain these functions 'startMixing, stopMixing, updatePowerLevel, updateMixingProgress'."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 6], "9": [0, 1, 6], "10": [0, 1, 5], "11": [0, 1, 5], "12": [0, 1, 7]}, "question_id": 19}
{"question": "Implement an object pool `ObjectPool` with C++ to avoid a large number of repeated object allocations/releases. It provides the following features:\n1. Constructor: `ObjectPool(size_t max_idle_object_num = 0, size_t max_total_object_num = 0)`\n    a. By default, there can be an infinite number of objects that can be requested, and the pool can always store an infinite number of objects;\n    b. =0 is equivalent to no upper limit;\n2. It supports passing in the custom object constructor;\n2. `std::shared_ptr<T> get()`: It supports taking out an element from the objectpool, if it doesn't exist in the buffer pool, it will call the default constructor or pass in the constructor to construct the object\n3. `void warmup(size_t num)`: It supports using num to warmup the objectpool to avoid start-up latency jitter.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named poolSize."}, {"type": "variable", "instruction": "Your code should define an enumeration named PoolState."}, {"type": "variable", "instruction": "Variable poolSize, should be a global variable."}, {"type": "variable", "instruction": "Variable poolSize, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named ObjectPool."}, {"type": "file", "instruction": "Your code should import the following libraries <memory>, <vector>, <functional>."}, {"type": "file", "instruction": "Your code should use the function make_shared from the library memory."}, {"type": "combination", "instruction": "In your code, the class ObjectPool should have these methods get, warmup."}], "instruction_dependence": {"8": [0, 1, 6], "9": [0, 1, 6], "12": [0, 1, 11], "13": [0, 1, 10]}, "question_id": 20}
{"question": "Create a Python program that processes motion capture data from `.trc` files and categorizes them into different groups based on their file names. The program should define a class `MotionDataProcessor` with methods to load data, detect reference points, and save categorized results into CSV files. The program should also include a method to perform dynamic programming (DP) analysis between two sets of data. The `MotionDataProcessor` class should have the following methods: - `__init__(self, data_dir, super_dir)`: Initialize the processor with the directory containing `.trc` files and the directory to save output. - `load_data(self, file_range, category)`: Load data from `.trc` files within a specified range and assign a category to them. - `detect_reference(self, output_filename, verbose=False, verbose_nan=False)`: Detect reference points in the loaded data and save the results to a CSV file with the given name. - `perform_dp_analysis(self, input_filename, reference_filename)`: Perform dynamic programming analysis between the input data and the reference data, both specified by their filenames. The program should also include a demonstration of how to use the `MotionDataProcessor` class with test cases.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data_processor."}, {"type": "variable", "instruction": "Variable data_processor, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named categorize_data."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the os library."}, {"type": "interface", "instruction": "Your code should define an interface named DataProcessorInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named MotionDataProcessor."}, {"type": "file", "instruction": "Your code should not use the following libraries pandas."}, {"type": "combination", "instruction": "In your code, the class MotionDataProcessor should have these properties data_dir, super_dir, file_range, category."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "11": [0, 1, 10], "14": [0, 1, 12]}, "question_id": 21}
{"question": "请编写一个Java方法，用于在简单的图书管理系统中添加新书信息。该方法应接收书名、作者、ISBN号和出版年份作为参数，并将这些信息保存到系统中。确保代码处理添加书籍的基本逻辑，并返回一条消息，指示书籍已成功添加。", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the return keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bookInfo."}, {"type": "variable", "instruction": "Your code should define an enumeration named BookStatus."}, {"type": "variable", "instruction": "Variable bookInfo, type should be String."}, {"type": "variable", "instruction": "Variable bookInfo should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named addBook."}, {"type": "function", "instruction": "Your code should not use any functions from the java.util.Collections."}, {"type": "interface", "instruction": "Your code should define an interface named BookManagement."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Book."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.HashMap."}, {"type": "file", "instruction": "Your code should use the function put from the library java.util.HashMap."}, {"type": "combination", "instruction": "In your code, the class Book should have these properties title, author, isbn, publicationYear."}, {"type": "combination", "instruction": "In your code, the class Book should have these methods getTitle, getAuthor, getIsbn, getPublicationYear."}, {"type": "combination", "instruction": "The function addBook should take title, author, isbn, publicationYear as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 18], "7": [0, 1, 2, 4, 18], "11": [0, 1, 2, 10, 18], "14": [0, 1, 2, 13, 18], "15": [0, 1, 2, 12, 18], "16": [0, 1, 2, 12, 18], "17": [0, 1, 2, 8, 18]}, "question_id": 22}
{"question": "Write a Python program that identifies the top N highest values in a dictionary and returns them along with their corresponding keys. The dictionary contains items as keys and their prices as values. The program should prompt the user to input the number of top values they want to retrieve (N). The output should be a list of tuples, each containing the key and the value, sorted in descending order by the value.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the sorted keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named top_items."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named get_top_items."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 9], "8": [0, 1, 2, 7, 9]}, "question_id": 23}
{"question": "Design a Java class `CommonResponse` that encapsulates the structure of a typical API response. The response should include a status code, a message, a success flag, and an optional data object. The class should provide static factory methods to create instances of `CommonResponse` for different scenarios such as success, error, custom error, and exception. Additionally, the class should use an enum `ResponseEnum` to define standard response codes and messages. The `ResponseEnum` should have at least the following constants: `SUCCESS`, `FAILED`, and `TICKET_INVALID`, each with appropriate status code, message, and success flag. Implement the `CommonResponse` class with the following requirements: - Provide constructors for different use cases: default constructor, constructor with `ResponseEnum`, constructor with data, and constructor with `ResponseEnum` and data. - Provide static methods to create `CommonResponse` instances for success (`ok`), error (`error`), error with a map of details (`errorMap`), error with a custom message (`errorMsg`), token error (`errorTicket`), custom error (`errorCustom`), and exception (`exception`). - Include getter and setter methods for all properties. - Ensure that the class is well-documented with Javadoc comments.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure LinkedList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named responseData."}, {"type": "variable", "instruction": "Variable responseData, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named createResponse."}, {"type": "interface", "instruction": "Your code should define an interface named ResponseHandler."}, {"type": "class", "instruction": "Your code should define a class named CommonResponse."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "You should initialize an object named successResponse as an instance of the CommonResponse class using statusCode, message, and successFlag for initialization."}, {"type": "combination", "instruction": "You should define an interface named ResponseHandler that includes these methods handleSuccess, handleError, and handleException."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 6, 14], "11": [0, 1, 10, 14], "12": [0, 1, 10, 14], "13": [0, 1, 9, 14]}, "question_id": 24}
{"question": "Design a middleware for an HTTP server in Go that logs the details of incoming requests and the time taken to process them. The middleware should log the HTTP method, the request URI, the name of the handler, and the duration it took to serve the request. The log should be in the format: `METHOD URI HANDLER_NAME DURATION`. Implement the `LoggingMiddleware` function that wraps an `http.Handler` with logging functionality. The function should take two parameters: the handler to wrap and the name of the handler. The middleware should use the standard `log` package to output the log to the console. Additionally, write a simple HTTP handler function named `HelloHandler` that responds with 'Hello, World!' to demonstrate the use of the `LoggingMiddleware`. Finally, provide test cases that start an HTTP server, use the `LoggingMiddleware` with the `HelloHandler`, and make a sample HTTP GET request to verify that the logging is working as expected.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'map'."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'logger'."}, {"type": "variable", "instruction": "Variable 'logger', should be a global variable."}, {"type": "variable", "instruction": "Variable 'timeFormat', should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'LoggingMiddleware'."}, {"type": "interface", "instruction": "Your code should define an interface named 'Logger'."}, {"type": "interface", "instruction": "The interface names in your code should follow the 'PascalCase' naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'Server'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'middleware'."}, {"type": "combination", "instruction": "In your code, the class 'Server' should have these properties 'port', 'handler'."}, {"type": "combination", "instruction": "In your code, the class 'Server' should have these methods 'Start', 'Stop'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'middleware', which should contain these classes 'Server', 'Logger'."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "9": [0, 1, 8], "12": [0, 1, 10], "13": [0, 1, 10], "14": [0, 1, 10, 11]}, "question_id": 25}
{"question": "Implement the `DeDupper` type in C++, with the main function of deduplicating some elements. 1. Template implementation of `Key, Value, HashFunc, EqualFunc`, allowing users to customize. 2. Implement the interface `void PrepareDeDup(const uint32_t capacity)` to reserve memory space based on the number of keys to be deduplicated and get ready for preprocessing. 3. Implement the interface `uint32_t DeDup(const Key &key)` to deduplicate the `key`. If the key already exists, return the number of deduplicated elements; otherwise, insert the key and return the total number of deduplicated elements.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named DeDup."}, {"type": "interface", "instruction": "Your code should define an interface named DeDupperInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named DeDupper."}, {"type": "file", "instruction": "Your code should be organized in a package named deduplication."}, {"type": "file", "instruction": "Your code should import the following libraries <unordered_map>, <functional>."}, {"type": "file", "instruction": "Your code should use the function reserve from the library unordered_map."}, {"type": "combination", "instruction": "The function DeDup should take key as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named deduplication, which should contain these classes DeDupper, DeDupperInterface."}], "instruction_dependence": {"9": [0, 1, 2, 8], "13": [0, 1, 2, 12], "14": [0, 1, 2, 7], "15": [0, 1, 2, 10, 11]}, "question_id": 26}
{"question": "Please convert the following code into C++ with the function signature `long how_many_times(std::string string, std::string substring)`. Note: 1. Only implement the target function and include required headers, do not generate additional code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named Counter."}, {"type": "class", "instruction": "Your code should define a class named StringCounter."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries <iostream>, <string>."}, {"type": "combination", "instruction": "Your code should define a class named StringCounter that implements the Counter interface."}, {"type": "combination", "instruction": "In your code, the class StringCounter should have these methods countOccurrences."}], "instruction_dependence": {"8": [0, 1, 7], "10": [0, 1, 6, 7], "11": [0, 1, 7]}, "question_id": 27}
{"question": "Write a Python script that interacts with a hypothetical Crowdin API to retrieve and display a list of all source file paths in a project. The script should use the Crowdin API to fetch project information in XML format, parse the XML to extract file paths, and print them to the console. The script should define two functions: 1. `get_project_info()`: This function should simulate an API call to Crowdin to get project information in XML format. For the purpose of this exercise, you can assume that the function returns a pre-defined XML structure as an `lxml.etree` object. 2. `process_item(item, parent_path=\"/\")`: This function should take an XML element representing a file or folder node and a string representing the parent path. It should return a list of paths to all source files under the given node. If the node is a file, it should return a list containing the single path to that file. If the node is a folder, it should recursively process all child nodes and return a list of paths to all files within that folder. The script should then use these functions to print a list of all source file paths in the project to the console.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named project_info."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable project_info should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named get_project_info."}, {"type": "combination", "instruction": "The function process_item should take item and parent_path as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 3, 8], "5": [0, 3, 8], "7": [0, 6, 8]}, "question_id": 28}
{"question": "Design a Java class `HttpServiceClient` that provides methods to send HTTP GET and POST requests to specified URLs. The class should handle both successful responses and error responses gracefully, returning a custom object that encapsulates the HTTP response code and the response body as a string. The `HttpServiceClient` class should have the following specifications: 1. The class should be able to send HTTP GET and POST requests to a given URL. 2. The class should set the \"Content-Type\" header to \"application/json; charset=UTF-8\" for both GET and POST requests. 3. The class should handle both successful responses (HTTP status code < 400) and error responses (HTTP status code >= 400) by reading the appropriate input stream. 4. The class should return a custom object `HttpResponse` that contains the HTTP response code and the response body as a string. 5. Include a main method with test cases to demonstrate the functionality of the `HttpServiceClient` class.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `responseCode`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `HttpMethod`."}, {"type": "variable", "instruction": "Variable `responseCode` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `sendRequest`."}, {"type": "interface", "instruction": "Your code should define an interface named `HttpClient`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `HttpServiceClient`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.httpclient`."}, {"type": "file", "instruction": "Your code should import the following libraries `java.net.HttpURLConnection`, `java.io.BufferedReader`, `java.io.InputStreamReader`, `java.io.OutputStream`."}, {"type": "file", "instruction": "Your code should use the function `openConnection` from the library `java.net.URL`."}, {"type": "combination", "instruction": "You should define an interface named `HttpClient` that includes these methods `sendGetRequest`, `sendPostRequest`."}, {"type": "combination", "instruction": "Your code should define a class named `HttpServiceClient` that implements the `HttpClient` interface."}, {"type": "combination", "instruction": "The function `sendRequest` should take `url`, `method`, `body` as parameters."}, {"type": "combination", "instruction": "The function `sendRequest` should return a `HttpResponse` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.example.httpclient`, which should contain these classes `HttpServiceClient`, `HttpResponse`."}], "instruction_dependence": {"6": [0, 1, 2, 4], "9": [0, 1, 2, 8], "13": [0, 1, 2, 12], "14": [0, 1, 2, 8], "15": [0, 1, 2, 8, 10], "16": [0, 1, 2, 7], "17": [0, 1, 2, 7], "18": [0, 1, 2, 10, 11]}, "question_id": 29}
{"question": "Write a Python function named `max_of_three` that takes three integer inputs and returns the maximum of the three numbers. If two or more numbers are equal and greater than the others, it should return the value of the equal numbers. The function should follow these requirements: - It should take exactly three arguments, all of which are integers. - It should return an integer, which is the greatest of the three input numbers. Additionally, provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "variable", "instruction": "Your code should define a variable named `max_value`."}, {"type": "variable", "instruction": "Variable `max_value`, should not be a global variable."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4, 6]}, "question_id": 30}
{"question": "You are given an integer array `nums` that starts from **0** and a positive integer `k`. You can perform the following operation on the array **any number of times**: Choose **any** element in the array and **flip** one of its **binary** bits. Flipping a bit means changing a `0` to a `1` or a `1` to a `0`. Your goal is to make the bitwise XOR of all elements in the array equal to `k`. You are to return the **minimum** number of operations needed to achieve this goal. **Note** that you can also flip the leading 0 of a number. For example, the number `(101)_2` flips the fourth bit to get `(1101)_2`. Please complete the following implementation: ```cpp class Solution { public: int minOperations(vector<int> nums, int k); };```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named operationsCount."}, {"type": "variable", "instruction": "Your code should define an enumeration named BitFlipType."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable operationsCount, should be a global variable."}, {"type": "variable", "instruction": "Variable operationsCount should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named minOperations."}, {"type": "interface", "instruction": "Your code should define an interface named BitFlipInterface."}, {"type": "file", "instruction": "Your code should not use the following libraries iostream."}, {"type": "combination", "instruction": "You should define an interface named BitFlipInterface that includes these methods flipBit, getBit."}, {"type": "combination", "instruction": "The function minOperations should return a int as its result."}], "instruction_dependence": {"6": [0, 1, 4], "7": [0, 1, 4], "8": [0, 1, 4], "12": [0, 1, 10], "13": [0, 1, 9]}, "question_id": 31}
{"question": "It is known that in RDKit, using `mol.GetRingInfo` can obtain the ring information of a molecule, and through the `ring_info.AtomRings` function, the atomic information of each ring can be obtained. If two rings have two or more common atoms, then these two rings form a fused ring. Please write a complete Python function `solve(smiles)` which takes a SMILES as input, first uses `mol.GetRingInfo` to obtain the ring information of the molecule, and then uses the `ring_info.AtomRings` function to obtain the atomic information of each ring. Iterate through all combinations of rings, and if two rings are found to have two or more common atoms, they are considered fused rings. Finally, return the number of fused rings in the molecule.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "interface", "instruction": "Your code should define an interface named RingInterface."}, {"type": "class", "instruction": "Your code should define a class named MoleculeAnalyzer."}, {"type": "file", "instruction": "Your code should be organized in a package named molecule_analysis."}, {"type": "file", "instruction": "Your code should import the following libraries ['rdkit', 'itertools']."}, {"type": "file", "instruction": "Your code should use the function GetRingInfo from the library rdkit."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'pandas']."}, {"type": "combination", "instruction": "You should initialize an object named mol as an instance of the Mol class using ['smiles'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named molecule_analysis, which should contain these functions ['solve', 'get_fused_rings']."}], "instruction_dependence": {"9": [0, 1, 8], "11": [0, 1, 6], "12": [0, 1, 7]}, "question_id": 32}
{"question": "Design a C++ program that creates an interactive window application for drawing and manipulating complex polygons. The application should allow users to add vertices to a complex polygon by clicking on the window with the left mouse button. The right mouse button should clear the current polygon. Additionally, the application should provide keyboard shortcuts to toggle the display of polygon areas ('Z' key), fill the polygon with color ('X' key), and enable or disable a convolution effect ('C' key). The window should be resizable, and the polygon should scale accordingly. The program should use OpenGL for rendering and GLFW for window management. It should be object-oriented, with a `Lab4Window` class derived from a generic `GLGraphics::Window` class, and a `Lab4WindowInitParams` class for initialization parameters. The `Lab4Window` class should handle key and mouse callbacks, as well as window resize events. The `ComplexPolygon` class should be capable of storing vertices, drawing itself, and managing the display options toggled by the keyboard shortcuts.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named polygonVertices."}, {"type": "variable", "instruction": "Your code should define an enumeration named DisplayOptions."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable polygonVertices, the initial value should be an empty vector."}, {"type": "variable", "instruction": "Variable polygonVertices should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named ComplexPolygon."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named PolygonApp."}, {"type": "file", "instruction": "Your code should import the following libraries OpenGL, GLFW."}, {"type": "file", "instruction": "Your code should use the function glClear from the library OpenGL."}, {"type": "combination", "instruction": "Your code should be organized in a package named PolygonApp, which should contain these classes Lab4Window, Lab4WindowInitParams, ComplexPolygon."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 4, 15], "7": [0, 1, 4, 15], "8": [0, 1, 4, 15], "10": [0, 1, 9, 15], "13": [0, 1, 12, 15], "14": [0, 1, 9, 11, 15]}, "question_id": 33}
{"question": "Write a Python program that uses the ROS (Robot Operating System) framework to perform clustering on 3D point cloud data obtained from a LiDAR sensor. The program should subscribe to a ROS topic to receive the point cloud data, filter the points based on predefined spatial constraints, and then apply the DBSCAN clustering algorithm to identify distinct clusters within the data. Each identified cluster should be visualized using markers, and the clustered point cloud should be published to another ROS topic. The program should define a `Clustering` class with the following methods: `__init__(self)`, `cb_points(self, msg)`, `xyz_to_marker(self, x, y, z, id, color, header)`, `xyzrgb_array_to_pointcloud2(self, points, colors, header)`, and `run_clustering(self)`. The program should also include a main block that initializes the ROS node, creates an instance of the `Clustering` class, and continuously calls the `run_clustering` method until the node is shut down.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "variable", "instruction": "Your code should define a variable named `cluster_results`."}, {"type": "variable", "instruction": "Variable `cluster_results`, should be a global variable."}, {"type": "variable", "instruction": "Variable `cluster_results` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `filter_points`."}, {"type": "interface", "instruction": "Your code should define an interface named `IClustering`."}, {"type": "class", "instruction": "Your code should define a class named `Clustering`."}, {"type": "file", "instruction": "Your code should be organized in a package named `lidar_clustering`."}, {"type": "combination", "instruction": "In your code, the class `Clustering` should have these properties `node`, `pub`, `sub`, `filtered_points`, `cluster_results`."}, {"type": "combination", "instruction": "The function `filter_points` should take `msg` as a parameter."}, {"type": "combination", "instruction": "The function `filter_points` should return a `list` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `lidar_clustering`, which should contain these classes `Clustering`, `IClustering`."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "10": [0, 1, 2, 8], "11": [0, 1, 2, 6], "12": [0, 1, 2, 6], "13": [0, 1, 2, 8, 9]}, "question_id": 34}
{"question": "Please write a complete Python function `solve(smiles)` that takes a SMILES input and returns the net charge of the structure. The net charge of the system is the sum of the formal charges of the atoms in the structure.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named total_charge."}, {"type": "variable", "instruction": "Variable total_charge, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named ChargeCalculator."}, {"type": "class", "instruction": "Your code should define a class named Molecule."}, {"type": "file", "instruction": "Your code should be organized in a package named chemistry."}, {"type": "file", "instruction": "Your code should import the following libraries ['rdkit', 'numpy']."}, {"type": "file", "instruction": "Your code should use the function GetFormalCharge from the library rdkit."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'scipy']."}, {"type": "combination", "instruction": "In your code, the class Molecule should have these methods ['calculate_charge', 'get_smiles']."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 15], "12": [0, 1, 2, 11, 15], "14": [0, 1, 2, 9, 15]}, "question_id": 35}
{"question": "Create a Java Spring Boot application that provides a RESTful API to manage a simple user authentication system. The system should allow users to register with a username and password, and then log in to receive a welcome message. The application should use an in-memory database (like H2) to store user credentials. The application should have the following endpoints: 1. `POST /register`: This endpoint should accept a JSON object with `username` and `password` fields. It should create a new user with the provided credentials and store them in the database. If the username already exists, it should return an error message. 2. `POST /login`: This endpoint should accept a JSON object with `username` and `password` fields. It should check if the user exists and if the password matches the one stored in the database. If authentication is successful, it should return a welcome message. If authentication fails, it should return an error message. 3. `GET /demo`: This endpoint should return a simple message like 'Hello from demo endpoint' without requiring any authentication. Ensure that the password is stored securely in the database using appropriate hashing.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named userCount."}, {"type": "variable", "instruction": "Variable userCount, the initial value should be 0."}, {"type": "variable", "instruction": "Variable userCount, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named authenticateUser."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named UserRepository."}, {"type": "class", "instruction": "Your code should define a class named UserService."}, {"type": "file", "instruction": "Your code should not use the following libraries org.apache.commons.lang3."}, {"type": "combination", "instruction": "In your code, the class UserService should have these methods registerUser, loginUser."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"6": [0, 1, 5, 14], "7": [0, 1, 5, 14], "9": [0, 1, 8, 14], "13": [0, 1, 11, 14]}, "question_id": 36}
{"question": "Write a Python program to scrape information about trending repositories on GitHub and perform data analysis on the collected data. The program should perform the following tasks:\n\n1. Scrape the author's username, repository name, number of stars, and repository URL from the trending page of GitHub (https://github.com/trending).\n2. Sort the repositories based on the number of stars in descending order.\n3. Save the scraped data into a CSV file named `github_trending_repos.csv`.\n4. Load the data from the CSV file into a Pandas DataFrame.\n5. Generate a bar graph that visualizes the top 10 trending repositories based on the number of stars.\n\nThe program should follow these guidelines:\n\n- Use BeautifulSoup to parse the HTML content and extract the required information.\n- Use the `requests` library to fetch the web page content.\n- Use the `csv` module to write the data into a CSV file.\n- Use Pandas to read the CSV file and manipulate the data.\n- Use Matplotlib to create the bar graph.\n- Include error handling for network requests and file operations.\n- Provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'list'."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'trending_data'."}, {"type": "variable", "instruction": "Variable 'trending_data', type should be 'list'."}, {"type": "function", "instruction": "Your code should include a function named 'scrape_github_trending'."}, {"type": "function", "instruction": "The function names in your code should follow the 'snake_case' naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'GitHubTrendingAnalyzer'."}, {"type": "combination", "instruction": "The function 'scrape_github_trending' should return a 'list' as its result."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 5, 8], "11": [0, 1, 2, 3, 4, 5, 10], "13": [0, 1, 2, 3, 4, 5, 10]}, "question_id": 37}
{"question": "Design a class `MyCalendarThree` that supports booking requests with start and end times, similar to `MyCalendarTwo`, but instead of preventing triple bookings, it should track the maximum number of simultaneous events at any time. The class should be able to return the maximum number of concurrent events that have been booked.\n\nImplement the `MyCalendarThree` class:\n- `MyCalendarThree()` Initializes the calendar object.\n- `int book(int start, int end)` Books an event with a half-open interval `[start, end)` and returns the maximum number of concurrent events.\n\n**Example**:\n```\nMyCalendarThree();\nMyCalendarThree.book(10, 20); // returns 1\nMyCalendarThree.book(50, 60); // returns 1\nMyCalendarThree.book(10, 40); // returns 2\nMyCalendarThree.book(5, 15);  // returns 3\nMyCalendarThree.book(5, 10);  // returns 3\nMyCalendarThree.book(25, 55); // returns 3\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named max_events."}, {"type": "variable", "instruction": "Variable max_events, should be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the heapq."}, {"type": "interface", "instruction": "Your code should define an interface named CalendarInterface."}, {"type": "class", "instruction": "Your code should define a class named MyCalendarThree."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries collections."}, {"type": "file", "instruction": "Your code should use the function defaultdict from the library collections."}, {"type": "file", "instruction": "Your code should not use the following libraries numpy."}, {"type": "combination", "instruction": "You should define an interface named CalendarInterface that includes these methods book."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 5, 15], "10": [0, 1, 9, 15], "12": [0, 1, 11, 15], "14": [0, 1, 8, 15]}, "question_id": 38}
{"question": "Create a Python application using Tkinter that displays two synchronized clocks in a single window: one showing the local time and the other showing the time obtained from a remote server. The application should update both times every second. The remote server time should be fetched from a mock URL (e.g., 'http://worldtimeapi.org/api/timezone/Europe/London.txt') for the purpose of this exercise. The application should have the following features: - The window should have a title 'Synchronized Clocks'. - The local time should be displayed on the left side of the window, and the server time on the right side. - Each clock should be labeled accordingly: 'Local Time' and 'Server Time'. - The application should handle the termination gracefully when the user presses the 'Escape' key or 'Control+Q'. - The application should print to the console whenever it updates the local time and the server time, including the timestamp.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure tuple."}, {"type": "variable", "instruction": "Your code should define a variable named clock_window."}, {"type": "variable", "instruction": "Variable clock_window, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named update_time."}, {"type": "function", "instruction": "Your code should not use any functions from the os library."}, {"type": "file", "instruction": "Your code should import the following libraries tkinter, requests, datetime."}, {"type": "combination", "instruction": "The function update_time should take local_label, server_label as parameters."}, {"type": "combination", "instruction": "The function update_time should return a None as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 1, 3, 10], "8": [0, 1, 5, 10], "9": [0, 1, 5, 10]}, "question_id": 39}
{"question": "Design a Go program that provides a secure mechanism for generating and validating JSON Web Tokens (JWTs) for user authentication. The program should include a function to create a new token for a user with specific details and another function to validate a given token. The token should include the following user details: Username, FirstName, LastName, Uid (User ID), and Role. The token should also include standard JWT claims such as issued at (`iat`), expiration time (`exp`), issuer (`iss`), and subject (`sub`). The `GenerateToken` function should take user details as input and return a signed JWT. The `ValidateToken` function should take a signed JWT as input and return the user details if the token is valid, or an error message if it is not. The program should use the `github.com/golang-jwt/jwt` package for handling JWTs and should read the secret key used for signing tokens from an environment variable named `SECRET_KEY`. Provide test cases to verify the correctness of the `GenerateToken` and `ValidateToken` functions.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `secretKey`."}, {"type": "variable", "instruction": "Variable `secretKey`, type should be `string`."}, {"type": "function", "instruction": "Your code should include a function named `GenerateToken`."}, {"type": "function", "instruction": "Your code should not use any functions from the `os` package."}, {"type": "interface", "instruction": "Your code should define an interface named `TokenValidator`."}, {"type": "class", "instruction": "Your code should define a class named `JWTManager`."}, {"type": "file", "instruction": "Your code should be organized in a package named `jwt_auth`."}, {"type": "combination", "instruction": "You should initialize an object named `manager` as an instance of the `JWTManager` class using `secretKey` for initialization."}, {"type": "combination", "instruction": "Your code should define a class named `JWTManager` that implements the `TokenValidator` interface."}, {"type": "combination", "instruction": "The function `GenerateToken` should take `username, firstName, lastName, uid, role` as parameters."}, {"type": "combination", "instruction": "The function `GenerateToken` should return a `string` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `jwt_auth`, which should contain these classes `JWTManager`."}], "instruction_dependence": {"7": [0, 1, 2, 6], "13": [0, 1, 2, 11], "14": [0, 1, 2, 10, 11], "15": [0, 1, 2, 8], "16": [0, 1, 2, 8], "17": [0, 1, 2, 11, 12]}, "question_id": 40}
{"question": "Design a Java program that manages hotel room categories for a hotel booking system. Each category has an ID, a description, and a base charge per night. The system should be able to add new categories, update existing categories, and retrieve a list of all categories. Additionally, the system should calculate the total charge for a given category based on the number of nights stayed.\n\nImplement the following functionalities:\n1. `addCategory(CategoryDTO category)`: Adds a new category to the system.\n2. `updateCategory(CategoryDTO category)`: Updates an existing category.\n3. `getAllCategories()`: Retrieves a list of all categories.\n4. `calculateTotalCharge(Long categoryId, int nights)`: Calculates the total charge for a given category ID and number of nights.\n\nAssume that the `CategoryDTO` class is already provided as shown in the given code snippet. You may need to correct any typos or errors in the provided class before proceeding.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the 'static' keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'totalCharge'."}, {"type": "variable", "instruction": "Variable 'totalCharge', should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named 'calculateTotalCharge'."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'CategoryManager'."}, {"type": "class", "instruction": "Your code should define a class named 'HotelBookingSystem'."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.hotel.booking'."}, {"type": "file", "instruction": "Your code should import the following libraries 'java.util.List, java.util.ArrayList'."}, {"type": "combination", "instruction": "In your code, the class 'HotelBookingSystem' should have these properties 'List<CategoryDTO> categories'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'com.hotel.booking', which should contain these functions 'addCategory, updateCategory, getAllCategories, calculateTotalCharge'."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 18], "10": [0, 1, 2, 3, 9, 18], "13": [0, 1, 2, 3, 12, 18], "16": [0, 1, 2, 3, 12, 18], "17": [0, 1, 2, 3, 14, 18]}, "question_id": 41}
{"question": "Write a C++ program that uses Emscripten to interact with JavaScript to calculate the factorial of a given non-negative integer. The factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. It is denoted by `n!`. For example, the factorial of 5 (5!) is `5 x 4 x 3 x 2 x 1 = 120`. The program should define a C++ function `int factorial(int n)` that calculates the factorial of a given integer `n`. It should then expose this function to JavaScript using Emscripten so that it can be called from JavaScript code. The program should also include a JavaScript function `calculateFactorial()` that takes an integer as input, calls the exposed `factorial()` C++ function, and then prints the result to the console. The C++ code should be compiled with Emscripten and should run in a web environment.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "variable", "instruction": "Your code should define an enumeration named FactorialResult."}, {"type": "function", "instruction": "Your code should include a function named factorial."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FactorialCalculator."}, {"type": "file", "instruction": "Your code should be organized in a package named factorialPackage."}, {"type": "file", "instruction": "Your code should import the following libraries emscripten.h."}, {"type": "file", "instruction": "Your code should not use the following libraries iostream."}, {"type": "combination", "instruction": "You should initialize an object named calculator as an instance of the FactorialCalculator class using n for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named factorialPackage, which should contain these functions factorial, calculateFactorial."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 1, 3, 11], "9": [0, 1, 5, 11], "10": [0, 1, 6, 11]}, "question_id": 42}
{"question": "Write a Python script that simulates a simplified version of a Django admin site registration process for a school management system. The system should be able to register different types of users: `Teacher`, `Student`, and `Parent`. Each user type should be represented by a class with specific attributes:\n\n- `Teacher`: should have `name`, `subject`, and `employee_id`.\n- `Student`: should have `name`, `grade`, and `student_id`.\n- `Parent`: should have `name` and `children` (a list of `Student` instances).\n\nThe script should include a `SchoolAdmin` class that has a method `register` which takes a user instance (either `Teacher`, `Student`, or `Parent`) and adds it to an internal registry (a dictionary). The registry should keep track of the number of instances of each user type.\n\nThe `SchoolAdmin` class should also have a method `get_registry_summary` that returns a string representation of the number of registered users of each type.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the `super` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `set`."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named `get_registry_summary`."}, {"type": "class", "instruction": "Your code should define a class named `SchoolAdmin`."}, {"type": "class", "instruction": "The class names in your code should follow the `CamelCase` naming convention."}, {"type": "combination", "instruction": "You should initialize an object named `admin` as an instance of the `SchoolAdmin` class using `[]` for initialization."}, {"type": "combination", "instruction": "The function `register` should take `user` as parameters."}, {"type": "combination", "instruction": "The function `get_registry_summary` should return a `string` as its result."}], "instruction_dependence": {"8": [0, 1, 2, 7], "9": [0, 1, 2, 7], "10": [0, 1, 2, 6], "11": [0, 1, 2, 6]}, "question_id": 43}
{"question": "Please write a Java method for adding new books to a library. The method should accept a Book object as a parameter and save it to the database. If the addition is successful, the method should return a result object containing success information and the new book ID. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.UUID;\nclass ResultVO {\n    private boolean success;\n    private String message;\n    private String data;\n    public ResultVO(boolean success, String message, String data) {\n    }\n    public static ResultVO setSuccess(String message, String data) {\n    }\n    public boolean isSuccess() {\n    }\n    public String getMessage() {\n    }\n    public String getData() {\n    }\n}\nclass Book {\n    private String bookId;\n    private String title;\n    public Book(String title) {\n    }\n    public String getBookId() {\n    }\n    public String getTitle() {\n    }\n}\nclass LibrarySystem {\n    public ResultVO addNewBook(Book newBook) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure UUID."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named newBookId."}, {"type": "variable", "instruction": "Variable newBookId, type should be String."}, {"type": "function", "instruction": "Your code should include a function named addNewBook."}, {"type": "class", "instruction": "Your code should define a class named LibrarySystem."}, {"type": "combination", "instruction": "You should initialize an object named result as an instance of the ResultVO class using success, message, data for initialization."}, {"type": "combination", "instruction": "In your code, the class Book should have these properties bookId, title."}, {"type": "combination", "instruction": "The function addNewBook should take newBook as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 7], "11": [0, 1, 2, 10], "12": [0, 1, 2, 10], "13": [0, 1, 2, 9]}, "question_id": 44}
{"question": "You're given a two-dimensional integer matrix `grid` of size `n * m` starting from index **0**. Define another two-dimensional matrix `p` of size `n * m` starting from index **0**. If the following condition is met, `p` is called the **product matrix** of `grid`:\n\n* For each element `p[i][j]`, its value equals the product of all elements except `grid[i][j]`. The product is taken modulo `12345`.\n\nReturn the product matrix of `grid`.\n\n**Example 1：**\n\n```\n**Input：**grid = [[1,2],[3,4]]\n**Output：**[[24,12],[8,6]]\n**Explanation：**p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]] .\n```\n\n**Example 2：**\n\n```\n**Input：**grid = [[12345],[2],[1]]\n**Output：**[[2],[0],[0]]\n**Explanation：**p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0 , so p[0][1] = 0\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0 , so p[0][2] = 0\nSo the answer is [[2],[0],[0]] .\n```\n\n**Hints：**\n\n* `1 <= n == grid.length <= 105`\n* `1 <= m == grid[i].length <= 105`\n* `2 <= n * m <= 105`\n* `1 <= grid[i][j] <= 109`\n\nPlease complete the following implementation\n```cpp\nclass Solution {\npublic:\n    vector<vector<int>> constructProductMatrix(vector<vector<int>> grid);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, the initial value should be 1."}, {"type": "function", "instruction": "Your code should include a function named constructProductMatrix."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named MatrixOperations."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "file", "instruction": "Your code should import the following libraries vector."}, {"type": "file", "instruction": "Your code should not use the following libraries algorithm."}, {"type": "combination", "instruction": "You should initialize an object named solution as an instance of the Solution class using grid for initialization."}, {"type": "combination", "instruction": "You should define an interface named MatrixOperations that includes these methods calculateProduct."}, {"type": "combination", "instruction": "In your code, the class Solution should have these properties grid."}, {"type": "combination", "instruction": "The function constructProductMatrix should return a vector<vector<int>> as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 5, 17], "8": [0, 1, 7, 17], "13": [0, 1, 10, 17], "14": [0, 1, 9, 17], "15": [0, 1, 10, 17], "16": [0, 1, 7, 17]}, "question_id": 45}
{"question": "You are given an integer array `nums` starting from **0** and a positive integer `k`. You can perform the following operation on the array **any number of times**: Select **any** element in the array and **flip** one digit in its **binary** representation, where flipping a digit means changing a `0` to `1` or a `1` to `0`. Your goal is to achieve an element-wise XOR sum of `k` in the array. Please return the **minimum** number of operations needed to reach this goal. **Note**, you can also flip the leading 0 in a number. For example, the number `(101)2` flips the fourth digit and gets `(1101)2`. Complete the following implementation:\n\n```python\nclass Solution(object):\n    def minOperations(self, nums, k):\n        '''\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        '''\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, type should be int."}, {"type": "function", "instruction": "Your code should include a function named minOperations."}, {"type": "function", "instruction": "Your code should not use any functions from the itertools library."}, {"type": "interface", "instruction": "Your code should define an interface named OperationInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "combination", "instruction": "You should define an interface named OperationInterface that includes these methods perform_operation."}, {"type": "combination", "instruction": "Your code should define a class named Solution that implements the OperationInterface interface."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9], "12": [0, 1, 2, 9], "13": [0, 1, 2, 9, 11]}, "question_id": 46}
{"question": "Please complete the following task with PyCryptodome.\n\nDuring a packet capture, you found a strange message `ciphertext`. It was generated by performing an XOR operation on the original message with a key of the same length. You have successfully found the key `key`, now you need to recover the original message.\nPlease write a python function `def strxor_decrypt(ciphertext, key)->str` to restore the ciphertext to plaintext.\n\nPlease write the code in a markdown```python ``` wrapper.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named plaintext."}, {"type": "variable", "instruction": "Variable plaintext, type should be str."}, {"type": "function", "instruction": "Your code should include a function named strxor_decrypt."}, {"type": "function", "instruction": "Your code should not use any functions from the PyCryptodome library."}, {"type": "interface", "instruction": "Your code should define an interface named Decryptor."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named XORDecryptor."}, {"type": "file", "instruction": "Your code should not use the following libraries PyCryptodome."}, {"type": "combination", "instruction": "You should initialize an object named decryptor as an instance of the XORDecryptor class using ciphertext and key for initialization."}, {"type": "combination", "instruction": "You should define an interface named Decryptor that includes these methods decrypt."}], "instruction_dependence": {"6": [0, 1, 5], "10": [0, 1, 9], "13": [0, 1, 11], "14": [0, 1, 9]}, "question_id": 47}
{"question": "Please write an exponential function in Python, the function name is complex_exp(). This function takes a tuple as input, representing the real and imaginary parts of the exponent; the output is also a tuple, representing the real and imaginary parts of the result. You may use Python's built-in math library.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named ComplexInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ComplexNumber."}, {"type": "file", "instruction": "Your code should import the following libraries math."}, {"type": "combination", "instruction": "In your code, the class ComplexNumber should have these methods add, subtract, multiply."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 13], "9": [0, 1, 2, 8, 13], "12": [0, 1, 2, 10, 13]}, "question_id": 48}
{"question": "Design a simple graph representation and implement a Depth-First Search (DFS) to find a path from a source vertex to a destination vertex in an undirected graph. The graph will be represented as an adjacency list, and you will need to create a `Graph` class to handle the graph operations. The `Path` class provided in the snippet should be used to find and display the path between two vertices. The `Graph` class should have the following methods: `AddEdge(v, w int)`: Adds an edge between vertices `v` and `w`. `Adj(v int) []int`: Returns a slice of integers representing the vertices adjacent to vertex `v`. The `Path` class should be modified to work with the `Graph` class. The `NewIterator` function should be implemented to iterate over the adjacency list of a given vertex. Implement the `main` function to create a graph, add edges, and find paths between vertices using the `Path` class.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `map`."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named `VertexState`."}, {"type": "function", "instruction": "Your code should include a function named `FindPath`."}, {"type": "function", "instruction": "Your code should not use any functions from the `reflect` package."}, {"type": "interface", "instruction": "Your code should define an interface named `GraphIterator`."}, {"type": "class", "instruction": "Your code should define a class named `Graph`."}, {"type": "file", "instruction": "Your code should be organized in a package named `graph`."}, {"type": "file", "instruction": "Your code should not use the following libraries `fmt`, `log`."}, {"type": "combination", "instruction": "You should define an interface named `GraphIterator` that includes these methods `Next()`, `HasNext()`."}, {"type": "combination", "instruction": "In your code, the class `Graph` should have these properties `adjacencyList`, `vertexCount`."}, {"type": "combination", "instruction": "The function `FindPath` should take `source`, `destination` as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"12": [0, 1, 2, 8, 15], "13": [0, 1, 2, 9, 15], "14": [0, 1, 2, 6, 15]}, "question_id": 49}
{"question": "Implement a Go package that provides a thread-safe mechanism for managing a unique identifier for a cluster of nodes. The identifier, once set, should not change throughout the lifetime of the cluster. The package should allow for the identifier to be set, retrieved, and displayed in a human-readable format. Additionally, provide a way to reset the identifier, which should only be used for testing purposes.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the 'sync' keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'clusterID'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable 'clusterID', the initial value should be 'nil'."}, {"type": "function", "instruction": "Your code should include a function named 'GetClusterID'."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'IdentifierManager'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries 'unsafe'."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 11]}, "question_id": 50}
{"question": "Design a Go program that manages a simple key-value store with the ability to set and get values. The key-value store should be initialized with a set of options that determine its behavior and limitations. The given code snippet provides a starting point with a struct `Options` that contains various configuration parameters for the key-value store. The key-value store should support the following operations: - `Set(key string, value []byte) error`: Stores the given key-value pair in the key-value store. If the value size exceeds `ValueThreshold`, it should return an error. - `Get(key string) ([]byte, error)`: Retrieves the value associated with the given key. If the key does not exist, it should return an error. The program should also include a constructor function for the key-value store that takes an `Options` struct as a parameter and initializes the store accordingly.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the `defer` keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `store`."}, {"type": "variable", "instruction": "Variable `store` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `NewKeyValueStore`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `Store`."}, {"type": "class", "instruction": "Your code should define a class named `KeyValueStore`."}, {"type": "file", "instruction": "Your code should be organized in a package named `kvstore`."}, {"type": "combination", "instruction": "Your code should define a class named `KeyValueStore` that implements the `Store` interface."}, {"type": "combination", "instruction": "In your code, the class `KeyValueStore` should have these properties `options`, `data`."}, {"type": "combination", "instruction": "The function `Set` should take `key`, `value` as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7], "10": [0, 1, 2, 3, 4, 9], "14": [0, 1, 2, 3, 4, 11, 12], "15": [0, 1, 2, 3, 4, 12], "16": [0, 1, 2, 3, 4, 9]}, "question_id": 51}
{"question": "Your task is to write a custom Python thread class, implement a custom thread class PrimeThread inheriting from threading.Thread, accepting two parameters start_num and end_num, respectively representing the start and end range for prime number computation. When running each thread, the number of prime numbers between start_num and end_num (including start_num and end_num) will be saved to PrimeThread's count variable. Please write your code inside a markdown ```python``` wrapper.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named is_prime."}, {"type": "interface", "instruction": "Your code should define an interface named PrimeInterface."}, {"type": "class", "instruction": "Your code should define a class named PrimeThread."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries threading."}, {"type": "combination", "instruction": "The function is_prime should take num as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"11": [0, 1, 2, 3, 10, 14], "13": [0, 1, 2, 3, 8, 14]}, "question_id": 52}
{"question": "Design a new problem inspired by the given code snippet. Given an array of positive integers `nums`, return the length of the longest ascending subarray in `nums`. A subarray is defined as a contiguous sequence of numbers in an array. A subarray `[numsₗ, numsₗ₊₁, ..., numsᵣ₋₁, numsᵣ]` is ascending if for all `i` where `l <= i < r`, `numsᵢ < numsᵢ₊₁`. Note that a subarray of size `1` is ascending.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 function."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `max_length`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `Direction`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `max_length`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `max_length`, the initial value should be 1."}, {"type": "class", "instruction": "Your code should define a class named `SubarrayAnalyzer`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "In your code, the class `SubarrayAnalyzer` should have these methods `find_longest_ascending_subarray`."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7, 15], "10": [0, 1, 2, 3, 7, 15], "11": [0, 1, 2, 3, 7, 15], "13": [0, 1, 2, 3, 12, 15], "14": [0, 1, 2, 3, 12, 15]}, "question_id": 53}
{"question": "Create a Java class named `EntityScanner` that scans a given package for classes annotated with a custom annotation `@Entity`. The `EntityScanner` should provide a method `getEntityClasses` that returns a `Set<Class<?>>` containing all the classes annotated with `@Entity` within the specified package. The custom annotation `@Entity` should be defined with only the default retention policy and no attributes. The `EntityScanner` class should use reflection to find the annotated classes and should handle any exceptions that may occur during the scanning process, returning an empty set if no entities are found or if an error occurs. Additionally, provide a main method that demonstrates the usage of `EntityScanner` by scanning the package \"com.example.entities\" and printing the names of the found entity classes.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'entitySet'."}, {"type": "variable", "instruction": "Variable 'entitySet', should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named 'scanPackage'."}, {"type": "function", "instruction": "Your code should not use any functions from the 'System.exit'."}, {"type": "interface", "instruction": "Your code should define an interface named 'EntityProcessor'."}, {"type": "class", "instruction": "Your code should define a class named 'EntityScanner'."}, {"type": "class", "instruction": "The class names in your code should follow the 'PascalCase' naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.example.scanner'."}, {"type": "file", "instruction": "Your code should not use the following libraries 'org.apache.commons'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'com.example.scanner', which should contain these classes 'EntityScanner', 'EntityProcessor'."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 15], "11": [0, 1, 2, 3, 10, 15], "14": [0, 1, 2, 3, 10, 12, 15]}, "question_id": 54}
{"question": "Design a simple Factory pattern implementation in Go that allows the creation of different types of BMW cars. Each car should have a model name and a method to display its details. The factory should be able to create specific car models like BMW X5 and BMW i8 based on the input provided.\n\nImplement the following:\n- An interface `Car` with a method `DisplayDetails()` that prints the model name of the car.\n- Two structs `X5` and `i8` that represent specific car models. Both structs should implement the `Car` interface.\n- A `BmwFactory` struct with a method `NewCar(model string) Car` that returns a new instance of the requested car model.\n\nWrite a test function to verify that the factory creates the correct types of cars based on the provided model name. If an unknown model name is provided, the factory should return `nil`.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named carModel."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable carModel, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named NewCar."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named Car."}, {"type": "class", "instruction": "Your code should define a class named BmwFactory."}, {"type": "combination", "instruction": "You should initialize an object named bmwFactory as an instance of the BmwFactory class using model for initialization."}, {"type": "combination", "instruction": "Your code should define a class named X5 that implements the Car interface."}, {"type": "combination", "instruction": "In your code, the class X5 should have these methods DisplayDetails."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7], "11": [0, 1, 10], "12": [0, 1, 9, 10], "13": [0, 1, 10]}, "question_id": 55}
{"question": "Design a Java class named `UserSyncService` that provides functionality to synchronize user data between two systems: a source system and a target system. The source system contains user data in the form of `UserDto` objects, as provided in the given code snippet. The target system is represented by a simple in-memory store of usernames. The `UserSyncService` should provide the following functionalities: 1. `addUserToSource(UserDto user)`: Adds a new user to the source system. 2. `removeUserFromSource(String username)`: Removes a user from the source system by username. 3. `synchronize()`: Synchronizes the user data from the source system to the target system. After synchronization, the target system should contain the same set of usernames as the source system. Assume that the source system is represented by a `List<UserDto>` and the target system is represented by a `Set<String>`. Write a Java class `UserSyncService` that implements the above functionalities. Include a main method that demonstrates the use of the `UserSyncService` by adding and removing users from the source system and then synchronizing it with the target system. Provide test cases to verify the correctness of the synchronization process.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named userList."}, {"type": "variable", "instruction": "Your code should define an enumeration named SyncStatus."}, {"type": "variable", "instruction": "Variable userList, type should be List<UserDto>."}, {"type": "function", "instruction": "Your code should include a function named synchronize."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the Collections.disjoint function."}, {"type": "class", "instruction": "Your code should define a class named UserSyncService."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries org.apache.commons.collections."}, {"type": "combination", "instruction": "You should initialize an object named syncService as an instance of the UserSyncService class using userList for initialization."}, {"type": "combination", "instruction": "The function synchronize should return a boolean as its result."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "13": [0, 1, 2, 3, 12], "15": [0, 1, 2, 3, 12], "16": [0, 1, 2, 3, 9]}, "question_id": 56}
{"question": "Design a simple web-based To-Do application using Spring MVC that allows users to manage their to-do list. The application should provide the following functionalities:\n\n1. Display the list of to-dos for the logged-in user.\n2. Add a new to-do item with a description and target date.\n3. Update an existing to-do item.\n4. Delete a to-do item.\n5. Logout from the application.\n\nEach to-do item should have the following attributes:\n- ID (unique identifier)\n- Description (textual description of the to-do item)\n- Target Date (the date by which the to-do item should be completed)\n- Status (indicates whether the to-do item is completed or not)\n- User (the username of the user who created the to-do item)\n\nThe application should also handle date formatting for the target date of to-do items and ensure that only authenticated users can access their to-do list.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named todoList."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable todoList, type should be List<TodoItem>."}, {"type": "function", "instruction": "Your code should include a function named addTodoItem."}, {"type": "interface", "instruction": "Your code should define an interface named TodoService."}, {"type": "class", "instruction": "Your code should define a class named TodoController."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.todoapp."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.List, org.springframework.stereotype.Controller, org.springframework.web.bind.annotation.*."}, {"type": "combination", "instruction": "Your code should define a class named TodoServiceImpl that implements the TodoService interface."}, {"type": "combination", "instruction": "The function addTodoItem should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.todoapp, which should contain these functions addTodoItem, updateTodoItem, deleteTodoItem, getTodoList."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 15], "6": [0, 1, 2, 4, 15], "12": [0, 1, 2, 8, 9, 15], "13": [0, 1, 2, 7, 15], "14": [0, 1, 2, 10, 15]}, "question_id": 57}
{"question": "Generate a Latitude-Longitude Environment Map from a Spherical Image. You are given a high-resolution spherical image that represents an environment map. Your task is to write a C++ program that converts this spherical image into a latitude-longitude environment map, which is a rectangular image that represents the same environment in a different projection. The latitude-longitude map should have a width that is twice its height. The program should take the following inputs: The spherical image as an `EnvmapImage` object, the desired width of the latitude-longitude map, the name of the output file to save the latitude-longitude map, the filter radius, and the number of samples to use for resampling the image. The program should perform the following steps: 1. Calculate the height of the latitude-longitude map based on the given width (height should be half the width). 2. Resample the spherical image to fit the dimensions of the latitude-longitude map using the specified filter radius and number of samples. 3. Save the resulting latitude-longitude map to the specified output file. The program should handle any errors that may occur during the process, such as invalid input dimensions or issues with file I/O.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure std::vector."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named generateLatLongMap."}, {"type": "class", "instruction": "Your code should define a class named EnvmapProcessor."}, {"type": "file", "instruction": "Your code should be organized in a package named envmap_converter."}, {"type": "combination", "instruction": "In your code, the class EnvmapProcessor should have these properties image, width, output_file, filter_radius, num_samples."}, {"type": "combination", "instruction": "The function generateLatLongMap should take image, width, output_file, filter_radius, num_samples as parameters."}, {"type": "combination", "instruction": "The function generateLatLongMap should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named envmap_converter, which should contain these functions generateLatLongMap, saveImage."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"9": [0, 1, 2, 7, 13], "10": [0, 1, 2, 6, 13], "11": [0, 1, 2, 6, 13], "12": [0, 1, 2, 8, 13]}, "question_id": 58}
{"question": "Design and implement a Go package that provides an API client for managing cache rules on a hypothetical web service called 'CacheMaster'. The client should support CRUD (Create, Read, Update, Delete) operations for cache rules associated with a given site. Each cache rule should have the following properties: Name (string), Action (string), Filter (string), Enabled (boolean), TTL (integer), IgnoredParams (optional string), Text (optional string), and DifferentiateByValue (optional string). The client should be able to serialize and deserialize cache rule data to and from JSON format. It should also handle HTTP communication with the CacheMaster service, including error handling and logging of requests and responses.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the 'defer' keyword."}, {"type": "variable", "instruction": "Your code should define a variable named 'cacheClient'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'CacheAction'."}, {"type": "variable", "instruction": "Variable 'cacheClient', type should be 'struct'."}, {"type": "interface", "instruction": "Your code should define an interface named 'CacheRuleManager'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'cachemaster'."}, {"type": "file", "instruction": "Your code should import the following libraries 'encoding/json', 'net/http', 'log'."}, {"type": "combination", "instruction": "You should define an interface named 'CacheRuleManager' that includes these methods 'CreateRule', 'ReadRule', 'UpdateRule', 'DeleteRule'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'cachemaster', which should contain these functions 'NewClient', 'ListRules', 'GetRule', 'CreateRule', 'UpdateRule', 'DeleteRule'."}], "instruction_dependence": {"6": [0, 1, 2, 3, 4], "10": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 8]}, "question_id": 59}
{"question": "Design a thread-safe Singleton class `ResourceProvider` that lazily initializes and provides a shared instance of a resource `Resource`. The `Resource` class is a simple class with a constructor and a `toString` method that returns the class name. The `ResourceProvider` class should also have the ability to check for specific attributes and keys associated with the resource. Implement the following methods in the `ResourceProvider` class: - `getInstance()`: Returns the singleton instance of `ResourceProvider`. - `getResource()`: Returns the shared instance of `Resource`. If the instance does not exist, it should be created. - `getQualifierAttribute(String attributeName)`: Returns an attribute value for the given attribute name. The method should support the following attributes: - `\"creator\"`: Returns `Void.class`. - `\"accountAware\"`: Returns `Boolean.FALSE`. - `\"onProcess\"`: Returns an empty `List`. - For any other attribute name, it should return `null`. - `hasKey(Object key)`: Returns `true` if the given key is recognized by the `ResourceProvider`, otherwise `false`. For this example, the recognized key is the integer `23`. - `hasNoKeys()`: Returns `false` as the `ResourceProvider` recognizes at least one key.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should use data structure List."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "interface", "instruction": "Your code should define an interface named ResourceInterface."}, {"type": "class", "instruction": "Your code should define a class named ResourceProvider."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "You should define an interface named ResourceInterface that includes these methods getInstance, getResource, getQualifierAttribute, hasKey, hasNoKeys."}, {"type": "combination", "instruction": "In your code, the class ResourceProvider should have these properties instance, resource."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "10": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 8]}, "question_id": 60}
{"question": "Design a Java class named `AuthenticationService` that provides a method to create a Retrofit service instance for making HTTP requests with basic authentication. The service should be able to handle different base URLs and credentials for different instances. The class should also support enabling HTTP logging for debugging purposes in a development environment. The `AuthenticationService` class should provide the following functionalities: 1. A method `createService` that accepts a `Map<String, String>` containing the base URL, username, and password for basic authentication. It should return an instance of a Retrofit service interface. 2. The method should support enabling HTTP logging if the application is in debug mode. 3. The method should configure the OkHttpClient with a 60-second timeout for connect, read, and write operations. 4. The Retrofit service interface should use Gson for JSON serialization and deserialization. Write a docstring for the `createService` method that describes its purpose, parameters, and return value. Additionally, provide test cases to verify the correctness of the `AuthenticationService` implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the final keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named LogLevel."}, {"type": "function", "instruction": "Your code should include a function named createService."}, {"type": "interface", "instruction": "Your code should define an interface named RetrofitService."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.auth."}, {"type": "file", "instruction": "Your code should not use the following libraries [org.apache.commons]."}, {"type": "combination", "instruction": "You should define an interface named RetrofitService that includes these methods [getData, postData]."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.auth, which should contain these functions [createService, enableLogging]."}], "instruction_dependence": {"10": [0, 1, 2, 7], "11": [0, 1, 2, 8]}, "question_id": 61}
{"question": "Design a gRPC service that provides a simple user greeting functionality. The service should implement a `GreetUser` method that takes a user's name as input and returns a personalized greeting message. The gRPC service should be defined using Protocol Buffers and should handle the request and response messages appropriately. The `GreetUser` method should follow these specifications: - It accepts a `GreetRequest` message containing a string field for the user's name. - It returns a `GreetResponse` message containing a string field for the greeting message. - If the user's name is not provided, the service should return a default greeting message. - The service should handle any potential errors gracefully and return an appropriate error message. Write the Go code for the gRPC server implementation of the `GreetUser` method, including the necessary Protocol Buffers message definitions. Also, provide test cases to verify the correctness of the implementation.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the defer keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named greetingMessage."}, {"type": "variable", "instruction": "Variable greetingMessage, the initial value should be 'Hello, World!'."}, {"type": "interface", "instruction": "Your code should define an interface named Greeter."}, {"type": "class", "instruction": "Your code should define a class named GreetService."}, {"type": "file", "instruction": "Your code should be organized in a package named greet."}, {"type": "file", "instruction": "Your code should import the following libraries google.golang.org/grpc, context, fmt."}, {"type": "file", "instruction": "Your code should use the function NewServer from the library google.golang.org/grpc."}, {"type": "combination", "instruction": "In your code, the class GreetService should have these properties name, message."}, {"type": "combination", "instruction": "Your code should be organized in a package named greet, which should contain these classes GreetService, GreetClient."}], "instruction_dependence": {"10": [0, 1, 2, 3, 9], "15": [0, 1, 2, 3, 14], "16": [0, 1, 2, 3, 12], "17": [0, 1, 2, 3, 12, 13]}, "question_id": 62}
{"question": "Design a Python Django application that models a news aggregation system. The system should be able to track news articles from various sources and associate them with politicians. The application should consist of two models: `Source` and `Article`. The `Source` model represents the news sources and should include the following fields: `name`, `rss`, `type`, and `image`. The `Article` model represents the news articles and should include the following fields: `headline`, `source`, `published`, `link`, `first_image_url`, `guid`, `created`, and `politician`. Additionally, the `Article` model should have a string representation that returns its headline and a Meta class with a `verbose_name_plural` set to \"Articles\".", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `source_count`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `source_count` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `get_article_count`."}, {"type": "class", "instruction": "Your code should define a class named `NewsAggregator`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `news_aggregator`."}, {"type": "file", "instruction": "Your code should not use the following libraries: `pandas`, `numpy`."}, {"type": "combination", "instruction": "The function `get_article_count` should return a integer as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `news_aggregator`, which should contain these functions: `get_article_count`, `add_source`, `remove_source`."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10], "14": [0, 1, 2, 9], "15": [0, 1, 2, 12]}, "question_id": 63}
{"question": "Design a RESTful API server using the Gin web framework in Go that provides a simple task management service. The service should allow users to create, read, update, and delete tasks. Each task should have an ID, a title, a description, and a boolean field indicating whether the task is completed. The API should have the following endpoints: - `POST /v1/tasks`: Create a new task. The request body should contain the title and description of the task. The server should generate a unique ID for each task and set the completed field to false by default. - `GET /v1/tasks`: Retrieve a list of all tasks. - `GET /v1/tasks/:id`: Retrieve a task by its ID. - `PUT /v1/tasks/:id`: Update a task by its ID. The request body can contain the title, description, and/or completed status. - `DELETE /v1/tasks/:id`: Delete a task by its ID. The server should handle errors appropriately, returning the correct HTTP status codes and error messages when necessary (e.g., when a task with a given ID does not exist).", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named taskID."}, {"type": "variable", "instruction": "Your code should define an enumeration named TaskStatus."}, {"type": "variable", "instruction": "Variable taskID, the initial value should be 1."}, {"type": "function", "instruction": "Your code should include a function named handleTaskRequest."}, {"type": "class", "instruction": "Your code should define a class named Task."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "In your code, the class Task should have these properties ID, Title, Description, Completed."}, {"type": "combination", "instruction": "The function handleTaskRequest should take taskID, title, description, completed as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 4, 12], "9": [0, 8, 12], "10": [0, 8, 12], "11": [0, 7, 12]}, "question_id": 64}
{"question": "Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows:\n\n- The left subtree of a node contains only nodes with keys less than the node's key.\n- The right subtree of a node contains only nodes with keys greater than the node's key.\n- Both the left and right subtrees must also be binary search trees.\n\nWrite a C++ class named `Solution` with a method `isValidBST` that takes the root of a binary tree and returns `true` if the tree is a valid BST, or `false` otherwise. The `TreeNode` structure is defined as follows:\n\n```cpp\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n```\n\nThe `Solution` class should also contain a helper method `checkBST` that is used by `isValidBST` to recursively check the validity of the tree. The `checkBST` method should not be exposed publicly.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `isValid`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `TreeStatus`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `isValid`, should be a global variable."}, {"type": "variable", "instruction": "Variable `isValid`, the initial value should be `true`."}, {"type": "interface", "instruction": "Your code should define an interface named `TreeValidator`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "file", "instruction": "Your code should be organized in a package named `bstValidator`."}, {"type": "combination", "instruction": "You should initialize an object named `validator` as an instance of the `Solution` class using `root` for initialization."}, {"type": "combination", "instruction": "You should define an interface named `TreeValidator` that includes these methods `isValidBST`, `checkBST`."}, {"type": "combination", "instruction": "In your code, the class `Solution` should have these properties `isValid`, `TreeStatus`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `bstValidator`, which should contain these classes `Solution`, `TreeValidator`."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 4, 17], "7": [0, 1, 4, 17], "8": [0, 1, 4, 17], "10": [0, 1, 9, 17], "13": [0, 1, 11, 17], "14": [0, 1, 9, 17], "15": [0, 1, 11, 17], "16": [0, 1, 11, 12, 17]}, "question_id": 65}
{"question": "Design a simple MVC (Model-View-Controller) application in Python that manages a database of students. The application should be able to display all students, add a new student, update a student's name, and delete a student by ID. The database operations are simulated by a class `SinhvienDB` which provides the necessary methods to interact with the data. The `SinhvienController` class is responsible for handling the user input and updating the view.\n\nThe `SinhvienDB` class should have the following methods:\n- `get_all_sinhvien()`: Returns a list of all students in the database.\n- `them_sinhvien(hoten)`: Adds a new student with the given name to the database and returns the ID of the new student.\n- `update_sinhvien(hoten, idsinhvien)`: Updates the name of the student with the given ID.\n- `delete_sinhvien(idsinhvien)`: Deletes the student with the given ID from the database.\n\nThe `SinhvienView` class should have the following methods:\n- `display_all_sinhvien(items)`: Displays all the students in the given list.\n- `ket_qua_insert(resultID)`: Displays the result of the insert operation.\n- `ket_qua_update()`: Displays the result of the update operation.\n- `ket_qua_delete()`: Displays the result of the delete operation.\n\nWrite the `SinhvienDB` and `SinhvienView` classes and provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the `class` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `tuple`."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `student_list`."}, {"type": "variable", "instruction": "Variable `student_list`, type should be `list`."}, {"type": "variable", "instruction": "Variable `student_list`, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `main`."}, {"type": "interface", "instruction": "Your code should define an interface named `DatabaseOperations`."}, {"type": "class", "instruction": "Your code should define a class named `SinhvienController`."}, {"type": "file", "instruction": "Your code should not use the following libraries `pandas`."}, {"type": "combination", "instruction": "Your code should define a class named `SinhvienDB` that implements the `DatabaseOperations` interface."}, {"type": "combination", "instruction": "The function `get_all_sinhvien` should return a `list` as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "6": [0, 1, 4, 13], "11": [0, 1, 8, 9, 13], "12": [0, 1, 7, 13]}, "question_id": 66}
{"question": "Please write a complete Python function `solve(smiles)`, which takes a SMILES input and returns the total number of electrons in the structure, including hydrogen atoms. The electron count of an atom is equal to its atomic number minus its formal charge.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the import keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named electron_count."}, {"type": "variable", "instruction": "Variable electron_count, should be a global variable."}, {"type": "variable", "instruction": "Variable electron_count, the initial value should be 0."}, {"type": "variable", "instruction": "Variable electron_count should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Molecule."}, {"type": "file", "instruction": "Your code should not use the following libraries ['rdkit', 'openbabel']."}, {"type": "combination", "instruction": "In your code, the class Molecule should have these methods ['calculate_electrons', 'parse_smiles']."}, {"type": "combination", "instruction": "The function solve should return a int as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 6], "11": [0, 1, 2, 3, 10], "14": [0, 1, 2, 3, 12], "15": [0, 1, 2, 3, 10]}, "question_id": 67}
{"question": "Write a Python class that represents a Django application configuration for a hypothetical app called 'DataAnalyzer'. This app is designed to perform data analysis tasks within a Django project. The class should be named `DataAnalyzerConfig` and it should inherit from `AppConfig`. The class should have the following attributes:\n\n- `name`: The full Python path to the application, which is `'data_analyzer'`.\n- `verbose_name`: A human-readable name for the application, which is `\"Data Analyzer\"`.\n- `default_auto_field`: The default field type to use for auto-created primary keys, which should be `'django.db.models.BigAutoField'`.\n\nAdditionally, the class should override the `ready` method to print `\"Data Analyzer app is ready!\"` when the application is fully loaded.\n\nProvide a code snippet that defines the `DataAnalyzerConfig` class according to the specifications above. Also, include a simple test case that creates an instance of the `DataAnalyzerConfig` and calls its `ready` method to demonstrate its functionality.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named config_instance."}, {"type": "variable", "instruction": "Variable config_instance, type should be DataAnalyzerConfig."}, {"type": "variable", "instruction": "Variable config_instance, should not be a global variable."}, {"type": "variable", "instruction": "Variable config_instance should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named test_ready_method."}, {"type": "combination", "instruction": "The function test_ready_method should take self as parameters."}, {"type": "combination", "instruction": "The function test_ready_method should return a None as its result."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "10": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 8], "13": [0, 1, 2, 3, 12], "14": [0, 1, 2, 3, 12]}, "question_id": 68}
{"question": "Please describe how you would implement a feature in a simple library management system: adding a new book. In this system, whenever the user wants to add a new book, the system needs to reset all input fields so that the user can enter the information for the new book. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JTextField;\npublic class BookManager {\n    private JTextField bookNameField;\n    private JTextField authorField;\n    private JTextField publisherField;\n    private JTextField yearField;\n    public BookManager(JTextField bookNameField, JTextField authorField, JTextField publisherField, JTextField yearField) {}\n    public void addNewBook() {}\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bookNameField."}, {"type": "variable", "instruction": "Variable bookNameField, type should be JTextField."}, {"type": "variable", "instruction": "Variable bookNameField, should not be a global variable."}, {"type": "variable", "instruction": "Variable bookNameField, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named addNewBook."}, {"type": "interface", "instruction": "Your code should define an interface named BookManagerInterface."}, {"type": "file", "instruction": "Your code should import the following libraries javax.swing.JTextField."}, {"type": "combination", "instruction": "You should define an interface named BookManagerInterface that includes these methods addNewBook."}, {"type": "combination", "instruction": "The function addNewBook should take bookNameField, authorField, publisherField, yearField as parameters."}, {"type": "combination", "instruction": "The function addNewBook should return a void as its result."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "11": [0, 1, 9], "12": [0, 1, 8], "13": [0, 1, 8]}, "question_id": 69}
{"question": "Please design a Java method that retrieves and returns the information of a product with a specific status. If the product exists and its status is active (status code is 1), return the product information; if the product does not exist or its status is not active, throw an exception. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass ProductNotFoundException extends RuntimeException {\n    public ProductNotFoundException(String message) {\n        super(message);\n    }\n}\nclass Product {\n    private String id;\n    private int status; \n    public Product(String id, int status) {\n        this.id = id;\n        this.status = status;\n    }\n    public String getId() {\n        return id;\n    }\n    public int getStatus() {\n        return status;\n    }\n}\nclass ProductRepository {\n    private Map<String, Product> productMap = new HashMap<>();\n    public ProductRepository() {\n    }\n    public Product findById(String id) {\n    }\n}\npublic class ProductFinder {\n    private ProductRepository productRepo = new ProductRepository();\n    public Product findActiveProductById(String id) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the throw keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Your code should define an enumeration named ProductStatus."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named findActiveProductById."}, {"type": "interface", "instruction": "Your code should define an interface named ProductRepositoryInterface."}, {"type": "class", "instruction": "Your code should define a class named ProductFinder."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.HashMap, java.util.Map."}, {"type": "file", "instruction": "Your code should use the function findById from the library ProductRepository."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.ArrayList."}, {"type": "combination", "instruction": "In your code, the class ProductFinder should have these methods findActiveProductById."}, {"type": "combination", "instruction": "The function findActiveProductById should return a Product as its result."}], "instruction_dependence": {"8": [0, 1, 2, 6], "13": [0, 1, 2, 12], "15": [0, 1, 2, 11], "16": [0, 1, 2, 9]}, "question_id": 70}
{"question": "Please write a function in Go that reverses the input string. The input string is given as a character array s, implement the function `func ReverseString(str string) string`.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the return keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure slice."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named reversedStr."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable reversedStr, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named ReverseString."}, {"type": "function", "instruction": "Your code should not use any functions from the strings package."}, {"type": "class", "instruction": "Your code should define a class named StringReverser."}, {"type": "file", "instruction": "Your code should import the following libraries fmt."}, {"type": "file", "instruction": "Your code should use the function Println from the library fmt."}, {"type": "combination", "instruction": "You should initialize an object named reverser as an instance of the StringReverser class using str for initialization."}, {"type": "combination", "instruction": "The function ReverseString should return a string as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "12": [0, 1, 2, 11], "13": [0, 1, 2, 10], "14": [0, 1, 2, 8]}, "question_id": 71}
{"question": "Write a Python program that scrapes airfield data from a specified URL and processes the information into a structured JSON format. The program should perform the following tasks:\n\n1. Scrape airfield and runway data from the given URL, which contains an HTML table with airfield information.\n2. Parse the HTML content to extract airfield and runway details, such as code, name, magnetic orientation, geographic coordinates, altitude, traffic, ground level, status, runway details, surface type, orientation, threshold positions, and altitudes.\n3. Clean and transform the data into a more usable format, including:\n   - Title-casing airfield names.\n   - Capitalizing status fields.\n   - Converting altitude, magnetic orientation, and ground level to appropriate numeric types.\n   - Splitting geographic coordinates, runway orientations, and positions into separate components.\n   - Parsing and separating runway surface details into length, width, and surface type.\n4. Save the processed data into a JSON file with a structured format, where each airfield is an object with its details and an array of runways, each with its own details.\n\nThe program should handle any missing or incomplete data gracefully by setting the corresponding fields to `None`.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should use the 'with' keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'airfield_data'."}, {"type": "variable", "instruction": "Variable 'airfield_data', the initial value should be an empty dictionary."}, {"type": "variable", "instruction": "Variable 'airfield_data', should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named 'AirfieldInterface'."}, {"type": "class", "instruction": "Your code should define a class named 'Airfield'."}, {"type": "file", "instruction": "Your code should not use the following libraries ['selenium', 'scrapy']."}, {"type": "combination", "instruction": "You should define an interface named 'AirfieldInterface' that includes these methods ['get_code', 'get_name', 'get_coordinates']."}, {"type": "combination", "instruction": "In your code, the class 'Airfield' should have these properties ['code', 'name', 'coordinates']."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 200 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 12, 13], "6": [0, 1, 2, 4, 12, 13], "10": [0, 1, 2, 7, 12, 13], "11": [0, 1, 2, 8, 12, 13]}, "question_id": 72}
{"question": "Write a program that calculates the salary of an employee. The company pays its employees per hour. The program should read the employee's number (an integer), the number of hours worked by the employee (an integer), and the amount the employee earns per hour (a float). It should then calculate and display the employee's number and salary, formatted to two decimal places. The output should be as follows:\n```\nNUMBER = {employee_number}\nSALARY = U$ {salary:.2f}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named employee_data."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable employee_data should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_salary."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Employee."}, {"type": "combination", "instruction": "You should initialize an object named emp as an instance of the Employee class using employee_number, hours_worked, and hourly_rate for initialization."}], "instruction_dependence": {"10": [0, 1, 2, 3, 9], "11": [0, 1, 2, 3, 9], "13": [0, 1, 2, 3, 12], "15": [0, 1, 2, 3, 14]}, "question_id": 73}
{"question": "Write a C++ program that simulates a simple server restart mechanism. The server should be able to restart itself using the original command-line arguments it was started with. The program should include a `Server` class with a `do_restart` method that takes the original command-line arguments and attempts to restart the server using the `execve` system call. The `duplicate_arguments` function is provided to help duplicate the arguments. The `Server` class should also have a `run` method that simulates the server's operation by printing a message and sleeping for a short duration. After the sleep, the server should automatically call `do_restart` to simulate a restart. The program should handle any errors that occur during the restart attempt and clean up any allocated memory.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `restartAttempts`."}, {"type": "variable", "instruction": "Variable `restartAttempts`, the initial value should be 0."}, {"type": "variable", "instruction": "Variable `restartAttempts`, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `IRestartable`."}, {"type": "class", "instruction": "Your code should define a class named `Server`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "You should define an interface named `IRestartable` that includes these methods `do_restart`."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 5, 12], "7": [0, 1, 5, 12], "10": [0, 1, 9, 12], "11": [0, 1, 8, 12]}, "question_id": 74}
{"question": "You are given an integer `n` and a string array `words` with an index starting from **0**, and a **binary** array `groups` with an index starting from **0**. The lengths of the two arrays are both `n`. You need to select the **longest subsequence** from the index `[0, 1, ..., n - 1]`, and consider this subsequence as a length of `k` in `[i0, i1, ..., ik - 1]`, for all `j` satisfying `0 < j + 1 < k`, `groups[ij] != groups[ij + 1]`. Please return a string array. It is a string array formed by concatenating the strings in the `words` array corresponding to the index subsequence in succession. If there are several solutions, return any one. A **subsequence** refers to a new array obtained by removing some elements (or possibly not removing any elements) from the original array and not changing the relative positions of the remaining elements. **Note:** The string lengths in `words` may **not be equal**.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `result`."}, {"type": "variable", "instruction": "Variable `result`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `result` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `getWordsInLongestSubsequence`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the `algorithm` library."}, {"type": "combination", "instruction": "The function `getWordsInLongestSubsequence` should take `n`, `words`, and `groups` as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 12], "7": [0, 1, 2, 5, 12], "9": [0, 1, 2, 8, 12], "11": [0, 1, 2, 8, 12]}, "question_id": 75}
{"question": "Please implement the following code in C++ with the function signature:\n\n`std::vector<long> derivative(std::vector<long> xs)`\n\nNotes:\n1. Only implement the target function and include the necessary headers. Do not generate any additional code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named derivative."}, {"type": "function", "instruction": "Your code should not use any functions from the <algorithm> library."}, {"type": "class", "instruction": "Your code should define a class named MathUtils."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named math_operations."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 5, 12], "10": [0, 1, 9, 12]}, "question_id": 76}
{"question": "You are given a set of points on a 2D plane and a specific point `(x, y)`. Write a program to find the index of the nearest point from the given set that is valid. A point is considered valid if it shares the same x-coordinate or the y-coordinate with the point `(x, y)`. The distance between two points is measured using the Manhattan distance, which is the sum of the absolute differences of their x-coordinates and the absolute differences of their y-coordinates. Implement the `Solution` class with the following method: - `int nearestValidPoint(int x, int y, vector<vector<int>>& points)`: This method takes an integer `x`, an integer `y`, and a vector of vectors of integers `points`, where `points[i] = [xi, yi]` represents the coordinates of the `i`-th point. The method should return the index of the nearest valid point to `(x, y)`. If there are multiple nearest points, return the one with the smallest index. If there are no valid points, return `-1`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `minDistance`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `PointType`."}, {"type": "variable", "instruction": "Variable `minDistance`, type should be `int`."}, {"type": "variable", "instruction": "Variable `minDistance`, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named `nearestValidPoint`."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "file", "instruction": "Your code should be organized in a package named `geometry`."}, {"type": "file", "instruction": "Your code should import the following libraries `<vector>, <algorithm>`."}, {"type": "combination", "instruction": "The function `nearestValidPoint` should take `int x, int y, vector<vector<int>>& points` as parameters."}, {"type": "combination", "instruction": "The function `nearestValidPoint` should return a `int` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `geometry`, which should contain these functions `nearestValidPoint`."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 15], "7": [0, 1, 2, 4, 15], "12": [0, 1, 2, 8, 15], "13": [0, 1, 2, 8, 15], "14": [0, 1, 2, 10, 15]}, "question_id": 77}
{"question": "Write a program that reads two integers from the standard input and calculates their bitwise XOR. The program should be optimized for fast input and output operations, making it suitable for scenarios where a large number of integer pairs need to be processed. The program should use the provided code snippet as a starting point, which includes a namespace `fastIO` that contains functions for fast input and output operations. The `read` function reads an integer from the standard input, and the `print` function writes an integer to the standard output. The `main` function should use these functions to read two integers `a` and `b`, calculate their bitwise XOR, and print the result.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, should be a global variable."}, {"type": "variable", "instruction": "Variable result, the initial value should be 0."}, {"type": "function", "instruction": "Your code should include a function named calculateXOR."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FastIO."}, {"type": "file", "instruction": "Your code should be organized in a package named bitwise_operations."}, {"type": "file", "instruction": "Your code should import the following libraries iostream, bitset."}, {"type": "file", "instruction": "Your code should use the function read from the library fastIO."}, {"type": "combination", "instruction": "You should initialize an object named io as an instance of the FastIO class using no parameters for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named bitwise_operations, which should contain these functions calculateXOR, main."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "7": [0, 1, 2, 6], "11": [0, 1, 2, 10], "12": [0, 1, 2, 8], "13": [0, 1, 2, 9]}, "question_id": 78}
{"question": "Design a C++ program that models a simplified hierarchy of helicopter variants based on the given code snippet. Each helicopter variant inherits from a base helicopter class `vtx_H60_base` and contains a turret system. The turret system is composed of cargo turrets, and each variant may have a different number of cargo turrets. Your task is to create a base class `Helicopter` with a method `getTurretCount()` that returns the number of cargo turrets in the helicopter. Then, derive classes for each helicopter variant (e.g., `UH60M`, `HH60`, `MH60S`, etc.) from the base class. Each derived class should override the `getTurretCount()` method to return the correct number of cargo turrets for that variant. Additionally, write a main function that creates an instance of each helicopter variant, calls the `getTurretCount()` method, and prints the helicopter variant name along with the number of cargo turrets it has.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 4 classes."}, {"type": "global", "instruction": "Your code should not use the `goto` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `vector`."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `turretCount`."}, {"type": "variable", "instruction": "Variable `turretCount`, should be a global variable."}, {"type": "variable", "instruction": "Variable `turretCount`, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named `Helicopter`."}, {"type": "file", "instruction": "Your code should be organized in a package named `helicopter_variants`."}, {"type": "file", "instruction": "Your code should import the following libraries `iostream`, `vector`."}, {"type": "file", "instruction": "Your code should use the function `push_back` from the library `vector`."}, {"type": "combination", "instruction": "You should initialize an object named `uh60m` as an instance of the `UH60M` class using `turretCount` for initialization."}, {"type": "combination", "instruction": "In your code, the class `Helicopter` should have these properties `turretCount`, `variantName`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `helicopter_variants`, which should contain these functions `getTurretCount`, `printTurretCount`."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8, 18], "10": [0, 1, 2, 3, 4, 8, 18], "14": [0, 1, 2, 3, 4, 13, 18], "15": [0, 1, 2, 3, 4, 11, 18], "16": [0, 1, 2, 3, 4, 11, 18], "17": [0, 1, 2, 3, 4, 12, 18]}, "question_id": 79}
{"question": "Design a class `DoublyLinkedList` that uses the `Node` class provided in the given code snippet. The `Node` class represents a node in a doubly linked list, where each node contains an integer value and pointers to the next and previous nodes in the list. The `DoublyLinkedList` class should support the following operations: 1. `void append(int value)`: Appends a new node with the given value to the end of the list. 2. `bool remove(int value)`: Removes the first occurrence of a node with the given value from the list. Returns `true` if the node was found and removed, `false` otherwise. 3. `void printList()`: Prints the values of all nodes in the list from the head to the tail. 4. `void printListReverse()`: Prints the values of all nodes in the list from the tail to the head. 5. `int getSize()`: Returns the number of nodes in the list. Ensure that your implementation properly manages memory, avoiding memory leaks and ensuring that all nodes are properly deleted when the list is destroyed.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named head."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named append."}, {"type": "interface", "instruction": "Your code should define an interface named ListInterface."}, {"type": "class", "instruction": "Your code should define a class named DoublyLinkedList."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named linkedlist."}, {"type": "combination", "instruction": "Your code should define a class named DoublyLinkedList that implements the ListInterface interface."}, {"type": "combination", "instruction": "The function append should take value as a parameter."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 16], "12": [0, 1, 2, 3, 11, 16], "14": [0, 1, 2, 3, 10, 11, 16], "15": [0, 1, 2, 3, 9, 16]}, "question_id": 80}
{"question": "Here is an integer array `nums` of length `n` indexed from **0**, along with two integers `indexDifference` and `valueDifference`. Your task is to find **2** indices `i` and `j` within the range `[0, n - 1]` that meet all of the following conditions: * `abs(i - j) >= indexDifference` and * `abs(nums[i] - nums[j]) >= valueDifference`. Return an integer array `answer`. If there exist two indices satisfying the given conditions, let `answer = [i, j]`; otherwise, `answer = [-1, -1]`. In case there are multiple pairs of indices to choose from, returning any of them is acceptable. **Note:** `i` and `j` could be **equal**.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `answer`."}, {"type": "variable", "instruction": "Variable `answer`, the initial value should be `[-1, -1]`."}, {"type": "variable", "instruction": "Variable `answer` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `findIndices`."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "combination", "instruction": "The function `findIndices` should take `nums`, `indexDifference`, and `valueDifference` as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "10": [0, 1, 2, 8]}, "question_id": 81}
{"question": "Write a function `can_form_arithmetic_sequence` that determines whether a given list of integers can be rearranged to form an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between consecutive terms is constant. The function should return `True` if the list can be rearranged to form an arithmetic sequence, and `False` otherwise. The function should adhere to the following requirements: - The input list will contain at least two integers. - The function should handle both positive and negative integers, as well as zero. - The function should return a boolean value.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named sorted_list."}, {"type": "variable", "instruction": "Variable sorted_list, type should be list."}, {"type": "variable", "instruction": "Variable sorted_list, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named can_form_arithmetic_sequence."}, {"type": "file", "instruction": "Your code should not use the following libraries numpy."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6]}, "question_id": 82}
{"question": "Please write a Python function `islands(map): int` to solve this problem: You are given a two-dimensional grid map composed of '1' (land) and '0' (water). Calculate and return the number of islands in the grid. Islands are always surrounded by water and each island can only be formed by lands that are adjacent horizontally and/or vertically. Moreover, you can assume that all four edges of the grid are surrounded by water.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named island_count."}, {"type": "variable", "instruction": "Variable island_count, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named Grid."}, {"type": "combination", "instruction": "In your code, the class Grid should have these properties ['map', 'rows', 'cols']."}, {"type": "combination", "instruction": "In your code, the class Grid should have these methods ['dfs', 'count_islands']."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 11], "9": [0, 1, 2, 8, 11], "10": [0, 1, 2, 8, 11]}, "question_id": 83}
{"question": "Please write a complete Python function `solve(smiles1, smiles2)`. This function should take two SMILES as input and determine whether they represent the exact same molecular structure. The function should return True or False. It is known that to determine if two mol objects have the same molecular structure, one can convert them to their International Chemical Identifier (InChI) and then check for equality. Alternatively, one may make a judgement based on the equivalence of Canonical SMILES representations that do not contain AtomMap.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable result, should be a global variable."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "class", "instruction": "Your code should define a class named MoleculeComparator."}, {"type": "combination", "instruction": "You should initialize an object named comparator as an instance of the MoleculeComparator class using smiles1 and smiles2 for initialization."}, {"type": "combination", "instruction": "The function solve should return a boolean as its result."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "9": [0, 1, 2, 6], "12": [0, 1, 2, 11], "13": [0, 1, 2, 10]}, "question_id": 84}
{"question": "Please write unittest test cases for the following python function using unittest:\n\ndef add_pad_of_512_bits(vector_block_holding_ascii_characters):\n    length_of_message_in_bits = len(vector_block_holding_ascii_characters) * 8\n    zeroes_to_add = 447 - length_of_message_in_bits\n    t1_block = 0x80\n    vector_block_holding_ascii_characters.append(t1_block)\n    zeroes_to_add -= 7\n    for _ in range(zeroes_to_add // 8):\n        vector_block_holding_ascii_characters.append(0x00000000)\n    the_big_64_blob_bit = format(length_of_message_in_bits, '064b')\n    for i in range(0, 64, 8):\n        temp_string_holder = the_big_64_blob_bit[i:i+8]\n        vector_block_holding_ascii_characters.append(int(temp_string_holder, 2))\n    return vector_block_holding_ascii_characters\n\nThe answer should meet the following requirements:\n1. These unit test cases should correctly use the testing framework, have reasonable input and test result assertions.\n2. Please write the test code in a markdown ```python``` wrapper.\n3. Please only provide test code and unittest.main() to execute all test cases and output test results. There is no need to write the original function.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named input_data."}, {"type": "variable", "instruction": "Variable input_data should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the disallowed_function_list."}, {"type": "class", "instruction": "Your code should define a class named TestAddPadOf512Bits."}, {"type": "file", "instruction": "Your code should import the following libraries unittest."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7]}, "question_id": 85}
{"question": "Write a function `rotate_matrix_90` that rotates a given N x N matrix by 90 degrees in a clockwise direction in place, meaning you should not use any extra space for another matrix. The function should modify the input matrix directly. The function should handle square matrices of any size. However, it should throw an error if the matrix is not square or if the input is not a valid matrix. The function should adhere to the following signature:\n```python\ndef rotate_matrix_90(matrix: List[List[int]]) -> None:\n    \"\"\"\n    Rotates a given N x N matrix by 90 degrees clockwise in place.\n\n    :param matrix: A list of N lists of integers representing the matrix to rotate.\n    :raises ValueError: If the matrix is not square or if the input is not a valid matrix.\n    \"\"\"\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure dictionary."}, {"type": "variable", "instruction": "Your code should define a variable named temp."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable temp, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named rotate_matrix_90."}, {"type": "combination", "instruction": "The function rotate_matrix_90 should take matrix as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6]}, "question_id": 86}
{"question": "Reimplement the following code to optimize its performance using a binary search approach.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named mid."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable mid should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named search_insert_position."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the bisect module."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6]}, "question_id": 87}
{"question": "Please write a Java program that displays detailed information about all the books in a library. Each book includes a title, author, ISBN number, and publication year. The program should read this information from a predefined list of books and display it in a formatted manner. Include separators before and after displaying each book's information. Additionally, if the book list is empty, an appropriate message should be printed. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass Book {\n    private String title;\n    private String author;\n    private String isbn;\n    private int year;\n    public Book(String title, String author, String isbn, int year) {\n    }\n    public String getTitle() {\n    }\n    public String getAuthor() {\n    }\n    public String getIsbn() {\n    }\n    public int getYear() {\n    }\n}\nclass BookReader {\n    public static List<Book> getAll() {\n    }\n}\npublic class LibraryDisplay {\n    private static final int WIDTH = 50;\n    public static void displayAllBooks() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bookCount."}, {"type": "variable", "instruction": "Your code should define an enumeration named BookStatus."}, {"type": "variable", "instruction": "Variable bookCount, type should be int."}, {"type": "variable", "instruction": "Variable bookCount, the initial value should be 0."}, {"type": "variable", "instruction": "Variable bookCount should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the System.out.println."}, {"type": "interface", "instruction": "Your code should define an interface named Displayable."}, {"type": "class", "instruction": "Your code should define a class named Library."}, {"type": "file", "instruction": "Your code should be organized in a package named library."}, {"type": "combination", "instruction": "Your code should define a class named Library that implements the Displayable interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named library, which should contain these classes Book, BookReader, LibraryDisplay."}], "instruction_dependence": {"7": [0, 5], "8": [0, 5], "9": [0, 5], "14": [0, 11, 12], "15": [0, 12, 13]}, "question_id": 88}
{"question": "Vertical Sum of a Binary Tree\n\nGiven a binary tree, calculate the vertical sum of the nodes that are in the same vertical line. Print all sums through the vertical lines starting from the left-most line to the right-most line.\n\nA vertical line is defined by the horizontal distance from the root node. The root node is at horizontal distance 0, the left child of the root is at horizontal distance -1, the right child of the root is at horizontal distance +1, and so on for all nodes.\n\nWrite a function `void dfs(Node *root, int horizontalDistance)` that performs a depth-first search on the binary tree to calculate the vertical sum and stores the result in a global map `map<int,int> hm` where the key is the horizontal distance and the value is the sum of the nodes at that horizontal distance.\n\nAlso, write a function `void printHashMap()` that prints the sums in the order of their horizontal distances.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named hm."}, {"type": "variable", "instruction": "Variable hm, type should be map<int,int>."}, {"type": "variable", "instruction": "Variable hm should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named Printable."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named BinaryTree."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries <map>, <iostream>."}, {"type": "file", "instruction": "Your code should not use the following libraries <vector>."}, {"type": "combination", "instruction": "Your code should define a class named BinaryTree that implements the Printable interface."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "10": [0, 1, 2, 9], "12": [0, 1, 2, 11], "15": [0, 1, 2, 9, 11]}, "question_id": 89}
{"question": "Write a Python program that calculates the Euclidean distance between two points in a 2D plane. The program should define a function `euclidean_distance(point1, point2)` where `point1` and `point2` are tuples representing the coordinates of the two points. The function should return the Euclidean distance between these points. The Euclidean distance between two points `(x1, y1)` and `(x2, y2)` is given by the formula: \\[ \text{distance} = \\sqrt{(x2 - x1)^2 + (y2 - y1)^2} \\]. The program should include proper error handling to check if the provided inputs are tuples containing two numeric values each. If the input is invalid, the function should raise a `ValueError` with an appropriate error message. Additionally, provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the `def` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `distance`."}, {"type": "variable", "instruction": "Variable `distance`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `distance`, the initial value should be 0."}, {"type": "function", "instruction": "Your code should include a function named `euclidean_distance`."}, {"type": "class", "instruction": "Your code should define a class named `Point`."}, {"type": "file", "instruction": "Your code should be organized in a package named `geometry`."}, {"type": "file", "instruction": "Your code should not use the following libraries `numpy`."}, {"type": "combination", "instruction": "In your code, the class `Point` should have these methods `get_x`, `get_y`."}, {"type": "combination", "instruction": "The function `euclidean_distance` should return a `float` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `geometry`, which should contain these classes `Point`."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "9": [0, 1, 2, 3, 7], "14": [0, 1, 2, 3, 11], "15": [0, 1, 2, 3, 10], "16": [0, 1, 2, 3, 11, 12]}, "question_id": 90}
{"question": "Design a class `TrainingManager` that manages the training and boosting of a soccer team's players. The class should be able to handle the following functionalities:\n\n1. Schedule training sessions for forwards, midfielders, defenders, and goalkeepers.\n2. Apply boosts to the respective player positions after training sessions.\n3. Check if a player position has been trained and boosted.\n4. Retrieve the total boost values for each player position.\n\nThe `TrainingManager` class should use the `TrainingDto` class provided in the given code snippet to store the training and boost information. The `TeamDto` class is assumed to exist and does not need to be implemented.\n\nImplement the `TrainingManager` class with the following methods:\n\n- `scheduleTraining(String position)`: Schedules a training session for the specified position (forward, midfielder, defender, goalkeeper).\n- `applyBoost(String position, Long boostValue)`: Applies a boost to the specified position if the training has been scheduled.\n- `isPositionTrained(String position)`: Returns `true` if the specified position has been trained, `false` otherwise.\n- `isPositionBoosted(String position)`: Returns `true` if the specified position has been boosted, `false` otherwise.\n- `getTotalBoost(String position)`: Returns the total boost value for the specified position.\n\nWrite a main method with test cases to verify the correctness of the `TrainingManager` class.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named totalBoost."}, {"type": "variable", "instruction": "Variable totalBoost, type should be Long."}, {"type": "variable", "instruction": "Variable totalBoost, should not be a global variable."}, {"type": "variable", "instruction": "Variable totalBoost, the initial value should be 0."}, {"type": "variable", "instruction": "Variable totalBoost should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named TrainingInterface."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.*."}, {"type": "file", "instruction": "Your code should use the function scheduleTraining from the library TrainingManager."}, {"type": "combination", "instruction": "You should define an interface named TrainingInterface that includes these methods scheduleTraining, applyBoost, isPositionTrained, isPositionBoosted, getTotalBoost."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "6": [0, 1, 4, 13], "7": [0, 1, 4, 13], "8": [0, 1, 4, 13], "11": [0, 1, 10, 13], "12": [0, 1, 9, 13]}, "question_id": 91}
{"question": "Design a multi-threaded C++ application that uses a connection pool to execute a database query in parallel. The application should create a pool of database connections and spawn multiple threads, each of which retrieves a connection from the pool, executes a query to fetch the current date and time from the database, and prints the result along with the thread identifier. After executing the query, each thread should release the connection back to the pool. The application should handle any exceptions that may occur during the database operations or thread management and ensure that all resources are properly released upon completion or error. The database used in this example is Oracle, and the `ocilib` library is used for database operations. The application should follow these requirements: - Initialize the environment for multi-threaded operations. - Create a connection pool with a specified maximum number of connections. - Spawn a fixed number of threads, each executing a database query. - Each thread should print its identifier and the fetched date and time. - Ensure that each thread properly closes its connection after use. - Join all threads before the application exits. - Clean up the environment before the application exits. - Handle exceptions gracefully and print any error messages.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named connectionPool."}, {"type": "variable", "instruction": "Variable connectionPool, type should be std::vector<ocilib::Connection>."}, {"type": "variable", "instruction": "Variable connectionPool, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named executeQuery."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the std::terminate disallowed_function_list."}, {"type": "interface", "instruction": "Your code should define an interface named DatabaseOperation."}, {"type": "class", "instruction": "Your code should define a class named ConnectionManager."}, {"type": "file", "instruction": "Your code should import the following libraries ocilib, thread, vector, iostream."}, {"type": "file", "instruction": "Your code should use the function ocilib::Connection::Create from the library ocilib."}, {"type": "combination", "instruction": "You should define an interface named DatabaseOperation that includes these methods executeQuery, releaseConnection."}, {"type": "combination", "instruction": "In your code, the class ConnectionManager should have these methods getConnection, releaseConnection, initializePool."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "6": [0, 5], "11": [0, 10], "12": [0, 8], "13": [0, 9]}, "question_id": 92}
{"question": "Design a Java program that manages a database of sentences. The program should provide functionality to add, retrieve, update, and delete sentences from the database. Each sentence should have a unique identifier and the text of the sentence itself. The program should use MyBatis-Plus to interact with the database, and the `Sentence` class should have at least two fields: `id` (of type `Long`) and `text` (of type `String`). The `SentenceMapper` interface, which extends `BaseMapper` from MyBatis-Plus, should be used to perform CRUD operations on the `Sentence` objects. Write a class `SentenceService` that uses `SentenceMapper` to perform the database operations. The service should provide methods to: - Add a new sentence to the database. - Retrieve a sentence by its ID. - Update the text of an existing sentence. - Delete a sentence by its ID. Provide test cases to verify the correctness of the `SentenceService` methods.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the `interface` keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `sentenceId`."}, {"type": "variable", "instruction": "Variable `sentenceId`, the initial value should be `1L`."}, {"type": "variable", "instruction": "Variable `sentenceId` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `addSentence`."}, {"type": "function", "instruction": "Your code should not use any functions from the `java.util.Collections`."}, {"type": "interface", "instruction": "Your code should define an interface named `SentenceMapper`."}, {"type": "class", "instruction": "Your code should define a class named `SentenceService`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.sentencemanager`."}, {"type": "file", "instruction": "Your code should not use the following libraries `org.springframework`."}, {"type": "combination", "instruction": "Your code should define a class named `SentenceServiceImpl` that implements the `SentenceService` interface."}, {"type": "combination", "instruction": "In your code, the class `Sentence` should have these properties `id`, `text`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.example.sentencemanager`, which should contain these classes `Sentence`, `SentenceMapper`, `SentenceService`."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "12": [0, 1, 2, 3, 11], "15": [0, 1, 2, 3, 10, 11], "16": [0, 1, 2, 3, 11], "17": [0, 1, 2, 3, 11, 13]}, "question_id": 93}
{"question": "In a fictional world, there is a long rope that contains different sections, each with a specific strength value. The strength of a section determines how many people can stand on it simultaneously without breaking it. The goal is to find the maximum number of people that can stand on the rope at the same time without breaking any section.\n\nWrite two functions, `Part1()` and `Part2()`, to solve the following problems:\n\n1. `Part1()`: Given a list of strength values for each section of the rope, return the minimum strength value, which represents the maximum number of people that can stand on the weakest section of the rope without breaking it.\n\n2. `Part2()`: Given the same list of strength values, return the sum of the strengths of all sections that can support at least two people. This represents the total strength of the sections that are not too weak to hold at least a pair of people.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameter."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "structural control", "instruction": "Your code should use data structure 'list'."}, {"type": "variable", "instruction": "Your code should define a variable named 'rope_strengths'."}, {"type": "variable", "instruction": "Variable 'rope_strengths', the initial value should be [5, 3, 8, 2, 7]."}, {"type": "class", "instruction": "Your code should define a class named 'RopeAnalyzer'."}, {"type": "class", "instruction": "The class names in your code should follow the 'PascalCase' naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named 'rope_analysis'."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'pandas']."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6, 12], "9": [0, 1, 2, 3, 4, 8, 12]}, "question_id": 94}
{"question": "Please write a Java program to implement a simple book loan record pagination query function in a library management system. Considering that there may be a large number of loan records stored in the database, it needs to be optimized through pagination. Each query returns one page of loan records, with a fixed number of records per page. The specific requirements are as follows:\n\n- Define a class named `BookLoan` containing three attributes: book ID (`bookId`), borrower ID (`borrowerId`), and borrowing date (`borrowDate`).\n- Implement a class named `BookLoanService` that includes a method `fetchLoanRecordsByPage`, which accepts two parameters: `pageNumber` (current page number) and `pageSize` (number of records per page), and returns the current page's list of loan records.\n- Assume there is a class named `BookLoanDAO` which includes a method `findAll` that can return the list of all loan records (in practical application, this might be obtained through database access).\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nclass BookLoan {\n    int bookId;\n    int borrowerId;\n    Date borrowDate;\n    public BookLoan(int bookId, int borrowerId, Date borrowDate) {\n        \n    }\n}\n\nclass BookLoanDAO {\n    public List<BookLoan> findAll() {\n        \n    }\n}\n\nclass BookLoanService {\n    BookLoanDAO bookLoanDAO = new BookLoanDAO();\n    public List<BookLoan> fetchLoanRecordsByPage(int pageNumber, int pageSize) {\n        \n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `loanRecords`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `LoanStatus`."}, {"type": "variable", "instruction": "Variable `pageNumber`, the initial value should be 1."}, {"type": "variable", "instruction": "Variable `pageSize` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `calculateTotalPages`."}, {"type": "file", "instruction": "Your code should import the following libraries `java.util.ArrayList`, `java.util.Date`, `java.util.List`."}, {"type": "file", "instruction": "Your code should use the function `findAll` from the library `BookLoanDAO`."}, {"type": "combination", "instruction": "The function `fetchLoanRecordsByPage` should take `pageNumber`, `pageSize` as parameters."}, {"type": "global", "instruction": "Your function `fetchLoanRecordsByPage` should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 4, 12, 13], "7": [0, 4, 12, 13], "10": [0, 9, 12, 13], "11": [0, 8, 12, 13]}, "question_id": 95}
{"question": "Implement the function `create_ECOC_dataset(X, y, M)` that creates datasets for Error-Correcting Output Codes. The function receives the dataset `(X, y)` and code book `M` as input, and returns a list of datasets `[(X1, y1), ..., (Xn, yn)]`. The `i`-th dataset `(Xi, yi)` is used to train classifiers that predict whether bit `i` is on or off. Ensure the function handles type mismatches correctly.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the numpy library."}, {"type": "class", "instruction": "Your code should define a class named ECOCDataset."}, {"type": "file", "instruction": "Your code should import the following libraries numpy."}, {"type": "file", "instruction": "Your code should not use the following libraries pandas."}, {"type": "combination", "instruction": "In your code, the class ECOCDataset should have these methods create_dataset."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 4, 8]}, "question_id": 96}
{"question": "Create a Java Spring Boot application that exposes a RESTful API endpoint to manage a simple user profile. The application should provide the following functionalities:\n\n1. Retrieve a user's profile information by their username.\n2. Update a user's profile information.\n3. The profile information should include at least the following fields: `username`, `email`, and `bio`.\n\nThe application should follow REST principles and handle HTTP GET requests for retrieving user information and HTTP PUT requests for updating user information. Ensure proper HTTP status codes are returned for different scenarios, such as successful operations, user not found, and invalid input data.\n\nWrite a `UserController` class that includes the necessary annotations and methods to handle the above functionalities. Also, create a `UserProfile` class to represent the user profile data.\n\nProvide test cases to verify the correctness of the implemented functionalities.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the `final` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `userProfile`."}, {"type": "variable", "instruction": "Variable `userProfile`, should be a global variable."}, {"type": "variable", "instruction": "Variable `userProfile`, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named `UserProfile`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.userprofile`."}, {"type": "combination", "instruction": "You should initialize an object named `userController` as an instance of the `UserController` class using `userProfile` for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.example.userprofile`, which should contain these classes `UserController`, `UserProfile`."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "9": [0, 1, 2, 8], "11": [0, 1, 2, 8], "12": [0, 1, 2, 8, 10]}, "question_id": 97}
{"question": "Create a Python program using the Pygame library to implement a classic Snake game with a twist. The game should have the following features:\n\n1. A 20x20 grid where the snake moves.\n2. The snake starts at the center of the grid and grows by one segment each time it eats an apple.\n3. Apples appear randomly on the grid, one at a time, and only in empty spaces.\n4. The snake can move in four directions: up, down, left, and right. It moves one grid space at a time.\n5. If the snake hits the wall, it should teleport to the opposite side of the grid, continuing in the same direction.\n6. The game ends if the snake runs into itself.\n7. The player's score should be displayed on a HUD at the top of the screen and should increase by one each time the snake eats an apple.\n8. The game should be controllable using the arrow keys or WASD keys.\n9. The game should run at a consistent speed, making the snake move smoothly.\n\nThe provided code snippet contains the basic setup for the game, including the game loop, event handling, and drawing functions. Use this as a starting point to complete the implementation of the game.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named snake_speed."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable grid_size, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named move_snake."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named GameInterface."}, {"type": "class", "instruction": "Your code should define a class named SnakeGame."}, {"type": "combination", "instruction": "You should define an interface named GameInterface that includes these methods start_game, end_game, update_score."}, {"type": "combination", "instruction": "In your code, the class SnakeGame should have these properties snake_body, apple_position, score."}, {"type": "combination", "instruction": "In your code, the class SnakeGame should have these methods move_snake, spawn_apple, check_collision."}, {"type": "combination", "instruction": "The function move_snake should take direction as a parameter."}, {"type": "combination", "instruction": "The function move_snake should return a boolean as its result."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 6, 18], "8": [0, 1, 6, 18], "10": [0, 1, 9, 18], "13": [0, 1, 11, 18], "14": [0, 1, 12, 18], "15": [0, 1, 12, 18], "16": [0, 1, 9, 18], "17": [0, 1, 9, 18]}, "question_id": 98}
{"question": "Design a service that manages a promotional event where users can unlock digital 'eggs' by visiting a web page. Each egg has a specific time window during which it can be unlocked. The service should provide the following functionalities:\n\n1. Retrieve information about all available eggs, including their names, start and end times, and whether they have been unlocked by the user.\n2. Allow a user to unlock an egg if the current time is within the egg's active time window.\n3. Reset the cache that stores the web view data for the event.\n4. Retrieve the page view count for the event.\n5. Calculate the total view count for the event by summing the page view count and the topic view count.\n\nThe service should handle errors appropriately and return them to the caller. Assume that the underlying data access object (DAO) methods and models are already implemented.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'event_data'."}, {"type": "variable", "instruction": "Variable 'event_data', should not be a global variable."}, {"type": "variable", "instruction": "Variable 'event_data', the initial value should be '{}'."}, {"type": "function", "instruction": "Your code should include a function named 'unlock_egg'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'EventService'."}, {"type": "class", "instruction": "Your code should define a class named 'EggManager'."}, {"type": "file", "instruction": "Your code should import the following libraries ['datetime', 'json']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os', 'sys']."}, {"type": "combination", "instruction": "You should initialize an object named 'egg_manager' as an instance of the 'EggManager' class using ['event_data'] for initialization."}, {"type": "combination", "instruction": "In your code, the class 'EggManager' should have these methods ['get_eggs', 'unlock_egg', 'reset_cache', 'get_page_view_count', 'calculate_total_view_count']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "10": [0, 1, 2, 9], "15": [0, 1, 2, 12], "16": [0, 1, 2, 12]}, "question_id": 99}
{"question": "You are given a number of steps `steps` and an array length `arrLen`. You start at the first position of an imaginary array (position 0) and you can move either one step to the right, one step to the left, or stay in the same place (The first and the last positions of the array are the leftmost and rightmost positions respectively). However, you can't move outside the bounds of the array at any point in time. Write a function `numWays` that takes `steps` and `arrLen` as arguments and returns the number of distinct ways you can arrive back at the start position (position 0) after exactly `steps` steps. Since the answer may be large, return it modulo `10^9 + 7`.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `dp`."}, {"type": "variable", "instruction": "Variable `dp`, type should be list."}, {"type": "variable", "instruction": "Variable `dp`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `dp`, the initial value should be [1]."}, {"type": "function", "instruction": "Your code should include a function named `numWays`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `MovementStrategy`."}, {"type": "class", "instruction": "Your code should define a class named `Movement`."}, {"type": "file", "instruction": "Your code should be organized in a package named `movement_calculator`."}, {"type": "file", "instruction": "Your code should import the following libraries `math`."}, {"type": "file", "instruction": "Your code should use the function `pow` from the library `math`."}, {"type": "file", "instruction": "Your code should not use the following libraries `numpy`."}, {"type": "combination", "instruction": "You should define an interface named `MovementStrategy` that includes these methods `move_left`, `move_right`, `stay`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `movement_calculator`, which should contain these classes `Movement`, `MovementStrategy`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `movement_calculator`, which should contain these functions `numWays`."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4], "7": [0, 4], "9": [0, 8], "14": [0, 13], "16": [0, 10], "17": [0, 11, 12], "18": [0, 12]}, "question_id": 100}
{"question": "You have a string `s` of even length `n`, indexed from **0**. You also have a 2D integer array `queries`, indexed from **0**, where `queries[i] = [ai, bi, ci, di]`. For each query `i`, you need to perform the following operations: Rearrange the characters in the **substring** `s[ai:bi]` that is within the range `0 <= ai <= bi < n / 2`. Rearrange the characters in the **substring** `s[ci:di]` that is within the range `n / 2 <= ci <= di < n`. For each query, your task is to determine if `s` can become a **palindrome** after the operations are performed. Each query is **independent** from the other queries. You need to return an array `answer` indexed from **0**, where if the `i`-th query can make `s` a palindrome after the operations, `answer[i] = true`, otherwise `answer[i] = false`. A **substring** refers to a continuous character sequence within a string. `s[x:y]` identifies the substring in `s` from index `x` to index `y`, inclusively, **including both endpoints**.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 function."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `result`."}, {"type": "variable", "instruction": "Variable `result`, the initial value should be `false`."}, {"type": "function", "instruction": "Your code should include a function named `canMakePalindromeQueries`."}, {"type": "function", "instruction": "Your code should not use any functions from the `algorithm` library."}, {"type": "class", "instruction": "Your code should define a class named `Solution`."}, {"type": "file", "instruction": "Your code should be organized in a package named `palindrome`."}, {"type": "combination", "instruction": "You should initialize an object named `solution` as an instance of the `Solution` class using `s` and `queries` for initialization."}, {"type": "combination", "instruction": "The function `canMakePalindromeQueries` should return a `vector<bool>` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `palindrome`, which should contain these functions `canMakePalindromeQueries`."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 15], "12": [0, 1, 2, 3, 10, 15], "13": [0, 1, 2, 3, 8, 15], "14": [0, 1, 2, 3, 11, 15]}, "question_id": 101}
{"question": "Design a Java Spring Boot application that provides a RESTful API for a simple user authentication system. The system should allow users to register, login, and access their profile information. The application should have the following endpoints:\n\n1. `POST /authentication/register` - Allows a new user to register by providing a username and password. The system should ensure that the username is unique and return an appropriate message if the registration is successful or if the username is already taken.\n\n2. `GET /authentication/login` - Allows a user to login by providing a username and password. The system should validate the credentials and return a welcome message if the login is successful, or an error message if the credentials are incorrect.\n\n3. `GET /authentication/profile` - Allows a logged-in user to access their profile information. The system should return the user's profile details if the user is authenticated, or an error message if the user is not logged in.\n\nFor simplicity, you can assume that the user data is stored in-memory and that there is no need for persistent storage. You do not need to implement a full authentication mechanism with tokens or sessions; a simple check to see if the user is 'logged in' based on the provided credentials is sufficient for this exercise.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the 'final' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'ArrayList'."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'userCount'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'UserRole'."}, {"type": "variable", "instruction": "Variable 'userCount' should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'validateCredentials'."}, {"type": "function", "instruction": "Your code should not use any functions from the 'Collections'."}, {"type": "interface", "instruction": "Your code should define an interface named 'UserService'."}, {"type": "class", "instruction": "Your code should define a class named 'UserController'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.example.auth'."}, {"type": "file", "instruction": "Your code should import the following libraries 'org.springframework.web.bind.annotation.*'."}, {"type": "file", "instruction": "Your code should use the function 'PostMapping' from the library 'org.springframework.web.bind.annotation'."}, {"type": "combination", "instruction": "You should define an interface named 'UserService' that includes these methods 'registerUser, loginUser, getProfile'."}, {"type": "combination", "instruction": "In your code, the class 'User' should have these properties 'username, password, role'."}, {"type": "combination", "instruction": "The function 'validateCredentials' should return a 'boolean' as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'com.example.auth', which should contain these functions 'registerUser, loginUser, getProfile'."}], "instruction_dependence": {"8": [0, 1, 2, 6], "15": [0, 1, 2, 14], "16": [0, 1, 2, 11], "17": [0, 1, 2, 12], "18": [0, 1, 2, 9], "19": [0, 1, 2, 13]}, "question_id": 102}
{"question": "Write a function `compress_string` that takes a list of characters and compresses it by using the run-length encoding algorithm. This algorithm replaces sequences of the same character with that character followed by the number of times it appears consecutively. The function should modify the input list in place and return the new length of the list after compression. For example, given the list `['a', 'a', 'b', 'b', 'c', 'c', 'c']`, the function should modify the list to `['a', '2', 'b', '2', 'c', '3']` and return `6`. The function should handle the case where the number of consecutive characters is `1` by not adding a count after the character. The input list will only contain lowercase alphabetic characters.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 function."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named count."}, {"type": "variable", "instruction": "Variable count, should not be a global variable."}, {"type": "variable", "instruction": "Variable count, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named CompressionInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named StringCompressor."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['typing']."}, {"type": "file", "instruction": "Your code should use the function List from the library typing."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "13": [0, 1, 2, 12]}, "question_id": 103}
{"question": "Design a command-line application that processes a set of subcommands and prints the corresponding help message or executes the given subcommand. The application should handle invalid subcommands by printing an error message. The application should be tested using golden files to verify the output against expected results. The application should support the following subcommands: `-h` or `--help`: Prints the general help message for the application; `version`: Prints the version information of the application; Any other subcommand should be considered invalid and should result in an error message. The test should verify that the application's output matches the expected output stored in golden files and should handle any errors appropriately.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the 'lambda' keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'CommandType'."}, {"type": "function", "instruction": "Your code should include a function named 'process_command'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named 'cli_app'."}, {"type": "file", "instruction": "Your code should import the following libraries 'sys', 'argparse'."}, {"type": "file", "instruction": "Your code should use the function 'parse_args' from the library 'argparse'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'cli_app', which should contain these functions 'process_command', 'print_help', 'print_version'."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"10": [0, 1, 2, 3, 4, 9, 15], "13": [0, 1, 2, 3, 4, 12, 15], "14": [0, 1, 2, 3, 4, 11, 15]}, "question_id": 104}
{"question": "Please convert the following code into cpp, with the function signature `std::tuple<float, float> find_closest_elements(std::vector<float> numbers)`. Note: 1. Only implement the target function and import the necessary packages, do not generate other code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named closest_pair."}, {"type": "variable", "instruction": "Variable closest_pair, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named ClosestElementFinder."}, {"type": "class", "instruction": "Your code should define a class named ClosestElementFinder."}, {"type": "combination", "instruction": "You should define an interface named ClosestElementFinder that includes these methods findClosestElements."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7], "11": [0, 1, 2, 3, 4, 9]}, "question_id": 105}
{"question": "Please write a Java method that accepts an exception object as a parameter and returns the stack trace information of that exception as a string representation. If the passed exception object is `null`, or if the exception or any of its cause chain contains an `UnknownHostException`, the method should return an empty string. Ensure that your method can handle all the exceptions in the chain and check for the presence of `UnknownHostException` before returning the stack trace information. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.StringWriter;\nimport java.io.PrintWriter;\nimport java.net.UnknownHostException;\npublic class ExceptionStackTraceHelper {\n    public static String getExceptionStackTrace(Throwable exception) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure StringWriter."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named writer."}, {"type": "variable", "instruction": "Variable writer, type should be StringWriter."}, {"type": "variable", "instruction": "Variable writer, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named getExceptionStackTrace."}, {"type": "interface", "instruction": "Your code should define an interface named ExceptionHandler."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ExceptionStackTraceHelper."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.exception."}, {"type": "combination", "instruction": "You should initialize an object named writer as an instance of the StringWriter class using no parameters for initialization."}, {"type": "combination", "instruction": "The function getExceptionStackTrace should return a String as its result."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10], "13": [0, 1, 2, 12], "15": [0, 1, 2, 12], "16": [0, 1, 2, 9]}, "question_id": 106}
{"question": "Please write a Java method that handles a user's personal description information. In our application, the user's description information may not be set yet, that is, it may be null. If the user's description information is null, we want to automatically generate a default description \"No description available\". Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class UserProfile {\n    private String description;\n    public UserProfile(String description) {\n    }\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named defaultDescription."}, {"type": "variable", "instruction": "Your code should define an enumeration named DescriptionStatus."}, {"type": "variable", "instruction": "Variable defaultDescription, should be a global variable."}, {"type": "variable", "instruction": "Variable defaultDescription, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generateDescription."}, {"type": "interface", "instruction": "Your code should define an interface named DescriptionHandler."}, {"type": "class", "instruction": "Your code should define a class named UserProfile."}, {"type": "file", "instruction": "Your code should be organized in a package named user.profile."}, {"type": "combination", "instruction": "You should initialize an object named userProfile as an instance of the UserProfile class using description for initialization."}, {"type": "combination", "instruction": "You should define an interface named DescriptionHandler that includes these methods generateDescription."}, {"type": "combination", "instruction": "Your code should be organized in a package named user.profile, which should contain these functions generateDescription."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 7], "15": [0, 1, 2, 3, 13], "16": [0, 1, 2, 3, 12], "17": [0, 1, 2, 3, 14]}, "question_id": 107}
{"question": "On the occasion of the national day of country H, the king invited n ministers to play a prize-winning game. First, he asked each minister to write an integer on their left and right hands, and the king himself also wrote an integer on each of his hands. Then, he asked these n ministers to line up, with the king standing at the front of the line. After lining up, all the ministers will receive a certain number of gold coins as a reward from the king. The number of gold coins each minister receives is: the product of the numbers on the left hands of all the people in front of him divided by the number on his own right hand, and the result is then rounded down. The king does not want any one minister to receive a particularly large reward, so he would like you to help him rearrange the order of the team to make the minister who gets the most rewards get as few as possible. Note that the king's position is always at the front of the team. Define a python function solve(king, ministers), where king is a tuple representing the integers on the king's left and right hands, minister is a list of tuples representing the integers on the left and right hands of each minister. Return the amount of gold coins rewarded to the minister who receives the most awards after rearranging.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named max_reward."}, {"type": "variable", "instruction": "Variable max_reward, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named RewardCalculator."}, {"type": "file", "instruction": "Your code should be organized in a package named reward_system."}, {"type": "combination", "instruction": "The function solve should take king and ministers as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named reward_system, which should contain these functions solve."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 6], "11": [0, 1, 9]}, "question_id": 108}
{"question": "Please implement a SimpleVector class in C++ to simulate part of the functionality of std::vector. This class uses doubling capacity as its capacity expansion strategy and supports the following interfaces and functions:\n\n1. `void push_back(const T& value)`: Used to add a lvalue element to the end of the dynamic array.\n2. `void push_back(T&& value)`: Used to add a rvalue element to the end of the dynamic array.\n3. `T& operator[](size_t index)` and `const T& operator[](size_t index) const`: Used to access the element at the specified index of the dynamic array. The former is used to get the element at the specified location of the non-const object, and the latter is used to get the element at the specified location of the const object.\n4. `size_t size()` and `size_t capacity()`: The former is used to get the current number of elements in the dynamic array, and the latter is used to get the current capacity of the dynamic array.\n5. Implement the copy constructor and move constructor based on the class itself.\n\nNote: The terms \"lvalue\" and \"rvalue\" are new concepts introduced after C++11. Lvalues typically represent the identity of an object (i.e., a location in memory), whereas rvalues are either rvalues that do not have an object identity or lvalues that have been moved (represented by std::move).\n\nFor the above interfaces, please ensure memory safety during implementation to avoid memory leaks. Also, the class should provide strong exception safety, meaning that the state of the class remains consistent in case of an exception.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named capacity."}, {"type": "variable", "instruction": "Variable capacity, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named push_back."}, {"type": "function", "instruction": "Your code should not use any functions from the std::vector."}, {"type": "interface", "instruction": "Your code should define an interface named SimpleVectorInterface."}, {"type": "class", "instruction": "Your code should define a class named SimpleVector."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries std::vector."}, {"type": "combination", "instruction": "In your code, the class SimpleVector should have these properties capacity, size."}, {"type": "combination", "instruction": "In your code, the class SimpleVector should have these methods push_back, operator[], size, capacity."}, {"type": "combination", "instruction": "The function push_back should take value as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 5], "11": [0, 1, 2, 10], "13": [0, 1, 2, 10], "14": [0, 1, 2, 10], "15": [0, 1, 2, 7]}, "question_id": 109}
{"question": "Write a Python AWS Lambda function that processes S3 object creation events. The function should be designed to be triggered by an AWS S3 event, which provides details about the created object in an S3 bucket. The function should retrieve the content of the newly created object, log the content for debugging purposes, and record a custom metric indicating the processing of an S3 object creation event. The function should use AWS Lambda Powertools for logging, tracing, and metrics. The logger should log the event details and the content of the S3 object. The tracer should capture the Lambda handler's execution, and the metrics should record a custom metric named 'S3ObjectProcessed' with a unit of count and a value of 1 for each invocation. The function should return a dictionary containing the S3 object's content and the execution details from the event.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the 'lambda' keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 's3_object_content'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'EventType'."}, {"type": "variable", "instruction": "Variable 's3_object_content', should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named 'process_s3_event'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'S3EventInterface'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'S3EventProcessor'."}, {"type": "file", "instruction": "Your code should import the following libraries ['boto3', 'aws_lambda_powertools']."}, {"type": "combination", "instruction": "In your code, the class 'S3EventProcessor' should have these properties ['event', 's3_object_content']."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 14, 15], "8": [0, 1, 2, 7, 14, 15], "10": [0, 1, 2, 9, 14, 15], "13": [0, 1, 2, 11, 14, 15]}, "question_id": 110}
{"question": "Implement a `DoubleLinkedList` class in Java that represents a doubly linked list with generic elements. The class should support the following operations:\n\n1. `addFirst(E elem)`: Adds an element to the beginning of the list.\n2. `addLast(E elem)`: Adds an element to the end of the list.\n3. `removeNode(Node<E> n)`: Removes a given node from the list.\n4. `size()`: Returns the number of elements in the list.\n5. `getIndex(int i)`: Returns the node at the specified index.\n6. `getNodeWithElement(E elem)`: Returns the first node containing the specified element.\n\nThe `Node` class should be an inner class of `DoubleLinkedList` and should contain the following:\n\n1. A generic element of type `T` where `T extends E`.\n2. References to the next and previous nodes in the list.\n3. A `toString()` method that returns a string representation of the node.\n\nEnsure that the `DoubleLinkedList` class handles edge cases such as adding or removing elements from an empty list, and searching for an element that does not exist.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `head`."}, {"type": "variable", "instruction": "Variable `head`, type should be `Node<E>`."}, {"type": "variable", "instruction": "Variable `head`, should be a global variable."}, {"type": "variable", "instruction": "Variable `head`, the initial value should be `null`."}, {"type": "function", "instruction": "Your code should include a function named `addFirst`."}, {"type": "interface", "instruction": "Your code should define an interface named `ListOperations`."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named `DoubleLinkedList`."}, {"type": "file", "instruction": "Your code should be organized in a package named `linkedlist`."}, {"type": "file", "instruction": "Your code should not use the following libraries `java.util.*`."}, {"type": "combination", "instruction": "The function `addFirst` should take `E elem` as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 16], "7": [0, 1, 2, 5, 16], "8": [0, 1, 2, 5, 16], "11": [0, 1, 2, 10, 16], "15": [0, 1, 2, 9, 16]}, "question_id": 111}
{"question": "Design a simple service management system that allows for the registration, deregistration, retrieval, and execution of services. Each service is represented by a class that has a `name` and an `execute` method. The `ServiceManager` class is a singleton that manages these services. It should be able to add a new service, remove an existing service, retrieve a service by name, and execute all registered services. The `ServiceManager` should ensure that there is a maximum number of services that can be registered at any given time, defined by `SERVICE_MAX_QUANTITY`. If an attempt is made to add a service when the maximum number is reached, the service should not be added. Implement the `Service` class and complete the implementation of the `ServiceManager` class based on the provided code snippet. Ensure that the `ServiceManager` class has the following methods: `getInstance()`, `add(Service* service)`, `remove(Service* service)`, `get(const char* name)`, and `process()`. Additionally, provide a set of test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the `const` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `std::map`."}, {"type": "variable", "instruction": "Your code should define a variable named `SERVICE_MAX_QUANTITY`."}, {"type": "variable", "instruction": "Your code should define an enumeration named `ServiceStatus`."}, {"type": "function", "instruction": "Your code should not use any functions from the `std::vector`."}, {"type": "class", "instruction": "Your code should define a class named `ServiceManager`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries `boost`."}, {"type": "combination", "instruction": "You should initialize an object named `serviceManager` as an instance of the `ServiceManager` class using `getInstance()` for initialization."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8, 12, 13], "11": [0, 1, 2, 3, 8, 12, 13]}, "question_id": 112}
{"question": "Implement the `Spinlock` class in C++ to represent a spinlock. 1. Implement the interface `void lock()` to represent locking. 2. Implement the interface `bool try_lock()` to represent an attempt to lock. If it is already locked, return `false`, otherwise return `true` indicating successful locking. 3. Implement the interface `void unlock()` to represent unlocking.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the `atomic` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `std::atomic_flag`."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `lock_flag`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should include a function named `is_locked`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named `Spinlock`."}, {"type": "file", "instruction": "Your code should import the following libraries `<atomic>`."}, {"type": "file", "instruction": "Your code should use the function `test_and_set` from the library `<atomic>`."}, {"type": "combination", "instruction": "You should initialize an object named `spinlock` as an instance of the `Spinlock` class using `ATOMIC_FLAG_INIT` for initialization."}, {"type": "combination", "instruction": "The function `try_lock` should take `void` as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "11": [0, 1, 2, 10], "12": [0, 1, 2, 9], "13": [0, 1, 2, 7]}, "question_id": 113}
{"question": "Write a Go program that defines a binary tree and performs an inorder traversal on it. The program should include a function `BTreeApplyInorder` that takes the root of a binary tree and a function `f` as arguments. The function `f` should be applied to each node's data during the inorder traversal. The `TreeNode` structure is already provided and includes `Left`, `Right`, and `Parent` pointers, as well as a `Data` field of type `string`. The function `f` that is passed to `BTreeApplyInorder` should be of the type `func(string)`, which takes a string as an argument and returns nothing. It is used to process the `Data` field of each `TreeNode`. Additionally, write a main function to create a binary tree, apply the `BTreeApplyInorder` function, and print each node's data to the console.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'map'."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'rootNode'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable 'rootNode', should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named 'BTreeApplyInorder'."}, {"type": "interface", "instruction": "Your code should define an interface named 'TreeTraverser'."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named 'TreeNode'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'binarytree'."}, {"type": "file", "instruction": "Your code should import the following libraries 'fmt'."}, {"type": "file", "instruction": "Your code should not use the following libraries 'math'."}, {"type": "combination", "instruction": "You should define an interface named 'TreeTraverser' that includes these methods 'Traverse'."}, {"type": "combination", "instruction": "In your code, the class 'TreeNode' should have these methods 'GetData', 'SetData'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'binarytree', which should contain these classes 'TreeNode'."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "10": [0, 1, 2, 9], "15": [0, 1, 2, 9], "16": [0, 1, 2, 11], "17": [0, 1, 2, 11, 12]}, "question_id": 114}
{"question": "Design a Python application that interacts with a MySQL database to manage user records. The application should be able to connect to the database, insert new user records, delete existing user records, query all user records, and update existing user records. The user records consist of the following fields: username, age, sex, phone, and email. The application should follow these specifications: 1. Use the `pymysql` library to interact with the MySQL database. 2. Read database configuration from an INI file using a custom `configmgt` module. 3. Implement logging of operations using a custom `log_utils` module with a `Logs` class. 4. Provide functions for connecting to the database, inserting, deleting, querying, and updating user records. 5. Handle exceptions gracefully and log errors. 6. Ensure that the database connection is closed properly after each operation.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named db_config."}, {"type": "variable", "instruction": "Your code should define an enumeration named UserFields."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable DB_HOST, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named DatabaseOperations."}, {"type": "class", "instruction": "Your code should define a class named UserManager."}, {"type": "combination", "instruction": "Your code should define a class named UserManager that implements the DatabaseOperations interface."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"5": [0, 3, 10, 11], "6": [0, 3, 10, 11], "9": [0, 7, 8, 10, 11]}, "question_id": 115}
{"question": "Design a Java service class that manages third-party account integrations for a user management system. The service should provide functionality to add, update, and retrieve third-party account details associated with a user's account. Each third-party account is represented by a `TrdParty` object that contains the following fields:\n\n- `id`: A unique identifier for the third-party account.\n- `accountId`: The identifier of the user's account that the third-party account is linked to.\n- `provider`: The name of the third-party service provider (e.g., \"Google\", \"Facebook\").\n- `externalId`: The identifier provided by the third-party service for the user's account.\n\nThe service should use MyBatis-Plus for database operations and should extend a base service class that provides common functionality. Implement the following methods in the service class:\n\n- `addTrdParty(TrdParty trdParty)`: Adds a new third-party account to the system.\n- `updateTrdParty(TrdParty trdParty)`: Updates an existing third-party account.\n- `getTrdPartyByAccountId(Long accountId)`: Retrieves a third-party account linked to the specified user's account ID.\n\nEnsure that the service class handles any potential exceptions and logs appropriate messages. Write a self-contained solution with the necessary imports and provide test cases to verify the correctness of the implemented methods.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 120 characters."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named 'logger'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'ProviderType'."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable 'logger' should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the 'System.exit' function."}, {"type": "class", "instruction": "Your code should define a class named 'TrdPartyService'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.example.userManagement'."}, {"type": "file", "instruction": "Your code should import the following libraries 'com.baomidou.mybatisplus.extension.service.IService', 'org.slf4j.Logger', 'org.slf4j.LoggerFactory'."}, {"type": "file", "instruction": "Your code should use the function 'save' from the library 'com.baomidou.mybatisplus.extension.service.IService'."}, {"type": "file", "instruction": "Your code should not use the following libraries 'java.util.Vector'."}, {"type": "combination", "instruction": "In your code, the class 'TrdParty' should have these properties 'id', 'accountId', 'provider', 'externalId'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'com.example.userManagement', which should contain these classes 'TrdPartyService', 'TrdParty'."}], "instruction_dependence": {"7": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 5], "13": [0, 1, 2, 3, 12], "15": [0, 1, 2, 3, 10], "16": [0, 1, 2, 3, 10, 11]}, "question_id": 116}
{"question": "Given a string `s` with a 0-based index and an integer `k`, perform the following splitting operation until the string `s` is empty: Select the longest prefix in `s` that contains at most `k` distinct characters, delete this prefix, and add one to the number of splits. Before executing these operations, you can change the corresponding character of at most one index in `s` to another lowercase English letter. After changing the corresponding character of at most one index under the best choice, return the maximum splitting number represented by an integer when the operation ends.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named max_splits."}, {"type": "variable", "instruction": "Your code should define an enumeration named SplitType."}, {"type": "variable", "instruction": "Variable max_splits, the initial value should be 0."}, {"type": "variable", "instruction": "Variable max_splits, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculateMaxSplits."}, {"type": "interface", "instruction": "Your code should define an interface named Splittable."}, {"type": "class", "instruction": "Your code should define a class named StringSplitter."}, {"type": "combination", "instruction": "Your code should define a class named StringSplitter that implements the Splittable interface."}, {"type": "combination", "instruction": "In your code, the class StringSplitter should have these methods calculateMaxSplits, getMaxSplits."}, {"type": "combination", "instruction": "The function calculateMaxSplits should return a int as its result."}], "instruction_dependence": {"10": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 8], "15": [0, 1, 2, 3, 13, 14], "16": [0, 1, 2, 3, 14], "17": [0, 1, 2, 3, 12]}, "question_id": 117}
{"question": "Create a Java program that simulates a simple configuration loader for a web application. The program should be able to load configurations from two different sources: a common configuration and a Swagger API documentation configuration. The common configuration should contain basic settings like the application name and version, while the Swagger configuration should contain settings specific to the Swagger API documentation, such as the title and description of the API. The configurations should be represented by two classes, `CommonConfig` and `SwaggerConfig`, each containing appropriate fields and a method to load the configuration (for simplicity, you can assume the configurations are loaded from a static context or hardcoded values). The main application class, `Application`, should import these configurations and make them available to the rest of the application. Use the Spring Boot framework to demonstrate how the application can be started and how the configurations can be imported using the `@Import` annotation. Provide a clear docstring for each class and method, explaining its purpose and usage. Also, include a main method that starts the Spring Boot application and prints out the loaded configurations to verify that they have been imported correctly.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `configLoader`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `configLoader`, should not be a global variable."}, {"type": "variable", "instruction": "Variable `APP_VERSION`, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named `loadConfigurations`."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named `ConfigLoader`."}, {"type": "class", "instruction": "Your code should define a class named `Application`."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.configloader`."}, {"type": "combination", "instruction": "Your code should define a class named `CommonConfig` that implements the `ConfigLoader` interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.example.configloader`, which should contain these classes `CommonConfig`, `SwaggerConfig`, `Application`."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "9": [0, 1, 2, 8], "12": [0, 1, 2, 11], "14": [0, 1, 2, 10, 11], "15": [0, 1, 2, 11, 13]}, "question_id": 118}
{"question": "Implement a Policy Manager for a Cloud-Based Service that manages and enforces policies for connected devices. The Policy Manager should fetch, apply, and refresh policies from a cloud service, handle token management, and notify the system about the current policy state. Policies are defined in a protobuf format and include settings like enabling/disabling features, setting security requirements, or configuring network settings. The Policy Manager should handle error conditions such as invalid tokens, device conflicts, and backend errors by attempting retries or fetching new tokens as appropriate.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use data structure dictionary."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named policy_state."}, {"type": "variable", "instruction": "Variable policy_state, should not be a global variable."}, {"type": "variable", "instruction": "Variable policy_state, the initial value should be 'active'."}, {"type": "function", "instruction": "Your code should not use any functions from the os module."}, {"type": "interface", "instruction": "Your code should define an interface named PolicyInterface."}, {"type": "class", "instruction": "Your code should define a class named PolicyManager."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "You should define an interface named PolicyInterface that includes these methods fetch_policy, apply_policy, refresh_policy."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "10": [0, 1, 9], "11": [0, 1, 8]}, "question_id": 119}
{"question": "Please write a Java program to manage book information in a library. The specific requirements are as follows:\n\n- There needs to be a method to add book information to a list. Each book's information includes the book title and author name.\n- Another method is required to search by book title and return the author's name. If the book does not exist, it should return a specific message, such as \"Book not found.\"\n\nEnsure that your code is completely self-contained and that all packages used are imported at the beginning of the code snippet.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class BookManager {\n    static class Book {\n        String title;\n        String author;\n        public Book(String title, String author) {\n        }\n    }\n    private List<Book> books;\n    public BookManager() {\n    }\n    public void addBook(String title, String author) {\n    }\n    public String findAuthorByTitle(String title) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bookCount."}, {"type": "variable", "instruction": "Your code should define an enumeration named BookStatus."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable bookCount, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named BookOperations."}, {"type": "class", "instruction": "Your code should define a class named Library."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.ArrayList, java.util.List."}, {"type": "file", "instruction": "Your code should use the function add from the library java.util.List."}, {"type": "combination", "instruction": "You should define an interface named BookOperations that includes these methods addBook, findAuthorByTitle."}, {"type": "combination", "instruction": "Your code should define a class named Library that implements the BookOperations interface."}, {"type": "combination", "instruction": "In your code, the class Library should have these methods addBook, findAuthorByTitle."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"8": [0, 1, 6, 17], "9": [0, 1, 6, 17], "13": [0, 1, 12, 17], "14": [0, 1, 10, 17], "15": [0, 1, 10, 11, 17], "16": [0, 1, 11, 17]}, "question_id": 120}
{"question": "Please write a Java method to query all records that match a specific pattern from a simulated database. For example, we want to query all records prefixed with \"student:\". The method should be able to efficiently handle a large amount of data and ensure that all resources are released after the query to avoid resource leaks. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\ninterface DatabaseAccess {\n    List<String> scan(String pattern);\n}\nclass MockDatabase implements DatabaseAccess {\n    @Override\n    public List<String> scan(String pattern) {\n    }\n}\npublic class RecordFinder {\n    public static List<String> findRecordsWithPrefix(DatabaseAccess databaseAccess, String prefix) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named resultList."}, {"type": "variable", "instruction": "Variable MAX_RECORDS, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the System.exit() function."}, {"type": "interface", "instruction": "Your code should define an interface named DatabaseAccess."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named MockDatabase."}, {"type": "combination", "instruction": "Your code should define a class named MockDatabase that implements the DatabaseAccess interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"4": [0, 3, 10], "7": [0, 6, 10], "9": [0, 6, 8, 10]}, "question_id": 121}
{"question": "Write a Go program that retrieves and prints information about the storage nodes holding pieces of a file within the Storj decentralized cloud storage network. The program should take a key URL (in the format `sj://bucket/encryptedpath`) and the desired number of nodes to query. It should then connect to the Storj network, retrieve the list of nodes storing the pieces of the specified file, and print out the node URL, piece ID, and piece size for each node. The program should handle errors appropriately, such as invalid key URLs, issues with network connections, and problems with decoding the encrypted path. It should also ensure that it does not print information for the same node more than once.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named nodeInfo."}, {"type": "variable", "instruction": "Variable nodeInfo, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named retrieveNodeInfo."}, {"type": "class", "instruction": "Your code should define a class named StorageNode."}, {"type": "file", "instruction": "Your code should import the following libraries ['storj.io/uplink', 'fmt', 'errors']."}, {"type": "combination", "instruction": "In your code, the class StorageNode should have these properties ['nodeURL', 'pieceID', 'pieceSize']."}, {"type": "combination", "instruction": "In your code, the class StorageNode should have these methods ['getNodeURL', 'getPieceID', 'getPieceSize']."}, {"type": "combination", "instruction": "The function retrieveNodeInfo should take ['keyURL', 'nodeCount'] as parameters."}], "instruction_dependence": {"5": [0, 1, 2, 4], "9": [0, 1, 2, 7], "10": [0, 1, 2, 7], "11": [0, 1, 2, 6]}, "question_id": 122}
{"question": "I want to calculate the Taylor Series expansion of the cos(x) function at x=0. The following is the code I've written, but the result is incorrect. Could you help me identify any issues and fix them, and provide the correction in the code? \n\n```python\nimport math\n\ndef taylor_cos(x, n=20):\n    result = 0\n    for i in range(n):\n        term = ((-1)**i / math.factorial(2*i+1)) * x**(2*i+1)\n        result += term\n    return result\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result, type should be float."}, {"type": "variable", "instruction": "Variable result, the initial value should be 0."}, {"type": "function", "instruction": "Your code should include a function named taylor_cos."}, {"type": "function", "instruction": "Your code should not use any functions from the math library except for factorial."}, {"type": "combination", "instruction": "The function taylor_cos should take x and n as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 10], "6": [0, 1, 2, 4, 10], "9": [0, 1, 2, 7, 10]}, "question_id": 123}
{"question": "Design a simple tokenizer that reads tokens from a string reader, where tokens are defined as sequences of non-space characters separated by spaces. Implement the `readToken` function that reads the next token from the input stream and returns it. If there are no more tokens to read, the function should return an error indicating the end of the input. The `readToken` function should have the following signature: `func readToken(r *strings.Reader) (string, error)`. The function should read characters from the `strings.Reader` until it encounters a space or the end of the stream. It should return the token read and an error if there are no more tokens.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the var keyword."}, {"type": "structural control", "instruction": "Your code should use data structure slice."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named readToken."}, {"type": "combination", "instruction": "The function readToken should take r as a parameter."}, {"type": "combination", "instruction": "The function readToken should return a string as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "9": [0, 1, 2, 8], "10": [0, 1, 2, 8]}, "question_id": 124}
{"question": "Design a Java class named `StackPermutationChecker` that checks if a given permutation of integers can be achieved by a sequence of push and pop operations on a stack. The class should contain a method `isPermutationPossible` which takes two integer arrays as input: `pushSequence` and `popSequence`. The `pushSequence` array represents the order in which integers are pushed onto the stack, and the `popSequence` array represents a potential order in which these integers are popped from the stack. The method should return `true` if the `popSequence` can be achieved by some sequence of push and pop operations on the stack, and `false` otherwise. It is guaranteed that the integers in the `pushSequence` are unique and the `popSequence` contains the same integers as the `pushSequence`.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the `final` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure `Stack`."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `stack`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `stack`, the initial value should be `new Stack<>()`."}, {"type": "function", "instruction": "Your code should not use any functions from the `Collections`."}, {"type": "interface", "instruction": "Your code should define an interface named `PermutationChecker`."}, {"type": "class", "instruction": "Your code should define a class named `StackPermutationChecker`."}, {"type": "file", "instruction": "Your code should be organized in a package named `stack.permutation`."}, {"type": "combination", "instruction": "Your code should define a class named `StackPermutationChecker` that implements the `PermutationChecker` interface."}, {"type": "combination", "instruction": "In your code, the class `StackPermutationChecker` should have these methods `isPermutationPossible`."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "13": [0, 1, 2, 3, 10, 11], "14": [0, 1, 2, 3, 11]}, "question_id": 125}
{"question": "Design a Python program that simulates a simplified version of the card game Blackjack. The game should be played between a single player and the dealer (computer). The goal of the game is to obtain cards whose total value is as close to 21 as possible without exceeding it. The player can decide to 'hit' to take another card or 'stand' to end their turn. The dealer must hit until their cards total 17 or higher. Face cards (Jack, Queen, King) are worth 10 points, Aces can be worth 1 or 11 points, and all other cards are worth their face value. The program should use a graphical user interface (GUI) to display the game state and accept user input. The GUI should show the player's and dealer's hands, the current score, and buttons to 'Deal', 'Hit', and 'Stand'. The game should keep track of the player's score, adding 1 for a win, subtracting 1 for a loss, and changing nothing for a tie. The game ends when the player chooses to start a new deal or closes the application.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure 'set'."}, {"type": "function", "instruction": "Your code should include a function named 'calculate_score'."}, {"type": "interface", "instruction": "Your code should define an interface named 'GameInterface'."}, {"type": "class", "instruction": "Your code should define a class named 'BlackjackGame'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'blackjack_game'."}, {"type": "combination", "instruction": "You should define an interface named 'GameInterface' that includes these methods ['start_game', 'end_game', 'update_score']."}, {"type": "combination", "instruction": "In your code, the class 'BlackjackGame' should have these methods ['deal_cards', 'hit', 'stand', 'calculate_score']."}, {"type": "combination", "instruction": "The function 'calculate_score' should take ['hand'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'blackjack_game', which should contain these classes ['BlackjackGame', 'Player']."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'blackjack_game', which should contain these functions ['calculate_score', 'deal_cards', 'hit', 'stand']."}], "instruction_dependence": {"8": [0, 1, 2, 5], "9": [0, 1, 2, 6], "10": [0, 1, 2, 4], "11": [0, 1, 2, 6, 7], "12": [0, 1, 2, 7]}, "question_id": 126}
{"question": "Wordle Assistant\n\nWordle is a popular word game where players have six attempts to guess a five-letter word. Each guess provides feedback in the form of colored tiles, indicating when letters match or occupy the correct position.\n\nYour task is to create a Wordle Assistant that helps players by narrowing down the list of possible words based on the feedback from their guesses. The assistant should consider the following:\n\n- Green letters (`greenLetters`) are letters that are in the word and in the correct position.\n- Yellow letters (`yellowLetters`) are letters that are in the word but in the wrong position.\n- Bad letters (`badLetters`) are letters that are not in the word at all.\n\nThe assistant should filter a list of five-letter words from two files: `common5.txt` for common words and `word-list-5.txt` for a comprehensive list of five-letter words. It should then display a list of possible words, prioritizing common words.\n\nImplement the Wordle Assistant with the following functions:\n\n- `getCommon5()`: Reads the `common5.txt` file and returns a list of common five-letter words.\n- `makePositionPattern()`: Creates a regex pattern for green letters based on their positions.\n- `makeNotPositionPattern()`: Creates a regex pattern for yellow letters that must not be in specific positions.\n- `makeExcludePattern()`: Creates a regex pattern to exclude bad letters.\n- `evaluateMatchingRules(word)`: Evaluates if a given word matches the green, yellow, and bad letter patterns.\n- `printWords(commonWords, uncommonWords)`: Prints the filtered list of words, prioritizing common words.\n- `runProcess()`: Processes the word lists and applies the filtering rules.\n- `interview()`: Interactively collects the player's guess and the feedback (green and yellow letters), updating the assistant's knowledge.\n- `main()`: Entry point for the assistant, which clears the screen and starts the interview process.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named word_list."}, {"type": "variable", "instruction": "Variable word_list, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_words."}, {"type": "function", "instruction": "Your code should not use any functions from the os library."}, {"type": "interface", "instruction": "Your code should define an interface named WordFilter."}, {"type": "class", "instruction": "Your code should define a class named WordleAssistant."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named wordle_assistant."}, {"type": "file", "instruction": "Your code should import the following libraries re, sys."}, {"type": "file", "instruction": "Your code should use the function match from the library re."}, {"type": "combination", "instruction": "You should initialize an object named assistant as an instance of the WordleAssistant class using word_list for initialization."}, {"type": "combination", "instruction": "Your code should define a class named WordFilterImpl that implements the WordFilter interface."}, {"type": "combination", "instruction": "The function filter_words should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named wordle_assistant, which should contain these classes WordleAssistant, WordFilterImpl."}], "instruction_dependence": {"6": [0, 1, 5], "11": [0, 1, 10], "14": [0, 1, 13], "15": [0, 1, 10], "16": [0, 1, 9, 10], "17": [0, 1, 7], "18": [0, 1, 10, 12]}, "question_id": 127}
{"question": "Design a Java class named `AuthenticationFlowManager` that manages the authentication flow for a user session in a web application. The class should encapsulate the state of the authentication process, including the current stage of redirection, the ID token, the state parameter, and whether the user has an active session with the OpenID Provider (OP). The class should provide the following functionalities: 1. Initialize the authentication flow context with the default stage as `NONE`. 2. Allow updating the stage of the authentication flow to `INITIAL`, `BYPASS`, or `NONE`. 3. Store and retrieve an ID token which is a string representing the user's authentication state. 4. Store and retrieve a state parameter which is a unique string used to prevent CSRF attacks. 5. Store and retrieve the status of whether the user has an active session at the OP. 6. Provide a method to reset the authentication flow context to its initial state. The class should be serializable, session-scoped, and named to be used in a Java EE environment.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the `implements` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `idToken`."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable `idToken`, type should be `String`."}, {"type": "function", "instruction": "Your code should include a function named `resetAuthenticationFlow`."}, {"type": "function", "instruction": "Your code should not use any functions from the `System.exit`."}, {"type": "interface", "instruction": "Your code should define an interface named `AuthenticationFlow`."}, {"type": "class", "instruction": "Your code should define a class named `AuthenticationFlowManager`."}, {"type": "file", "instruction": "Your code should be organized in a package named `com.example.auth`."}, {"type": "combination", "instruction": "You should define an interface named `AuthenticationFlow` that includes these methods `updateStage`, `getIdToken`, `getStateParameter`, `hasActiveSession`, `resetAuthenticationFlow`."}, {"type": "combination", "instruction": "Your code should define a class named `AuthenticationFlowManager` that implements the `AuthenticationFlow` interface."}, {"type": "combination", "instruction": "The function `resetAuthenticationFlow` should return a `void` as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `com.example.auth`, which should contain these classes `AuthenticationFlowManager`."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "14": [0, 1, 2, 3, 11], "15": [0, 1, 2, 3, 11, 12], "16": [0, 1, 2, 3, 9], "17": [0, 1, 2, 3, 12, 13]}, "question_id": 128}
{"question": "In the fictional city of Speedville, the annual Grand Prix is about to take place. The race is held on a straight track of length `d` kilometers. There are `n` cars participating in the race, each starting at different points on the track and having different constant speeds. The goal is to calculate the minimum constant speed that the safety car (which starts at the beginning of the track) must maintain to ensure that it reaches the finish line exactly when the last car does, thus ensuring the safety of all participants. Write a program that calculates the minimum constant speed for the safety car. The input will consist of multiple test cases. Each test case starts with two integers `d` and `n`, where `d` is the length of the track in kilometers and `n` is the number of cars. The following `n` lines contain two integers `k[i]` and `s[i]`, where `k[i]` is the starting kilometer mark of the `i-th` car (measured from the start of the track) and `s[i]` is the speed of the `i-th` car in kilometers per hour. The output should display the minimum constant speed of the safety car for each test case, rounded to 8 decimal places, prefixed by the case number.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'goto' keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'safety_speed'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'CarStatus'."}, {"type": "variable", "instruction": "Variable 'safety_speed', should not be a global variable."}, {"type": "variable", "instruction": "Variable 'safety_speed', the initial value should be 0.0."}, {"type": "function", "instruction": "Your code should not use any functions from the 'math' library."}, {"type": "file", "instruction": "Your code should be organized in a package named 'speedville_grand_prix'."}, {"type": "file", "instruction": "Your code should import the following libraries 'numpy'."}, {"type": "file", "instruction": "Your code should use the function 'max' from the library 'numpy'."}, {"type": "file", "instruction": "Your code should not use the following libraries 'pandas'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'speedville_grand_prix', which should contain these functions 'calculate_safety_speed'."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 5, 15], "8": [0, 1, 5, 15], "12": [0, 1, 11, 15], "14": [0, 1, 10, 15]}, "question_id": 129}
{"question": "Implement an ExpiringLruCache using C++, which supports thread safety, supports elimination by time, and supports the following interfaces:\n1. `ExpiringLruCache(size_t capacity, std::chrono::seconds ttl)`: Constructor, specifies maximum capacity and expiration time.\n2. `size_t size()`: Gets the current cache size.\n3. `void add(const K &k, const V &v)`: Adds a record. If the cache is full, the oldest is eliminated.\n4. `std::optional<Value> get(const Key &key)`: This access moves the record to the front, treating it as the most recent record.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the mutable keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure std::unordered_map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cacheSize."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable cacheSize, type should be size_t."}, {"type": "variable", "instruction": "Variable cacheSize, the initial value should be 0."}, {"type": "function", "instruction": "Your code should not use any functions from the std::chrono::system_clock."}, {"type": "interface", "instruction": "Your code should define an interface named CacheInterface."}, {"type": "class", "instruction": "Your code should define a class named ExpiringLruCache."}, {"type": "file", "instruction": "Your code should be organized in a package named CachePackage."}, {"type": "combination", "instruction": "Your code should define a class named ExpiringLruCache that implements the CacheInterface interface."}, {"type": "combination", "instruction": "In your code, the class ExpiringLruCache should have these properties capacity, ttl, cacheMap, and accessList."}, {"type": "combination", "instruction": "In your code, the class ExpiringLruCache should have these methods size, add, and get."}, {"type": "combination", "instruction": "Your code should be organized in a package named CachePackage, which should contain these classes ExpiringLruCache and CacheInterface."}], "instruction_dependence": {"8": [0, 1, 2, 7], "9": [0, 1, 2, 7], "10": [0, 1, 2, 7], "15": [0, 1, 2, 12, 13], "16": [0, 1, 2, 13], "17": [0, 1, 2, 13], "18": [0, 1, 2, 13, 14]}, "question_id": 130}
{"question": "Design a Java class `NoisySphereFeature` that generates a noisy sphere structure in a simulated world environment. The sphere should be generated based on a configuration that defines the minimum and maximum possible heights, the radius for each axis (x, y, z), and the block type to use for the sphere. The noise for the sphere is generated using a `FastNoise` object, which adds a natural variation to the shape of the sphere. The `NoisySphereFeature` class should extend a generic `Feature` class and override the `generate` method to create the sphere in the world. The sphere should only be generated above the ocean floor. The radius of the sphere should decrease with each stack (layer) of the sphere, simulating a more natural and less perfect shape. The configuration for the sphere should be passed using a `NoisySphereConfig` class, which provides methods to get the minimum height, maximum possible height, and random radius values for each axis, as well as a block provider to determine the block state to place. The `FastNoise` object should be initialized with a seed that comes from the world, and its noise type and frequency should be set accordingly. Implement the `NoisySphereFeature` class with the `generate` method, and provide a simple test case to verify its correctness.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "variable", "instruction": "Your code should define a variable named noiseSeed."}, {"type": "variable", "instruction": "Your code should define an enumeration named NoiseType."}, {"type": "variable", "instruction": "Variable noiseSeed, should not be a global variable."}, {"type": "variable", "instruction": "Variable noiseSeed, the initial value should be 12345."}, {"type": "variable", "instruction": "Variable noiseSeed, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generateSphere."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named BlockProvider."}, {"type": "class", "instruction": "Your code should define a class named NoisySphereConfig."}, {"type": "combination", "instruction": "You should initialize an object named noisySphere as an instance of the NoisySphereFeature class using config and noiseSeed for initialization."}, {"type": "combination", "instruction": "Your code should define a class named NoisySphereFeature that implements the Feature interface."}, {"type": "combination", "instruction": "In your code, the class NoisySphereFeature should have these methods generate, setNoiseType, and setFrequency."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"4": [0, 2, 14], "5": [0, 2, 14], "6": [0, 2, 14], "8": [0, 7, 14], "11": [0, 10, 14], "12": [0, 9, 10, 14], "13": [0, 10, 14]}, "question_id": 131}
{"question": "Please implement a function in Python to determine whether a certain value is an eigenvalue of a certain matrix. The function is defined as def is_eigenvalue(matrix, value), where matrix is a 2D list, and value is a number.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named eigenvalue_check."}, {"type": "variable", "instruction": "Variable eigenvalue_check, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named is_eigenvalue."}, {"type": "interface", "instruction": "Your code should define an interface named MatrixInterface."}, {"type": "class", "instruction": "Your code should define a class named MatrixOperations."}, {"type": "file", "instruction": "Your code should be organized in a package named matrix_utils."}, {"type": "file", "instruction": "Your code should import the following libraries numpy."}, {"type": "combination", "instruction": "You should initialize an object named matrix_op as an instance of the MatrixOperations class using matrix for initialization."}, {"type": "combination", "instruction": "The function is_eigenvalue should take matrix, value as parameters."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14, 15], "12": [0, 1, 2, 9, 14, 15], "13": [0, 1, 2, 7, 14, 15]}, "question_id": 132}
{"question": "Design a RESTful API for a cryptocurrency transaction service using Go. The service should provide endpoints to handle the following functionalities:\n\n1. Retrieve a list of pending transactions.\n2. Retrieve the latest confirmed transactions.\n3. Retrieve a specific transaction by its transaction ID (txid).\n4. Inject a new transaction into the network.\n5. Retrieve the raw transaction data by its transaction ID (txid).\n\nThe API should follow REST principles and handle HTTP requests appropriately, including the use of correct HTTP methods and response codes. The service should also validate input data and provide meaningful error messages when necessary.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transactionID."}, {"type": "variable", "instruction": "Variable transactionID, the initial value should be \"default_txid\"."}, {"type": "variable", "instruction": "Variable transactionID, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named GetTransactionByID."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries [\"net/http\", \"encoding/json\"]."}, {"type": "file", "instruction": "Your code should use the function NewRequest from the library net/http."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"8": [0, 1, 2, 7, 14, 15], "9": [0, 1, 2, 7, 14, 15], "11": [0, 1, 2, 10, 14, 15], "13": [0, 1, 2, 12, 14, 15]}, "question_id": 133}
{"question": "Write a program that performs the following operations on an array of integers:\n1. Initializes the array with consecutive integers starting from 1.\n2. Uses pointers to reverse the elements of the array.\n3. Prints the reversed array to the console.\n\nThe program should be able to handle arrays of variable sizes. The size of the array should be defined as a constant at the beginning of the program. Use pointer arithmetic to access and modify the array elements.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named array_size."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable array_size, should be a global variable."}, {"type": "variable", "instruction": "Variable array_size, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the stdlib.h."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 10], "7": [0, 1, 2, 5, 10], "8": [0, 1, 2, 5, 10]}, "question_id": 134}
{"question": "Design a class `SerialNumberValidator` that validates the serial number of a product based on specific rules. The serial number is considered valid if it meets the following criteria:\n\n1. It must not be null or empty.\n2. It must not contain any whitespace characters.\n3. It must be no longer than 20 characters.\n4. It must only contain alphanumeric characters (letters and digits).\n\nThe class should have a method `validateSerialNumber(String serialNumber)` that returns a `ValidationResult` object. The `ValidationResult` should indicate whether the validation was successful and, if not, provide an appropriate error message.\n\nImplement the `SerialNumberValidator` class and the `ValidationResult` class, and provide test cases to verify the correctness of the solution.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameter."}, {"type": "global", "instruction": "Your code should not use the 'null' keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the 'java.util.regex' package."}, {"type": "interface", "instruction": "Your code should define an interface named 'Validator'."}, {"type": "class", "instruction": "Your code should define a class named 'SerialNumberValidator'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'com.example.validator'."}, {"type": "combination", "instruction": "You should define an interface named 'Validator' that includes these methods 'validateSerialNumber'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'com.example.validator', which should contain these classes 'SerialNumberValidator', 'ValidationResult'."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"12": [0, 1, 2, 3, 4, 9, 14], "13": [0, 1, 2, 3, 4, 10, 11, 14]}, "question_id": 135}
{"question": "It is known that the cyclic skeleton (CSK) refers to the molecular skeleton obtained by replacing all non-carbon heavy atoms on a molecular skeleton with carbon atoms and replacing all bonds with single bonds. Please write a complete Python function `solve(smiles)`, which uses the MurckoScaffold module to extract the Bemis-Murcko scaffold of the molecule, and convert it to CSK. Return the CSK's SMILES.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named csk_smiles."}, {"type": "variable", "instruction": "Your code should define an enumeration named AtomType."}, {"type": "variable", "instruction": "Variable csk_smiles should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named MoleculeProcessor."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}], "instruction_dependence": {"7": [0, 1, 2, 5], "9": [0, 1, 2, 8]}, "question_id": 136}
{"question": "Design a Python program that provides a configuration management system for a microservice application. The program should be able to handle different environments (e.g., development, staging, production) by providing specific configurations for each environment. The configuration should include parameters such as the version of the application, project name, service port, JSON encoding settings, secret keys, startup timeout, and Consul service discovery settings. The base configuration should be defined in a `Config` class, and environment-specific configurations should inherit from this base class. The program should also be able to generate a random secret key for security purposes and ensure that JSON responses are not ASCII-encoded by default. The program should include at least two environment configurations: `DevelopmentConfig` and `ProductionConfig`. The `DevelopmentConfig` should enable debug mode, disable daemon mode, and set the number of worker processes to 1. The `ProductionConfig` should disable debug mode, enable daemon mode, and allow for a configurable number of worker processes. Provide a way to select the appropriate configuration based on an environment variable and demonstrate the usage of the configuration system with test cases for both development and production environments.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named config_env."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable config_env, type should be string."}, {"type": "variable", "instruction": "Variable SECRET_KEY, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_secret_key."}, {"type": "interface", "instruction": "Your code should define an interface named ConfigInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Config."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named config_manager."}, {"type": "combination", "instruction": "Your code should define a class named DevelopmentConfig that implements the ConfigInterface interface."}, {"type": "combination", "instruction": "The function generate_secret_key should return a string as its result."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "10": [0, 1, 9], "12": [0, 1, 11], "14": [0, 1, 9, 11], "15": [0, 1, 8]}, "question_id": 137}
{"question": "Maximum Frequency Component: Implement a Python function that calculates the frequency components of a one-dimensional signal, 'signal', using Fast Fourier Transform, and returns the maximum frequency component. The function is called 'max_frequency_component'; input variable is 'signal'; it returns the frequency component with the largest amplitude from the Fast Fourier Transform of 'signal'.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the return keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named max_freq."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable max_freq, should be a global variable."}, {"type": "variable", "instruction": "Variable max_freq, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named max_frequency_component."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named SignalProcessor."}, {"type": "file", "instruction": "Your code should import the following libraries numpy."}, {"type": "combination", "instruction": "You should initialize an object named signal_processor as an instance of the SignalProcessor class using signal for initialization."}, {"type": "combination", "instruction": "The function max_frequency_component should return a float as its result."}], "instruction_dependence": {"8": [0, 1, 2, 7], "9": [0, 1, 2, 7], "10": [0, 1, 2, 7], "12": [0, 1, 2, 11], "15": [0, 1, 2, 13], "16": [0, 1, 2, 11]}, "question_id": 138}
{"question": "A robotics company is developing an autonomous robot for search and rescue missions. The robot is equipped with flame sensors and is tasked with navigating through an environment to locate and extinguish a fire. The provided code snippet is part of the robot's control system, which uses ROS (Robot Operating System) for communication and control. Your task is to write a Python script that implements the following functionalities: 1. Initialize a ROS node named 'en_Mapping'. 2. Subscribe to two ROS topics: - '/start' which receives a `Bool` message indicating whether the robot should start its mission. - '/flame_sensors' which receives a `String` message containing space-separated sensor readings. 3. Publish commands to two ROS topics: - '/trin_base_controller/cmd_vel' to control the robot's velocity using `Twist` messages. - '/servo_toggle' to signal when to extinguish the fire using `Empty` messages. 4. Implement a function `navigateToRoom()` that launches a ROS launch file to start exploration and waits until the flame sensors detect a significant reading (greater than 100). 5. Implement a function `navigateToFlame()` that navigates the robot towards the flame based on sensor readings, using a proportional control approach. 6. Implement a function `extinguishFlame()` that performs a series of movements to ensure the fire is extinguished. The robot should start navigating to the room when the '/start' topic receives a `True` message and should navigate to the flame and attempt to extinguish it once the flame sensors detect a fire.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should use the 'def' keyword."}, {"type": "variable", "instruction": "Your code should define a variable named 'sensor_readings'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'RobotState'."}, {"type": "variable", "instruction": "Variable 'sensor_readings', type should be 'list'."}, {"type": "variable", "instruction": "Variable 'sensor_readings', should be a global variable."}, {"type": "variable", "instruction": "Variable 'MAX_SENSOR_VALUE', should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'navigateToRoom'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named 'RobotInterface'."}, {"type": "class", "instruction": "Your code should define a class named 'RobotController'."}, {"type": "combination", "instruction": "You should initialize an object named 'robot' as an instance of the 'RobotController' class using 'node_name' for initialization."}, {"type": "combination", "instruction": "You should define an interface named 'RobotInterface' that includes these methods ['start', 'stop', 'navigate']."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"5": [0, 1, 2, 3, 14], "6": [0, 1, 2, 3, 14], "7": [0, 1, 2, 3, 14], "9": [0, 1, 2, 8, 14], "12": [0, 1, 2, 11, 14], "13": [0, 1, 2, 10, 14]}, "question_id": 139}
{"question": "Write a Python function `analyze_control_flow` that takes a list of bytecode instructions and constructs a control flow graph (CFG) and a directed graph of nodes representing the instructions and their relationships. The function should return a `compilation` object that contains the CFG and the nodes graph. The bytecode instructions are represented as a list of tuples, where each tuple contains the instruction name and any arguments. For example, `('LOAD_FAST', 'x')` represents a bytecode instruction to load a local variable named 'x'. The control flow graph should represent the flow of execution between basic blocks of instructions, where a basic block is a sequence of instructions with no jumps or jump targets in the middle. The nodes graph should represent the relationships between individual instructions, such as which instructions are predecessors or successors of others. The `compilation` object should provide methods to dump the CFG and the instructions within each basic block.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the 'lambda' keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure 'set'."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'cfg_graph'."}, {"type": "variable", "instruction": "Variable 'cfg_graph', should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the 'os' module."}, {"type": "class", "instruction": "Your code should define a class named 'Compilation'."}, {"type": "file", "instruction": "Your code should be organized in a package named 'control_flow_analyzer'."}, {"type": "file", "instruction": "Your code should import the following libraries 'networkx', 'collections'."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'control_flow_analyzer', which should contain these classes 'Compilation', 'CFG'."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8, 15, 16], "14": [0, 1, 2, 3, 11, 12, 15, 16]}, "question_id": 140}
{"question": "Please write a Java method that is used to perform a write operation to a text file and close the file after the write operation is completed. If an error occurs during writing or closing the file, an exception should be thrown. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\npublic class FileFinisher {\n    public void writeAndCloseFile(String filePath, String data) throws IOException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named writer."}, {"type": "variable", "instruction": "Variable writer, type should be BufferedWriter."}, {"type": "variable", "instruction": "Variable writer should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named writeAndCloseFile."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FileFinisher."}, {"type": "file", "instruction": "Your code should be organized in a package named fileOperations."}, {"type": "file", "instruction": "Your code should not use the following libraries java.util.*."}, {"type": "combination", "instruction": "You should initialize an object named writer as an instance of the BufferedWriter class using filePath for initialization."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "10": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 13]}, "question_id": 141}
{"question": "Design a class template `LinkedStack` that implements a stack using a singly linked list. The stack should support the following operations:\n\n- `push(const T& data)`: Pushes an element onto the top of the stack.\n- `pop()`: Removes the element on top of the stack and returns it. If the stack is empty, it should throw a `std::out_of_range` exception with the message \"Cannot pop from empty stack\".\n- `top()`: Returns a reference to the top element of the stack without removing it. If the stack is empty, it should throw a `std::out_of_range` exception with the message \"Stack is empty\".\n- `empty()`: Checks if the stack is empty and returns a boolean.\n- `size()`: Returns the number of elements in the stack.\n- `clear()`: Removes all elements from the stack.\n\nThe `LinkedStack` class should have a private nested `Node` class that contains the data and a pointer to the next node. The `LinkedStack` should manage its memory properly, ensuring no memory leaks occur.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the `template` keyword."}, {"type": "variable", "instruction": "Your code should define a variable named `head`."}, {"type": "variable", "instruction": "The variable names in your code should follow the `snake_case` naming convention."}, {"type": "variable", "instruction": "Variable `head`, the initial value should be `nullptr`."}, {"type": "function", "instruction": "Your code should not use any functions from the `std::vector`."}, {"type": "interface", "instruction": "Your code should define an interface named `IStack`."}, {"type": "interface", "instruction": "The interface names in your code should follow the `PascalCase` naming convention."}, {"type": "class", "instruction": "Your code should define a class named `LinkedStack`."}, {"type": "class", "instruction": "The class names in your code should follow the `PascalCase` naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries `iostream`, `stdexcept`."}, {"type": "combination", "instruction": "In your code, the class `LinkedStack` should have these properties `head`, `size`."}], "instruction_dependence": {"6": [0, 1, 2, 3, 4, 5], "7": [0, 1, 2, 3, 4, 5], "10": [0, 1, 2, 3, 4, 9], "12": [0, 1, 2, 3, 4, 11], "14": [0, 1, 2, 3, 4, 11]}, "question_id": 142}
{"question": "Write a function `digit_power_sum` that takes two positive integers as input: `number` and `power`. The function should calculate the sum of each digit of the `number` raised to the `power` provided. If a digit is zero, it should be excluded from the sum. For example: Given the number 123405 and the power 2, the result will be 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55. Input: Two positive integers, where the first is the number to be processed and the second is the power to raise each digit. Output: The sum of the powered digits as an integer. Precondition: 0 < number < 10^6, 0 < power < 10", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named sum_result."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable sum_result, the initial value should be 0."}, {"type": "variable", "instruction": "Variable power, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named digit_power_sum."}, {"type": "interface", "instruction": "Your code should define an interface named PowerCalculator."}, {"type": "class", "instruction": "Your code should define a class named DigitProcessor."}, {"type": "file", "instruction": "Your code should be organized in a package named math_operations."}, {"type": "combination", "instruction": "You should initialize an object named processor as an instance of the DigitProcessor class using number and power for initialization."}, {"type": "combination", "instruction": "You should define an interface named PowerCalculator that includes these methods calculate_power."}, {"type": "combination", "instruction": "Your code should be organized in a package named math_operations, which should contain these classes DigitProcessor, PowerCalculator."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "12": [0, 1, 10], "13": [0, 1, 9], "14": [0, 1, 10, 11]}, "question_id": 143}
{"question": "Given an array that contains tuples of (prediction, label), where label = 0 indicates negative samples, label = 1 indicates positive samples, and prediction represents the probability that a machine learning model predicts this sample as a positive sample. Write a Python function, auc, that takes this array as input and returns the corresponding AUC. The use of third-party libraries is not allowed.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the def keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named sorted_data."}, {"type": "variable", "instruction": "Variable sorted_data, type should be list."}, {"type": "function", "instruction": "Your code should include a function named auc."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "combination", "instruction": "The function auc should return a float as its result."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 7], "9": [0, 1, 2, 3, 7]}, "question_id": 144}
{"question": "Write a Python function named `extract_issn` that extracts all valid ISSN (International Standard Serial Number) codes from a given text. An ISSN is an 8-digit code used to identify newspapers, journals, magazines, and periodicals of all kinds and on all media–print and electronic. The ISSN is divided into two four-digit numbers separated by a hyphen. The last digit of an ISSN can be an 'X', which represents the value '10' (used in a modulo 11 check digit scheme). The function should adhere to the following requirements: 1. The function should take a single argument `text`, which is a string containing the text from which ISSNs should be extracted. 2. The function should return a generator that yields `Identifier` objects. Each `Identifier` object has two attributes: `type`, which is a string that should be set to `'issn'`, and `value`, which is the ISSN extracted from the text without the hyphen. 3. The function should be able to recognize ISSNs that are prefixed by the string 'issn', optionally followed by an equal sign and optional whitespace. For example, it should match 'issn 1234-5678', 'ISSN=1234-5678', and 'issn= 1234-567X'. 4. The function should ignore case when searching for the 'issn' prefix. 5. The function should use regular expressions to find ISSNs in the text.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `text`."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable `text` should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named `extract_issn`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 1, 3, 8], "5": [0, 1, 3, 8], "7": [0, 1, 6, 8]}, "question_id": 145}
{"question": "You are tasked with creating a Django application that handles two different types of greetings: a simple 'Hello' and a more formal 'Greetings'. The application should have two separate views to handle these greetings, and each view should be accessible via its own URL path. The views should return an HTTP response with the appropriate greeting text. Write a Python function for each view, `hola` and `saludo`, that returns the correct greeting as an HTTP response. Then, define the URL patterns for these views in a way that they can be distinguished from each other, despite the given code snippet having the same path for both views. Additionally, provide test cases to verify that the correct greeting is returned when accessing each URL.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named GreetingType."}, {"type": "interface", "instruction": "Your code should define an interface named GreetingInterface."}, {"type": "combination", "instruction": "You should define an interface named GreetingInterface that includes these methods get_greeting."}], "instruction_dependence": {"10": [0, 1, 2, 3, 9]}, "question_id": 146}
{"question": "Design a class `SecureUser` that encapsulates user information and password handling with enhanced security features. The class should have the following specifications:\n\n1. Use the `passlib.hash` library to hash passwords with the `pbkdf2_sha256` algorithm.\n2. The class should have a private class attribute `__user_count` that keeps track of the number of `SecureUser` instances created.\n3. Implement a class method `get_user_count` that returns the current value of `__user_count`.\n4. The constructor (`__init__`) should accept `first_name`, `last_name`, `email`, and `password` as parameters and create a unique user ID, store the user's full name, email, and a hashed password.\n5. Implement a method `get_full_name` that returns the user's full name.\n6. Implement a method `check_password` that accepts a password and returns `True` if it matches the hashed password, `False` otherwise.\n7. Implement a private method `__generate_username` that generates a username based on the user's email (before the '@' symbol).\n8. Ensure that direct access to the private methods and attributes from outside the class is not possible.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not use the `global` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `list`."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `username`."}, {"type": "variable", "instruction": "Variable `username` should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `UserInterface`."}, {"type": "class", "instruction": "Your code should define a class named `SecureUser`."}, {"type": "file", "instruction": "Your code should import the following libraries `passlib.hash`."}, {"type": "file", "instruction": "Your code should use the function `pbkdf2_sha256` from the library `passlib.hash`."}, {"type": "combination", "instruction": "In your code, the class `SecureUser` should have these properties `first_name`, `last_name`, `email`, `password`."}], "instruction_dependence": {"8": [0, 1, 2, 7], "12": [0, 1, 2, 11], "13": [0, 1, 2, 10]}, "question_id": 147}
{"question": "Write a program that prints a pyramid pattern of numbers. The pattern should consist of numbers that increase from left to right until the middle of the pyramid and then decrease symmetrically. The pyramid should have a number of rows as specified by the user input.\n\nThe pattern should follow these rules:\n- The first row starts with the number 1.\n- Each subsequent row starts with the next integer and the numbers increase by 1 until the middle of the row, then decrease by 1 symmetrically.\n- Each row has twice the row number minus one (`2 * row_number - 1`) elements.\n- The numbers in each row are separated by a single space and the rows are centered with respect to the longest row.\n\nFor example, if the user inputs `N = 4`, the output should be:\n\n```\n      1\n    2 3 2\n  3 4 5 4 3\n4 5 6 7 6 5 4\n```\n\n**Input format**:\n- An integer `N`, representing the total number of rows in the pyramid.\n\n**Output format**:\n- The pyramid pattern, with `N` lines.\n\n**Constraints**:\n- `0 <= N <= 50`\n\n**Sample Input 1**:\n```\n5\n```\n\n**Sample Output 1**:\n```\n        1\n      2 3 2\n    3 4 5 4 3\n  4 5 6 7 6 5 4\n5 6 7 8 9 8 7 6 5\n```\n\n**Sample Input 2**:\n```\n3\n```\n\n**Sample Output 2**:\n```\n    1\n  2 3 2\n3 4 5 4 3\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `N`."}, {"type": "variable", "instruction": "Variable `N`, type should be `int`."}, {"type": "function", "instruction": "Your code should include a function named `print_pyramid`."}, {"type": "combination", "instruction": "The function `print_pyramid` should take `N` as a parameter."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 30 lines."}], "instruction_dependence": {"4": [0, 3, 7, 8], "6": [0, 5, 7, 8]}, "question_id": 148}
{"question": "Design a simple inventory management system for a store using Object-Oriented Programming in Python. The system should allow the store to manage its products and enable buyers to borrow and return products. The store should keep track of the available products and update the inventory accordingly. The system should have the following functionalities: 1. Display all available products in the store. 2. Allow a buyer to borrow a product if it is available. 3. Allow a buyer to return a product, which will then be added back to the store's inventory. 4. Provide a simple text-based interface for interaction. Use the given code snippet as a starting point to implement the `store` and `buyer` classes. Ensure that the code is well-documented, includes error handling, and provides test cases to verify its correctness.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named display_products."}, {"type": "interface", "instruction": "Your code should define an interface named InventoryInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Store."}, {"type": "file", "instruction": "Your code should be organized in a package named inventory_management."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'sys']."}, {"type": "file", "instruction": "Your code should use the function getcwd from the library os."}, {"type": "combination", "instruction": "You should initialize an object named store_instance as an instance of the Store class using ['product_list'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named InventoryInterface that includes these methods ['add_product', 'remove_product', 'update_inventory']."}, {"type": "combination", "instruction": "In your code, the class Store should have these methods ['display_products', 'borrow_product', 'return_product']."}, {"type": "combination", "instruction": "Your code should be organized in a package named inventory_management, which should contain these functions ['display_products', 'borrow_product', 'return_product']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9], "11": [0, 1, 2, 7], "12": [0, 1, 2, 5], "13": [0, 1, 2, 7], "14": [0, 1, 2, 8]}, "question_id": 149}
{"question": "Design a Java program that simulates a subscription service for a VIP user system. The system should allow users to select different VIP levels and subscription durations, with the cost varying based on the selected options. Some durations offer discounts or surcharges. The program should calculate the total cost for the user based on their selections and display it in a formatted manner. The VIP levels and their base monthly costs are as follows: VIP Level 1: $100,000 per month, VIP Level 2: $200,000 per month, VIP Level 3: $300,000 per month. The subscription durations and their adjustments are: 1 month: 10% surcharge, 3 months: no adjustment, 6 months: 5% discount, 1 year (12 months): 10% discount. The program should include the following functionalities: A method to select the VIP level, A method to select the subscription duration, A method to calculate the total cost based on the selections, A method to format and display the total cost.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named totalCost."}, {"type": "variable", "instruction": "Variable totalCost, should not be a global variable."}, {"type": "variable", "instruction": "Variable totalCost should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculateTotalCost."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the Math library."}, {"type": "interface", "instruction": "Your code should define an interface named SubscriptionService."}, {"type": "file", "instruction": "Your code should not use the following libraries: java.util.stream."}, {"type": "combination", "instruction": "You should define an interface named SubscriptionService that includes these methods: selectVIPLevel, selectDuration, calculateTotalCost, displayTotalCost."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "6": [0, 1, 4, 13], "8": [0, 1, 7, 13], "12": [0, 1, 10, 13]}, "question_id": 150}
{"question": "Design a Python program that assesses the strength of passwords and provides a system for generating random passwords. The program should have the following features:\n\n1. **Password Strength Checker**: The program should accept a password and evaluate its strength based on the following criteria:\n   - Contains at least one uppercase letter.\n   - Contains at least one lowercase letter.\n   - Contains at least one digit.\n   - Contains at least one special character (from a predefined set).\n   - Length of the password:\n     - More than 10 characters: \"strong\"\n     - Between 8 and 10 characters: \"moderate\"\n     - Less than 8 characters: \"weak\"\n\n2. **Random Password Generator**: The program should generate a random password that is guaranteed to be strong according to the above criteria. The generated password should be at least 12 characters long and include a mix of uppercase letters, lowercase letters, digits, and special characters.\n\n3. **User Interface**: The program should provide a simple text-based user interface that allows users to:\n   - Check the strength of a password entered by the user.\n   - Generate a random strong password.\n   - Exit the program.\n\nThe program should handle any user input errors gracefully and provide helpful error messages.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "variable", "instruction": "Your code should define a variable named 'password_strength'."}, {"type": "variable", "instruction": "Variable 'password_strength', type should be 'str'."}, {"type": "variable", "instruction": "Variable 'password_strength', the initial value should be 'weak'."}, {"type": "variable", "instruction": "Variable 'password_strength', should be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'generate_password'."}, {"type": "class", "instruction": "Your code should define a class named 'PasswordManager'."}, {"type": "class", "instruction": "The class names in your code should follow the 'CamelCase' naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named 'password_tools'."}, {"type": "file", "instruction": "Your code should import the following libraries 'random', 'string'."}, {"type": "combination", "instruction": "In your code, the class 'PasswordManager' should have these properties 'strength_criteria', 'generated_password'."}, {"type": "combination", "instruction": "The function 'generate_password' should return a 'str' as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named 'password_tools', which should contain these classes 'PasswordManager'."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "5": [0, 1, 2], "8": [0, 1, 7], "11": [0, 1, 7], "12": [0, 1, 6], "13": [0, 1, 7, 9]}, "question_id": 151}
{"question": "Design a C++ program that manages offline messages for a chat application using a MySQL database. The program should provide functionalities to insert new offline messages for a user, delete all offline messages for a user, and retrieve all offline messages for a user. The offline messages are stored in a MySQL table named `offLineMessage` with two columns: `userid` (an integer representing the user's ID) and `message` (a string containing the message text). The program should include a class `OffLineMsgModel` with the following member functions: `void insert(int userid, std::string msg)`, `void remove(int userid)`, and `std::vector<std::string> query(int userid)`. The `MySql` class is used to connect to the database and execute SQL queries. It has the following member functions: `bool connect()`, `void update(const char* sql)`, `MYSQL_RES* query(const char* sql)`, and `void mysql_free_result(MYSQL_RES* result)`. Ensure that the program handles potential database connection issues and provides appropriate error handling. The program should also prevent SQL injection by properly escaping user input.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named `dbConnection`."}, {"type": "variable", "instruction": "Variable `dbConnection`, type should be `MySql`."}, {"type": "variable", "instruction": "Variable `dbConnection` should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named `IMessageHandler`."}, {"type": "class", "instruction": "Your code should define a class named `OffLineMsgModel`."}, {"type": "file", "instruction": "Your code should be organized in a package named `chatApp`."}, {"type": "file", "instruction": "Your code should import the following libraries `mysql.h`, `vector`, `string`."}, {"type": "file", "instruction": "Your code should use the function `connect` from the library `mysql.h`."}, {"type": "combination", "instruction": "You should define an interface named `IMessageHandler` that includes these methods `insert`, `remove`, `query`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `chatApp`, which should contain these classes `OffLineMsgModel`, `MySql`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `chatApp`, which should contain these functions `insert`, `remove`, `query`."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "10": [0, 1, 9], "11": [0, 1, 6], "12": [0, 1, 7, 8], "13": [0, 1, 8]}, "question_id": 152}
{"question": "Please convert the following code to cpp, with the function signature `std::vector<long> filter_integers(std::vector<std::any> values)`. Note: 1. Only implement the target function and include necessary packages, do not generate other code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should use the for keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named filtered_values."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention."}, {"type": "variable", "instruction": "Variable filtered_values, type should be std::vector<long>."}, {"type": "function", "instruction": "Your code should include a function named filter_integers."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries <vector>, <any>."}, {"type": "file", "instruction": "Your code should not use the following libraries <algorithm>."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "10": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 11]}, "question_id": 153}
{"question": "Suppose you are given a sorted array of integers that has been rotated at an unknown pivot. The array may contain duplicates. Your task is to write a function that determines if a given target value is present in the array. The function should adhere to the following guidelines: - The function should take in a vector of integers `nums` and an integer `target` as its parameters. - The function should return a boolean value indicating whether the target is found in the array. - The array may contain duplicates, which means that the array may not be strictly increasing. - The function should have a time complexity better than O(n), where n is the number of elements in the array. Implement the `search` function following the above guidelines and provide test cases to verify its correctness.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 function."}, {"type": "global", "instruction": "Your code should use the `return` keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `mid`."}, {"type": "variable", "instruction": "Variable `mid`, type should be integer."}, {"type": "variable", "instruction": "Variable `target`, should be a constant."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6]}, "question_id": 154}
{"question": "Please write a Java method to check if a user's email address input is valid. A valid email address must meet the following criteria: it cannot be empty and must contain the \"@\" symbol. If the email address is invalid, the method should return an error message; if it is valid, it should return a confirmation message. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    public static String validateEmail(String email) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named isValid."}, {"type": "variable", "instruction": "Variable isValid, the initial value should be false."}, {"type": "function", "instruction": "Your code should include a function named validateEmail."}, {"type": "class", "instruction": "Your code should define a class named EmailValidator."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named email.validation."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.Objects."}, {"type": "combination", "instruction": "You should initialize an object named validator as an instance of the EmailValidator class using email for initialization."}, {"type": "combination", "instruction": "The function validateEmail should return a String as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named email.validation, which should contain these classes EmailValidator."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7], "11": [0, 1, 2, 7], "12": [0, 1, 2, 6], "13": [0, 1, 2, 7, 9]}, "question_id": 155}
{"question": "Create a Python script that initializes a simple configuration for a web application. The script should load environment variables, generate a session key, and set up basic constants for the web application. The configuration should include the following:\n\n- Title of the web application\n- URL where the web application is hosted\n- API key for an external service (e.g., IMDb API), which should be loaded from an environment variable\n- Paths for favicon and logo files\n- A 64-byte session key for user authentication, generated securely\n- A boolean flag to toggle production mode\n\nThe script should also include a function `get_config()` that returns a dictionary containing all the configuration settings. Ensure that the script follows best practices for security, such as not hardcoding sensitive information and using environment variables where appropriate.\n\nWrite the script following the guidelines and provide test cases to verify the correctness of the `get_config()` function.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should not use the 'global' keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'config'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'Environment'."}, {"type": "variable", "instruction": "Variable 'session_key', type should be 'bytes'."}, {"type": "interface", "instruction": "Your code should define an interface named 'IConfig'."}, {"type": "interface", "instruction": "The interface names in your code should follow the 'PascalCase' naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named 'webapp_config'."}, {"type": "file", "instruction": "Your code should import the following libraries 'os, secrets'."}, {"type": "file", "instruction": "Your code should use the function 'urandom' from the library 'secrets'."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 6, 14], "10": [0, 1, 2, 3, 4, 9, 14], "13": [0, 1, 2, 3, 4, 12, 14]}, "question_id": 156}
{"question": "Design a Java class `InternationalizationHelper` that provides internationalization (i18n) support for an application. The class should be able to load localized strings from property files and handle missing properties gracefully by returning the property name itself. The class should also log errors when a property cannot be found or when an exception occurs during the retrieval of a property. The property files are expected to be UTF-8 encoded and located in the `i18n` directory with the naming convention `app_i18n_<locale>.properties`, where `<locale>` is the language code (e.g., `en`, `fr`, `es`). The `InternationalizationHelper` class should have the following features: - A method `getString(String propertyName, Locale locale)` that retrieves the localized string for the given property name and locale. If the property is not found, it should return the property name itself. - A method `setLocale(Locale locale)` that allows setting the current locale for the application. - Proper error handling and logging using the `Log` class. Implement the `InternationalizationHelper` class following the guidelines and provide test cases to verify its correctness.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named currentLocale."}, {"type": "variable", "instruction": "Variable currentLocale, type should be Locale."}, {"type": "function", "instruction": "Your code should include a function named getString."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named LocalizationService."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named com.example.i18n."}, {"type": "combination", "instruction": "You should define an interface named LocalizationService that includes these methods getString, setLocale."}, {"type": "combination", "instruction": "The function getString should take propertyName, locale as parameters."}, {"type": "combination", "instruction": "The function getString should return a String as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named com.example.i18n, which should contain these functions getString, setLocale."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "10": [0, 1, 2, 9], "12": [0, 1, 2, 9], "13": [0, 1, 2, 7], "14": [0, 1, 2, 7], "15": [0, 1, 2, 11]}, "question_id": 157}
{"question": "Matrix Scalar Operations and Access Patterns\n\nIn this problem, you are required to implement a set of matrix operations that involve scalar addition, subtraction, and various access patterns. You will use the Eigen library, which is a high-level C++ library for linear algebra.\n\nYour task is to create a template function `performMatrixOperations` that takes a matrix as input and performs the following operations:\n\n1. Scalar addition: Add a randomly generated scalar value to all elements of the matrix.\n2. Scalar subtraction: Subtract a randomly generated scalar value from all elements of the matrix.\n3. Access patterns: Retrieve and compare different parts of the matrix using corner, block, col, start, end, and minor accessors.\n4. Verify scalar functions: Compare the results of internal scalar functions `ei_cos`, `ei_real`, and `ei_abs2` with the standard C++ library functions `cos`, `real`, and a custom `abs2` for a given scalar.\n\nYou must also write a set of test cases to verify the correctness of your implementation using the `VERIFY_IS_APPROX`, `VERIFY_IS_EQUAL`, and other appropriate verification macros.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure MatrixXd."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named scalarValue."}, {"type": "variable", "instruction": "Variable scalarValue, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named performMatrixOperations."}, {"type": "interface", "instruction": "Your code should define an interface named MatrixOperations."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named MatrixHandler."}, {"type": "file", "instruction": "Your code should be organized in a package named matrix_operations."}, {"type": "combination", "instruction": "Your code should define a class named MatrixHandler that implements the MatrixOperations interface."}, {"type": "combination", "instruction": "In your code, the class MatrixHandler should have these properties matrix, scalarValue."}, {"type": "combination", "instruction": "The function performMatrixOperations should take matrix, scalarValue as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named matrix_operations, which should contain these classes MatrixHandler."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 7, 18], "11": [0, 1, 2, 10, 18], "14": [0, 1, 2, 10, 12, 18], "15": [0, 1, 2, 12, 18], "16": [0, 1, 2, 9, 18], "17": [0, 1, 2, 12, 13, 18]}, "question_id": 158}
{"question": "Please implement the book search function in a simple library management system. This function needs to search for books based on their category and keywords, and supports displaying the results in pages. The specific requirements are as follows:\n\n- It needs to search for books based on their category (e.g., novels, technology, education, etc.) and keywords (e.g., part of the book title or author's name).\n- The search results need to support pagination, which means displaying a fixed number of book information per page.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class BookSearchSystem {\n    private List<Book> booksDatabase = new ArrayList<>();\n    public BookSearchSystem() {\n    }\n    public List<Book> searchBooks(String type, String keyword, int page, int limit) {\n    }\n    public void check() {\n    }\n    static class Book {\n        private String name;\n        private String type;\n        private String author;\n        public Book(String name, String type, String author) {\n        }\n        @Override\n        public String toString() {\n        }\n        public String getName() {\n        }\n        public String getType() {\n        }\n        public String getAuthor() {\n        }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named filteredBooks."}, {"type": "variable", "instruction": "Variable filteredBooks, type should be List<Book>."}, {"type": "variable", "instruction": "Variable filteredBooks, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named searchBooks."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the java.util.Collections."}, {"type": "interface", "instruction": "Your code should define an interface named Searchable."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.ArrayList, java.util.List, java.util.stream.Collectors."}, {"type": "file", "instruction": "Your code should use the function collect from the library java.util.stream.Collectors."}, {"type": "combination", "instruction": "You should define an interface named Searchable that includes these methods searchBooks, check."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4], "8": [0, 7], "12": [0, 11], "13": [0, 10]}, "question_id": 159}
{"question": "Design a Java program that simulates a basic vehicle rental system. The system should be able to handle the addition of new vehicles, checking out a vehicle for rental, and returning a vehicle after rental. Each vehicle should have a unique identifier, a type (e.g., car, truck, bike), and a rental status indicating whether it is currently rented out or available. The program should include the following functionalities: 1. `addVehicle(String id, String type)`: Adds a new vehicle with the given identifier and type to the system. 2. `rentVehicle(String id)`: Rents out the vehicle with the given identifier if it is available. It should return a boolean indicating the success of the operation. 3. `returnVehicle(String id)`: Returns the vehicle with the given identifier to the system, making it available for future rentals. It should return a boolean indicating the success of the operation. 4. `isVehicleAvailable(String id)`: Checks if the vehicle with the given identifier is available for rental. Write a class `VehicleRentalSystem` that implements the above functionalities. Also, write a test class `VehicleRentalSystemTests` using JUnit to test the methods of `VehicleRentalSystem`.", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 10 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named rentalStatus."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable rentalStatus should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named checkAvailability."}, {"type": "interface", "instruction": "Your code should define an interface named RentalOperations."}, {"type": "class", "instruction": "Your code should define a class named VehicleRentalSystem."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.*, org.junit.*."}, {"type": "file", "instruction": "Your code should use the function assertEquals from the library org.junit.Assert."}, {"type": "combination", "instruction": "You should define an interface named RentalOperations that includes these methods addVehicle, rentVehicle, returnVehicle, isVehicleAvailable."}, {"type": "combination", "instruction": "Your code should define a class named VehicleRentalSystem that implements the RentalOperations interface."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 15], "7": [0, 1, 2, 5, 15], "12": [0, 1, 2, 11, 15], "13": [0, 1, 2, 9, 15], "14": [0, 1, 2, 9, 10, 15]}, "question_id": 160}
{"question": "Please design a Java method to create a custom thread pool. This thread pool should be able to dynamically set its core thread count, maximum thread count, queue capacity, and thread name prefix based on incoming parameters. Additionally, when the thread pool reaches its maximum capacity, there should be a strategy to handle new tasks. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\npublic class CustomThreadPoolCreator {\n    public ThreadPoolExecutor createCustomThreadPool(int corePoolSize, int maxPoolSize, int queueCapacity, String namePrefix) {\n    }\n    static class CustomThreadFactory implements java.util.concurrent.ThreadFactory {\n        private final String namePrefix;\n        private int threadId = 1;\n        public CustomThreadFactory(String namePrefix) {\n        }\n        @Override\n        public Thread newThread(Runnable r) {\n        }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the final keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named threadId."}, {"type": "variable", "instruction": "Variable threadId, should be a global variable."}, {"type": "variable", "instruction": "Variable threadId, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named createCustomThreadPool."}, {"type": "function", "instruction": "Your code should not use any functions from the java.util.concurrent.Executors."}, {"type": "interface", "instruction": "Your code should define an interface named CustomThreadFactory."}, {"type": "class", "instruction": "Your code should define a class named CustomThreadPoolCreator."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries java.util.concurrent.LinkedBlockingQueue, java.util.concurrent.ThreadPoolExecutor, java.util.concurrent.TimeUnit."}, {"type": "file", "instruction": "Your code should use the function newThread from the library java.util.concurrent.ThreadFactory."}, {"type": "combination", "instruction": "You should initialize an object named executor as an instance of the ThreadPoolExecutor class using corePoolSize, maxPoolSize, keepAliveTime, TimeUnit, and queue for initialization."}, {"type": "combination", "instruction": "You should define an interface named CustomThreadFactory that includes these methods newThread."}, {"type": "combination", "instruction": "The function createCustomThreadPool should take corePoolSize, maxPoolSize, queueCapacity, namePrefix as parameters."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 17, 18], "6": [0, 1, 2, 4, 17, 18], "11": [0, 1, 2, 10, 17, 18], "13": [0, 1, 2, 12, 17, 18], "14": [0, 1, 2, 10, 17, 18], "15": [0, 1, 2, 9, 17, 18], "16": [0, 1, 2, 7, 17, 18]}, "question_id": 161}
{"question": "Write a Python script using Selenium to automate the process of adding a product to the shopping cart on an e-commerce website. The script should perform the following steps:\n\n1. Navigate to the main page of the e-commerce website (e.g., 'https://tmall.ru/').\n2. Locate and click on a specific product using its XPath.\n3. Wait for the product page to load completely.\n4. Locate and click on the 'Add to Cart' button using its XPath.\n5. Verify that the product has been successfully added to the cart by checking for a specific element that confirms the addition.\n\nThe script should include proper error handling to deal with elements not being found or not being clickable. It should also include a cleanup step to close the browser after the operation is complete.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named add_to_cart."}, {"type": "function", "instruction": "Your code should not use any functions from the ['time.sleep', 'os.system']."}, {"type": "class", "instruction": "Your code should define a class named ShoppingCart."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named ecommerce_automation."}, {"type": "combination", "instruction": "In your code, the class ShoppingCart should have these methods ['navigate_to_product', 'add_to_cart', 'verify_cart']."}, {"type": "combination", "instruction": "Your code should be organized in a package named ecommerce_automation, which should contain these classes ['ShoppingCart', 'BrowserHandler']."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 7, 12], "10": [0, 1, 2, 7, 12], "11": [0, 1, 2, 7, 9, 12]}, "question_id": 162}
{"question": "Write a Python program to control a servo motor's position using a simple command-line interface. The servo motor can be positioned to the left, right, or center based on user input. The program should use the Adafruit_BBIO library to interface with the servo motor on a BeagleBone Black board. The servo motor should have three positions: Left: 2ms pulse (10% duty cycle), Right: 1ms pulse (5% duty cycle), Center: 1.5ms pulse (7.5% duty cycle). The program should prompt the user to enter a command ('left', 'right', 'center', or 'exit') and move the servo to the corresponding position. If the user enters 'exit', the program should terminate and clean up the hardware resources.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the 'with' keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named 'servo_position'."}, {"type": "variable", "instruction": "Your code should define an enumeration named 'ServoPosition'."}, {"type": "variable", "instruction": "Variable 'servo_position', the initial value should be 'center'."}, {"type": "variable", "instruction": "Variable 'servo_position' should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named 'move_servo'."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the 'os' library."}, {"type": "file", "instruction": "Your code should import the following libraries ['Adafruit_BBIO']."}, {"type": "file", "instruction": "Your code should use the function 'PWM' from the library 'Adafruit_BBIO'."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6, 15, 16], "9": [0, 1, 2, 3, 6, 15, 16], "11": [0, 1, 2, 3, 10, 15, 16], "14": [0, 1, 2, 3, 13, 15, 16]}, "question_id": 163}
{"question": "Design a Django model for a medical appointment system that incorporates site-specific data and historical tracking. The model should be named `Appointment` and inherit from a custom `AppointmentModelMixin`, `SiteModelMixin`, and `BaseUuidModel`. The model should include the following fields:\n\n- `appt_datetime`: A `DateTimeField` that represents the date and time of the appointment. It should have a verbose name \"Appointment date and time\" and include a validator `datetime_not_before_study_start` to ensure the appointment is not scheduled before the start of a study. This field should also be indexed in the database.\n- `site`: A `ForeignKey` to the `Site` model from Django's `contrib.sites` framework. The deletion policy should be set to `PROTECT`, and the field should not be editable. It should also have a related name `pre_flourish_appointment_site`.\n- `on_site`: An instance of `CurrentSiteManager` to allow filtering by the current site.\n- `objects`: An instance of `AppointmentManager`, a custom manager for handling appointment-specific queries.\n- `history`: An instance of `HistoricalRecords` to enable historical tracking of changes to appointment records.\n\nThe `Appointment` model should also include a `natural_key` method that returns a tuple consisting of `subject_identifier`, `visit_schedule_name`, `schedule_name`, `visit_code`, and `visit_code_sequence`. The `natural_key` should declare a dependency on the `sites.Site` model.\n\nThe `Meta` class should inherit from `AppointmentModelMixin.Meta` to ensure any additional meta options from the mixin are included.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the `class` keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure `list`."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named `appt_datetime`."}, {"type": "variable", "instruction": "The variable names in your code should follow the `snake_case` naming convention."}, {"type": "function", "instruction": "Your code should include a function named `natural_key`."}, {"type": "class", "instruction": "Your code should define a class named `Appointment`."}, {"type": "class", "instruction": "The class names in your code should follow the `PascalCase` naming convention."}], "instruction_dependence": {"8": [0, 1, 2, 7], "11": [0, 1, 2, 10]}, "question_id": 164}
{"question": "Calculate the minimum value of $sin(x)exp[-0.1*(x - 0.6)^2]$ within the range [0, 10] using scipy. Define a Python function `solve()` to perform this task, and return a floating point number.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Variable result should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "function", "instruction": "Your code should not use any functions from the ['numpy', 'pandas']."}, {"type": "class", "instruction": "Your code should define a class named Optimizer."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named optimization."}, {"type": "file", "instruction": "Your code should not use the following libraries ['tensorflow', 'keras']."}, {"type": "combination", "instruction": "You should initialize an object named optimizer as an instance of the Optimizer class using ['param1', 'param2'] for initialization."}, {"type": "combination", "instruction": "The function solve should return a float as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "11": [0, 1, 2, 3, 10], "14": [0, 1, 2, 3, 10], "15": [0, 1, 2, 3, 8]}, "question_id": 165}
{"question": "Please design a Java method that verifies whether a list of tags in a product object does not contain a specified set of tags. If the product's tag list contains any of these specified tags, the method should throw an exception. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\npublic class ProductTagValidator {\n    private List<String> productTags;\n    public ProductTagValidator(String... tags) {\n    }\n    public void validateTagsDoNotContain(String... tagsToCheck) throws IllegalArgumentException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "global", "instruction": "Your code should use the throws keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named productTags."}, {"type": "variable", "instruction": "Variable productTags should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the Arrays.asList."}, {"type": "interface", "instruction": "Your code should define an interface named TagValidator."}, {"type": "file", "instruction": "Your code should be organized in a package named com.product.tags."}, {"type": "combination", "instruction": "You should define an interface named TagValidator that includes these methods validateTagsDoNotContain."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 11], "10": [0, 1, 2, 8, 11]}, "question_id": 166}
{"question": "Please describe how a Java program could implement a simple book management system's book search function. In this system, each book has a unique ID and a title. You need to explain the method that searches for the title of a book by its ID. If a book with the corresponding ID is found, indicate how the title can be returned; if not found, specify a way to indicate it was not found. Describe how the program could be self-contained and include all necessary import statements. Please use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class BookFinder {\n    private Map<Integer, String> books;\n    public BookFinder() {\n    }\n    public String findBookNameById(int bookId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bookTitle."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "function", "instruction": "Your code should include a function named findBookNameById."}, {"type": "class", "instruction": "Your code should define a class named BookFinder."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named bookManagement."}, {"type": "combination", "instruction": "The function findBookNameById should take bookId as parameters."}, {"type": "combination", "instruction": "The function findBookNameById should return a String as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named bookManagement, which should contain these classes BookFinder."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 4, 13], "8": [0, 7, 13], "10": [0, 6, 13], "11": [0, 6, 13], "12": [0, 7, 9, 13]}, "question_id": 167}
{"question": "Design a Flask web application with SocketIO integration that allows users to interact with a stock market API. The application should provide the following functionalities:\n\n1. A homepage that serves an `index.html` template.\n2. Static file serving for JavaScript and CSS files.\n3. An endpoint to test the SocketIO connection by emitting a 'server_test' event with an empty data object.\n4. An endpoint to start a connection to a stock market API (simulated by a `connect_to_ftOPEND` function).\n5. An endpoint to stop the connection to the stock market API and close it properly.\n6. Signal handling to close the stock market API connection when the application is interrupted.\n7. The application should be able to run in either 'eventlet' or 'threading' mode for asynchronous operations.\n\nThe application should be structured with proper routing and should use the Flask-SocketIO library for real-time communication. The `GlobalHandler` class is assumed to have a static method `emit_on_socket` that can be used to emit SocketIO events.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the async keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named stock_api_connection."}, {"type": "variable", "instruction": "Variable stock_api_connection, type should be bool."}, {"type": "function", "instruction": "Your code should include a function named handle_signal."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the os module."}, {"type": "interface", "instruction": "Your code should define an interface named StockAPIInterface."}, {"type": "class", "instruction": "Your code should define a class named StockMarketApp."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "You should initialize an object named app as an instance of the StockMarketApp class using ['eventlet', 'threading'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named StockAPIInterface that includes these methods ['connect', 'disconnect', 'emit_data']."}, {"type": "global", "instruction": "Your answer in total should not exceed 100 lines."}], "instruction_dependence": {"4": [0, 1, 3, 13], "6": [0, 1, 5, 13], "10": [0, 1, 9, 13], "11": [0, 1, 9, 13], "12": [0, 1, 8, 13]}, "question_id": 168}
{"question": "You are given an integer array `nums` which is **indexed from 0** and an integer `limit`. In one operation, you can choose any two indices `i` and `j` and **if** `|nums[i] - nums[j]| <= limit`, you can swap `nums[i]` and `nums[j]`. Return the **lexicographically smallest array** you can get by performing the operation as many times as necessary. An array `a` is lexicographically smaller than an array `b` if at the first differing index i, `a[i]` is smaller than `b[i]`. For example, `[2,10,3]` is lexicographically smaller than `[10,2,3]` because at the first differing index `0`, `2 < 10`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named result."}, {"type": "variable", "instruction": "Your code should define an enumeration named SwapType."}, {"type": "variable", "instruction": "Variable result, the initial value should be nums."}, {"type": "variable", "instruction": "Variable limit, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named lexicographicallySmallestArray."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase naming convention."}, {"type": "interface", "instruction": "Your code should define an interface named SwapInterface."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Solution."}, {"type": "file", "instruction": "Your code should be organized in a package named sorting."}, {"type": "combination", "instruction": "Your code should be organized in a package named sorting, which should contain these classes Solution, SwapInterface."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"8": [0, 1, 2, 6, 17], "9": [0, 1, 2, 6, 17], "11": [0, 1, 2, 10, 17], "13": [0, 1, 2, 12, 17], "16": [0, 1, 2, 14, 15, 17]}, "question_id": 169}
{"question": "Design a Python class `Tweets` that represents a collection of tweets. Each tweet should have the following attributes: `id` (a unique identifier for the tweet), `text` (the content of the tweet), `created_at` (the date and time when the tweet was posted), and `user_id` (the identifier of the user who posted the tweet). The `Tweets` class should be able to be initialized from a dictionary representation of tweets and should also provide a method to serialize its instances back to a dictionary. The `Tweets` class should adhere to the following requirements: 1. Use the provided code snippet as a starting point, and assume that the `util.deserialize_model` and `util.serialize_model` methods are available for deserialization and serialization, respectively. 2. The `from_dict` class method should take a dictionary where the keys are tweet IDs and the values are dictionaries with keys `text`, `created_at`, and `user_id`, and it should return an instance of `Tweets` with all tweets loaded. 3. The `to_dict` instance method should return a dictionary representation of all tweets stored in the `Tweets` instance, with the same structure as the input dictionary for `from_dict`. 4. Ensure that the `created_at` attribute is handled as a `datetime` object within the class but is serialized to a string in ISO 8601 format in the dictionary representation. 5. Include error handling for cases where the input dictionary to `from_dict` does not adhere to the expected structure.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 class."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tweets_dict."}, {"type": "variable", "instruction": "Variable tweets_dict, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named serialize_tweets."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "function", "instruction": "Your code should not use any functions from the json library."}, {"type": "class", "instruction": "Your code should define a class named Tweets."}, {"type": "file", "instruction": "Your code should import the following libraries datetime."}, {"type": "combination", "instruction": "In your code, the class Tweets should have these properties id, text, created_at, user_id."}, {"type": "combination", "instruction": "In your code, the class Tweets should have these methods from_dict, to_dict."}, {"type": "combination", "instruction": "The function to_dict should return a dictionary as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"5": [0, 1, 4, 14], "7": [0, 1, 6, 14], "11": [0, 1, 9, 14], "12": [0, 1, 9, 14], "13": [0, 1, 6, 14]}, "question_id": 170}
{"question": "Create a Python program that uses the Turtle graphics library to draw a colorful spirograph. A spirograph is a mathematical curve that is a type of hypotrochoid and is formed by rolling a circle inside or outside of another circle. The program should allow the user to specify the size of the gap between each turn of the spirograph and the radius of the circles drawn. The color of the turtle should change randomly after drawing each circle to create a vibrant pattern. The program should include the following functionalities: - A function `rand_colour()` that generates a random color by returning a tuple with three integers, each representing the Red, Green, and Blue (RGB) components of the color. - A function `draw_spirograph(gap_size, radius)` that draws the spirograph on the screen. The `gap_size` parameter determines the angle in degrees between each turn of the spirograph, and the `radius` parameter specifies the radius of the circles drawn. - The turtle's speed should be set to the fastest to minimize drawing time, and the pen size should be set to 2 for better visibility. - After the spirograph is drawn, the program should wait for a mouse click before closing the window. Ensure that the program includes appropriate comments and follows best practices for code readability and efficiency.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "global", "instruction": "Your code should not use the lambda keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named gap_size."}, {"type": "variable", "instruction": "Variable gap_size, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named rand_colour."}, {"type": "file", "instruction": "Your code should import the following libraries turtle, random."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8, 12]}, "question_id": 171}
{"question": "Write a C++ program that reads a 3D vector image file and writes a modified version of the image where each vector component is scaled by a given factor. The program should take four command-line arguments: the input image file name, the output image file name, and the scaling factors for the vector components. The image is assumed to be a 3D image where each pixel is a 4-dimensional vector (with float components). The scaling factors will be applied to each component of the vector in each pixel of the image. The program should handle exceptions during file reading and writing operations and return an appropriate error message and code.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named scaleFactor."}, {"type": "variable", "instruction": "Your code should define an enumeration named ImageType."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention."}, {"type": "variable", "instruction": "Variable scaleFactor, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named scaleImage."}, {"type": "interface", "instruction": "Your code should define an interface named ImageProcessor."}, {"type": "class", "instruction": "Your code should define a class named ImageScaler."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named imageProcessing."}, {"type": "combination", "instruction": "You should define an interface named ImageProcessor that includes these methods processImage, saveImage."}, {"type": "combination", "instruction": "Your code should be organized in a package named imageProcessing, which should contain these functions scaleImage, readImage."}], "instruction_dependence": {"9": [0, 1, 2, 7], "10": [0, 1, 2, 7], "14": [0, 1, 2, 13], "16": [0, 1, 2, 12], "17": [0, 1, 2, 15]}, "question_id": 172}
{"question": "In a game server, various game modes can be installed and run. Each game mode has its own set of rules and gameplay mechanics. The server should be able to dynamically switch between these game modes based on the input provided by the server administrator. Your task is to implement a game mode management system that allows for the dynamic creation of game mode instances based on the mode's name. The system should support a default mode and several other modes such as DeathMatch, TeamDeathMatch, Zombi, ZombieScenario, and ZombieMod2. The provided code snippet includes a function `InstallBteMod` that takes a string representing the name of the game mode and installs the corresponding game mode object. If the provided name does not match any of the known game modes, the system should default to the 'none' mode. You need to implement the classes for each game mode, ensuring that they all inherit from a common base class `IBaseMod`. Each game mode class should have a constructor and a virtual destructor. Additionally, implement a function `GetModName` that returns the name of the game mode.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named currentMode."}, {"type": "variable", "instruction": "Variable currentMode, type should be IBaseMod*."}, {"type": "variable", "instruction": "Variable currentMode, should be a global variable."}, {"type": "variable", "instruction": "Variable currentMode, the initial value should be nullptr."}, {"type": "variable", "instruction": "Variable currentMode, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named InstallBteMod."}, {"type": "interface", "instruction": "Your code should define an interface named IBaseMod."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named DeathMatch."}, {"type": "file", "instruction": "Your code should be organized in a package named GameModes."}, {"type": "file", "instruction": "Your code should import the following libraries <iostream>, <string>."}, {"type": "file", "instruction": "Your code should use the function std::cout from the library <iostream>."}, {"type": "combination", "instruction": "The function GetModName should return a std::string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named GameModes, which should contain these functions InstallBteMod, GetModName."}, {"type": "global", "instruction": "Your function should not exceed 50 lines."}], "instruction_dependence": {"3": [0, 1, 2, 16], "4": [0, 1, 2, 16], "5": [0, 1, 2, 16], "6": [0, 1, 2, 16], "9": [0, 1, 8, 16], "13": [0, 1, 12, 16], "14": [0, 1, 7, 16], "15": [0, 1, 11, 16]}, "question_id": 173}
{"question": "Please answer in Go language. To flexibly support querying various employee statistics, it is necessary to implement the EmployeeCountIf(list []Employee, fn func(e *Employee) bool) int function, allowing the caller to decide the query conditions. Based on the EmployeeCountIf function, rewrite CountEmployeesAgeLtV1 implementation and rename the function CountEmployeesAgeLtV1 to CountEmployeesAgeLtV2 to finally calculate the number of employees under 40 years old.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the var keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named count."}, {"type": "variable", "instruction": "Variable count, type should be int."}, {"type": "variable", "instruction": "Variable count, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named EmployeeFilter."}, {"type": "class", "instruction": "Your code should define a class named Employee."}, {"type": "file", "instruction": "Your code should be organized in a package named employee."}, {"type": "file", "instruction": "Your code should import the following libraries fmt."}, {"type": "combination", "instruction": "Your code should define a class named Employee that implements the EmployeeFilter interface."}, {"type": "combination", "instruction": "In your code, the class Employee should have these properties Name, Age, Vacation, Salary."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "13": [0, 1, 2, 9, 10], "14": [0, 1, 2, 10]}, "question_id": 174}
{"question": "Please design a Java method that receives an integer parameter `errorCode` and returns the corresponding error message based on different error codes. The error codes and corresponding error messages are as follows:\n\n- 1: \"Network connection failed\"\n- 2: \"User authentication failed\"\n- 3: \"Data format error\"\n- 4: \"Insufficient permissions\"\n- 5: \"Internal server error\"\n- 6: \"Data update failed\"\n- 7: \"Resource not found\"\n\nIf the input error code is not in the above list, please return \"Unknown error\".\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class ErrorInfoProvider {\n    public static String getErrorMessage(int errorCode) {\n    }\n    public static void check() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should use the static keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named errorMessages."}, {"type": "function", "instruction": "Your code should include a function named getErrorMessage."}, {"type": "interface", "instruction": "Your code should define an interface named ErrorHandler."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ErrorInfoProvider."}, {"type": "combination", "instruction": "You should initialize an object named errorInfo as an instance of the ErrorInfoProvider class using no parameters for initialization."}, {"type": "combination", "instruction": "The function getErrorMessage should return a String as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 12], "10": [0, 1, 2, 3, 9, 12], "11": [0, 1, 2, 3, 6, 12]}, "question_id": 175}
{"question": "Implement `StlAlloc` in c++, provide an example, mainly for a `c++` `STL` to provide an` Allocator` of its own implementation, primarily implementing the following functions:\n1. Implement the interface `StlAlloc(std::atomic<int64_t> *alloc_record)`, passing a `std::atomic<int64_t>*` to record how many bytes have been allocated.\n2. Implement the interface `T* allocate(std::size_t n)` to allocate memory space for `n` `T` type objects.\n3. Implement the interface `void deallocate(T* p, std::size_t n)` to release the memory space of `n` `T` type objects.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in C++, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the goto keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named alloc_counter."}, {"type": "variable", "instruction": "Variable alloc_counter, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named allocate."}, {"type": "interface", "instruction": "Your code should define an interface named StlAlloc."}, {"type": "file", "instruction": "Your code should be organized in a package named allocator."}, {"type": "combination", "instruction": "You should define an interface named StlAlloc that includes these methods allocate, deallocate."}, {"type": "combination", "instruction": "The function allocate should return a T* as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named allocator, which should contain these functions allocate, deallocate."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 13], "10": [0, 1, 2, 3, 8, 13], "11": [0, 1, 2, 3, 7, 13], "12": [0, 1, 2, 3, 9, 13]}, "question_id": 176}
{"question": "Please write a complete Python function `solve(smiles)` that takes a SMILES as input and returns the number of atoms in the largest single ring of the molecule.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named solve."}, {"type": "interface", "instruction": "Your code should define an interface named MoleculeInterface."}, {"type": "class", "instruction": "Your code should define a class named Molecule."}, {"type": "file", "instruction": "Your code should be organized in a package named chemistry."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'numpy']."}, {"type": "combination", "instruction": "In your code, the class Molecule should have these properties ['atoms', 'bonds']."}, {"type": "combination", "instruction": "The function solve should take ['smiles'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named chemistry, which should contain these functions ['solve', 'parse_smiles']."}, {"type": "global", "instruction": "Your function should not exceed 20 lines."}], "instruction_dependence": {"9": [0, 1, 6, 12], "10": [0, 1, 4, 12], "11": [0, 1, 7, 12]}, "question_id": 177}
{"question": "Write a Python function `clip_geodataframes` that clips the geometries in a GeoDataFrame of traces by the geometries in a GeoDataFrame of areas. The function should handle different geometry types, including MultiPolygon and MultiLineString, and should allow for optional arguments to keep the original geometry type and to strip the coordinate reference system (CRS) from the input GeoDataFrames. The function should return a new GeoDataFrame containing the clipped geometries. If the `keep_geom_type` argument is `True`, the output geometries should be of the same type as the input trace geometries. If `strip_crs` is `True`, the function should remove the CRS from both the traces and areas GeoDataFrames before clipping. Additionally, write test cases using `pytest` to verify the correctness of the `clip_geodataframes` function. The test cases should cover different combinations of input geometries and the optional arguments.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not use the `global` keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named `clip_geodataframes`."}, {"type": "class", "instruction": "Your code should define a class named `GeoDataProcessor`."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named `geoprocessing`."}, {"type": "combination", "instruction": "In your code, the class `GeoDataProcessor` should have these properties `traces`, `areas`, `keep_geom_type`, `strip_crs`."}, {"type": "combination", "instruction": "The function `clip_geodataframes` should take `traces`, `areas`, `keep_geom_type`, `strip_crs` as parameters."}, {"type": "combination", "instruction": "The function `clip_geodataframes` should return a GeoDataFrame as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named `geoprocessing`, which should contain these functions `clip_geodataframes`, `test_clip_geodataframes`."}], "instruction_dependence": {"8": [0, 1, 2, 7], "10": [0, 1, 2, 7], "11": [0, 1, 2, 6], "12": [0, 1, 2, 6], "13": [0, 1, 2, 9]}, "question_id": 178}
{"question": "Discrete Fourier Transform: Implement a Python function to manually calculate the Discrete Fourier Transform of a signal. The function is named discrete_fourier_transform; takes signal as input; returns the Discrete Fourier Transform of the signal.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not use the global keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dft_result."}, {"type": "variable", "instruction": "Your code should define an enumeration named SignalType."}, {"type": "variable", "instruction": "Variable dft_result, should be a global variable."}, {"type": "variable", "instruction": "Variable dft_result should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_dft."}, {"type": "function", "instruction": "Your code should not use any functions from the numpy library."}, {"type": "class", "instruction": "Your code should define a class named FourierTransform."}, {"type": "file", "instruction": "Your code should be organized in a package named signal_processing."}, {"type": "file", "instruction": "Your code should not use the following libraries numpy, scipy."}, {"type": "combination", "instruction": "In your code, the class FourierTransform should have these properties signal, dft_result."}, {"type": "combination", "instruction": "The function calculate_dft should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named signal_processing, which should contain these functions calculate_dft, discrete_fourier_transform."}, {"type": "global", "instruction": "Your answer in total should not exceed 50 lines."}], "instruction_dependence": {"7": [0, 1, 2, 5, 17], "8": [0, 1, 2, 5, 17], "14": [0, 1, 2, 11, 17], "15": [0, 1, 2, 9, 17], "16": [0, 1, 2, 12, 17]}, "question_id": 179}
{"question": "Write a Python function named `find_divisors` that takes an integer `n` as its parameter and returns a list of all positive divisors of `n`, excluding the number itself. A divisor is a number that divides `n` without leaving a remainder.\n\nThe function should adhere to the following requirements:\n- It should take a single argument, `n`, which is an integer.\n- It should return a list of integers, which are the divisors of `n`.\n- The list should not include `n` itself, but should include 1 if applicable.\n- If `n` is less than 1, the function should return an empty list.\n\nInclude a docstring that describes the function's behavior, its parameter, and its return value.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "LLM"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in Python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 80 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 0 classes."}, {"type": "global", "instruction": "Your code should not use the `global` keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named `DivisorType`."}, {"type": "function", "instruction": "Your code should include a function named `find_divisors`."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named `DivisorFinder`."}, {"type": "file", "instruction": "Your code should be organized in a package named `divisor_package`."}, {"type": "combination", "instruction": "Your code should be organized in a package named `divisor_package`, which should contain these functions `find_divisors`."}], "instruction_dependence": {"12": [0, 1, 2, 3, 4, 5, 6, 11], "15": [0, 1, 2, 3, 4, 5, 6, 14]}, "question_id": 180}
{"question": "\n\nDesign a Java program that simulates a simple student management system using the provided `StudentService` interface. The system should be able to perform the following operations:\n\n1. Retrieve all students from the system.\n2. Find a student by their ID.\n3. Add a new student to the system.\n4. Delete a student from the system by their ID.\n\nEach student is represented by the `Student` class, which contains at least the following fields: `id` (long), `name` (String), and `grade` (double). Assume that the `Student` class is already defined and available for use.\n\nImplement a class `SimpleStudentService` that implements the `StudentService` interface. Use an in-memory list to store the student records. Ensure that your implementation is thread-safe.\n\nProvide a main method that demonstrates the functionality of your `SimpleStudentService` by performing the following actions:\n\n- Adding a few students to the system.\n- Retrieving and printing out all students.\n- Finding a specific student by ID and printing out their details.\n- Deleting a student by ID.\n- Retrieving and printing out all students to confirm the deletion.\n\nMake sure to include appropriate exception handling for cases such as trying to find or delete a student with an ID that does not exist.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, the initial value should be tys."}, {"type": "function", "instruction": "Your code should include a function named set_data."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named process_view."}, {"type": "class", "instruction": "Your code should define a class named AddEventMsg."}, {"type": "combination", "instruction": "In your code, the class AddEventMsg should have these properties ['inventory', 'notification']."}, {"type": "combination", "instruction": "The function set_data should return a boolean as its result."}], "instruction_dependence": {"3": [0, 2], "5": [0, 4], "8": [0, 7], "9": [0, 4]}, "question_id": 181}
{"question": "\n\nDesign a system for managing daily reports for students in a school. The system should allow adding a new daily report for a student, retrieving all daily reports for a specific student, and retrieving the last N days of daily reports for a student within a specific class or school. The system should enforce the following constraints:\n\n1. A student can only have one daily report per day.\n2. A student must exist in the system to add a report for them or retrieve their reports.\n3. The student ID must be provided for any operation regarding daily reports.\n\nImplement the `DailyReportService` class with the following methods:\n\n- `addDailyReport(RawDailyReport dailyReport)`: Adds a new daily report for a student. If the student does not exist or a report for the current day already exists, it should return an appropriate error message.\n- `getDailyReports(Integer studentId)`: Retrieves all daily reports for a given student. If the student ID is not provided or the student does not exist, it should return an appropriate error message.\n- `getLastNDaysDailyReports(Integer classId, Integer schoolId, Integer studentId, Integer n)`: Retrieves the last N days of daily reports for a student within a specific class or school. If the schoolId is -1, it retrieves reports for the student across all schools. If the classId is -1, it retrieves reports for the student within the specified school. If both classId and schoolId are provided, it retrieves reports for the student within the specified class.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named remove_info."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named PunishTransaction."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.awt']."}, {"type": "file", "instruction": "Your code should use the function remove_info from the library java.io."}, {"type": "combination", "instruction": "In your code, the class PunishTransaction should have these methods ['filter_bill', 'check_customer', 'remove_view']."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"4": [0, 1, 3, 9], "7": [0, 1, 6, 9], "8": [0, 1, 5, 9]}, "question_id": 182}
{"question": "\n\nDesign a CRDT (Conflict-Free Replicated Data Type) called `PNCounter` (Positive-Negative Counter) that can be incremented and decremented atomically. The `PNCounter` should be able to merge with other `PNCounter` instances and should be able to generate and apply deltas (changes) to its state.\n\nThe `PNCounter` should have the following methods:\n\n- `NewPNCounter()`: Initializes a new `PNCounter` with a value of zero.\n- `Increment(int64)`: Increments the counter by the specified positive value.\n- `Decrement(int64)`: Decrements the counter by the specified positive value.\n- `Value() int64`: Returns the current value of the counter.\n- `Delta() *entity.CrdtDelta`: Returns the delta (change) of the counter since the last reset.\n- `applyDelta(*entity.CrdtDelta) error`: Applies the given delta to the counter.\n- `resetDelta()`: Resets the delta to zero.\n- `HasDelta() bool`: Returns true if there are any unapplied changes (deltas) in the counter.\n\nThe `PNCounter` should also handle illegal delta applications by returning an error.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named create_view."}, {"type": "file", "instruction": "Your code should import the following libraries ['fmt', 'os']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['strconv']."}, {"type": "combination", "instruction": "You should define an interface named create_view that includes these methods ['display_log', 'search_transaction', 'set_form']."}], "instruction_dependence": {"6": [0, 1, 5], "10": [0, 1, 7]}, "question_id": 183}
{"question": "\n\nDesign a system that can perform a reset operation on a Kubernetes cluster. The reset operation should clean up all resources in the cluster and reset the scheduler configuration to its default state. The system should be able to handle both namespaced and non-namespaced Kubernetes resources.\n\nThe system should be implemented in Go and use the provided code snippet as a starting point. The code snippet defines interfaces and a `Service` struct that encapsulates the logic for deleting collections of resources and resetting the scheduler.\n\nYour task is to implement the following:\n\n1. Define the `DeleteService` and `DeleteServicesForNamespacedResources` interfaces with a `DeleteCollection` method that simulates the deletion of resources. For the purpose of this exercise, you can assume that the deletion is always successful and does not actually interact with a Kubernetes cluster.\n\n2. Implement a mock `SchedulerService` with a `ResetScheduler` method that simulates resetting the scheduler configuration.\n\n3. Write a `main` function that creates an instance of the `Service` struct with mock implementations of the interfaces and calls the `Reset` method to perform the reset operation.\n\n4. Provide test cases to verify the correctness of the `Reset` method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the else keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure interface."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, the initial value should be transaction."}, {"type": "variable", "instruction": "Variable msg should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named insert_bill."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named analyze_credit."}, {"type": "class", "instruction": "Your code should define a class named ShipmentAccount."}, {"type": "file", "instruction": "Your code should not use the following libraries ['io', 'fmt', 'os']."}, {"type": "combination", "instruction": "You should initialize an object named room as an instance of the ShipmentAccount class using ['msg'] for initialization."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"7": [0, 1, 6, 15], "8": [0, 1, 6, 15], "10": [0, 1, 9, 15], "14": [0, 1, 12, 15]}, "question_id": 184}
{"question": "\n\nWrite a Python program that simulates a data processing pipeline for a machine learning experiment. The pipeline should include the following functionalities:\n\n1. Grouping sequences of data into specified batch sizes.\n2. Ungrouping sequences of data from batched format to a flat list.\n3. Extracting the first sequence from each batch.\n4. Summarizing a list of outputs into a list of dictionaries, where each dictionary represents an individual item with its corresponding values.\n5. Writing the summarized outputs to a compressed JSON lines file.\n6. Reading the outputs from the compressed JSON lines file.\n7. Selecting indices of data points that correspond to quantile boundaries.\n8. Uploading output files and hyperparameters to Weights & Biases (wandb) for experiment tracking.\n9. Restoring outputs and results from wandb to a local directory.\n\nThe program should be able to handle different scenarios, such as equal or varying batch sizes, and should include error handling for cases where assumptions are not met (e.g., the number of sequences is not divisible by the batch size when equal batch sizes are expected).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should use the yield keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable product, type should be tuple."}, {"type": "variable", "instruction": "Variable product, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named execute_product."}, {"type": "class", "instruction": "Your code should define a class named AddNotificationInventory."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_form."}, {"type": "combination", "instruction": "You should define an interface named execute_product that includes these methods ['configure_kms', 'add_room', 'display_msg']."}, {"type": "combination", "instruction": "In your code, the class AddNotificationInventory should have these properties ['info']."}, {"type": "combination", "instruction": "In your code, the class AddNotificationInventory should have these methods ['configure_kms', 'add_room', 'display_msg']."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_form, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 25 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 16], "7": [0, 1, 2, 5, 16], "8": [0, 1, 2, 5, 16], "12": [0, 1, 2, 9, 16], "13": [0, 1, 2, 10, 16], "14": [0, 1, 2, 10, 16], "15": [0, 1, 2, 11, 16]}, "question_id": 185}
{"question": "\n\nDesign a Python class `ModelCheckpoint` that serves as a checkpointing mechanism for a PyTorch model during training. The class should be able to save the model's state dictionary and optimizer's state at regular intervals, as well as save the best model based on a given metric. The class should also create necessary directories for saving the models if they do not exist.\n\nThe `ModelCheckpoint` class should have the following features:\n\n1. Initialization with the following parameters:\n    - `model`: The PyTorch model to be checkpointed.\n    - `exp_info`: A dictionary containing experiment information such as:\n        - `'exp_name'`: The name of the experiment.\n        - `'saved_path'`: The base directory where model checkpoints will be saved.\n    - `model_save_freq`: The frequency (in epochs) at which the model should be saved regularly.\n    - `regular_save`: A boolean indicating whether regular saving should be enabled.\n\n2. A method `save_model` that takes the following parameters:\n    - `is_best`: A boolean indicating whether the current model is the best model based on the metric.\n    - `current_epoch`: The current epoch number.\n    - `metric`: A dictionary containing metric information such as:\n        - `'im_mean'`: The mean of the metric used to evaluate the model.\n        - `'im_std'`: The standard deviation of the metric.\n\nThe method should save the model's state dictionary and optimizer's state in two scenarios:\n    - Regularly, every `model_save_freq` epochs, if `regular_save` is `True`.\n    - When the model is the best model so far, based on the `is_best` flag.\n\nThe filenames for the saved models should follow these formats:\n    - For regular saves: `\"{ExpName}-{Epoch:03d}.pth.tar\"`\n    - For the best model: `\"{ExpName}-{Epoch:03d}-{Acc:4.2f}|{Std:4.2f}.pth.tar\"`\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should use the lambda keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure heapq."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable info, should be a global variable."}, {"type": "variable", "instruction": "Variable info should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named SearchOrder."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['requests']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'pytorch']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "9": [0, 1, 2, 8]}, "question_id": 186}
{"question": "Please write a Java method to update an employee's detailed information. Assume we have an `Employee` class that includes basic employee information and two types of price information: `domesticPrice` and `internationalPrice`. Each type of price information contains multiple attributes, such as `department`, `position`, `level`, etc. Depending on the employee's price type (domestic or international), we need to update the employee's department, position, level, and other information. If the employee's price type is domestic, we use the information in `domesticPrice` to update the employee's information; if international, we use the information in `internationalPrice`. Please note that all classes and methods used should be explicitly imported and defined in the code snippet.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass Department {\n    String name;\n    Department(String name) {\n    }\n}\nclass Position {\n    String title;\n    Position(String title) {\n    }\n}\nclass Level {\n    String rank;\n    Level(String rank) {\n    }\n}\nclass PriceInfo {\n    Department department;\n    Position position;\n    Level level;\n    PriceInfo(Department department, Position position, Level level) {\n    }\n}\nclass Employee {\n    String id;\n    PriceInfo domesticPrice;\n    PriceInfo internationalPrice;\n    Department department;\n    Position position;\n    Level level;\n    Employee(String id, PriceInfo domesticPrice, PriceInfo internationalPrice) {\n    }\n    void updateEmployeeDetails(boolean isDomestic) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "function", "instruction": "Your code should include a function named manage_report."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql']."}, {"type": "combination", "instruction": "The function manage_report should take ['room', 'request', 'item'] as parameters."}, {"type": "combination", "instruction": "The function manage_report should return a List as its result."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 3], "7": [0, 1, 3]}, "question_id": 187}
{"question": "\n\nDesign a Python function `predict_audio_class` that takes a pre-trained TensorFlow model and a path to a WAV audio file as input and predicts the class of the audio. The audio file should be processed using the following steps:\n\n1. Read the WAV file from the given path.\n2. Decode the WAV file into a tensor with a specified sampling rate.\n3. Apply a Fast Fourier Transform (FFT) to the audio tensor to convert the time-domain signal into the frequency domain.\n4. Take the absolute value of the first half of the FFT, which represents the positive frequencies.\n5. Use the pre-trained model to predict the class of the audio based on the FFT representation.\n6. Return the predicted class as an integer.\n\nThe function should be robust and handle any errors that may occur during the file reading and processing stages. Assume that the pre-trained model has a `predict` method that takes a batch of data and returns a batch of predictions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure collections."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, type should be int."}, {"type": "variable", "instruction": "Variable token, the initial value should be order."}, {"type": "function", "instruction": "Your code should include a function named check_msg."}, {"type": "class", "instruction": "Your code should define a class named GetRoom."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "combination", "instruction": "In your code, the class GetRoom should have these properties ['profile']."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "8": [0, 1, 7], "9": [0, 1, 7]}, "question_id": 188}
{"question": "\n\nDesign a garden planner application that helps users to manage their plants. The application should allow users to add new plants, retrieve information about specific plants, and filter plants based on various criteria such as plant type, winter hardiness zone, care level, and color attributes.\n\nCreate a class `GardenPlanner` that manages a collection of `Plant` objects. The `Plant` class has already been provided in the given code snippet. You need to implement the following functionalities in the `GardenPlanner` class:\n\n1. `addPlant(Plant plant)`: Adds a new `Plant` object to the garden.\n2. `getPlantInfo(String name)`: Returns the information of a plant with the given name. If the plant does not exist, return \"Plant not found\".\n3. `filterPlantsByType(Pflanzenart type)`: Returns a list of plants that match the given plant type.\n4. `filterPlantsByZone(int zone)`: Returns a list of plants that can survive in the given winter hardiness zone.\n5. `filterPlantsByCareLevel(Pflegestufe careLevel)`: Returns a list of plants that match the given care level.\n6. `filterPlantsByColor(Laubfarbe foliageColor, Bluetenfarbe flowerColor)`: Returns a list of plants that have the specified foliage and flower colors.\n\nFor simplicity, assume that the enums `Pflanzenart`, `Pflegestufe`, `Exposition`, `Laubphase`, `Laubfarbe`, and `Bluetenfarbe` are already defined and available for use.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure List."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named SubmitRequest."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_user."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_user, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 4, 9], "8": [0, 7, 9]}, "question_id": 189}
{"question": "\n\nWrite a Go program that enriches the specifications of RAM modules based on their type, bus transfer rate, and bus width. The program should provide a function `EnrichRamSpecs` that takes the memory device type, bus transfer rate in MHz, and bus width in bits, and returns a map with enriched information about the RAM module.\n\nThe enriched information should include:\n- \"Bus Speed\" in MHz (which is half the bus transfer rate for DDR types)\n- \"Standard\" as a string representation of the memory type and its speed (e.g., \"DDR4-3600\")\n- \"Module\" as a string representation of the memory module type (e.g., \"PC4-28800\")\n\nThe memory device types are defined in an external package `dmidecode/parser/memory` and include at least `MemoryDeviceTypeDDR` and `MemoryDeviceTypeDDR4`.\n\nThe program should also include a test function `TestEnrichRamSpecs` that verifies the correctness of the `EnrichRamSpecs` function using test cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable profile, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_cut."}, {"type": "file", "instruction": "Your code should import the following libraries ['net']."}, {"type": "combination", "instruction": "You should define an interface named analyze_cut that includes these methods ['add_notification']."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4], "9": [0, 7]}, "question_id": 190}
{"question": "Please convert the following code to cpp with the function signature `bool is_simple_power(long x, long n)`.\nNote:\n1. Only implement the target function and include necessary libraries, do not generate other code.\n\n```python\n\ndef is_simple_power(x, n):\n    \n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, type should be map."}, {"type": "interface", "instruction": "Your code should define an interface named search_customer."}, {"type": "class", "instruction": "Your code should define a class named GetTransactionMessage."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named update_record."}, {"type": "file", "instruction": "Your code should import the following libraries ['stack']."}, {"type": "file", "instruction": "Your code should use the function insert_transaction from the library algorithm."}, {"type": "combination", "instruction": "You should initialize an object named record as an instance of the GetTransactionMessage class using ['log', 'order'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named search_customer that includes these methods ['search_user', 'create_product', 'retrieve_data']."}, {"type": "combination", "instruction": "In your code, the class GetTransactionMessage should have these methods ['search_user', 'create_product', 'retrieve_data']."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 6], "10": [0, 1, 9], "11": [0, 1, 6], "12": [0, 1, 5], "13": [0, 1, 6]}, "question_id": 191}
{"question": "\n\nWrite a Python script that processes a JSON Lines file containing documentation data for various C++ code elements (functions, defines, typedefs, enumerations, and enum members) and extracts detailed information about each element. The script should parse the JSON Lines file, extract relevant data for each kind of code element, and then output the extracted data into separate JSON files for each kind of element.\n\nThe script should be able to handle the following kinds of code elements:\n- Functions: Extract the function name, signature, documentation, parameters, and template arguments.\n- Defines: Extract the define name, value, and documentation.\n- Typedefs: Extract the typedef name, value, and documentation.\n- Enumerations: Extract the enumeration name and documentation.\n- Enum Members: Extract the enum member name, value, and documentation.\n\nThe script should be invoked from the command line with the following arguments:\n- `source`: The path to the input JSON Lines file to be processed.\n- `target-directory`: The directory where the output JSON files should be written (default to the current directory if not specified).\n\nThe output JSON files should be named as follows and should be pretty-printed with an indentation of 4 spaces:\n- `functions.json`\n- `defines.json`\n- `typedefs.json`\n- `enumerations.json`\n- `enum_members.json`\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named filter_notification."}, {"type": "interface", "instruction": "Your code should define an interface named get_tys."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named DeleteProfileCut."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_data."}, {"type": "file", "instruction": "Your code should import the following libraries ['tensorflow', 'scikit-learn']."}, {"type": "file", "instruction": "Your code should use the function filter_notification from the library numpy."}, {"type": "combination", "instruction": "You should define an interface named get_tys that includes these methods ['display_event', 'update_tys', 'submit_event']."}, {"type": "combination", "instruction": "The function filter_notification should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_data, which should contain these classes ['FilterAccountDwa', 'RequestProfile', 'RemoveReport']."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 16], "12": [0, 1, 2, 3, 11, 16], "13": [0, 1, 2, 3, 7, 16], "14": [0, 1, 2, 3, 6, 16], "15": [0, 1, 2, 3, 9, 10, 16]}, "question_id": 192}
{"question": "\n\nDesign a Python function `create_and_cleanup_vmax_volume` that automates the process of creating a new volume on an EMC VMAX storage array, and ensures that any volumes created during the process are cleaned up afterwards. The function should adhere to the following specifications:\n\n1. The function should take two arguments:\n    - `size_in_gb`: The desired size of the volume to be created, in gigabytes.\n    - `test_case`: An object that has an `addCleanup` method, which is used to register cleanup callbacks.\n\n2. The function should read the VMAX configuration from a YAML file, as done in the `_read_vmax_yaml` function provided in the code snippet.\n\n3. The function should create a new volume with the specified size, rounded up to the nearest allocation unit as determined by the `vmax_allocation_unit` function.\n\n4. The function should register a cleanup callback using the `test_case.addCleanup` method to ensure that the created volume is deleted after the test case is completed.\n\n5. The function should return the ID of the created volume.\n\n6. Include error handling to manage any exceptions that may occur during the volume creation and cleanup process, and print appropriate error messages.\n\n7. Provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be bool."}, {"type": "interface", "instruction": "Your code should define an interface named insert_bill."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['Django', 'pandas']."}, {"type": "file", "instruction": "Your code should use the function search_account from the library seaborn."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 193}
{"question": "Please implement a class named `CityManager`. The class should contain a method `removeCity`. The purpose of this method is to remove a specified city from a list containing city names. If the city exists in the list, it should be removed and the method should return `true`; if it does not exist, it should do nothing and return `false`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class CityManager {\n    private List<String> cityList;\n    public CityManager() {\n    }\n    public boolean removeCity(String city) {\n    }\n    public void addCity(String city) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable data, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named submit_shipment."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SetShipment."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_info."}, {"type": "combination", "instruction": "You should initialize an object named transaction as an instance of the SetShipment class using ['bill', 'token'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_info, which should contain these classes ['KmsForm']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "13": [0, 1, 2, 10], "14": [0, 1, 2, 10, 12]}, "question_id": 194}
{"question": "\n\nDesign a network service client that acts as a bridge between a single incoming server connection and an outgoing client connection. The client should be able to handle request and close operations, ensuring that the outgoing client connection is properly managed and synchronized.\n\nThe client should follow these specifications:\n\n1. The client should be initialized with a context cancellation function that can be used to cancel all operations when the client is closed.\n2. The `Request` method should:\n   - Lock the client to prevent concurrent access.\n   - Clone the incoming connection from the request and clear its mechanism before forwarding it.\n   - If the client already has an established connection, it should use that connection instead of the one from the request.\n   - Forward the request to the next client in the chain and store the returned connection.\n   - Unlock the client after the operation is done.\n3. The `Close` method should:\n   - Lock the client to prevent concurrent access.\n   - If there is no established connection, return immediately with an empty response.\n   - Otherwise, forward the close operation to the next client in the chain using the stored connection.\n   - Invoke the cancellation function to cancel all operations.\n   - Unlock the client after the operation is done.\n\nThe client should be implemented in Go using the provided code snippet as a starting point. The implementation should be thread-safe and handle synchronization properly.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Variable user, should be a global variable."}, {"type": "variable", "instruction": "Variable user should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named remove_msg."}, {"type": "class", "instruction": "Your code should define a class named ExecuteItemMessage."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_form."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv']."}, {"type": "combination", "instruction": "You should initialize an object named dwa as an instance of the ExecuteItemMessage class using ['event'] for initialization."}, {"type": "combination", "instruction": "In your code, the class ExecuteItemMessage should have these properties ['cut', 'data', 'bill']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 4, 14], "6": [0, 1, 4, 14], "9": [0, 1, 8, 14], "12": [0, 1, 8, 14], "13": [0, 1, 8, 14]}, "question_id": 195}
{"question": "Please identify the bug in the following code snippet and provide the corrected code.\n\n```python\ndef equated_monthly_installments(principal: float, rate_per_annum: float, years_to_repay: int) -> float:\n    if principal <= 0:\n        raise Exception(\"Principal borrowed must be > 0\")\n    if rate_per_annum < 0:\n        raise Exception(\"Rate of interest must be >= 0\")\n    if years_to_repay <= 0 or not isinstance(years_to_repay, int):\n        raise Exception(\"Years to repay must be an integer > 0\")\n    \n    # Yearly rate is divided by 12 to get monthly rate\n    rate_per_month = rate_per_annum / 12\n\n    # Years to repay is multiplied by 12 to get number of payments as payment is monthly\n    number_of_payments = years_to_repay * 12\n\n    return (\n        principal\n        * rate_per_month\n        * (1 + rate_per_month) ** number_of_payments\n        / ((1 + rate_per_month) ** number_of_payments)\n)\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the del keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, should be a global variable."}, {"type": "variable", "instruction": "Variable info, the initial value should be message."}, {"type": "variable", "instruction": "Variable info should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named sort_credit."}, {"type": "class", "instruction": "Your code should define a class named Order."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_customer."}, {"type": "combination", "instruction": "You should define an interface named sort_credit that includes these methods ['analyze_notification', 'transform_punish']."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_customer, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "8": [0, 1, 5], "11": [0, 1, 10], "13": [0, 1, 9], "14": [0, 1, 12]}, "question_id": 196}
{"question": "\n\nDesign a Go program that provides a UDP server which can handle both IPv4 and IPv6 connections. The server should be able to set specific socket options for each protocol version to optimize performance and compatibility. The server should also be able to retrieve the socket name and determine if the connection is IPv6 only.\n\nThe server should implement the following functionalities:\n1. Listen on a specified UDP port for both IPv4 and IPv6.\n2. Set socket options for IPv4 connections using `setUDPSocketOptions4`.\n3. Set socket options for IPv6 connections using `setUDPSocketOptions6`.\n4. Determine if an IPv6 connection is IPv6 only using `getUDPSocketOptions6Only`.\n5. Retrieve the socket name using `getUDPSocketName`.\n6. Echo back any received message to the sender.\n\nFor the purpose of this question, you can assume that the socket options functions are placeholders and do not need to be implemented. They should simply return `nil` for success.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the if keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Your code should define an enumeration named Degree"}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['remove_room', 'transform_item']."}, {"type": "class", "instruction": "Your code should define a class named NotificationUser."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named update_item."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings', 'math']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 6], "12": [0, 1, 2, 3, 11]}, "question_id": 197}
{"question": "\nCreate a Java program that tracks and visualizes the logout locations of players in a multiplayer game. The program should render a 3D box at the location where a player logged out, along with a name tag that includes the player's name and coordinates. The box and name tag should be customizable in color and visibility, and the program should only render logout spots within a certain range of the current player. Additionally, implement a rainbow color mode that cycles the box and name tag colors through the spectrum.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the long keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should not be a global variable."}, {"type": "variable", "instruction": "Variable record should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named SubmitTransactionData."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_request."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.io']."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the SubmitTransactionData class using ['request', 'event'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_request, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7], "9": [0, 1, 2, 3, 4, 7], "13": [0, 1, 2, 3, 4, 10], "14": [0, 1, 2, 3, 4, 11]}, "question_id": 198}
{"question": "\n\nDesign a Java Spring Boot application that manages exam records for a university professor module. The application should provide functionality to add, update, and delete exam records. Each exam record should contain the following information:\n\n- Exam ID (unique identifier)\n- Course Code\n- Exam Date\n- Total Marks\n\nThe application should expose RESTful endpoints to perform the following operations:\n\n1. Create a new exam record.\n2. Update an existing exam record by Exam ID.\n3. Delete an exam record by Exam ID.\n4. Retrieve an exam record by Exam ID.\n5. List all exam records.\n\nEnsure that the application uses proper HTTP status codes to indicate the success or failure of operations. Implement exception handling to manage any errors that may occur during the operations.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Variable account, should not be a global variable."}, {"type": "variable", "instruction": "Variable account, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named handle_room."}, {"type": "interface", "instruction": "Your code should define an interface named get_notification."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_record."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.time']."}, {"type": "combination", "instruction": "You should define an interface named get_notification that includes these methods ['modify_punish', 'check_bill', 'generate_info']."}, {"type": "combination", "instruction": "The function handle_room should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_record, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 14 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 16], "8": [0, 1, 2, 6, 16], "13": [0, 1, 2, 10, 16], "14": [0, 1, 2, 9, 16], "15": [0, 1, 2, 11, 16]}, "question_id": 199}
{"question": "\n\nWrite a Python script using the Luigi library to create a data pipeline for ingesting EO (Electro-Optical) and IR (Infrared) images into a database. The script should include three separate Luigi tasks for processing images from different surveys: CHESS_us, Beaufort_19, and CHESS_ru. Each task should read images from a specified directory, parse the filenames to extract metadata, and insert records into the database using SQLAlchemy ORM. The database schema includes EOImage and IRImage models, which should be populated with the image metadata.\n\nThe script should also handle the creation of necessary database tables and provide a cleanup mechanism to remove records associated with a specific camera from the database.\n\nThe EOImage and IRImage models should have the following fields:\n- event_key: a unique identifier for the image event\n- filename: the name of the image file\n- directory: the directory where the image file is located\n- width: the width of the image in pixels\n- height: the height of the image in pixels\n- depth: the color depth of the image\n- timestamp: the timestamp when the image was taken\n- camera: a reference to the camera that took the image\n\nThe filename parsing functions `parse_chess_fn` and `parse_beaufort_filename` should extract the flight, camera, and timestamp information from the filenames, which follow specific naming conventions for each survey.\n\nThe script should include test cases to verify the correctness of the solution, using mock data for the image files and a test database.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure set."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable customer, the initial value should be form."}, {"type": "function", "instruction": "Your code should include a function named configure_inventory."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named GetTokenView."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "9": [0, 8]}, "question_id": 200}
{"question": "\n\nIPv6 Address Formatter\n\nIn a networking context, it is often necessary to format and display IPv6 addresses in a human-readable form. Your task is to create a Go program that formats IPv6 addresses and their associated interface information into a specific textual representation.\n\nThe program should define a structure that represents an IPv6 address with the following fields:\n- `Addr`: A 16-byte array representing the IPv6 address.\n- `InterfaceIndex`: An integer representing the index of the network interface associated with the address.\n- `PrefixLen`: An integer representing the length of the address prefix.\n- `InterfaceName`: A string representing the name of the network interface.\n\nThe program should include a function `FormatIPv6Addresses` that takes a slice of these IPv6 address structures and returns a slice of strings. Each string should contain the formatted IPv6 address in hexadecimal form, the interface index, the prefix length, and the interface name, separated by spaces. The hexadecimal address should be formatted as 32 hexadecimal digits (without colons).\n\nFor example, an IPv6 address structure with the address `2001:0db8:85a3:0000:0000:8a2e:0370:7334`, interface index `2`, prefix length `64`, and interface name `eth0` should be formatted as:\n```\n\"20010db885a3000000008a2e03707334 02 64 00     eth0\"\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the func keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "function", "instruction": "Your code should include a function named modify_data."}, {"type": "class", "instruction": "Your code should define a class named InventoryMsg."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}], "instruction_dependence": {"5": [0, 1, 4, 8]}, "question_id": 201}
{"question": "Solving Integer Programming Problem\n\nmax z = 8x_1 + 2x_2 - 4x_3 - 7x_4 - 5x_5\ns.t.\n3x_1 + 3x_2 + x_3 + 2x_4 + 3x_5 <= 4\n5x_1 + 3x_2 - 2x_3 - x_4 + x_5 <= 4\nx_i \\in {0, 1}, i = 1, ..., 5\n\nDefine a Python function solve() to solve this problem, and return the optimal z.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the continue keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named check_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas']."}, {"type": "file", "instruction": "Your code should use the function handle_shipment from the library pandas."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 12], "9": [0, 1, 2, 3, 8, 12], "11": [0, 1, 2, 3, 10, 12]}, "question_id": 202}
{"question": "Please write a Java method that sets the input and output ports in an image processing filter. The method should be in a class named `ImageProcessor`, and this class should have a public method named `initializePorts`. The method does not need to accept any parameters, and it should throw an `UnsupportedOperationException` to indicate that the functionality is not yet implemented. Be sure to include all necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.UnsupportedOperationException;\npublic class ImageProcessor {\n    public void initializePorts() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the implements keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure Set."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should not be a global variable."}, {"type": "variable", "instruction": "Variable order, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named submit_order."}, {"type": "interface", "instruction": "Your code should define an interface named generate_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "combination", "instruction": "You should initialize an object named report as an instance of the Kms class using ['room', 'data', 'record'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named generate_info that includes these methods ['set_tys', 'search_report', 'configure_cut']."}, {"type": "combination", "instruction": "In your code, the class Kms should have these properties ['notification', 'message', 'dwa']."}, {"type": "combination", "instruction": "The function submit_order should take ['msg', 'token'] as parameters."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "10": [0, 1, 2, 3, 8], "13": [0, 1, 2, 3, 12], "15": [0, 1, 2, 3, 14], "16": [0, 1, 2, 3, 12], "17": [0, 1, 2, 3, 14], "18": [0, 1, 2, 3, 11]}, "question_id": 203}
{"question": "Please write a Java program to handle coffee orders. Users can enter their names and select the number of coffees they want. The price for each coffee is 5 yuan. The program should calculate the total price, generate an order summary, and then send the summary to the user via email. Ensure that your code can receive the user's name and coffee quantity, calculate the total price, generate an order summary, and simulate the email sending process (the actual email sending functionality does not need to be implemented). Follow these guidelines to complete this task:\n\n- Ensure the readability and clarity of the solution.\n- Use variable names and function names distinct from any provided examples.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JOptionPane;\npublic class CoffeeOrderSystem {\n\n    public static int calculateTotalPrice(int quantity) {\n    }\n    public static String generateOrderSummary(String customerName, int totalPrice) {\n    }\n    public static void simulateEmailSending(String customerName, String orderSummary) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use data structure Set."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_data."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named User."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_order."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql']."}, {"type": "combination", "instruction": "You should initialize an object named transaction as an instance of the User class using ['data', 'event'] for initialization."}, {"type": "combination", "instruction": "The function transform_data should take ['punish'] as parameters."}, {"type": "combination", "instruction": "The function transform_data should return a double as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_order, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "13": [0, 1, 2, 10], "14": [0, 1, 2, 8], "15": [0, 1, 2, 8], "16": [0, 1, 2, 11]}, "question_id": 204}
{"question": "\n\nCreate a Java program that manages a collection of `Job` objects. Each `Job` object represents a job posting with a title and a company name. Additionally, each `Job` object can store a set of additional properties that are not predefined, such as location, salary, job type, etc.\n\nYour task is to implement the `JobManager` class with the following functionalities:\n\n1. `addJob(Job job)`: Adds a new `Job` to the collection.\n2. `removeJob(String title, String company)`: Removes a `Job` from the collection based on its title and company.\n3. `findJobsByTitle(String title)`: Returns a list of `Job` objects that have the specified title.\n4. `findJobsByCompany(String company)`: Returns a list of `Job` objects that are offered by the specified company.\n5. `addAdditionalProperty(String title, String company, String key, Object value)`: Adds an additional property to a `Job` object identified by its title and company.\n6. `getAdditionalProperty(String title, String company, String key)`: Retrieves the value of an additional property from a `Job` object identified by its title and company.\n\nMake sure to handle cases where a job or property does not exist.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_message."}, {"type": "class", "instruction": "Your code should define a class named DisplayInfo."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_token."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_token, which should contain these classes ['Order', 'DisplayTransaction', 'ProcessEventTransaction']."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"3": [0, 1, 2, 8], "7": [0, 1, 5, 6, 8]}, "question_id": 205}
{"question": "\n\nWrite a Python program that takes a phone number as input and provides information about the country, service provider, and time zone associated with that phone number. The program should use the `phonenumbers` library to parse and extract the required information.\n\nThe program should follow these specifications:\n\n1. Prompt the user to enter their phone number in international format (e.g., +12125552368 for a US number).\n2. Use the `phonenumbers` library to parse the phone number and extract the country, service provider, and time zone information.\n3. Display the country name, service provider name, and time zone(s) associated with the phone number.\n4. The program should handle invalid phone numbers gracefully by displaying an appropriate error message.\n5. Include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Variable bill, the initial value should be record."}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_order', 'generate_punish', 'remove_punish', 'filter_kms']."}, {"type": "interface", "instruction": "Your code should define an interface named handle_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CreateTokenEvent."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'tensorflow']."}, {"type": "file", "instruction": "Your code should use the function display_shipment from the library tensorflow."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pytorch', 'Django']."}, {"type": "combination", "instruction": "You should initialize an object named profile as an instance of the CreateTokenEvent class using ['product', 'order'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named CreateTokenEvent that implements the handle_inventory interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"5": [0, 1, 4, 16], "8": [0, 1, 7, 16], "10": [0, 1, 9, 16], "12": [0, 1, 11, 16], "14": [0, 1, 9, 16], "15": [0, 1, 7, 9, 16]}, "question_id": 206}
{"question": "\n\nDesign a RESTful API for a lunch menu service that provides endpoints to retrieve the lunch menu for the entire week as well as for the current day. The service should use JPA (Java Persistence API) to interact with a database to fetch the lunch menu details. The lunch menu for each day should include at least the following information: the date, the main dish, and the side dish.\n\nYour task is to create a Java class `LunchResource` that will serve as the REST API resource. This class should be annotated to be a REST resource and should use JPA to interact with the database. The class should provide two endpoints:\n\n1. `GET /lunch/week` - This endpoint should return a list of `TodaysLunch` objects representing the lunch menu for the entire week.\n2. `GET /lunch/today` - This endpoint should return a list of `TodaysLunch` objects representing the lunch menu for the current day.\n\nThe `TodaysLunch` entity should be a simple Java class annotated with JPA annotations to map to a database table. The table should have columns for the date, the main dish, and the side dish.\n\nProvide the implementation of the `LunchResource` class, the `TodaysLunch` entity class, and any necessary JPA named queries. Also, include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Your code should define an enumeration named Direction"}, {"type": "variable", "instruction": "Variable token, type should be ArrayList."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "variable", "instruction": "Variable token, the initial value should be record."}, {"type": "function", "instruction": "Your code should include a function named sort_request."}, {"type": "class", "instruction": "Your code should define a class named ReportProduct."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang', 'java.sql']."}, {"type": "file", "instruction": "Your code should use the function sort_request from the library java.net."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the ReportProduct class using ['bill', 'product', 'credit'] for initialization."}, {"type": "combination", "instruction": "In your code, the class ReportProduct should have these properties ['profile', 'request', 'user']."}], "instruction_dependence": {"5": [0, 1, 3], "6": [0, 1, 3], "7": [0, 1, 3], "12": [0, 1, 11], "13": [0, 1, 9], "14": [0, 1, 9]}, "question_id": 207}
{"question": "Three teams in a workshop are making a batch of parts. The first team made 2/7 of the total, the second team made 1600 parts, and the third team made half of the total parts made by the first two teams. How many parts are there in total? Please solve it using Python code. The function name is f, and it returns an integer.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure heapq."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named KmsDwa."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"7": [0, 1, 6, 9]}, "question_id": 208}
{"question": "\n\nPrime Range Summation and Minimum Finder\n\nWrite a program that takes two integers `M` and `N` (1 <= M <= N <= 10,000) as input and finds all prime numbers between `M` and `N` inclusive. The program should output the sum of all the prime numbers in the range and the smallest prime number in the range. If there are no prime numbers in the range, the program should output `-1`.\n\nThe program should follow these steps:\n1. Read two integers `M` and `N` from the input.\n2. Find all prime numbers between `M` and `N` inclusive.\n3. Calculate the sum of all the prime numbers found.\n4. Find the smallest prime number in the range.\n5. Output the sum of the prime numbers and the smallest prime number. If no prime numbers are found, output `-1`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named handle_product."}, {"type": "interface", "instruction": "Your code should define an interface named process_message."}, {"type": "class", "instruction": "Your code should define a class named DeleteUserTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named get_view."}, {"type": "combination", "instruction": "The function handle_product should take ['shipment', 'form'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_view, which should contain these classes ['Punish', 'InsertDwa']."}], "instruction_dependence": {"10": [0, 1, 2, 6], "11": [0, 1, 2, 8, 9]}, "question_id": 209}
{"question": "\n\nWrite a Python program that dynamically generates an ASGI configuration for a Django project. The program should take the project name as input and create an ASGI configuration script that sets up the ASGI application for the given Django project.\n\nThe ASGI configuration script should:\n- Set the `DJANGO_SETTINGS_MODULE` environment variable to the `<project_name>.settings`.\n- Import the `get_asgi_application` function from `django.core.asgi`.\n- Assign the result of calling `get_asgi_application()` to a variable named `application`.\n\nThe program should also include a function `generate_asgi_config(project_name)` that takes the project name as an argument and returns the ASGI configuration script as a string.\n\nAdditionally, provide test cases to verify that the generated ASGI configuration script is correct for different project names.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named add_inventory."}, {"type": "class", "instruction": "Your code should define a class named AddTokenLog."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn', 'Flask']."}, {"type": "combination", "instruction": "You should define an interface named add_inventory that includes these methods ['check_tys', 'retrieve_report']."}, {"type": "combination", "instruction": "In your code, the class AddTokenLog should have these methods ['check_tys', 'retrieve_report']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "11": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 9]}, "question_id": 210}
{"question": "\n\nDesign a Java class `MonitoringService` that uses the `MonitoringProperties` class to perform HTTP GET requests to retrieve monitoring data for a specific cloud provider. The `MonitoringProperties` class is already provided and contains the base URL for the monitoring service and the path template for provider metrics.\n\nThe `MonitoringService` class should have the following functionalities:\n\n1. A method `getProviderMetrics(String cloudProviderName)` that takes a cloud provider name as an argument and returns the monitoring data as a `String`. The method should replace `{cloudProviderName}` in the `providerMetricsPath` with the actual cloud provider name and construct the full URL to make the HTTP GET request.\n\n2. The class should handle any exceptions that may occur during the HTTP request and return an appropriate error message.\n\n3. Include a main method that demonstrates the usage of the `MonitoringService` class by making a request with a sample cloud provider name and printing the result to the console.\n\n**Note**: For the purpose of this exercise, you can simulate the HTTP GET request and response. Assume that the response is a simple string indicating the monitoring data for the given cloud provider.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "Variable credit, type should be Map."}, {"type": "function", "instruction": "Your code should include a function named set_msg."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt', 'java.math']."}, {"type": "combination", "instruction": "The function set_msg should take ['transaction', 'message'] as parameters."}, {"type": "combination", "instruction": "The function set_msg should return a double as its result."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6, 15], "11": [0, 1, 2, 3, 10, 15], "13": [0, 1, 2, 3, 9, 15], "14": [0, 1, 2, 3, 9, 15]}, "question_id": 211}
{"question": "\n\nDesign a function `findLonelyNumbers` that identifies the \"lonely\" numbers in an array of integers. A \"lonely\" number is defined as an integer that does not have any adjacent numbers (i.e., the number immediately before or after it) present in the array. For example, if the array is `[1, 3, 5, 3]`, the lonely numbers are `1` and `5` because `2` and `4` are not in the array, and `3` is not lonely because it appears more than once.\n\nImplement the `Solution` class with the following method:\n\n- `findLonelyNumbers(vector<int>& nums)`: Takes a vector of integers and returns a vector of all the lonely numbers in the order they appear in the input vector.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the this keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named delete_inventory."}, {"type": "class", "instruction": "Your code should define a class named Shipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['stdlib']."}, {"type": "file", "instruction": "Your code should use the function analyze_room from the library cmath."}, {"type": "combination", "instruction": "You should define an interface named delete_inventory that includes these methods ['filter_punish']."}, {"type": "combination", "instruction": "In your code, the class Shipment should have these methods ['filter_punish']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "11": [0, 1, 2, 10], "12": [0, 1, 2, 8], "13": [0, 1, 2, 9]}, "question_id": 212}
{"question": "\n\nDesign a system that allows the creation of device settings for a vehicle monitoring application. Each device setting is identified by a unique template name and contains various configuration parameters related to the vehicle's battery and sleep timer settings.\n\nThe system should expose a function to create a new device setting. If a device setting with the given template name already exists, the system should prevent the creation of a new setting with the same name and return an appropriate error.\n\nThe device setting parameters include:\n- ID: A unique identifier for the device setting.\n- TemplateName: A unique name for the device setting template.\n- BatteryCriticalLevelVoltage: The voltage level at which the battery is considered critically low.\n- SafetyCutOutVoltage: The voltage level at which the system will cut out for safety reasons.\n- SleepTimerEventDrivenInterval: The interval at which the device checks for events while in sleep mode.\n- SleepTimerEventDrivenPeriod: The period for which the device remains in event-driven sleep mode.\n- SleepTimerInactivityAfterSleepInterval: The interval after which the device enters sleep mode due to inactivity.\n- SleepTimerInactivityFallbackInterval: The interval for the fallback mechanism when the device is inactive.\n- WakeTriggerVoltageLevel: The voltage level that triggers the device to wake up from sleep mode.\n\nImplement the `CreateDeviceSettings` function that takes a `CreateDeviceSettingsCommandRequest` and returns a `CreateDeviceSettingsCommandResponse` with the name of the created template, or an error if the operation fails.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "Variable info, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named sort_shipment."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named update_room."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named DisplayTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_order."}, {"type": "combination", "instruction": "The function sort_shipment should take ['account', 'profile', 'view'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_order, which should contain these classes ['CalculateNotificationCredit', 'HandleDataItem']."}, {"type": "global", "instruction": "Your answer in total should not exceed 13 lines."}], "instruction_dependence": {"6": [0, 1, 4, 15], "8": [0, 1, 7, 15], "10": [0, 1, 9, 15], "13": [0, 1, 7, 15], "14": [0, 1, 11, 12, 15]}, "question_id": 213}
{"question": "\n\nDesign a Python function `schedule_emr_spark_step` that schedules an Apache Spark job step on an AWS Elastic MapReduce (EMR) cluster. The function should take various parameters to configure the Spark job, including the path to the Spark application code, the S3 bucket for input and output data, and additional Spark configurations. The function should also upload the Spark application code to the specified S3 bucket before adding the step to the EMR cluster.\n\nThe function should adhere to the following requirements:\n\n1. The function should accept parameters for the Spark application code file path, the S3 bucket name, the EMR cluster ID, and a dictionary of additional Spark configurations.\n2. The function should use the `load_file_to_s3` function provided in the given code snippet to upload the Spark application code to the specified S3 bucket.\n3. The function should use the `add_step_to_emr` function provided in the given code snippet to add the Spark job step to the EMR cluster.\n4. The function should return the response from the EMR `add_job_flow_steps` API call, which includes the step ID of the newly added step.\n5. Include error handling to manage potential issues during the file upload or step addition process.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the for keyword."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "variable", "instruction": "Variable bill, should not be a global variable."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'scikit-learn']."}, {"type": "file", "instruction": "Your code should use the function remove_event from the library pytorch."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"8": [0, 1, 6, 11], "10": [0, 1, 9, 11]}, "question_id": 214}
{"question": "\n\nDesign a Java program that controls a robot's intake mechanism for a competition, such as FIRST Robotics Competition (FRC). The intake mechanism is responsible for collecting game pieces from the field. The program should include a command to set the power of the intake motor to a specific percentage, allowing the robot to control the speed at which it collects game pieces.\n\nThe `IntakeSubsystem` class should have a method `setIntakePercentPower(double percentPower)` that sets the power of the intake motor. The `SetIntakeCommand` class should extend `CommandBase` and use the `IntakeSubsystem` to set the power of the intake motor when the command is initialized. The command should complete immediately after setting the power.\n\nWrite the `IntakeSubsystem` class with the necessary method and the `SetIntakeCommand` class as described. Also, provide a simple test case to demonstrate the functionality of the `SetIntakeCommand`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Your code should define an enumeration named Department"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable view, should not be a global variable."}, {"type": "variable", "instruction": "Variable view, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named SetLogCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named display_cut."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_cut, which should contain these classes ['TysBill', 'ViewRecord', 'Item']."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 1, 5, 13], "8": [0, 1, 5, 13], "9": [0, 1, 5, 13], "12": [0, 1, 10, 11, 13]}, "question_id": 215}
{"question": "\n\nWrite a Python program that simulates a simplified version of a study group management system, specifically focusing on the creation of study groups, user applications, and the generation of study group reports. The system should be able to handle the following functionalities:\n\n1. Create a new study group with a course, facilitator, and a unique identifier.\n2. Allow users to apply to join a study group.\n3. Accept user applications to a study group.\n4. Generate a report for a study group that includes:\n   - The total number of registered users.\n   - The number of users who have completed a survey (both learners and facilitators).\n   - A placeholder for a chart image representing goals met (this can be a simple string for the purpose of this exercise).\n\nFor simplicity, you can assume that all data is stored in memory (no need for a database) and that the report generation does not need to perform any complex calculations or data analysis.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure tuple."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named display_view."}, {"type": "class", "instruction": "Your code should define a class named SortOrder."}, {"type": "combination", "instruction": "In your code, the class SortOrder should have these methods ['check_report']."}, {"type": "combination", "instruction": "The function display_view should return a set as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"10": [0, 1, 2, 3, 9, 12], "11": [0, 1, 2, 3, 8, 12]}, "question_id": 216}
{"question": "\n\nDesign a Python class named `EmotionPerceptron` that simulates a simple artificial neuron for emotion recognition. The perceptron should be able to process input signals, apply an activation function, and adjust its weights based on the error in prediction. The perceptron will be used in a larger neural network for classifying emotions from image data, where each image is represented as a flattened array of pixel intensity values.\n\nThe `EmotionPerceptron` class should have the following features:\n\n1. An `__init__` method that initializes the perceptron with a list of weights and a string representing the emotion it is associated with.\n2. An `activation_function` method that takes a list of inputs (pixel values) and computes the perceptron's output using the sigmoid activation function. The pixel values are assumed to be integers in the range [0, 255], and they should be normalized by dividing by 32 before applying the weights.\n3. An `update_weights` method that adjusts the perceptron's weights based on an array of weight updates (delta values).\n4. Getter methods for the weights, output, and emotion associated with the perceptron.\n\nThe class should be well-documented with docstrings explaining the purpose and usage of each method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named create_room."}, {"type": "class", "instruction": "Your code should define a class named ViewMsg."}, {"type": "combination", "instruction": "Your code should define a class named ViewMsg that implements the create_room interface."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6], "10": [0, 1, 2, 3, 4, 8, 9]}, "question_id": 217}
{"question": "\n\nDesign and implement a simple in-memory key-value store API service using Go and the Echo framework. The service should provide the following functionalities:\n\n1. Set a key-value pair.\n2. Get the value associated with a key.\n3. Get all key-value pairs.\n4. Delete a key-value pair.\n\nThe key-value pairs should be stored in memory and not persisted to disk. The service should be able to handle concurrent requests safely.\n\nThe API endpoints should be as follows:\n\n- `POST /api/v1/map` - Sets a key-value pair. The request body should contain a JSON object with `key` and `value` fields.\n- `GET /api/v1/map/:key` - Retrieves the value for the given key. If the key does not exist, it should return a 404 status code.\n- `GET /api/v1/map/all` - Retrieves all key-value pairs in the store.\n- `DELETE /api/v1/map/:key` - Deletes the key-value pair associated with the given key.\n\nInclude appropriate middleware for logging, error recovery, and CORS configuration. Ensure that the server is configured to handle trailing slashes and compress responses when appropriate.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the struct keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be user."}, {"type": "function", "instruction": "Your code should include a function named insert_notification."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "class", "instruction": "Your code should define a class named DataItem."}, {"type": "file", "instruction": "Your code should be organized in a package named add_punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv', 'strings']."}, {"type": "file", "instruction": "Your code should use the function insert_notification from the library strconv."}, {"type": "combination", "instruction": "In your code, the class DataItem should have these properties ['credit', 'notification']."}, {"type": "combination", "instruction": "The function insert_notification should return a struct as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "12": [0, 1, 2, 11], "13": [0, 1, 2, 9], "14": [0, 1, 2, 7]}, "question_id": 218}
{"question": "\n\nDesign a utility class `PropertyExtractor` that provides methods to extract properties from Java Beans using reflection. The class should offer the following functionalities:\n\n1. `getPropertyValue`: Given an object and a property name, it should return the value of the property. If the property does not exist or cannot be accessed, it should throw a custom exception `PropertyAccessException`.\n\n2. `getFirstAvailablePropertyValue`: Given an object and a variable number of property names, it should return the value of the first property that exists and can be accessed. If none of the properties can be accessed, it should return `null`.\n\n3. `convertToMap`: Given a variable number of objects, it should return a `Map<String, Object>` containing the properties of all objects as key-value pairs. The `class` property should be excluded from the map. If an object's properties cannot be accessed, they should be skipped.\n\nThe class should handle any exceptions internally and provide meaningful error messages to the user.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not use the synchronized keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Queue."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable status, type should be Map."}, {"type": "variable", "instruction": "Variable status, the initial value should be dwa."}, {"type": "function", "instruction": "Your code should include a function named search_room."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['insert_info', 'add_dwa', 'execute_info']."}, {"type": "class", "instruction": "Your code should define a class named FormNotification."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_account."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt']."}, {"type": "file", "instruction": "Your code should use the function search_room from the library java.time."}, {"type": "combination", "instruction": "You should initialize an object named transaction as an instance of the FormNotification class using ['transaction'] for initialization."}, {"type": "combination", "instruction": "The function search_room should take ['product', 'request'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_account, which should contain these classes ['SortRequestItem', 'PunishCut', 'AnalyzeUser']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "9": [0, 1, 2, 6], "11": [0, 1, 2, 10], "16": [0, 1, 2, 15], "17": [0, 1, 2, 13], "18": [0, 1, 2, 10], "19": [0, 1, 2, 13, 14]}, "question_id": 219}
{"question": "\nDesign a Java class named `SecurityManager` that manages different security settings for a cloud-based application. The `SecurityManager` should support the following functionalities:\n\n1. Retrieve Amazon Web Services (AWS) security settings.\n2. Retrieve Credential Store security settings.\n3. Retrieve Grid MyProxy Repository security settings.\n4. Retrieve SSH Authentication security settings.\n\nEach of these functionalities should be represented by a method that returns a string containing the respective settings. For AWS and Credential Store, the settings can be fetched directly. However, for Grid MyProxy Repository and SSH Authentication, the application currently does not support customization, and an `UnsupportedOperationException` should be thrown with a message indicating that the feature is not supported.\n\nImplement the `SecurityManager` class with the above functionalities and provide test cases to verify the correctness of the implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the double keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Queue."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named remove_room."}, {"type": "class", "instruction": "Your code should define a class named BillStatus."}, {"type": "file", "instruction": "Your code should be organized in a package named create_report."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.time']."}, {"type": "file", "instruction": "Your code should use the function modify_bill from the library java.io."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_report, which should contain these classes ['UpdateForm', 'FormDwa', 'CreatePunishInfo']."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_report, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 17], "9": [0, 1, 2, 3, 7, 17], "14": [0, 1, 2, 3, 13, 17], "15": [0, 1, 2, 3, 11, 12, 17], "16": [0, 1, 2, 3, 12, 17]}, "question_id": 220}
{"question": "\n\nImplement a Java class `SecretManager` that uses Aspect-Oriented Programming (AOP) to intercept repository operations for entities containing sensitive information. The class should use AOP to encrypt sensitive fields before saving entities to the database and decrypt them after retrieving from the database. Assume that the entities have a method `encryptSensitiveFields()` for encryption and `decryptSensitiveFields()` for decryption.\n\nThe `SecretManager` should define pointcuts for the following repository operations:\n- `save` (for single entity)\n- `saveAll` (for a collection of entities)\n- `findById` (for retrieving a single entity by its ID)\n\nFor each of these operations, the `SecretManager` should define advice that:\n- Encrypts sensitive fields before saving entities.\n- Decrypts sensitive fields after retrieving entities.\n\nProvide a simple `SecretService` interface with `encrypt` and `decrypt` methods, and a dummy implementation that can be used for the aspect's encryption and decryption logic.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the enum keyword."}, {"type": "structural control", "instruction": "Your code should use data structure LinkedList."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named get_order."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_notification', 'insert_status']."}, {"type": "interface", "instruction": "Your code should define an interface named insert_account."}, {"type": "combination", "instruction": "You should define an interface named insert_account that includes these methods ['add_data', 'insert_record']."}, {"type": "combination", "instruction": "The function get_order should take ['status'] as parameters."}, {"type": "combination", "instruction": "The function get_order should return a ArrayList as its result."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 9], "11": [0, 1, 2, 3, 7], "12": [0, 1, 2, 3, 7]}, "question_id": 221}
{"question": "\nDesign a Java Spring MVC application that manages a hierarchical dictionary of terms. Each term in the dictionary has a unique code, a name, and may have a parent term, forming a tree-like structure. The application should provide the following functionalities:\n\n1. List all terms in the dictionary.\n2. Retrieve a tree structure of terms starting from a given term code.\n3. Add a new term to the dictionary, ensuring that the term code is unique and that the parent term exists.\n4. Edit an existing term's details.\n5. Delete a term from the dictionary, ensuring that it does not have any child terms.\n6. Check if a term has the same code as any other term in the dictionary.\n7. Check if a term has any child terms.\n8. Retrieve a term by its code.\n9. Retrieve all child terms for a given term code.\n10. Retrieve all child terms for a given area code, assuming the dictionary also categorizes geographical areas.\n\nThe application should use Spring MVC with `@Controller` annotations and handle requests with `@RequestMapping`. Data should be passed using `PageData` objects, and the application should communicate with a backend server for data persistence.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not use the volatile keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, should be a global variable."}, {"type": "variable", "instruction": "Variable request should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_event."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named MsgStatus."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named process_item."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_item, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 21 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 16, 17], "9": [0, 1, 2, 3, 7, 16, 17], "11": [0, 1, 2, 3, 10, 16, 17], "13": [0, 1, 2, 3, 12, 16, 17], "15": [0, 1, 2, 3, 14, 16, 17]}, "question_id": 222}
{"question": "\n\nDesign a Python script that parses command-line arguments for configuring a machine learning training pipeline. The script should be able to handle various training parameters, model configurations, logging options, data processing settings, and runtime types. The script should also provide a function to print the parsed arguments in a human-readable format.\n\nThe script should follow these specifications:\n\n1. Use the `argparse` library to parse command-line arguments.\n2. Define argument groups for different aspects of the training pipeline: model configuration, training options, logging, data processing, and runtime type.\n3. Each argument group should contain relevant arguments with default values and help descriptions.\n4. Include a function `print_arguments` that prints out all the arguments and their current settings.\n5. Provide test cases that demonstrate the parsing of different combinations of arguments.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the else keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, type should be set."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "file", "instruction": "Your code should use the function generate_profile from the library pytorch."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6]}, "question_id": 223}
{"question": "\n\nDesign a Java interface `UserManagementService` that provides an abstraction for managing user data in a system. The interface should define methods for the following operations:\n\n1. Retrieve a single user's details by their unique identifier.\n2. Retrieve a list of users that match certain search criteria.\n3. Paginate through all users in the system.\n4. Paginate through users that match certain search criteria.\n5. Add a new user to the system.\n6. Update an existing user's details.\n7. Delete one or more users from the system by their identifiers.\n\nEach method should be well-documented, explaining its purpose, the parameters it accepts, and the expected return type. Assume that there is a `User` class that represents the user's details and a `Page` class that encapsulates pagination details.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, type should be ArrayList."}, {"type": "interface", "instruction": "Your code should define an interface named sort_room."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 7]}, "question_id": 224}
{"question": "\n\nWrite a Python program to generate and display a multiplication table for a given number up to a specified range. The program should be able to handle invalid input gracefully and prompt the user to enter a valid number and range if necessary.\n\nThe program should include a function `generate_multiplication_table` that takes two arguments: `number` (the base number for the multiplication table) and `max_range` (the maximum value up to which the multiplication table should be generated). The function should print the multiplication table in a formatted manner.\n\nAdditionally, the program should include a `main` function that prompts the user for the `number` and `max_range`, validates the input, and calls the `generate_multiplication_table` function with the validated input.\n\nHere are the requirements for the program:\n\n1. The `generate_multiplication_table` function should use a loop to generate the multiplication table.\n2. The program should validate that the inputs are positive integers. If not, it should prompt the user to enter valid inputs.\n3. The multiplication table should be displayed in a formatted manner, with each line showing the format: \"X * Y = Z\".\n4. The program should pause after displaying the table, allowing the user to view the results before exiting.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the in keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable log, the initial value should be log."}, {"type": "variable", "instruction": "Variable log should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_log."}, {"type": "function", "instruction": "Your code should not use any functions from the ['add_shipment', 'create_account', 'add_status']."}, {"type": "class", "instruction": "Your code should define a class named TysDwa."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_status."}, {"type": "file", "instruction": "Your code should import the following libraries ['Flask', 'pytorch']."}, {"type": "combination", "instruction": "In your code, the class TysDwa should have these methods ['insert_bill']."}, {"type": "combination", "instruction": "The function execute_log should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_status, which should contain these classes ['DeleteRequest']."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "8": [0, 1, 5], "14": [0, 1, 11], "15": [0, 1, 9], "16": [0, 1, 11, 12]}, "question_id": 225}
{"question": "\nWrite a program that computes the number of ways to tile a 2xN rectangle using 2x1 dominoes. A 2x1 domino can cover exactly two adjacent cells in the rectangle. The input will be a single integer `N` (1 ≤ N ≤ 40), representing the length of the rectangle, and the output should be the number of different ways to tile the rectangle.\n\nFor example, a 2x3 rectangle can be tiled in 3 different ways:\n\n1. Placing three horizontal dominoes.\n2. Placing one horizontal domino at the top and two vertical dominoes below.\n3. Placing two vertical dominoes at the top and one horizontal domino below.\n\nYour program should use dynamic programming to efficiently compute the number of tiling ways for larger values of `N`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not use the typename keyword."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named Dwa."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 7], "6": [0, 1, 2, 5, 7]}, "question_id": 226}
{"question": "\n\nDesign and implement a class `MovieReview` that encapsulates information about a movie review. The class should meet the following requirements:\n\n1. The `MovieReview` class should have the following private fields:\n    - `reviewId`: A `String` representing the unique identifier for the review.\n    - `authorName`: A `String` representing the name of the author of the review.\n    - `reviewContent`: A `String` representing the content of the review.\n    - `associatedMovieId`: A `Long` representing the unique identifier of the movie to which the review is associated.\n\n2. The `MovieReview` class should implement the `Parcelable` interface to allow instances to be passed between Android components.\n\n3. Provide appropriate getter and setter methods for each field.\n\n4. Implement the `Parcelable` interface methods and a `CREATOR` field as shown in the given code snippet.\n\n5. Write a constructor that takes a `Parcel` object and reads the values of the fields from it.\n\n6. Write a constructor that takes all the fields as parameters and initializes the `MovieReview` object.\n\n7. Ensure that the `associatedMovieId` field is marked as `transient` so that it is not serialized when parceling.\n\n8. Write a `toString` method that returns a `String` representation of the `MovieReview` object, including all fields.\n\n9. Provide a test case that creates a `MovieReview` object, parcels it, and then unparcels it to verify that the data remains intact.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, should be a global variable."}, {"type": "variable", "instruction": "Variable credit, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['remove_credit', 'search_token']."}, {"type": "class", "instruction": "Your code should define a class named CalculatePunish."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_notification."}, {"type": "combination", "instruction": "You should initialize an object named request as an instance of the CalculatePunish class using ['transaction'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CalculatePunish should have these properties ['view', 'kms', 'report']."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_notification, which should contain these functions ."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "8": [0, 1, 6], "9": [0, 1, 6], "10": [0, 1, 7]}, "question_id": 227}
{"question": "Implement a thread-safe singleton exchange class `ThreadSafeExchange`, supporting the following interfaces:\n1. `void put(_Tp&& value)`: Move the element to the interior.\n2. `void put(const _Tp& value)`: Copy the element to the interior.\n3. `void get(_Tp& value)`: If there are elements inside, get the stored element into value, otherwise block.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not use the else keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, should not be a global variable."}, {"type": "variable", "instruction": "Variable data should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['manage_profile', 'execute_credit']."}, {"type": "class", "instruction": "Your code should define a class named InsertEventDwa."}, {"type": "file", "instruction": "Your code should be organized in a package named set_product."}, {"type": "file", "instruction": "Your code should not use the following libraries ['cmath', 'algorithm', 'stack']."}, {"type": "combination", "instruction": "You should initialize an object named event as an instance of the InsertEventDwa class using ['product', 'shipment'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_product, which should contain these classes ['FilterPunishRecord', 'Token', 'TysNotification']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "9": [0, 1, 2, 3, 7], "14": [0, 1, 2, 3, 11], "15": [0, 1, 2, 3, 11, 12]}, "question_id": 228}
{"question": "\nDesign a simple database management system for an image storage application using SQLite and Qt. The application should be able to connect to a SQLite database, create a table for storing image metadata and the images themselves, open an existing database, restore a database if it doesn't exist, and close the database connection. The table should have columns for an ID, folder path, image name, and the image data as a BLOB.\n\nImplement a C++ class named `ImageDBManager` that encapsulates the database operations. The class should provide methods to:\n- Connect to the database (`connectToDatabase`)\n- Open the database (`openDatabase`)\n- Restore the database if it doesn't exist by creating the necessary table (`restoreDatabase`)\n- Close the database connection (`closeDatabase`)\n- Create the table for storing images (`createTable`)\n\nEnsure that the class handles any errors that may occur during database operations and provides appropriate debug messages.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not use the typename keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "function", "instruction": "Your code should not use any functions from the ['sort_status', 'insert_form']."}, {"type": "interface", "instruction": "Your code should define an interface named generate_transaction."}, {"type": "class", "instruction": "Your code should define a class named CutOrder."}, {"type": "file", "instruction": "Your code should be organized in a package named search_log."}, {"type": "combination", "instruction": "In your code, the class CutOrder should have these methods ['get_log']."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_log, which should contain these classes ['CheckBill', 'CalculateDataItem', 'CreateReportView']."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}], "instruction_dependence": {"9": [0, 1, 2, 7, 11], "10": [0, 1, 2, 7, 8, 11]}, "question_id": 229}
{"question": "\n\nWrite a program that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n\nYour task is to implement the `PalindromeChecker` class with a static method `isPalindrome` that takes a `String` as input and returns `true` if the string is a palindrome and `false` otherwise.\n\nThe input string may contain spaces, punctuation, and may use different cases for letters. Your method should process the string to ignore these characters and case differences when determining if it is a palindrome.\n\n### Guidelines:\n- You must import all necessary packages at the beginning of your code snippet.\n- Provide a main method that reads a string from the user, uses the `isPalindrome` method to check if it's a palindrome, and prints \"Yes\" if it is a palindrome or \"No\" otherwise.\n- Include at least 3 test cases in the main method to verify the correctness of your solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, type should be int."}, {"type": "variable", "instruction": "Variable event, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named TransformForm."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_report."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang', 'java.util']."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_report, which should contain these classes ['Profile', 'InsertRoom']."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "9": [0, 1, 6, 7]}, "question_id": 230}
{"question": "\n\nDesign a simple Android application for creating and managing a list of people. The application should allow users to input personal information about a person, including their last name, first name, gender, and height. The application should have the following features:\n\n1. A user interface to input a person's last name, first name, gender (as a single character 'M' or 'F'), and height (in centimeters).\n2. A 'Save' button that is only enabled when all input fields are filled out.\n3. A 'Clear' button that clears all input fields and disables the 'Save' button until all fields are filled out again.\n4. A 'Show Log' button that navigates to a new screen displaying a log of all saved people.\n5. A 'Go Back' button that returns to the previous screen.\n6. Input validation for gender to ensure only 'M' or 'F' can be entered, and for height to ensure only numeric values are entered.\n7. A mechanism to store the created person objects and a way to pass the list of people to the log screen.\n\nThe application should use the MVC (Model-View-Controller) design pattern, where the `CreatePersonController` is responsible for creating person objects and the `PersonInputActivity` acts as the view and controller.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the enum keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable data, the initial value should be bill."}, {"type": "class", "instruction": "Your code should define a class named Cut."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "combination", "instruction": "You should initialize an object named item as an instance of the Cut class using ['kms', 'customer', 'item'] for initialization."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7, 13], "9": [0, 1, 2, 3, 4, 7, 13], "11": [0, 1, 2, 3, 4, 10, 13], "12": [0, 1, 2, 3, 4, 10, 13]}, "question_id": 231}
{"question": "Please write a Java method to update the price information for a product in an online store. The method should accept two parameters: one is the product ID (of type String), and the other is the new price (of type float). Assume we already have a class named `ProductService`, which has a method called `updateProductPrice` that can be used to update the product price. Additionally, make sure to verify that the new price is not negative before updating it. If the price is negative, the method should throw an `IllegalArgumentException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nclass ProductService {\n    private Map<String, Double> productPrices = new HashMap<>();\n    public ProductService() {\n    }\n    public void updateProductPrice(String productId, double newPrice) {\n    }\n    public double getProductPrice(String productId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, type should be Set."}, {"type": "variable", "instruction": "Variable profile, should be a global variable."}, {"type": "variable", "instruction": "Variable profile, the initial value should be form."}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_data', 'check_room', 'create_request', 'modify_room']."}, {"type": "interface", "instruction": "Your code should define an interface named submit_bill."}, {"type": "class", "instruction": "Your code should define a class named Inventory."}, {"type": "combination", "instruction": "You should initialize an object named view as an instance of the Inventory class using ['credit', 'room'] for initialization."}, {"type": "combination", "instruction": "In your code, the class Inventory should have these methods ['retrieve_view', 'check_notification', 'add_customer']."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 13], "6": [0, 1, 2, 4, 13], "7": [0, 1, 2, 4, 13], "11": [0, 1, 2, 10, 13], "12": [0, 1, 2, 10, 13]}, "question_id": 232}
{"question": "\n\nDesign a system that allows for the dynamic replacement of algorithm implementations at runtime. The system should be able to handle different versions of an algorithm and switch between them seamlessly. The algorithms are represented as objects derived from `QObject`. The system should provide a way to set default implementations and allow for the replacement of these defaults with custom implementations.\n\nThe provided code snippet is part of a system that manages \"tweaklets,\" which are small pieces of code that can be replaced at runtime. Your task is to extend this system by implementing the following features:\n\n1. A method to register a new tweaklet implementation, replacing the default if one is already set.\n2. A method to retrieve the current implementation of a tweaklet.\n3. A method to reset a tweaklet to its default implementation.\n\nThe `TweakKey_base` class represents the key for a tweaklet and is used to identify different tweaklets. The `Tweaklets` class manages the registration and retrieval of tweaklet implementations.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the private keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable msg, type should be float."}, {"type": "variable", "instruction": "Variable msg, should be a global variable."}, {"type": "variable", "instruction": "Variable msg should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_log', 'sort_report', 'configure_info', 'search_info']."}, {"type": "class", "instruction": "Your code should define a class named CheckRequestShipment."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_kms."}, {"type": "file", "instruction": "Your code should import the following libraries ['vector']."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_kms, which should contain these classes ['TransformPunish', 'GetReportCustomer', 'LogCut']."}], "instruction_dependence": {"5": [0, 1, 3], "6": [0, 1, 3], "7": [0, 1, 3], "8": [0, 1, 3], "13": [0, 1, 10, 11]}, "question_id": 233}
{"question": "\n\nWrite a Python function `flatten_and_filter_matrix` that takes a two-dimensional list (matrix) of integers and an optional filter function. The function should flatten the matrix into a one-dimensional list and apply the filter function to each element, only keeping the elements for which the filter function returns `True`. If no filter function is provided, all elements should be kept.\n\nThe function should adhere to the following requirements:\n- The input matrix must be a list of lists, where each sublist represents a row of the matrix.\n- The filter function should take a single integer as an argument and return a boolean value.\n- If no filter function is provided, the default behavior is to include all elements in the flattened list.\n- The function should return the new flattened and filtered list.\n\nFor example:\n```python\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nresult = flatten_and_filter_matrix(matrix, filter_function=lambda x: x % 2 == 0)\nprint(result)  # Output: [2, 4, 6, 8]\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should be a global variable."}, {"type": "variable", "instruction": "Variable item, the initial value should be status."}, {"type": "interface", "instruction": "Your code should define an interface named set_report."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Status."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_credit."}, {"type": "combination", "instruction": "You should initialize an object named customer as an instance of the Status class using ['user', 'item'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named set_report that includes these methods ['handle_status', 'display_status', 'check_account']."}, {"type": "combination", "instruction": "Your code should define a class named Status that implements the set_report interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_credit, which should contain these classes ['NotificationRecord']."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_credit, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 10], "14": [0, 1, 2, 3, 8], "15": [0, 1, 2, 3, 8, 10], "16": [0, 1, 2, 3, 10, 12], "17": [0, 1, 2, 3, 12]}, "question_id": 234}
{"question": "\n\nCreate a Python module that provides functionality to log the execution time of code blocks and functions. The module should include a context manager and a decorator that can be used to measure and log the time taken by a particular section of code or a function call. The logging should include a custom message and should be able to use different log levels.\n\nThe module should meet the following requirements:\n\n1. The context manager should be named `ExecutionTimer` and should take parameters for a custom message (`title`), an optional logger object (`logger`), and an optional log level (`log_level`).\n2. The decorator should be named `log_execution_time` and should also take parameters for an optional logger object (`logger`) and an optional log level (`log_level`).\n3. Both the context manager and the decorator should log the start and end times of the execution, as well as the total time taken.\n4. The module should use a default logger if none is provided.\n5. The log level should default to \"DEBUG\" but can be set to other levels like \"INFO\", \"WARNING\", etc.\n6. Include test cases to verify the correctness of the context manager and decorator.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "interface", "instruction": "Your code should define an interface named submit_kms."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named StatusCredit."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_room."}, {"type": "combination", "instruction": "You should define an interface named submit_kms that includes these methods ['delete_data', 'handle_form', 'configure_form']."}, {"type": "combination", "instruction": "In your code, the class StatusCredit should have these properties ['room', 'cut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_room, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 2, 3], "7": [0, 1, 2, 3], "8": [0, 1, 2, 5], "9": [0, 1, 2, 6]}, "question_id": 235}
{"question": "\n\nA research team is conducting a study on Alzheimer's Disease (AD) and has collected data from various participants. The participants are categorized into three groups: Asymptomatic AD, Control, and Symptomatic AD. Each participant has a unique identifier that starts with 'UWA' followed by a series of numbers (e.g., 'UWA626'). The team has stored the data in a CSV file where each row represents a participant's data, and one of the columns is 'PSM_ID' containing these unique identifiers.\n\nThe task is to write a Python script that reads the input CSV file, determines the study group for each participant based on their 'PSM_ID', and writes the results to a new CSV file. The new CSV file should have an additional column 'study_group' that specifies the group of the participant, while preserving the rest of the data from the input file.\n\nThe script should be executable from the command line, taking two arguments: the path to the input CSV file and the path to the output CSV file.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable view, should not be a global variable."}, {"type": "variable", "instruction": "Variable view should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named submit_log."}, {"type": "interface", "instruction": "Your code should define an interface named create_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'tensorflow']."}, {"type": "combination", "instruction": "You should define an interface named create_punish that includes these methods ['generate_info', 'process_data']."}, {"type": "combination", "instruction": "The function submit_log should take ['cut', 'profile', 'notification'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"4": [0, 1, 3, 13], "5": [0, 1, 3, 13], "6": [0, 1, 3, 13], "9": [0, 1, 8, 13], "11": [0, 1, 8, 13], "12": [0, 1, 7, 13]}, "question_id": 236}
{"question": "\nDesign a class `JsonResponseParser` that can parse a JSON response from an API call and extract relevant information. The class should be able to handle errors and provide a method to convert the parsed data back into a JSON string. The response JSON will have the following structure:\n\n```json\n{\n  \"Response\": {\n    \"RequestId\": \"some-request-id\",\n    \"ExecutionResourceName\": \"some-resource-name\",\n    \"StartDate\": \"2021-01-01T00:00:00Z\",\n    \"Error\": {\n      \"Code\": \"SomeErrorCode\",\n      \"Message\": \"Error occurred\"\n    }\n  }\n}\n```\n\nThe class should provide the following functionalities:\n- Parse the JSON response and extract `RequestId`, `ExecutionResourceName`, and `StartDate`.\n- Handle any parsing errors or the absence of expected fields.\n- Provide getters for `RequestId`, `ExecutionResourceName`, and `StartDate`.\n- Indicate whether `ExecutionResourceName` and `StartDate` have been set.\n- Convert the extracted information back into a JSON string.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure queue."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable message, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named update_profile."}, {"type": "combination", "instruction": "The function update_profile should take ['token'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"6": [0, 5, 10], "7": [0, 5, 10], "9": [0, 8, 10]}, "question_id": 237}
{"question": "\nWrite a Java program that uses the `PreparedStatementSetter` class to set values in a `PreparedStatement` for a batch insert operation into a PostgreSQL database. The class should handle various data types including strings, integers, doubles, floats, longs, booleans, dates, and arrays of these types. It should also handle special cases for date strings and null values.\n\nThe `PreparedStatementSetter` class should implement a method `setValues` that takes a `PreparedStatement` and a `List<Object>` representing the data to be inserted. The class should also have a constructor that accepts a `Connection` object and an array of field names that correspond to the columns in the database table.\n\nThe program should demonstrate the use of the `PreparedStatementSetter` class by preparing a `PreparedStatement` for a batch insert operation, setting the values using the class, and executing the batch operation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable dwa, should be a global variable."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be dwa."}, {"type": "function", "instruction": "Your code should include a function named handle_event."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named ManageRoom."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.net', 'java.lang']."}, {"type": "combination", "instruction": "You should initialize an object named msg as an instance of the ManageRoom class using ['tys', 'notification', 'transaction'] for initialization."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "7": [0, 1, 2, 5, 14], "8": [0, 1, 2, 5, 14], "10": [0, 1, 2, 9, 14], "13": [0, 1, 2, 11, 14]}, "question_id": 238}
{"question": "Please design a Java function to validate student registration information. The student information includes name, age, and class. The name cannot be empty, the age should be between 6 and 18 years old, and the class should be an integer between 1 and 12. If any of these conditions are not met, an IllegalArgumentException should be thrown with an appropriate error message.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class StudentRegistrationValidator {\n    public static void validateStudentInput(StudentDto studentDto) {\n    }\n}\nclass StudentDto {\n    private String name;\n    private Integer age;\n    private Integer grade;\n    public StudentDto(String name, Integer age, Integer grade) {\n    }\n    public String getName() {\n        return name;\n    }\n    public Integer getAge() {\n        return age;\n    }\n    public Integer getGrade() {\n        return grade;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the interface keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure HashSet."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, should not be a global variable."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_view."}, {"type": "interface", "instruction": "Your code should define an interface named process_info."}, {"type": "class", "instruction": "Your code should define a class named Record."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt', 'java.sql']."}, {"type": "file", "instruction": "Your code should use the function generate_view from the library java.sql."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.io', 'java.lang']."}, {"type": "combination", "instruction": "You should define an interface named process_info that includes these methods ['filter_user', 'analyze_inventory']."}, {"type": "combination", "instruction": "In your code, the class Record should have these methods ['filter_user', 'analyze_inventory']."}, {"type": "combination", "instruction": "The function generate_view should return a List as its result."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 18], "7": [0, 1, 2, 5, 18], "11": [0, 1, 2, 10, 18], "13": [0, 1, 2, 12, 18], "15": [0, 1, 2, 9, 18], "16": [0, 1, 2, 10, 18], "17": [0, 1, 2, 8, 18]}, "question_id": 239}
{"question": "Please write a Java method that simulates a simplified permission change notification system. When an application's operational permissions change, the corresponding listeners need to be notified. Specifically, you need to implement a class named `PermissionNotifier` that includes a method called `notifyPermissionChange`. This method takes two parameters: an integer `permissionCode` representing the permission code, and a string `appName` representing the application name. If the permission code or application name is invalid, the method should throw an `IllegalArgumentException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class PermissionNotifier {\n    public void notifyPermissionChange(int permissionCode, String appName) throws IllegalArgumentException {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the short keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure Queue."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "Variable room, should not be a global variable."}, {"type": "variable", "instruction": "Variable room, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named DisplayLog."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_dwa."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "combination", "instruction": "In your code, the class DisplayLog should have these methods ['configure_log', 'modify_shipment', 'manage_record']."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_dwa, which should contain these classes ['ManageStatusLog', 'EventTys', 'MessageReport']."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"6": [0, 1, 4, 14], "7": [0, 1, 4, 14], "9": [0, 1, 8, 14], "12": [0, 1, 8, 14], "13": [0, 1, 8, 10, 14]}, "question_id": 240}
{"question": " UEFI Secure Boot Signature List Management\n\nIn UEFI Secure Boot, signature lists are used to store certificates and hashes that are trusted or forbidden. These lists are used by the firmware to verify the authenticity of boot loaders, drivers, and other executables before they are run. The goal of this problem is to implement a set of functions to manage UEFI Secure Boot signature lists, including reading, parsing, adding, and removing signatures.\n\nYour task is to implement the following functions:\n\n1. `ReadSignatureList(data []byte) (*SignatureList, error)`: Parses the provided byte slice containing a UEFI signature list and returns a `SignatureList` structure.\n\n2. `NewSignatureList(signatureType efi.GUID) *SignatureList`: Creates a new `SignatureList` with the specified signature type.\n\n3. `AppendBytes(owner efi.GUID, data []byte)`: Appends a new signature to the `SignatureList` with the given owner GUID and data.\n\n4. `RemoveSignature(sig SignatureData) error`: Removes a signature from the `SignatureList`. If the signature is not found, it returns an error.\n\n5. `ExistsInList(other *SignatureList) bool`: Checks if all signatures in `other` exist in the current `SignatureList`.\n\n6. `Exists(sig *SignatureData) (bool, error)`: Checks if the provided `SignatureData` exists in the `SignatureList`.\n\nThe `SignatureList` structure should have the following fields:\n\n- `SignatureType`: The type of signatures contained in the list (e.g., x509, SHA256, etc.).\n- `Signatures`: A slice of `SignatureData` structures.\n- `ListSize`: The total size of the signature list including all signatures.\n- `Size`: The size of the header of the signature list.\n\nThe `SignatureData` structure should have the following fields:\n\n- `Owner`: A GUID representing the owner of the signature.\n- `Data`: A byte slice containing the signature data.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "variable", "instruction": "Variable cut, type should be map."}, {"type": "function", "instruction": "Your code should include a function named configure_order."}, {"type": "class", "instruction": "Your code should define a class named Room."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['time']."}, {"type": "file", "instruction": "Your code should use the function configure_order from the library math."}, {"type": "combination", "instruction": "In your code, the class Room should have these methods ['remove_token']."}, {"type": "combination", "instruction": "The function configure_order should return a string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_message, which should contain these functions ."}], "instruction_dependence": {"4": [0, 2], "9": [0, 8], "10": [0, 6], "11": [0, 5], "12": [0, 7]}, "question_id": 241}
{"question": "\n\nDesign a Java program that simulates a simple book inventory management system for a mini bookstore using a PostgreSQL database. The system should allow the user to add new books, update book information, delete books, and list all books in the inventory.\n\nThe `Book` class should have the following attributes:\n- `id` (int): A unique identifier for the book.\n- `title` (String): The title of the book.\n- `author` (String): The author of the book.\n- `price` (double): The price of the book.\n\nThe `DatabaseHandler` class should provide the following functionalities:\n- `addBook(Book book)`: Adds a new book to the database.\n- `updateBook(int id, Book book)`: Updates the information of the book with the given `id`.\n- `deleteBook(int id)`: Deletes the book with the given `id` from the database.\n- `listBooks()`: Prints a list of all books in the inventory.\n\nThe program should handle any SQL exceptions that may occur and provide appropriate error messages to the user. Ensure that the database connection is closed properly when the application is terminated.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable notification, type should be char."}, {"type": "variable", "instruction": "Variable notification, the initial value should be record."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_inventory."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.time', 'java.lang']."}, {"type": "combination", "instruction": "In your code, the class Punish should have these properties ['request', 'punish']."}, {"type": "combination", "instruction": "In your code, the class Punish should have these methods ['process_token']."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"5": [0, 1, 2, 3, 12], "6": [0, 1, 2, 3, 12], "10": [0, 1, 2, 8, 12], "11": [0, 1, 2, 8, 12]}, "question_id": 242}
{"question": "\n\nDesign a Go program that manages the synchronization schedule for a data warehouse using the Segment Public API. The program should allow users to enable or disable the advanced sync schedule and update the schedule details for a warehouse.\n\nThe `AdvancedWarehouseSyncScheduleV1Output` struct represents the details of the sync schedule and should include the following fields:\n- `CronExpression`: A string representing the cron expression that defines the sync schedule.\n- `TimeZone`: A string representing the time zone in which the cron expression should be evaluated.\n\nThe program should provide the following functionalities:\n1. Enable the advanced sync schedule for a warehouse with a given cron expression and time zone.\n2. Disable the advanced sync schedule for a warehouse.\n3. Retrieve the current sync schedule status and details for a warehouse.\n4. Update the sync schedule details for a warehouse.\n\nImplement the necessary structs, methods, and functions to achieve the above functionalities. Ensure that the program handles nil values appropriately and provides JSON marshaling and unmarshaling capabilities for the structs.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the range keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure interface."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should be a global variable."}, {"type": "variable", "instruction": "Variable shipment, the initial value should be cut."}, {"type": "function", "instruction": "Your code should include a function named configure_status."}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_status', 'generate_notification', 'filter_dwa']."}, {"type": "class", "instruction": "Your code should define a class named Inventory."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_cut."}, {"type": "combination", "instruction": "The function configure_status should return a struct as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_cut, which should contain these classes ['FilterDataView']."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "12": [0, 1, 8], "13": [0, 1, 10, 11]}, "question_id": 243}
{"question": "\n\nDesign a Python class `ListePDF` that represents a list of values in the structure of a PDF document. The list should be written between brackets, with elements separated by spaces. Elements can be of different types, such as integers, floats, strings, or PDF-specific references (e.g., `/Catalog`).\n\nThe class should have the following features:\n- Initialize with an optional first element.\n- Insert new elements into the list.\n- Represent the list as a byte string in the PDF list format.\n\nThe class should use composition by including an instance of `ComposantPDF`, which handles the internal sequence of elements and their separation.\n\nImplement the `ListePDF` class following the provided code snippet and guidelines. Ensure that the class correctly formats the list as a byte string when represented.\n\nAdditionally, write test cases to verify the correctness of the `ListePDF` class.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the with keyword."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "function", "instruction": "Your code should include a function named create_record."}, {"type": "file", "instruction": "Your code should be organized in a package named update_status."}, {"type": "combination", "instruction": "The function create_record should take ['msg', 'punish', 'shipment'] as parameters."}, {"type": "combination", "instruction": "The function create_record should return a set as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_status, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "8": [0, 1, 2, 5]}, "question_id": 244}
{"question": "Please write a Python function `solve(n): bool` to solve this problem:\nFor a given integer n, the function should return True if n is a power of 2, and return False otherwise.\n>>> solve(1024)\nTrue", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, should be a global variable."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be shipment."}, {"type": "variable", "instruction": "Variable dwa, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_inventory."}, {"type": "class", "instruction": "Your code should define a class named InsertTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_room."}, {"type": "combination", "instruction": "The function filter_inventory should return a tuple as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_room, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3], "10": [0, 1, 7], "11": [0, 1, 9]}, "question_id": 245}
{"question": "\nDesign a Java class `HTTPResponseParser` that encapsulates the logic for parsing HTTP responses. The class should be able to handle different content types and convert them into Java objects using provided conversion strategies. It should also provide methods to access response metadata such as headers and status code.\n\nThe `HTTPResponseParser` class should implement the following functionalities:\n1. Accept an `okhttp3.Response` object and a `Type` that represents the expected Java object type for the response body.\n2. Provide a method `parseResponse()` that attempts to parse the response body into the expected Java object type using the provided conversion strategies.\n3. Allow registration of custom conversion strategies that implement an interface `HttpConversion`.\n4. Provide methods to retrieve the response headers, status code, and a boolean indicating if the response was successful.\n5. In case of errors during parsing, the class should throw a custom exception `HTTPParseException`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the this keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "variable", "instruction": "Variable product, the initial value should be transaction."}, {"type": "variable", "instruction": "Variable product, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_event', 'get_customer', 'sort_cut']."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql', 'java.nio']."}, {"type": "file", "instruction": "Your code should use the function insert_event from the library java.net."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.awt', 'java.math']."}, {"type": "global", "instruction": "Your function should not exceed 25 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 7, 15], "10": [0, 1, 2, 3, 4, 7, 15], "13": [0, 1, 2, 3, 4, 12, 15]}, "question_id": 246}
{"question": "\n\nWrite a Python function `swap_and_search` that performs the following tasks:\n\n1. Takes three arguments:\n    - `n`: an integer representing the number of times to print \"Hello\".\n    - `names_list`: a list of strings representing names.\n    - `people_dict`: a dictionary where keys are names (strings) and values are phone numbers (also strings).\n\n2. The function should first call a helper function `say_hello` that prints \"Hello\" `n` times.\n\n3. Then, the function should check if the string \"sri\" is in `names_list`. If it is, print \"found\"; otherwise, print \"not found\".\n\n4. Next, the function should check if \"sri\" is a key in `people_dict`. If it is, print \"Found : \" followed by the corresponding value.\n\n5. Finally, the function should swap the values of two variables `x` and `y` (initialized to 1 and 5, respectively) and print their values before and after the swap.\n\nThe function should not return anything.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the for keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named submit_account."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeData."}, {"type": "combination", "instruction": "You should define an interface named submit_account that includes these methods ['handle_log', 'execute_shipment']."}, {"type": "combination", "instruction": "Your code should define a class named AnalyzeData that implements the submit_account interface."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 9, 10]}, "question_id": 247}
{"question": "Please write a Java method to get the names of all tools required for a specified task. Let's assume we have two types of tasks: default tasks and custom tasks, each requiring a specific set of tools to complete. The tool requirements for default tasks are defined in the `DefaultTask` class's `DEFAULT_TOOLS` constant, while the tool requirements for custom tasks are defined in the `CustomTask` class's `CUSTOM_TOOLS` constant. The method should accept a task name as an input parameter and return a set containing the names of the task and all its dependent tools. If the given task name is neither a default task nor a custom task, an `IllegalArgumentException` should be thrown.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Set;\nimport java.util.HashSet;\nclass DefaultTask {\n    public static final java.util.Map<String, Set<String>> DEFAULT_TOOLS = new java.util.HashMap<>();\n    static {\n    }\n}\nclass CustomTask {\n    public static final java.util.Map<String, Set<String>> CUSTOM_TOOLS = new java.util.HashMap<>();\n    static {\n    }\n}\npublic class TaskToolFinder {\n    public static Set<String> getRequiredTools(final String taskName) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the static keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Queue."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "function", "instruction": "Your code should include a function named retrieve_data."}, {"type": "class", "instruction": "Your code should define a class named EventTys."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_shipment."}, {"type": "combination", "instruction": "You should initialize an object named order as an instance of the EventTys class using ['profile', 'report', 'order'] for initialization."}, {"type": "combination", "instruction": "The function retrieve_data should take ['product'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_shipment, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"12": [0, 1, 2, 3, 10, 15], "13": [0, 1, 2, 3, 9, 15], "14": [0, 1, 2, 3, 11, 15]}, "question_id": 248}
{"question": "\nWrite a program that swaps the values of two variables without using a third variable. The program should prompt the user to enter two integer values, and then it should swap the values of these integers using arithmetic operations. After the swap, the program should output the new values of the two variables.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named insert_user."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['execute_customer', 'manage_data', 'display_shipment']."}, {"type": "interface", "instruction": "Your code should define an interface named handle_form."}, {"type": "class", "instruction": "Your code should define a class named RetrieveMsg."}, {"type": "combination", "instruction": "Your code should define a class named RetrieveMsg that implements the handle_form interface."}, {"type": "combination", "instruction": "The function insert_user should return a map as its result."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 15], "9": [0, 1, 2, 8, 15], "13": [0, 1, 2, 11, 12, 15], "14": [0, 1, 2, 8, 15]}, "question_id": 249}
{"question": "The dataset is named 'U.S. Census Data.csv'. The first two lines of the dataset are as follows:\n\n| Fact                                               |   Fact Note | Alabama   | Alaska   | Arizona   | Arkansas   | California   | Colorado   | Connecticut   | Delaware   | Florida    | Georgia    | Hawaii    | Idaho     | Illinois   | Indiana   | Iowa      | Kansas    | Kentucky   | Louisiana   | Maine     | Maryland   | Massachusetts   | Michigan   | Minnesota   | Mississippi   | Missouri   | Montana   | Nebraska   | Nevada    | New Hampshire   | New Jersey   |   New Mexico |   New York |   North Carolina |   North Dakota |     Ohio |   Oklahoma |   Oregon |   Pennsylvania |   Rhode Island |   South Carolina |   South Dakota |   Tennessee | Texas      | Utah      | Vermont   | Virginia   | Washington   | West Virginia   | Wisconsin   | Wyoming   |\n|:---------------------------------------------------|------------:|:----------|:---------|:----------|:-----------|:-------------|:-----------|:--------------|:-----------|:-----------|:-----------|:----------|:----------|:-----------|:----------|:----------|:----------|:-----------|:------------|:----------|:-----------|:----------------|:-----------|:------------|:--------------|:-----------|:----------|:-----------|:----------|:----------------|:-------------|-------------:|-----------:|-----------------:|---------------:|---------:|-----------:|---------:|---------------:|---------------:|-----------------:|---------------:|------------:|:-----------|:----------|:----------|:-----------|:-------------|:----------------|:------------|:----------|\n| Population estimates, July 1, 2016,  (V2016)       |         nan | 4,863,300 | 741,894  | 6,931,071 | 2,988,248  | 39,250,017   | 5,540,545  | 3,576,452     | 952,065    | 20,612,439 | 10,310,371 | 1,428,557 | 1,683,140 | 12,801,539 | 6,633,053 | 3,134,693 | 2,907,289 | 4,436,974  | 4,681,666   | 1,331,479 | 6,016,447  | 6,811,779       | 9,928,300  | 5,519,952   | 2,988,726     | 6,093,000  | 1,042,520 | 1,907,116  | 2,940,058 | 1,334,795       | 8,944,469    |      2081015 |   19745289 |         10146788 |         757952 | 11614373 |    3923561 |  4093465 |       12784227 |        1056426 |          4961119 |         865454 |     6651194 | 27,862,596 | 3,051,217 | 624,594   | 8,411,808  | 7,288,000    | 1,831,102       | 5,778,708   | 585,501   |\n| Population estimates base, April 1, 2010,  (V2016) |         nan | 4,780,131 | 710,249  | 6,392,301 | 2,916,025  | 37,254,522   | 5,029,324  | 3,574,114     | 897,936    | 18,804,592 | 9,688,680  | 1,360,301 | 1,567,650 | 12,831,574 | 6,484,136 | 3,046,869 | 2,853,129 | 4,339,344  | 4,533,479   | 1,328,364 | 5,773,786  | 6,547,813       | 9,884,129  | 5,303,924   | 2,968,103     | 5,988,928  | 989,414   | 1,826,334  | 2,700,691 | 1,316,461       | 8,791,953    |      2059198 |   19378110 |          9535688 |         672591 | 11536727 |", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, type should be int."}, {"type": "function", "instruction": "Your code should include a function named set_info."}, {"type": "interface", "instruction": "Your code should define an interface named search_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named FilterShipmentNotification."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch', 'matplotlib']."}, {"type": "file", "instruction": "Your code should use the function set_info from the library pytorch."}, {"type": "combination", "instruction": "In your code, the class FilterShipmentNotification should have these methods ['manage_status', 'retrieve_punish']."}, {"type": "combination", "instruction": "The function set_info should take ['notification', 'msg'] as parameters."}], "instruction_dependence": {"4": [0, 3], "7": [0, 6], "9": [0, 8], "11": [0, 10], "12": [0, 8], "13": [0, 5]}, "question_id": 250}
{"question": "Please write a Python function `max_square(bars): int` to solve this problem:\nA given sequence bars, representing the height of each bar in a bar chart from left to right. All bars are adjacent with a width of 1. Calculate and return the maximum area of the rectangle that can be drawn in this bar chart.\n>>> max_square([2,4])\n4", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the not keyword."}, {"type": "structural control", "instruction": "Your code should use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "interface", "instruction": "Your code should define an interface named submit_info."}, {"type": "class", "instruction": "Your code should define a class named GenerateTys."}, {"type": "combination", "instruction": "In your code, the class GenerateTys should have these properties ['user', 'token']."}], "instruction_dependence": {"7": [0, 1, 2, 6]}, "question_id": 251}
{"question": "\n\nCreate a Python Django REST API endpoint that retrieves the details of a real estate listing by its unique identifier (ID). The endpoint should be a read-only operation, meaning it should only support the HTTP GET method. The API should respond with the serialized data of the listing if found, or an appropriate HTTP 404 Not Found status if the listing does not exist.\n\nThe `Listing` model has the following fields:\n- `id`: An auto-incrementing primary key.\n- `title`: A string representing the title of the listing.\n- `price`: A decimal field representing the price of the listing.\n- `description`: A text field containing a description of the listing.\n- `created_at`: A datetime field representing when the listing was created.\n\nThe `ListingSerializer` is a Django REST Framework serializer that serializes the `Listing` model.\n\nWrite a Django view function named `api_detail_listing` that:\n- Takes a `request` object and a `listing_id` as parameters.\n- Uses the Django shortcut `get_object_or_404` to retrieve the `Listing` instance with the provided `listing_id`.\n- Serializes the `Listing` instance using `ListingSerializer`.\n- Returns a `Response` object with the serialized data if the listing exists.\n- Returns a `Response` object with the HTTP 404 Not Found status if the listing does not exist.\n\nInclude the necessary imports at the beginning of the code snippet and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should use the False keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "Variable message, type should be str."}, {"type": "function", "instruction": "Your code should include a function named execute_credit."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named update_notification."}, {"type": "combination", "instruction": "You should define an interface named update_notification that includes these methods ['filter_status', 'analyze_customer']."}, {"type": "combination", "instruction": "The function execute_credit should take ['cut', 'shipment'] as parameters."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 10], "12": [0, 1, 2, 3, 8]}, "question_id": 252}
{"question": "\n\nDesign a Java program that provides a simple text-based interface to convert numerical representations of months and days to their corresponding string representations. The program should implement two conversion methods: one for converting month numbers to their corresponding month names, and another for converting day numbers to their corresponding day names.\n\nThe program should follow these specifications:\n\n1. Implement an interface `Converter` with two methods: `convertMonth(int monthNumber)` and `convertDay(int dayNumber)`.\n2. Implement a class `ConverterIf` that implements the `Converter` interface using `if-else` statements.\n3. The `convertMonth` method should accept an integer representing the month number (1-12) and return the corresponding month name as a string. If the input is outside the range 1-12, it should return an error message.\n4. The `convertDay` method should accept an integer representing the day number (1-7) and return the corresponding day name as a string. If the input is outside the range 1-7, it should return an error message.\n5. Include a main method to demonstrate the functionality of the `ConverterIf` class with test cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable msg, type should be Map."}, {"type": "variable", "instruction": "Variable msg should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named handle_tys."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang', 'java.net']."}, {"type": "file", "instruction": "Your code should use the function handle_tys from the library java.time."}, {"type": "combination", "instruction": "The function handle_tys should return a String as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6, 15], "9": [0, 1, 2, 3, 6, 15], "11": [0, 1, 2, 3, 10, 15], "13": [0, 1, 2, 3, 12, 15], "14": [0, 1, 2, 3, 10, 15]}, "question_id": 253}
{"question": "\nWrite a program that determines if a given number is a square of a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The input to the program will be a series of test cases, each containing a single integer `n`. For each test case, the program should output \"YES\" if `n` is the square of a prime number, and \"NO\" otherwise.\n\nThe program should use a sieve algorithm to precompute the prime numbers up to a certain limit and then use this information to quickly determine if the square root of `n` is a prime number.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should use the operator keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Variable user, type should be string."}, {"type": "variable", "instruction": "Variable user should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named display_report."}, {"type": "interface", "instruction": "Your code should define an interface named modify_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named update_status."}, {"type": "file", "instruction": "Your code should import the following libraries ['algorithm', 'string']."}, {"type": "file", "instruction": "Your code should use the function display_report from the library vector."}, {"type": "combination", "instruction": "The function display_report should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_status, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6], "8": [0, 1, 2, 3, 4, 6], "11": [0, 1, 2, 3, 4, 10], "14": [0, 1, 2, 3, 4, 13], "15": [0, 1, 2, 3, 4, 9], "16": [0, 1, 2, 3, 4, 12]}, "question_id": 254}
{"question": "min f(x) = x_1^2 + x_2^2 + x_3^2\ns.t.\n5 - 2x_1 - x_2 >= 0\n2 - x_1 - x_3 >= 0\nx_1 - 1 >= 0\nx_2 - 2 >= 0\nx_3 >= 0\n\nDefine a Python function, solve(), to solve this optimization problem and return the maximum value.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, should not be a global variable."}, {"type": "variable", "instruction": "Variable inventory, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named check_report."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['sort_item', 'generate_tys']."}, {"type": "interface", "instruction": "Your code should define an interface named manage_status."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_cut."}, {"type": "combination", "instruction": "You should define an interface named manage_status that includes these methods ['retrieve_user', 'process_item', 'search_event']."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "11": [0, 9]}, "question_id": 255}
{"question": "Please change the following code to cpp implementation with the function signature `std::string make_palindrome(std::string string)`. \nNote:\n1. Only implement the target function and include the necessary headers, do not generate other code.\n\n```python\n\n\ndef is_palindrome(string: str) -> bool:\n    \n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_shipment', 'add_event']."}, {"type": "interface", "instruction": "Your code should define an interface named get_item."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "file", "instruction": "Your code should be organized in a package named update_notification."}, {"type": "combination", "instruction": "You should initialize an object named view as an instance of the Punish class using ['log'] for initialization."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 7]}, "question_id": 256}
{"question": "\nDesign a class `FPSCounter` that calculates the frames per second (FPS) using three different methods: Fixed Time Method, Average Sampling Method, and Precise Sampling Method. The class should allow for the FPS calculation method to be set and should provide a way to update the FPS value based on the current time and the time of the last frame. The class should also provide a method to reset the FPS calculation.\n\nThe Fixed Time Method calculates FPS by counting the number of frames in a fixed time interval. The Average Sampling Method calculates FPS by maintaining an average frame duration over a fixed number of samples. The Precise Sampling Method calculates FPS by maintaining a queue of the last N frame durations and calculating the FPS based on the sum of these durations.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named update_view."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named manage_tys."}, {"type": "class", "instruction": "Your code should define a class named TransactionProduct."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_data."}, {"type": "combination", "instruction": "You should define an interface named manage_tys that includes these methods ['manage_profile', 'modify_inventory', 'get_info']."}, {"type": "combination", "instruction": "The function update_view should return a string as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_data, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 8], "11": [0, 1, 7], "12": [0, 1, 5], "13": [0, 1, 10]}, "question_id": 257}
{"question": "\nCreate a C++/CLI program that registers a new event source for the Windows Event Log system. The program should take command-line arguments to specify the source name, event log name, machine name, and an optional message resource file. If the source already exists, the program should not attempt to register it again and should provide a warning if the existing source is registered to write to a different event log. If the message resource file is specified, it should only be set if the event log is local and the file exists. The program should provide helpful output messages to guide the user through the process and report the status of the event source registration.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable transaction, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named sort_item."}, {"type": "class", "instruction": "Your code should define a class named ProcessShipmentView."}, {"type": "file", "instruction": "Your code should not use the following libraries ['queue', 'string', 'vector']."}, {"type": "combination", "instruction": "You should initialize an object named punish as an instance of the ProcessShipmentView class using ['punish', 'inventory'] for initialization."}, {"type": "combination", "instruction": "In your code, the class ProcessShipmentView should have these methods ['search_request', 'search_tys']."}, {"type": "combination", "instruction": "The function sort_item should take ['cut', 'request', 'log'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 13], "10": [0, 1, 2, 8, 13], "11": [0, 1, 2, 8, 13], "12": [0, 1, 2, 7, 13]}, "question_id": 258}
{"question": "\nDesign a simple TCP client that connects to a server, sends a fixed-size message, and then receives a response from the server. The client should be able to handle both IPv4 and IPv6 connections. The message to be sent should be a buffer filled with a specific character, and the size of the message should be defined by a constant. The client should also be able to receive a response of up to a certain size, defined by another constant, and print the received message to the console. The client should handle any potential errors during the connection, sending, and receiving processes and print appropriate error messages. The client should also print the server's IP address it is connecting to and the total number of bytes sent and received.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "Variable message, type should be double."}, {"type": "function", "instruction": "Your code should include a function named modify_msg."}, {"type": "file", "instruction": "Your code should be organized in a package named update_room."}, {"type": "combination", "instruction": "The function modify_msg should return a bool as its result."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 5]}, "question_id": 259}
{"question": "\n\nIn a 2D grid of size `n x n`, each cell contains a number representing the time at which water will fill that cell. Initially, all cells are dry. As time progresses, water starts to fill the cells at the time specified by the number in each cell. A person is trying to move from the top-left corner (0,0) to the bottom-right corner (n-1,n-1) of the grid. The person can only move to an adjacent cell (up, down, left, or right) if the cell is filled with water. The person cannot wait in a cell; they must keep moving to an adjacent cell with water or stay at the starting cell until it is filled with water.\n\nWrite a program that reads the grid size `n` and the grid itself, then calculates the minimum time required for the person to reach the bottom-right corner. If it is impossible for the person to reach the destination, the program should output `-1`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named retrieve_user."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['display_token', 'add_inventory', 'add_event', 'calculate_account']."}, {"type": "class", "instruction": "Your code should define a class named Info."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_log."}, {"type": "combination", "instruction": "You should initialize an object named form as an instance of the Info class using ['user'] for initialization."}, {"type": "combination", "instruction": "The function retrieve_user should return a map as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"3": [0, 2, 9], "7": [0, 5, 9], "8": [0, 2, 9]}, "question_id": 260}
{"question": "Write a Python function called remove_py_comment. This function should take a piece of Python code as input, remove all comments from it, and return the code without any comments.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not use the with keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, type should be list."}, {"type": "variable", "instruction": "Variable punish, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named manage_report."}, {"type": "file", "instruction": "Your code should be organized in a package named display_kms."}, {"type": "combination", "instruction": "You should define an interface named manage_report that includes these methods ['display_credit', 'display_product']."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_kms, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 12 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 14], "9": [0, 1, 2, 3, 7, 14], "12": [0, 1, 2, 3, 10, 14], "13": [0, 1, 2, 3, 11, 14]}, "question_id": 261}
{"question": "\n\nDesign a Java program that simulates a simple network communication system where multiple `SendChannelEndpoint`s can be managed by a `Sender`. The `Sender` is responsible for opening and closing the `SendChannelEndpoint`s. Each `SendChannelEndpoint` represents a communication channel that can be uniquely identified by an ID.\n\nYour task is to implement the following components:\n\n1. `SendChannelEndpoint` class with:\n   - A constructor that accepts an integer ID.\n   - A method `open()` that prints \"Channel [ID] is open\".\n   - A method `close()` that prints \"Channel [ID] is closed\".\n\n2. `Sender` class with:\n   - A method `onOpenSendChannelEndpoint(SendChannelEndpoint channelEndpoint)` that opens the given channel endpoint.\n   - A method `onCloseSendChannelEndpoint(SendChannelEndpoint channelEndpoint)` that closes the given channel endpoint.\n\n3. `OpenSendChannelEndpointCmd` class that represents a command to open a `SendChannelEndpoint`. It should have:\n   - A constructor that accepts a `SendChannelEndpoint`.\n   - An `execute(Sender sender)` method that triggers the sender to open the channel endpoint.\n\n4. `CloseSendChannelEndpointCmd` class that represents a command to close a `SendChannelEndpoint`. It should have:\n   - A constructor that accepts a `SendChannelEndpoint`.\n   - An `execute(Sender sender)` method that triggers the sender to close the channel endpoint.\n\n5. A `main` method to demonstrate the functionality by:\n   - Creating a `Sender`.\n   - Creating multiple `SendChannelEndpoint`s.\n   - Opening and closing the `SendChannelEndpoint`s using the `OpenSendChannelEndpointCmd` and `CloseSendChannelEndpointCmd` commands.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Size"}, {"type": "function", "instruction": "Your code should include a function named sort_report."}, {"type": "class", "instruction": "Your code should define a class named GenerateProfileNotification."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt', 'java.nio']."}, {"type": "file", "instruction": "Your code should use the function sort_report from the library java.net."}], "instruction_dependence": {"8": [0, 1, 7], "10": [0, 1, 9]}, "question_id": 262}
{"question": "\n\nDesign a simple logging package in Go that provides two functions: `PrintLogConst` and `Fatal`. The `PrintLogConst` function should print a constant string \"Log: Information\" to the standard output. The `Fatal` function should simulate a critical error logging by printing \"Fatal Error: Exiting program\" and then exiting the program with a non-zero exit code.\n\nThe logging package should be named `log` and should be tested using Go's testing framework. Write test cases for both `PrintLogConst` and `Fatal` functions. For the `Fatal` function, since it exits the program, you should demonstrate how to test such a function that is designed to terminate the program execution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Variable log, should not be a global variable."}, {"type": "variable", "instruction": "Variable log should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_cut."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['display_kms', 'process_kms', 'display_punish']."}, {"type": "class", "instruction": "Your code should define a class named Notification."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named add_bill."}, {"type": "file", "instruction": "Your code should not use the following libraries ['io']."}, {"type": "combination", "instruction": "In your code, the class Notification should have these properties ['transaction', 'product', 'record']."}, {"type": "combination", "instruction": "The function filter_cut should return a struct as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_bill, which should contain these classes ['RetrieveRequest']."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"5": [0, 1, 4, 17], "6": [0, 1, 4, 17], "8": [0, 1, 7, 17], "11": [0, 1, 10, 17], "14": [0, 1, 10, 17], "15": [0, 1, 7, 17], "16": [0, 1, 10, 12, 17]}, "question_id": 263}
{"question": "\n\nDesign a Java program that provides functionality to manage a MongoDB collection's indexes. The program should allow users to drop all indexes on a collection, except for the default `_id` index. The program should support both operations with and without a `ClientSession` for transactional operations.\n\nThe program should include the following components:\n\n1. An interface `CrudExecutor` with a method `execute` that takes parameters for a `ClientSession`, a `MongoCollection`, a `Query`, `Option` options, and an `Object` data, and returns a generic type `T`.\n\n2. A class `DropIndexesExecutor` that implements `CrudExecutor`. The `execute` method should drop all indexes on the provided `MongoCollection`. If a `ClientSession` is provided, the operation should be executed within that session.\n\n3. A main class with a method `main` that demonstrates the usage of `DropIndexesExecutor` by dropping indexes on a sample collection.\n\n4. Test cases that verify the correct behavior of the `DropIndexesExecutor`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_event', 'handle_credit', 'check_inventory', 'remove_profile']."}, {"type": "interface", "instruction": "Your code should define an interface named manage_report."}, {"type": "class", "instruction": "Your code should define a class named Credit."}, {"type": "combination", "instruction": "You should define an interface named manage_report that includes these methods ['execute_user', 'handle_notification', 'filter_order']."}, {"type": "combination", "instruction": "In your code, the class Credit should have these properties ['info']."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"6": [0, 1, 4, 8], "7": [0, 1, 5, 8]}, "question_id": 264}
{"question": "\n\nCreate a Python class-based system to generate HTML elements dynamically. The system should allow users to create HTML tags, set their attributes, and nest child elements. The tags should be able to render themselves as HTML strings. The system should also include a factory for creating tags easily and support both singleton tags (like `<br>`, `<img>`, etc.) and container tags (like `<div>`, `<p>`, etc.).\n\nThe system should enforce the following rules:\n- Singleton tags cannot have children. If an attempt is made to add children to a singleton tag, a `TagSingletonError` should be raised.\n- Certain tags require specific attributes to be set (e.g., `<img>` requires `src`, `<link>` requires `href`). If these required attributes are not provided, a `KeyError` should be raised.\n- The class names should be handled with a `class_` keyword due to `class` being a reserved keyword in Python. The classes should be space-separated in the final HTML string.\n- The system should escape any unsafe content unless the `safe` attribute is set to `True` on the tag.\n\nImplement the system following the provided code snippet, ensuring that all classes and methods are well-documented. Include test cases to demonstrate the creation of different HTML elements, setting attributes, nesting children, and handling errors.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named sort_room."}, {"type": "class", "instruction": "Your code should define a class named UpdateTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named search_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "file", "instruction": "Your code should use the function sort_room from the library Flask."}, {"type": "combination", "instruction": "The function sort_room should take ['message'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_product, which should contain these classes ['SearchCustomer', 'TransformProfile']."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 4, 13], "10": [0, 9, 13], "11": [0, 6, 13], "12": [0, 7, 8, 13]}, "question_id": 265}
{"question": "\n\nDesign a C++ program that models a parallel activity system. The system should be able to create and manage a collection of activities that can be executed in parallel. Each activity is represented by a data type and can have multiple fields. The system should also support visiting these activities for processing using the Visitor design pattern.\n\nThe program should include the following components:\n\n1. An abstract `IModelActivity` interface representing a generic activity.\n2. An abstract `IModelActivityScope` interface representing a scope that can contain multiple activities.\n3. A `DataTypeActivityScope` class that implements `IModelActivityScope` and represents a scope of activities.\n4. A `DataTypeActivityParallel` class that extends `DataTypeActivityScope` and represents a parallel activity scope.\n5. An `IContext` interface that provides a method to create a `ModelActivityScope` instance.\n6. An `IVisitor` interface with a method to visit `DataTypeActivityParallel` instances.\n7. A `ModelActivityParallel` class that represents the actual parallel activity model.\n8. A `main` function that demonstrates the creation of a `DataTypeActivityParallel` instance, adding activities to it, and visiting it with a visitor.\n\nThe program should be able to compile and run test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable customer, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named Report."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_kms."}, {"type": "file", "instruction": "Your code should import the following libraries ['cmath']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['iostream', 'string']."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_kms, which should contain these functions ."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 7], "15": [0, 1, 2, 3, 12]}, "question_id": 266}
{"question": "\n\nDesign a Go program that manages pricing plans for a cloud service provider. Each plan has a base price and a set of features, which include storage, stages, backups, and scaling options. The program should be able to:\n\n1. Represent the pricing plans with their respective features and prices.\n2. Convert the unit of the base price of a plan from bytes to gibibytes or vice versa.\n3. Calculate the total cost of a plan based on the included features and any exceedances in usage.\n\nThe program should include the following functionalities:\n\n- A method to convert the base price of a plan from one unit to another (bytes to gibibytes or vice versa).\n- A method to calculate the total cost of a plan, taking into account the included features and any exceedances. The total cost should be represented as a `currency.Amount`.\n- A method to display the details of a plan, including its ID, name, base price, and features.\n\nUse the given code snippet as a starting point to define the necessary structs and methods. Ensure that all possible errors are handled gracefully.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, type should be slice."}, {"type": "function", "instruction": "Your code should include a function named process_form."}, {"type": "class", "instruction": "Your code should define a class named UpdateTokenReport."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['fmt']."}, {"type": "combination", "instruction": "The function process_form should return a slice as its result."}, {"type": "global", "instruction": "Your function should not exceed 11 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 10], "7": [0, 1, 2, 6, 10], "9": [0, 1, 2, 5, 10]}, "question_id": 267}
{"question": "\n\nImplement a Transformer Encoder-Decoder architecture using TensorFlow. The architecture should consist of an Encoder and a Decoder, each with a specified number of layers. Each Encoder layer should include a Multi-Head Attention mechanism and a point-wise feed-forward network, and each Decoder layer should include two Multi-Head Attention mechanisms (one for self-attention and the other for encoder-decoder attention) and a point-wise feed-forward network. All layers should include dropout and layer normalization.\n\nThe implementation should allow for the following:\n- Customizable number of layers for both the Encoder and Decoder.\n- Customizable model size (`d_model`), which is the dimensionality of the input and output of the Encoder and Decoder layers.\n- Customizable number of attention heads (`num_heads`) in the Multi-Head Attention mechanism.\n- Customizable size of the feed-forward network (`dff`).\n- Customizable activation function for the feed-forward network (`hidden_act`), with options for 'gelu' and 'relu'.\n- Customizable dropout rate (`dropout_rate`) and layer normalization epsilon (`layer_norm_eps`).\n\nProvide a class `Transformer` that encapsulates the Encoder and Decoder, and includes a method `call` that takes in input sequences, output sequences, training flag, look-ahead mask, and padding mask, and returns the final output of the Decoder along with attention weights.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named configure_form."}, {"type": "interface", "instruction": "Your code should define an interface named check_punish."}, {"type": "class", "instruction": "Your code should define a class named Room."}, {"type": "combination", "instruction": "Your code should define a class named Room that implements the check_punish interface."}, {"type": "combination", "instruction": "In your code, the class Room should have these methods ['search_form', 'filter_credit', 'set_account']."}, {"type": "combination", "instruction": "The function configure_form should return a bool as its result."}], "instruction_dependence": {"7": [0, 5, 6], "8": [0, 6], "9": [0, 4]}, "question_id": 268}
{"question": "\n\nDesign a Go program that implements a TAP file block writer, which is used to create blocks of data in the TAP file format. A TAP file is a simple format used to store a sequence of data blocks, where each block is preceded by a 2-byte length field and followed by a 1-byte checksum. The length field includes the size of the data block plus one for the checksum byte. The checksum is calculated by XOR-ing all bytes in the data block.\n\nThe program should include the following functionalities:\n\n1. Initialize a new TAP file block writer with an `io.Writer` to write the output to.\n2. Buffer data writes until a block is completed.\n3. Ensure that the block size does not exceed the maximum allowed length for a TAP block.\n4. Complete a block by writing the length, the buffered data, and the checksum to the output writer.\n5. Calculate the checksum using XOR of all bytes in the data block.\n\nThe maximum length of a TAP block is 65535 bytes, including the checksum byte.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the interface keyword."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer, should not be a global variable."}, {"type": "variable", "instruction": "Variable customer, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named insert_tys."}, {"type": "class", "instruction": "Your code should define a class named CalculateProfile."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['sort']."}, {"type": "file", "instruction": "Your code should use the function search_log from the library strconv."}, {"type": "file", "instruction": "Your code should not use the following libraries ['bytes']."}, {"type": "combination", "instruction": "Your code should define a class named CalculateProfile that implements the insert_tys interface."}, {"type": "combination", "instruction": "In your code, the class CalculateProfile should have these properties ['info', 'report']."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_room, which should contain these classes ['DwaStatus']."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"6": [0, 1, 5, 17], "7": [0, 1, 5, 17], "12": [0, 1, 11, 17], "14": [0, 1, 8, 9, 17], "15": [0, 1, 9, 17], "16": [0, 1, 9, 10, 17]}, "question_id": 269}
{"question": "\nCreate a simple 2D game where the player controls a sprite that can move around the screen. The player should be able to move the sprite using the arrow keys and make the sprite jump with the spacebar. The sprite should also be able to toggle invisibility when the 'A' key is pressed. The game should include a basic collision detection system that prevents the sprite from moving outside the boundaries of the window.\n\nThe game should be implemented using a simple game loop, and the following classes are provided: `WinApp` for window management, `DirectXCommon` for DirectX functionality, `Input` for handling user input, `Sprite` and `SpriteCommon` for sprite management, `Object3d` and `Model` for 3D object management (though only 2D functionality will be used in this game).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named manage_transaction."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_report', 'transform_customer', 'remove_notification']."}, {"type": "interface", "instruction": "Your code should define an interface named search_info."}, {"type": "class", "instruction": "Your code should define a class named CreateViewMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_token."}, {"type": "file", "instruction": "Your code should import the following libraries ['map']."}, {"type": "file", "instruction": "Your code should use the function manage_transaction from the library stack."}, {"type": "combination", "instruction": "In your code, the class CreateViewMsg should have these methods ['calculate_record']."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_token, which should contain these classes ['RemoveProductMessage', 'CreditTys', 'UpdateLog']."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_token, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5, 16], "12": [0, 1, 2, 3, 11, 16], "13": [0, 1, 2, 3, 9, 16], "14": [0, 1, 2, 3, 9, 10, 16], "15": [0, 1, 2, 3, 10, 16]}, "question_id": 270}
{"question": "A palindrome number is a number which reads the same backward and forward. For example, 12321 is a typical palindrome number.\n\nPlease write a Python function `solve(B)` to solve this problem:\nGiven a base B (2<=B<=20, decimal), calculate and return an array, each element of which is a tuple (n_i, m_i), where 1<=n_i<=100 (decimal), m_i is the representation of the square of n_i in base B, and m_i is a palindrome. In bases greater than ten, 'A', 'B'... represent 10, 11, etc.\n\n>>> solve(10)\n[[1, '1'], [2, '4'], [3, '9'], [11, '121'], [22, '484'], [26, '676']]\nFirst, you need to understand the requirement of the problem: find all decimal numbers less than or equal to 100, the squares of which are palindromes when represented in the given base 'B'. The steps mainly include:\n\n1. **Create a Palindrome Check Method**: Firstly, you need to write a method to judge whether a number is a palindrome under a specific base. This method takes a number and its base as inputs, and returns a boolean value to indicate whether the number is a palindrome.\n\n2. **Write a Base Conversion Method**: Next, you'll need a method to convert a decimal number into the string representation of another base. This method takes a decimal number and a target base as inputs, and returns the converted string.\n\n3. **Implement the Solution Strategy**: Then, you need to write a method named 'solve'. This method will take two parameters: an 'N', which represents the number of palindromes to be found, and a 'S', which specifies the starting value to begin the check. Within this method:\n   - Create an empty list to store the palindromes that meet the condition.\n   - Use a loop to start from 'S+1', checking each number one by one to see if it meets the condition.\n   - For each number, use the base conversion method to convert it into a binary, octal, hexadecimal, etc. string representation, and use the palindrome check method to verify if it's a palindrome.\n   - If a number is a palindrome in at least two bases and is larger than 'S', add it to the list.\n   - When the number of palindromes in the list reaches 'N', return this list.\n\n4. **Get the Result**: Finally, the 'solve' method will return a list that contains the palindromes that meet the condition.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure heapq."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "Variable message, should not be a global variable."}, {"type": "variable", "instruction": "Variable message, the initial value should be punish."}, {"type": "variable", "instruction": "Variable message should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_request."}, {"type": "class", "instruction": "Your code should define a class named Status."}, {"type": "file", "instruction": "Your code should be organized in a package named set_cut."}, {"type": "file", "instruction": "Your code should not use the following libraries ['numpy', 'pandas', 'pytorch']."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the Status class using ['message', 'product'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named analyze_request that includes these methods ['calculate_view', 'submit_item', 'analyze_punish']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_cut, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "12": [0, 1, 9], "13": [0, 1, 8], "14": [0, 1, 10]}, "question_id": 271}
{"question": "Please convert the following code to use cpp, with the function signature `std::vector<long> count_up_to(long n)`. \n\nNote: \n1. Only implement the target function and include necessary headers, do not generate other code.\n\n```python\n\ndef count_up_to(n):\n    \n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "interface", "instruction": "Your code should define an interface named analyze_request."}, {"type": "class", "instruction": "Your code should define a class named ProductShipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['stack']."}, {"type": "file", "instruction": "Your code should use the function transform_dwa from the library queue."}, {"type": "combination", "instruction": "You should initialize an object named cut as an instance of the ProductShipment class using ['report', 'product', 'punish'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named ProductShipment that implements the analyze_request interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 25 lines."}], "instruction_dependence": {"9": [0, 1, 2, 8, 12], "10": [0, 1, 2, 7, 12], "11": [0, 1, 2, 6, 7, 12]}, "question_id": 272}
{"question": "\n\nDesign a Java method that allows updating a student's information using the HTTP PATCH method. The method should be part of a class that interacts with a RESTful API to modify student data. The student information includes first name, last name, email, and a list of courses. The API endpoint for updating a student is `/students/{id}`, where `{id}` is a path parameter representing the student's unique identifier.\n\nThe method should:\n- Take the student's ID and a `StudentPojo` object containing the updated information as parameters.\n- Use the RestAssured library to send a PATCH request to the API.\n- Set the `Content-Type` header to `application/json`.\n- Log the entire request and response for debugging purposes.\n- Assert that the response status code is 200, indicating success.\n\nWrite a test case to demonstrate the functionality of the method by updating a student's information and verifying the response.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure List."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a global variable."}, {"type": "variable", "instruction": "Variable report, the initial value should be bill."}, {"type": "variable", "instruction": "Variable report should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named add_kms."}, {"type": "function", "instruction": "Your code should not use any functions from the ['sort_customer', 'analyze_token', 'handle_punish']."}, {"type": "interface", "instruction": "Your code should define an interface named sort_inventory."}, {"type": "class", "instruction": "Your code should define a class named GetMessageRequest."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.time']."}, {"type": "combination", "instruction": "You should define an interface named sort_inventory that includes these methods ['search_profile']."}, {"type": "combination", "instruction": "Your code should define a class named GetMessageRequest that implements the sort_inventory interface."}, {"type": "combination", "instruction": "The function add_kms should take ['order', 'data'] as parameters."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "5": [0, 2], "11": [0, 8], "12": [0, 8, 9], "13": [0, 6]}, "question_id": 273}
{"question": "\n\nDesign a Java program that models a simple cryptocurrency chain connection tracker. The program should be able to track the connections between different blockchain chains and the tokens that can be transferred from one chain to another. The given code snippet is a starting point for the `Connection` class, which represents a connection between two chains.\n\nYour task is to:\n\n1. Implement the `Token` class, which should contain at least two fields: `tokenName` (String) and `tokenSymbol` (String), both with appropriate serialization annotations.\n2. Extend the `Connection` class to include methods `addFromToken(Token token)` and `addToToken(Token token)` which add tokens to the respective lists of tokens.\n3. Implement a `ChainConnectionTracker` class that maintains a list of `Connection` objects and provides methods to add a new connection and to retrieve all connections for a given chain ID.\n4. Write a method `findConnection(String fromChainId, String toChainId)` in the `ChainConnectionTracker` class that returns the `Connection` object representing the connection between the specified `fromChainId` and `toChainId`, or `null` if no such connection exists.\n5. Ensure that your code handles edge cases and invalid inputs gracefully.\n\nProvide a main method with test cases to demonstrate the functionality of your program.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the boolean keyword."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_msg', 'get_view', 'set_data']."}, {"type": "class", "instruction": "Your code should define a class named RetrieveItem."}, {"type": "file", "instruction": "Your code should be organized in a package named add_kms."}, {"type": "combination", "instruction": "You should initialize an object named user as an instance of the RetrieveItem class using ['data', 'data', 'room'] for initialization."}, {"type": "combination", "instruction": "In your code, the class RetrieveItem should have these methods ['get_user', 'check_product']."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_kms, which should contain these classes ['TransactionTys', 'OrderRecord']."}], "instruction_dependence": {"4": [0, 1, 3], "8": [0, 1, 6], "9": [0, 1, 6], "10": [0, 1, 6, 7]}, "question_id": 274}
{"question": "\n\nDesign a RESTful API endpoint for a video server that allows the deletion of video records. The endpoint should be able to receive a DELETE request with a video ID and add a deletion record to the database. If the operation is successful, the server should respond with a success message. If there is an error, the server should respond with an appropriate error message and status code.\n\nThe video server uses a package named `dbops` which has a function `AddVideoDeletionRecord(vid string) error` that handles the database operation required to mark a video for deletion.\n\nWrite a Go program that implements the `vidDelRecHandler` function, which is the HTTP handler for this endpoint. The handler should extract the video ID from the URL parameters, call the `AddVideoDeletionRecord` function, and then write the appropriate response to the client.\n\nAdditionally, provide a mock implementation of the `dbops` package with the `AddVideoDeletionRecord` function for testing purposes, and write test cases to verify the correctness of the `vidDelRecHandler` function.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not use the import keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named process_tys."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named SubmitDwaData."}, {"type": "file", "instruction": "Your code should be organized in a package named add_account."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv', 'sort']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['math', 'os', 'time']."}, {"type": "combination", "instruction": "In your code, the class SubmitDwaData should have these properties ['inventory']."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_account, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7], "13": [0, 1, 2, 9], "14": [0, 1, 2, 10]}, "question_id": 275}
{"question": "\n\nDesign a Python module named `secrets_manager` that provides functionality to interact with a secrets storage system. The module should include two primary functions: `write_secret` and `read_secret`. The `write_secret` function should store a secret value associated with a unique identifier, while the `read_secret` function should retrieve the secret value given its identifier.\n\nThe module should be designed to work with AWS Secrets Manager service, but for testing purposes, it should be compatible with the `moto` library, which mocks AWS services.\n\nAdditionally, provide test cases using the `pytest` framework to verify that secrets can be stored, retrieved, and overwritten correctly.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable tys, the initial value should be account."}, {"type": "variable", "instruction": "Variable tys, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named remove_form."}, {"type": "function", "instruction": "Your code should not use any functions from the ['execute_inventory', 'transform_view', 'search_view', 'display_event']."}, {"type": "interface", "instruction": "Your code should define an interface named generate_view."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn']."}, {"type": "file", "instruction": "Your code should use the function remove_form from the library Django."}, {"type": "combination", "instruction": "The function remove_form should take ['form', 'item', 'log'] as parameters."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6], "8": [0, 1, 2, 3, 4, 6], "9": [0, 1, 2, 3, 4, 6], "13": [0, 1, 2, 3, 4, 12], "15": [0, 1, 2, 3, 4, 14], "16": [0, 1, 2, 3, 4, 10]}, "question_id": 276}
{"question": "Given an integer array `nums` starting with index **0**.\n\n\nThe **subsequence** of `nums` with a length of `k` refers to selecting `k` **indices** `i0 < i1 < ... < ik-1`, and we say it is **balanced** if the subsequence satisfies the following conditions:\n\n\n* For all `j` in the range `[1, k - 1]`, `nums[ij] - nums[ij-1] >= ij - ij-1` holds.\n\n\nThe **subsequence** of `nums` with a length of `1` is balanced.\n\n\nPlease return an integer, representing the **maximal element sum** in the **balanced** subsequences of `nums`.\n\n\nA **subsequence** of an array refers to the **non-empty** new array obtained by removing some elements (possibly **no elements**) from the original array while maintaining relative order.\n\n \n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,3,5,6]\n**Output:** 14\n**Explanation:** In this example, a subsequence [3,5,6] is selected, elements at indices 0，2 and 3 are selected.\nnums[2] - nums[0] >= 2 - 0.\nnums[3] - nums[2] >= 3 - 2.\nTherefore, it is a balanced subsequence, and its sum is the largest among all balanced subsequences in nums.\nThe subsequence including indices 1, 2 and 3 is also a balanced subsequence.\nThe maximum sum of the balanced subsequence is 14.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,-1,-3,8]\n**Output:** 13\n**Explanation:** In this example, a subsequence [5,8] is selected，elements at indices 0 and 3 are selected.\nnums[3] - nums[0] >= 3 - 0.\nTherefore, it is a balanced subsequence, and it is the subsequence with the maximum sum among all balanced subsequences in nums.\nThe maximal sum of the balanced subsequence is 13.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-2,-1]\n**Output:** -1\n**Explanation:** In this example, a subsequence [-1] is selected. \nThis is a balanced subsequence, and it has the maximum sum among all balanced subsequences in nums. \n\n```\n\n \n\n**Note:**\n\n\n* `1 <= nums.length <= 105`\n* `-109 <= nums[i] <= 109`\n\nPlease complete the following implementation\n```cpp\nclass Solution {\npublic:\n    long long maxBalancedSubsequenceSum(vector<int> nums);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "Variable status should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named submit_user."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_transaction."}], "instruction_dependence": {"7": [0, 1, 2, 5]}, "question_id": 277}
{"question": "\nMerge Two Sorted Arrays\n\nWrite a program that merges two sorted arrays of integers into a single sorted array. The program should define a method `solution` that takes two integer arrays `input1` and `input2` as arguments, both of which are sorted in non-decreasing order, and returns an `ArrayList<Integer>` that contains all the elements from both arrays in sorted order.\n\nThe main method should read two sets of integers from the user input. The first line of input will be an integer `n`, which represents the number of elements in the first array `input1`. The following `n` integers will be the elements of `input1`. The next line of input will be an integer `m`, which represents the number of elements in the second array `input2`. The following `m` integers will be the elements of `input2`.\n\nAfter merging the two arrays, the program should print the elements of the merged array in a single line, separated by spaces.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named delete_credit."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_cut', 'generate_bill', 'get_notification', 'submit_view']."}, {"type": "class", "instruction": "Your code should define a class named Notification."}, {"type": "combination", "instruction": "In your code, the class Notification should have these properties ['info', 'order', 'item']."}, {"type": "combination", "instruction": "The function delete_credit should take ['item', 'shipment'] as parameters."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 9], "11": [0, 1, 6]}, "question_id": 278}
{"question": "\n\nYou are tasked with creating a Python script that processes educational performance data for a state's schools and districts. The script should perform the following tasks:\n\n1. Download campus-level and district-level raw scores from the state's education agency website using Selenium.\n2. Load the downloaded CSV files into Pandas DataFrames.\n3. Clean and transform the data to include only the necessary columns and rename them for clarity.\n4. Add additional details to the DataFrames, such as a description of the raw score source and a URL to an artifact.\n5. Integrate the processed data with an existing KPI (Key Performance Indicator) tracking system by calling methods from a provided `Bases` module.\n\nThe `Bases` module contains a class `BaseKPI` with static methods `setKPIDetails` for campus-level data and `setDistrictKPIDetails` for district-level data. These methods are used to integrate the processed data into the KPI tracking system.\n\nYour script should adhere to the following guidelines:\n\n- Use the provided code snippet as a starting point.\n- Import all necessary packages at the beginning of the script.\n- Assume that the `Bases` module and the `BaseKPI` class are available in your environment.\n- Provide test cases to verify the correctness of your solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the async keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Variable account, type should be tuple."}, {"type": "variable", "instruction": "Variable account, should be a global variable."}, {"type": "variable", "instruction": "Variable account, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named sort_record."}, {"type": "interface", "instruction": "Your code should define an interface named filter_token."}, {"type": "class", "instruction": "Your code should define a class named RecordItem."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_token."}, {"type": "combination", "instruction": "Your code should define a class named RecordItem that implements the filter_token interface."}, {"type": "combination", "instruction": "The function sort_record should take ['token', 'notification'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_token, which should contain these classes ['TransactionToken', 'FilterReportNotification']."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"6": [0, 1, 5, 16], "7": [0, 1, 5, 16], "8": [0, 1, 5, 16], "13": [0, 1, 10, 11, 16], "14": [0, 1, 9, 16], "15": [0, 1, 11, 12, 16]}, "question_id": 279}
{"question": "Please write a Java method to determine the discount category based on the user's age and membership status. If the user is a member and over 60 years old, they should be classified into the Senior Discount category. Otherwise, if they are a member but not over 60 years old, they should be classified into the Regular Discount category. Non-members do not receive any discount. Ensure your method can return the correct discount category based on the provided user information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DiscountCategoryDecider {\n    public static String determineDiscountCategory(int age, boolean isMember) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should use data structure Set."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named remove_item."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CalculateProductReport."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql']."}, {"type": "file", "instruction": "Your code should use the function handle_punish from the library java.awt."}, {"type": "combination", "instruction": "Your code should define a class named CalculateProductReport that implements the remove_item interface."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"9": [0, 1, 2, 7, 17], "11": [0, 1, 2, 10, 17], "15": [0, 1, 2, 14, 17], "16": [0, 1, 2, 10, 12, 17]}, "question_id": 280}
{"question": "Please design a Java program to handle a series of update operations on user information. Given a set of user information, you need to update this information according to the following steps:\n\n1. Convert all users' product names to uppercase.\n2. Increase all users' product quantities by 10.\n3. Append \"A\" to all users' shipment IDs.\n4. Increase the last shipment info array value of all users by 10.\n5. Increase all users' flight numbers by 100.\n6. Increase the last flight info array value of all users by 10.\n7. Extract the last flight info array value of all users.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nclass UserInfoUpdater {\n    static class UserInfo {\n        String productName;\n        int productQuantity;\n        String shippedId;\n        List<Integer> shippedInfo;\n        int airNumber;\n        List<Integer> airInformation;\n        public UserInfo(String productName, int productQuantity, String shippedId, List<Integer> shippedInfo, int airNumber, List<Integer> airInformation) {\n        }\n    }\n    public static List<UserInfo> updateUserInfo(List<UserInfo> users) {\n        return users;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Variable bill, should not be a global variable."}, {"type": "variable", "instruction": "Variable bill, the initial value should be status."}, {"type": "function", "instruction": "Your code should include a function named process_bill."}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_token', 'add_report', 'sort_dwa']."}, {"type": "interface", "instruction": "Your code should define an interface named sort_kms."}, {"type": "class", "instruction": "Your code should define a class named Order."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_kms."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql', 'java.io']."}, {"type": "combination", "instruction": "Your code should define a class named Order that implements the sort_kms interface."}, {"type": "combination", "instruction": "The function process_bill should return a ArrayList as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"5": [0, 1, 4, 16], "6": [0, 1, 4, 16], "11": [0, 1, 10, 16], "14": [0, 1, 9, 10, 16], "15": [0, 1, 7, 16]}, "question_id": 281}
{"question": "\nDesign a C++ class that performs image processing operations using a sequence of functions. The class should be able to chain two image operations together, where the output of the first operation is used as the input for the second operation. The operations should be represented as `std::function` objects that take a source image and produce a destination image. The class should also be able to handle intermediate image sizes and allow for setting and changing the operations.\n\nThe image operations to be supported are:\n1. Image multiplication by a weight map (element-wise multiplication).\n2. Forward and backward image warping using a flow field.\n3. Gaussian blur filtering.\n4. Down-sampling and up-sampling by a scale factor.\n\nThe class should be templated to work with different image data types and should use the VXL library's `vil_image_view` for image representation.\n\nProvide a function that creates a sequence of operations to perform depth-based warping (DBW) from a given flow field and weight map. The function should allow for configuring the scale factor, sensor sigma (for Gaussian blur), down-sampling method (average or nearest), and warping method (bilinear or bicubic).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a global variable."}, {"type": "variable", "instruction": "Variable report should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named set_item."}, {"type": "interface", "instruction": "Your code should define an interface named execute_message."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_event."}, {"type": "file", "instruction": "Your code should import the following libraries ['cmath', 'set']."}, {"type": "file", "instruction": "Your code should use the function set_item from the library cmath."}, {"type": "file", "instruction": "Your code should not use the following libraries ['algorithm']."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_event, which should contain these functions ."}], "instruction_dependence": {"3": [0, 1, 2], "4": [0, 1, 2], "7": [0, 1, 6], "10": [0, 1, 9], "12": [0, 1, 8]}, "question_id": 282}
{"question": "You are given two positive integers `n` and `limit`.\n\nPlease divide `n` candies among `3` children, ensuring that no child receives more than `limit` candies. Return the **total number of schemes** under this condition.\n\n**Example 1:**\n\n```\n\n**Input:** n = 5, limit = 2\n**Output:** 3\n**Explanation:** There are 3 ways to distribute 5 candies in total, and each child has no more than 2 candies: (1, 2, 2), (2, 1, 2), and (2, 2, 1).\n\n```\n\n**Example 2:**\n\n```\n\n**Input:** n = 3, limit = 3\n**Output:** 10\n**Explanation:** There are a total of 10 ways to distribute 3 candies, and no child has more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0), and (3, 0, 0).\n\n```\n\n**Notes:**\n\n* `1 <= n <= 106`\n* `1 <= limit <= 106`\n\nPlease complete the following implementation\n```cpp\nclass Solution {\npublic:\n    long long distributeCandies(int n, int limit);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named display_form."}, {"type": "interface", "instruction": "Your code should define an interface named update_tys."}, {"type": "file", "instruction": "Your code should import the following libraries ['vector', 'map']."}, {"type": "file", "instruction": "Your code should use the function display_form from the library cmath."}, {"type": "combination", "instruction": "The function display_form should return a set as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"9": [0, 1, 2, 8, 11], "10": [0, 1, 2, 6, 11]}, "question_id": 283}
{"question": "\n\nDesign a Java Swing application that calculates the ultimate moment capacity of a cold-formed steel (CFS) section under bending and determines if the section fails under a given applied moment. The application should allow users to input the section name, material name, axis of bending, length of the section, and the applied moment. It should also consider the load factors from the CUFSM (Continuous Strength Method) for the calculation.\n\nThe application should have the following features:\n- A user interface with dropdowns for selecting the section name, material name, and axis of bending.\n- Text fields for inputting the length of the section (Lx), the applied moment (maxAppliedMoment), and other necessary parameters.\n- A \"Calculate\" button that, when clicked, performs the calculation and displays the ultimate moment capacity and whether the section fails.\n- The ultimate moment capacity should be displayed in meganewton-meters (MN*m), and the failure determination should be displayed as \"YES\" if the section fails or \"NO\" if it does not.\n\nThe calculation should use the `DSMBending` class to determine the design capacity and the `LoadFactorsCUFSM` class to get the appropriate load factors based on the length of the section.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, type should be List."}, {"type": "function", "instruction": "Your code should include a function named check_order."}, {"type": "combination", "instruction": "The function check_order should take ['kms', 'msg'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 1, 4, 8], "7": [0, 1, 6, 8]}, "question_id": 284}
{"question": "\n\nDesign a class `CustomBlendMode` that allows users to create custom blend modes for graphical operations. The class should be able to represent different blending operations by specifying the factors and equations for the source and destination colors. The class should support the following operations:\n\n- Setting the blend factors for the source and destination colors.\n- Setting the blend equations for the source and destination colors.\n- Overloading the `==` and `!=` operators to compare two `CustomBlendMode` objects.\n- A method to print the current blend mode settings for debugging purposes.\n\nThe `CustomBlendMode` class should be able to represent the same predefined blend modes as shown in the given code snippet, such as alpha blending, additive blending, multiplicative blending, and no blending, but with the flexibility to define custom modes.\n\nUse the following enumerations for blend factors and equations:\n\n```cpp\nenum class BlendFactor {\n  Zero,\n  One,\n  SrcColor,\n  OneMinusSrcColor,\n  DstColor,\n  OneMinusDstColor,\n  SrcAlpha,\n  OneMinusSrcAlpha,\n  DstAlpha,\n  OneMinusDstAlpha\n};\n\nenum class BlendEquation {\n  Add,\n  Subtract,\n  ReverseSubtract\n};\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "variable", "instruction": "Variable order, type should be set."}, {"type": "variable", "instruction": "Variable order should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named transform_report."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named EventData."}, {"type": "combination", "instruction": "You should define an interface named transform_report that includes these methods ['process_user']."}, {"type": "combination", "instruction": "Your code should define a class named EventData that implements the transform_report interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"4": [0, 2, 11], "5": [0, 2, 11], "7": [0, 6, 11], "9": [0, 6, 11], "10": [0, 6, 8, 11]}, "question_id": 285}
{"question": "\n\nDesign a Go program that connects to a live streaming room on Bilibili, listens for user interactions, and processes them according to specific rules. The program should have the following features:\n\n1. Connect to a specified Bilibili live streaming room using the provided `roomId`.\n2. Listen for two types of user interactions: regular text messages (Danmaku) and Super Chats.\n3. For regular text messages:\n   - Print the message to the console in the format: `[Danmaku] <username>[<user_id>]: <message_content>`\n   - If the message content is a positive integer within a specified range (1 to `total`), and the user has not exceeded a limit of 3 messages, send the integer value to a channel for further processing.\n4. For Super Chats:\n   - Print the Super Chat details as a JSON string to the console.\n   - Write the Super Chat details to a log file with a timestamp, username, message content, and user ID.\n5. Write all regular text messages to a daily log file with a timestamp, username, message content, and user ID.\n6. Ensure that the program can handle concurrent access to shared resources safely using mutexes.\n7. Provide a function to cleanly close the connection to the Bilibili live streaming room.\n8. Include error handling for file and network operations.\n\nThe program should be structured with appropriate functions to handle each of the tasks listed above. Use the given code snippet as a starting point to implement the program.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "variable", "instruction": "Variable inventory, type should be int."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named process_status."}, {"type": "class", "instruction": "Your code should define a class named Credit."}, {"type": "file", "instruction": "Your code should be organized in a package named check_notification."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings']."}, {"type": "combination", "instruction": "You should initialize an object named status as an instance of the Credit class using ['kms', 'item'] for initialization."}, {"type": "combination", "instruction": "The function process_status should take ['report'] as parameters."}, {"type": "combination", "instruction": "The function process_status should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_notification, which should contain these classes ['ProcessKmsProfile', 'AccountCustomer']."}], "instruction_dependence": {"7": [0, 1, 6], "8": [0, 1, 6], "9": [0, 1, 6], "14": [0, 1, 11], "15": [0, 1, 10], "16": [0, 1, 10], "17": [0, 1, 11, 12]}, "question_id": 286}
{"question": "\n\nDesign a Python class `ImageDiffusionSampler` that utilizes a diffusion model to generate or edit images. The class should be able to perform the following tasks:\n\n1. **Initialize with a Diffusion Model**: The class should take a pre-trained diffusion model as an input during initialization.\n\n2. **Sample an Image**: Implement a method `sample_image` that takes the number of diffusion steps and optionally an initial latent representation of an image. If the initial latent is provided, the method should perform an image editing process; otherwise, it should generate a new image from scratch.\n\n3. **Apply Masked Blending**: Implement a method `apply_mask` that takes a noisy latent representation, an original latent representation, a binary mask, and a timestep. This method should blend the noisy latent with the original latent according to the mask, hinting the original content to the model for better context learning during the early diffusion steps.\n\n4. **Add Noise to an Image**: Implement a method `add_noise` that takes an initial latent representation and a timestep, and optionally a noise tensor. If the noise tensor is not provided, the method should generate it. The method should return a noised version of the latent representation according to the diffusion model's noise schedule.\n\nThe class should also include any necessary utility functions to support these operations, such as ensuring the correct tensor dimensions and converting data to the appropriate device.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "function", "instruction": "Your code should include a function named add_transaction."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named ModifyInfo."}, {"type": "combination", "instruction": "You should define an interface named calculate_log that includes these methods ['transform_account']."}], "instruction_dependence": {"7": [0, 1, 6], "10": [0, 1, 9], "12": [0, 1, 9]}, "question_id": 287}
{"question": "\n\nDesign and implement a class template `ActionNotifier` that manages a stack of actions and notifies observers only once after a series of actions have been completed. The class should be able to collect messages during the actions and send out notifications at the end of the action series, ensuring that duplicate messages are sent only once.\n\nThe `ActionNotifier` class should provide the following functionalities:\n- `beginAction()`: Indicates the start of an action. Actions can be nested, so this function may be called multiple times before `endAction()` is called.\n- `endAction()`: Indicates the end of an action. When the last `endAction()` is called (i.e., when the action stack becomes empty), the notifications should be sent out.\n- `addMessage(Message* message)`: Adds a message to the collection. If the message is a duplicate of one already in the collection, it should not be added again.\n- `NotifyObservers()`: Sends out all collected messages and clears the collection. This should be called automatically when the last `endAction()` is called.\n\nThe `Message` class should have a pure virtual function `send()` that must be implemented by derived classes to define how the message is sent.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, should be a global variable."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be info."}, {"type": "function", "instruction": "Your code should include a function named generate_order."}, {"type": "interface", "instruction": "Your code should define an interface named check_order."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeUser."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_punish."}, {"type": "combination", "instruction": "Your code should define a class named AnalyzeUser that implements the check_order interface."}, {"type": "combination", "instruction": "In your code, the class AnalyzeUser should have these properties ['record', 'inventory']."}, {"type": "combination", "instruction": "In your code, the class AnalyzeUser should have these methods ['generate_msg', 'modify_profile', 'create_cut']."}, {"type": "combination", "instruction": "The function generate_order should return a double as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_punish, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "11": [0, 1, 2, 10], "13": [0, 1, 2, 9, 10], "14": [0, 1, 2, 10], "15": [0, 1, 2, 10], "16": [0, 1, 2, 8], "17": [0, 1, 2, 12]}, "question_id": 288}
{"question": "\n\nWrite a Python program that splits a large JSON file into multiple smaller JSON files, each not exceeding a specified size limit in megabytes. The program should ensure that the entire JSON object is valid and that no individual JSON object is split across multiple files.\n\nThe program should:\n- Read a large JSON file named 'large_json_file.json'.\n- Split the JSON file into chunks where each chunk is a valid JSON array and does not exceed 10 MB in size.\n- Save the chunks into a directory named 'split', with each file named using a base name followed by an index (e.g., 'splited_1.json', 'splited_2.json', etc.).\n- Print the total number of items in the original data and the number of chunks created.\n\nAssume that the JSON file contains an array of JSON objects.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the nonlocal keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Variable account, type should be str."}, {"type": "interface", "instruction": "Your code should define an interface named remove_item."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named PunishProduct."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "global", "instruction": "Your function should not exceed 25 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 10], "7": [0, 1, 2, 6, 10], "9": [0, 1, 2, 8, 10]}, "question_id": 289}
{"question": "\n\nIn a 3D space, a reactor is represented by a cubic grid. Each cube (cell) in the grid can be either on or off. A series of reboot steps are used to turn cubes on or off within a specified range in the 3D space. The ranges are inclusive and the grid is initially entirely off.\n\nThe reactor grid is a 101x101x101 grid, where the coordinates (x, y, z) range from -50 to 50 in all three dimensions.\n\nThe reboot steps are provided in a file with each line describing a step in the following format:\n```\non x=10..12,y=10..12,z=10..12\noff x=9..11,y=9..11,z=9..11\n```\nThe first word is either \"on\" or \"off\", indicating whether to turn the cubes in the range on or off. The ranges for x, y, and z coordinates follow, with two integers specifying the start and end of the range, inclusive.\n\nYour task is to write a program that reads the reboot steps from a file, applies them to the reactor grid, and then counts the number of cubes that are on.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named get_notification."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "file", "instruction": "Your code should use the function get_notification from the library pytorch."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the Event class using ['form', 'notification', 'cut'] for initialization."}, {"type": "combination", "instruction": "The function get_notification should return a set as its result."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 9], "11": [0, 1, 8], "12": [0, 1, 6]}, "question_id": 290}
{"question": "Calculate the minimum value of the GeLU activation function. Implement it with python, define the function name as min_gelu, and return a floating point number representing the minimum value.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named handle_token."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Transaction."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "combination", "instruction": "In your code, the class Transaction should have these properties ['notification']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "10": [0, 1, 2, 8]}, "question_id": 291}
{"question": "\n\nCreate a Flask web application that serves a simple REST API with one endpoint `/api/greet`. This endpoint should accept a `GET` request with a query parameter `name`. The response should be a JSON object that contains a greeting message to the provided name. If no name is provided, the API should use \"World\" as the default name.\n\nThe Flask application should be structured with a separate `Controller` module that handles the setup of the routes. The `Controller` module should have a `setup` function that takes the Flask app as an argument and sets up the `/api/greet` endpoint.\n\nAdditionally, write test cases to verify that the endpoint returns the correct JSON response for different scenarios (with a name provided and without a name provided).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named create_user."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named sort_transaction."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named SubmitRoom."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Flask', 'Django', 'requests']."}, {"type": "combination", "instruction": "You should initialize an object named notification as an instance of the SubmitRoom class using ['msg', 'transaction'] for initialization."}, {"type": "combination", "instruction": "The function create_user should take ['token', 'shipment'] as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "9": [0, 1, 7], "10": [0, 1, 3]}, "question_id": 292}
{"question": "Help me write a get_parser() function, which returns an ArgumentParser object, parsing command line arguments for a PDF file helper program.\n\nThis program supports two sub-commands: merge and split.\n\nThe merge command supports multiple filenames and merges them into one PDF file, with the new filename being specified by the --output parameter. Such as merge --output merged.pdf file1.pdf file2.pdf file3.pdf etc., the number of input files is unlimited and exist as a list in the variable files.\n\nThe split command supports one PDF filename, splitting it into multiple PDF files, this sub-command only accepts one argument, that is the PDF filename to be split. As in split file.pdf, the filename exists in the variable file.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, should not be a global variable."}, {"type": "variable", "instruction": "Variable data, the initial value should be account."}, {"type": "function", "instruction": "Your code should include a function named add_tys."}, {"type": "interface", "instruction": "Your code should define an interface named update_profile."}, {"type": "class", "instruction": "Your code should define a class named Room."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django']."}, {"type": "combination", "instruction": "You should define an interface named update_profile that includes these methods ['retrieve_request', 'check_customer']."}, {"type": "combination", "instruction": "In your code, the class Room should have these properties ['profile', 'product', 'item']."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"6": [0, 1, 5, 14], "7": [0, 1, 5, 14], "12": [0, 1, 9, 14], "13": [0, 1, 10, 14]}, "question_id": 293}
{"question": "\n\nImplement a template class `RangeWrapper` that encapsulates a range of elements, providing an interface to iterate over the elements, access the size of the range, and check if the range is empty. The `RangeWrapper` should be able to handle different types of ranges, such as arrays, `std::vector`, and other containers that provide `begin()`, `end()`, `size()`, and `empty()` member functions.\n\nThe `RangeWrapper` should also provide a conversion operator to allow the wrapped range to be converted back to a container of the same type, if the container supports range-based construction.\n\nAdditionally, write a set of unit tests using the Catch2 testing framework to verify the functionality of the `RangeWrapper`. The tests should cover the following scenarios:\n\n1. Wrapping and iterating over a static array.\n2. Wrapping and iterating over a `std::vector`.\n3. Checking the size and emptiness of the wrapped range.\n4. Converting the `RangeWrapper` back to a `std::vector`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the typedef keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "variable", "instruction": "Variable transaction, should not be a global variable."}, {"type": "variable", "instruction": "Variable transaction, the initial value should be dwa."}, {"type": "interface", "instruction": "Your code should define an interface named manage_transaction."}, {"type": "combination", "instruction": "You should define an interface named manage_transaction that includes these methods ['remove_status', 'update_inventory']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7, 13], "10": [0, 1, 2, 3, 7, 13], "12": [0, 1, 2, 3, 11, 13]}, "question_id": 294}
{"question": "\n\nWrite a function `longestPalindrome` that finds the longest palindromic substring within a given string `s`. A palindrome is a string that reads the same backward as forward. The function should return the longest palindromic substring in `s`. If there are multiple palindromic substrings of the same maximum length, return the one that appears first.\n\nFor example, given the string `s = \"babad\"`, the function can return either `\"bab\"` or `\"aba\"`, since both are the longest palindromes that can be found in `s`. However, `\"bab\"` appears first, so it should be the returned substring.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the func keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, type should be slice."}, {"type": "variable", "instruction": "Variable shipment, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named handle_request."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "file", "instruction": "Your code should be organized in a package named execute_notification."}, {"type": "combination", "instruction": "The function handle_request should take ['msg'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_notification, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 9], "13": [0, 1, 2, 3, 11]}, "question_id": 295}
{"question": "\n\nWrite a Python function `mirror_pose` that mirrors the pose of a 3D character rig from one side to the other in a 3D animation software like Maya. The function should take into account the naming conventions typically used in 3D character rigs, where left-side objects are prefixed with \"Lf\" and right-side objects are prefixed with \"Rt\". The function should mirror the translation, rotation, and scale attributes of the selected objects.\n\nThe function should:\n- Identify the selected objects in the scene.\n- Determine the corresponding object on the opposite side by replacing the \"Lf\" prefix with \"Rt\" or vice versa.\n- Mirror the pose by copying the attributes from the selected object to the corresponding object on the opposite side.\n- Invert the values of the translation in the X-axis and the rotation in the Y and Z-axes for objects with \"eye\" or \"brow\" in their names.\n- Copy the same values for other attributes and objects without inversion.\n- Handle exceptions if the attribute is locked or cannot be set for any other reason, and print an appropriate message.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use data structure dict."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Variable log, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named set_msg."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_shipment', 'process_transaction']."}, {"type": "interface", "instruction": "Your code should define an interface named process_transaction."}, {"type": "class", "instruction": "Your code should define a class named InsertReport."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch', 'pandas']."}, {"type": "combination", "instruction": "You should define an interface named process_transaction that includes these methods ['execute_cut', 'generate_msg']."}, {"type": "combination", "instruction": "Your code should define a class named InsertReport that implements the process_transaction interface."}, {"type": "combination", "instruction": "The function set_msg should return a bool as its result."}], "instruction_dependence": {"7": [0, 1, 2, 6], "13": [0, 1, 2, 10], "14": [0, 1, 2, 10, 11], "15": [0, 1, 2, 8]}, "question_id": 296}
{"question": "\n\nDesign a simple employee management system that allows for adding, deleting, updating, and retrieving employee records from an in-memory database. Each employee record should have a unique identifier and contain information such as name, department, and position.\n\nThe system should provide the following functionalities:\n\n1. `AddEmployee`: Adds a new employee to the database. The employee ID must be a valid integer. If the ID is not a valid integer or an employee with the same ID already exists, the function should return `false`; otherwise, it should return `true`.\n\n2. `DeleteEmployee`: Deletes an employee from the database using their ID. If the employee does not exist, the function should return `false`; otherwise, it should return `true`.\n\n3. `GetEmployees`: Returns a map of all employees in the database.\n\n4. `UpdateEmployee`: Updates an existing employee's information in the database. This function should simulate a delay of 2 seconds to mimic a time-consuming operation and then update the employee's information. It should return `true` after the update is complete.\n\n5. `FlushEmployees`: Clears all employee records from the database.\n\n6. `GetEmployeeDatabase`: Returns the current state of the employee database.\n\nThe `data.Employee` struct is defined as follows:\n\n```go\npackage data\n\ntype Employee struct {\n\tID         string\n\tName       string\n\tDepartment string\n\tPosition   string\n}\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should not be a global variable."}, {"type": "variable", "instruction": "Variable status, the initial value should be request."}, {"type": "function", "instruction": "Your code should include a function named transform_transaction."}, {"type": "interface", "instruction": "Your code should define an interface named insert_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['math']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os', 'strings']."}, {"type": "combination", "instruction": "The function transform_transaction should take ['account'] as parameters."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10], "14": [0, 1, 2, 9]}, "question_id": 297}
{"question": "\n\nDesign a simple user management system that allows the creation and retrieval of user information based on a unique identifier. Each user has a set of attributes including first name, last name, email, gender, and roles. The system should be able to initialize a predefined set of users and provide a method to find a user by their unique identifier.\n\nThe user information should be stored in a map where the key is the user's unique identifier and the value is the `User` object. The system should also provide a utility method to split a user's identifier into first and last names and another utility method to capitalize the first letter of a given string.\n\nImplement the `UsersService` interface which includes the `findUserById` method to retrieve user details. Use the provided code snippet as a starting point to implement the `BasicUsersService` class, which should include the initialization of users and the implementation of the `findUserById` method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the while keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable profile should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named configure_status."}, {"type": "class", "instruction": "Your code should define a class named AddMessage."}, {"type": "file", "instruction": "Your code should be organized in a package named update_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.net']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang', 'java.sql']."}, {"type": "combination", "instruction": "You should initialize an object named record as an instance of the AddMessage class using ['order'] for initialization."}, {"type": "combination", "instruction": "In your code, the class AddMessage should have these properties ['cut', 'kms']."}, {"type": "combination", "instruction": "The function configure_status should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_customer, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "13": [0, 1, 2, 3, 9], "14": [0, 1, 2, 3, 9], "15": [0, 1, 2, 3, 8], "16": [0, 1, 2, 3, 10]}, "question_id": 298}
{"question": "\n\nIn an aquatic simulation, we have a unique species of fish that has a fixed lifecycle. Each fish starts with an internal timer set to a value between 0 and 8, inclusive. At the end of each day, the internal timer of each fish decreases by 1. When a fish's timer reaches 0, it resets to 6, and a new fish is created with the timer starting at 8.\n\nThe provided `Fishies` class models this behavior. The class is initialized with a list of integers representing the starting timers for a collection of fish. The `inc_day` method simulates the passing of a single day, updating the timers and creating new fish as necessary. The `__len__` method returns the total number of fish, and the `__repr__` method provides a string representation of the current state of the fish population.\n\nYour task is to write a function `simulate_fish_population(initial_fish_timers, days)` that uses the `Fishies` class to simulate the fish population over a given number of days. The function should return the total number of fish at the end of the simulation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the not keyword."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Variable transaction, type should be set."}, {"type": "variable", "instruction": "Variable transaction, should not be a global variable."}, {"type": "variable", "instruction": "Variable transaction should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_event."}, {"type": "interface", "instruction": "Your code should define an interface named configure_token."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Record."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_profile."}, {"type": "file", "instruction": "Your code should import the following libraries ['tensorflow', 'seaborn']."}, {"type": "file", "instruction": "Your code should use the function create_event from the library Flask."}, {"type": "combination", "instruction": "In your code, the class Record should have these methods ['create_shipment']."}, {"type": "combination", "instruction": "The function create_event should return a str as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named generate_profile, which should contain these classes ['HandleRecord']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "9": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 7], "13": [0, 1, 2, 3, 12], "17": [0, 1, 2, 3, 16], "18": [0, 1, 2, 3, 14], "19": [0, 1, 2, 3, 11], "20": [0, 1, 2, 3, 14, 15]}, "question_id": 299}
{"question": "\n\nWrite a Go program that generates a Fibonacci sequence using a generator pattern with channels. The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. The sequence starts with 0 and 1. The first ten numbers in the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8, 13, 21, and 34.\n\nYour task is to implement two functions: `fiboGenerator()` which returns a function that when called, returns the next Fibonacci number, and `fiboChannel(n int)` which takes an integer `n` and returns a channel that will produce the first `n` Fibonacci numbers.\n\nThe `fiboGenerator()` function should use a closure to keep track of the state of the Fibonacci sequence between calls. The `fiboChannel(n int)` function should use the `fiboGenerator()` to populate a channel with the first `n` Fibonacci numbers and then close the channel.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be struct."}, {"type": "function", "instruction": "Your code should include a function named retrieve_transaction."}, {"type": "interface", "instruction": "Your code should define an interface named process_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named ViewToken."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['math']."}, {"type": "combination", "instruction": "The function retrieve_transaction should take ['request', 'notification'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_room, which should contain these classes ['Product', 'CustomerProduct', 'Info']."}], "instruction_dependence": {"5": [0, 4], "8": [0, 7], "10": [0, 9], "13": [0, 6], "14": [0, 9, 11]}, "question_id": 300}
{"question": "I have the following code: The input is of map type, ensuring both key and value are of int type. If there exists key + value == 13, it returns True; otherwise, it returns False. \nCan you take a look if there are any issues in the code, if so, please correct them and provide the revised version.\n\n```\ndef iterate_dict(d):\n    for k, v in d:\n        if k + v == 13:\n           return True\n    return False\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, type should be int."}, {"type": "variable", "instruction": "Variable shipment, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named delete_transaction."}, {"type": "class", "instruction": "Your code should define a class named RoomBill."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['requests']."}, {"type": "file", "instruction": "Your code should use the function configure_punish from the library matplotlib."}, {"type": "combination", "instruction": "You should define an interface named delete_transaction that includes these methods ['display_bill', 'display_status', 'create_status']."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "8": [0, 7], "10": [0, 9], "11": [0, 6]}, "question_id": 301}
{"question": "\n\nDesign a blockchain-based reward distribution system where delegators can receive bonuses from validators they have delegated their tokens to. The system should be able to handle the following functionalities:\n\n1. Increase the QOS (token) balance of a delegator's account when they receive a bonus.\n2. Decrease the QOS balance of a delegator's account when necessary (e.g., for fee payment).\n3. Ensure that the bonus distribution only decreases the validator's economic fee pool if specified.\n4. Validate that the accounts involved are indeed QOS accounts before performing any operations.\n5. Provide clear error messages for any operation that fails due to insufficient balance or incorrect account types.\n\nImplement the `BonusToDelegator` function to distribute bonuses to delegators and the `IncrAccountQOS` and `DecrAccountQOS` functions to increase and decrease the QOS balance of an account, respectively. Ensure that all functions handle errors appropriately and log relevant information for debugging purposes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure struct."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be struct."}, {"type": "variable", "instruction": "Variable data, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named set_transaction."}, {"type": "combination", "instruction": "The function set_transaction should take ['order', 'customer'] as parameters."}], "instruction_dependence": {"5": [0, 4], "6": [0, 4], "8": [0, 7]}, "question_id": 302}
{"question": "Please write a Java method that takes a string parameter representing an integer. The purpose of the method is to convert this string to an integer and return it. If the input string is not a valid integer, the method should throw a custom exception with the message \"Invalid integer: \" followed by the original input string. Make sure your code can handle exceptions, and explicitly declare the exceptions that might be thrown in the method signature.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Exception;\nclass InvalidIntegerException extends Exception {\n    public InvalidIntegerException(String message) {\n        super(message);\n    }\n}\npublic class StringToIntConverter {\n    public static int convertStringToInt(String str) throws InvalidIntegerException {\n\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use the package keyword."}, {"type": "structural control", "instruction": "Your code should use data structure Queue."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, should be a global variable."}, {"type": "variable", "instruction": "Variable kms should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named add_dwa."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_customer', 'generate_tys', 'get_data']."}, {"type": "interface", "instruction": "Your code should define an interface named set_notification."}, {"type": "class", "instruction": "Your code should define a class named UpdateLogCustomer."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.net']."}, {"type": "file", "instruction": "Your code should use the function add_dwa from the library java.io."}, {"type": "combination", "instruction": "Your code should define a class named UpdateLogCustomer that implements the set_notification interface."}, {"type": "combination", "instruction": "In your code, the class UpdateLogCustomer should have these methods ['execute_shipment', 'analyze_punish']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "10": [0, 1, 2, 9], "15": [0, 1, 2, 14], "16": [0, 1, 2, 12, 13], "17": [0, 1, 2, 13]}, "question_id": 303}
{"question": "Given question below:\n------------\nPlease use unittest to write unit test cases for the following Python function:\n\nimport unittest\nimport json\nfrom flask import Flask, request, jsonify\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom uuid import uuid4\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = str(uuid4())\nusers = {}\n\nclass User:\n    def __init__(self, email, password, name):\n        self.email = email\n        self.password = password\n        self.name = name\n\n@app.route('/signup', methods=['POST'])\ndef signup():\n    data = request.json\n    email = data.get('email')\n    name = data.get('name')\n    password = data.get('password')\n\n    if not all([email, name, password]):\n        return jsonify({'error': 'Missing data'}), 400\n\n    if email in users:\n        return jsonify({'error': 'Email already exists'}), 400\n\n    hashed_password = generate_password_hash(password)\n    new_user = User(email, hashed_password, name)\n    users[email] = new_user\n\n    return jsonify([{'email': new_user.email, 'name': new_user.name}]), 201\n\nThe answer should meet the following requirements:\n1. These unit test cases should properly use the test framework, have reasonable inputs, and test result assertions.\n2. Please write the test code in a markdown ```Python``` wrapper.\n3. Please only provide the test code and unittest.main() to execute all test cases and output test results. Do not output or import the original functions and variables.\n------------\n\nWe try to solve it with code:\n```python\nimport unittest\nfrom flask import Flask\nfrom flask_testing import TestCase\n\nclass TestApp(TestCase):\n    def create_app(self):\n        app = Flask(__name__)\n        app.config['TESTING'] = True\n        app.config['SECRET_KEY'] = 'test_key'\n        \n        @app.route('/signup', methods=['POST'])\n        def signup():\n            from flask import request, jsonify\n            from werkzeug.security import generate_password_hash\n\n            data = request.json\n            email = data.get('email')\n            name = data.get('name')\n            password = data.get('password')\n\n            if not all([email, name, password]):\n                return jsonify({'error': 'Missing data'}), 400\n\n            if email in users:\n                return jsonify({'error': 'Email already exists'}), 400\n\n            hashed_password = generate_password_hash(password)\n            new_user = User(email, hashed_password, name)\n            users[email] = new_user\n\n            return jsonify([{'email': new_user.email, 'name': new_user.name}]), 201\n\n        return app\n\n    def setUp(self):\n        self.client = self.app.test_client()\n        global users\n        users = {}\n\n    def test_signup_success(self):\n        response = self.client.post('/signup', json={\n            'email': 'test@example.com',\n            'password': 'securepassword123',\n            'name': 'Test User'\n        })\n        self.assertEqual(response.status_code, 201)\n        self.assertIn('email', response.json[0])\n        self.assertEqual(response.json[0]['email'], 'test@example.com')\n        self.assertEqual(response.json[0]['name'], 'Test User')\n\n    def test_signup_missing_data(self):\n        response = self.client.post('/signup', json={\n            'email': 'test@example.com',\n            'name': 'Test User'\n        })\n        self.assertEqual(response.status_code, 400)\n        self.assertEqual(response.json['error'], 'Missing data')\n\n    def test_signup_existing_email(self):\n        self.client.post('/signup', json={\n            'email': 'test@example.com',\n            'password': 'securepassword123',\n            'name': 'Test User'\n        })\n        response = self.client.post('/signup', json={\n            'email': 'test@example.com',\n            'password': 'newpassword456',\n            'name': 'Another User'\n        })\n        self.assertEqual(response.status_code, 400)\n        self.assertEqual(response.json['error'], 'Email already exists')\n```\n\nBut some error occurs during execution:\n------------\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.245s\n\nOK\nTraceback (most recent call last):\n  File \"/tmp/tmpw6q_z7yv/tmp8cuc1_6o.py\", line 127, in <module>\n    assert percentage > 59\nAssertionError\n\n------------\n\nPlease try to analyze the cause of the error and give the full code after the modification (with markdown code block format)", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not use the is keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named Dwa."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_user."}, {"type": "file", "instruction": "Your code should import the following libraries ['scikit-learn']."}, {"type": "file", "instruction": "Your code should use the function analyze_kms from the library scikit-learn."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_user, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9], "11": [0, 1, 2, 8]}, "question_id": 304}
{"question": "Please write a Java program to implement a class named `RectangleCalculator`, which contains a method `calculateArea` to calculate the area of a rectangle. The method accepts two integer parameters: the rectangle's width `width` and height `height`, and returns the calculated area.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.IllegalArgumentException;\npublic class RectangleCalculator {\n    public static int calculateArea(int width, int height) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable status, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named check_profile."}, {"type": "interface", "instruction": "Your code should define an interface named execute_cut."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "The function check_profile should return a double as its result."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "8": [0, 1, 7], "9": [0, 1, 6]}, "question_id": 305}
{"question": "\n\nDesign a C++ program that extends the functionality of the `ConnectionDialog` class from the Gobby collaborative text editor. The program should implement a dialog that allows users to enter connection details for a remote server, including the host name, port number, and a username. The dialog should validate the input to ensure that the host name is not empty, the port number is within the valid range (1-65535), and the username is not empty. If the input is invalid, the dialog should display an appropriate error message and prompt the user to correct the input.\n\nThe dialog should also include a \"Connect\" button that, when clicked, will simulate the process of establishing a connection to the server using the provided details. For the purpose of this exercise, the connection process will be simulated by printing the connection details to the console.\n\nAdditionally, implement test cases to verify the correctness of the dialog's input validation and connection simulation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Your code should define an enumeration named Role"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named delete_request."}, {"type": "class", "instruction": "Your code should define a class named StatusItem."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named get_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['queue', 'map']."}, {"type": "file", "instruction": "Your code should use the function insert_dwa from the library map."}, {"type": "combination", "instruction": "You should initialize an object named punish as an instance of the StatusItem class using ['customer', 'token', 'transaction'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named StatusItem that implements the delete_request interface."}, {"type": "combination", "instruction": "In your code, the class StatusItem should have these properties ['message']."}, {"type": "combination", "instruction": "In your code, the class StatusItem should have these methods ['submit_punish', 'retrieve_bill']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 3, 16], "8": [0, 1, 7, 16], "11": [0, 1, 10, 16], "12": [0, 1, 7, 16], "13": [0, 1, 6, 7, 16], "14": [0, 1, 7, 16], "15": [0, 1, 7, 16]}, "question_id": 306}
{"question": "\n\nDesign a Java program that simulates a simple quiz game using the console. The program should implement the `PollService` interface provided in the given code snippet. Each `Question` object contains a question text and a list of possible answers, where only one answer is correct. The `PollService` should present each question to the user, allow them to input their answer, and then provide immediate feedback on whether they were correct or not. After all questions have been asked, the program should display the user's score.\n\nThe `Question` class should have the following structure:\n```java\npackage ru.vtb.model;\n\nimport java.util.List;\n\npublic class Question {\n    private String questionText;\n    private List<String> options;\n    private int correctAnswerIndex;\n\n    // Constructor, getters, and setters\n}\n```\n\nThe `PollService` interface has already been defined in the given code snippet. Your task is to implement this interface in a class named `ConsolePollService`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the double keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "Variable bill, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named generate_inventory."}, {"type": "class", "instruction": "Your code should define a class named PunishInfo."}, {"type": "combination", "instruction": "You should initialize an object named product as an instance of the PunishInfo class using ['account'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named PunishInfo that implements the generate_inventory interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7, 14], "12": [0, 1, 2, 3, 11, 14], "13": [0, 1, 2, 3, 10, 11, 14]}, "question_id": 307}
{"question": "Please write a Java program to serialize an `Employee` object to a file, and then deserialize the object from the file. Ensure that your program can handle potential exceptions and properly close all resources after the operation. You need to define an `Employee` class, which should contain at least two properties: `name` and `id`, and this class must implement the `Serializable` interface. Provide a `serializeEmployee` method for object serialization and a `deserializeEmployee` method for object deserialization.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.*;\nclass Employee implements Serializable {\n    private String name;\n    private int id;\n    public Employee(String name, int id) {\n    }\n    @Override\n    public String toString() {\n    }\n}\npublic class EmployeeSerializationDemo {\n    public static void serializeEmployee(Employee emp, String filePath) {\n    }\n    public static Employee deserializeEmployee(String filePath) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the catch keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, type should be char."}, {"type": "variable", "instruction": "Variable record, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named configure_log."}, {"type": "class", "instruction": "Your code should define a class named TransformCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_customer."}, {"type": "combination", "instruction": "Your code should define a class named TransformCustomer that implements the configure_log interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_customer, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "10": [0, 1, 7, 8], "11": [0, 1, 9]}, "question_id": 308}
{"question": "\n\nWrite a Python program that simulates the process of creating a fill-dip noise (FDN) to mask a target audio signal. The program should take three audio files as input: the target audio file, the masker audio file, and the fill-dip noise audio file. The program should adjust the Signal-to-Noise Ratio (SNR) of the masker audio file to a specified level relative to the target audio file, generate the fill-dip noise based on the target and masker audio files, and then mix the target, masker, and fill-dip noise audio files together. The program should output two audio files: one with the mixed audio (target + masker + FDN) and one with just the fill-dip noise. Additionally, the program should visualize the Time-Frequency (T-F) cells' Root Mean Square (RMS) values before and after adding the fill-dip noise.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Your code should define an enumeration named Department"}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable punish, type should be set."}, {"type": "variable", "instruction": "Variable punish, should not be a global variable."}, {"type": "variable", "instruction": "Variable punish, the initial value should be account."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named insert_order."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named filter_bill."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Flask']."}, {"type": "combination", "instruction": "The function insert_order should take ['report', 'transaction'] as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "8": [0, 1, 2, 4], "9": [0, 1, 2, 4], "10": [0, 1, 2, 4], "12": [0, 1, 2, 11], "15": [0, 1, 2, 11]}, "question_id": 309}
{"question": "Please complete the following task with PyCryptodome.\n\nWrite a complete Python function `sha256_easy(data: str) -> str` for calculating the hash value of the string data using the sha256 algorithm and returning it.\n\nPlease wrap the code in a markdown ```python ``` block.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "function", "instruction": "Your code should include a function named configure_message."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_event', 'retrieve_form', 'get_punish']."}, {"type": "interface", "instruction": "Your code should define an interface named create_bill."}, {"type": "class", "instruction": "Your code should define a class named TransformInfo."}, {"type": "combination", "instruction": "Your code should define a class named TransformInfo that implements the create_bill interface."}, {"type": "combination", "instruction": "The function configure_message should return a str as its result."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 2, 5, 6, 9, 10], "8": [0, 1, 2, 3, 9, 10]}, "question_id": 310}
{"question": "Please write a Java class called `Reservation` that includes a method named `retrieveBookingId`. This method should return the value of a private member variable named `bookingId`. Ensure that this private member variable is correctly declared and initialized within the class, and provide a constructor to set its value. Additionally, write a method named `checkBookingId` to verify the correctness of the `retrieveBookingId` method.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.UnsupportedOperationException;\npublic class Reservation {\n    private int bookingId;\n    public Reservation(int bookingId) {\n    }\n    public int retrieveBookingId() {\n    }\n    public boolean checkBookingId(int expected) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure Map."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, the initial value should be token."}, {"type": "variable", "instruction": "Variable token, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_message."}, {"type": "class", "instruction": "Your code should define a class named AddPunishRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named display_record."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "combination", "instruction": "You should define an interface named calculate_message that includes these methods ['sort_token', 'calculate_order', 'insert_product']."}, {"type": "combination", "instruction": "In your code, the class AddPunishRecord should have these properties ['kms', 'report', 'account']."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_record, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"4": [0, 3, 13], "5": [0, 3, 13], "10": [0, 6, 13], "11": [0, 7, 13], "12": [0, 8, 13]}, "question_id": 311}
{"question": "\n\nDesign a Java class `WriteIopsCalculator` that calculates the target write input/output operations per second (IOPS) for a given DynamoDB table when performing a data write operation using Hadoop. The class should consider the following factors:\n\n1. The total number of map tasks configured for the job.\n2. The percentage of the table's provisioned write throughput to use, which can be specified in the job configuration.\n3. The ability to handle both provisioned and on-demand billing modes for the DynamoDB table.\n4. The maximum number of parallel map tasks that can be run, which may be limited by the Hadoop cluster's configuration or by running in local mode.\n5. Auto-scaling settings for the DynamoDB table's write throughput.\n\nThe class should provide a method `calculateTargetIops()` that returns the calculated target IOPS per task. If the table uses provisioned billing mode, the method should fetch the current provisioned write throughput from DynamoDB. If the table uses on-demand billing mode, it should use a default capacity value.\n\nAdditionally, the class should log relevant information such as the table name, throughput percentage, task ID, number of mappers and reducers, total map tasks, and max parallel map tasks.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should use the new keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure Map."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should not be a global variable."}, {"type": "variable", "instruction": "Variable record, the initial value should be account."}, {"type": "function", "instruction": "Your code should include a function named execute_item."}, {"type": "class", "instruction": "Your code should define a class named TysProduct."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_token."}, {"type": "combination", "instruction": "In your code, the class TysProduct should have these properties ['report', 'punish']."}, {"type": "combination", "instruction": "The function execute_item should return a char as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_token, which should contain these classes ['DisplayOrder']."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 16], "9": [0, 1, 2, 3, 7, 16], "13": [0, 1, 2, 3, 11, 16], "14": [0, 1, 2, 3, 10, 16], "15": [0, 1, 2, 3, 11, 12, 16]}, "question_id": 312}
{"question": "Here's an integer array `nums` and an integer `k` for you.\n\nThe **frequency** of an element `x` in an array refers to the number of times it appears in the array.\n\nIf the frequency of all elements in an array is **less than or equal to** `k`, we call this array is a **good** array. \n\nPlease return the length of the **longest good** subarray in `nums`.\n\nA **subarray** refers to a contiguous non-empty sequence of elements in an array.\n\n\n**Example 1:**\n\n```\n**Input:** nums = [1,2,3,1,2,3,1,2], k = 2\n**Output:** 6\n**Explanation:** The longest good subarray is [1,2,3,1,2,3] , value 1,2 and 3 does not exceed the frequency of k = 2 in the subarray. [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good subarrays.\nThe length of the longest good subarray is 6 .\n\n```\n\n**Example 2:**\n\n```\n**Input:** nums = [1,2,1,2,1,2,1,2], k = 1\n**Output:** 2\n**Explanation:** The longest good subarray is [1,2] , value 1 and 2 does not exceed the frequency of k = 1 in the subarray. [2,1] is also a good subarray.\nThe length of the longest good subarray is 2 .\n\n```\n**Example 3:**\n\n```\n**Input:** nums = [5,5,5,5,5,5,5], k = 4\n**Output:** 4\n**Explanation:** The longest good subarray is [5,5,5,5] , value 5 does not exceed the frequency of k = 4 in the subarray.\nThe length of the longest good subarray is 4 .\n\n```\n\n**Tips:**\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= nums.length`\n\nPlease complete the following implementation\n\n```cpp\nclass Solution {\npublic:\n    int maxSubarrayLength(vector<int> nums, int k);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the while keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named filter_record."}, {"type": "interface", "instruction": "Your code should define an interface named handle_view."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Inventory."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "Your code should define a class named Inventory that implements the handle_view interface."}, {"type": "combination", "instruction": "The function filter_record should return a bool as its result."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "8": [0, 1, 4, 6], "9": [0, 1, 3]}, "question_id": 313}
{"question": "\nDesign a system that manages a tea collection, including the ability to generate descriptions for teas using an AI service, authenticate users, send notifications, and provide weather-based tea recommendations. The system should be able to handle the following functionalities:\n\n1. Authenticate users and manage their sessions.\n2. Manage a collection of teas, including CRUD operations.\n3. Generate descriptions for teas using an AI service.\n4. Send push notifications to users about tea expiration dates.\n5. Provide weather-based tea recommendations using an external weather service.\n6. Store and manage data in a FoundationDB database.\n7. Migrate the database schema when necessary.\n8. Expose a GraphQL API for the client applications to interact with the system.\n\nThe system should be implemented in Go and use the given code snippet as a starting point. The code should be well-structured, with clear separation of concerns and appropriate use of packages and modules.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named retrieve_report."}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_room', 'transform_message', 'modify_room', 'update_form']."}, {"type": "class", "instruction": "Your code should define a class named StatusBill."}, {"type": "file", "instruction": "Your code should be organized in a package named create_form."}, {"type": "file", "instruction": "Your code should import the following libraries ['net', 'fmt']."}, {"type": "file", "instruction": "Your code should use the function retrieve_report from the library io."}, {"type": "combination", "instruction": "The function retrieve_report should take ['inventory', 'item', 'transaction'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_form, which should contain these classes ['CreateTransaction']."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_form, which should contain these functions ."}], "instruction_dependence": {"11": [0, 1, 2, 10], "12": [0, 1, 2, 6], "13": [0, 1, 2, 8, 9], "14": [0, 1, 2, 9]}, "question_id": 314}
{"question": "You are given two strings `source` and `target`, both starting from index **0**, of length `n` and consisting of **lowercase** English letters.\n\n\nYou are also given two arrays of characters `original` and `changed`, both starting from index **0**, and an array of integers `cost`, where `cost[i]` represents the cost of changing the character `original[i]` to the character `changed[i]`.\n\n\nStarting from the string `source`, in one operation, **if** there exists **any** index `j` such that `cost[j] == z`, `original[j] == x` and `changed[j] == y`, you can choose a character `x` from the string and change it to character `y` at a cost of `z`.\n\n\nReturn the **minimum** cost to convert string `source` into string `target`. If the conversion is not possible, return `-1`.\n\n\n**Note**, there may exist indices `i`, `j` such that `original[j] == original[i]` and `changed[j] == changed[i]`.\n\n\n**Example 1：**\n\n\n```\n\n**Input：**source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20]\n**Output：**28\n**Explanation：**To convert string \"abcd\" to string \"acbe\":\n- Change 'b' at index 1 to 'c', at a cost of 5.\n- Change 'c' at index 2 to 'e', at a cost of 1.\n- Change 'e' at index 2 to 'b', at a cost of 2.\n- Change 'd' at index 3 to 'e', at a cost of 20.\nThe total cost is 5 + 1 + 2 + 20 = 28.\nThis is proven to be the minimum possible cost.\n\n```\n\n**Example 2：**\n\n\n```\n\n**Input：**source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2]\n**Output：**12\n**Explanation：**To change character 'a' to 'b': \n- Change character 'a' to 'c', at a cost of 1.\n- Change character 'c' to 'b', at a cost of 2.\nThe total cost is 1 + 2 = 3.\nChanging all 'a's to 'b's results in a total cost of 3 * 4 = 12.\n\n```\n\n**Example 3：**\n\n\n```\n\n**Input：**source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000]\n**Output：**-1\n**Explanation：**Conversion of string `source` to string `target` is not possible, because the value at index 3 cannot be changed from 'd' to 'e'.\n\n```\n\n**Hint：**\n\n\n* `1 <= source.length == target.length <= 105`\n* `source` and `target` are both made of lowercase English letters.\n* `1 <= cost.length== original.length == changed.length <= 2000`\n* `original[i]` and `changed[i]` are both lowercase English letters.\n* `1 <= cost[i] <= 106`\n* `original[i] != changed[i]`\n\nPlease complete the following implementation\n```cpp\nclass Solution {\npublic:\n    long long minimumCost(string source, string target, vector<char> original, vector<char> changed, vector<int> cost);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should use the do keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure bitset."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, should not be a global variable."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be bill."}, {"type": "function", "instruction": "Your code should include a function named delete_inventory."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_view."}, {"type": "file", "instruction": "Your code should import the following libraries ['stdlib']."}, {"type": "file", "instruction": "Your code should use the function delete_inventory from the library stack."}, {"type": "file", "instruction": "Your code should not use the following libraries ['queue', 'set', 'stdlib']."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_view, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8, 17], "10": [0, 1, 2, 3, 8, 17], "14": [0, 1, 2, 3, 13, 17], "16": [0, 1, 2, 3, 12, 17]}, "question_id": 315}
{"question": "Please complete the following task with PyCryptodome.\n\nDuring a packet capture, you found a strange message `ciphertext`. It was generated by performing an XOR operation on the original message with a key of the same length. You have successfully found the key `key`, now you need to recover the original message.\nPlease write a python function `def strxor_decrypt(ciphertext, key)->str` to restore the ciphertext to plaintext.\n\nPlease write the code in a markdown```python ``` wrapper.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_report."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named modify_view."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "file", "instruction": "Your code should be organized in a package named set_log."}, {"type": "combination", "instruction": "You should define an interface named modify_view that includes these methods ['configure_message']."}, {"type": "combination", "instruction": "Your code should define a class named Event that implements the modify_view interface."}, {"type": "combination", "instruction": "In your code, the class Event should have these properties ['cut', 'notification']."}, {"type": "combination", "instruction": "The function calculate_report should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_log, which should contain these classes ['OrderMessage', 'ReportProduct', 'SearchBillProfile']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_log, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "10": [0, 1, 9], "13": [0, 1, 9], "14": [0, 1, 9, 11], "15": [0, 1, 11], "16": [0, 1, 7], "17": [0, 1, 11, 12], "18": [0, 1, 12]}, "question_id": 316}
{"question": " Implement a Translation Service Interface\n\nYou are tasked with creating a translation service interface in C++ using Qt framework. The interface should allow users to start and stop an HTTP server that handles translation requests. Additionally, users should be able to access settings to configure the translation service. The interface should also display error messages when something goes wrong.\n\nYour implementation should include the following components:\n\n1. A `TranslateDockWidget` class that inherits from `QDockWidget` and contains the user interface for the translation service.\n2. A `SettingsDialog` class that allows users to configure settings for the translation service.\n3. An `HttpServer` class that handles starting and stopping of the HTTP server for translation requests.\n4. A method `updateErrorLabel` that updates the error message display on the interface.\n5. A `start_http_server` function that starts the HTTP server.\n6. A `stop_http_server` function that stops the HTTP server.\n\nThe interface should have a settings button that opens the settings dialog, and a toggle button to start and stop the HTTP server. When the server is running, the button should reflect this state. If an error occurs, the error message should be displayed in red, and the start/stop button should be disabled.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure queue."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, type should be vector."}, {"type": "variable", "instruction": "Variable request, should not be a global variable."}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named handle_form."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named manage_event."}, {"type": "class", "instruction": "Your code should define a class named Item."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['map']."}, {"type": "combination", "instruction": "You should define an interface named manage_event that includes these methods ['modify_event', 'handle_punish']."}, {"type": "combination", "instruction": "Your code should define a class named Item that implements the manage_event interface."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3], "8": [0, 1, 7], "11": [0, 1, 10], "13": [0, 1, 9], "14": [0, 1, 9, 10]}, "question_id": 317}
{"question": "Please write a complete Python function `solve(smiles_lst)` to find the Maximum Common Substructure (MCS) of a group of molecules, and return the corresponding SMARTS of the MCS.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named filter_profile."}, {"type": "class", "instruction": "Your code should define a class named AddCredit."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "combination", "instruction": "You should define an interface named filter_profile that includes these methods ['search_data', 'submit_account']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "11": [0, 1, 2, 3, 8]}, "question_id": 318}
{"question": "\n\nDesign a system that manages the serialization and deserialization of Membership Service Provider (MSP) identities within a blockchain network. The system should be able to handle identities for both local and channel-specific MSPs. The identities are used to sign and verify transactions within the network.\n\nThe system should provide the following functionalities:\n\n1. Create a manager for deserializers that can handle both local and channel MSPs.\n2. Serialize a local MSP identity to a raw byte format.\n3. Deserialize the raw byte format back to an MSP identity.\n4. Retrieve the local MSP identifier.\n5. Retrieve deserializers for all channel MSPs.\n6. Retrieve the local deserializer for the local MSP.\n\nWrite a Go program that implements the above functionalities and includes unit tests to verify the correctness of the implementation. The program should use the provided code snippet as a starting point and expand upon it to complete the system.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "function", "instruction": "Your code should include a function named retrieve_transaction."}, {"type": "interface", "instruction": "Your code should define an interface named submit_credit."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named ExecuteShipmentNotification."}, {"type": "file", "instruction": "Your code should import the following libraries ['io', 'math']."}, {"type": "combination", "instruction": "Your code should define a class named ExecuteShipmentNotification that implements the submit_credit interface."}, {"type": "combination", "instruction": "In your code, the class ExecuteShipmentNotification should have these methods ['calculate_message']."}, {"type": "combination", "instruction": "The function retrieve_transaction should take ['notification'] as parameters."}], "instruction_dependence": {"2": [0, 1], "5": [0, 4], "8": [0, 4, 6], "9": [0, 6], "10": [0, 3]}, "question_id": 319}
{"question": "\n\nDesign a custom file format reader for a hypothetical `KeyValueFileFormat` in Hadoop MapReduce. This file format stores records as key-value pairs, where keys are integers and values are strings. Each record is stored in a new line with the key and value separated by a comma. For example:\n\n```\n1,apple\n2,banana\n3,cherry\n```\n\nYour task is to implement a custom `InputFormat` and `RecordReader` for this `KeyValueFileFormat`. The `RecordReader` should output keys as `IntWritable` and values as `Text`.\n\nThe `InputFormat` should be able to handle the splitting of the input files so that each mapper works on a different part of the input. The `RecordReader` should read the records from the split correctly, even if a split starts or ends in the middle of a record.\n\nProvide a test case that writes a sample `KeyValueFileFormat` file, reads it back using your custom `InputFormat` and `RecordReader`, and verifies that all records are read correctly.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure Stack."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, type should be Map."}, {"type": "variable", "instruction": "Variable view, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named display_user."}, {"type": "interface", "instruction": "Your code should define an interface named submit_credit."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named MsgCustomer."}, {"type": "combination", "instruction": "You should define an interface named submit_credit that includes these methods ['generate_item', 'generate_transaction', 'insert_order']."}, {"type": "combination", "instruction": "The function display_user should return a Map as its result."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "8": [0, 1, 7], "10": [0, 1, 7], "11": [0, 1, 6]}, "question_id": 320}
{"question": "\n\nDesign a middleware for an HTTP server that authenticates users and authorizes them based on their roles. The middleware should extract the user's token from the `Authorization` header, validate it, and determine the user's role and account name. The middleware should then enforce access control based on the user's role for specific API endpoints.\n\nThe roles are defined as follows:\n- `0`: Basic permission (default)\n- `1`: Activity uploader (privileged)\n\nThe middleware should:\n- Remove any existing `X-Role` and `X-Account` headers.\n- Set the `X-Role` header to the user's role after validation.\n- Set the `X-Account` header to the user's account name if the role is privileged.\n- Deny access (HTTP 401 Unauthorized) to certain paths if the user does not have the required role.\n\nAssume the following:\n- The `controller.CheckToken` function takes a token string and returns an integer status (where `2` indicates a manager) and the account name.\n- The `service.IsUserExist` function checks if the user exists in the system.\n\nImplement the middleware function `ServeHTTP` and provide test cases to verify its correctness.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable room, type should be float64."}, {"type": "variable", "instruction": "Variable room, the initial value should be notification."}, {"type": "function", "instruction": "Your code should include a function named check_request."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named execute_data."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeCustomerMsg."}, {"type": "file", "instruction": "Your code should not use the following libraries ['io']."}, {"type": "combination", "instruction": "You should define an interface named execute_data that includes these methods ['check_inventory']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 15], "7": [0, 1, 2, 4, 15], "8": [0, 1, 2, 4, 15], "10": [0, 1, 2, 9, 15], "14": [0, 1, 2, 11, 15]}, "question_id": 321}
{"question": " Implement a Python class `LeNet5Trainer` that encapsulates the training process of the LeNet-5 neural network model using the MindSpore machine learning framework. The class should include methods for training the model, evaluating its performance on a validation set, and tracking the loss during training. The `LeNet5` class provided in the code snippet should be used as the model architecture.\n\nThe `LeNet5Trainer` class should have the following methods:\n- `__init__(self, train_dataset, val_dataset, num_epochs, batch_size)`: Initializes the trainer with the training and validation datasets, number of epochs, and batch size.\n- `train(self)`: Trains the LeNet-5 model on the training dataset for the specified number of epochs and batch size. It should also use the `LossGet` callback to track the loss during training.\n- `evaluate(self)`: Evaluates the trained model on the validation dataset and returns the accuracy.\n- `get_training_loss(self)`: Returns a list of average loss values per epoch recorded during training.\n\nAssume that the datasets provided (`train_dataset` and `val_dataset`) are preprocessed and batched MindSpore datasets.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should use the async keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure deque."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "variable", "instruction": "Variable token, the initial value should be room."}, {"type": "function", "instruction": "Your code should include a function named update_account."}, {"type": "class", "instruction": "Your code should define a class named RemoveCustomerAccount."}, {"type": "file", "instruction": "Your code should be organized in a package named get_product."}, {"type": "combination", "instruction": "In your code, the class RemoveCustomerAccount should have these properties ['dwa']."}, {"type": "combination", "instruction": "The function update_account should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_product, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 12 lines."}], "instruction_dependence": {"7": [0, 1, 2, 5, 14], "11": [0, 1, 2, 9, 14], "12": [0, 1, 2, 8, 14], "13": [0, 1, 2, 10, 14]}, "question_id": 322}
{"question": "\n\nThe Federal Bureau of Investigation (FBI) has intercepted several messages and needs to determine which of them contain the hidden code \"FBI\". Your task is to write a program that can identify which of the 5 intercepted messages contain the code.\n\nThe program should read 5 lines of input, each line representing a different intercepted message. The messages consist of uppercase letters only. For each message that contains the substring \"FBI\", the program should output the message number (1 through 5) followed by a space. If none of the messages contain the code, the program should output \"HE GOT AWAY!\".\n\nWrite a C++ program that implements the above functionality. Make sure to include all necessary imports and provide test cases to verify the correctness of your solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, the initial value should be report."}, {"type": "function", "instruction": "Your code should not use any functions from the ['calculate_notification', 'sort_kms']."}, {"type": "interface", "instruction": "Your code should define an interface named transform_record."}, {"type": "class", "instruction": "Your code should define a class named UserTransaction."}, {"type": "file", "instruction": "Your code should import the following libraries ['stdlib', 'iostream']."}, {"type": "file", "instruction": "Your code should use the function transform_customer from the library vector."}, {"type": "combination", "instruction": "In your code, the class UserTransaction should have these methods ['generate_room', 'submit_view', 'get_cut']."}], "instruction_dependence": {"3": [0, 2], "8": [0, 7], "9": [0, 6]}, "question_id": 323}
{"question": "\nDesign a Java class `CitySelector` that provides a user interface component for selecting a city from a list of cities, each associated with a specific region. The component consists of two `ListBox` widgets: one for regions and one for cities. When a region is selected, the cities `ListBox` should be updated to show only cities from that region. Selecting a city should also update the region `ListBox` to reflect the city's region. The class should provide methods to initialize the list boxes with data, handle user interactions, and retrieve the selected city's ID and name.\n\nThe `City` class has the following structure:\n```java\npublic class City {\n    private int id;\n    private String name;\n    private String regionName;\n    private int regionId;\n\n    // Constructor, getters, and setters are omitted for brevity\n}\n```\n\nThe `CitySelector` class should use a `CityListBoxPresenter` to retrieve and find cities and regions. The `CityListBoxPresenter` has the following methods:\n- `getInstance()`: returns the singleton instance of the presenter.\n- `getData(CitySelector citySelector)`: retrieves all cities and regions.\n- `getCities()`: returns a collection of all cities.\n- `findCitiesByRegion(String regionName)`: returns a collection of cities for a given region.\n- `findCity(String cityName)`: returns a `City` object for a given city name.\n- `findCity(int cityId)`: returns a `City` object for a given city ID.\n\nAdditionally, provide a utility class `ListBoxUtils` with a static method `selectItemOnListBox(ListBox listBox, String itemText)` that selects an item in a `ListBox` by its display text.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should be a global variable."}, {"type": "variable", "instruction": "Variable shipment, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named insert_item."}, {"type": "class", "instruction": "Your code should define a class named DataEvent."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_cut."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.nio', 'java.io']."}, {"type": "file", "instruction": "Your code should use the function insert_item from the library java.time."}, {"type": "combination", "instruction": "In your code, the class DataEvent should have these methods ['retrieve_cut']."}, {"type": "combination", "instruction": "The function insert_item should take ['item', 'form'] as parameters."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "12": [0, 1, 11], "13": [0, 1, 9], "14": [0, 1, 8]}, "question_id": 324}
{"question": "\n\nDesign a Python module named `protocol_tester` that provides a testing framework for a hypothetical communication protocol called \"B42\". The module should be able to test different components of the protocol such as the handler for the protocol itself (`B42Handler`), the command handler (`CommandHandler`), and the error handler (`ErrorHandler`). Each of these components should have its own test module.\n\nThe `protocol_tester` module should be able to aggregate all the tests from the different test modules and run them together. The test suite should be dynamically loaded using the `unittest` framework's `load_tests` protocol, allowing for easy addition or removal of test modules.\n\nWrite a Python script that acts as an entry point to run all the tests in the `protocol_tester` module with increased verbosity. The script should be named `run_tests.py` and should be executable from the command line.\n\nEnsure that the script can be run from a different directory by appropriately managing the import paths. Include a sample test case for each handler to demonstrate the usage of the testing framework.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the False keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Variable log, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named display_account."}, {"type": "interface", "instruction": "Your code should define an interface named update_request."}, {"type": "class", "instruction": "Your code should define a class named HandleAccountUser."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_tys."}, {"type": "combination", "instruction": "You should define an interface named update_request that includes these methods ['delete_status', 'configure_form']."}, {"type": "combination", "instruction": "The function display_account should take ['punish'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_tys, which should contain these classes ['Event', 'GenerateDwaUser']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "9": [0, 1, 2, 8], "11": [0, 1, 2, 7], "12": [0, 1, 2, 6], "13": [0, 1, 2, 8, 10]}, "question_id": 325}
{"question": "\n\nDesign a task scheduler system that allows for the registration and execution of tasks at specific times. Each task should be able to be scheduled to run at multiple specific hours and minutes of the day. The system should also support retrying failed tasks, running tasks immediately upon system start, and ensuring that tasks do not overlap if they are already running.\n\nThe task scheduler should be able to handle the following requirements:\n\n1. Register tasks with a unique name, a list of hours and minutes when the task should run, a boolean indicating if the task should be retried on failure, a handler function that performs the task's operations, and a boolean indicating if the task should run on system start.\n2. Ensure that tasks are run at the scheduled times, without running the same task multiple times concurrently.\n3. Provide a mechanism to handle task reservation, execution, and completion, including logging of errors and task states.\n4. Implement a scheduler loop that checks every second for tasks that need to be run based on the current time.\n\nUse the given code snippet as a starting point to implement the task scheduler system. The code should include a `Job` struct (not provided in the snippet) that represents a task instance with fields such as `Id`, `Name`, `State`, `Retry`, `Node`, and `Timestamp`. The `Job` struct should have methods `Reserve`, `Failed`, and `Finished` to manage its lifecycle.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the range keyword."}, {"type": "interface", "instruction": "Your code should define an interface named modify_token."}, {"type": "class", "instruction": "Your code should define a class named CalculateTokenItem."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_bill."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv', 'math']."}, {"type": "file", "instruction": "Your code should use the function configure_data from the library strconv."}, {"type": "combination", "instruction": "Your code should define a class named CalculateTokenItem that implements the modify_token interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named generate_bill, which should contain these classes ['ManageToken', 'ConfigureEventData']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 3, 4], "9": [0, 1, 2, 4, 5]}, "question_id": 326}
{"question": "\n\nDesign a Java class named `SimpleBatchWriter` that implements the `BatchWriter` interface provided in the given code snippet. The `SimpleBatchWriter` class should simulate the behavior of a batch writer that writes mutations to a hypothetical database table. \n\nThe class should have the following specifications:\n\n1. A constructor that accepts two parameters: `int maxMemory` and `int maxThreads`. These parameters determine the maximum memory buffer size and the number of threads that can be used for writing mutations in the background, respectively.\n\n2. An internal buffer to store the mutations before they are written to the database. The buffer size should not exceed `maxMemory`.\n\n3. A method `simulateWrite` that simulates writing mutations to the database. This method should print the mutation details to the console, simulating a write operation.\n\n4. Implement the `addMutation` and `addMutations` methods to add mutations to the internal buffer. If the buffer reaches half of `maxMemory`, the buffered mutations should be written to the database using the `simulateWrite` method.\n\n5. Implement the `flush` method to write all buffered mutations to the database using the `simulateWrite` method.\n\n6. Implement the `close` method to flush all mutations and release resources.\n\n7. A custom exception class `MutationsRejectedException` that extends `Exception`.\n\n8. Test cases to verify the correctness of the `SimpleBatchWriter` implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure Stack."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Your code should define an enumeration named Language"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable notification, type should be boolean."}, {"type": "variable", "instruction": "Variable notification, the initial value should be bill."}, {"type": "function", "instruction": "Your code should include a function named handle_notification."}, {"type": "interface", "instruction": "Your code should define an interface named check_credit."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Token."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_order."}, {"type": "combination", "instruction": "In your code, the class Token should have these properties ['status', 'message', 'dwa']."}, {"type": "combination", "instruction": "The function handle_notification should take ['event', 'bill'] as parameters."}], "instruction_dependence": {"6": [0, 1, 4], "7": [0, 1, 4], "8": [0, 1, 4], "11": [0, 1, 10], "14": [0, 1, 12], "15": [0, 1, 9]}, "question_id": 327}
{"question": "\n\nDesign a C++ program that simulates the behavior of an orthographic camera in a simple ray tracing application. The camera should be able to generate rays for a given pixel coordinate on the image plane, considering the camera's position, direction, and orthographic width. The camera should also maintain an aspect ratio to ensure the image is not distorted.\n\nThe program should include the following components:\n- A `float2` structure to represent 2D vectors.\n- A `float3` structure to represent 3D vectors with operations such as normalization and cross product.\n- An `OrthographicCamera` class with methods to set the camera's position, direction, orthographic width, and aspect ratio.\n- A `Ray` class to represent rays with an origin and direction.\n- A method `MakeRay` within the `OrthographicCamera` class that takes a `float2` representing the UV coordinates on the image plane and returns a `Ray` object.\n\nThe UV coordinates range from (0,0) at the bottom-left corner of the image plane to (1,1) at the top-right corner.\n\nThe program should be able to demonstrate the functionality by creating an `OrthographicCamera` object, setting its properties, and then generating a ray for a given pixel coordinate.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable customer, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named remove_profile."}, {"type": "interface", "instruction": "Your code should define an interface named generate_form."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_form."}, {"type": "file", "instruction": "Your code should import the following libraries ['iostream', 'set']."}, {"type": "file", "instruction": "Your code should use the function remove_profile from the library stack."}, {"type": "file", "instruction": "Your code should not use the following libraries ['algorithm', 'stdlib', 'cmath']."}, {"type": "combination", "instruction": "You should define an interface named generate_form that includes these methods ['sort_message', 'manage_user', 'generate_customer']."}, {"type": "combination", "instruction": "The function remove_profile should return a map as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_form, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"3": [0, 1, 2, 14, 15], "4": [0, 1, 2, 14, 15], "9": [0, 1, 8, 14, 15], "11": [0, 1, 6, 14, 15], "12": [0, 1, 5, 14, 15], "13": [0, 1, 7, 14, 15]}, "question_id": 328}
{"question": "\n\nDesign a token management system using BoltDB, a key/value store database, to store and retrieve user authentication tokens. Each token has an expiration date, and only active (non-expired) tokens should be retrievable.\n\nImplement the following functionalities:\n\n1. `SaveToken(user, token, expires)`: Saves a new token for a user with an expiration date. The `user` is a unique identifier for the user, `token` is the authentication token, and `expires` is the expiration date in RFC3339 format with millisecond precision.\n\n2. `GetActiveToken(user)`: Retrieves the active token for a user. If the token is expired or does not exist, it should return an error indicating that no active token is found.\n\nEnsure that the code handles concurrency and potential errors appropriately. Provide test cases to verify the correctness of the implemented functionalities.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, type should be map."}, {"type": "function", "instruction": "Your code should include a function named manage_msg."}, {"type": "interface", "instruction": "Your code should define an interface named filter_order."}, {"type": "class", "instruction": "Your code should define a class named SetNotificationCut."}, {"type": "file", "instruction": "Your code should not use the following libraries ['net']."}, {"type": "combination", "instruction": "You should initialize an object named item as an instance of the SetNotificationCut class using ['shipment', 'order', 'bill'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named filter_order that includes these methods ['retrieve_tys', 'configure_transaction']."}], "instruction_dependence": {"3": [0, 2], "8": [0, 6], "9": [0, 5]}, "question_id": 329}
{"question": "The iris dataset is a dataset about iris flower classification, which records 4 numerical features for each type of iris: sepal_length, sepal_width, petal_length, petal_width.\n\nThere is a csv file that stores this dataset, an example is as follows:\n\nsepal_length,sepal_width,petal_length,petal_width,species\n5.1,3.5,1.4,0.2,setosa\n4.9,3.0,1.4,0.2,setosa\n4.7,3.2,1.3,0.2,setosa\n4.6,3.1,1.5,0.2,setosa\n5.0,3.6,1.4,0.2,setosa\n\nImplement a python function corr_sepal_petal(csv_str), which takes the content string of the csv file csv_str as input, calculates the Pearson correlation coefficient of sepal_length and petal_length, as well as sepal_width and petal_width, and returns the 2 correlation coefficients.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named modify_message."}, {"type": "interface", "instruction": "Your code should define an interface named transform_profile."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named HandleMsg."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['matplotlib']."}, {"type": "combination", "instruction": "You should define an interface named transform_profile that includes these methods ['create_tys', 'search_notification', 'display_room']."}, {"type": "combination", "instruction": "Your code should define a class named HandleMsg that implements the transform_profile interface."}, {"type": "combination", "instruction": "The function modify_message should return a bool as its result."}], "instruction_dependence": {"8": [0, 1, 7], "10": [0, 1, 9], "12": [0, 1, 7], "13": [0, 1, 7, 9], "14": [0, 1, 6]}, "question_id": 330}
{"question": "Reimplement the following code to optimize its performance.\n```python\ndef arrange_coins(n: int) -> int:\n    '''\n    Calculate the number of complete rows of a staircase built with n coins.\n\n    Args:\n    n (int): The number of coins to build the staircase.\n\n    Returns:\n    int: The number of complete rows of the staircase.\n    Example:\n    assert arrange_coins(5) == 2\n    '''\n\n    i = 1\n    while n >= 0:\n        n -= i\n        i += 1\n    return i - 2\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the False keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "variable", "instruction": "Variable notification should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_event."}, {"type": "function", "instruction": "Your code should not use any functions from the ['generate_report', 'sort_product', 'create_inventory']."}, {"type": "interface", "instruction": "Your code should define an interface named filter_log."}, {"type": "class", "instruction": "Your code should define a class named DisplayNotification."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_info."}, {"type": "combination", "instruction": "You should initialize an object named report as an instance of the DisplayNotification class using ['message', 'item'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named filter_log that includes these methods ['add_dwa', 'add_item', 'create_log']."}, {"type": "combination", "instruction": "In your code, the class DisplayNotification should have these methods ['add_dwa', 'add_item', 'create_log']."}, {"type": "combination", "instruction": "The function execute_event should take ['user', 'form', 'cut'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_info, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"5": [0, 1, 4, 17], "6": [0, 1, 4, 17], "12": [0, 1, 10, 17], "13": [0, 1, 9, 17], "14": [0, 1, 10, 17], "15": [0, 1, 7, 17], "16": [0, 1, 11, 17]}, "question_id": 331}
{"question": "\n\nWrite a Python script that automates the process of downloading genomic annotation files in GenBank format for a list of prokaryotic organisms with plasmids. The script should read a tab-separated values (TSV) file containing information about the organisms, including an FTP path to the GenBank files. The script should only download files that do not already exist in a specified local directory to avoid redundancy.\n\nThe script should handle exceptions that may occur during the download process, such as URLError, and attempt to download the file again before skipping to the next one. Additionally, the script should provide a progress bar to indicate the download progress for each file.\n\nThe script should follow these guidelines:\n- Import all necessary packages at the beginning of the code snippet.\n- Define a function `download_genbank_annotations` that takes two arguments: the path to the TSV file with organism information and the path to the local directory where GenBank files should be saved.\n- Use the `tqdm` library to display a progress bar for the downloads.\n- Include docstrings and comments to describe the functionality of the script.\n- Provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, type should be dict."}, {"type": "variable", "instruction": "Variable cut, should be a global variable."}, {"type": "variable", "instruction": "Variable cut, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named configure_bill."}, {"type": "class", "instruction": "Your code should define a class named Token."}, {"type": "file", "instruction": "Your code should be organized in a package named get_bill."}, {"type": "combination", "instruction": "The function configure_bill should take ['item', 'form', 'log'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_bill, which should contain these classes ['RemoveToken', 'Product']."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"7": [0, 1, 6, 15], "8": [0, 1, 6, 15], "9": [0, 1, 6, 15], "13": [0, 1, 10, 15], "14": [0, 1, 11, 12, 15]}, "question_id": 332}
{"question": "Given question below:\n------------\nPlease write a Python program with the function: \nMaximum Subarray Sum after inverting at most two elements. \n\nGiven an array arr[] of integer elements, the task is to find the maximum possible sub-array sum after changing the signs of at most two elements. \n\nThe function signature is `maxSum(a, n)`\n------------\n\nWe try to solve it with code:\n```python\ndef maxSum(a, n):\n    if n == 1:\n        return a[0]\n\n    max_ending_here = 0\n    max_so_far = float('-inf')\n\n    max_flip_one = float('-inf')\n    max_flip_two = float('-inf')\n\n    for i in range(n):\n        max_ending_here += a[i]\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n        max_flip_one = max(max_flip_one + a[i], max_ending_here - 2 * a[i])\n        max_flip_two = max(max_flip_two + a[i], max_flip_one - 2 * a[i])\n\n        max_so_far = max(max_so_far, max_flip_one, max_flip_two)\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n```\n\nBut some error occurs during execution:\n------------\nTraceback (most recent call last):\n  File \"/tmp/tmpft6rdmkz/tmpfqgbgpt8.py\", line 34, in <module>\n    assert maxSum([-1, 2, -3, 4, -5], 5) == 14\nAssertionError\n\n------------\n\nPlease try to analyze the cause of the error and give the full code after the modification (with markdown code block format)", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use data structure set."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_bill', 'delete_transaction', 'handle_view', 'manage_profile']."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 333}
{"question": "\n\nWrite a Go program that defines a function `insertSlice` which inserts a slice of strings into another slice of strings at a specified index. The function should handle cases where the index is out of the bounds of the destination slice by appending the insertion slice to the end.\n\nThe function signature should be:\n```go\nfunc insertSlice(slice, insertion []string, index int) []string\n```\n\nWhere:\n- `slice` is the original slice of strings.\n- `insertion` is the slice of strings to be inserted.\n- `index` is the position in `slice` where `insertion` should be inserted.\n\nIf `index` is less than 0, the `insertion` slice should be prepended to `slice`. If `index` is greater than the length of `slice`, the `insertion` slice should be appended to `slice`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the else keyword."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should be a global variable."}, {"type": "variable", "instruction": "Variable order should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_kms."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named insert_customer."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'bytes']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['sort']."}, {"type": "combination", "instruction": "You should define an interface named insert_customer that includes these methods ['process_event']."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_punish, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7], "13": [0, 1, 9], "14": [0, 1, 10]}, "question_id": 334}
{"question": "\n\nDesign a Java program that manages a simple movie database. The program should provide functionality to connect to a MySQL database, add a new movie record, retrieve a movie by its ID, and list all movies in the database. Each movie record should contain an ID, title, genre, and year of release.\n\nThe program should follow the Object-Oriented Programming principles and include the following components:\n\n1. A `Movie` class that encapsulates the properties of a movie (ID, title, genre, year).\n2. A `MovieDAO` class that handles database operations related to movies (add, find by ID, list all).\n3. A `ConnectionFactory` class that manages the database connection, as provided in the given code snippet.\n4. A `Main` class that demonstrates the functionality of the program with test cases.\n\nEnsure that you handle any potential exceptions that may occur during database operations and provide meaningful error messages to the user.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the interface keyword."}, {"type": "structural control", "instruction": "Your code should use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named execute_transaction."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named RemoveCustomerRoom."}, {"type": "combination", "instruction": "In your code, the class RemoveCustomerRoom should have these methods ['transform_tys', 'configure_record', 'sort_event']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10]}, "question_id": 335}
{"question": "\n\nDesign a simple GUI application using PyQt5 that simulates a basic trading window. The application should have the following features:\n\n1. A label that displays the text \"Trading Window\".\n2. Two buttons: \"Buy\" and \"Sell\".\n3. When the \"Buy\" button is clicked, a message box should appear with the text \"Buy order executed\".\n4. When the \"Sell\" button is clicked, a message box should appear with the text \"Sell order executed\".\n\nThe application should be resizable and have a title \"Basic Trading Simulator\". Use the given code snippet as a starting point for the application's main loop.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "variable", "instruction": "Your code should define an enumeration named Direction"}, {"type": "class", "instruction": "Your code should define a class named ExecuteInfoOrder."}, {"type": "file", "instruction": "Your code should be organized in a package named check_log."}, {"type": "file", "instruction": "Your code should import the following libraries ['Django', 'Flask']."}, {"type": "file", "instruction": "Your code should use the function analyze_data from the library matplotlib."}, {"type": "file", "instruction": "Your code should not use the following libraries ['requests', 'Flask']."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_log, which should contain these classes ['AnalyzeBill', 'ProcessKms']."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_log, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 3, 4], "9": [0, 1, 4]}, "question_id": 336}
{"question": "\n\nWrite a Python function `extract_iris_data` that takes a list of comma-separated strings representing rows of the Iris dataset and returns a list of lists, where each sublist contains the sepal length, sepal width, petal length, petal width as floats, and the species as a string.\n\nThe function should follow these specifications:\n\n1. The input is a list of strings, where each string is a comma-separated row of the Iris dataset.\n2. The first row of the input list contains the headers and should be ignored.\n3. The function should parse each of the remaining rows and convert the numerical values to floats.\n4. The species name should remain a string.\n5. The function should return a list of lists, with each sublist containing the parsed data from each row.\n6. Do not use any libraries or built-in functions for parsing the data (e.g., `csv.reader` or `pandas`). The goal is to practice string manipulation and type conversion.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named modify_credit."}, {"type": "interface", "instruction": "Your code should define an interface named submit_inventory."}, {"type": "class", "instruction": "Your code should define a class named Log."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_profile."}, {"type": "combination", "instruction": "Your code should define a class named Log that implements the submit_inventory interface."}, {"type": "combination", "instruction": "In your code, the class Log should have these methods ['manage_bill', 'check_log', 'add_data']."}, {"type": "combination", "instruction": "The function modify_credit should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_profile, which should contain these classes ['ProductEvent', 'ProfileRequest']."}], "instruction_dependence": {"5": [0, 4], "10": [0, 7, 8], "11": [0, 8], "12": [0, 6], "13": [0, 8, 9]}, "question_id": 337}
{"question": " Random Number Distributions Simulator\n\nIn this problem, you are required to implement a Random Number Distributions Simulator that can generate random numbers according to different statistical distributions. The simulator should support the following distributions:\n\n1. Exponential Distribution\n2. Poisson Distribution\n3. Normal Distribution\n4. Bernoulli Distribution\n5. Uniform Distribution\n6. Triangular Distribution\n\nEach distribution function should take parameters specific to the distribution and return a random number generated according to that distribution. The parameters for each distribution are as follows:\n\n- Exponential Distribution: `lambda` (rate parameter)\n- Poisson Distribution: `lambda` (rate parameter)\n- Normal Distribution: `mean` (mean), `stdev` (standard deviation)\n- Bernoulli Distribution: `prob` (probability of success)\n- Uniform Distribution: `a` (minimum), `b` (maximum)\n- Triangular Distribution: `a` (minimum), `b` (mode), `c` (maximum)\n\nThe simulator should use the C++ standard library's `<random>` for generating random numbers and should not rely on `rand()` or `srand()` for randomness, as these are considered outdated and less reliable.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the default keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named CalculateShipmentPunish."}, {"type": "file", "instruction": "Your code should import the following libraries ['queue']."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the CalculateShipmentPunish class using ['room', 'data', 'request'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CalculateShipmentPunish should have these properties ['item', 'kms']."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 7], "10": [0, 1, 7]}, "question_id": 338}
{"question": "Implement one step update of gradient descent with momentum in Python. The function is of the form `one_step_update(previous_point, previous_velocity, gradient, learning_rate, momentum)`.\nReturns of the function is the updated point, and the velocity used to update, as a tuple", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, type should be dict."}, {"type": "variable", "instruction": "Variable product, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named modify_item."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named generate_shipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['requests']."}, {"type": "combination", "instruction": "You should define an interface named generate_shipment that includes these methods ['execute_inventory', 'insert_item', 'update_kms']."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7], "11": [0, 1, 9]}, "question_id": 339}
{"question": "\n\nDesign a RESTful API endpoint for a service that provides health check status for various services in a distributed system. The endpoint should allow users to register new services, update existing services, and retrieve the health status of all registered services. Each service should have a unique identifier and a health status that can be either \"healthy\" or \"unhealthy\".\n\nThe API should have the following routes:\n- `POST /services`: Register a new service with a unique identifier.\n- `PUT /services/:id`: Update the health status of a service by its identifier.\n- `GET /services`: Retrieve the health status of all registered services.\n\nThe health status of a service should be stored in memory for the purpose of this exercise.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named submit_order."}, {"type": "class", "instruction": "Your code should define a class named TokenProfile."}, {"type": "file", "instruction": "Your code should import the following libraries ['time', 'io']."}, {"type": "file", "instruction": "Your code should use the function submit_order from the library bytes."}, {"type": "combination", "instruction": "The function submit_order should take ['token', 'kms'] as parameters."}, {"type": "combination", "instruction": "The function submit_order should return a map as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8, 12], "10": [0, 1, 2, 3, 6, 12], "11": [0, 1, 2, 3, 6, 12]}, "question_id": 340}
{"question": "Implement a `SimpleBitSet` in c++, which is similar to a `std::bitset`, but it provides additional features, such as its size is not specified by a template parameter, but by a parameter. In addition, it adds extra optimization for small bitsets and is friendly to cache line：\n1. No other third-party libraries can be referenced for implementation, but types provided by `std` can be used.\n2. Provide a constructor `SimpleBitSet(size_t bits_num = 0)` to configure the initial size of `SimpleBitSet`.\n3. Provide a move copy function and move assignment function, and prohibit copy constructors and copy assignment functions.\n4. Implement the interface `size_t Size()`, which indicates how many bits the `SimpleBitSet` has.\n5. Implement the interface `void Set(size_t pos, bool val)`, which sets the `bit` at the specified `pos` of the `SimpleBitSet` to `val`.\n6. Implement the interface `void Reset(bool val = false)`, which sets all values in `SimpleBitSet` to `val`.\n7. Overload the operator `[]` for easy access to specific bit position.\n8. Implement the interface `void MergeOr(const SimpleBitSet &bs, size_t offset)`, which performs the `Or` operation on the `SimpleBitSet` from the starting position of `offset` and `bs`, and the number of `bit` operations is the same as `bs`'s `Size()`.\n9. Implement the interface `void MergeAnd(const SimpleBitSet &bs, size_t offset)`, which performs the `And` operation on the `SimpleBitSet` from the starting position of `offset` and `bs`, and the number of `bit` operations is the same as `bs`'s `Size()`.\n10. Implement the interface `void SliceTo(SimpleBitSet *bs, size_t offset)`, which copies the content of the `SimpleBitSet` from the starting position of `offset` to `bs`, and the number of `bit` operations is the same as `bs`'s `Size()`.\n11. Implement the interface `size_t Count() const`, which represents how many positions are `true` in `SimpleBitSet`.\n12. Implement the interface `size_t CountUntil(size_t until_cursor) const`, which shows how many `true` positions are in the `SimpleBitSet` within the index range of `[0, until_cursor)`.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure vector."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable cut, the initial value should be user."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "file", "instruction": "Your code should not use the following libraries ['algorithm']."}], "instruction_dependence": {"7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "9": [0, 1, 2, 5]}, "question_id": 341}
{"question": "\n\nDesign a class `DrawableAirplane` that extends the abstract class `DrawableObject`. The `DrawableAirplane` class represents an airplane that moves across a graphical frame and occasionally drops parachutists. The airplane should have the following behavior:\n\n1. The airplane moves from right to left across the frame.\n2. The airplane's vertical position is fixed at twice its height.\n3. When the airplane moves off the left edge of the frame, it should reappear on the right edge.\n4. As the airplane moves, it should randomly drop parachutists. The chance of dropping a parachutist is determined by the airplane's current x-coordinate. If the x-coordinate is between the airplane's width and the frame width minus the airplane's width, and if the x-coordinate modulo a random number between 1 and 5 times 70 equals 0, a parachutist is dropped.\n5. The `paint` method should return `true` if the painting operation is successful.\n\nThe `DrawableObject` class provides the following fields that `DrawableAirplane` can use:\n- `currentX`: The current x-coordinate of the airplane.\n- `currentY`: The current y-coordinate of the airplane.\n- `objectWidth`: The width of the airplane.\n- `objectHeight`: The height of the airplane.\n- `objectSpeed`: The speed at which the airplane moves.\n- `image`: The image representation of the airplane.\n\nThe `DrawableObjectsManager` class provides a static method `dropParachutist(int x, int y)` that should be called to drop a parachutist at the specified x and y coordinates.\n\nImplement the `DrawableAirplane` class according to the above specifications. Also, provide a simple test case to demonstrate the functionality of the `DrawableAirplane` class.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the default keyword."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "function", "instruction": "Your code should include a function named analyze_info."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_inventory', 'search_notification', 'handle_room', 'configure_product']."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util']."}], "instruction_dependence": {"5": [0, 1, 4]}, "question_id": 342}
{"question": "\n\nDesign a simple web application that provides basic arithmetic operations. The application should have the following functionalities:\n\n1. A homepage that welcomes the user to the arithmetic service.\n2. An about page that provides information about the service.\n3. An addition service that takes two integers as query parameters and returns their sum.\n4. A division service that takes two float values as query parameters and returns the result of the division. It should handle division by zero as an error.\n\nThe application should be structured using the Repository pattern as shown in the given code snippet. The `handlers` package should contain the HTTP handlers for the application, and the `render` package should be responsible for rendering HTML templates.\n\nThe `divideValues` and `addValue` functions should be uncommented and used in the corresponding HTTP handlers for division and addition operations.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure interface."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named process_bill."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_kms."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named add_profile."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv', 'time']."}, {"type": "file", "instruction": "Your code should use the function process_bill from the library sort."}, {"type": "file", "instruction": "Your code should not use the following libraries ['net', 'strconv', 'time']."}, {"type": "combination", "instruction": "The function process_bill should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_profile, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "10": [0, 1, 9], "13": [0, 1, 12], "15": [0, 1, 7], "16": [0, 1, 11]}, "question_id": 343}
{"question": "\n\nDesign a Java program that simulates a book event notification system. The system should be able to handle different types of book events and notify subscribers accordingly. The types of events can include `BookCreated`, `BookUpdated`, and `BookDeleted`. Each event type should carry relevant information about the book.\n\nYour task is to create an interface `BookEventNotifier` that defines a method `notifyOf(BookEvent event)`. Then, implement a concrete class `BookEventNotifierImpl` that sends notifications to subscribers. For the purpose of this exercise, you can simulate sending notifications by printing messages to the console.\n\nAdditionally, create a stub implementation `BookEventNotifierStub` that overrides the `notifyOf` method but does not perform any action. This stub can be used for testing purposes where actual notification sending is not required.\n\nProvide a `BookEvent` class that acts as a base class for different book event types. Then, extend this class to create specific event classes for `BookCreated`, `BookUpdated`, and `BookDeleted` events. Each specific event class should contain relevant book information such as book ID, title, and additional details depending on the event type.\n\nLastly, write a main method that demonstrates the use of the `BookEventNotifierImpl` and `BookEventNotifierStub` with different book events.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, the initial value should be form."}, {"type": "function", "instruction": "Your code should include a function named set_info."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named get_form."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_transaction."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql', 'java.util']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.nio']."}, {"type": "combination", "instruction": "You should define an interface named get_form that includes these methods ['check_bill', 'get_status', 'delete_user']."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "11": [0, 1, 7]}, "question_id": 344}
{"question": "Please define a class named `PerformanceSummary`, which contains a method called `displayMetricInfo`. This method accepts a `StringBuilder` object and an array of objects implementing the `Metric` interface. You need to add corresponding information to the `StringBuilder` based on different metric types (count, measurement, sample rate). Make sure your implementation can handle different types of metrics, and is neatly formatted and easy to read.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Locale;\ninterface Metric {}\ninterface Counting extends Metric {\n    long getCount();\n}\ninterface Gauge<T> extends Metric {\n    T getValue();\n}\ninterface Sampling extends Metric {\n    double getSampleRate();\n}\nclass Counter implements Counting {\n    private long count;\n    public Counter(long count) {}\n    public long getCount() {}\n}\nclass GaugeDouble implements Gauge<Double> {\n    private double value;\n    public GaugeDouble(double value) {}\n    public Double getValue() {}\n}\nclass Sample implements Sampling {\n    private double sampleRate;\n    public Sample(double sampleRate) {}\n    public double getSampleRate() {}\n}\npublic class PerformanceSummary {\n    public static void displayMetricInfo(StringBuilder sb, Metric[] metrics) {}\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, type should be String."}, {"type": "variable", "instruction": "Variable inventory, should be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_notification', 'set_profile', 'process_item', 'modify_dwa']."}, {"type": "class", "instruction": "Your code should define a class named AddTys."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "You should initialize an object named event as an instance of the AddTys class using ['token', 'profile'] for initialization."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"8": [0, 1, 2, 7, 14], "9": [0, 1, 2, 7, 14], "12": [0, 1, 2, 11, 14], "13": [0, 1, 2, 11, 14]}, "question_id": 345}
{"question": "\n\nDesign a Zero Trust Score-based Network Access Control Policy Decision Point (PDP) using an Additive Algorithm.\n\nIn a Zero Trust network, every access request is treated as if it originates from an untrusted network. The PDP must evaluate the trustworthiness of the request based on various factors, including the state of the system, user behavior, device integrity, and service sensitivity. The Additive Algorithm is responsible for calculating trust scores and risk scores to make an access decision.\n\nThe trust score is a composite score derived from the user, device, and channel trust scores. The risk score is based on the sensitivity of the data being accessed and the current threat level of the system and network.\n\nImplement the `AdditiveAlgorithm` class with the following methods:\n\n- `Run() (bool, []string, error)`: Executes the algorithm to determine if access should be granted or denied. It returns a boolean indicating the decision, a slice of strings containing logs for the decision process, and an error if one occurred.\n- `EnrichData() error`: Gathers and enriches data required for the algorithm from various sources.\n\nThe `AdditiveAlgorithm` class should use the following types to represent the state of the system, user, device, and service:\n\n- `pipSystemStateT`\n- `pipUserT`\n- `pipDeviceT`\n- `pipServiceT`\n\nThe algorithm should consider both static and dynamic thresholds for risk scores. The static threshold is a predefined value, while the dynamic threshold is calculated based on the current state of the system and network.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should use the switch keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['calculate_msg', 'transform_record']."}, {"type": "interface", "instruction": "Your code should define an interface named create_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named User."}, {"type": "file", "instruction": "Your code should not use the following libraries ['strconv']."}, {"type": "combination", "instruction": "In your code, the class User should have these properties ['request']."}, {"type": "combination", "instruction": "In your code, the class User should have these methods ['check_message', 'insert_dwa', 'update_order']."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 15], "10": [0, 1, 2, 9, 15], "13": [0, 1, 2, 11, 15], "14": [0, 1, 2, 11, 15]}, "question_id": 346}
{"question": "\n\nDesign a Go program that simulates a simple employee management system for a truck monitoring backend service. The system should be able to add new employees, retrieve an employee's information by their ID, and list all employees. Each employee has an ID, a name, and a role.\n\nThe `EmployeeDao` interface has already been defined in the `dao` package and includes the following methods:\n\n- `AddEmployee(employee Employee) error`\n- `GetEmployeeByID(id string) (Employee, error)`\n- `ListEmployees() ([]Employee, error)`\n\nThe `Employee` struct is also defined in the `dao` package and looks like this:\n\n```go\npackage dao\n\ntype Employee struct {\n\tID   string\n\tName string\n\tRole string\n}\n```\n\nYou need to implement the `controller` struct methods that interact with the `EmployeeDao` to perform the required operations. The `controller` struct should have the following methods:\n\n- `AddNewEmployee(employee Employee) error`\n- `GetEmployeeInfo(id string) (Employee, error)`\n- `GetAllEmployees() ([]Employee, error)`\n\nWrite a Go program that includes the `controller` struct with the methods mentioned above. Ensure that you import the necessary packages at the beginning of the code snippet. Provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable event, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named InfoRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_profile."}], "instruction_dependence": {"5": [0, 1, 3]}, "question_id": 347}
{"question": "\n\nDesign a simple racing car game data access object (DAO) that interacts with a hypothetical database to store and retrieve game-related data. The DAO should provide the ability to insert a new game record and count the total number of games played. Each game record is represented by a `GameEntity` object which contains details about the game such as the game ID, the name of the winner, and the total time taken to finish the race.\n\nImplement the `GameDao` interface with the following methods:\n- `insert(GameEntity gameEntity)`: This method should accept a `GameEntity` object and insert it into the database. It should return the ID of the newly inserted game record.\n- `countGames()`: This method should return the total number of games stored in the database.\n\nFor the purpose of this exercise, you do not need to implement an actual database connection. Instead, simulate the database operations using in-memory data structures (e.g., a list).\n\nProvide a concrete implementation of the `GameDao` interface in the `InMemoryGameDao` class. Also, include a simple `GameEntity` class with appropriate attributes and methods.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the do keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named Inventory."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_record."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_record, which should contain these classes ['ConfigureOrder', 'EventToken', 'TokenBill']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "9": [0, 1, 2, 6, 8]}, "question_id": 348}
{"question": "\n\nWrite a Go program that defines a function `calculate` which performs addition, subtraction, multiplication, and division on two integer inputs. The function should return all four results. The division result should be of type float64 to accommodate non-integer division. If a division by zero is attempted, the function should return an error for the division result.\n\nThe program should also include a `main` function that demonstrates the use of the `calculate` function with test cases, including a case that handles division by zero. The results should be printed to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "class", "instruction": "Your code should define a class named FilterKms."}, {"type": "file", "instruction": "Your code should be organized in a package named set_profile."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os']."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the FilterKms class using ['customer'] for initialization."}, {"type": "combination", "instruction": "In your code, the class FilterKms should have these properties ['message', 'report']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_profile, which should contain these classes ['ConfigureRequestEvent', 'SearchDwaMessage']."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 9], "7": [0, 1, 2, 3, 9], "8": [0, 1, 2, 3, 4, 9]}, "question_id": 349}
{"question": "\n\nDesign a function `Read` that can read data from a given URL or file path. The function should be able to handle different types of errors, such as invalid URLs, unexpected EOFs when reading from a URL, and file system errors when reading from a file path. The function should return the read data as a byte slice and an error if any occurred during the reading process.\n\nThe function should be tested with a series of test cases that cover the following scenarios:\n\n1. Reading from an empty URL, which should result in a URL error.\n2. Reading from a URL that returns an \"unexpected EOF\" error.\n3. Successfully reading from a URL that returns a valid JSON response.\n4. Successfully reading from a local file.\n5. Attempting to read from an empty file path, which should result in a file system error.\n\nThe test cases should be written using the Go testing framework and the `require` package from `github.com/stretchr/testify/require` to assert the conditions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the goto keyword."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be int."}, {"type": "function", "instruction": "Your code should include a function named transform_product."}, {"type": "function", "instruction": "Your code should not use any functions from the ['transform_view', 'configure_msg', 'delete_report']."}, {"type": "class", "instruction": "Your code should define a class named Report."}, {"type": "combination", "instruction": "You should initialize an object named info as an instance of the Report class using ['request', 'info'] for initialization."}, {"type": "combination", "instruction": "In your code, the class Report should have these methods ['delete_shipment', 'remove_room', 'filter_token']."}, {"type": "combination", "instruction": "The function transform_product should take ['room', 'form'] as parameters."}], "instruction_dependence": {"3": [0, 1, 2], "7": [0, 1, 6], "8": [0, 1, 6], "9": [0, 1, 4]}, "question_id": 350}
{"question": "\n\nCreate a simple HTTP server in Go that serves a JSON response with a greeting message and the current server time. The server should listen on a configurable port and respond to requests at the path `/greet`. The JSON response should have the following structure:\n\n```json\n{\n  \"message\": \"Hello, World!\",\n  \"time\": \"2023-04-01T15:04:05Z\"\n}\n```\n\nThe `time` field should be the current time in UTC formatted as an ISO 8601 string.\n\nAdditionally, implement a middleware that logs the incoming requests' method, URL path, and the response status code.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure slice."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named delete_request."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named check_view."}, {"type": "class", "instruction": "Your code should define a class named ProcessStatusForm."}, {"type": "file", "instruction": "Your code should be organized in a package named add_token."}, {"type": "combination", "instruction": "You should initialize an object named kms as an instance of the ProcessStatusForm class using ['account', 'profile'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named check_view that includes these methods ['filter_credit', 'insert_shipment', 'create_order']."}, {"type": "combination", "instruction": "In your code, the class ProcessStatusForm should have these methods ['filter_credit', 'insert_shipment', 'create_order']."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"3": [0, 2, 12], "5": [0, 4, 12], "9": [0, 7, 12], "10": [0, 6, 12], "11": [0, 7, 12]}, "question_id": 351}
{"question": "\n\nDesign a class `DirArchive` that manages a directory-based archive system. The class should provide functionalities to create directories, write data to files, read data from files, and list the contents of the archive. The archive should be able to handle both reading and writing operations, and it should be able to work on both Windows and Unix-like systems.\n\nThe `DirArchive` class should have the following public interface:\n\n- `DirArchive(const string &filename, OpenMode mode)`: Constructor that initializes the archive at the specified path with the given mode (`Read` or `Write`). If the mode is `Write`, it should ensure that the base directory exists or create it if it does not.\n- `~DirArchive()`: Destructor that performs necessary cleanup.\n- `void writePtr(const string &path, const void *contents, size_t byteLength)`: Writes the given data to a file at the specified path within the archive. It should handle the creation of any necessary subdirectories.\n- `SharedArray<char> read(const string &path)`: Reads the contents of the file at the specified path and returns it as a `SharedArray<char>`.\n- `unsigned int size()`: Returns the number of files in the archive.\n- `string getItemName(unsigned int index)`: Returns the name of the file at the given index in the archive.\n\nThe `DirArchive` class should also have private helper methods to manage directories and files, such as `createDirectory` and `searchDirectory`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable log, the initial value should be notification."}, {"type": "variable", "instruction": "Variable log should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_order."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named configure_dwa."}, {"type": "class", "instruction": "Your code should define a class named User."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['iostream', 'vector']."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the User class using ['bill', 'tys', 'request'] for initialization."}, {"type": "combination", "instruction": "The function filter_order should take ['customer', 'form'] as parameters."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "10": [0, 1, 2, 9], "13": [0, 1, 2, 12], "15": [0, 1, 2, 12], "16": [0, 1, 2, 9]}, "question_id": 352}
{"question": "\n\nCreate a Python function `generate_urlpatterns` that dynamically generates a list of URL patterns for a Django web application based on a given list of page names and corresponding view functions. The function should follow these specifications:\n\n1. The function should take two arguments:\n    - `pages`: A list of tuples, where each tuple contains a page name (string) and a view function name (string).\n    - `app_name`: A string representing the name of the Django app.\n\n2. The function should return a list of `url()` instances, where each URL pattern corresponds to one of the given pages. The URL pattern should use a regular expression that matches the page name and routes to the specified view function.\n\n3. The URL patterns should be named using the page name.\n\n4. If the page name is 'admin', it should route to `admin.site.urls` instead of a view function.\n\n5. If the page name is '404' or '500', the corresponding view functions should be assigned to `handler404` and `handler500` respectively, instead of being included in the `urlpatterns` list.\n\n6. Assume that the `url()` function, `admin.site.urls`, and the view functions are already imported and available in the scope where `generate_urlpatterns` is defined.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure collections."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable record, type should be str."}, {"type": "function", "instruction": "Your code should include a function named process_tys."}, {"type": "interface", "instruction": "Your code should define an interface named delete_event."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named RoomTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_log."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy', 'seaborn']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['scikit-learn']."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_log, which should contain these classes ['InfoItem']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10], "16": [0, 1, 2, 12, 13]}, "question_id": 353}
{"question": "\n\nDesign a RESTful API endpoint for a banking application that allows authenticated users to perform money transfers between their accounts. The endpoint should validate that the user performing the transfer owns the source account, that both the source and destination accounts exist, and that they both operate in the same currency. The transfer should only be allowed if these conditions are met.\n\nThe endpoint should be a POST request to `/transfers` and should accept a JSON payload with the following fields:\n\n- `from_account_id`: The ID of the account from which money will be transferred. It must be a positive integer.\n- `to_account_id`: The ID of the account to which money will be transferred. It must be a positive integer.\n- `amount`: The amount of money to transfer. It must be a positive integer.\n- `currency`: The currency in which the transfer should be made. It must be a valid currency code.\n\nThe response should include the details of the completed transfer if successful, or an appropriate error message if the transfer cannot be completed.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure channel."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "Variable message, type should be struct."}, {"type": "variable", "instruction": "Variable message, the initial value should be customer."}, {"type": "function", "instruction": "Your code should include a function named submit_customer."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named add_status."}, {"type": "class", "instruction": "Your code should define a class named GenerateMsgToken."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named process_token."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv', 'math']."}, {"type": "combination", "instruction": "In your code, the class GenerateMsgToken should have these properties ['room']."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_token, which should contain these classes ['TransformMessageAccount']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7], "9": [0, 1, 2, 3, 4, 7], "11": [0, 1, 2, 3, 4, 10], "14": [0, 1, 2, 3, 4, 13], "17": [0, 1, 2, 3, 4, 13], "18": [0, 1, 2, 3, 4, 13, 15]}, "question_id": 354}
{"question": "\nDesign a Go application that serves as a GraphQL API for managing customer data. The application should provide the following functionalities:\n\n1. Initialize environment variables from a `.env` file if it exists.\n2. Set up a logger using the `zap` library for structured logging.\n3. Load and parse a YAML configuration file, expanding any environment variables within it.\n4. Connect to a PostgreSQL database using the `ent` ORM framework.\n5. Automatically migrate the database schema on startup.\n6. Set up a Gin web server with middleware for authentication, CORS, request context, and logging.\n7. Serve a GraphQL API using `99designs/gqlgen` with a custom resolver that interacts with the `ent` client.\n8. Provide a GraphQL Playground interface for API exploration and testing.\n9. Run the server on a specified port and handle any errors that occur during startup.\n\nThe application should be robust, handle errors gracefully, and log important events.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Your code should define an enumeration named Role"}, {"type": "variable", "instruction": "Variable log, type should be bool."}, {"type": "variable", "instruction": "Variable log should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named search_tys."}, {"type": "interface", "instruction": "Your code should define an interface named search_status."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named DeleteInfo."}, {"type": "file", "instruction": "Your code should be organized in a package named update_bill."}, {"type": "combination", "instruction": "In your code, the class DeleteInfo should have these properties ['bill']."}, {"type": "combination", "instruction": "The function search_tys should return a slice as its result."}], "instruction_dependence": {"4": [0, 1, 2], "5": [0, 1, 2], "8": [0, 1, 7], "11": [0, 1, 9], "12": [0, 1, 6]}, "question_id": 355}
{"question": "\n\nCreate a Java program that manages comments for events, where each comment is associated with an event and an author. The program should be able to add new comments, retrieve comments for a specific event, and display the details of a comment including whether the author is the organizer of the event.\n\nThe `CommentDto` class provided above is used to represent a comment. Each comment has an ID, text content, an associated event, an author, a timestamp for when it was created, a flag indicating if the author is the organizer of the event, and a display name for the author.\n\nYour task is to implement the following functionalities:\n\n1. A method `addComment(CommentDto comment)` that adds a new comment to the system.\n2. A method `List<CommentDto> getCommentsByEventId(Long eventId)` that retrieves all comments for a given event.\n3. A method `displayCommentDetails(Long commentId)` that prints the details of a comment with the given ID.\n\nMake sure to handle the case where a comment with a given ID does not exist.\n\nFor simplicity, you can store comments in a list and use a stream to filter and collect the required comments. Assume that `EventShortDto` and `UserShortDto` are simple DTOs with necessary fields and getters/setters.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, should be a global variable."}, {"type": "variable", "instruction": "Variable info, the initial value should be notification."}, {"type": "interface", "instruction": "Your code should define an interface named delete_form."}, {"type": "class", "instruction": "Your code should define a class named Tys."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.net', 'java.text']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"3": [0, 2, 8], "4": [0, 2, 8]}, "question_id": 356}
{"question": "Develop a Python function to calculate the Wasserstein Distance (also known as the Earth Mover's Distance) between two normal (Gaussian) distributions. The Wasserstein Distance is a measure of the distance between two probability distributions. For normal distributions, it has a closed-form solution. Define the function as def wasserstein_distance_normal(mean1, std1, mean2, std2), where mean1 and std1 are the mean and standard deviation of the first normal distribution, and mean2 and std2 are those of the second distribution.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure heapq."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "class", "instruction": "Your code should define a class named InventoryReport."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_customer."}, {"type": "combination", "instruction": "In your code, the class InventoryReport should have these methods ['remove_item', 'retrieve_form', 'check_log']."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_customer, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"7": [0, 6, 12], "10": [0, 8, 12], "11": [0, 9, 12]}, "question_id": 357}
{"question": "\n\nDesign a Java class `LanguageProfileManager` that manages language profiles for a text analysis application. The class should be able to load language profile configurations from properties files and provide access to these configurations for use in language detection.\n\nThe `LanguageProfileManager` should adhere to the following requirements:\n\n1. It should have a constructor that initializes the manager with default configurations.\n2. It should provide a method to load configurations from a given properties file path.\n3. It should provide methods to get and set the path to the language profiles directory.\n4. It should provide methods to get and set the list of language profiles (as an array of Strings).\n5. It should handle exceptions gracefully, logging warnings when default configurations are used and throwing a custom exception `LanguageProfileException` when critical errors occur.\n6. It should use Apache Commons Configuration for handling properties files and Apache Log4j for logging.\n\nWrite the `LanguageProfileManager` class following the guidelines and provide test cases to verify its correctness.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the class keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should be a global variable."}, {"type": "variable", "instruction": "Variable item, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_message."}, {"type": "class", "instruction": "Your code should define a class named Notification."}, {"type": "file", "instruction": "Your code should be organized in a package named add_msg."}, {"type": "combination", "instruction": "The function create_message should take ['product'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_msg, which should contain these classes ['ConfigureDataRoom']."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "9": [0, 1, 6], "10": [0, 1, 7, 8]}, "question_id": 358}
{"question": "\nDesign a Go program that interacts with an LDAP server to retrieve and list LDAP group information. The program should provide functionality to query for specific groups based on various attributes such as common name (cn), description, object SID, SAM account name, and creation or modification dates. It should also support pagination for large result sets.\n\nThe program should define a `groupRow` struct to represent the LDAP group information, including fields such as distinguished name (dn), common name (cn), description, creation date (whenCreated), last modified date (whenChanged), object class, organizational unit (ou), object SID, SAM account name, title, groups the group belongs to (memberOf), and all attributes returned from LDAP.\n\nImplement two main functions: `getGroup` to retrieve a single group by its distinguished name, and `listGroups` to list groups based on the provided filters and pagination settings. The `listGroups` function should stream the results back to the caller, handling any necessary pagination internally.\n\nEnsure that the program handles LDAP search requests, applies filters, and transforms LDAP entry attributes into the `groupRow` struct. Additionally, the program should handle time fields appropriately by converting LDAP time strings to Go `time.Time` objects.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, the initial value should be item."}, {"type": "variable", "instruction": "Variable notification, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named analyze_info."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['manage_request', 'update_status']."}, {"type": "interface", "instruction": "Your code should define an interface named manage_view."}, {"type": "class", "instruction": "Your code should define a class named TysRequest."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_profile."}, {"type": "combination", "instruction": "The function analyze_info should take ['account', 'report'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_profile, which should contain these classes ['ModifyRoomTys']."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "11": [0, 1, 10], "13": [0, 1, 6], "14": [0, 1, 10, 12]}, "question_id": 359}
{"question": "\nDesign a NATS protocol message validator that checks the correctness of protocol messages sent by clients to a NATS server. The validator should ensure that messages conform to the NATS protocol specifications, including proper command names, correct argument counts, and valid message payloads.\n\nThe NATS protocol includes the following commands:\n- `CONNECT`: Used to initialize a connection to the server.\n- `PUB`: Used to publish a message to a specified subject.\n- `SUB`: Used to subscribe to a subject.\n- `UNSUB`: Used to unsubscribe from a subject.\n- `PING`: Used to check the connection to the server.\n- `PONG`: Used as a response to a `PING` command.\n\nEach command has its own requirements for arguments and message structure. For example, the `PUB` command should be followed by a subject, an optional reply-to subject, the number of bytes in the payload, and the message payload itself.\n\nThe validator should check for the following:\n- The command is valid and correctly spelled.\n- The number of arguments is correct for the given command.\n- The payload size for `PUB` commands matches the declared size.\n- The message ends with the proper line terminator (`\\r\\n`).\n\nImplement the `ValidateNATSMessage` function that takes a single string argument representing a NATS protocol message and returns a boolean indicating whether the message is valid, along with an error message if it is not.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should use data structure slice."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable view, type should be slice."}, {"type": "variable", "instruction": "Variable view, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_tys."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_item', 'insert_inventory']."}, {"type": "class", "instruction": "Your code should define a class named CheckKms."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named update_bill."}, {"type": "combination", "instruction": "You should initialize an object named customer as an instance of the CheckKms class using ['msg', 'inventory', 'kms'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_bill, which should contain these classes ['CustomerBill']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 6], "11": [0, 1, 2, 3, 10], "14": [0, 1, 2, 3, 13], "16": [0, 1, 2, 3, 13], "17": [0, 1, 2, 3, 13, 15]}, "question_id": 360}
{"question": "\n\nWrite a Go function `GetTeacherInitials` that extracts the last name, first name initial, and middle name initial from a given Russian full name string. The function should handle various formats of input where the initials may be separated by spaces or not, and the middle name initial may be omitted. The initials should be followed by a period.\n\nThe function signature should be:\n```go\nfunc GetTeacherInitials(fullName string) (lastName string, firstNameInitial string, middleNameInitial string)\n```\n\nThe function should return the last name, the first name initial, and the middle name initial as separate strings. If the first name or middle name initial is not provided, the corresponding return value should be an empty string.\n\nImplement the function and write test cases using the `testify` package to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use data structure channel."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be string."}, {"type": "function", "instruction": "Your code should include a function named set_customer."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named filter_message."}, {"type": "class", "instruction": "Your code should define a class named SubmitMessageLog."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_form."}, {"type": "file", "instruction": "Your code should not use the following libraries ['time']."}, {"type": "combination", "instruction": "Your code should define a class named SubmitMessageLog that implements the filter_message interface."}, {"type": "combination", "instruction": "In your code, the class SubmitMessageLog should have these properties ['profile']."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_form, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 17], "9": [0, 1, 2, 3, 8, 17], "14": [0, 1, 2, 3, 10, 11, 17], "15": [0, 1, 2, 3, 11, 17], "16": [0, 1, 2, 3, 12, 17]}, "question_id": 361}
{"question": "\n\nDesign a Java class `MaxSubarrayFinder` that implements an algorithm to find the contiguous subarray within a one-dimensional array of numbers which has the largest sum. This problem is commonly known as the Maximum Subarray Problem. The class should use Kadane's algorithm to solve this problem efficiently.\n\nThe class should provide a method `findMaxSubarray` that takes an array of integers as input and returns an object containing the maximum sum, the starting index, and the ending index of the maximum subarray. If the array contains only negative numbers, the maximum sum should be 0, and the starting and ending indices should be -1.\n\nAdditionally, provide a `main` method that demonstrates the functionality of the `MaxSubarrayFinder` class with several test cases, including edge cases such as an empty array, an array with all negative numbers, and an array with all positive numbers.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure Stack."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "variable", "instruction": "Variable report, the initial value should be order."}, {"type": "interface", "instruction": "Your code should define an interface named add_dwa."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.util']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4]}, "question_id": 362}
{"question": "Please write a Java method that reads two bytes from the given byte array at a specified index position and returns them as an `int` value. These two bytes should be combined in Big-Endian order. For example, if the byte at index position `i` is `0x01` and the byte at position `i+1` is `0x02`, the returned `int` value should be `0x0102`. Ensure your code can handle potential index out-of-bounds exceptions and, in such cases, returns `-1`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\npublic class ByteReader {\n    public static int readTwoBytesAsInt(byte[] data, int index) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should use the this keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "Your code should define an enumeration named Mode"}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named remove_order."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ManageBill."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_message."}, {"type": "combination", "instruction": "In your code, the class ManageBill should have these methods ['manage_room', 'delete_token']."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_message, which should contain these classes ['Tys', 'SetAccountProfile', 'Token']."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 7], "11": [0, 1, 2, 3, 4, 10], "13": [0, 1, 2, 3, 4, 12], "15": [0, 1, 2, 3, 4, 12], "16": [0, 1, 2, 3, 4, 12, 14]}, "question_id": 363}
{"question": "\nIn a game show, there are `N` participants, each with a certain amount of money. The total prize pool is the sum of all participants' money. A participant is selected to win a percentage of the prize pool based on the money they contributed to it. However, the game show takes a commission of `P%` from the total prize pool before distributing the prize to the winner.\n\nWrite a program that calculates the amount of money the selected participant would win after the commission is deducted. The program should take three integers `N`, `M`, and `P` as input, where `N` is the number of participants, `M` is the index of the selected participant (1-indexed), and `P` is the percentage commission taken by the game show. Following this, the program should take `N` integers representing the amount of money each participant has contributed.\n\nIf the selected participant has contributed no money, they win nothing. The program should output the amount of money the selected participant wins. The input ends when `N`, `M`, and `P` are all zero.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the float keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure stack."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable bill, should not be a global variable."}, {"type": "variable", "instruction": "Variable bill, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named remove_request."}, {"type": "function", "instruction": "Your code should not use any functions from the ['calculate_event', 'display_kms', 'analyze_view']."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_kms."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "combination", "instruction": "The function remove_request should return a float as its result."}], "instruction_dependence": {"8": [0, 1, 6], "9": [0, 1, 6], "10": [0, 1, 6], "14": [0, 1, 13], "15": [0, 1, 11]}, "question_id": 364}
{"question": "Write a Java program to calculate the area of a rectangle. Ensure that your program meets the following requirements:\n\n- Your program should include a class named `Rectangle`.\n- In the `Rectangle` class, there should be two attributes: `length` and `width`, which are used to store the length and width of the rectangle, respectively.\n- The class should have a constructor that accepts two parameters (length and width) and initializes the object accordingly.\n- The class should include a method named `calculateArea`, which calculates and returns the area of the rectangle.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Math;\npublic class Rectangle {\n    private double length;\n    private double width;\n    public Rectangle(double length, double width) {\n    }\n    public double calculateArea() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should use the abstract keyword."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should not be a global variable."}, {"type": "variable", "instruction": "Variable order, the initial value should be profile."}, {"type": "function", "instruction": "Your code should include a function named add_report."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named manage_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TysRequest."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql', 'java.text']."}], "instruction_dependence": {"4": [0, 1, 2, 3], "5": [0, 1, 2, 3], "7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10]}, "question_id": 365}
{"question": "\nYou are given `n` circular cakes and `f` friends. Each cake has a radius given by the array `a`. Your task is to divide the cakes into `f + 1` pieces (since you also want a piece) such that each person gets an equal amount of cake. You can cut the cakes into any number of pieces, but all pieces must have the same area.\n\nWrite a program that determines the maximum area of a piece that can be achieved by cutting the cakes in such a way that each person gets an equal amount of cake. The area of a piece should be printed with three decimal places.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the const_cast keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named remove_event."}, {"type": "interface", "instruction": "Your code should define an interface named modify_status."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named RequestToken."}, {"type": "combination", "instruction": "You should define an interface named modify_status that includes these methods ['search_punish', 'delete_kms', 'manage_log']."}, {"type": "combination", "instruction": "Your code should define a class named RequestToken that implements the modify_status interface."}, {"type": "combination", "instruction": "The function remove_event should return a list as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "9": [0, 1, 2, 8, 14], "11": [0, 1, 2, 8, 14], "12": [0, 1, 2, 8, 10, 14], "13": [0, 1, 2, 7, 14]}, "question_id": 366}
{"question": "\n\nDesign a Go package named `lianlianpay` that provides an interface to interact with the Lianlian Pay API for various user-related operations. The package should include a `LianlianPayClient` struct that has methods to handle the following operations:\n\n1. Apply for a mobile phone verification code (`GetVerifyCode`).\n2. Verify the mobile phone code (`PhoneVerifyCode`).\n3. Apply for an individual user account (`ApplyIndividual`).\n4. Verify an individual user account application (`VerifyApplyIndividual`).\n5. Modify user information (`ModifyUserInfo`).\n6. Apply for a new card binding for an individual user (`IndividualBindcardApply`).\n7. Verify a new card binding for an individual user (`IndividualBindcardVerify`).\n8. Change the user's password (`ChangePassword`).\n\nEach method should accept a request struct specific to the operation and return a response struct along with an error if the operation fails. The `Exec` method is assumed to be a common method that sends the request to the Lianlian Pay API and populates the response.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the break keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_shipment."}, {"type": "interface", "instruction": "Your code should define an interface named delete_msg."}, {"type": "class", "instruction": "Your code should define a class named SubmitProduct."}, {"type": "combination", "instruction": "Your code should define a class named SubmitProduct that implements the delete_msg interface."}, {"type": "combination", "instruction": "In your code, the class SubmitProduct should have these properties ['user', 'data']."}, {"type": "combination", "instruction": "In your code, the class SubmitProduct should have these methods ['update_inventory']."}, {"type": "combination", "instruction": "The function calculate_shipment should take ['punish'] as parameters."}, {"type": "combination", "instruction": "The function calculate_shipment should return a float64 as its result."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8], "13": [0, 1, 2, 3, 4, 11, 12], "14": [0, 1, 2, 3, 4, 12], "15": [0, 1, 2, 3, 4, 12], "16": [0, 1, 2, 3, 4, 10], "17": [0, 1, 2, 3, 4, 10]}, "question_id": 367}
{"question": " Implement a C++ library that provides an interface for managing attributes in a scientific data format. The library should allow users to create, query, and retrieve attributes associated with scientific datasets. Attributes can be of various types, including integers, floating-point numbers, strings, and arrays of these types. The library should be able to handle large datasets efficiently and provide Fortran bindings for interoperability.\n\nThe library should provide the following functionalities:\n\n1. Create an attribute with a given name and value.\n2. Retrieve the name of an attribute.\n3. Check if an attribute holds a single value or an array of values.\n4. Get the data type of an attribute.\n5. Get the size of an attribute (number of elements if it's an array).\n6. Retrieve the value(s) of an attribute.\n\nThe library should be robust and handle errors gracefully, returning appropriate error codes for different failure scenarios.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable event, type should be float."}, {"type": "variable", "instruction": "Variable event, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named create_customer."}, {"type": "interface", "instruction": "Your code should define an interface named handle_log."}, {"type": "class", "instruction": "Your code should define a class named SetCreditUser."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "6": [0, 1, 3]}, "question_id": 368}
{"question": "\n\nYou are tasked with managing a MongoDB database for a task management application. The application stores tasks in a collection named \"todos\" within a database called \"python_course\". Each task document can have various fields, but commonly includes \"title\", \"completed\", \"dueDate\", and \"priority\".\n\nWrite a Python script that connects to the MongoDB server, interacts with the \"todos\" collection, and performs the following operations:\n\n1. List all collections in the \"python_course\" database.\n2. Insert a new task with the title \"Learn Data Analysis\", marked as not completed, with a due date of \"2023-09-01\", and a priority level of 3.\n3. Insert multiple tasks at once with varying fields, ensuring that each task has at least a \"title\" and \"completed\" status.\n4. Find and print the first task in the \"todos\" collection.\n5. Retrieve and print all tasks that are not completed and contain the word \"learn\" (case-insensitive) in the title. Only the \"title\" field should be returned for these tasks.\n6. Create a text index on the \"title\" field to optimize searches.\n7. Perform a text search for tasks containing the word \"python\" and print the results.\n\nProvide test cases to verify the correctness of each operation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should not use the try keyword."}, {"type": "structural control", "instruction": "Your code should use data structure tuple."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "variable", "instruction": "Variable punish, the initial value should be transaction."}, {"type": "variable", "instruction": "Variable punish should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_inventory."}, {"type": "interface", "instruction": "Your code should define an interface named sort_credit."}, {"type": "class", "instruction": "Your code should define a class named ModifyProfile."}, {"type": "file", "instruction": "Your code should be organized in a package named update_form."}, {"type": "combination", "instruction": "The function filter_inventory should take ['credit', 'form', 'account'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_form, which should contain these classes ['HandleData', 'ViewCredit', 'DataLog']."}, {"type": "global", "instruction": "Your function should not exceed 14 lines."}], "instruction_dependence": {"7": [0, 1, 2, 5, 15], "8": [0, 1, 2, 5, 15], "13": [0, 1, 2, 9, 15], "14": [0, 1, 2, 11, 12, 15]}, "question_id": 369}
{"question": "Given two polygons, determine whether they overlap. Solve this with the shapely library, defining the Python function solve, input two vertex lists of the polygons, return a bool value indicating whether they overlap.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure collections."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Your code should define an enumeration named Role"}, {"type": "variable", "instruction": "Variable room, should not be a global variable."}, {"type": "variable", "instruction": "Variable room, the initial value should be customer."}, {"type": "variable", "instruction": "Variable room, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named execute_notification."}, {"type": "class", "instruction": "Your code should define a class named FilterDwaPunish."}, {"type": "file", "instruction": "Your code should be organized in a package named search_order."}, {"type": "combination", "instruction": "You should define an interface named execute_notification that includes these methods ['check_form']."}, {"type": "combination", "instruction": "Your code should define a class named FilterDwaPunish that implements the execute_notification interface."}, {"type": "combination", "instruction": "In your code, the class FilterDwaPunish should have these properties ['customer', 'info', 'user']."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_order, which should contain these classes ['TokenTransaction']."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"6": [0, 1, 4, 16], "7": [0, 1, 4, 16], "8": [0, 1, 4, 16], "12": [0, 1, 9, 16], "13": [0, 1, 9, 10, 16], "14": [0, 1, 10, 16], "15": [0, 1, 10, 11, 16]}, "question_id": 370}
{"question": "\n\nDesign a class `EnhancedLogger` that extends the functionality of a simple logging system. The `EnhancedLogger` should allow for different levels of logging (INFO, DEBUG, WARN, ERROR) and should support enabling or disabling specific log levels. Each log level, when enabled, should print messages to the standard error stream (`System.err`), prefixed with the log level name. The logger should also support a verbosity level that controls the amount of detail included in the log message.\n\nThe `EnhancedLogger` class should have the following features:\n- A constructor that takes two parameters: `boolean print` and `boolean debug`. If `print` is `true`, INFO and WARN messages should be printed. If `debug` is `true`, DEBUG messages should also be printed. ERROR messages should always be printed regardless of these settings.\n- Methods `info(String msg)`, `debug(String msg)`, `warn(String msg)`, and `error(String msg)` to log messages at different levels. Each method should check if the corresponding log level is enabled before printing the message.\n- A method `setVerbosity(int level)` that sets the verbosity level of the logger. The verbosity level is an integer where a higher number means more detailed messages. The verbosity level should affect all log levels and should be included in the log message (e.g., `[VERBOSITY 2]`).\n- A method `enableLogLevel(String level)` that enables a specific log level by name (e.g., \"INFO\", \"DEBUG\", \"WARN\", \"ERROR\").\n- A method `disableLogLevel(String level)` that disables a specific log level by name.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the const keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Variable transaction, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named Room."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.util', 'java.io']."}, {"type": "combination", "instruction": "You should initialize an object named status as an instance of the Room class using ['transaction', 'report'] for initialization."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"4": [0, 1, 3, 9], "8": [0, 1, 5, 9]}, "question_id": 371}
{"question": "\n\nDesign a parking management system that allows the creation of parking rate information for a parking center. The system should be able to handle the following requirements:\n\n1. Each parking center is identified by a unique `CentreID`.\n2. Parking rates can be hourly, flat, or a combination of both, indicated by `TypeOfRate`.\n3. The system should support additional parking information, credit card surcharge amounts, flat rates, maximum daily rates for weekdays and weekends, and overnight fees for weekdays and weekends.\n4. Parking rates can be either applicable (`RatesApply` is true) or complimentary (`RatesApply` is false).\n5. The system should allow storing valet parking instructions and a PDF reference for terms and conditions.\n6. The parking rates should be validated to ensure they are in the correct format and contain valid data.\n\nImplement the `ParkingCreateBody` struct with appropriate fields and validation logic. The `ParkingRates` field should be a slice of `ParkingRate` structs, which you will also need to define, including its validation logic.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_info."}, {"type": "interface", "instruction": "Your code should define an interface named transform_token."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SearchRecordForm."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the SearchRecordForm class using ['record', 'inventory'] for initialization."}, {"type": "combination", "instruction": "The function generate_info should take ['notification'] as parameters."}], "instruction_dependence": {"3": [0, 1, 2], "6": [0, 1, 5], "8": [0, 1, 7], "9": [0, 1, 4]}, "question_id": 372}
{"question": "\n\nCreate a Java class named `ChatHoverModifier` that allows users to add hover effects to chat messages in a Minecraft-like chat system. The hover effects should be based on the `HoverAction` enum provided in the given code snippet. The `ChatHoverModifier` class should provide a method to apply a hover effect to a given chat message, which includes the text to display and the type of hover action to perform.\n\nThe hover actions available are:\n- `SHOW_TEXT`: Displays a text when the user hovers over the chat message.\n- `SHOW_ACHIEVEMENT`: Displays an achievement description.\n- `SHOW_ITEM`: Displays an item's information.\n- `SHOW_ENTITY`: Displays an entity's information.\n\nThe `ChatHoverModifier` class should use reflection to interact with the underlying Minecraft server code to apply the hover effects. Assume that the server code has a method `applyHoverEffectToChatMessage(String chatMessage, Object hoverAction, String hoverContent)` that applies the hover effect to the chat message.\n\nProvide a main method with test cases to demonstrate the functionality of the `ChatHoverModifier` class.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not use the public keyword."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named configure_notification."}, {"type": "function", "instruction": "Your code should not use any functions from the ['set_request', 'modify_status', 'manage_user', 'retrieve_tys']."}, {"type": "interface", "instruction": "Your code should define an interface named process_kms."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ConfigureInventoryDwa."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.time']."}, {"type": "combination", "instruction": "The function configure_notification should take ['message', 'inventory', 'bill'] as parameters."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4], "9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 6]}, "question_id": 373}
{"question": "Calculate the definite integral of sin(x^2) from negative infinity to infinity using Python. Write a function with the name \"f\" which returns a value of float type.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be int."}, {"type": "variable", "instruction": "Variable data, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_info."}, {"type": "interface", "instruction": "Your code should define an interface named create_customer."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_inventory."}, {"type": "file", "instruction": "Your code should not use the following libraries ['scikit-learn', 'seaborn']."}, {"type": "combination", "instruction": "Your code should define a class named Kms that implements the create_customer interface."}, {"type": "combination", "instruction": "The function execute_info should take ['cut', 'request'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_inventory, which should contain these classes ['ProcessStatus']."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_inventory, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 6, 18], "8": [0, 1, 6, 18], "14": [0, 1, 10, 11, 18], "15": [0, 1, 9, 18], "16": [0, 1, 11, 12, 18], "17": [0, 1, 12, 18]}, "question_id": 374}
{"question": "Define that in a molecule, if there is a hydrogen bond donor and acceptor separated by 4 or 5 chemical bonds, an intramolecular hydrogen bond may form. Please write a complete Python function `solve(smiles)` to determine how many intramolecular hydrogen bonds may form in a molecule based on 2D topology structure.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure heapq."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, type should be list."}, {"type": "variable", "instruction": "Variable product, the initial value should be notification."}, {"type": "function", "instruction": "Your code should include a function named modify_order."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['process_form', 'filter_credit']."}, {"type": "interface", "instruction": "Your code should define an interface named add_form."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "The function modify_order should return a float as its result."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "10": [0, 1, 9], "11": [0, 1, 6]}, "question_id": 375}
{"question": "For the following code, determine if there are any issues, and if so, please show the corresponding correct code.\n```go\nimport (\n\t\"sync\"\n)\nfunc DebugSyncMap() string {\n\tvar m sync.Map\n\tm.Store(\"address\", map[string]string{\"province\": \"Jiangsu\", \"city\": \"Nanjing\"})\n\tv, _ := m.Load(\"address\")\n\treturn v[\"province\"]\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure slice."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named add_room."}, {"type": "class", "instruction": "Your code should define a class named ProcessNotificationTys."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings']."}, {"type": "combination", "instruction": "The function add_room should take ['shipment', 'credit', 'user'] as parameters."}], "instruction_dependence": {"6": [0, 5], "8": [0, 4]}, "question_id": 376}
{"question": " Color Conversion Utility\n\nIn a graphics software development kit (SDK), there is a need for a utility that can convert colors between the RGB (Red, Green, Blue) and HSV (Hue, Saturation, Value) color models. This utility will be used extensively in the SDK for various graphics operations where color manipulation is required.\n\nThe RGB color model is defined by three components: red, green, and blue, each ranging from 0 to 1. The HSV model is defined by three components as well: hue (ranging from 0 to 360 degrees), saturation, and value, each ranging from 0 to 1.\n\nYour task is to implement two conversion functions:\n1. `rgb2hsv(rgb in)`: Converts an RGB color to its equivalent HSV color.\n2. `hsv2rgb(hsv in)`: Converts an HSV color to its equivalent RGB color.\n\nThe `rgb` and `hsv` are structs that are defined as follows:\n```cpp\nstruct rgb {\n    double r; // Red component, range: [0, 1]\n    double g; // Green component, range: [0, 1]\n    double b; // Blue component, range: [0, 1]\n};\n\nstruct hsv {\n    double h; // Hue component, range: [0, 360]\n    double s; // Saturation component, range: [0, 1]\n    double v; // Value component, range: [0, 1]\n};\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named generate_customer."}, {"type": "interface", "instruction": "Your code should define an interface named transform_customer."}, {"type": "file", "instruction": "Your code should be organized in a package named display_kms."}, {"type": "combination", "instruction": "The function generate_customer should take ['token', 'notification'] as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 3, 5]}, "question_id": 377}
{"question": "Below is a function that implements ForkJoin functionality using Channels, using ForkJoin to calculate the sum of all numbers. Could you verify if the implementation has any issues? If so, how should the correct implementation code be written?\n```go\nfunc ForkJoin(nums []int) int {\n\tforkChan := make(chan int, 10)\n\tgo func() {\n\t\tfor _, num := range nums {\n\t\t\tforkChan <- num\n\t\t}\n\t}()\n\n\tjoinChan := make(chan int, 10)\n\tfor i := 0; i < 3; i++ {\n\t\tgo func(idx int) {\n\t\t\tfor num := range forkChan {\n\t\t\t\tfmt.Printf(\"get num %v at %v\\n\", num, idx)\n\t\t\t\tjoinChan <- num\n\t\t\t}\n\t\t\tclose(joinChan)\n\t\t}(i)\n\t}\n\tres := 0\n\tgo func() {\n\t\tfor num := range joinChan {\n\t\t\tres += num\n\t\t}\n\t}()\n\treturn res\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "function", "instruction": "Your code should include a function named set_request."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Record."}, {"type": "file", "instruction": "Your code should be organized in a package named display_shipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings']."}, {"type": "combination", "instruction": "In your code, the class Record should have these properties ['account']."}, {"type": "combination", "instruction": "In your code, the class Record should have these methods ['set_bill']."}, {"type": "combination", "instruction": "The function set_request should take ['room', 'report'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_shipment, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 9], "14": [0, 1, 2, 3, 11], "15": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 9], "17": [0, 1, 2, 3, 12]}, "question_id": 378}
{"question": "\n\nDesign a session storage system that interfaces with an SQLite database to manage session data. The system should provide the following functionalities:\n\n1. Initialize the database connection and prepare the session table.\n2. Create a new session with a unique key, value, and expiration time.\n3. Retrieve a session value by its key.\n4. Update an existing session with a new value and reset its expiration time.\n5. Delete a session by its key.\n6. Check if a session exists by its key.\n7. Store and retrieve session data in JSON format.\n8. Enable debug mode for additional logging.\n\nThe session storage system should also support automatic database table creation (automigration) if the session table does not exist. The system should be able to handle concurrent access to the session data.\n\nProvide a Go package named `sessionstore` with a `Store` struct and associated methods to implement the above functionalities. Include unit tests to verify the correctness of each method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named display_dwa."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "combination", "instruction": "Your code should define a class named Punish that implements the display_dwa interface."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 5, 6]}, "question_id": 379}
{"question": "\n\nWrite a Java program that demonstrates the use of the `isAlive()` method in the `Thread` class to check if a thread is alive or not. The program should include a custom thread class that overrides the `run()` method. The `run()` method should print a message indicating whether the thread is alive immediately after it starts running. In the `main` method, the program should create an instance of the custom thread class, print the thread's state before it starts, start the thread, and then print the thread's state after it has been started and after it has finished executing.\n\nThe program should also handle any interruptions that occur while the main thread is sleeping, waiting for the custom thread to finish execution. Ensure that the program prints the thread's state at three different points:\n1. Before the thread is started.\n2. After the thread has been started but before it finishes execution.\n3. After the thread has finished execution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "Variable product, the initial value should be order."}, {"type": "function", "instruction": "Your code should include a function named generate_transaction."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named ExecuteRecordTys."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the ExecuteRecordTys class using ['order', 'transaction'] for initialization."}], "instruction_dependence": {"6": [0, 1, 2, 4], "8": [0, 1, 2, 7], "10": [0, 1, 2, 9], "11": [0, 1, 2, 9]}, "question_id": 380}
{"question": "\n\nDesign a Java program that manages a system for storing and retrieving user skills in a database. The system should allow adding new skills to a user, retrieving all skills associated with a user, and removing a skill from a user. Each skill has a unique ID and a description. A user has a unique ID, a name, and a set of skills.\n\nImplement the following functionalities:\n1. `addSkillToUser(User user, Skill skill)`: Adds a new skill to the specified user's set of skills.\n2. `getSkillsByUser(User user)`: Retrieves all skills associated with the specified user.\n3. `removeSkillFromUser(User user, Skill skill)`: Removes the specified skill from the user's set of skills.\n\nAssume that the `SkillRepository` provided in the given code snippet is correctly implemented and can be used to interact with the database. You need to create the `UserService` class that uses `SkillRepository` to perform the operations mentioned above.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, the initial value should be account."}, {"type": "variable", "instruction": "Variable notification should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named insert_token."}, {"type": "interface", "instruction": "Your code should define an interface named create_profile."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named ProcessDwaCustomer."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.time', 'java.sql']."}, {"type": "combination", "instruction": "The function insert_token should return a ArrayList as its result."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10], "13": [0, 1, 2, 12], "15": [0, 1, 2, 9]}, "question_id": 381}
{"question": "Please write a Java method to verify whether an email object contains a specific subject. If the subject of the email does not match the given subject, an exception should be thrown, and the exception message should clearly specify the expected subject and the actual subject. Ensure that your code is self-contained and all necessary packages are imported.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\npublic class EmailValidator {\n    private Email email;\n    public EmailValidator(Email email) {\n    }\n    public void validateSubject(String expectedSubject) {\n    }\n    public static class Email {\n        private String subject;\n        public Email(String subject) {\n        }\n        public String getSubject() {\n        }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, should be a constant."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_cut."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 8]}, "question_id": 382}
{"question": "\n\nChemical Equation Tokenizer\n\nIn chemistry, a chemical equation is a symbolic representation of a chemical reaction. For this problem, you are to write a C++ program that tokenizes a simplified chemical equation into its constituent tokens. The tokens can be elements, coefficients, parentheses, element counts, or end of input.\n\nThe given code snippet provides a `token` class that represents a single token in a chemical equation. The `token` class has an enumeration `type` that specifies the kind of token it is, and a `std::string_view` that holds the value of the token.\n\nYour task is to extend the given code snippet to include a `tokenizer` class that takes a `std::string_view` representing a chemical equation and breaks it down into a sequence of `token` objects. The `tokenizer` class should have a method `next_token()` that returns the next token in the sequence each time it is called, or a token of type `end` if there are no more tokens.\n\nThe chemical equation will only contain uppercase and lowercase letters to represent elements (e.g., 'H' for hydrogen, 'O' for oxygen), numbers to represent coefficients and element counts, and parentheses. Coefficients and element counts are always positive integers. Elements are represented by one or two letters, starting with an uppercase letter followed by an optional lowercase letter.\n\nFor example, the chemical equation \"H2O\" should be tokenized into the following tokens:\n- Element: \"H\"\n- Element count: \"2\"\n- Element: \"O\"\n\nThe equation \"2H2 + O2 -> 2H2O\" should be tokenized into:\n- Coefficient: \"2\"\n- Element: \"H\"\n- Element count: \"2\"\n- Element: \"O\"\n- Element count: \"2\"\n- End: \"\"\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view should not be a constant."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}], "instruction_dependence": {"6": [0, 1, 5, 7]}, "question_id": 383}
{"question": "Please write a Java method to add a series of elements to a custom data collection and notify when the data has changed afterwards. The method should meet the following requirements:\n\n1. If the passed collection is `null`, a new empty collection should be created.\n2. If the passed collection is empty, no action should be performed.\n3. After adding the elements, a method should be called to notify that the data has changed.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class DataNotifier {\n    private List<Object> dataList;\n    private List<Object> initDataList() {\n    }\n    public void addElementsAndNotify(List<Object> newElements) {\n    }\n    private void notifyDataChanged() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, type should be ArrayList."}, {"type": "variable", "instruction": "Variable item, should not be a global variable."}, {"type": "variable", "instruction": "Variable item should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named insert_bill."}, {"type": "class", "instruction": "Your code should define a class named Status."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.net', 'java.sql']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang', 'java.net', 'java.io']."}, {"type": "combination", "instruction": "Your code should define a class named Status that implements the insert_bill interface."}, {"type": "global", "instruction": "Your function should not exceed 25 lines."}], "instruction_dependence": {"6": [0, 1, 5, 14], "7": [0, 1, 5, 14], "8": [0, 1, 5, 14], "13": [0, 1, 9, 10, 14]}, "question_id": 384}
{"question": "Please write a Java method to handle a request for initiating a WeChat corporate payment to a user. The method should receive the user's OpenID and the server's IP address as parameters, and construct a data set with the necessary information to initiate the payment. Note that the payment amount and merchant order number should be passed to the method as parameters, rather than hardcoded in the code. Additionally, a validation function needs to be implemented to verify whether the payment request contains all necessary information.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeChatPaymentService {\n    public static void initiatePayment(String userOpenId, String serverIp, String orderAmount, String merchantOrderNo) throws Exception {\n    }\n    public static boolean checkPaymentData(Map<String, String> data) {\n        return false;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_form', 'create_view', 'add_order', 'search_record']."}, {"type": "interface", "instruction": "Your code should define an interface named generate_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ItemPunish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.io', 'java.util', 'java.lang']."}, {"type": "combination", "instruction": "Your code should define a class named ItemPunish that implements the generate_punish interface."}, {"type": "combination", "instruction": "In your code, the class ItemPunish should have these methods ['check_form', 'modify_account', 'get_record']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"4": [0, 1, 3, 12], "7": [0, 1, 6, 12], "10": [0, 1, 6, 8, 12], "11": [0, 1, 8, 12]}, "question_id": 385}
{"question": "\n\nCreate a Python Django application that manages the attendance of trainees in a training program. The application should have the following features:\n\n1. **Models**:\n    - `House`: Represents a house where trainees reside. It should have fields for `name` and `gender` (with choices 'B' for brothers and 'S' for sisters).\n    - `User`: Represents a trainee. It should have fields for `name` and `gender` (with the same choices as `House`), and a foreign key to `House`.\n    - `Roster`: Represents a daily attendance roster. It should have a `date` field and a many-to-many field `unreported_houses` to `House`.\n    - `Entry`: Represents an attendance entry for a trainee. It should have a foreign key to `Absentee` (a trainee), a foreign key to `Roster`, and fields for `reason` and `comments`.\n\n2. **Admin Interface**:\n    - Customize the Django admin interface to manage these models.\n    - Implement `EntryAdmin` and `RosterAdmin` classes to handle the custom logic for attendance entries and rosters.\n    - `RosterAdmin` should have methods to generate a PDF report of the daily roster, calculate the number of days a trainee has been absent in the last 7 days, list unreported houses within the last 7 days, and send an email with the roster to admins.\n\n3. **PDF Generation**:\n    - Implement a function to generate a PDF report of the daily roster using the `render_to_pdf` function (from a hypothetical `pdf` module).\n\n4. **Email Notification**:\n    - Implement a function to send an email with the daily roster to admin email addresses configured in Django settings.\n\n5. **URLs**:\n    - Define custom URLs for generating the PDF report and sending the email notification.\n\n6. **Test Cases**:\n    - Write test cases to verify the correctness of the PDF generation and email sending functionalities.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "function", "instruction": "Your code should include a function named add_transaction."}, {"type": "function", "instruction": "Your code should not use any functions from the ['modify_inventory', 'configure_kms', 'manage_message']."}, {"type": "interface", "instruction": "Your code should define an interface named configure_inventory."}, {"type": "class", "instruction": "Your code should define a class named TransformItemCut."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django']."}, {"type": "combination", "instruction": "You should initialize an object named profile as an instance of the TransformItemCut class using ['info', 'customer'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named configure_inventory that includes these methods ['set_report', 'create_tys', 'submit_order']."}, {"type": "combination", "instruction": "The function add_transaction should take ['product', 'credit', 'cut'] as parameters."}, {"type": "combination", "instruction": "The function add_transaction should return a float as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 4, 15], "11": [0, 9, 15], "12": [0, 8, 15], "13": [0, 6, 15], "14": [0, 6, 15]}, "question_id": 386}
{"question": "\n\nWrite a Python program to perform simple linear regression on a given dataset. The program should be able to import a dataset, split it into training and test sets, train a linear regression model on the training set, and make predictions on the test set. Additionally, the program should visualize the results of the training and test sets with appropriate plots and provide the ability to make a single prediction for a given input. Finally, the program should output the coefficients of the linear regression equation.\n\nFollow these steps to complete the task:\n\n1. Import the necessary libraries: `numpy`, `matplotlib.pyplot`, `pandas`, `train_test_split` from `sklearn.model_selection`, and `LinearRegression` from `sklearn.linear_model`.\n2. Load a dataset from a CSV file into a pandas DataFrame.\n3. Extract the independent variable(s) and the dependent variable from the DataFrame.\n4. Split the dataset into training and test sets using an 80-20 split and a random state of 0 for reproducibility.\n5. Create a linear regression model and train it on the training set.\n6. Predict the dependent variable values for the test set and visualize the results with a scatter plot for the test set and a line plot for the predicted values.\n7. Visualize the training set results with a scatter plot for the training set and a line plot for the predicted values on the training set.\n8. Make a single prediction for an input value of 12 years of experience.\n9. Output the coefficients and intercept of the trained linear regression model.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the await keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_record."}, {"type": "class", "instruction": "Your code should define a class named ProfileShipment."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch']."}, {"type": "file", "instruction": "Your code should use the function generate_record from the library scikit-learn."}, {"type": "combination", "instruction": "The function generate_record should take ['punish', 'transaction', 'account'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_punish, which should contain these classes ['ExecuteForm', 'Credit', 'GenerateRecord']."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_punish, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "13": [0, 1, 2, 3, 12], "14": [0, 1, 2, 3, 9], "15": [0, 1, 2, 3, 10, 11], "16": [0, 1, 2, 3, 11]}, "question_id": 387}
{"question": "\n\nDesign a job scheduling system that allows for the periodic execution of various financial data processing tasks. The system should be able to schedule tasks at different intervals, such as every minute, every 3 minutes, every 5 minutes, and so on, up to monthly intervals. Each task should perform a specific operation related to financial data processing, such as generating Kline data for different time frames or updating exchange rates.\n\nThe tasks should be defined as follows:\n- Kline data generation tasks for time frames: 1m, 3m, 5m, 15m, 30m, 1H, 2H, 4H, 1D, 1W, 1M.\n- Exchange rate update task that runs every minute.\n- Bitcoin block scanning task that runs every 10 minutes.\n\nThe system should be implemented in Go using the `gocron` package for scheduling and should be able to start the scheduler in a blocking mode as well as stop the scheduler when needed.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "variable", "instruction": "Variable token, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named search_product."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_account', 'sort_product']."}, {"type": "interface", "instruction": "Your code should define an interface named transform_report."}, {"type": "class", "instruction": "Your code should define a class named BillProfile."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_event."}, {"type": "combination", "instruction": "You should define an interface named transform_report that includes these methods ['manage_request', 'analyze_event']."}, {"type": "combination", "instruction": "In your code, the class BillProfile should have these properties ['dwa', 'cut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_event, which should contain these classes ['StatusRequest', 'SortShipment']."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "9": [0, 1, 8], "13": [0, 1, 12], "15": [0, 1, 11], "16": [0, 1, 12], "17": [0, 1, 12, 14]}, "question_id": 388}
{"question": "\n\nDesign a Go program that benchmarks the performance of three different UUID generation libraries: `google/uuid`, `gofrs/uuid`, and a custom `nullprogram.com/x/uuid`. The program should measure the time it takes to generate a large number of UUIDs using each library and compare their performances.\n\nThe UUID generation should be done using the Version 4 (random) method. The benchmark should be implemented using Go's built-in testing package, specifically the `testing.B` benchmarking tool.\n\nThe program should include error handling for any potential issues that may arise during UUID generation with the `gofrs/uuid` library, as it returns an error along with the UUID.\n\nProvide a clear docstring at the beginning of the code snippet that describes the problem and how the benchmarking is set up. Ensure that all necessary packages are imported at the beginning of the code snippet.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_room', 'filter_room', 'add_kms', 'configure_room']."}, {"type": "class", "instruction": "Your code should define a class named ConfigureOrderCredit."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_profile."}, {"type": "file", "instruction": "Your code should not use the following libraries ['strconv']."}, {"type": "combination", "instruction": "You should initialize an object named message as an instance of the ConfigureOrderCredit class using ['token', 'data'] for initialization."}, {"type": "combination", "instruction": "In your code, the class ConfigureOrderCredit should have these properties ['event', 'room']."}], "instruction_dependence": {"5": [0, 2], "6": [0, 2]}, "question_id": 389}
{"question": "I have a dataframe with 142 rows. I have created a new column. I want to fill this new column with a list containing strings.\n\n```python\nmy_list = ['abc','def','hig']\ndf['names'] = df['names'].fill(my_list) #pseudo code\n```\n\nI want to fill all the 142 rows in 'names' column with string values in the list in the same order.\n\nThe output should be as:\n\n```\n     names\n   1 abc\n   2 def\n   3 hig\n   4 abc\n   5 def\n```\n\nPlease write a function `fillColumn` in Python, which takes three arguments: a DataFrame variable `df`, the new column name `columnName`, and the new column string data `columnData`, and returns the DataFrame variable with the filled new column.\n\nFunction signature is: `fillColumn(df, columnName, columnData)`", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the if keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure dict."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named manage_log."}, {"type": "class", "instruction": "Your code should define a class named TysBill."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch']."}, {"type": "combination", "instruction": "Your code should be organized in a package named submit_punish, which should contain these classes ['CustomerInventory', 'AnalyzeForm']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "12": [0, 1, 2, 3, 9, 10]}, "question_id": 390}
{"question": "\n\nDesign a Go program that reads a configuration file for a tunnel server and initializes a `TunnelServerConfig` struct with the values from the file. The configuration file is in JSON format and contains settings for enabling the tunnel server, access control list (ACL) configuration, node name, listen port, and public IP address.\n\nThe program should include the following functionalities:\n1. A function `LoadConfig` that takes a file path as an argument, reads the JSON configuration from the file, and returns a `TunnelServerConfig` instance with the values populated.\n2. Default values should be used for `Enable` (true) and `ListenPort` (10004) if they are not specified in the configuration file.\n3. The `acl.TunnelACLConfig` should be properly initialized based on the ACL settings provided in the configuration file.\n4. Error handling for cases where the file cannot be read or the JSON is invalid.\n5. A main function that demonstrates reading a configuration file and printing the initialized `TunnelServerConfig` to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should be a global variable."}, {"type": "variable", "instruction": "Variable item, the initial value should be inventory."}, {"type": "interface", "instruction": "Your code should define an interface named filter_report."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named UpdateMessageItem."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_order."}, {"type": "combination", "instruction": "In your code, the class UpdateMessageItem should have these properties ['record', 'form']."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_order, which should contain these classes ['AnalyzePunishReport']."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 14], "6": [0, 1, 2, 4, 14], "8": [0, 1, 2, 7, 14], "10": [0, 1, 2, 9, 14], "12": [0, 1, 2, 9, 14], "13": [0, 1, 2, 9, 11, 14]}, "question_id": 391}
{"question": "\n\nWrite a Python function `convert_edge_list_format` that reads an edge list from a given input file path, processes each line according to specific rules, and writes the processed edge list to a given output file path. The function should follow these guidelines:\n\n1. The input file is a tab-separated values (TSV) file where each line represents an edge in the format: `sequence_id_1`, `sequence_id_2`, `value`. The `sequence_id_1` and `sequence_id_2` are strings that represent unique identifiers for sequences, and `value` is a string that represents some associated value with the edge.\n\n2. The output file should also be a TSV file with the same columns, but with the following modifications applied to each line of the input file:\n    - If the last two characters of `sequence_id_1` or `sequence_id_2` are '-1', they should be removed.\n    - If `sequence_id_1` or `sequence_id_2` is '000000000', it should be replaced with '000000001'.\n    - If `sequence_id_1` or `sequence_id_2` is '000000001', the function should print 'FAIL' to the console and continue processing the next line.\n\n3. The function should print the line number to the console every 10,000,000 lines processed to track progress, starting from 0.\n\n4. The function should handle any file-related errors gracefully and print an appropriate error message to the console.\n\n5. Include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable inventory, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named modify_user."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "class", "instruction": "Your code should define a class named ModifyTransactionRoom."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib', 'pytorch']."}, {"type": "combination", "instruction": "In your code, the class ModifyTransactionRoom should have these properties ['inventory', 'event']."}], "instruction_dependence": {"3": [0, 1], "4": [0, 1], "6": [0, 5], "9": [0, 7]}, "question_id": 392}
{"question": "\n\nDesign a class `CurseOfTheCollector` that simulates a special attack on a character in a turn-based card game. The attack consists of a series of damaging spells followed by a final blow that ensures the target's defeat. The class should be able to handle the attack sequence, visual effects, and the eventual defeat of the target character.\n\nThe attack sequence should follow these steps:\n1. A short delay before the attack begins.\n2. A visual effect indicating the curse being cast on the target.\n3. A series of 10 incremental damage spells, where the damage of each spell is the cube of its sequence number (i.e., 1^3, 2^3, ..., 10^3).\n4. Each damage spell should have a visual effect associated with it, but no sound.\n5. After the series of spells, a final blow is dealt with an arbitrarily large damage value to ensure the target's defeat.\n6. The target character is then marked as defeated.\n\nThe class should be written in Java and include a method `executeAttack` that takes the source and target characters as parameters. The characters are represented by instances of the `AbstractCreature` class, which has a `hitbox` property with `cX` and `cY` coordinates for visual effect placement.\n\nInclude a docstring that describes the problem and the expected behavior of the `executeAttack` method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the interface keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure HashSet."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, type should be ArrayList."}, {"type": "variable", "instruction": "Variable kms, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_user."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Bill."}, {"type": "file", "instruction": "Your code should be organized in a package named update_request."}, {"type": "combination", "instruction": "The function filter_user should take ['form', 'transaction'] as parameters."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8], "10": [0, 1, 2, 3, 4, 8], "12": [0, 1, 2, 3, 4, 11], "15": [0, 1, 2, 3, 4, 11]}, "question_id": 393}
{"question": "\n\nWrite a Python function `average_gradients_across_workers` that averages the gradients of a neural network model's parameters across multiple workers in a distributed training environment using PyTorch's distributed package. The function should be designed to work with the Distributed Data Parallel (DDP) training where multiple processes are used to train the same model on different subsets of the data.\n\nThe function should take a single argument:\n- `model`: A PyTorch model that has been wrapped with `torch.nn.parallel.DistributedDataParallel`.\n\nThe function should perform an in-place all-reduce operation on the gradients of the model's parameters, summing them across all workers and then dividing by the total number of workers to obtain the average gradient. This is a crucial step in synchronized distributed training to ensure that all workers update their model parameters consistently.\n\nAssume that the distributed environment has already been initialized and that the world size (total number of processes/workers) and the current rank (process identifier) can be obtained using `dist.get_world_size()` and `dist.get_rank()` respectively.\n\nInclude a docstring with the function that explains its purpose, arguments, and the expected environment setup.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Your code should define an enumeration named Status"}, {"type": "variable", "instruction": "Variable punish, type should be dict."}, {"type": "interface", "instruction": "Your code should define an interface named modify_form."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named RemoveStatusProfile."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn']."}, {"type": "combination", "instruction": "You should define an interface named modify_form that includes these methods ['submit_view', 'transform_message']."}, {"type": "combination", "instruction": "Your code should define a class named RemoveStatusProfile that implements the modify_form interface."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"4": [0, 1, 2, 12], "6": [0, 1, 5, 12], "8": [0, 1, 7, 12], "10": [0, 1, 5, 12], "11": [0, 1, 5, 7, 12]}, "question_id": 394}
{"question": "\nDesign and implement a Go package that provides an HTTP server with TLS support, Nomad client integration, and policy-based autoscaling. The server should be able to handle graceful shutdowns and be configurable through a provided `Config` struct. The server should also support both Consul and in-memory storage backends for policy management.\n\nThe `Config` struct should include fields for server binding, port, TLS certificate paths, Nomad client configuration, autoscaler settings, and storage backend options. The server should log its configuration on startup and provide detailed error messages in case of failures.\n\nImplement the following functionalities:\n1. Setup of the Nomad client.\n2. Selection and setup of the policy backend (Consul or in-memory).\n3. Optional setup of the internal autoscaler if enabled in the configuration.\n4. Setup of the HTTP listener with optional TLS configuration.\n5. Graceful shutdown handling with signal interception for `SIGINT` and `SIGTERM`.\n\nProvide a `Start` method to initialize and start the server, and a `Stop` method to gracefully shut it down. Include test cases to verify the correctness of the server setup and shutdown processes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "global", "instruction": "Your code should use the type keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable form, type should be bool."}, {"type": "function", "instruction": "Your code should include a function named filter_record."}, {"type": "class", "instruction": "Your code should define a class named CalculateCustomerCut."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_room."}, {"type": "combination", "instruction": "In your code, the class CalculateCustomerCut should have these methods ['check_shipment', 'display_credit', 'modify_tys']."}, {"type": "combination", "instruction": "The function filter_record should return a slice as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_room, which should contain these classes ['ViewMsg', 'AddReport', 'RoomDwa']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "10": [0, 1, 2, 8], "11": [0, 1, 2, 7], "12": [0, 1, 2, 8, 9]}, "question_id": 395}
{"question": "\n\nWrite a Python function `convert_to_binary` that takes an image file path as input and converts the image to its binary form using a threshold value. The function should save the binary image to a specified output file path and return the binary image as a NumPy array.\n\nThe function should follow these requirements:\n- Use OpenCV for image processing.\n- Apply a threshold to convert the image to binary. The threshold value should be adjustable via a function parameter with a default value.\n- The function should handle cases where the input image file does not exist or is not a valid image.\n- Include error handling to provide meaningful messages in case of exceptions.\n- Include docstrings that describe the function's purpose, parameters, return value, and any exceptions raised.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "function", "instruction": "Your code should include a function named submit_status."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named RemoveTransaction."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named process_status."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"4": [0, 3, 8], "6": [0, 5, 8]}, "question_id": 396}
{"question": "Use PyQt5 to Print the Current Time and Date\n1. The interface includes a display window for time and date, with a button beneath it for getting new date and time. Clicking on this button will update it to the new date and time;\n2. Code format requirement: Package the whole UI code into a class named \"Clock\". The display format for the time and date should be “yyyy-MM-dd HH:mm:ss\". The display window should be named \"date_time_label\", with the update button named as \"update_button\".", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "function", "instruction": "Your code should include a function named insert_msg."}, {"type": "class", "instruction": "Your code should define a class named View."}, {"type": "file", "instruction": "Your code should be organized in a package named check_user."}, {"type": "combination", "instruction": "In your code, the class View should have these methods ['remove_dwa', 'create_room', 'search_info']."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_user, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "9": [0, 1, 7], "10": [0, 1, 8]}, "question_id": 397}
{"question": "\n\nWrite a Python program that processes audio files within a directory structure, applying noise reduction to each file and saving the processed files to a new directory structure that mirrors the original one. The program should be able to handle a specific range of subdirectories, each containing multiple class directories with audio files.\n\nThe directory structure is as follows:\n- The root directory is divided into two modes: `vox1_dev_wav` and `vox1_test_wav`.\n- Each mode contains subdirectories named with a specific pattern based on their index (e.g., `id1001`, `id1002`, ..., `id1128`).\n- Each subdirectory contains class directories.\n- Each class directory contains audio files.\n\nThe program should:\n- Skip processing for subdirectories with indices between 270 and 309.\n- Create a new root directory for the processed files, maintaining the same structure as the original.\n- Apply a noise reduction function `reduce_noise1` to each audio file.\n- Print the subdirectory name and the count of processed files within that subdirectory.\n\nAssume the `reduce_noise1` function is defined in a module named `reduce_noise` and has the following signature:\n```python\ndef reduce_noise1(input_path: str, output_path: str) -> None:\n    \"\"\"\n    Applies noise reduction to an audio file.\n\n    :param input_path: The path to the input audio file.\n    :param output_path: The path to save the noise-reduced audio file.\n    \"\"\"\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named remove_transaction."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_info', 'remove_inventory', 'insert_room', 'display_info']."}, {"type": "class", "instruction": "Your code should define a class named UpdateDwa."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_customer."}, {"type": "combination", "instruction": "In your code, the class UpdateDwa should have these properties ['customer']."}, {"type": "combination", "instruction": "The function remove_transaction should return a float as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_customer, which should contain these classes ['MessageProfile', 'CheckMessage']."}], "instruction_dependence": {"9": [0, 1, 2, 7], "10": [0, 1, 2, 5], "11": [0, 1, 2, 7, 8]}, "question_id": 398}
{"question": "Here's a zero-indexed integer array `nums` for you.\n\nA triplet `(i, j, k)` in the array is called a **mountain triplet** if it satisfies all the following conditions:\n\n* `i < j < k`\n* `nums[i] < nums[j]` and `nums[k] < nums[j]`\n\nPlease find the **minimum summing** mountain triplet in `nums` and return its **sum of elements**. If no such triplet exists, return `-1`.\n\n**Example 1:**\n\n```\n**Input:** nums = [8,6,1,5,3]\n**Output:** 9\n**Explanation:** The triplet (2, 3, 4) is a mountain triplet with element sum 9, because: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nThe sum of its elements is nums[2] + nums[3] + nums[4] = 9. It can be proved that there's no less summing mountain triplet.\n\n```\n\n**Example 2:**\n\n```\n**Input:** nums = [5,4,8,7,10,2]\n**Output:** 13\n**Explanation:** The triplet (1, 3, 5) is a mountain triplet with element sum 13, because: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nThe sum of its elements is nums[1] + nums[3] + nums[5] = 13. It can be proved that there's no less summing mountain triplet.\n\n```\n\n**Example 3:**\n\n```\n**Input:** nums = [6,5,4,3,4,5]\n**Output:** -1\n**Explanation:** It can be proved that there's no mountain triplet in nums.\n\n```\n\n**Note:**\n\n* `3 <= nums.length <= 50`\n* `1 <= nums[i] <= 50`\n\n\nYou should implement the following:\n```python\nclass Solution(object):\n    def minimumSum(self, nums):\n        '''\n        :type nums: List[int]\n        :rtype: int\n        '''\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the False keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, should be a global variable."}, {"type": "variable", "instruction": "Variable room, the initial value should be room."}, {"type": "variable", "instruction": "Variable room, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named retrieve_cut."}, {"type": "class", "instruction": "Your code should define a class named FilterNotificationAccount."}, {"type": "file", "instruction": "Your code should be organized in a package named display_room."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the FilterNotificationAccount class using ['bill', 'punish', 'data'] for initialization."}, {"type": "combination", "instruction": "The function retrieve_cut should take ['tys'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_room, which should contain these classes ['Request']."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "7": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 5], "12": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 9], "14": [0, 1, 2, 3, 10, 11]}, "question_id": 399}
{"question": "\n\nDesign a Python class `ListingResponseSort` that represents the sorting options for a listing response in an e-commerce platform's REST API. The class should be able to represent different sorting parameters such as relevance, price, and customer ratings. It should also indicate whether a particular sorting option is currently selected.\n\nThe class should have the following attributes:\n- `value`: A string representing the sorting parameter (e.g., '-relevance', '+price', '-rating').\n- `name`: A human-readable string representing the name of the sorting option (e.g., 'Relevance', 'Price: Low to High', 'Customer Ratings').\n- `order`: A string representing the order of the sorting (e.g., 'highest', 'lowest').\n- `selected`: A boolean indicating whether this sorting option is currently selected.\n\nAdditionally, create a unit test class `TestListingResponseSort` using the `unittest` framework to test the `ListingResponseSort` class. The test class should include methods to set up test cases, tear them down, and create instances of `ListingResponseSort` with both required and optional parameters. It should also include a test method to verify the instantiation of `ListingResponseSort` objects.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Your code should define an enumeration named Role"}, {"type": "variable", "instruction": "Variable tys, should not be a global variable."}, {"type": "variable", "instruction": "Variable tys, the initial value should be log."}, {"type": "variable", "instruction": "Variable tys should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_msg."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named FilterRequestRoom."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'Flask']."}, {"type": "combination", "instruction": "In your code, the class FilterRequestRoom should have these properties ['notification', 'room', 'user']."}, {"type": "combination", "instruction": "The function create_msg should take ['account'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_product, which should contain these functions ."}], "instruction_dependence": {"4": [0, 2], "5": [0, 2], "6": [0, 2], "8": [0, 7], "12": [0, 9], "13": [0, 7], "14": [0, 10]}, "question_id": 400}
{"question": "\n\nWrite a Python program that continuously monitors an RFID reader connected to a Raspberry Pi and logs the unique identifier (UID) of RFID tags that come into proximity with the reader. The program should also provide a function to stop the monitoring process gracefully when the user decides to terminate the program.\n\nThe program should adhere to the following requirements:\n\n1. Use the `MFRC522` library to interact with the RFID reader.\n2. Use the `RPi.GPIO` library for Raspberry Pi GPIO pin control.\n3. The program should print a message to the console when an RFID tag is detected.\n4. The UID of the detected RFID tag should be logged with a timestamp.\n5. Provide a mechanism to stop the monitoring process safely without causing GPIO warnings or errors.\n6. Include error handling for common issues that may arise during the RFID reading process.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named sort_tys."}, {"type": "class", "instruction": "Your code should define a class named SubmitMessage."}, {"type": "file", "instruction": "Your code should import the following libraries ['tensorflow', 'scikit-learn']."}, {"type": "combination", "instruction": "You should define an interface named sort_tys that includes these methods ['check_event', 'modify_status', 'process_kms']."}, {"type": "combination", "instruction": "Your code should define a class named SubmitMessage that implements the sort_tys interface."}, {"type": "combination", "instruction": "In your code, the class SubmitMessage should have these properties ['cut']."}], "instruction_dependence": {"6": [0, 1, 3], "7": [0, 1, 3, 4], "8": [0, 1, 4]}, "question_id": 401}
{"question": "\n\nDesign a Python program that simulates a Rock-Paper-Scissors game between a user and the computer. The user should be prompted to enter their choice of \"rock\", \"paper\", or \"scissors\", and the computer should randomly select its choice. The game should follow the standard rules:\n\n- Rock crushes scissors\n- Scissors cuts paper\n- Paper covers rock\n\nThe program should output the result of each round (win, lose, draw) and the choices made by both the user and the computer. The game should continue until the user decides to exit by typing \"exit\". The program should handle invalid inputs gracefully and prompt the user to enter a valid choice.\n\nAdditionally, the program should keep track of the number of wins, losses, and draws and display these statistics when the user exits the game.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should not be a global variable."}, {"type": "variable", "instruction": "Variable record should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named filter_profile."}, {"type": "class", "instruction": "Your code should define a class named Notification."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named add_record."}, {"type": "file", "instruction": "Your code should not use the following libraries ['tensorflow', 'requests']."}, {"type": "combination", "instruction": "Your code should define a class named Notification that implements the filter_profile interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_record, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "9": [0, 1, 8], "12": [0, 1, 7, 8], "13": [0, 1, 10]}, "question_id": 402}
{"question": "\n\nDesign a class `FileStatistics` that extends the functionality of the given `CInputStream` class to provide statistics about a text file. The `FileStatistics` class should be able to count the number of lines, words, and characters in a text file. A word is defined as a sequence of characters separated by whitespace. The class should provide the following public member functions:\n\n- `countLines()`: Returns the number of lines in the file.\n- `countWords()`: Returns the number of words in the file.\n- `countCharacters()`: Returns the number of characters in the file, including whitespace.\n\nThe class should handle opening and closing files properly and should provide meaningful error messages if a file cannot be opened. The class should also include a constructor that takes a `std::filesystem::path` to the file and opens it.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure queue."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable kms, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named modify_account."}, {"type": "class", "instruction": "Your code should define a class named ConfigureRecordTys."}, {"type": "file", "instruction": "Your code should not use the following libraries ['cmath', 'set', 'map']."}, {"type": "combination", "instruction": "Your code should define a class named ConfigureRecordTys that implements the modify_account interface."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "9": [0, 6, 7]}, "question_id": 403}
{"question": "Please answer in Go language. Here is the code that attempts to catch a panic but is unsuccessful. Please modify the code to accomplish the requirement.\n```go\nfunc debug_recover() {\n\tdefer func() {\n\t\tfunc() { recover() }()\n\t}()\n\tpanic(1)\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure slice."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, the initial value should be dwa."}, {"type": "function", "instruction": "Your code should not use any functions from the ['remove_token', 'get_product', 'filter_form']."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_request."}, {"type": "class", "instruction": "Your code should define a class named Product."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_data."}, {"type": "file", "instruction": "Your code should not use the following libraries ['time', 'net']."}, {"type": "combination", "instruction": "You should initialize an object named room as an instance of the Product class using ['user', 'room', 'item'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named calculate_request that includes these methods ['calculate_tys', 'analyze_cut', 'analyze_data']."}, {"type": "combination", "instruction": "Your code should define a class named Product that implements the calculate_request interface."}, {"type": "combination", "instruction": "In your code, the class Product should have these methods ['calculate_tys', 'analyze_cut', 'analyze_data']."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_data, which should contain these classes ['ProcessKms']."}, {"type": "combination", "instruction": "Your code should be organized in a package named handle_data, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 2, 5], "12": [0, 1, 2, 9], "13": [0, 1, 2, 8], "14": [0, 1, 2, 8, 9], "15": [0, 1, 2, 9], "16": [0, 1, 2, 9, 10], "17": [0, 1, 2, 10]}, "question_id": 404}
{"question": "\n\nImplement a `CharStack` class that represents a stack data structure for storing and manipulating characters. The stack should have a fixed size of 27, including the null character. The class should provide the following functionalities:\n\n1. **Constructor**: Initializes the stack.\n2. **Push**: Adds a character to the top of the stack. If the stack is full, it should print \"Stack is full\" and not add the character.\n3. **Pop**: Removes and returns the character at the top of the stack. If the stack is empty, it should print \"Stack is empty\" and return the null character (`'\\0'`).\n4. **IsEmpty**: Returns `true` if the stack is empty, `false` otherwise.\n5. **IsFull**: Returns `true` if the stack is full, `false` otherwise.\n6. **Top**: Returns the character at the top of the stack without removing it. If the stack is empty, it should return the null character (`'\\0'`).\n\nWrite a main function to demonstrate the following test cases:\n\n- Creating a `CharStack` object.\n- Pushing characters 'a' to 'z' onto the stack.\n- Attempting to push another character onto the full stack.\n- Popping all characters from the stack and printing them.\n- Attempting to pop a character from the empty stack.\n- Checking if the stack is empty after all pops.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the protected keyword."}, {"type": "structural control", "instruction": "Your code should use data structure bitset."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should be a global variable."}, {"type": "variable", "instruction": "Variable token, the initial value should be notification."}, {"type": "function", "instruction": "Your code should include a function named generate_order."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named submit_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7], "10": [0, 1, 9]}, "question_id": 405}
{"question": "\n\nDesign a Go program that reads and processes a tab-delimited file containing level type information for a game. Each line in the file represents a level type with various attributes. The program should parse this file and populate a slice of `LevelTypeRecord` structs with the data.\n\nThe file has the following format:\n- The first line is a header and should be ignored.\n- Each subsequent line represents a level type and contains the following fields, separated by tabs:\n  - Name: The name of the level type (string)\n  - Id: A unique identifier for the level type (int)\n  - Files: An array of file names associated with the level type, up to 32 entries (string array). If an entry is \"0\", it should be considered an empty string.\n  - Beta: A flag indicating whether the level type is in beta (bool). Represented in the file as \"1\" for true and \"0\" for false.\n  - Act: The act number to which the level type belongs (int)\n  - Expansion: A flag indicating whether the level type is part of an expansion (bool). Represented in the file as \"1\" for true and \"0\" for false.\n\nThe program should ignore lines that start with \"Expansion\" after the header and any empty lines.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable msg, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named search_request."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named set_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named RemoveMessage."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "combination", "instruction": "You should initialize an object named profile as an instance of the RemoveMessage class using ['log', 'punish', 'shipment'] for initialization."}, {"type": "combination", "instruction": "In your code, the class RemoveMessage should have these methods ['display_room', 'transform_kms']."}, {"type": "combination", "instruction": "The function search_request should return a int as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 18], "8": [0, 1, 2, 6, 18], "10": [0, 1, 2, 9, 18], "12": [0, 1, 2, 11, 18], "14": [0, 1, 2, 13, 18], "15": [0, 1, 2, 13, 18], "16": [0, 1, 2, 13, 18], "17": [0, 1, 2, 9, 18]}, "question_id": 406}
{"question": "\n\nWrite a program that calculates the number of trailing zeroes in the factorial of a given non-negative integer `n`. A trailing zero is any 0 that comes after all other digits, but before the decimal point in a number. For example, the number 100 has two trailing zeroes.\n\nThe factorial of a number `n` is the product of all positive integers less than or equal to `n`. It is denoted by `n!`. For example, `5! = 5 * 4 * 3 * 2 * 1 = 120`. The number of trailing zeroes in the factorial of a number is primarily determined by the number of times the number 10 is a factor in the numbers from 1 to `n`. Since 10 is the product of 2 and 5, and there are usually more 2s than 5s, the number of 5s determines the number of trailing zeroes.\n\nYour task is to implement the `Solution` class with the method `trailingZeroes` which takes an integer `n` and returns the number of trailing zeroes in `n!`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, type should be vector."}, {"type": "function", "instruction": "Your code should not use any functions from the ['generate_data', 'insert_user', 'display_info']."}, {"type": "interface", "instruction": "Your code should define an interface named delete_user."}, {"type": "class", "instruction": "Your code should define a class named HandleRecord."}, {"type": "combination", "instruction": "Your code should define a class named HandleRecord that implements the delete_user interface."}, {"type": "combination", "instruction": "In your code, the class HandleRecord should have these properties ['record', 'profile']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "9": [0, 1, 2, 7, 8], "10": [0, 1, 2, 8]}, "question_id": 407}
{"question": "\n\nDesign a Discord bot that manages role-based access control for a Minecraft server. The bot should be able to synchronize Discord roles with Minecraft server permissions, allowing only whitelisted users and administrators to access certain commands or areas within the server. The bot should also be able to determine if a Discord user is an administrator based on their roles.\n\nThe bot should have the following functionalities:\n\n1. Start the bot and connect to Discord using a given configuration and database store.\n2. Check if a Discord member is an administrator based on their roles.\n3. Check if a Discord member is whitelisted and/or an administrator based on their roles.\n4. Synchronize a Discord member's roles with the Minecraft server permissions.\n5. Determine if a role is an administrator role.\n\nWrite a Go program that implements the `Bot` struct with the methods `StartBot`, `IsAdmin`, `CheckRoles`, `Sync`, and `AdminCheck`. Ensure that the program is well-documented and includes test cases to verify the correctness of each method.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "function", "instruction": "Your code should include a function named get_user."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_message."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeProduct."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['strings', 'bytes']."}, {"type": "combination", "instruction": "The function get_user should take ['log', 'account', 'shipment'] as parameters."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 3]}, "question_id": 408}
{"question": "Please write a Java method to get the current system's temporary file storage path. If the current system is Windows, return the system's temporary folder path; if it is another operating system, return the user's home directory path. Make sure your method can automatically detect the type of operating system and return the correct path accordingly.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.File;\npublic class FilePathUtil {\n    public static String getSystemFilePath() {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "interface", "instruction": "Your code should define an interface named insert_product."}, {"type": "class", "instruction": "Your code should define a class named DisplayInventoryProduct."}, {"type": "combination", "instruction": "You should initialize an object named record as an instance of the DisplayInventoryProduct class using ['cut', 'profile', 'shipment'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named insert_product that includes these methods ['get_transaction', 'generate_form']."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"5": [0, 1, 4, 7], "6": [0, 1, 3, 7]}, "question_id": 409}
{"question": "\nDesign a C++ program that simulates the migration of image snapshots from a legacy storage system to a new storage system using a mock framework for testing. The program should be able to handle the following operations:\n\n1. Open a migration source with a given configuration.\n2. Close the migration source.\n3. Retrieve the list of snapshots available for migration.\n4. Get the size of a specific snapshot image.\n5. Read data from a specific snapshot image.\n6. List the changes between snapshots.\n\nThe program should use a mock framework to simulate the interaction with the legacy storage system, allowing for unit testing of the migration logic without the need for an actual storage system. The migration source should be configurable via a JSON object, and the program should be able to handle errors gracefully during the migration process.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should use the this keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named display_profile."}, {"type": "class", "instruction": "Your code should define a class named Profile."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['cmath', 'vector']."}, {"type": "file", "instruction": "Your code should use the function filter_view from the library queue."}, {"type": "file", "instruction": "Your code should not use the following libraries ['stdlib', 'queue', 'string']."}, {"type": "combination", "instruction": "Your code should define a class named Profile that implements the display_profile interface."}, {"type": "combination", "instruction": "In your code, the class Profile should have these methods ['get_shipment']."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 16], "10": [0, 1, 2, 3, 9, 16], "12": [0, 1, 2, 3, 11, 16], "14": [0, 1, 2, 3, 8, 9, 16], "15": [0, 1, 2, 3, 9, 16]}, "question_id": 410}
{"question": "\n\nDesign a Terraform provider for managing Snowflake resources such as databases, schemas, and tables. The provider should allow users to create, update, and delete these resources using Terraform configurations. Implement the Go functions that will be used by the Terraform provider to interact with the Snowflake service.\n\nThe provider should support the following functionalities:\n\n1. Create a new Snowflake resource (e.g., database, schema, table) with specified properties.\n2. Update an existing Snowflake resource with new properties.\n3. Delete an existing Snowflake resource.\n\nEach Snowflake resource should have a unique name and can have properties such as comment, data retention time, and tags. The provider should be able to handle different property types, including strings, booleans, integers, and lists (specifically for tags).\n\nUse the given code snippet as a starting point to implement the `CreateResource`, `UpdateResource`, and `DeleteResource` functions. These functions will be used by the Terraform provider to perform CRUD operations on Snowflake resources.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the import keyword."}, {"type": "structural control", "instruction": "Your code should use data structure struct."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named process_cut."}, {"type": "class", "instruction": "Your code should define a class named LogItem."}, {"type": "file", "instruction": "Your code should import the following libraries ['time', 'strings']."}, {"type": "combination", "instruction": "In your code, the class LogItem should have these methods ['transform_bill']."}, {"type": "combination", "instruction": "The function process_cut should take ['request', 'account', 'inventory'] as parameters."}], "instruction_dependence": {"6": [0, 1, 5], "10": [0, 1, 8], "11": [0, 1, 7]}, "question_id": 411}
{"question": "\n\nWrite a Python ROS node that publishes frames from a video file as ROS Image messages. The node should be configurable to adjust the video playback speed, scale the image size, and optionally loop the video indefinitely. The node should handle the case where the video file path is invalid or the file cannot be opened.\n\nThe node should be named `video_publisher` and should publish to the `/image` topic. The node should use the following ROS parameters:\n- `video_path`: The file path to the video that should be published.\n- `loop`: A boolean indicating whether the video should loop indefinitely. If `False`, the video should be published once and the node should shut down.\n- `scale`: A float representing the factor by which the image size should be scaled. A value of 1.0 means no scaling, less than 1.0 means downscaling, and greater than 1.0 means upscaling.\n- `fps`: The frames per second at which the video should be published. If `None`, the original video's FPS should be used.\n\nThe node should use the `cv_bridge` package to convert OpenCV images to ROS Image messages. It should also handle any exceptions that may occur during the video processing and publishing, such as `CvBridgeError` or issues with the video capture.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_user."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "combination", "instruction": "The function transform_user should take ['data', 'msg'] as parameters."}], "instruction_dependence": {"4": [0, 1, 3], "6": [0, 1, 5], "7": [0, 1, 5]}, "question_id": 412}
{"question": "\n\nWrite a program that calculates the number of distinct prime factors of the product of an array of integers. The program should include a method `distinctPrimeFactors` that takes an array of integers as input and returns the count of distinct prime factors of the product of these integers.\n\nA prime factor is a factor that is a prime number. For example, the prime factors of 28 are 2 and 7 because 28 = 2 * 2 * 7.\n\nThe program should also include a helper method `isPrime` that takes an integer as input and returns 1 if the number is prime and 0 otherwise.\n\n**Guidelines**:\n- The `distinctPrimeFactors` method should handle large products by avoiding integer overflow.\n- The `isPrime` method should be efficient for checking large numbers.\n- Include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_log."}, {"type": "function", "instruction": "Your code should not use any functions from the ['delete_customer', 'update_data']."}, {"type": "class", "instruction": "Your code should define a class named RequestBill."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.net']."}, {"type": "combination", "instruction": "You should initialize an object named record as an instance of the RequestBill class using ['credit', 'cut', 'tys'] for initialization."}], "instruction_dependence": {"4": [0, 1, 3], "9": [0, 1, 7]}, "question_id": 413}
{"question": "Please write a Java class `DataWrapper`; this class should include a method `getDecompressedStream`, which is used to get an `InputStream` that contains the decompressed data. Assume you have a method `getCompressedData` to get the original compressed data; you need to use `InflaterInputStream` in the `getDecompressedStream` method to decompress these data. Additionally, make sure to check if the `DataWrapper` object is already closed before acquiring the stream; if it is closed, throw an `IllegalStateException`. Provide a `checkIfClosed` method to perform this check.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.zip.InflaterInputStream;\npublic class DataWrapper {\n    private boolean isClosed = false;\n    private byte[] compressedData; \n    public DataWrapper(byte[] data) {\n    }\n    public synchronized InputStream getDecompressedStream() throws IllegalStateException {\n        return null;\n    }\n    private void checkIfClosed() throws IllegalStateException {\n    }\n    public void close() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a global variable."}, {"type": "variable", "instruction": "Variable report should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named handle_msg."}, {"type": "interface", "instruction": "Your code should define an interface named modify_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ManageMessage."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.nio', 'java.text']."}, {"type": "combination", "instruction": "In your code, the class ManageMessage should have these methods ['sort_transaction', 'check_info', 'retrieve_tys']."}, {"type": "combination", "instruction": "The function handle_msg should return a boolean as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 25 lines."}], "instruction_dependence": {"3": [0, 2, 13], "4": [0, 2, 13], "7": [0, 6, 13], "11": [0, 8, 13], "12": [0, 5, 13]}, "question_id": 414}
{"question": "\n\nCreate a Java program that simulates a simple division calculator which can handle multiple division operations. The calculator should be able to process an array of numerators and an array of denominators and perform division operations for corresponding pairs of numerators and denominators.\n\nThe program should meet the following requirements:\n\n1. The program should define a method named `calculateDivisions` that takes two integer arrays as parameters: one for numerators and one for denominators.\n2. The method should iterate over the arrays and perform division operations for each pair of elements.\n3. If a division by zero is attempted, the method should catch an `ArithmeticException` and print a custom message indicating that division by zero is not allowed.\n4. If the denominators array is shorter than the numerators array, resulting in an `ArrayIndexOutOfBoundsException`, the method should catch the exception, print a custom message indicating that a denominator is missing, and rethrow the exception.\n5. The main method should call `calculateDivisions` and handle any rethrown exceptions by printing a message indicating that the calculation could not be completed due to missing denominators.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure ArrayList."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Variable bill, the initial value should be view."}, {"type": "function", "instruction": "Your code should include a function named remove_order."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_message', 'update_bill']."}, {"type": "interface", "instruction": "Your code should define an interface named manage_product."}, {"type": "class", "instruction": "Your code should define a class named GenerateInventoryToken."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util']."}, {"type": "combination", "instruction": "Your code should define a class named GenerateInventoryToken that implements the manage_product interface."}, {"type": "combination", "instruction": "The function remove_order should return a double as its result."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"3": [0, 2, 12, 13], "5": [0, 4, 12, 13], "10": [0, 7, 8, 12, 13], "11": [0, 4, 12, 13]}, "question_id": 415}
{"question": "\n\nDesign a Java program that simulates a simple banking system with the following requirements:\n\n1. Implement a `BankAccount` class with the following attributes:\n   - `accountNumber` (String)\n   - `accountHolder` (String)\n   - `balance` (double)\n\n2. The `BankAccount` class should have the following methods:\n   - A constructor that initializes the account number, account holder, and balance.\n   - `deposit(double amount)`: Deposits the given amount into the account. The amount must be positive.\n   - `withdraw(double amount)`: Withdraws the given amount from the account if sufficient balance is available. The amount must be positive and not exceed the current balance.\n   - `getBalance()`: Returns the current balance of the account.\n   - `getAccountDetails()`: Returns a string representation of the account details.\n\n3. Write a `BankAccountTest` class to test the functionality of the `BankAccount` class. Include test cases for deposit, withdraw, and account details retrieval.\n\n4. Ensure that you handle exceptions for invalid operations like depositing or withdrawing negative amounts.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named handle_message."}, {"type": "file", "instruction": "Your code should be organized in a package named check_product."}, {"type": "combination", "instruction": "The function handle_message should take ['data', 'order'] as parameters."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 6]}, "question_id": 416}
{"question": "Please write a Java method that dynamically loads and executes a specified method of a specified class. Assume we have a class named `DynamicExecutor` which contains a static method called `executeDynamicMethod`. This method takes three parameters: the first parameter is the fully qualified name of the class (including the package name), the second parameter is the name of the method to be executed, and the third parameter is an array of `Object` which are the parameters of the method. If the class or method does not exist or if any other exception occurs during execution, the method should catch these exceptions and print the stack trace rather than allowing the exception to propagate. Note that the method to be executed should be a static method and should not have a return value.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\npublic class DynamicExecutor {\n    public static void executeDynamicMethod(String className, String methodName, Object[] args) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should be a global variable."}, {"type": "variable", "instruction": "Variable shipment, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named add_item."}, {"type": "interface", "instruction": "Your code should define an interface named set_order."}, {"type": "class", "instruction": "Your code should define a class named GetBill."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_profile."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.text']."}, {"type": "file", "instruction": "Your code should use the function add_item from the library java.sql."}, {"type": "combination", "instruction": "In your code, the class GetBill should have these properties ['msg']."}, {"type": "combination", "instruction": "Your code should be organized in a package named generate_profile, which should contain these classes ['Account', 'Product']."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"4": [0, 1, 3, 14], "5": [0, 1, 3, 14], "11": [0, 1, 10, 14], "12": [0, 1, 8, 14], "13": [0, 1, 8, 9, 14]}, "question_id": 417}
{"question": "\n\nImplement a Python class `CatBoostClassifierWrapper` that wraps around the `CatBoostClassifier` from the `catboost` library. This wrapper should provide a simplified interface for training and predicting with CatBoost models for classification tasks. The class should have the following features:\n\n1. The class should have a constructor that accepts three optional parameters with default values: `n_estimators=50`, `max_depth=3`, and `learning_rate=0.1`. These parameters should be used to set up the underlying `CatBoostClassifier`.\n\n2. The class should have a `fit` method that takes two arguments, `X` and `y`, where `X` is a pandas DataFrame of features, and `y` is a pandas Series of target labels. This method should train the CatBoost model on the provided data.\n\n3. The class should have a `predict` method that takes a pandas DataFrame `X` and returns a pandas Series of predictions.\n\n4. The class should have a `score` method that takes two arguments, `X` and `y`, and returns the accuracy of the model on the provided data.\n\n5. The class should have a `get_params` method that returns a dictionary of the current parameters of the underlying CatBoost model.\n\n6. The class should have class variables `name`, `primary_type`, `secondary_type`, and `tertiary_type` set to \"Catboost Classifier\", \"classification\", \"None\", and \"tree\" respectively.\n\n7. The class should have a class variable `hyperparameters` that is a dictionary with keys \"n_estimators\", \"max_depth\", and \"learning_rate\".\n\nWrite unit tests using `pytest` to verify the correctness of the `CatBoostClassifierWrapper` class. The tests should check the class variables, the return types of methods, the length of predictions, and the accuracy score. Assume that the `numeric_features_binary_classification` and `numeric_features_multi_classification` fixtures provide the necessary data for binary and multiclass classification tasks, respectively.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 13 characters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named MsgOrder."}, {"type": "file", "instruction": "Your code should be organized in a package named update_item."}, {"type": "combination", "instruction": "In your code, the class MsgOrder should have these properties ['transaction', 'message']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_item, which should contain these classes ['DeleteMsgPunish', 'UpdateNotification']."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 6], "9": [0, 1, 6, 7]}, "question_id": 418}
{"question": "Please write a Java description for a simple book management system design. Describe how the system would need a function to update the book list. When the book list changes, the system should be able to receive a list of strings containing book names and update the current book list.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\npublic class BookManager {\n    private List<String> bookList;\n    public BookManager(List<String> bookList) {\n    }\n    public void updateBookList(List<String> newBookList) {\n    }\n    public List<String> getBookList() {\n        return null;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "class", "instruction": "Your code should define a class named Request."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt', 'java.io']."}, {"type": "combination", "instruction": "In your code, the class Request should have these properties ['room', 'request', 'view']."}, {"type": "global", "instruction": "Your function should not exceed 11 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"6": [0, 4, 7, 8]}, "question_id": 419}
{"question": "\nDesign a C++ program that creates a class `ArrayX` to handle integer arrays dynamically. The class should be able to perform the following operations:\n\n1. Accept values for the array elements from the user.\n2. Display the array elements.\n3. Calculate the sum of all the elements in the array.\n4. Find the maximum value in the array.\n5. Find the minimum value in the array.\n\nThe class should have a constructor that takes the size of the array as a parameter and allocates memory for the array. It should also have a destructor to deallocate the memory when the object is destroyed.\n\nWrite a `main` function to demonstrate the functionality of the class by creating an instance, accepting values, displaying them, and then displaying the sum, maximum, and minimum values of the array.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "structural control", "instruction": "Your code should use data structure stack."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be map."}, {"type": "function", "instruction": "Your code should include a function named modify_product."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_token."}, {"type": "class", "instruction": "Your code should define a class named RequestDwa."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['set']."}, {"type": "file", "instruction": "Your code should use the function modify_product from the library map."}, {"type": "combination", "instruction": "You should define an interface named retrieve_token that includes these methods ['get_room', 'manage_room', 'configure_notification']."}, {"type": "combination", "instruction": "Your code should define a class named RequestDwa that implements the retrieve_token interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_message, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "10": [0, 1, 9], "13": [0, 1, 12], "14": [0, 1, 8], "15": [0, 1, 8, 9], "16": [0, 1, 11]}, "question_id": 420}
{"question": "Implement a function `compile_time_add` that computes addition during the compilation period using C++ templates. The requirements are as follows:\n1. Support for mixed addition of different types\n2. Support for adding any number of digits", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the static_cast keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named generate_credit."}, {"type": "interface", "instruction": "Your code should define an interface named update_order."}, {"type": "class", "instruction": "Your code should define a class named RemoveItemLog."}, {"type": "combination", "instruction": "You should define an interface named update_order that includes these methods ['manage_item', 'sort_cut']."}, {"type": "combination", "instruction": "Your code should define a class named RemoveItemLog that implements the update_order interface."}], "instruction_dependence": {"7": [0, 1, 5], "8": [0, 1, 5, 6]}, "question_id": 421}
{"question": "\n\nDesign a Java program that manages a simple alarm system. The system should be able to schedule and cancel alarms. Each alarm has a unique identifier, a time at which it should go off, and a message to display when it goes off. The program should use an `AlarmManager` interface to interact with the underlying alarm service, which can schedule and cancel alarms.\n\nThe `AlarmManager` interface should have two methods: `scheduleAlarm(Alarm alarm)` and `cancelAlarm(Alarm alarm)`. Both methods return a `Completable` to indicate the success or failure of the operation.\n\nThe `Alarm` class should contain at least the following fields: `String id`, `LocalTime time`, and `String message`.\n\nWrite the `CancelAlarm` use case class that implements the `UseCaseCompletable<Alarm>` interface. This use case should cancel an existing alarm using the `AlarmManager`.\n\nAdditionally, provide a simple implementation of the `AlarmManager` interface that can store and manage alarms in memory. Implement test cases to verify that the `CancelAlarm` use case correctly cancels alarms.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure List."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named filter_user."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named analyze_profile."}], "instruction_dependence": {"7": [0, 1, 2, 6]}, "question_id": 422}
{"question": "\n\nDesign a system that processes a batch of telemetry data using a series of processing steps. Each step in the processing chain may perform actions such as validation, transformation, enrichment, or filtering of the data. The system should be able to handle different types of telemetry data and apply a series of processors to each batch of data.\n\nImplement a `TelemetryProcessor` interface with a `ProcessTelemetry` method that takes a context and a pointer to a `TelemetryBatch`. A `TelemetryBatch` is a slice of `TelemetryData`, where `TelemetryData` is a struct that can hold various telemetry information.\n\nCreate a `ChainedTelemetryProcessor` type that implements the `TelemetryProcessor` interface. This type should be able to hold a slice of `TelemetryProcessor` and execute them in sequence. If any processor in the chain returns an error, the processing should stop, and the error should be returned.\n\nProvide test cases to verify that the `ChainedTelemetryProcessor` correctly processes a batch of telemetry data through all the processors in the chain unless an error occurs.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure struct."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_dwa', 'search_item', 'sort_tys', 'add_cut']."}, {"type": "interface", "instruction": "Your code should define an interface named delete_form."}, {"type": "interface", "instruction": "The interface names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "class", "instruction": "Your code should define a class named Data."}, {"type": "file", "instruction": "Your code should be organized in a package named create_shipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['bytes', 'sort']."}, {"type": "combination", "instruction": "You should initialize an object named record as an instance of the Data class using ['data', 'request', 'record'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_shipment, which should contain these functions ."}], "instruction_dependence": {"4": [0, 3], "7": [0, 6], "11": [0, 8], "12": [0, 9]}, "question_id": 423}
{"question": "\n\nDesign a Java class `VotingSessionManager` that manages the voting details for different voting sessions in an organization. The class should be able to add new voting details, retrieve voting details by ID, and list all voting details for a given date. The voting details are represented by the `DetalheVotacao` class provided in the given code snippet.\n\nThe `VotingSessionManager` should implement the following functionalities:\n\n1. `addVotingDetail(DetalheVotacao detail)`: Adds a new `DetalheVotacao` object to the manager. If a voting detail with the same ID already exists, it should not be added, and the method should return `false`. Otherwise, it should be added, and the method should return `true`.\n\n2. `getVotingDetailById(String id)`: Retrieves a `DetalheVotacao` object by its ID. If no such voting detail exists, return `null`.\n\n3. `listVotingDetailsByDate(LocalDate date)`: Returns a list of all `DetalheVotacao` objects that have the same date as the one provided. If no voting details are found for the given date, return an empty list.\n\nEnsure that the `VotingSessionManager` class is well-encapsulated and handles null inputs gracefully by throwing appropriate exceptions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should use the boolean keyword."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, type should be Set."}, {"type": "variable", "instruction": "Variable event, the initial value should be room."}, {"type": "variable", "instruction": "Variable event should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named manage_tys."}, {"type": "class", "instruction": "Your code should define a class named RoomToken."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.io', 'java.sql']."}, {"type": "file", "instruction": "Your code should use the function calculate_message from the library java.math."}, {"type": "combination", "instruction": "You should define an interface named manage_tys that includes these methods ['remove_log']."}, {"type": "combination", "instruction": "In your code, the class RoomToken should have these methods ['remove_log']."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_room, which should contain these classes ['AccountTys']."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4], "6": [0, 1, 2, 3, 4], "7": [0, 1, 2, 3, 4], "12": [0, 1, 2, 3, 11], "13": [0, 1, 2, 3, 8], "14": [0, 1, 2, 3, 9], "15": [0, 1, 2, 3, 9, 10]}, "question_id": 424}
{"question": "\n\nDesign a Go program that manages a collection of `PipelineMetadata` objects representing different versions of data processing pipelines. The program should allow adding new pipeline metadata, retrieving metadata by type, and listing all pipelines with their versions. The `PipelineMetadata` type has already been defined in the given code snippet.\n\nThe program should implement the following functionalities:\n\n1. `AddPipeline(metadata PipelineMetadata)`: Adds a new `PipelineMetadata` object to the collection. If a pipeline with the same type and version already exists, it should not be added again, and the function should return an error.\n\n2. `GetPipelineByType(pipelineType string) ([]PipelineMetadata, error)`: Retrieves all pipeline metadata objects with the specified type. If no pipelines are found with the given type, it should return an error.\n\n3. `ListAllPipelines() []PipelineMetadata`: Lists all pipelines in the collection with their types and versions.\n\nWrite a Go program that includes the `PipelineMetadata` type from the given code snippet and implements the above functionalities. Provide test cases to verify the correctness of each function.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "variable", "instruction": "Variable log, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named Log."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_transaction."}, {"type": "combination", "instruction": "Your code should be organized in a package named generate_transaction, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 3], "7": [0, 1, 6], "9": [0, 1, 8]}, "question_id": 425}
{"question": "\nDesign a system that allows for asynchronous notification handling in a simulated environment where agents and crowds can perform various activities. The system should be able to notify specific workers about agent and crowd activities and allow for waiting on these notifications with optional filters.\n\nThe system should include the following features:\n1. A subsystem (`UWorkerUpstreamNotifySubsystem`) that can notify workers about agent and crowd activities.\n2. The ability to wait for any agent or crowd notification, with the option to filter notifications based on certain criteria.\n3. The ability to wait for notifications only once or continuously until manually stopped.\n\nImplement the following classes and their member functions:\n- `UWorkerUpstreamNotifySubsystem`\n  - `NotifyCrowdActivityWorker`\n  - `NotifyWorldActivityWorker`\n- `UAsyncAction_WaitAnyAgentNotify`\n  - `WaitAnyAgentNotify`\n  - `Activate`\n  - `EndAction`\n  - `OnAgentNotifyCallback`\n- `UAsyncAction_WaitAnyAgentNotifyFiltered`\n  - `WaitAnyAgentNotifyFiltered`\n  - `Activate`\n  - `EndAction`\n  - `OnAgentNotifyCallback`\n- `UAsyncAction_WaitAnyCrowdNotify`\n  - `WaitAnyCrowdNotify`\n  - `Activate`\n  - `EndAction`\n  - `OnCrowdNotifyCallback`\n- `UAsyncAction_WaitAnyCrowdNotifyFiltered`\n  - `WaitAnyCrowdNotifyFiltered`\n  - `Activate`\n  - `EndAction`\n  - `OnCrowdNotifyCallback`\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named create_record."}, {"type": "function", "instruction": "Your code should not use any functions from the ['handle_report', 'add_bill']."}, {"type": "interface", "instruction": "Your code should define an interface named sort_data."}, {"type": "class", "instruction": "Your code should define a class named PunishTys."}, {"type": "file", "instruction": "Your code should import the following libraries ['vector', 'iostream']."}, {"type": "file", "instruction": "Your code should use the function create_record from the library stack."}, {"type": "combination", "instruction": "You should define an interface named sort_data that includes these methods ['create_view']."}, {"type": "combination", "instruction": "In your code, the class PunishTys should have these methods ['create_view']."}, {"type": "combination", "instruction": "The function create_record should take ['credit', 'room'] as parameters."}, {"type": "combination", "instruction": "The function create_record should return a set as its result."}], "instruction_dependence": {"6": [0, 1, 5], "12": [0, 1, 11], "13": [0, 1, 9], "14": [0, 1, 10], "15": [0, 1, 7], "16": [0, 1, 7]}, "question_id": 426}
{"question": "\n\nDesign a Kubernetes node drainer that respects PodDisruptionBudgets.\n\nIn a Kubernetes cluster, it is sometimes necessary to drain nodes to perform maintenance or to decommission them. Draining a node involves safely evicting all the pods running on it, while respecting any PodDisruptionBudgets (PDBs) that have been set. PDBs are policies that limit the number of concurrently disrupted pods in a replicated application, ensuring high availability.\n\nYour task is to implement a `NodeDrainer` in Go that performs the following steps:\n\n1. List all the pods running on a given node.\n2. Evict these pods using the Kubernetes Eviction API, which respects PDBs.\n3. Wait for the pods to be successfully deleted before completing the drain operation.\n\nThe provided code snippet contains a simplified version of such a drainer, which you can use as a starting point. Your implementation should be robust, handle errors gracefully, and log relevant information for debugging purposes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named manage_bill."}, {"type": "interface", "instruction": "Your code should define an interface named filter_view."}, {"type": "class", "instruction": "Your code should define a class named Request."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['fmt', 'os']."}, {"type": "combination", "instruction": "Your code should define a class named Request that implements the filter_view interface."}, {"type": "combination", "instruction": "In your code, the class Request should have these methods ['execute_shipment', 'create_data', 'get_kms']."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 5, 15], "11": [0, 1, 10, 15], "13": [0, 1, 9, 10, 15], "14": [0, 1, 10, 15]}, "question_id": 427}
{"question": "\n\nCreate a Java class `PetTypesManager` that automates the management of pet types on a web application using Selenium WebDriver. The web application has a page where users can add, edit, and delete pet types. Each pet type has a name. The `PetTypesManager` class should provide methods to perform the following actions:\n\n1. Add a new pet type with a given name.\n2. Check if a pet type with a specific name exists.\n3. Edit an existing pet type's name to a new name.\n4. Delete a pet type with a specific name.\n5. Navigate back to the home screen of the web application.\n\nThe class should handle any necessary waits implicitly to ensure elements are available before interactions. Assume that the web application has the following structure:\n\n- A button to add a new pet type, identified by the text 'Add'.\n- A button to navigate back to the home screen, identified by the text 'Home'.\n- A list of existing pet types displayed in a table with each row containing the pet type name, an edit button, and a delete button.\n- An input field to enter the name of a pet type, identified by the id 'name'.\n- A submit button to save the new or edited pet type, identified by the attribute `type='submit'`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the extends keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named calculate_view."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named EventMessage."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_account."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "combination", "instruction": "In your code, the class EventMessage should have these properties ['info', 'msg', 'tys']."}, {"type": "combination", "instruction": "The function calculate_view should take ['data'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_account, which should contain these classes ['Item', 'Room', 'GetRoom']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 5, 7], "10": [0, 1, 2, 3, 4, 5, 9], "14": [0, 1, 2, 3, 4, 5, 11], "15": [0, 1, 2, 3, 4, 5, 9], "16": [0, 1, 2, 3, 4, 5, 11, 12]}, "question_id": 428}
{"question": "\n\nDesign a C++ program that simulates a network stack manager for managing various communication interfaces and protocols. The program should be able to handle TCP/IP clients and servers, both IPv4 and IPv6, as well as serial communication. It should also support adding and removing communication stacks and ports, and provide virtual terminal (VTO) routing capabilities.\n\nThe program should include the following functionalities:\n1. Initialize a StackManager with a specified logging level and log file.\n2. Add and remove TCP clients and servers for both IPv4 and IPv6.\n3. Add and remove serial communication interfaces.\n4. Add and remove communication stacks and ports.\n5. Start and stop VTO routers on specific stacks.\n6. Provide a way to write data to VTO channels.\n\nThe StackManager should use a logging system to log events and should be able to add custom log hooks. It should also gracefully shut down, cleaning up all resources.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the extern keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure stack."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named analyze_data."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_shipment', 'filter_message']."}, {"type": "interface", "instruction": "Your code should define an interface named delete_kms."}, {"type": "class", "instruction": "Your code should define a class named Product."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_punish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['set', 'algorithm', 'string']."}, {"type": "combination", "instruction": "You should initialize an object named dwa as an instance of the Product class using ['shipment'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named Product that implements the delete_kms interface."}, {"type": "combination", "instruction": "In your code, the class Product should have these methods ['insert_bill']."}, {"type": "combination", "instruction": "The function analyze_data should return a bool as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "10": [0, 1, 2, 9], "13": [0, 1, 2, 9], "14": [0, 1, 2, 8, 9], "15": [0, 1, 2, 9], "16": [0, 1, 2, 5]}, "question_id": 429}
{"question": "Please convert the following code into cpp, with the function signature as `std::string solve(long N)`. Note:\n1. Only implement the target function and include necessary packages; do not generate any other code.\n\n```cpp\n\nstd::string solve(long N) {\n    \n    return std::bitset<64>(std::to_string(N)).to_string().substr(2);\n}\n\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the public keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable shipment, type should be float."}, {"type": "variable", "instruction": "Variable shipment, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named submit_product."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named ProcessInfo."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['stack']."}, {"type": "combination", "instruction": "In your code, the class ProcessInfo should have these properties ['status']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "7": [0, 1, 2, 4], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "13": [0, 1, 2, 10]}, "question_id": 430}
{"question": "\n\nWrite a Java program to implement a method that takes an integer array and a target value, and returns the indices of the two numbers such that they add up to the target value. Assume that each input would have exactly one solution, and you may not use the same element twice. The method should be called `findTwoSum` and it should return an array of two integers. If no such indices exist, the method should return an array containing two `-1` values.\n\nThe program should also contain a `main` method to read the size of the array and its elements from the user, as well as the target sum. Then, it should call the `findTwoSum` method and print the indices of the two numbers.\n\n### Guidelines:\n- The `findTwoSum` method should have the following signature: `public static int[] findTwoSum(int[] nums, int target)`.\n- The `main` method should handle the user input and output as shown in the given code snippet.\n- The program should handle any invalid input by printing an appropriate message and not crashing.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the char keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should not be a global variable."}, {"type": "variable", "instruction": "Variable record, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_message."}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_item', 'execute_status', 'process_profile']."}, {"type": "interface", "instruction": "Your code should define an interface named submit_log."}, {"type": "class", "instruction": "Your code should define a class named SetPunish."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_room."}, {"type": "combination", "instruction": "You should define an interface named submit_log that includes these methods ['create_shipment']."}, {"type": "combination", "instruction": "Your code should define a class named SetPunish that implements the submit_log interface."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "12": [0, 1, 9], "13": [0, 1, 9, 10]}, "question_id": 431}
{"question": "\n\nDesign a C++ program that simulates a simple graphical user interface (GUI) for creating and deleting shapes in a drawing application. The program should use the provided code snippet as a starting point and expand upon it to include the following functionalities:\n\n1. Define a `Figure` class hierarchy with at least two derived classes, such as `Circle` and `Rectangle`. Each derived class should override a virtual `draw()` method that prints the shape's type and its dimensions to the console.\n\n2. Implement the `DynamicArray` and `DynamicList` templates that can store `std::unique_ptr<Figure>` objects. These containers should support adding and removing elements.\n\n3. The `ArrayCreation` and `ListCreation` namespaces should contain static methods `createRandomShapes` and `deleteAllShapes`. The `createRandomShapes` method should populate the given container with a specified number of random shapes, while `deleteAllShapes` should clear the container.\n\n4. Implement the `GuiArrayCreation` class with methods `checkForShapeArrayCreation`, `checkForShapeArrayDeletion`, `checkForShapeListCreation`, and `checkForShapeListDeletion`. These methods simulate button presses in a GUI and call the appropriate methods from `ArrayCreation` or `ListCreation`.\n\n5. Write a `main` function that creates instances of `DynamicArray` and `DynamicList`, simulates button presses to create and delete shapes, and prints the contents of the containers to the console.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_tys."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named update_customer."}, {"type": "class", "instruction": "Your code should define a class named OrderInventory."}, {"type": "file", "instruction": "Your code should be organized in a package named update_user."}, {"type": "combination", "instruction": "In your code, the class OrderInventory should have these properties ['event', 'token', 'punish']."}, {"type": "combination", "instruction": "The function transform_tys should take ['log'] as parameters."}, {"type": "combination", "instruction": "The function transform_tys should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_user, which should contain these classes ['LogNotification', 'GetNotification', 'CalculateProfileReport']."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_user, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 1, 4, 17], "6": [0, 1, 4, 17], "8": [0, 1, 7, 17], "12": [0, 1, 10, 17], "13": [0, 1, 7, 17], "14": [0, 1, 7, 17], "15": [0, 1, 10, 11, 17], "16": [0, 1, 11, 17]}, "question_id": 432}
{"question": "\n\nImplement a class `Solution` with a public method `removeStars` that takes a string `s` and returns a new string after performing the following operation:\n\nFor each character in the string `s`, if the character is an asterisk (`*`), the most recent non-asterisk character (if any) is removed from the string. Otherwise, the character is appended to the result. The operation is performed from left to right.\n\nWrite a program that demonstrates the functionality of the `Solution` class with a few test cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the static_cast keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Variable bill, should be a global variable."}, {"type": "variable", "instruction": "Variable bill, the initial value should be product."}, {"type": "variable", "instruction": "Variable bill should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named execute_msg."}, {"type": "class", "instruction": "Your code should define a class named AddInventoryNotification."}, {"type": "file", "instruction": "Your code should import the following libraries ['string']."}, {"type": "combination", "instruction": "Your code should define a class named AddInventoryNotification that implements the execute_msg interface."}, {"type": "combination", "instruction": "In your code, the class AddInventoryNotification should have these properties ['record', 'tys', 'cut']."}, {"type": "combination", "instruction": "In your code, the class AddInventoryNotification should have these methods ['submit_data']."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 14], "6": [0, 1, 2, 4, 14], "7": [0, 1, 2, 4, 14], "11": [0, 1, 2, 8, 9, 14], "12": [0, 1, 2, 9, 14], "13": [0, 1, 2, 9, 14]}, "question_id": 433}
{"question": "\n\nCreate a text-based Minesweeper game that can be played through a command-line interface. The game should allow a player to start a new game with a specific bet amount, open cells, and place flags on cells they suspect contain mines. The game should follow these rules:\n\n1. The game board is a 5x5 grid.\n2. There are 5 mines randomly placed on the board.\n3. The player starts with a certain amount of coins and can make a bet to start a new game.\n4. The player loses the game if they open a cell containing a mine, losing the bet amount.\n5. The player wins the game if they successfully place flags on all the mines, doubling their bet amount.\n6. The game should provide feedback for each action (start game, open cell, place flag, win, lose).\n7. The game should display the board after each action, with the following symbols:\n   - \"🟨\" for an unopened cell\n   - \"🚩\" for a cell with a flag\n   - \"💣\" for a revealed mine (after losing)\n   - \"0️⃣\" to \"8️⃣\" for opened cells, indicating the number of adjacent mines\n8. The game should enforce a minimum bet of 1000 coins and a maximum bet of 1000000 coins.\n9. The game should validate that the player has enough coins to make the bet.\n10. The game should allow the player to open a cell or place a flag by specifying the coordinates (e.g., \"open 3 2\" or \"flag 1 4\").\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the ['add_info', 'configure_view']."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_message."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named SearchUser."}, {"type": "combination", "instruction": "Your code should define a class named SearchUser that implements the calculate_message interface."}], "instruction_dependence": {"7": [0, 1, 6], "9": [0, 1, 6, 8]}, "question_id": 434}
{"question": "\nDesign a class `EnemyCat` that represents an enemy cat character in a game. The `EnemyCat` class should inherit from a base class `Character` and should be controlled by an AI controller class `EnemyCatAIController`. The `EnemyCat` class should have the following features:\n\n1. The `EnemyCat` should be able to tick every frame, which means it should have a method `Tick` that is called with a `DeltaTime` parameter indicating the time elapsed since the last frame.\n2. The `EnemyCat` should have a constructor that sets the AI controller class to `EnemyCatAIController`.\n3. The `EnemyCat` should have a method `BeginPlay` that is called when the game starts or when the `EnemyCat` is spawned.\n4. The `EnemyCat` should have a method `OnHealthDepleted` that is called when the `EnemyCat`'s health reaches zero. This method should print a message indicating that the enemy cat has been defeated.\n\nImplement the `EnemyCat` class in C++ and provide a simple `main` function to demonstrate its usage. Also, provide a mock implementation of the `Character` base class and the `EnemyCatAIController` class for the purpose of this example.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should use the struct keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Your code should define an enumeration named Mode"}, {"type": "variable", "instruction": "Variable credit, the initial value should be info."}, {"type": "variable", "instruction": "Variable credit, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_profile."}, {"type": "interface", "instruction": "Your code should define an interface named display_view."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TokenInfo."}, {"type": "file", "instruction": "Your code should be organized in a package named set_msg."}, {"type": "combination", "instruction": "You should initialize an object named event as an instance of the TokenInfo class using ['message', 'order', 'form'] for initialization."}, {"type": "combination", "instruction": "The function generate_profile should return a vector as its result."}, {"type": "global", "instruction": "Your function should not exceed 12 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 15], "7": [0, 1, 2, 4, 15], "10": [0, 1, 2, 9, 15], "13": [0, 1, 2, 11, 15], "14": [0, 1, 2, 8, 15]}, "question_id": 435}
{"question": "\n\nDesign a Go package named `hydra` that provides a custom HTTP client with the ability to set default headers for all outgoing requests. The package should expose a function `newClientWithDefaultHeaders` that returns a new HTTP client with the capability to include default headers in every request it makes. The default headers should be customizable at the time of client creation.\n\nThe package should also define a custom transport `transportWithDefaultHeaders` that implements the `http.RoundTripper` interface. This custom transport should be responsible for injecting the default headers into each request before it is sent.\n\nThe problem requires you to:\n1. Implement the `newClientWithDefaultHeaders` function to create a new client with default headers.\n2. Implement the `transportWithDefaultHeaders` struct and its `RoundTrip` method to ensure that the default headers are added to each request.\n3. Write test cases to verify that the default headers are correctly added to each outgoing request.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named add_punish."}, {"type": "class", "instruction": "Your code should define a class named SearchDwaMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named create_status."}, {"type": "combination", "instruction": "You should define an interface named add_punish that includes these methods ['filter_message', 'delete_form']."}, {"type": "combination", "instruction": "In your code, the class SearchDwaMsg should have these properties ['item']."}, {"type": "combination", "instruction": "In your code, the class SearchDwaMsg should have these methods ['filter_message', 'delete_form']."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8, 16], "13": [0, 1, 2, 3, 4, 10, 16], "14": [0, 1, 2, 3, 4, 11, 16], "15": [0, 1, 2, 3, 4, 11, 16]}, "question_id": 436}
{"question": "\n\nDesign a Go package named `downloader` that provides functionality to download images from the internet with the ability to display the download progress. The package should expose two main functions: `DownloadPhoto` and `DisplayProgress`.\n\nThe `DownloadPhoto` function should accept an API key and a URL to an image as parameters. It should download the image to the local file system and return an error if the download fails.\n\nThe `DisplayProgress` function should also accept an API key and a URL to an image. It should simulate the download process and display the progress percentage to the console. The progress should be updated every second until it reaches 100%.\n\nBoth functions should validate the API key format using a simple check (e.g., the key should be a non-empty string). If the API key is invalid, the functions should return an error.\n\nWrite unit tests for both functions to ensure they work as expected. The tests should mock the actual download and progress display to avoid network dependency during testing.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Your code should define an enumeration named Mode"}, {"type": "variable", "instruction": "Variable order, should be a global variable."}, {"type": "variable", "instruction": "Variable order should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_request."}, {"type": "interface", "instruction": "Your code should define an interface named execute_message."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named RequestNotification."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "You should initialize an object named bill as an instance of the RequestNotification class using ['order', 'msg'] for initialization."}, {"type": "combination", "instruction": "In your code, the class RequestNotification should have these methods ['search_product']."}, {"type": "combination", "instruction": "The function calculate_request should return a string as its result."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 16], "7": [0, 1, 2, 4, 16], "10": [0, 1, 2, 9, 16], "12": [0, 1, 2, 11, 16], "13": [0, 1, 2, 11, 16], "14": [0, 1, 2, 11, 16], "15": [0, 1, 2, 8, 16]}, "question_id": 437}
{"question": "Please design a simple Java program to simulate a basic weather system. In this system, we need to be able to return the current weather conditions for a given city name. To simplify the problem, we assume there are only three cities: Beijing, Shanghai, and Guangzhou, with their weather conditions being sunny, cloudy, and rainy, respectively. Please implement a class named `WeatherSystem`, which contains a method named `getWeather` that accepts a string parameter (city name) and returns the corresponding city's weather condition. If the input city is not in our list, please return a message informing the user that the city name is invalid.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class WeatherSystem {\n    private Map<String, String> weatherData;\n    public WeatherSystem() {\n    }\n    public String getWeather(String cityName) {\n    }\n    public static void checkWeather() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named submit_order."}, {"type": "class", "instruction": "Your code should define a class named StatusForm."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named get_info."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.net']."}, {"type": "file", "instruction": "Your code should use the function sort_tys from the library java.util."}, {"type": "combination", "instruction": "Your code should define a class named StatusForm that implements the submit_order interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "9": [0, 1, 2, 8, 14], "12": [0, 1, 2, 11, 14], "13": [0, 1, 2, 7, 8, 14]}, "question_id": 438}
{"question": "\n\nIn a game modding community, there is a need to maintain a database of known \"bad\" mod files that cause issues with the game. These files are identified by their MD5 checksums. Your task is to create a program that can check if a given mod file is on the \"bad\" list and provide the corresponding mod name and version.\n\nWrite a C++ program that defines a structure to represent a mod file entry with the following information: file path, MD5 checksum, and mod description. The program should include a function `isBadMod` that takes a file path and an MD5 checksum (as an array of 16 bytes) and returns a string with the mod description if the file is on the \"bad\" list, or an empty string if it is not.\n\nThe program should also include a function `printBadModInfo` that takes a file path and an MD5 checksum and prints out whether the file is on the \"bad\" list and, if so, its description.\n\nUse the given code snippet as a starting point to define the `MD5ModFileEntry` structure and the `badMOD` array containing the \"bad\" mod entries. Implement the `isBadMod` and `printBadModInfo` functions, and provide test cases to verify the correctness of your solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure set."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, the initial value should be bill."}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named search_product."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named sort_report."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'cmath']."}, {"type": "file", "instruction": "Your code should use the function search_product from the library iostream."}, {"type": "combination", "instruction": "You should define an interface named sort_report that includes these methods ['update_inventory', 'execute_notification']."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"6": [0, 1, 5, 17], "7": [0, 1, 5, 17], "9": [0, 1, 8, 17], "11": [0, 1, 10, 17], "13": [0, 1, 12, 17], "15": [0, 1, 14, 17], "16": [0, 1, 10, 17]}, "question_id": 439}
{"question": "\n\nIn a certain kingdom, there is a tradition that involves a group of people sitting in a circle and playing a game to choose their leader. The game is played as follows:\n\n1. All the candidates sit in a circle.\n2. They start counting off around the circle, beginning with a randomly chosen person and proceeding around the circle in a fixed direction.\n3. In each step, they count off a prime number and the person at that position is eliminated from the circle.\n4. The counting continues by skipping the eliminated person and starting with the next person.\n5. The last person remaining in the circle is chosen as the leader.\n\nGiven the number of candidates `n`, your task is to determine the position of the last remaining person in the circle.\n\nWrite a program that implements the above game and outputs the position of the last remaining person. The program should be efficient and able to handle a large number of candidates.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, type should be char."}, {"type": "interface", "instruction": "Your code should define an interface named display_message."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named NotificationRequest."}, {"type": "file", "instruction": "Your code should be organized in a package named set_kms."}, {"type": "combination", "instruction": "In your code, the class NotificationRequest should have these methods ['configure_event', 'search_report']."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "11": [0, 1, 9]}, "question_id": 440}
{"question": "Implement the template class `template <typename T, size_t kSize = 8> class AutoVec` in C++, similar to `std::vector`. `AutoVec` will place the first part of the array on the `stack` and the tail of the array on the `heap`, enhancing the performance of short `vector`.\n1. Implement a constructor `AutoVec(size_t size, const T default_value = T())`, which constructs an `AutoVec` with `size` number of `default_value`.\n2. Implement copy constructor/copy assignment function/move constructor/move assignment function.\n3. Overload the subscript operator for easier element access.\n4. Implement the interface `template <class... Args> void EmplaceBack(Args&&... args)` to insert an element at the end of the buffer.\n5. Implement the interface `void PopBack()` to delete an element from the end.\n6. Implement the interface `T &Front(), const T &Front() const` to get the front element.\n7. Implement the interface `T &Back(), const T &Back() const` to get the end element.\n8. Implement the interface `T& GetBack(), const T& GetBack() const` to get the end element.\n9. Implement the interface `bool IsEmpty() const` to check whether `AutoVec` is empty.\n10. Implement the interface `size_t Size()` to get the element count.\n11. Implement the interface `void Clear()` to clear the buffer.\n12. Implement the interface `void Resize(size_t new_size, const T default_value = T())` which sets the `AutoVec` size to `size`. If the size is increased, elements are removed from the end. If the buffer gets bigger, elements are inserted at the end and default constructed with `default_value`.\n13. Implement the interface `void Clear()` to clear the array.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should not be a global variable."}, {"type": "variable", "instruction": "Variable shipment should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named configure_customer."}, {"type": "class", "instruction": "Your code should define a class named SetProduct."}, {"type": "combination", "instruction": "You should initialize an object named account as an instance of the SetProduct class using ['request'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named configure_customer that includes these methods ['execute_cut', 'submit_shipment']."}, {"type": "combination", "instruction": "Your code should define a class named SetProduct that implements the configure_customer interface."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"3": [0, 2, 10], "4": [0, 2, 10], "7": [0, 6, 10], "8": [0, 5, 10], "9": [0, 5, 6, 10]}, "question_id": 441}
{"question": "Assume you are developing a book management system and need to implement a feature to check whether a book has an audiobook version.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nimport java.util.Optional;\nclass Book {\n    private String title;\n    private Optional<String> audiobook;\n    public Book(String title, Optional<String> audiobook) {}\n    public Optional<String> getAudiobook() {}\n}\nclass AudiobookChecker {\n    public void checkAudiobook(Book book, Optional<String> expectedAudiobook) throws AudiobookMismatchException {}\n}\nclass AudiobookMismatchException extends Exception {\n    public AudiobookMismatchException(String message) {}\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure Queue."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer, type should be ArrayList."}, {"type": "variable", "instruction": "Variable customer, should be a global variable."}, {"type": "variable", "instruction": "Variable customer, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named generate_product."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named display_profile."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.awt']."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_profile, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "9": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 7], "12": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 13]}, "question_id": 442}
{"question": "\n\nWrite a Go program that calculates the factorial of a given non-negative integer using arbitrary precision arithmetic. The factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. It is denoted by `n!`. For example, the factorial of 5 (5!) is `5 * 4 * 3 * 2 * 1 = 120`.\n\nThe program should define a function `Factorial` that takes a `*big.Int` as its argument and returns a `*big.Int` representing the factorial of the input number. The function should handle large numbers that exceed the size of standard integer types.\n\nThe program should include a main function that demonstrates the use of the `Factorial` function with a few test cases. The test cases should verify that the function correctly computes the factorial for small numbers, as well as for larger numbers that require arbitrary precision arithmetic.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the map keyword."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "Variable token, type should be struct."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "variable", "instruction": "Variable token, the initial value should be account."}, {"type": "class", "instruction": "Your code should define a class named RemoveProfileReport."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named get_message."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_message, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 2, 3], "6": [0, 1, 2, 3], "7": [0, 1, 2, 3], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10]}, "question_id": 443}
{"question": "\n\nDesign a class named `Fixed` that represents a fixed-point number. A fixed-point number is a representation of a real number that keeps a fixed number of decimal places. For this exercise, the fixed-point number will have 8 fractional bits, which means the real number is stored as an integer but is interpreted as having 8 bits to the right of the binary point.\n\nThe class should have the following features:\n- A private integer to store the fixed-point number.\n- A static constant integer to store the number of fractional bits (which is 8 for this exercise).\n- A default constructor that initializes the fixed-point number to 0 and prints \"Default constructor called\".\n- A copy constructor that takes another `Fixed` object and copies its value, printing \"Copy constructor called\".\n- A destructor that prints \"Destructor called\".\n- A copy assignment operator that copies the value from another `Fixed` object and prints \"Copy assignment operator called\".\n- A member function `getRawBits` that returns the raw integer value of the fixed-point number and prints \"getRawBits member function called\".\n- A member function `setRawBits` that sets the raw integer value of the fixed-point number and prints \"setRawBits member function called\".\n\nWrite a main function to demonstrate the use of the `Fixed` class by creating a default `Fixed` object, copying it to another object, and using the `getRawBits` and `setRawBits` member functions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure list."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named retrieve_msg."}, {"type": "file", "instruction": "Your code should not use the following libraries ['stdlib', 'iostream']."}, {"type": "combination", "instruction": "The function retrieve_msg should take ['punish', 'dwa'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 4, 9], "8": [0, 1, 6, 9]}, "question_id": 444}
{"question": "\n\nDesign a Java program that simulates a simple chemical database application. The application should allow users to add and view information about molecules. Each molecule has a unique identifier (ID), a chemical formula, and a name. The application should provide the following functionalities:\n\n1. Add a new molecule to the database with a unique ID, chemical formula, and name.\n2. Retrieve and display information about a molecule when given its ID.\n3. List all molecules in the database.\n\nYour task is to create an interface `MoleculeDatabase` that defines the methods for adding and retrieving molecule information. Then, implement this interface in a class `SimpleMoleculeDatabase` that uses an internal data structure to store the molecule information. Additionally, create a class `Molecule` to represent a molecule's data.\n\nProvide a main class `ChemicalDatabaseApp` with a simple text-based user interface that allows users to interact with the molecule database. The user interface should provide options to add a new molecule, view a molecule's information by ID, and list all molecules.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use data structure Set."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Your code should define an enumeration named Direction"}, {"type": "variable", "instruction": "Variable transaction, the initial value should be request."}, {"type": "function", "instruction": "Your code should include a function named search_message."}, {"type": "interface", "instruction": "Your code should define an interface named transform_product."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named DisplayProfile."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_form."}, {"type": "combination", "instruction": "In your code, the class DisplayProfile should have these methods ['delete_report']."}, {"type": "combination", "instruction": "The function search_message should return a ArrayList as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_form, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"5": [0, 1, 3, 15, 16], "8": [0, 1, 7, 15, 16], "10": [0, 1, 9, 15, 16], "12": [0, 1, 9, 15, 16], "13": [0, 1, 6, 15, 16], "14": [0, 1, 11, 15, 16]}, "question_id": 445}
{"question": "Please convert the following code to cpp, with the function signature `long double_the_difference(std::vector<float> lst)`\nNote:\n1. Only implement the target function and import the required libraries, do not generate other code\n\n```cpp\n\nlong double_the_difference(std::vector<float> lst) {\n    \n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)]);\n\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the throw keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named search_dwa."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named InventoryRequest."}, {"type": "file", "instruction": "Your code should import the following libraries ['stack']."}, {"type": "file", "instruction": "Your code should use the function search_dwa from the library vector."}, {"type": "combination", "instruction": "You should initialize an object named account as an instance of the InventoryRequest class using ['credit', 'bill', 'profile'] for initialization."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 8], "10": [0, 1, 7]}, "question_id": 446}
{"question": "\n\nDesign a JavaFX application that simulates a step-by-step wizard for a hypothetical hydroelectric dam configuration process. The application should have multiple screens, each representing a step in the configuration process. The user should be able to navigate between the steps using \"Next\" and \"Back\" buttons. Each step should have a label indicating the current step number, and some steps may require the user to make a choice using radio buttons. If the user selects \"Yes\" (Oui), they proceed to the next step; if they select \"No\", a dialog should appear with a custom message.\n\nThe provided code snippet is part of an abstract controller class `AbstractController` that manages the navigation and dialog presentation logic. Your task is to extend this class to create a concrete controller for one of the steps in the wizard. This controller should override the `onNext()` method to handle the user's choice and navigate to the appropriate next step or show an alert dialog based on the user's selection.\n\nAdditionally, write a main class that sets up the JavaFX application, initializes the first step of the wizard, and demonstrates the navigation between steps.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure HashSet."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Variable account, type should be Map."}, {"type": "function", "instruction": "Your code should include a function named modify_tys."}, {"type": "interface", "instruction": "Your code should define an interface named insert_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named DisplayTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_transaction."}, {"type": "combination", "instruction": "Your code should define a class named DisplayTransaction that implements the insert_punish interface."}, {"type": "combination", "instruction": "The function modify_tys should take ['order', 'product'] as parameters."}, {"type": "combination", "instruction": "The function modify_tys should return a int as its result."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 15 lines."}], "instruction_dependence": {"8": [0, 1, 2, 7, 17, 18], "11": [0, 1, 2, 10, 17, 18], "14": [0, 1, 2, 10, 12, 17, 18], "15": [0, 1, 2, 9, 17, 18], "16": [0, 1, 2, 9, 17, 18]}, "question_id": 447}
{"question": "\n\nDesign a Java class named `TagManager` that allows users to manage a collection of `TagGroup` objects. Each `TagGroup` object contains a unique identifier and a list of tags, where each tag is represented by a `Tag` object with a unique identifier and a name. The `TagManager` should provide the following functionalities:\n\n1. Add a new `TagGroup` to the collection.\n2. Remove a `TagGroup` from the collection by its unique identifier.\n3. Add a new `Tag` to a `TagGroup` by the group's unique identifier.\n4. Remove a `Tag` from a `TagGroup` by the tag's unique identifier.\n5. Retrieve a `TagGroup` by its unique identifier.\n6. List all `TagGroups` in the collection.\n\nThe `TagManager` should ensure that no duplicate `TagGroup` or `Tag` identifiers are allowed. If an attempt is made to add a duplicate, the method should return an appropriate error message.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named retrieve_token."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_dwa."}, {"type": "combination", "instruction": "The function retrieve_token should take ['record', 'cut', 'tys'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named manage_dwa, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 3], "7": [0, 1, 5], "8": [0, 1, 6]}, "question_id": 448}
{"question": "\n\nWrite a Python program that converts a GTF (Gene Transfer Format) file to a BED (Browser Extensible Data) file. The GTF file contains information about gene features, such as exons, transcripts, and genes, and is commonly used for annotation in genomic studies. The BED format is a simpler format used for displaying such features in genome browsers.\n\nThe program should:\n- Take the path to a GTF file and the desired output paths for the BED file and a SQLite database file as input.\n- Create a SQLite database from the GTF file using the `gffutils` package.\n- Extract transcript features from the database and convert them to BED12 format.\n- Write the BED12 formatted features to the output BED file, ensuring that the transcript ID is used as the name field in the BED file.\n\nThe BED12 format consists of 12 columns:\n1. chrom - The name of the chromosome\n2. chromStart - The starting position of the feature in the chromosome\n3. chromEnd - The ending position of the feature in the chromosome\n4. name - The name of the feature (use the transcript ID)\n5. score - A score between 0 and 1000 (use '.' to indicate no score)\n6. strand - The strand of the feature ('+' or '-')\n7. thickStart - The starting position at which the feature is drawn thickly (for example, the start codon in gene displays)\n8. thickEnd - The ending position at which the feature is drawn thickly (for example, the stop codon in gene displays)\n9. itemRgb - An RGB value of the form R,G,B (use '0' to indicate no color)\n10. blockCount - The number of blocks (exons) in the feature\n11. blockSizes - A comma-separated list of the sizes of the blocks\n12. blockStarts - A comma-separated list of the starting positions of the blocks relative to chromStart\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the raise keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, should be a global variable."}, {"type": "variable", "instruction": "Variable tys should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named display_record."}, {"type": "function", "instruction": "Your code should not use any functions from the ['configure_product', 'configure_msg', 'generate_status', 'calculate_data']."}, {"type": "interface", "instruction": "Your code should define an interface named delete_message."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch']."}, {"type": "file", "instruction": "Your code should use the function display_record from the library pandas."}, {"type": "combination", "instruction": "In your code, the class Event should have these properties ['transaction', 'account', 'shipment']."}, {"type": "combination", "instruction": "In your code, the class Event should have these methods ['execute_message', 'update_msg']."}, {"type": "combination", "instruction": "The function display_record should return a tuple as its result."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "11": [0, 1, 2, 10], "13": [0, 1, 2, 12], "14": [0, 1, 2, 10], "15": [0, 1, 2, 10], "16": [0, 1, 2, 7]}, "question_id": 449}
{"question": "\n\nDesign a movie dataset management system that allows users to prepare and clean up test data for a movie database. The system should be able to handle the following tasks:\n\n1. Prepare the database with test data, which includes creating and populating tables for users, persons, movies, and ratings.\n2. Clean up the database by removing all test data and optionally dropping the tables.\n\nThe system should be implemented as a command-line application using the Cobra library in Go. The application should provide two subcommands: `prepare` and `cleanup`.\n\nThe `prepare` subcommand should support the following flags to customize the test data generation:\n- `--drop-tables`: A boolean flag to indicate whether to drop existing tables before preparing new test data.\n- `--users`: An integer flag to specify the number of user records to generate.\n- `--persons`: An integer flag to specify the number of person records to generate.\n- `--movies`: An integer flag to specify the number of movie records to generate.\n- `--ratings`: An integer flag to specify the number of rating records to generate.\n- `--max-stars-per-movie`: An integer flag to specify the maximum number of stars per movie.\n\nThe `cleanup` subcommand should remove all test data from the database and, if the `--drop-tables` flag is set, also drop the tables.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the if keyword."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable shipment, type should be float64."}, {"type": "function", "instruction": "Your code should include a function named sort_record."}, {"type": "class", "instruction": "Your code should define a class named GetRecordCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_dwa."}, {"type": "combination", "instruction": "In your code, the class GetRecordCustomer should have these properties ['bill', 'transaction']."}, {"type": "combination", "instruction": "In your code, the class GetRecordCustomer should have these methods ['sort_product', 'configure_event', 'display_profile']."}, {"type": "combination", "instruction": "The function sort_record should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_dwa, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}], "instruction_dependence": {"5": [0, 1, 4, 14], "6": [0, 1, 4, 14], "10": [0, 1, 8, 14], "11": [0, 1, 8, 14], "12": [0, 1, 7, 14], "13": [0, 1, 9, 14]}, "question_id": 450}
{"question": "\nDesign a C++ program that simulates the filtering of a sinusoidal signal using three different second-order low-pass filters (PT2Filter) with cutoff frequencies of 20 Hz, 50 Hz, and 80 Hz. The program should generate a sinusoidal input signal with a frequency of 100 Hz and apply each of the filters to this signal. The filters should be initialized with a given sampling period. The output should display the time, the input signal, and the filtered signals for each of the three filters in a tabular format.\n\nThe PT2Filter class is assumed to be a part of a custom library and should have the following interface:\n- A constructor that takes the sampling period and cutoff frequency as parameters.\n- An `init()` method to initialize the filter state.\n- An `apply()` method that takes the current input signal value and returns the filtered output.\n\nThe program should run for 5 seconds of simulated time and output the results at each sampling period.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure pair."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Your code should define an enumeration named Mode"}, {"type": "variable", "instruction": "Variable item, type should be bool."}, {"type": "variable", "instruction": "Variable item should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_data', 'retrieve_log', 'generate_cut']."}, {"type": "interface", "instruction": "Your code should define an interface named remove_shipment."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'cmath']."}, {"type": "file", "instruction": "Your code should use the function modify_token from the library stack."}, {"type": "combination", "instruction": "You should define an interface named remove_shipment that includes these methods ['submit_user', 'handle_event', 'execute_credit']."}, {"type": "global", "instruction": "Your answer in total should not exceed 14 lines."}], "instruction_dependence": {"8": [0, 1, 2, 6, 15], "9": [0, 1, 2, 6, 15], "13": [0, 1, 2, 12, 15], "14": [0, 1, 2, 11, 15]}, "question_id": 451}
{"question": "How to design a Java method to calculate the appropriate scaling ratio for an image loaded into memory? Assume you need to load an image, but to save memory, you want to calculate a scaling ratio based on the original size of the image and the target display size. This scaling ratio should be a power of 2 (e.g., 1, 2, 4, 8...) to ensure the image does not lose too much quality when scaled. At the same time, the calculated scaling ratio should ensure that the width and height of the scaled image are not less than the target dimensions. Please design a method to achieve this functionality.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.lang.Math;\npublic class ImageScaler {\n    public static int computeScaleFactor(int originalWidth, int originalHeight, int targetWidth, int targetHeight) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "global", "instruction": "Your code should use the this keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure LinkedList."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, type should be int."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "variable", "instruction": "Variable report, the initial value should be credit."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named DisplayOrderCredit."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_transaction."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_transaction, which should contain these classes ['ProcessCutRequest', 'OrderItem']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "9": [0, 1, 2, 6], "10": [0, 1, 2, 6], "12": [0, 1, 2, 11], "14": [0, 1, 2, 11, 13]}, "question_id": 452}
{"question": "\n\nDesign a Java program that implements a simple DAO (Data Access Object) pattern to manage a collection of `Proyecto` objects, which represent projects in a system. The `Proyecto` class should contain at least the following fields: `id` (Integer), `name` (String), and `budget` (Double). The `ProyectoDAO` interface should define the necessary methods to add, remove, update, and retrieve `Proyecto` objects. Implement the `ProyectoDAO` interface with a class named `ProyectoDAOhiberJDO` that uses an in-memory list to store the projects.\n\nThe `FactoryDAO` class should provide a static method to get an instance of `ProyectoDAO`. For simplicity, the `FactoryDAO` class will return a new instance of `ProyectoDAOhiberJDO` each time it is called.\n\nProvide test cases to verify the correctness of the implementation, including adding new projects, updating existing projects, removing projects, and retrieving projects by their ID.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the boolean keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, should be a constant."}, {"type": "class", "instruction": "Your code should define a class named RecordRoom."}, {"type": "file", "instruction": "Your code should be organized in a package named search_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt']."}, {"type": "file", "instruction": "Your code should use the function check_notification from the library java.time."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.time', 'java.awt']."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_room, which should contain these classes ['SortTys', 'FilterLogInventory']."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"4": [0, 1, 3, 11], "8": [0, 1, 7, 11], "10": [0, 1, 5, 6, 11]}, "question_id": 453}
{"question": "\n\nDesign a Java program that updates a contact's information in a database using the Spring Framework. The program should use Spring's `ApplicationContext` to manage beans and dependency injection. The `ContactDAO` class should have an `update` method that updates a contact's details in the database.\n\nThe `Contact` class should have the following fields with appropriate getters and setters:\n- `contactId` (int)\n- `name` (String)\n- `phone` (String)\n- `email` (String)\n- `address` (String)\n- `remarks` (String)\n\nThe `SpringRootConfig` class should be configured to set up the data source and transaction management.\n\nWrite a `TestContactDAOUpdate` class that demonstrates how to update a contact's information. The main method should:\n- Initialize the `ApplicationContext` with `SpringRootConfig`.\n- Get the `ContactDAO` bean from the context.\n- Create a new `Contact` object and set its properties.\n- Call the `update` method of `ContactDAO` to update the contact.\n- Print a message indicating that the data has been updated.\n\nProvide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "Variable account, the initial value should be event."}, {"type": "variable", "instruction": "Variable account should not be a constant."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang', 'java.awt']."}, {"type": "file", "instruction": "Your code should use the function insert_record from the library java.io."}], "instruction_dependence": {"6": [0, 1, 2, 3, 4], "7": [0, 1, 2, 3, 4], "9": [0, 1, 2, 3, 8]}, "question_id": 454}
{"question": "Please write a Java class `ImmutableCircle` that represents an immutable circle. The class should include a method `changeColor(Color newColor)` that attempts to change the color of the circle. However, since the circle is immutable, this method should throw an exception, indicating to the user that this object is read-only and its color cannot be changed. Ensure your code includes the necessary import statements.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Color;\npublic class ImmutableCircle {\n    private final Color color;\n    public ImmutableCircle(Color color) {\n    }\n    public void changeColor(Color newColor) {\n    }\n    public Color getColor() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should use the enum keyword."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "Variable kms, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named get_report."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named FilterInventoryTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_view."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_view, which should contain these classes ['Punish', 'Message', 'TransformInventory']."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}], "instruction_dependence": {"6": [0, 1, 2, 3, 4, 12], "8": [0, 1, 2, 3, 7, 12], "11": [0, 1, 2, 3, 9, 10, 12]}, "question_id": 455}
{"question": "\n\nDesign a class `MessageKeys` that encapsulates the keys and initialization vector (IV) used for encrypting and authenticating a message. The class should store a cipher key, a message authentication code (MAC) key, an initialization vector (IV), and a counter that is used to keep track of the number of messages that have been sent or received using these keys.\n\nThe class should provide the following functionalities:\n1. A default constructor that initializes all member variables to their default values.\n2. A parameterized constructor that accepts a `ByteArray` for the cipher key, MAC key, and IV, as well as an `unsigned int` for the counter.\n3. Getter methods for each of the member variables: `getCipherKey`, `getMacKey`, `getIv`, and `getCounter`.\n\nThe `ByteArray` type is assumed to be a previously defined class or typedef that represents a sequence of bytes.\n\nImplement the `MessageKeys` class based on the provided code snippet and write a main function that demonstrates the usage of the class by creating an instance with some test data and printing out the keys and counter.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the using keyword."}, {"type": "structural control", "instruction": "Your code should use data structure queue."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "variable", "instruction": "Variable info, type should be string."}, {"type": "interface", "instruction": "Your code should define an interface named filter_customer."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}], "instruction_dependence": {"5": [0, 1, 3], "7": [0, 1, 6]}, "question_id": 456}
{"question": "\n\nWrite a C++ program that converts a non-negative decimal number to its binary representation. The program should prompt the user to input a decimal number and then display the corresponding binary number. The binary representation should be displayed as an 8-bit number, which means it should be padded with leading zeros if the binary number has fewer than 8 bits.\n\nThe program should continue to prompt the user to convert another decimal number to binary until the user decides to exit by entering 'N' or 'n'. If the user enters 'S' or 's', the program should repeat the process.\n\nAdditionally, the program should handle invalid inputs gracefully. If the user enters a negative number or a non-integer value, the program should display an error message and prompt the user to enter a valid non-negative integer.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should use the void keyword."}, {"type": "structural control", "instruction": "Your code should use data structure stack."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "interface", "instruction": "Your code should define an interface named process_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_status."}, {"type": "global", "instruction": "Your answer in total should not exceed 13 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 9]}, "question_id": 457}
{"question": "\nDesign a ray tracing program that simulates the rendering of a 3D scene using ray tracing techniques. The program should be able to handle spheres and triangles as objects in the scene and point and directional lights. The camera should be defined with a field of view in both the x and y directions, and the image should be rendered based on the camera's perspective.\n\nThe program should include the following functionalities:\n- Calculate the ray through each pixel of the camera's view.\n- Determine the intersection distance of a ray with an object in the scene, considering both spheres and triangles.\n- Trace the path of a ray through the scene, determining the closest object it intersects with.\n- Calculate the color at the intersection point, taking into account the object's material properties, the lights in the scene, and recursive reflections for simulating specular highlights.\n- Render the entire scene into an image, with each pixel's color determined by the ray tracing algorithm.\n\nThe program should be able to handle recursive reflections up to a specified recursion depth and should include attenuation for point lights. The final image should be clamped to the range [0, 1] for each color channel.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should not use the volatile keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, should be a global variable."}, {"type": "variable", "instruction": "Variable msg, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named configure_tys."}, {"type": "interface", "instruction": "Your code should define an interface named update_info."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named update_product."}, {"type": "file", "instruction": "Your code should not use the following libraries ['vector', 'iostream', 'set']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7], "9": [0, 1, 2, 3, 4, 7], "12": [0, 1, 2, 3, 4, 11]}, "question_id": 458}
{"question": "Please write a Python program that includes the following feature: Given three positive integers N, L, and R. The task is to find the number of ways to form an array of size N, where each element is within the range [L, R], such that the sum of all elements in the array is divisible by 2. The function signature is `countWays(n, l, r)`", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the yield keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable kms, the initial value should be record."}, {"type": "function", "instruction": "Your code should include a function named remove_tys."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "file", "instruction": "Your code should be organized in a package named process_inventory."}, {"type": "combination", "instruction": "The function remove_tys should take ['status'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"7": [0, 1, 5, 13], "8": [0, 1, 5, 13], "12": [0, 1, 9, 13]}, "question_id": 459}
{"question": "\n\nDesign a Go program that reads configuration settings for a database connection from environment variables and provides utility functions to access these configurations and generate connection strings. The program should be able to handle default values, required fields, and custom error handling for missing required configurations.\n\nThe configuration should include the following fields:\n- `DBHost`: The database host address.\n- `DBPort`: The database port with a default value of `3306`.\n- `DBUser`: The database user (required).\n- `DBPassword`: The database password (required).\n- `DBName`: The name of the database (required).\n- `Migrate`: A boolean flag to indicate if migrations should be run, with a default value of `false`.\n- `Secret`: A secret key for the application (required).\n\nThe program should provide the following utility functions:\n- `Dns()`: Returns a DNS string for connecting to the database.\n- `Secret()`: Returns the secret key as a byte slice.\n- `MysqlConnectionString()`: Returns a pointer to a MySQL connection string.\n- `SetupConfig()`: Reads the environment variables and sets up the configuration.\n- `C()`: Returns the current configuration.\n- `TestConnection()`: A function to set up a test configuration for the database connection.\n\nWrite a Go program that adheres to the above specifications, including the necessary imports, and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should use the return keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Variable view, type should be int."}, {"type": "variable", "instruction": "Variable view should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named insert_room."}, {"type": "function", "instruction": "Your code should not use any functions from the ['configure_view', 'update_order', 'configure_profile', 'get_message']."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_customer."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "11": [0, 1, 2, 10]}, "question_id": 460}
{"question": "\n\nCreate a Java program that simulates a simple abuse reporting system for an online game. The system should allow players to report other players for violating game rules. Each report should include the name of the player being reported, the rule that was violated, and an optional flag indicating whether the reported player should be muted.\n\nThe rules are predefined and each rule has a unique identifier. The program should be able to handle invalid reports, such as reporting a non-existent player or a player attempting to report themselves.\n\nThe program should include the following components:\n- A `Rule` enum with at least 5 different game rules, each with a unique ID.\n- An `AbuseReport` class that represents a report made by a player.\n- A `ReportAbusePacket` class that processes incoming reports, validates them, and constructs an `AbuseReport` object if the report is valid.\n- A `Player` class that represents a player in the game with at least a username attribute.\n- A `PlayerService` class that can check if a player exists based on their username.\n- A `ReportService` class that handles the logic of creating and storing reports.\n\nThe `ReportAbusePacket` class should use the `PlayerService` to validate player names and the `ReportService` to handle the creation of reports.\n\nProvide test cases to verify the correctness of the solution, including cases for valid reports, reporting a non-existent player, and a player attempting to report themselves.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the for keyword."}, {"type": "structural control", "instruction": "Your code should use data structure LinkedList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named display_room."}, {"type": "interface", "instruction": "Your code should define an interface named filter_token."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Record."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql', 'java.io']."}, {"type": "combination", "instruction": "Your code should define a class named Record that implements the filter_token interface."}, {"type": "combination", "instruction": "The function display_room should return a boolean as its result."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 16], "10": [0, 1, 2, 9, 16], "14": [0, 1, 2, 9, 11, 16], "15": [0, 1, 2, 8, 16]}, "question_id": 461}
{"question": "\n\nDesign a Go program that generates a JWT (JSON Web Token) for a user authentication system. The JWT should contain a payload with the user's ID and email, and it should be signed with a secret key to ensure its integrity.\n\nThe program should include a function `GenerateUserToken` that takes a user's ID and email as input, along with a secret key, and returns a signed JWT. The JWT should expire after 24 hours.\n\nThe `Claims` struct should be defined to include the standard JWT claims such as `exp` (expiration time), `iat` (issued at), and any other relevant claims for the user. The `exp` claim should be set to 24 hours from the current time.\n\nThe program should handle any errors that occur during the token generation process and return an appropriate error message.\n\nProvide test cases to verify that the `GenerateUserToken` function works as expected, including cases where the token is generated successfully and cases where an error occurs.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, type should be float64."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named delete_tys."}, {"type": "interface", "instruction": "Your code should define an interface named set_dwa."}, {"type": "class", "instruction": "Your code should define a class named HandleViewCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_status."}, {"type": "file", "instruction": "Your code should not use the following libraries ['net', 'sort', 'strconv']."}, {"type": "combination", "instruction": "You should initialize an object named room as an instance of the HandleViewCustomer class using ['msg', 'data', 'transaction'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_status, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"2": [0, 1, 11], "3": [0, 1, 11], "9": [0, 6, 11], "10": [0, 7, 11]}, "question_id": 462}
{"question": "A simple HTTP client function, http_client, written in Python. The parameters of this function are url, method, and filename to save the response, and it returns the response from the server. \n1. It is required to return text information from the server.\n2. The text information is required to be saved as a .txt file.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should use data structure dict."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named add_user."}, {"type": "class", "instruction": "Your code should define a class named DisplayKms."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_token."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_token, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 7], "11": [0, 1, 2, 10], "13": [0, 1, 2, 12]}, "question_id": 463}
{"question": "\n\nDesign a configuration management system for a hypothetical application that allows users to manage repositories and application settings. The system should be able to perform the following tasks:\n\n1. Initialize the configuration if it does not exist or load it from a YAML file if it does.\n2. Add new repositories to the configuration with an option to set one as the preferred repository.\n3. List all the repositories in the configuration.\n4. Save the configuration to a YAML file.\n5. Get and set the preferred repository.\n6. Enable or disable dark mode in the application settings.\n7. Notify listeners when the preferred repository changes.\n\nThe configuration should be a singleton, ensuring that only one instance of the configuration is used throughout the application. The system should also handle errors gracefully and log them appropriately.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable record, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named add_cut."}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_profile', 'retrieve_room']."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named ManageViewUser."}, {"type": "combination", "instruction": "In your code, the class ManageViewUser should have these methods ['delete_user']."}, {"type": "combination", "instruction": "The function add_cut should return a string as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "12": [0, 1, 2, 3, 11], "14": [0, 1, 2, 3, 13], "15": [0, 1, 2, 3, 9]}, "question_id": 464}
{"question": "Please write a Java program to implement a simple calculator class `SimpleCalculator`. This calculator should include a method `calculate` that takes three parameters: two integers `num1` and `num2`, and a character `operator`. Based on the `operator` specified ('+', '-', '*', '/'), it performs the corresponding arithmetic operation on `num1` and `num2`, and returns the result. If `operator` is an invalid operator, the method should throw an `IllegalArgumentException`.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public static int calculate(int num1, int num2, char operator) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "function", "instruction": "Your code should include a function named create_inventory."}, {"type": "class", "instruction": "Your code should define a class named SubmitInfoOrder."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.time']."}, {"type": "file", "instruction": "Your code should use the function create_inventory from the library java.awt."}, {"type": "combination", "instruction": "In your code, the class SubmitInfoOrder should have these methods ['search_transaction', 'retrieve_info']."}, {"type": "combination", "instruction": "The function create_inventory should take ['inventory', 'cut'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"8": [0, 1, 7, 11], "9": [0, 1, 6, 11], "10": [0, 1, 5, 11]}, "question_id": 465}
{"question": "Implement the `WaitGroup` type from `Go` in c++, which is used to wait for a group of coroutines/threads to complete and can conveniently synchronize multiple coroutines. It is used to coordinate one or more threads until certain operations are completed before continuing execution. This is achieved through a counter set to a specific value at initialization. Each time a thread completes its tasks, the counter decrements by 1. When the counter reaches zero, all threads waiting on this counter will be awakened to continue execution. The following requirements need to be met:\n1. Not to reference other third-party libraries, but std-provided types can be utilized\n2. Provide a constructor `WaitGroup(size_t count)` to set the initial value of the wait counter\n3. Implement the interface `void Wait()` representing that the current thread waits until the counter reaches zero\n4. Implement the interface `void Done()` representing decreasing the counter value. If the counter value reaches zero, all waiting threads will be awakened\n5. Implement the interface `size_t GetCount()` which is used to return the current value of the counter\n6. Implement the interface `void Add(int64_t n)` to increase the wait counter value. delta can be a positive or negative number", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "interface", "instruction": "Your code should define an interface named display_message."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the Punish class using ['tys'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named Punish that implements the display_message interface."}, {"type": "combination", "instruction": "In your code, the class Punish should have these properties ['shipment', 'credit', 'log']."}, {"type": "combination", "instruction": "In your code, the class Punish should have these methods ['transform_report']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"4": [0, 3, 8], "5": [0, 2, 3, 8], "6": [0, 3, 8], "7": [0, 3, 8]}, "question_id": 466}
{"question": " Haptic Feedback Controller\n\nIn a virtual reality (VR) environment, haptic feedback provides a tactile response to the user, simulating the sense of touch. This can greatly enhance the immersive experience. Your task is to implement a haptic feedback controller for a VR system that manages the haptic output for a VR controller device.\n\nThe haptic feedback controller should be able to:\n- Process the current haptic state and update the device output accordingly.\n- Preempt the current haptic output with a new haptic clip, immediately replacing any ongoing feedback.\n- Queue a haptic clip to be played after the current clip finishes.\n- Mix a haptic clip with the current output, combining their effects.\n- Clear any pending haptic output, stopping all feedback.\n\nA haptic clip is a sequence of haptic samples that define the tactile pattern to be outputted by the VR controller.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable report, the initial value should be cut."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named set_order."}, {"type": "class", "instruction": "Your code should define a class named ManageRequest."}, {"type": "file", "instruction": "Your code should import the following libraries ['map', 'algorithm']."}, {"type": "file", "instruction": "Your code should use the function retrieve_request from the library vector."}, {"type": "combination", "instruction": "You should define an interface named set_order that includes these methods ['transform_profile', 'retrieve_form']."}, {"type": "combination", "instruction": "In your code, the class ManageRequest should have these properties ['order', 'product']."}, {"type": "combination", "instruction": "In your code, the class ManageRequest should have these methods ['transform_profile', 'retrieve_form']."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 7], "11": [0, 1, 2, 3, 7], "15": [0, 1, 2, 3, 14], "16": [0, 1, 2, 3, 12], "17": [0, 1, 2, 3, 13], "18": [0, 1, 2, 3, 13]}, "question_id": 467}
{"question": "\n\nWrite a Python program that validates the uniqueness of identifiers in a L20n Localization (.lol) file. L20n is a localization framework designed to improve upon the existing localization solutions. A `.lol` file contains entities and macros that should have unique identifiers.\n\nYour task is to create a function `validate_lol_file` that takes the path to a `.lol` file as input and checks for the following:\n- The file should be correctly parsed as a L20n file.\n- All entities and macros should have unique identifiers.\n\nThe function should return a tuple containing two lists: the first list should contain any parsing errors, and the second list should contain warnings about duplicated identifiers.\n\nIf the file cannot be parsed, the function should return a list with a single error message and an empty list for warnings. If there are duplicated identifiers, the function should return an empty list for errors and a list of warnings with messages indicating the duplicated identifiers.\n\nYou should use the given code snippet as a starting point and improve upon it to create a robust solution. Make sure to handle exceptions and edge cases appropriately.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "Variable cut, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named display_kms."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_room."}], "instruction_dependence": {"5": [0, 3]}, "question_id": 468}
{"question": "\n\nDesign a simple simulation of a duck pond where ducks can exhibit different flying and quacking behaviors. The ducks should be able to change their behavior at runtime. Your task is to implement a `Duck` class and two sets of behavior interfaces: `FlyBehavior` and `QuackBehavior`, along with two implementations for each behavior.\n\nThe `FlyBehavior` interface should have a method `fly()` that is implemented by the classes `FlyWithWings` and `FlyNoWay`. Similarly, the `QuackBehavior` interface should have a method `quack()` that is implemented by the classes `Quack` and `Squeak`.\n\nThe `Duck` class should have methods `performFly()` and `performQuack()` that execute the respective behaviors. It should also have methods `setFlyBehavior(FlyBehavior fb)` and `setQuackBehavior(QuackBehavior qb)` to change the duck's behavior at runtime.\n\nProvide a `MallardDuck` class that extends `Duck` and initializes with the ability to fly with wings and quack normally. Demonstrate the functionality by creating a `MallardDuck`, making it perform its behaviors, changing its flying behavior to `FlyNoWay`, and then making it perform its behaviors again.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the void keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "function", "instruction": "Your code should include a function named execute_info."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_user."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_kms."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.net']."}, {"type": "file", "instruction": "Your code should use the function execute_info from the library java.io."}, {"type": "combination", "instruction": "You should define an interface named analyze_user that includes these methods ['transform_cut', 'search_token', 'process_tys']."}, {"type": "combination", "instruction": "In your code, the class Form should have these properties ['form', 'view']."}, {"type": "combination", "instruction": "The function execute_info should return a List as its result."}], "instruction_dependence": {"13": [0, 1, 2, 3, 4, 12], "14": [0, 1, 2, 3, 4, 9], "15": [0, 1, 2, 3, 4, 10], "16": [0, 1, 2, 3, 4, 8]}, "question_id": 469}
{"question": "\n\nDesign a class `DotItem` that inherits from `SelectableItem`. The `DotItem` class should represent a UI element that displays a dot followed by some text. The dot should be drawn as a simple circle, and the text should be displayed next to it. The class should allow the text and the size of the text to be set dynamically. The `DotItem` should also handle resizing events and redraw itself appropriately when resized.\n\nThe `DotItem` class should provide the following functionalities:\n1. A static `Create` method that returns a new instance of `DotItem`.\n2. An `OnResize` method that should be called when the item is resized.\n3. A `DrawContent` method that takes a `QPainter` pointer and draws the dot and text onto the UI.\n4. A `SetText` method that sets the text to be displayed next to the dot.\n5. A `SetPixelSize` method that sets the size of the text in pixels.\n\nThe `DotItem` class should be encapsulated within the `UI` namespace.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['process_shipment', 'transform_notification']."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named StatusUser."}, {"type": "file", "instruction": "Your code should be organized in a package named submit_cut."}], "instruction_dependence": {"3": [0, 2], "6": [0, 5]}, "question_id": 470}
{"question": "\nPerimeter and Unique Configurations of a Histogram\n\nGiven a histogram consisting of `N` vertical bars of different heights, your task is to find the maximum perimeter of a rectangle that can be formed by selecting consecutive bars and the number of unique configurations that result in this maximum perimeter. The histogram is represented by an array of integers, where each integer corresponds to the height of a bar.\n\nThe perimeter of a rectangle formed by consecutive bars is calculated as the sum of twice the width (the number of selected consecutive bars) and twice the minimum height among the selected bars.\n\nWrite a program that takes the number of bars `N` and an array representing the heights of the bars. The program should output the maximum perimeter that can be obtained and the number of unique configurations that lead to this maximum perimeter.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Your code should define an enumeration named Shape"}, {"type": "variable", "instruction": "Variable kms, type should be set."}, {"type": "variable", "instruction": "Variable kms, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named handle_profile."}, {"type": "class", "instruction": "Your code should define a class named SortCustomer."}, {"type": "file", "instruction": "Your code should be organized in a package named process_bill."}, {"type": "combination", "instruction": "Your code should be organized in a package named process_bill, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"7": [0, 1, 5, 13], "8": [0, 1, 5, 13], "12": [0, 1, 11, 13]}, "question_id": 471}
{"question": "\nWrite a Go program that defines a `Disk` struct with fields representing a disk's properties, such as `Zone`, `ID`, `Name`, `Tags`, `ServerID`, `ServerName`, `DiskPlanID`, `Size`, `Connection`, `StorageName`, and `Description`. Implement a function `FormatDiskDetails` that takes a `Disk` instance and returns a formatted string containing the disk's details, using the column definitions provided in the given code snippet.\n\nThe `FormatDiskDetails` function should use the `Template` field from the column definitions to format the corresponding `Disk` field. For example, the `Server` column should be formatted as `ServerID(ServerName)` if `ServerID` is not empty. The `Plan` column should be replaced with a string representation of the `DiskPlanID` (you can create a mock function `disk_plan_to_key` that converts the `DiskPlanID` to a string for the purpose of this exercise).\n\nThe output should be a string with each column separated by a tab character (`\\t`), and each column should be labeled as per the `Name` field in the column definitions.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named calculate_status."}, {"type": "class", "instruction": "Your code should define a class named CalculateOrder."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_log."}, {"type": "combination", "instruction": "In your code, the class CalculateOrder should have these properties ['report']."}, {"type": "combination", "instruction": "In your code, the class CalculateOrder should have these methods ['update_log']."}], "instruction_dependence": {"9": [0, 1, 2, 7], "10": [0, 1, 2, 7]}, "question_id": 472}
{"question": "\n\nDesign a simple stock exchange server that allows clients to query stock prices, buy and sell stocks, and update stock data. The server should implement a gRPC service with the following methods:\n\n1. `GetStockPrice`: Given a stock name, return the current price of the stock.\n2. `BuyStock`: Given a stock name and an amount, buy the specified amount of stock and return the total price paid.\n3. `SellStock`: Given a stock name and an amount, sell the specified amount of stock and return the total price received.\n4. `SetStockData`: Update the price and available amount for a given stock.\n\nThe server should use an interface `StocksStorage` to interact with the stock data, which is implemented by a mock storage for testing purposes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable cut, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named display_msg."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named search_item."}, {"type": "class", "instruction": "Your code should define a class named InsertLog."}, {"type": "file", "instruction": "Your code should be organized in a package named set_event."}, {"type": "combination", "instruction": "Your code should define a class named InsertLog that implements the search_item interface."}, {"type": "combination", "instruction": "In your code, the class InsertLog should have these properties ['punish', 'request']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_event, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "7": [0, 1, 6], "11": [0, 1, 8, 9], "12": [0, 1, 9], "13": [0, 1, 10]}, "question_id": 473}
{"question": "\n\nCreate a RESTful API endpoint that lists the contents of a directory on a virtual filesystem. The endpoint should allow users to specify a directory path and an optional flag to include hidden files in the listing. The response should be a JSON array of file information objects.\n\nEach file information object should include the following details:\n- `name`: The base name of the file or directory.\n- `fullname`: The full path of the file or directory.\n- `ext`: The file extension, if any.\n- `size`: The size in bytes for files; system-dependent for directories.\n- `mode`: The file mode bits.\n- `modTime`: The last modification time.\n- `isDir`: A boolean indicating whether the entry is a directory.\n\nThe endpoint should handle the following scenarios:\n- If the `path` query parameter is not provided or is empty, the endpoint should return a `400 Bad Request` status code with an appropriate error message.\n- If the specified path does not exist or is not accessible, the endpoint should return a `404 Not Found` status code with an error message.\n- If the specified path is a file, the endpoint should return a `200 OK` status code and serve the file directly.\n- If the specified path is a directory, the endpoint should return a `200 OK` status code with a JSON array of file information objects.\n- If the `show_hide` query parameter is set to `true`, hidden files (those starting with a dot `.`) should be included in the listing; otherwise, they should be omitted.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the default keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Variable transaction, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named execute_product."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "file", "instruction": "Your code should be organized in a package named set_request."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os', 'net']."}, {"type": "combination", "instruction": "In your code, the class Punish should have these properties ['cut']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_request, which should contain these classes ['CreateInfoUser', 'Log', 'Punish']."}, {"type": "global", "instruction": "Your answer in total should not exceed 10 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6, 14], "12": [0, 1, 2, 3, 9, 14], "13": [0, 1, 2, 3, 9, 10, 14]}, "question_id": 474}
{"question": "\n\nWrite a Python program that simulates a simple license check for a Django-based web application. The license check should be based on the MAC address of the machine where the application is running. Each machine should have a unique MAC address that is registered and allowed to run the application. If the MAC address of the current machine is not in the list of registered MAC addresses, the program should raise an exception with a message indicating that the MAC address is not authorized.\n\nThe program should include a function `get_mac_address()` that retrieves the current machine's MAC address and a function `main()` that performs the license check. The `main()` function should also attempt to import Django's command-line utility and execute it if the license check passes.\n\nThe program should follow these guidelines:\n- Use the `uuid` module to obtain the MAC address.\n- Use a predefined list of authorized MAC addresses for the license check.\n- Provide a clear error message if the MAC address is not authorized.\n- Handle the potential `ImportError` when importing Django's command-line utility.\n- Include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named check_inventory."}, {"type": "function", "instruction": "The function names in your code should follow the CAPITALIZED_WITH_UNDERSCORES. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named update_punish."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "9": [0, 1, 2, 8]}, "question_id": 475}
{"question": "\n\nDesign a Django REST framework API endpoint that allows for the retrieval and creation of user points. Each user has an associated point balance that can be queried and updated through the API. The API should follow RESTful principles and include the following features:\n\n1. A `GET` endpoint to list all user points.\n2. A `POST` endpoint to create a new user point entry.\n3. Use of Django ORM to interact with the database.\n4. Use of Django REST framework's `ViewSet` and `generics` for handling requests.\n5. Use of a serializer to validate and deserialize input data and serialize output data.\n6. Allow any user to access the `GET` and `POST` endpoints without authentication.\n\nAssume that the `User_point` model and `PointUserSerializer` serializer are already defined in the Django application. The `User_point` model contains at least two fields: `user_id` (a unique identifier for the user) and `points` (an integer representing the user's point balance).\n\nWrite the `UserPointViewSet` class to handle the API endpoints and include test cases to verify the correctness of the `GET` and `POST` endpoints.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the is keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable event, type should be dict."}, {"type": "function", "instruction": "Your code should include a function named transform_punish."}, {"type": "interface", "instruction": "Your code should define an interface named submit_log."}, {"type": "class", "instruction": "Your code should define a class named ExecuteOrder."}, {"type": "file", "instruction": "Your code should be organized in a package named add_form."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_form, which should contain these classes ['ProfileEvent', 'UpdateNotification']."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6, 14], "8": [0, 1, 2, 3, 4, 6, 14], "13": [0, 1, 2, 3, 4, 11, 12, 14]}, "question_id": 476}
{"question": "\n\nWrite a C++ program that simulates a simplified version of the `dd` command-line utility, which is used for converting and copying files. The program should be able to read from an input file and write to an output file, with options to specify the block size, the number of blocks to copy, and the starting block to skip from the input and output files.\n\nThe program should support the following command-line options:\n- `if=<file>`: Specify the input file (default: `stdin`).\n- `of=<file>`: Specify the output file (default: `stdout`).\n- `bs=<size>`: Set the block size in bytes (default: `512`).\n- `count=<size>`: Copy only `<size>` blocks (default: `0`, which means copy until the end of the file).\n- `skip=<size>`: Skip `<size>` blocks from the start of the input file (default: `0`).\n- `seek=<size>`: Skip `<size>` blocks from the start of the output file (default: `0`).\n\nThe program should also print the total number of bytes copied and the time taken to copy after the operation is completed.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable data, the initial value should be data."}, {"type": "function", "instruction": "Your code should include a function named filter_tys."}, {"type": "interface", "instruction": "Your code should define an interface named delete_kms."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named ProfileOrder."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_bill."}, {"type": "combination", "instruction": "You should initialize an object named kms as an instance of the ProfileOrder class using ['dwa', 'token', 'notification'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named ProfileOrder that implements the delete_kms interface."}, {"type": "combination", "instruction": "The function filter_tys should return a set as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_bill, which should contain these classes ['DisplayInfoPunish']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "11": [0, 1, 2, 10], "13": [0, 1, 2, 12], "15": [0, 1, 2, 12], "16": [0, 1, 2, 10, 12], "17": [0, 1, 2, 9], "18": [0, 1, 2, 12, 14]}, "question_id": 477}
{"question": "\n\nIn the game Minecraft, players can control the time of day using commands. The `TimeLabels` enum provided represents different times of day in the game. Your task is to create a class `MinecraftTimeConverter` that provides functionality to convert between real-world time (24-hour format) and Minecraft time.\n\nThe Minecraft day is 20 minutes long, with 10 minutes for day and 10 minutes for night. The time in Minecraft starts at 6 AM as 0 ticks and ends at 5:59 AM as 23999 ticks. The given `TimeLabels` enum provides some predefined times:\n\n- DAY starts at 1000 ticks (7 AM)\n- NOON is at 6000 ticks (12 PM)\n- NIGHT starts at 13000 ticks (7 PM)\n- MIDNIGHT is at 18000 ticks (12 AM)\n\nCreate a method `realTimeToMinecraftTime(int hours, int minutes)` that takes the hours and minutes of real-world time and converts it to the corresponding Minecraft tick time. Also, create a method `minecraftTimeToRealTime(int ticks)` that converts Minecraft tick time back to a string representing real-world time in the format \"HH:mm\".\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named set_shipment."}, {"type": "class", "instruction": "Your code should define a class named TransformMessageShipment."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.time']."}, {"type": "file", "instruction": "Your code should use the function delete_dwa from the library java.math."}, {"type": "combination", "instruction": "Your code should define a class named TransformMessageShipment that implements the set_shipment interface."}, {"type": "combination", "instruction": "In your code, the class TransformMessageShipment should have these properties ['profile']."}, {"type": "global", "instruction": "Your function should not exceed 10 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "8": [0, 1, 7, 13], "10": [0, 1, 9, 13], "11": [0, 1, 6, 7, 13], "12": [0, 1, 7, 13]}, "question_id": 478}
{"question": "Write a function that uses pandas to output the quantiles of each column in a table. The input is the path to the csv file and a list of quantiles, and the output is the quantile information.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 10 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure collections."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "interface", "instruction": "Your code should define an interface named process_log."}, {"type": "class", "instruction": "Your code should define a class named Inventory."}, {"type": "combination", "instruction": "You should initialize an object named info as an instance of the Inventory class using ['dwa', 'bill', 'kms'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named process_log that includes these methods ['create_bill']."}, {"type": "combination", "instruction": "In your code, the class Inventory should have these properties ['transaction', 'notification', 'message']."}], "instruction_dependence": {"7": [0, 1, 6], "8": [0, 1, 5], "9": [0, 1, 6]}, "question_id": 479}
{"question": "\n\nYou are tasked with developing a machine learning pipeline to predict the survival of passengers on the Titanic. The dataset is split into training and test sets, with an additional file for gender-based submission. The pipeline should include data visualization, feature creation, feature evaluation, feature scaling, model selection, hyperparameter tuning, and performance evaluation.\n\nWrite a Python program that implements the following steps:\n\n1. Load the training and test datasets, along with the gender submission data.\n2. Visualize the data to understand the distribution of features and target variable (if `Visualize_data` is set to `True`).\n3. Create new features from the existing data (if `Create_Features` is set to `True`).\n4. Evaluate the importance of features and drop the ones that are not useful (if `Evaluate_features` and `Drop_Poor_Features` are set to `True`).\n5. Scale the features to prepare the data for machine learning algorithms (if `Scale_Data` is set to `True`).\n6. Study different estimators to choose the best one for the dataset (if `Choosing_Estimator` is set to `True`).\n7. Perform hyperparameter tuning on the chosen estimator (if `Tuning_Hyperparameters` is set to `True`).\n8. Evaluate the performance of the final model using ROC curve and learning curve (if `Evaluate_Performence` is set to `True`).\n\nThe program should be modular, with separate functions for each step in the pipeline. The functions `cleaning_data`, `visualizing_data`, `creating_new_features`, `evaluate_features`, `drop_poor_features`, `scale_data`, `estimator_study`, `grid_search_RandomForest`, `plot_ROC_curve`, and `LearningCurve` are provided by the `helper` module and are assumed to be correctly implemented.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the del keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable cut, type should be int."}, {"type": "function", "instruction": "Your code should include a function named create_customer."}, {"type": "interface", "instruction": "Your code should define an interface named insert_room."}, {"type": "class", "instruction": "Your code should define a class named ProductMsg."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_notification."}, {"type": "file", "instruction": "Your code should import the following libraries ['scikit-learn']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Flask', 'pytorch']."}, {"type": "combination", "instruction": "In your code, the class ProductMsg should have these methods ['transform_tys', 'modify_message']."}, {"type": "combination", "instruction": "The function create_customer should return a set as its result."}], "instruction_dependence": {"4": [0, 1, 3], "5": [0, 1, 3], "12": [0, 1, 8], "13": [0, 1, 6]}, "question_id": 480}
{"question": "\n\nDesign a Go program that utilizes the `KalturaMetadataResponseProfileMapping` struct to represent a mapping between a metadata profile and a response profile in a hypothetical Kaltura VPaaS (Video Platform as a Service) API. The program should include the following functionalities:\n\n1. **CreateMapping**: A function that creates a new `KalturaMetadataResponseProfileMapping` instance with default values.\n2. **SerializeMapping**: A function that takes a `KalturaMetadataResponseProfileMapping` instance and returns its JSON representation.\n3. **DeserializeMapping**: A function that takes a JSON representation of a `KalturaMetadataResponseProfileMapping` and returns an instance of the struct.\n4. **NullableMapping**: A function that demonstrates the usage of `NullableKalturaMetadataResponseProfileMapping` by setting and unsetting a nullable mapping, and then serializing it to JSON.\n\nThe program should include test cases to verify the correctness of each function.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should use the if keyword."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "function", "instruction": "Your code should include a function named remove_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'math']."}, {"type": "file", "instruction": "Your code should use the function remove_product from the library math."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 481}
{"question": "Please use Go language to determine whether a string array contains a certain string, and implement the function `func Contains(arr []string, item string) bool`.", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, the initial value should be kms."}, {"type": "function", "instruction": "Your code should include a function named manage_dwa."}, {"type": "class", "instruction": "Your code should define a class named Info."}, {"type": "file", "instruction": "Your code should import the following libraries ['net', 'math']."}, {"type": "file", "instruction": "Your code should use the function manage_dwa from the library sort."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the Info class using ['room', 'notification', 'shipment'] for initialization."}, {"type": "combination", "instruction": "The function manage_dwa should take ['event', 'log'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"3": [0, 2, 10], "7": [0, 6, 10], "8": [0, 5, 10], "9": [0, 4, 10]}, "question_id": 482}
{"question": "\n\nCreate a Java program that simulates a simple particle animation within a graphical window. The animation should depict a particle moving in a 2D space with the ability to bounce off the edges of the window. The particle's initial position, velocity, and acceleration should be configurable. The window size should also be adjustable.\n\nThe program should include the following features:\n- A `Particle` class that represents a particle with properties for position, velocity, and acceleration.\n- A `DrawingFrame` class that extends `JFrame` and contains a `JPanel` where the particle is drawn and animated.\n- The `DrawingFrame` class should have methods to set the frame size, the particle's initial properties, and the animation speed.\n- The animation should update the particle's position based on its velocity and acceleration, and it should handle collisions with the window boundaries by reversing the appropriate component of the velocity.\n- The `Main` class should initialize the `DrawingFrame`, set the initial properties of the particle, and start the animation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the throw keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable product, type should be ArrayList."}, {"type": "variable", "instruction": "Variable product, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named ViewRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named search_shipment."}, {"type": "combination", "instruction": "In your code, the class ViewRecord should have these methods ['modify_shipment']."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_shipment, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 21 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 14], "8": [0, 1, 2, 6, 14], "9": [0, 1, 2, 6, 14], "12": [0, 1, 2, 10, 14], "13": [0, 1, 2, 11, 14]}, "question_id": 483}
{"question": "\n\nDesign a simple Android application fragment that displays the details of a contact and allows the user to perform actions such as calling the contact or going back to the main activity. The fragment should be able to receive the contact's name, phone number, and email address via a `Bundle` when it is created. The user interface should include a TextView for the contact's name, phone number, and email address, an ImageButton to initiate a phone call, and an ImageView that acts as a back button to return to the main activity.\n\nImplement the `InformationDetailsFragment` class that extends `Fragment` and adheres to the following requirements:\n\n1. The fragment should inflate a layout from XML with the IDs: `name_contact`, `phone_number`, `email_address`, `btn_call`, and `back`.\n2. The fragment should extract the contact's details from a `Bundle` if provided and display them in the corresponding TextViews.\n3. Clicking the call button (`btn_call`) should initiate a dial intent with the contact's phone number.\n4. Clicking the back button (`btn_back`) should return the user to the `MainActivity`.\n\nEnsure that you handle any potential issues such as missing bundle data gracefully.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure LinkedList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Your code should define an enumeration named Country"}, {"type": "function", "instruction": "Your code should include a function named modify_status."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named sort_form."}, {"type": "class", "instruction": "Your code should define a class named ExecuteTransactionKms."}, {"type": "combination", "instruction": "Your code should define a class named ExecuteTransactionKms that implements the sort_form interface."}, {"type": "combination", "instruction": "The function modify_status should return a String as its result."}], "instruction_dependence": {"8": [0, 1, 7], "11": [0, 1, 9, 10], "12": [0, 1, 7]}, "question_id": 484}
{"question": "\n\nDesign a Go program that tests the functionality of a MongoDB backup and restore operation. The program should use Docker containers to create two separate MongoDB instances: one for the source database (srcDB) and one for the destination database (dstDB). The source database should be populated with test data, and then a backup should be taken and restored into the destination database. The program should verify that the data in the destination database matches the data in the source database after the restore operation.\n\nThe test should include the following steps:\n1. Set up two MongoDB instances using Docker containers.\n2. Populate the source database with test data.\n3. Perform a backup of the source database.\n4. Restore the backup into the destination database.\n5. Verify that the data in the destination database is identical to the source database.\n6. Clean up the Docker containers.\n\nThe program should use the `dockertest` package to manage Docker containers, the `ginkgo` and `gomega` packages for testing, and a custom `testutil` package for MongoDB operations such as waiting for the database to be ready, inserting test data, and comparing databases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 16 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the const keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named add_log."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "class", "instruction": "Your code should define a class named DataRequest."}, {"type": "file", "instruction": "Your code should import the following libraries ['os', 'math']."}, {"type": "file", "instruction": "Your code should use the function add_log from the library net."}, {"type": "file", "instruction": "Your code should not use the following libraries ['math', 'strings', 'time']."}, {"type": "combination", "instruction": "In your code, the class DataRequest should have these methods ['add_event', 'delete_kms', 'delete_request']."}, {"type": "combination", "instruction": "The function add_log should return a struct as its result."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8], "12": [0, 1, 2, 3, 4, 11], "14": [0, 1, 2, 3, 4, 10], "15": [0, 1, 2, 3, 4, 8]}, "question_id": 485}
{"question": "Please write a complete Python function `solve(smiles, N)`, \nwhich takes a molecule's SMILES and the quantity of nitrogen (N) as inputs. \nThis function should replace the \"N\" number of unsubstituted \naromatic carbon atoms (these carbon atoms are connected to one hydrogen atom) in the molecule with nitrogen atoms, \nand return the set of SMILES of all possible molecular structures that may be produced by this substitution.\nIt is known that the aromatic carbon atoms to be replaced can be matched using SMARTS \"[cH]\".", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the continue keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "function", "instruction": "Your code should include a function named manage_transaction."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Profile."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_report."}, {"type": "combination", "instruction": "Your code should be organized in a package named generate_report, which should contain these classes ['MsgMessage', 'ManageTokenRecord', 'Notification']."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 18 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 10, 11], "9": [0, 1, 2, 7, 8, 10, 11]}, "question_id": 486}
{"question": "\n\nYou are given a 2 x N board, and you have a supply of 2 x 1 dominos and trominos of two types: a 2 x 1 domino that covers two adjacent squares in a column, and an \"L\" tromino that covers three squares in an \"L\" shape. You want to find the number of ways to tile the entire board using these pieces. You may rotate the trominos, but you must not leave any square uncovered and you must not cover any square more than once.\n\nWrite a function `num_tilings` that takes an integer `N` representing the length of the board and returns the number of ways to tile the board modulo 10^9 + 7.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure heapq."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named remove_shipment."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeDwa."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "combination", "instruction": "You should initialize an object named tys as an instance of the AnalyzeDwa class using ['dwa', 'info'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named remove_shipment that includes these methods ['transform_punish']."}, {"type": "combination", "instruction": "In your code, the class AnalyzeDwa should have these properties ['form', 'data']."}], "instruction_dependence": {"7": [0, 1, 5], "8": [0, 1, 4], "9": [0, 1, 5]}, "question_id": 487}
{"question": "\n\nDesign a feature flag management system that allows for the creation and retrieval of feature flags with rollout percentages. A feature flag is a mechanism to enable or disable features during runtime. Each feature flag can have multiple rollout objects, each specifying a percentage of users for whom the feature is enabled.\n\nImplement the following functionalities:\n\n1. `CreateFlag(flag Flag) error`: Adds a new feature flag to the system. If a flag with the same namespace and name already exists, return an error indicating that the flag cannot be created.\n\n2. `GetFlag(namespace, name string) (Flag, error)`: Retrieves a feature flag by its namespace and name. If the flag does not exist, return an error.\n\n3. `EvaluateFlag(namespace, name string, userPercentage int) (bool, error)`: Evaluates a feature flag for a given user percentage. The function should return `true` if the feature is enabled for the user percentage, and `false` otherwise. If the flag does not exist or the user percentage is not covered by any rollout, return an error.\n\nAssume that the storage of the flags is in-memory and thread-safe.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure slice."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "variable", "instruction": "Variable credit, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named filter_info."}, {"type": "interface", "instruction": "Your code should define an interface named search_dwa."}, {"type": "class", "instruction": "Your code should define a class named AddTokenTys."}, {"type": "combination", "instruction": "You should define an interface named search_dwa that includes these methods ['filter_customer']."}, {"type": "combination", "instruction": "Your code should define a class named AddTokenTys that implements the search_dwa interface."}, {"type": "combination", "instruction": "In your code, the class AddTokenTys should have these properties ['transaction', 'event']."}, {"type": "combination", "instruction": "In your code, the class AddTokenTys should have these methods ['filter_customer']."}, {"type": "combination", "instruction": "The function filter_info should return a struct as its result."}], "instruction_dependence": {"7": [0, 5], "11": [0, 9], "12": [0, 9, 10], "13": [0, 10], "14": [0, 10], "15": [0, 8]}, "question_id": 488}
{"question": "\nDesign a resource management system for a game that allows the tracking and manipulation of various in-game resources. Each resource has a name, a current amount, and a maximum amount. The system should provide functionalities to update resources, set their maximum values, and check if certain transactions can be afforded based on the current resource amounts. Additionally, the system should handle resource bundles, which are collections of resources, and provide methods to pay or receive these bundles. Implement the system in C++ and ensure that it can handle resource identification both by name and by a unique identifier generated using a hash function.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the char keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, should be a global variable."}, {"type": "variable", "instruction": "Variable request should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named set_profile."}, {"type": "class", "instruction": "Your code should define a class named AddUserCustomer."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['set', 'cmath']."}, {"type": "file", "instruction": "Your code should use the function set_profile from the library set."}, {"type": "combination", "instruction": "In your code, the class AddUserCustomer should have these methods ['update_message']."}, {"type": "combination", "instruction": "The function set_profile should return a string as its result."}], "instruction_dependence": {"5": [0, 1, 2, 4], "6": [0, 1, 2, 4], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "12": [0, 1, 2, 8], "13": [0, 1, 2, 7]}, "question_id": 489}
{"question": "\n\nDesign a 3D rendering engine that uses instanced rendering to efficiently draw multiple instances of a 3D model with a single draw call. The engine should be capable of applying transformations to each instance and correctly lighting them using a simple directional light model. The engine should also support texturing of the models.\n\nWrite a C++ program that uses the provided shader code to render a scene with multiple instances of a 3D model. The program should:\n\n1. Load a 3D model and a texture.\n2. Create multiple instances of the model with different transformations (position, rotation, scale).\n3. Use the instanced rendering shader (`MAP_SHADER_INSTANCED_V_SRC`) for rendering the instances.\n4. Use the non-instanced rendering shader (`MAP_SHADER_V_SRC`) for rendering a single instance of the model.\n5. Apply the fragment shader (`MAP_SHADER_F_SRC`) to shade the models with a directional light and texture.\n6. Display the rendered scene in a window.\n\nThe program should be structured with classes and functions to manage shaders, models, instances, and the rendering process. Include error checking and handle any potential issues gracefully.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use the struct keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, should be a global variable."}, {"type": "class", "instruction": "Your code should define a class named Customer."}, {"type": "file", "instruction": "Your code should be organized in a package named check_record."}, {"type": "combination", "instruction": "Your code should be organized in a package named check_record, which should contain these classes ['TysProfile']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 6, 7]}, "question_id": 490}
{"question": "\n\nDesign a Java program that models a simple Pet Registry system. The system should be able to register owners and their pets, and provide different views of the data based on user roles. The roles are \"Owner\" and \"Public\". When an \"Owner\" views the data, they should see all their information and their pets' information. When the \"Public\" views the data, they should only see the owner's name and city, and the pet's name and type.\n\nCreate a class `OwnerDto` that represents the data transfer object for an owner. It should include fields for id, name, surname, address, city, phone, and a list of `PetDto` objects representing the owner's pets. Use JSON views to control the serialization of the fields based on the user role.\n\nCreate a class `PetDto` that represents the data transfer object for a pet. It should include fields for id, name, type, and the owner's id. Use JSON views to control the serialization of the fields based on the user role.\n\nImplement a simple `PetRegistryService` with methods to add an owner, add a pet to an owner, and retrieve owner information by id with the appropriate view based on the user role.\n\nProvide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, should be a global variable."}, {"type": "variable", "instruction": "Variable notification, the initial value should be kms."}, {"type": "variable", "instruction": "Variable notification, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_record."}, {"type": "interface", "instruction": "Your code should define an interface named filter_bill."}, {"type": "combination", "instruction": "You should define an interface named filter_bill that includes these methods ['analyze_msg', 'filter_event']."}, {"type": "combination", "instruction": "The function calculate_record should take ['item', 'customer'] as parameters."}, {"type": "combination", "instruction": "The function calculate_record should return a char as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"4": [0, 3, 12], "5": [0, 3, 12], "6": [0, 3, 12], "9": [0, 8, 12], "10": [0, 7, 12], "11": [0, 7, 12]}, "question_id": 491}
{"question": "\n\nYou are tasked with creating a Django administration interface for a law firm's case management system. The system should allow administrative users to manage different types of data related to legal cases, including case types, scopes, clients, lawyers, services, cases, and registrations. Each model has specific fields that need to be displayed in the admin interface and certain fields that should be searchable.\n\nYour job is to implement custom Django `ModelAdmin` classes for each model to enhance the admin interface. The models are already defined in the `models.py` file (not provided here), and you are given the task to set up the admin interface according to the following specifications:\n\n1. `CasesTypeAdmin` should display the fields `id` and `type`, and allow searching by `type`.\n2. `ScopeAdmin` should display the fields `id` and `type`, and allow searching by `type`.\n3. `ClientsAdmin` should display the fields `id`, `f_name`, `m_name`, `l_name`, `passport`, and `tel`, and allow searching by `l_name`, `passport`, and `tel`.\n4. `LawyersAdmin` should display the fields `id`, `f_name`, `m_name`, `l_name`, `id_scope`, and `free`, and allow searching by `l_name` and `free`.\n5. `ServicesAdmin` should display the fields `id`, `type`, and `cost`, and allow searching by `type`.\n6. `CasesAdmin` should display the fields `id`, `name`, `content`, `date`, `id_client`, `id_lawyer`, `id_service`, and `id_case_type`, and allow searching by `name`, `date`, `id_client`, `id_lawyer`, `id_service`, and `id_case_type`.\n7. `RegistrationAdmin` should display the fields `id`, `id_client`, `id_lawyer`, `id_service`, `id_case_type`, and `date`, and allow searching by `date`.\n\nWrite the Python code to create these `ModelAdmin` classes and register them with the Django admin site. Ensure that all necessary packages are imported at the beginning of the code snippet.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "Variable punish, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_message', 'manage_info', 'analyze_transaction']."}, {"type": "interface", "instruction": "Your code should define an interface named modify_transaction."}, {"type": "class", "instruction": "Your code should define a class named CreateUser."}, {"type": "file", "instruction": "Your code should be organized in a package named set_message."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_message, which should contain these classes ['ProcessReportBill', 'NotificationCredit']."}, {"type": "global", "instruction": "Your answer in total should not exceed 25 lines."}], "instruction_dependence": {"7": [0, 1, 6, 13], "12": [0, 1, 10, 11, 13]}, "question_id": 492}
{"question": "Please design a Java class `PersonAssert` that asserts the age attribute of a `Person` object. If the assertion fails, it should throw an exception showing the expected age and the actual age. Please implement the `assertAge` method according to the following requirements:\n\n- The method should verify if the age of the `Person` object is equal to the given age.\n- If they are not equal, it should throw an exception providing detailed error information.\n- The method should support method chaining, i.e., return the current `PersonAssert` object so that other assertion methods can be called in succession.\n\nPlease provide a `Person` class containing only an `age` attribute and a corresponding `getAge` method.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Objects;\nclass PersonAssert {\n    private Person actual;\n    private static final String ERROR_MESSAGE = \"\\n期望的年龄为:\\n  <%s>\\n但实际的年龄为:\\n  <%s>\";\n    public PersonAssert(Person actual) {\n    }\n    public PersonAssert isNotNull() {\n        return this;\n    }\n    public PersonAssert assertAge(Integer expectedAge) {\n        return this;\n    }\n}\nclass Person {\n    private Integer age;\n    public Person(Integer age) {\n    }\n    public Integer getAge() {\n        return null;\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should use the finally keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure Set."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable token, the initial value should be msg."}, {"type": "interface", "instruction": "Your code should define an interface named sort_info."}, {"type": "class", "instruction": "Your code should define a class named MessageTys."}, {"type": "file", "instruction": "Your code should be organized in a package named handle_cut."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.text']."}, {"type": "file", "instruction": "Your code should use the function get_form from the library java.sql."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.lang']."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the MessageTys class using ['data', 'inventory', 'view'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named sort_info that includes these methods ['process_inventory']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "13": [0, 1, 2, 12], "15": [0, 1, 2, 10], "16": [0, 1, 2, 9]}, "question_id": 493}
{"question": "Given question below:\n------------\nThis is a question from Codewars: Complete the method/function so that it converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, also often referred to as Pascal case).\nThe input test cases are as follows:\n\n```python\ntest.describe(\"Testing function to_camel_case\")\ntest.it(\"Basic tests\")\ntest.assert_equals(to_camel_case(''), '', \"An empty string was provided but not returned\")\ntest.assert_equals(to_camel_case(\"the_stealth_warrior\"), \"theStealthWarrior\", \"to_camel_case('the_stealth_warrior') did not return correct value\")\ntest.assert_equals(to_camel_case(\"The-Stealth-Warrior\"), \"TheStealthWarrior\", \"to_camel_case('The-Stealth-Warrior') did not return correct value\")\ntest.assert_equals(to_camel_case(\"A-B-C\"), \"ABC\", \"to_camel_case('A-B-C') did not return correct value\")\n```\n\nPlease write a function `to_camel_case` in Python, which takes a string variable `text` as arguments and returns the camel case string.\n\nFunction signature is: `to_camel_case(text)`\n------------\n\nWe try to solve it with code:\n```python\nimport re\n\ndef to_camel_case(text):\n    words = re.split('[-_]', text)\n    if not words:\n        return \"\"\n    \n    first_word_capitalized = words[0][0].isupper() if words[0] else False\n    \n    if not first_word_capitalized:\n        return words[0] + ''.join(word.capitalize() for word in words[1:])\n    else:\n        return ''.join(word.capitalize() for word in words)\n\n```\n\nBut some error occurs during execution:\n------------\nTraceback (most recent call last):\n  File \"/tmp/tmpcse9je4m/tmp4aw4aehx.py\", line 35, in <module>\n    assert f(s2) == to_camel_case(s2)\nAssertionError\n\n------------\n\nPlease try to analyze the cause of the error and give the full code after the modification (with markdown code block format)", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, should be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_cut', 'update_form', 'create_user', 'configure_event']."}, {"type": "interface", "instruction": "Your code should define an interface named configure_token."}], "instruction_dependence": {"5": [0, 1, 2, 3, 4]}, "question_id": 494}
{"question": "\n\nDesign a Python program that validates a collection of STAC (SpatioTemporal Asset Catalog) entries for a given Earth Engine public data catalog. The program should perform the following checks on each STAC entry:\n\n1. **ID Check**: Ensure that each STAC entry has a valid 'id' field that is not prefixed with the `UNKNOWN_ID` string.\n2. **Type Check**: Verify that the 'type' field of each STAC entry matches one of the `StacType` enum values.\n3. **GEE Type Check**: Confirm that the 'gee:type' field of each STAC entry matches one of the `GeeType` enum values or is absent (in which case it defaults to `GeeType.NONE`).\n4. **Non-Commercial Check**: Check if the dataset ID of each STAC entry is listed in the non-commercial datasets list.\n\nThe program should report any issues found during the validation process, categorizing them as either 'warning' or 'error' based on the severity of the issue. The output should be a list of `Issue` instances, each representing a specific problem found in a STAC entry.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 14 characters."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "Variable bill, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named filter_kms."}], "instruction_dependence": {"6": [0, 1, 2, 5]}, "question_id": 495}
{"question": "\n\nDesign a Java program that merges overlapping intervals from a list of intervals. Each interval is represented as a pair of integers, where the first integer is the start time and the second is the end time of the interval. The intervals may be provided in any order, and the program should output a list of intervals with all overlapping intervals merged into one.\n\nThe merged intervals should be represented as a list of pairs, where each pair is a non-overlapping interval. The output list should be sorted by the start time of each interval.\n\nFor example, given the input intervals `{{1,3}, {2,4}, {5,7}, {6,8}}`, the program should output the merged intervals `{{1,4}, {5,8}}`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named add_report."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named filter_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "file", "instruction": "Your code should be organized in a package named set_view."}, {"type": "combination", "instruction": "The function add_report should take ['msg', 'tys'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_view, which should contain these classes ['AnalyzeMsgRoom', 'CalculateRequestEvent', 'Status']."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 7], "11": [0, 1, 5], "12": [0, 1, 9, 10]}, "question_id": 496}
{"question": "\n\nCreate a Java class that represents a user interface for managing notification settings in a mobile application. The interface should allow users to toggle their preferences for receiving notifications via push notifications, email, and SMS. Each notification type should be represented as a checkbox that can be checked or unchecked to indicate the user's preference.\n\nThe class should be named `NotificationSettingsManager` and should include the following methods:\n\n- `togglePushNotifications(boolean enabled)`: Toggles the state of push notifications.\n- `toggleEmailNotifications(boolean enabled)`: Toggles the state of email notifications.\n- `toggleSMSNotifications(boolean enabled)`: Toggles the state of SMS notifications.\n- `arePushNotificationsEnabled()`: Returns `true` if push notifications are enabled, `false` otherwise.\n- `areEmailNotificationsEnabled()`: Returns `true` if email notifications are enabled, `false` otherwise.\n- `areSMSNotificationsEnabled()`: Returns `true` if SMS notifications are enabled, `false` otherwise.\n\nAssume that the `Checkbox` interface from the given code snippet is available and provides the following methods:\n\n- `void check()`: Checks the checkbox.\n- `void uncheck()`: Unchecks the checkbox.\n- `boolean isChecked()`: Returns `true` if the checkbox is checked, `false` otherwise.\n\nUse the given code snippet as inspiration for the `NotificationSettingsManager` class, which should interact with the `Checkbox` interface to manage the notification settings.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should use data structure Set."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Your code should define an enumeration named Language"}, {"type": "variable", "instruction": "Variable data should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named delete_form."}, {"type": "class", "instruction": "Your code should define a class named TysBill."}, {"type": "file", "instruction": "Your code should be organized in a package named search_order."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.text', 'java.awt']."}, {"type": "file", "instruction": "Your code should use the function display_transaction from the library java.util."}, {"type": "combination", "instruction": "Your code should define a class named TysBill that implements the delete_form interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_order, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 5], "12": [0, 1, 2, 11], "13": [0, 1, 2, 8, 9], "14": [0, 1, 2, 10]}, "question_id": 497}
{"question": "\n\nCreate a Java program that prints a hollow square pattern with a diagonal from the top-left to the bottom-right corner. The size of the square (the number of rows and columns) should be determined by an input parameter `n`. The pattern should consist of asterisks (`*`) for the borders of the square and the diagonal, and spaces for the hollow parts.\n\nFor example, if `n` is 5, the output should be:\n\n```\n* * * * *\n* *     *\n*   *   *\n*     * *\n* * * * *\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the throws keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Your code should define an enumeration named Department"}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable credit, type should be double."}, {"type": "variable", "instruction": "Variable credit, should be a global variable."}, {"type": "variable", "instruction": "Variable credit should not be a constant."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.sql']."}, {"type": "combination", "instruction": "In your code, the class Kms should have these methods ['generate_shipment', 'get_info']."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"6": [0, 1, 4, 14], "7": [0, 1, 4, 14], "8": [0, 1, 4, 14], "9": [0, 1, 4, 14], "11": [0, 1, 10, 14], "13": [0, 1, 10, 14]}, "question_id": 498}
{"question": "\nWrite a program that calculates the sum of the greatest common divisors (GCDs) of all possible triplets of numbers from 1 to `K`, inclusive. The GCD of a triplet `(a, b, c)` is defined as the greatest common divisor of the three numbers `a`, `b`, and `c`.\n\nYour program should read an integer `K` from the standard input and output the sum of all GCDs for every triplet `(a, b, c)` where `1 <= a, b, c <= K`.\n\nFor example, if `K` is 2, the triplets are `(1, 1, 1)`, `(1, 1, 2)`, `(1, 2, 1)`, `(1, 2, 2)`, `(2, 1, 1)`, `(2, 1, 2)`, `(2, 2, 1)`, and `(2, 2, 2)`. The sum of the GCDs for these triplets is `1 + 1 + 1 + 1 + 1 + 1 + 1 + 2 = 9`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the const_cast keyword."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Variable token, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named generate_customer."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named handle_log."}, {"type": "class", "instruction": "Your code should define a class named CreateMsgDwa."}, {"type": "file", "instruction": "Your code should not use the following libraries ['set', 'stdlib', 'algorithm']."}, {"type": "combination", "instruction": "Your code should define a class named CreateMsgDwa that implements the handle_log interface."}, {"type": "combination", "instruction": "In your code, the class CreateMsgDwa should have these methods ['insert_tys']."}], "instruction_dependence": {"3": [0, 1, 2], "5": [0, 1, 4], "9": [0, 1, 6, 7], "10": [0, 1, 7]}, "question_id": 499}
{"question": "\n\nYou are tasked with creating a report that identifies exceptions in stock product and industry data. The report should highlight unusual variations in the data that could indicate potential issues. The data is stored in a Spark environment and is updated daily. Your job is to write a Python class that extends `LeekSparkJob` to perform the following tasks:\n\n1. Initialize with the necessary table configurations.\n2. Retrieve the total number of records for a given date from two different tables: one for product data and one for industry data.\n3. Compute daily exception rates for products and industries by joining the exception data with the total number of records and calculating the rate of exceptions.\n4. The exception rates to be calculated are:\n    - Product exception rate\n    - Industry exception rate\n    - Product and industry re-equal exception rate\n    - Product positive-negative exception rate\n    - Industry positive-negative exception rate\n5. The final report should be saved to a specified table and should be partitioned by the `enddate`.\n\nThe class should include methods for initializing data, retrieving the total number of records, and performing the daily computation. The daily computation should persist intermediate results to disk for performance reasons and repartition the final DataFrame to optimize for parallel processing.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "class", "instruction": "Your code should define a class named BillInfo."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_account."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the BillInfo class using ['record', 'profile'] for initialization."}, {"type": "combination", "instruction": "In your code, the class BillInfo should have these properties ['data', 'item', 'request']."}, {"type": "global", "instruction": "Your answer in total should not exceed 25 lines."}], "instruction_dependence": {"3": [0, 2, 7], "5": [0, 2, 7], "6": [0, 2, 7]}, "question_id": 500}
{"question": "\nDesign a class `CombatTactics` that represents the tactics used by a unit in a combat scenario. The tactics are defined by four components: move, stance, rank, and file. Each component is represented by a variety, which is a specific behavior or position in combat. The class should be able to initialize these components from a text parser, save the tactics to an output stream, print a description of the tactics, report the tactics settings, and check if the tactics are defined or set to default.\n\nThe class should also handle cases where the tactics are unknown or undefined. If the tactics are unknown, it means that the unit's behavior in combat is unpredictable. If the tactics are undefined, it means that the unit has not been assigned any specific tactics.\n\nThe class should provide the following functionalities:\n- A constructor that initializes the tactics to unknown.\n- A copy constructor.\n- A method `defaultInitialization` that sets the tactics to default values.\n- A method `initialize` that takes a `Parser` object and sets the tactics based on the parsed data.\n- Two `save` methods that output the tactics to an `ostream`, with an optional prefix string.\n- A `print` method that returns a string representation of the tactics.\n- A `report` method that outputs the tactics settings to an `ostream`.\n- A method `undefine` that resets the tactics to unknown.\n- A method `isDefined` that checks if the tactics are defined.\n- A method `isDefault` that checks if the tactics are set to default values.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not use the switch keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be bool."}, {"type": "variable", "instruction": "Variable data, the initial value should be shipment."}, {"type": "function", "instruction": "Your code should include a function named handle_msg."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "class", "instruction": "Your code should define a class named GetProfilePunish."}, {"type": "combination", "instruction": "You should initialize an object named data as an instance of the GetProfilePunish class using ['info'] for initialization."}, {"type": "combination", "instruction": "In your code, the class GetProfilePunish should have these properties ['notification', 'transaction', 'status']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 11], "13": [0, 1, 2, 3, 11]}, "question_id": 501}
{"question": "\n\nDesign a `LongSerializer` class that implements the `Serializer<Long>` interface for serializing and deserializing `Long` values. The class should be able to convert a `Long` value to a byte array and vice versa, ensuring that the serialization and deserialization processes are inverses of each other.\n\nThe `LongSerializer` class should implement the following methods:\n- `serialize(SerialWriter buffer, Long value)`: Serializes the given `Long` value into a byte array and writes it to the provided `SerialWriter` buffer.\n- `deserialize(SerialReader buffer)`: Reads a byte array from the provided `SerialReader` buffer and deserializes it into a `Long` value.\n- `toBytes(long v, byte[] b, int o)`: A static helper method that converts a `long` value into a byte array starting at the given offset.\n- `fromBytes(byte[] b, int o)`: A static helper method that converts a byte array starting at the given offset into a `long` value.\n- `size()`: Returns the size of the serialized `Long` value in bytes.\n\nThe `LongSerializer` class should handle the conversion between `long` values and byte arrays in big-endian order (most significant byte first).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named check_view."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named display_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named GetMessage."}, {"type": "combination", "instruction": "You should initialize an object named inventory as an instance of the GetMessage class using ['kms', 'event'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named display_inventory that includes these methods ['check_msg']."}, {"type": "combination", "instruction": "In your code, the class GetMessage should have these methods ['check_msg']."}], "instruction_dependence": {"3": [0, 1, 2], "5": [0, 1, 4], "7": [0, 1, 6], "9": [0, 1, 8], "10": [0, 1, 6], "11": [0, 1, 8]}, "question_id": 502}
{"question": "\nDesign a class `TileEditor` that allows users to create and manipulate 8x8 tiles using a simple graphical interface. Each tile is represented by a 16-byte array, where each pair of bits represents a color index (00, 01, 10, 11) corresponding to a color in a 4-color palette. The class should provide the following functionalities:\n\n1. Initialize a tile with a default color index (0 to 3).\n2. Set and get the color palette, which is a list of 4 `QColor` objects.\n3. Set and get individual pixels within the tile.\n4. Perform horizontal and vertical flips on the tile.\n5. Rotate the tile 90 degrees clockwise or counterclockwise.\n6. Fill the entire tile with the current color index.\n7. Check if two tiles are identical.\n8. Convert the tile to a `QImage` for display purposes.\n9. Load a tile from a `QImage`, given the top-left coordinates of the tile within the image.\n10. Handle mouse events to allow interactive editing of the tile (left-click to paint a pixel with the current color index).\n\nThe class should also provide a `paintEvent` to render the tile on a QWidget, showing the grid and highlighting the tile if it is selected.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "variable", "instruction": "Variable report, the initial value should be notification."}, {"type": "function", "instruction": "Your code should include a function named handle_data."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named set_customer."}, {"type": "class", "instruction": "Your code should define a class named UpdateProductRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_product."}, {"type": "combination", "instruction": "You should define an interface named set_customer that includes these methods ['add_product', 'delete_event', 'analyze_status']."}, {"type": "combination", "instruction": "Your code should define a class named UpdateProductRecord that implements the set_customer interface."}, {"type": "combination", "instruction": "The function handle_data should take ['message', 'request'] as parameters."}, {"type": "combination", "instruction": "The function handle_data should return a double as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_product, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 13 lines."}], "instruction_dependence": {"5": [0, 4, 17, 18], "6": [0, 4, 17, 18], "8": [0, 7, 17, 18], "12": [0, 9, 17, 18], "13": [0, 9, 10, 17, 18], "14": [0, 7, 17, 18], "15": [0, 7, 17, 18], "16": [0, 11, 17, 18]}, "question_id": 503}
{"question": "\n\nWrite a Go program that calculates the time of sunrise for a given location on Earth on a specific date. The program should take into account the observer's latitude, longitude, and the date for which the sunrise time is to be calculated. The sunrise time should be returned as the number of hours (and fractions thereof) from midnight (00:00) local time.\n\nThe calculation should use the following simplified model:\n1. Calculate the solar mean anomaly.\n2. Calculate the equation of the center.\n3. Calculate the ecliptic longitude.\n4. Calculate the solar transit (as provided in the given code snippet).\n5. Calculate the sunrise time using the solar transit and the observer's longitude.\n\nAssume that the observer is located at sea level and that atmospheric refraction is negligible.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named check_order."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named calculate_bill."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named create_data."}, {"type": "file", "instruction": "Your code should import the following libraries ['math', 'os']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['fmt', 'bytes']."}, {"type": "combination", "instruction": "Your code should be organized in a package named create_data, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "7": [0, 1, 6], "11": [0, 1, 8]}, "question_id": 504}
{"question": "Please write a Java method to map the coordinates of a 3D point (longitude, latitude, time) into a new 3D coordinate system. The maximum value of each dimension in the new coordinate system is specified by the user. Specifically, you need to map the original 3D point to a new coordinate system where the minimum value is 0, and the maximum value is the user-specified maximum, based on the given minimum and maximum values of the longitude, latitude, and time. Ensure that your method can handle various inputs and returns a long array containing the mapped x, y, z coordinates.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Arrays;\npublic class CoordinateMapper {\n    public static long[] map3DPoint(double longitude, double minLongitude, double maxLongitude, \n                                    double latitude, double minLatitude, double maxLatitude, \n                                    double timestamp, double minTimestamp, double maxTimestamp, \n                                    long maxValue) {\n    }\n    private static long mapValue(double value, double minValue, double maxValue, long targetMaxValue) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named add_room."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['display_message', 'search_order', 'retrieve_punish']."}, {"type": "interface", "instruction": "Your code should define an interface named insert_customer."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeView."}, {"type": "combination", "instruction": "Your code should define a class named AnalyzeView that implements the insert_customer interface."}, {"type": "combination", "instruction": "In your code, the class AnalyzeView should have these properties ['form', 'inventory', 'msg']."}, {"type": "combination", "instruction": "The function add_room should take ['token'] as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "12": [0, 1, 2, 3, 10, 11], "13": [0, 1, 2, 3, 11], "14": [0, 1, 2, 3, 7]}, "question_id": 505}
{"question": "Please use the OpenCV library to solve the following problem: Given an image, detect the contours within it, and return the area of the largest contour.\nThe solution must meet the following requirements:\n1. Define a Python function `find_contour()`, which does not require any input parameters and returns the area of the largest contour.\n2. The image file is \"hand.png\" and is stored in the same directory as the code.\n3. Sequentially process the input image as follows: convert it to grayscale, apply Gaussian blur with a kernel size of 5x5 and sigma of 0; perform binary thresholding with a threshold value of 70 and threshold type `cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU`.\n4. Use `cv2.RETR_TREE` as the contour retrieval mode and `cv2.CHAIN_APPROX_SIMPLE` as the contour approximation method.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_shipment', 'insert_token']."}, {"type": "interface", "instruction": "Your code should define an interface named sort_item."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named UpdateStatusTys."}, {"type": "combination", "instruction": "In your code, the class UpdateStatusTys should have these properties ['tys', 'profile', 'request']."}], "instruction_dependence": {"6": [0, 5], "8": [0, 7]}, "question_id": 506}
{"question": "\n\nDesign a Java program that simulates a simple version control system for text files. The system should be able to handle the following operations:\n\n1. `createFile(String filename, String content)`: Creates a new text file with the given filename and content. If the file already exists, throw a `FileAlreadyExistsException`.\n2. `commit(String filename, String commitMessage)`: Saves the current state of the file along with a commit message. If the file does not exist or has not been modified since the last commit, throw a `GitRefNotFoundException`.\n3. `getFileContent(String filename)`: Returns the current content of the file. If the file does not exist, throw a `FileNotFoundException`.\n4. `getCommitHistory(String filename)`: Returns a list of commit messages for the file. If the file does not exist, throw a `FileNotFoundException`.\n\nThe program should use custom exceptions to handle error cases, similar to the `GitRefNotFoundException` provided in the code snippet. Implement the custom exceptions and the version control system, and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Your code should define an enumeration named Language"}, {"type": "variable", "instruction": "Variable log should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named retrieve_account."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named filter_shipment."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "combination", "instruction": "You should define an interface named filter_shipment that includes these methods ['execute_shipment', 'insert_info', 'generate_bill']."}], "instruction_dependence": {"5": [0, 1, 3], "7": [0, 1, 6], "9": [0, 1, 8], "10": [0, 1, 8]}, "question_id": 507}
{"question": "\n\nDesign a C++ class `JSON_Objects` that provides functionalities to interact with JSON data related to a gate control system. The class should be able to:\n\n1. Read a JSON file and return its content as a `QString`.\n2. Parse a JSON string representing a gate event and extract the \"UII\" (Unique Item Identifier) value from it.\n3. Create a JSON string that represents a command to set an output with a given value and name.\n4. Provide getter methods for predefined JSON function identifiers related to sending and receiving gate events and IO control commands.\n\nThe class should use the Qt framework, specifically the `QJsonDocument`, `QJsonObject`, and `QJsonValue` classes for JSON handling, and the `QFile` and `QIODevice` classes for file operations.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_status', 'sort_message']."}, {"type": "class", "instruction": "Your code should define a class named TransactionAccount."}, {"type": "file", "instruction": "Your code should import the following libraries ['queue']."}, {"type": "file", "instruction": "Your code should use the function execute_info from the library queue."}, {"type": "file", "instruction": "Your code should not use the following libraries ['cmath', 'string']."}, {"type": "combination", "instruction": "You should initialize an object named kms as an instance of the TransactionAccount class using ['order'] for initialization."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"7": [0, 1, 6, 10], "9": [0, 1, 5, 10]}, "question_id": 508}
{"question": "\n\nWrite a function `consecutiveNumbersSum` that takes an integer `N` and returns the number of ways it can be written as a sum of two or more consecutive positive integers. For example, `5` can be written as `2 + 3`, so the function should return `2` because there are two ways to write `5` as the sum of consecutive numbers: `5` itself and `2 + 3`.\n\nThe function should be part of a class `Solution` and should be optimized to handle large values of `N` efficiently. The function should have the following signature:\n\n```python\ndef consecutiveNumbersSum(self, N: int) -> int:\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named get_order."}, {"type": "class", "instruction": "Your code should define a class named HandleRoomKms."}, {"type": "file", "instruction": "Your code should import the following libraries ['tensorflow']."}, {"type": "combination", "instruction": "You should initialize an object named report as an instance of the HandleRoomKms class using ['notification'] for initialization."}, {"type": "combination", "instruction": "The function get_order should take ['form', 'dwa', 'profile'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 1, 4, 11], "9": [0, 1, 7, 11], "10": [0, 1, 6, 11]}, "question_id": 509}
{"question": "It is known that in RDKit, you can use `atom.SetIsAromatic` to set the aromaticity of an atom, `atom.IsInRing` can determine whether the atom is in a ring, and `bond.SetBondType` can modify the type of chemical bond.\nPlease write a complete Python function `solve(smiles)`, which takes a SMILES as input (note that parsing this SMILES may require setting sanitize=False). If there are aromatic atoms outside the rings in the molecular structure, write code to change these atoms to non-aromatic atoms, and also change the connected chemical bonds to single bonds. Finally, return the modified molecular structure's SMILES.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "structural control", "instruction": "Your code should use data structure array."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named configure_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named TysLog."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy', 'scikit-learn']."}, {"type": "combination", "instruction": "You should initialize an object named kms as an instance of the TysLog class using ['notification', 'record'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named configure_record that includes these methods ['get_report', 'configure_account', 'create_product']."}, {"type": "combination", "instruction": "In your code, the class TysLog should have these methods ['get_report', 'configure_account', 'create_product']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "13": [0, 1, 2, 10], "14": [0, 1, 2, 8], "15": [0, 1, 2, 10]}, "question_id": 510}
{"question": "\n\nDesign a Java Spring Boot application that provides a RESTful API for managing a simple library system. The system should allow for the addition, retrieval, updating, and deletion of books. Each book has an ISBN, title, author, and publication year. The API should enforce the following constraints:\n\n1. The ISBN must be a valid ISBN-10 or ISBN-13.\n2. The title and author fields must not be empty.\n3. The publication year must be a four-digit number not in the future.\n\nThe application should use a GlobalExceptionHandler to handle any validation errors that occur when attempting to add or update a book. The exception handler should return a structured JSON response that includes the timestamp, HTTP status code, and a list of validation error messages.\n\nImplement the `BookController` class with the necessary endpoints to manage the books and use the given `GlobalExceptionHandler` to handle exceptions. Ensure that the `@Valid` annotation is used to enforce the constraints and that custom validation annotations are created for the ISBN and publication year.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the const keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named remove_item."}, {"type": "interface", "instruction": "Your code should define an interface named update_inventory."}, {"type": "combination", "instruction": "You should define an interface named update_inventory that includes these methods ['update_info', 'analyze_request']."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "9": [0, 1, 2, 3, 8]}, "question_id": 511}
{"question": "\nDesign a C++ program that simulates a simple resource management system for a game engine. The system should be able to load various types of resources such as models, textures, shaders, fonts, and programs. Each resource type should have a corresponding class with a `Load` method that takes the resource name, update type, file path, and additional options as parameters. The system should also support attaching shaders to programs and finishing the program setup.\n\nThe resource manager should keep track of all loaded resources and provide a way to access them by name. Implement a `CoreApp` class with a `Setup` method that initializes the resource manager and loads a predefined set of resources. The `Setup` method should demonstrate the loading of models, textures, shaders, fonts, and programs, as well as the attachment of shaders to programs.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not use the break keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named retrieve_account."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named check_credit."}, {"type": "class", "instruction": "Your code should define a class named Event."}, {"type": "combination", "instruction": "You should define an interface named check_credit that includes these methods ['retrieve_item', 'transform_view', 'add_credit']."}, {"type": "combination", "instruction": "Your code should define a class named Event that implements the check_credit interface."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 8, 9]}, "question_id": 512}
{"question": "\n\nDesign a shopping cart system that processes a list of item codes from a customer's shopping list and calculates the total cost, taking into account any promotions. Each item in the store has a unique code, a name, a unit price, and a unit of measure. Some items may have a promotion where buying a certain quantity will result in a discount.\n\nThe `Transfer` class should be able to read a list of item codes (with optional quantities) and output a list of `Item` objects that represent the purchased items, including the name, quantity, unit price, total price, number of promotional items, and unit of measure. The promotions are defined as \"buy N items get M free\", and should be applied to the total quantity of each item purchased.\n\nFor example, if the promotion for \"ITEM000001\" is \"buy 2 get 1 free\" and the customer buys 5, they will be charged for 4 and receive 1 for free.\n\nImplement the `Transfer` class with the following methods:\n- `init()`: Initializes the rules for each item, which could be read from an external source like an XML file, but for simplicity, they are hardcoded in this method.\n- `transferMap()`: Returns the map of item codes to their corresponding `Rule` objects.\n- `transfer(List<String> source)`: Accepts a list of item codes (with optional quantities in the format \"ITEMCODE-QUANTITY\") and returns a list of `Item` objects after applying the promotions.\n\nAdditionally, create the `Rule` and `Item` classes with appropriate attributes and methods to support the `Transfer` class functionality.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, type should be String."}, {"type": "variable", "instruction": "Variable profile, the initial value should be cut."}, {"type": "variable", "instruction": "Variable profile, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named configure_record."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Order."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 13], "8": [0, 1, 2, 6, 13], "9": [0, 1, 2, 6, 13], "11": [0, 1, 2, 10, 13]}, "question_id": 513}
{"question": "\n\nWrite a function `RemoveDuplicates` that removes all duplicates from a sorted array of integers. The function should modify the array in-place and return the new length of the array after duplicates have been removed. The order of the unique elements should be maintained, and no extra space should be allocated for another array.\n\nThe function signature is as follows:\n\n```go\nfunc RemoveDuplicates(nums []int) int\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named tys."}, {"type": "variable", "instruction": "Variable tys, the initial value should be token."}, {"type": "function", "instruction": "Your code should include a function named set_credit."}, {"type": "interface", "instruction": "Your code should define an interface named transform_user."}, {"type": "class", "instruction": "Your code should define a class named Tys."}, {"type": "file", "instruction": "Your code should import the following libraries ['io']."}, {"type": "combination", "instruction": "Your code should define a class named Tys that implements the transform_user interface."}, {"type": "combination", "instruction": "The function set_credit should return a map as its result."}], "instruction_dependence": {"5": [0, 1, 4], "10": [0, 1, 7, 8], "11": [0, 1, 6]}, "question_id": 514}
{"question": " Thermal Expansion Density Calculator\n\nIn a geophysical simulation, it is often necessary to calculate the density of materials as they expand or contract with changes in temperature. The density of a material can be affected by its thermal expansion properties, which are different for fluids and solids. Your task is to create a class that calculates the density of a porous material composed of both fluid and solid parts, taking into account their respective thermal expansion coefficients.\n\nThe class should be able to handle the following:\n- Calculate the density of the fluid and solid parts separately, given their thermal expansion coefficients and a reference temperature.\n- Calculate the bulk density of the material, which is a combination of the fluid and solid densities weighted by the porosity of the material.\n- Calculate the derivatives of the fluid and solid densities with respect to temperature.\n- Calculate the derivative of the inverse of the bulk density with respect to temperature.\n\nThe class should be initialized with the following parameters:\n- `fluid_density`: The base density of the fluid at the reference temperature.\n- `solid_density`: The base density of the solid at the reference temperature.\n- `beta_fluid`: The thermal expansion coefficient of the fluid.\n- `beta_solid`: The thermal expansion coefficient of the solid.\n- `porosity`: The porosity of the material (fraction of fluid).\n- `reference_temperature`: The reference temperature at which the base densities are defined.\n\nThe class should have a method `computeProperties` that takes the current temperature as an argument and updates the properties of the material accordingly.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, the initial value should be punish."}, {"type": "variable", "instruction": "Variable record, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named search_account."}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_msg', 'sort_punish', 'get_transaction', 'filter_customer']."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_shipment."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named ViewForm."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_notification."}, {"type": "file", "instruction": "Your code should import the following libraries ['string', 'stdlib']."}, {"type": "file", "instruction": "Your code should use the function search_account from the library string."}, {"type": "combination", "instruction": "The function search_account should return a list as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_notification, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "11": [0, 1, 10], "13": [0, 1, 12], "16": [0, 1, 15], "17": [0, 1, 8], "18": [0, 1, 14]}, "question_id": 515}
{"question": "\n\nDesign a Go package named `service` that provides functionality to manage services and their actions. Each service is represented by a directory on the filesystem, and each action is a file within that directory. The package should provide the following functionalities:\n\n1. `NewFromPath(servicePath string) (*Service, error)`: This function should create a new `Service` instance from a given file path. The service name is the name of the directory. The function should also read the directory and initialize the `Actions` field of the `Service` struct with the names of the files found in the directory.\n\n2. `GetServices(dataPath string) ([]Service, error)`: This function should return a slice of `Service` instances found in the given data path. Each subdirectory of the data path is considered a separate service.\n\n3. `GetActions() ActionsResponse`: This method of the `Service` struct should return an `ActionsResponse` struct that contains a slice of action names associated with the service.\n\nThe `Service` struct and `ActionsResponse` struct are defined as follows:\n\n```go\ntype Service struct {\n    Name    string\n    Actions []string\n}\n\ntype ActionsResponse struct {\n    Actions []string\n}\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure interface."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Variable cut, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named analyze_order."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_report', 'update_token', 'check_inventory', 'update_dwa']."}, {"type": "interface", "instruction": "Your code should define an interface named submit_msg."}, {"type": "class", "instruction": "Your code should define a class named ProcessLogTransaction."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_credit."}, {"type": "file", "instruction": "Your code should not use the following libraries ['time', 'strconv', 'bytes']."}, {"type": "combination", "instruction": "You should initialize an object named profile as an instance of the ProcessLogTransaction class using ['bill', 'msg', 'item'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named ProcessLogTransaction that implements the submit_msg interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_credit, which should contain these classes ['DwaRoom', 'Order', 'Credit']."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_credit, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"5": [0, 1, 4, 18], "7": [0, 1, 6, 18], "11": [0, 1, 10, 18], "14": [0, 1, 10, 18], "15": [0, 1, 9, 10, 18], "16": [0, 1, 10, 12, 18], "17": [0, 1, 12, 18]}, "question_id": 516}
{"question": "\n\nDesign a Java program that automates the process of user registration on a website using Selenium WebDriver. The program should be able to launch a specified web browser, navigate to the registration page of the OpenCart demo site, and fill in the user's details in the registration form. The details to be filled in are first name, last name, email, telephone, password, and password confirmation.\n\nThe program should also verify that the page title is correct and that the password and password confirmation fields match. If the page title is not \"Register Account\", the program should print \"Incorrect page title\". If the password and confirmation do not match, it should print \"Password mismatch\".\n\nAfter performing these actions, the program should close the browser.\n\n**Guidelines**:\n- Use the Selenium WebDriver for browser automation.\n- Implement utility classes such as `BrowserUtility` and `ElementUtil` to handle common WebDriver operations.\n- Include appropriate exception handling for WebDriver operations.\n- Provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use data structure HashSet."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named retrieve_kms."}, {"type": "class", "instruction": "Your code should define a class named CreateMessage."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named search_credit."}, {"type": "combination", "instruction": "You should initialize an object named room as an instance of the CreateMessage class using ['msg', 'product', 'log'] for initialization."}, {"type": "combination", "instruction": "The function retrieve_kms should take ['profile', 'credit', 'token'] as parameters."}], "instruction_dependence": {"7": [0, 1, 6], "10": [0, 1, 9], "12": [0, 1, 9], "13": [0, 1, 8]}, "question_id": 517}
{"question": "\n\nDesign a class `Delivery` that manages food delivery categories and restaurants. The class should provide the following functionalities:\n\n1. Add a new category of food (e.g., \"Chinese\", \"Italian\", \"Pizza\"). If a category already exists, a `DeliveryException` should be thrown.\n2. Add a new restaurant under a specific category. If the category does not exist or the restaurant is already added under any category, a `DeliveryException` should be thrown.\n3. Retrieve a list of all categories.\n4. Retrieve a list of restaurants for a specific category. If the category does not exist, an empty list should be returned.\n\nWrite a class `DeliveryException` that extends `Exception` and is used to signal any issues with the operations above.\n\nImplement the `Delivery` class and the `DeliveryException` class, and provide JUnit tests to verify the correctness of the implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Your code should define an enumeration named Degree"}, {"type": "variable", "instruction": "Variable customer, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named check_shipment."}, {"type": "interface", "instruction": "Your code should define an interface named execute_token."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.lang']."}, {"type": "file", "instruction": "Your code should use the function check_shipment from the library java.net."}, {"type": "combination", "instruction": "The function check_shipment should return a char as its result."}], "instruction_dependence": {"6": [0, 1, 2, 3, 4], "9": [0, 1, 2, 3, 8], "12": [0, 1, 2, 3, 11], "13": [0, 1, 2, 3, 7]}, "question_id": 518}
{"question": "Assuming you are developing a book management system, which includes a feature that allows users to remove books from their collection list. Describe how you would implement this functionality. The functionality receives two parameters: one is a user object, and the other is the book object to be removed from the collection. You need to find the book from the user's collection list and remove it. If the book does not exist in the user's collection list, no action should be taken.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\nclass User {\n    private String name;\n    private List<Book> collection;\n    public User(String name) {\n    }\n    public void addBookToCollection(Book book) {\n    }\n    public List<Book> getCollection() {\n        return null;\n    }\n    public void setCollection(List<Book> collection) {\n    }\n}\nclass Book {\n    private String title;\n    public Book(String title) {\n    }\n    public String getTitle() {\n        return null;\n    }\n}\nclass CollectionManager {\n    public void deleteBookFromCollection(User user, Book book) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not use the float keyword."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should not be a global variable."}, {"type": "variable", "instruction": "Variable record should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named search_dwa."}, {"type": "interface", "instruction": "Your code should define an interface named generate_dwa."}, {"type": "class", "instruction": "Your code should define a class named DwaForm."}, {"type": "file", "instruction": "Your code should be organized in a package named get_message."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.awt']."}, {"type": "combination", "instruction": "You should define an interface named generate_dwa that includes these methods ['manage_user', 'remove_view']."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_message, which should contain these functions ."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}], "instruction_dependence": {"4": [0, 1, 2, 3, 13], "5": [0, 1, 2, 3, 13], "11": [0, 1, 2, 7, 13], "12": [0, 1, 2, 9, 13]}, "question_id": 519}
{"question": " Implement a Go service that manages the balance of nodes in a network, with the ability to add, update, and expire balances based on time. The service should use an in-memory key-value store to maintain the balances and provide the following functionalities:\n\n1. Add a new balance for a node with a specified expiration time.\n2. Update the balance and expiration time of an existing node.\n3. Automatically expire and remove balances that have passed their expiration time.\n4. Retrieve the balance of a node if it exists and has not expired.\n5. List all nodes with a positive balance in lexicographical order of their IDs.\n\nThe service should be able to handle both positive and negative balances, and it should be able to differentiate between them. Use the provided code snippet as a starting point for implementing the service, and ensure that the service can be tested with a set of test cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "interface", "instruction": "Your code should define an interface named execute_kms."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named TysEvent."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['math']."}, {"type": "combination", "instruction": "Your code should define a class named TysEvent that implements the execute_kms interface."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "9": [0, 1, 2, 4, 6]}, "question_id": 520}
{"question": "\n\nCreate a C++ program that defines a custom structure `FMyStruct` with three properties: two floating-point numbers `A` and `B`, and a custom type `C`. The custom type `FCustomChannelType` should be a simple structure with a single integer property `Value`.\n\nThe program should also define a class `UMyStructPropertySection` that manages a collection of `FMyStruct` instances, each associated with a unique identifier. The class should provide methods to add, update, and retrieve `FMyStruct` instances based on their identifiers.\n\nImplement the following functionalities:\n1. A method to add a new `FMyStruct` instance with a unique identifier.\n2. A method to update the values of `A`, `B`, and `C` for a given identifier.\n3. A method to retrieve the `FMyStruct` instance for a given identifier.\n\nEnsure that the class maintains a map of identifiers to `FMyStruct` instances and handles cases where an identifier does not exist.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named data."}, {"type": "variable", "instruction": "Variable data, type should be set."}, {"type": "function", "instruction": "Your code should include a function named delete_cut."}, {"type": "interface", "instruction": "Your code should define an interface named submit_tys."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE naming convention."}, {"type": "class", "instruction": "Your code should define a class named TransformMessageStatus."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_shipment."}, {"type": "combination", "instruction": "You should initialize an object named status as an instance of the TransformMessageStatus class using ['profile', 'request'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named TransformMessageStatus that implements the submit_tys interface."}, {"type": "combination", "instruction": "In your code, the class TransformMessageStatus should have these methods ['transform_form']."}, {"type": "combination", "instruction": "The function delete_cut should return a string as its result."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 15], "8": [0, 1, 2, 7, 15], "11": [0, 1, 2, 9, 15], "12": [0, 1, 2, 7, 9, 15], "13": [0, 1, 2, 9, 15], "14": [0, 1, 2, 6, 15]}, "question_id": 521}
{"question": "Please design a Java method that can accept a list of strings and convert each string in the list to uppercase. Ensure that your method is thread-safe and can handle any exceptions that may occur.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\npublic class StringListToUpper {\n    public static List<String> convertListToUpper(List<String> inputList) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure Set."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "class", "instruction": "Your code should define a class named UpdateShipmentInfo."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_request."}, {"type": "combination", "instruction": "In your code, the class UpdateShipmentInfo should have these properties ['view', 'form']."}, {"type": "combination", "instruction": "Your code should be organized in a package named modify_request, which should contain these classes ['Info', 'Shipment', 'TysView']."}, {"type": "global", "instruction": "Your answer in total should not exceed 20 lines."}], "instruction_dependence": {"4": [0, 3, 8], "6": [0, 3, 8], "7": [0, 3, 5, 8]}, "question_id": 522}
{"question": "Please write a complete Python function `solve(smiles, atom_idx)` that \ntakes a SMILES as input and specifies an atom index to replace the specified atom with nitrogen. \nThe molecule can be edited with Chem.RWMol().", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the and keyword."}, {"type": "structural control", "instruction": "Your code should use data structure heapq."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['process_info', 'submit_inventory', 'delete_log', 'generate_item']."}, {"type": "interface", "instruction": "Your code should define an interface named transform_customer."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named UpdateBillDwa."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_dwa."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'seaborn']."}, {"type": "combination", "instruction": "In your code, the class UpdateBillDwa should have these properties ['request', 'punish']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7], "12": [0, 1, 2, 9]}, "question_id": 523}
{"question": "Assume you are developing a music player application, and you need to implement a feature that randomly selects a song from a given collection of songs to play. Each song belongs to a specific genre (like Pop, Rock, Jazz, etc.), and users can choose a genre. The application will then randomly pick a song from that genre to play.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Random;\npublic class SongSelector {\n    private HashMap<String, List<String>> genreToSongsMap;\n    private Random random;\n    public SongSelector() {\n    }\n    public void addSong(String genre, String song) {\n    }\n    public String getRandomSongFromGenre(String genre) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 4 functions."}, {"type": "global", "instruction": "Your code should not use the for keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure Stack."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named handle_customer."}, {"type": "class", "instruction": "Your code should define a class named Status."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named create_transaction."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.math']."}, {"type": "combination", "instruction": "You should define an interface named handle_customer that includes these methods ['retrieve_record', 'filter_cut', 'execute_request']."}, {"type": "combination", "instruction": "Your code should define a class named Status that implements the handle_customer interface."}, {"type": "combination", "instruction": "In your code, the class Status should have these methods ['retrieve_record', 'filter_cut', 'execute_request']."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8, 15], "12": [0, 1, 2, 3, 7, 15], "13": [0, 1, 2, 3, 7, 8, 15], "14": [0, 1, 2, 3, 8, 15]}, "question_id": 524}
{"question": "\n\nWrite a Python function named `append_and_log` that appends a given string to a text file and logs the operation to a separate log file. The function should take three parameters: the name of the text file to append to, the string to append, and the name of the log file where the operation should be recorded. The log entry should include a timestamp of when the append operation was performed.\n\nThe function should return the number of characters added to the text file. If the text file does not exist, it should be created. If the log file does not exist, it should also be created.\n\nThe log entry format should be: `YYYY-MM-DD HH:MM:SS: <text> appended to <filename>`\n\nFor example, if the function is called with the text file `notes.txt`, the string `\"Hello, World!\"`, and the log file `operations.log`, the `notes.txt` file should have `\"Hello, World!\"` appended to it, and the `operations.log` file should have an entry like `2023-03-15 10:30:45: \"Hello, World!\" appended to notes.txt`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 19 characters."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, the initial value should be info."}, {"type": "function", "instruction": "Your code should include a function named set_punish."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named modify_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SortShipmentForm."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_info."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "combination", "instruction": "In your code, the class SortShipmentForm should have these methods ['get_user', 'set_status', 'modify_report']."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "8": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 9], "14": [0, 1, 2, 3, 11]}, "question_id": 525}
{"question": "Please implement a template class named Factorial using C++ templates that can compute the factorial of any given value during compile time. This class should contain a static constant member named value to store the results of the factorial calculation. For example, the value of Factorial<1>::value should be 1, the value of Factorial<2>::value should be 2, the value of Factorial<3>::value should be 6, and so on.", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should use the namespace keyword."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named message."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable message, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named modify_customer."}, {"type": "class", "instruction": "Your code should define a class named Customer."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_report."}, {"type": "file", "instruction": "Your code should import the following libraries ['stack', 'set']."}, {"type": "file", "instruction": "Your code should use the function modify_customer from the library cmath."}, {"type": "combination", "instruction": "In your code, the class Customer should have these methods ['remove_event']."}, {"type": "combination", "instruction": "The function modify_customer should take ['customer', 'profile', 'account'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_report, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 3, 5], "10": [0, 1, 2, 3, 9], "13": [0, 1, 2, 3, 12], "14": [0, 1, 2, 3, 9], "15": [0, 1, 2, 3, 8], "16": [0, 1, 2, 3, 11]}, "question_id": 526}
{"question": "\n\nDesign a Python class `SATTileTree2D` that efficiently computes the sum and average of elements in a 2D region of a 3D array with multiple channels. The class should use a Summed-Area Table (SAT) approach to allow for fast queries of rectangular regions within the array. The class should support the following operations:\n\n1. `__init__(self, values)`: Initialize the SATTileTree2D with a 4D NumPy array `values` of shape `(depth, height, width, channels)`. The constructor should precompute the SAT for the given array.\n\n2. `query_sum(self, z1, y1, x1, z2, y2, x2)`: Return the sum of elements in the rectangular region defined by the corners `(z1, y1, x1)` and `(z2, y2, x2)` for each channel. The region is inclusive of `z1, y1, x1` and exclusive of `z2, y2, x2`.\n\n3. `query_average(self, z1, y1, x1, z2, y2, x2)`: Return the average of elements in the rectangular region defined by the corners `(z1, y1, x1)` and `(z2, y2, x2)` for each channel.\n\n4. `get_sat(self)`: Return the computed SAT as a 4D NumPy array.\n\n5. `size(self)`: Return the size in bytes of the SAT data structure.\n\nThe class should handle cases where the query region is partially or completely outside the bounds of the array by returning appropriate sums or averages (e.g., treating out-of-bounds areas as having zero values).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure collections."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named search_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['Django', 'pandas', 'matplotlib']."}, {"type": "combination", "instruction": "You should define an interface named search_customer that includes these methods ['process_credit', 'get_profile', 'add_record']."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}, {"type": "global", "instruction": "Your answer in total should not exceed 17 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 12, 13], "11": [0, 1, 2, 8, 12, 13]}, "question_id": 527}
{"question": "\n\nDesign a custom Android `View` that simulates a recording progress indicator with animated concentric circles and a rotating gradient ring. The view should exhibit the following behavior:\n\n1. The view should have a minimum default size but should be able to scale based on the available space if specified with `wrap_content` or a specific dimension.\n2. The view should display a central icon representing a microphone.\n3. Around the central icon, there should be a rotating gradient ring that continuously animates in a circular motion.\n4. Two concentric circles should emanate from the center, representing ripples or waves, and they should gradually fade out as they expand.\n5. The view should provide public methods to start and stop the animation.\n6. The animation should be smooth and should not block the UI thread.\n\nEnsure that the view can be integrated into an existing Android layout and that it handles its own rendering and animation logic.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Your code should define an enumeration named Color"}, {"type": "variable", "instruction": "Variable request, should not be a global variable."}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named display_account."}, {"type": "function", "instruction": "Your code should not use any functions from the ['execute_message', 'transform_info', 'add_cut']."}, {"type": "interface", "instruction": "Your code should define an interface named modify_log."}, {"type": "class", "instruction": "Your code should define a class named ModifyCut."}, {"type": "file", "instruction": "Your code should be organized in a package named add_room."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.nio']."}, {"type": "combination", "instruction": "In your code, the class ModifyCut should have these methods ['search_data', 'get_record']."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_room, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 3], "6": [0, 1, 3], "13": [0, 1, 10], "14": [0, 1, 11]}, "question_id": 528}
{"question": "\n\nDesign a system that manages the lifecycle of software releases within a continuous deployment pipeline. The system should be able to create, update, retrieve, and list releases, as well as associate them with builds and artifacts. Each release should have a unique identifier, a status, and references to its associated build and artifact.\n\nImplement the following functionalities:\n\n1. `UpsertRelease`: Create or update a release. If the release ID is not provided, a new release should be created with a unique ID. If the release ID is provided, the existing release should be updated. The status of the release can be one of the following: `UNKNOWN`, `PENDING`, `RUNNING`, `SUCCESS`, `FAILED`.\n\n2. `GetRelease`: Retrieve a release by its ID. If the release does not exist, return an error indicating that the release was not found.\n\n3. `ListReleases`: List all releases for a given application. Optionally, the list can include detailed information about the associated artifact and/or build.\n\nEnsure that the system is robust by handling errors appropriately and returning meaningful error codes when operations fail.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "file", "instruction": "Your code should import the following libraries ['os']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['time', 'sort']."}, {"type": "global", "instruction": "Your function should not exceed 17 lines."}], "instruction_dependence": {"5": [0, 4, 8]}, "question_id": 529}
{"question": "\n\nGiven a 2D grid of non-negative integers where each cell represents the cost of stepping on it, write a program to find the minimum path sum from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.\n\nThe grid is represented as a vector of vectors of integers, and the function `minPathSum` should return the minimum sum of the path.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the namespace keyword."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "variable", "instruction": "Variable cut, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_profile', 'filter_event', 'display_record', 'update_room']."}, {"type": "interface", "instruction": "Your code should define an interface named search_request."}, {"type": "class", "instruction": "Your code should define a class named AddKms."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named manage_user."}], "instruction_dependence": {"5": [0, 1, 3], "9": [0, 1, 8]}, "question_id": 530}
{"question": " OpenGL Key and Mouse Event Handler\n\nYou are tasked with creating an event handler for an OpenGL application using GLUT (the OpenGL Utility Toolkit). The event handler should be able to initialize the OpenGL context, handle mouse events including button presses and position, and handle special keyboard events such as function keys and arrow keys.\n\nYour implementation should include the following functionalities:\n1. Initialize the OpenGL context with a given width and height, and check for necessary OpenGL extensions.\n2. Convert GLUT mouse button events and states to a custom format and handle them.\n3. Convert GLUT special keyboard events to a custom format and handle them.\n4. Provide a translation function to map GLUT special keys to custom key codes.\n\nEnsure that your code is well-documented, and provide test cases to verify the correctness of the event handler.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "global", "instruction": "Your code should use the case keyword."}, {"type": "structural control", "instruction": "Your code should use data structure vector."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Variable transaction, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named process_dwa."}, {"type": "interface", "instruction": "Your code should define an interface named check_msg."}, {"type": "class", "instruction": "Your code should define a class named FilterMessage."}, {"type": "file", "instruction": "Your code should be organized in a package named generate_status."}, {"type": "combination", "instruction": "Your code should define a class named FilterMessage that implements the check_msg interface."}, {"type": "combination", "instruction": "In your code, the class FilterMessage should have these properties ['request', 'data']."}, {"type": "combination", "instruction": "In your code, the class FilterMessage should have these methods ['sort_customer', 'get_token', 'remove_account']."}, {"type": "combination", "instruction": "The function process_dwa should take ['info', 'inventory'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named generate_status, which should contain these classes ['UpdateStatusBill', 'ExecuteInventoryCredit', 'LogCustomer']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "12": [0, 1, 2, 3, 9, 10], "13": [0, 1, 2, 3, 10], "14": [0, 1, 2, 3, 10], "15": [0, 1, 2, 3, 8], "16": [0, 1, 2, 3, 10, 11]}, "question_id": 531}
{"question": "Assume you are developing a feature for a text editor that involves writing a method to update the text style state of the editor, including bold, italic, underline, and strikethrough. You need to set the corresponding button states based on the current style of the text (i.e., if the text is bold, the bold button should be pressed). Additionally, you need to hide the color picker, font picker, and font size picker. Based on these requirements, describe how you would implement this feature.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.awt.Color;\nimport javax.swing.JButton;\nimport javax.swing.JColorChooser;\nimport javax.swing.JComboBox;\npublic class TextStyleUpdater {\n    private JButton btnBold = new JButton(\"加粗\");\n    private JButton btnItalic = new JButton(\"斜体\");\n    private JButton btnUnderline = new JButton(\"下划线\");\n    private JButton btnStrikethrough = new JButton(\"删除线\");\n    private JColorChooser colorChooser = new JColorChooser();\n    private JComboBox<String> fontSelector = new JComboBox<>();\n    private JComboBox<Integer> fontSizeSelector = new JComboBox<>();\n    private TextProperties textProperties = new TextProperties(); \n    public void refreshTextStyle() {\n    }\n    private class TextProperties {\n        boolean isBold() {  } \n        boolean isItalic() {  }\n        boolean isUnderlined() {  }\n        boolean isStrikethrough() {  }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the interface keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable token should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_room', 'delete_msg']."}, {"type": "class", "instruction": "Your code should define a class named TransactionToken."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named update_token."}, {"type": "combination", "instruction": "You should initialize an object named info as an instance of the TransactionToken class using ['order', 'order', 'notification'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named update_token, which should contain these classes ['RoomCut']."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 5, 7, 16], "9": [0, 1, 2, 3, 4, 5, 7, 16], "12": [0, 1, 2, 3, 4, 5, 11, 16], "14": [0, 1, 2, 3, 4, 5, 11, 16], "15": [0, 1, 2, 3, 4, 5, 11, 13, 16]}, "question_id": 532}
{"question": "\n\nImplement a function `double squareRoot(double number)` that computes the square root of a given non-negative number. The function should return `-1.0` if the input number is negative, as a way to indicate an error.\n\nThe function should be accurate to at least four decimal places. You are not allowed to use the standard library function `sqrt` or any other built-in square root functions. Instead, implement the square root calculation using the Newton-Raphson method (or another numerical method of your choice) to iteratively approximate the square root.\n\nWrite a set of unit tests using Google Test framework to verify the correctness of your implementation. Your tests should cover the following cases:\n\n1. Positive numbers, including perfect squares and non-perfect squares.\n2. Zero as input.\n3. Negative numbers, which should return `-1.0`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "Variable record, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named execute_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Dwa."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['vector']."}, {"type": "file", "instruction": "Your code should use the function analyze_data from the library cmath."}, {"type": "combination", "instruction": "Your code should define a class named Dwa that implements the execute_inventory interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_message, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 21 lines."}], "instruction_dependence": {"4": [0, 3, 13], "6": [0, 5, 13], "10": [0, 9, 13], "11": [0, 5, 7, 13], "12": [0, 8, 13]}, "question_id": 533}
{"question": "\nDesign a Go program that simulates a simplified version of a cryptocurrency exchange's backend. The program should be able to process different types of orders, handle trades, and manage user balances. Implement the following functionalities:\n\n1. Place an Order: Users can place buy or sell orders of different types (limit, market, stop limit, stop market) with specified quantities and prices. Orders should have a time in force attribute that determines their lifespan.\n\n2. Execute Trades: When a buy order matches a sell order, a trade should be executed. The trade should transfer the specified quantity of currency from the seller to the buyer and update their balances accordingly.\n\n3. Update Order Status: After a trade, the order status should be updated to reflect whether it is new, partially filled, filled, canceled, or expired.\n\n4. Report Generation: Generate a trade report for each executed trade, including the trade ID, price, quantity, and fee.\n\n5. Handle Balances: Keep track of user balances, including available and reserved amounts for each currency.\n\n6. Error Handling: The program should handle errors gracefully and provide meaningful error messages.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the default keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure map."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named create_order."}, {"type": "class", "instruction": "Your code should define a class named ViewForm."}, {"type": "combination", "instruction": "In your code, the class ViewForm should have these properties ['data', 'cut', 'bill']."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "9": [0, 1, 2, 3, 8]}, "question_id": 534}
{"question": "Please implement a tool for an LRU cache in Go language, with a capacity parameter set at creation.\n\nSupport the get method, which returns cached data, and returns -1 if it does not exist.\n\nSupport the put method, where if a key already exists, it overwrites the current value; if it does not exist, it inserts the data. If the amount of stored data exceeds the capacity after insertion, the least recently used data is evicted.\n\nYou need to implement the following functions to complete the above tasks:\n`func CreateLRUCache(capacity int) LRUCache`\n`func (this *LRUCache) Get(key string) int`\n`func (this *LRUCache) Put(key string, value int)`", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, type should be bool."}, {"type": "variable", "instruction": "Variable request, should be a constant."}, {"type": "file", "instruction": "Your code should not use the following libraries ['net', 'fmt']."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"5": [0, 4, 8], "6": [0, 4, 8]}, "question_id": 535}
{"question": "\n\nWrite a Go program that simulates a simple interactive command-line application where users can create, read, update, and delete (CRUD) notes. The application should use the given `ClearTerminal` function from the `utils` package to clear the terminal screen before showing the main menu each time.\n\nThe notes should be stored in memory (no need for database or file storage) and each note should have a unique identifier and a text content. The application should provide the following functionalities:\n\n1. List all notes\n2. Create a new note\n3. Update an existing note\n4. Delete a note\n5. Exit the application\n\nThe application should handle invalid inputs gracefully and prompt the user to try again. Use the provided `ClearTerminal` function to clear the screen before displaying the main menu or any results.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named kms."}, {"type": "variable", "instruction": "Variable kms, should not be a global variable."}, {"type": "variable", "instruction": "Variable kms, the initial value should be transaction."}, {"type": "variable", "instruction": "Variable kms should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named transform_log."}, {"type": "class", "instruction": "Your code should define a class named CheckRoomRequest."}, {"type": "file", "instruction": "Your code should import the following libraries ['math', 'bytes']."}, {"type": "file", "instruction": "Your code should use the function transform_log from the library bytes."}, {"type": "combination", "instruction": "You should initialize an object named token as an instance of the CheckRoomRequest class using ['request', 'account', 'bill'] for initialization."}, {"type": "combination", "instruction": "In your code, the class CheckRoomRequest should have these methods ['set_credit', 'remove_data', 'display_request']."}, {"type": "combination", "instruction": "The function transform_log should return a slice as its result."}, {"type": "global", "instruction": "Your function should not exceed 16 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 15], "6": [0, 1, 2, 4, 15], "7": [0, 1, 2, 4, 15], "11": [0, 1, 2, 10, 15], "12": [0, 1, 2, 9, 15], "13": [0, 1, 2, 9, 15], "14": [0, 1, 2, 8, 15]}, "question_id": 536}
{"question": " Implement a Java method that generates an SQL `SELECT` statement based on a given table name, a list of column names, and an optional `WHERE` clause. The method should return the complete SQL query as a string. The `WHERE` clause should be represented by a separate class that contains the column name, the operator (e.g., `=`, `<`, `>`, `LIKE`), and the value to compare against. If the `WHERE` clause is not provided, the method should generate a simple `SELECT` statement that fetches all records.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, type should be char."}, {"type": "variable", "instruction": "Variable inventory, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named process_form."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_form', 'transform_transaction']."}, {"type": "file", "instruction": "Your code should be organized in a package named remove_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.util', 'java.nio']."}, {"type": "file", "instruction": "Your code should use the function process_form from the library java.nio."}, {"type": "combination", "instruction": "The function process_form should take ['data', 'msg', 'shipment'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named remove_message, which should contain these functions ."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "11": [0, 10], "12": [0, 6], "13": [0, 9]}, "question_id": 537}
{"question": "Here is a integer array `nums` given to you, with a length of `n` and index started from **0**.\n\n\nWe would like to group these indices so that all indices `i` in `[0, n - 1]` are **exactly** included in one of the groups.\n\n\nIf the following conditions are met, we say the given grouping scheme is legitimate:\n\n\n* For each group `g`, all indices in the same group correspond to the same value in `nums`.\n* For any two groups `g1` and `g2`, the **difference of the number of indices** in the two groups **is no more than** `1`.\n\n\nPlease return an integer, representing the **minimum** number of groups needed for a valid grouping scheme.\n\n\n**Example 1：**\n\n\n\n```\n\n**Input：**nums = [3,2,3,2,3]\n**Output：**2\n**Explanation：**Following is a grouping scheme yielding 2 groups, where numbers in the brackets are indices:\nGroup 1 -> [0,2,4]\nGroup 2 -> [1,3]\nEach index belongs to only one group.\nIn group 1, nums[0] == nums[2] == nums[4], all indices correspond to the same value.\nIn group 2, nums[1] == nums[3], all indices correspond to the same value.\nThe number of indices in group 1 is 3, and the number of indices in group 2 is 2.\nThe difference between them is no more than 1.\nIt is impossible to get a solution less than 2 groups, because if there is only 1 group, all indices in the group should correspond to the same value.\nHence, the answer is 2.\n```\n\n**Example 2：**\n\n\n\n```\n\n**Input：**nums = [10,10,10,3,1,1]\n**Output：**4\n**Explanation：**Following is a grouping scheme yielding 2 groups, where numbers in the brackets are indices:\nGroup 1 -> [0]\nGroup 2 -> [1,2]\nGroup 3 -> [3]\nGroup 4 -> [4,5]\nThe grouping scheme meets the two requirements in the question.\nIt is impossible to get a solution less than 4 groups.\nHence, the answer is 4.\n```\n\n\n**Hints：**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\nPlease complete the following implementation\n```python\nclass Solution(object):\n    def minGroupsForValidAssignment(self, nums):\n        '''\n        :type nums: List[int]\n        :rtype: int\n        '''\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named customer."}, {"type": "variable", "instruction": "Variable customer, type should be dict."}, {"type": "function", "instruction": "Your code should include a function named sort_report."}, {"type": "class", "instruction": "Your code should define a class named ExecuteCustomerCredit."}, {"type": "file", "instruction": "Your code should be organized in a package named check_record."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib']."}, {"type": "file", "instruction": "Your code should use the function sort_report from the library scikit-learn."}, {"type": "combination", "instruction": "In your code, the class ExecuteCustomerCredit should have these methods ['get_dwa', 'search_tys']."}, {"type": "combination", "instruction": "The function sort_report should return a dict as its result."}], "instruction_dependence": {"6": [0, 1, 2, 5], "11": [0, 1, 2, 10], "12": [0, 1, 2, 8], "13": [0, 1, 2, 7]}, "question_id": 538}
{"question": "You are given a binary string `s` of even length starting from index **0**.\n\nA string is considered **beautiful** if it can be split into one or more substrings that satisfy the following conditions:\n\n* The length of each substring is **even**.\n* Each substring **only** contains `1` or **only** contains `0`.\n\nYou can change any character in `s` to `0` or `1`.\n\nPlease return the **minimum** number of character changes required to make `s` beautiful.\n\n**Example 1:**\n\n```\n**Input:** s = \"1001\"\n**Output:** 2\n**Explanation:** We change s[1] to 1, and s[3] to 0, resulting in the string \"1100\".\nThe string \"1100\" is beautiful as it can be split into \"11|00\".\nA minimum of 2 changes are required to make the string beautiful.\n```\n\n**Example 2:**\n\n```\n**Input:** s = \"10\"\n**Output:** 1\n**Explanation:** We change s[1] to 1, resulting in the string \"11\".\nThe string \"11\" is beautiful as it already meets the conditions of being a beautiful string.\nA minimum of 1 change is required to make the string beautiful.\n```\n\n**Example 3:**\n\n```\n**Input:** s = \"0000\"\n**Output:** 0\n**Explanation:** No changes are required as the string \"0000\" is already beautiful.\n```\n\n**Hints:**\n\n* `2 <= s.length <= 105`\n* The length of `s` is even.\n* `s[i]` is either `'0'` or `'1'`.\n\nPlease complete the following implementation.\n```cpp\nclass Solution {\npublic:\n    int minChanges(string s);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Variable request, type should be bool."}, {"type": "variable", "instruction": "Variable request, should be a global variable."}, {"type": "variable", "instruction": "Variable request, the initial value should be user."}, {"type": "function", "instruction": "Your code should include a function named create_form."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Product."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_bill."}, {"type": "file", "instruction": "Your code should import the following libraries ['string', 'map']."}, {"type": "combination", "instruction": "In your code, the class Product should have these properties ['tys']."}, {"type": "combination", "instruction": "The function create_form should return a char as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_bill, which should contain these classes ['CheckRequestAccount']."}], "instruction_dependence": {"3": [0, 2], "4": [0, 2], "5": [0, 2], "7": [0, 6], "11": [0, 8], "12": [0, 6], "13": [0, 8, 9]}, "question_id": 539}
{"question": "\nDesign a Load Balancer Backend Management System\n\nIn a cloud environment, load balancers are used to distribute traffic across multiple servers, ensuring high availability and reliability of applications. Your task is to create a system that manages the backend servers (ECS instances) associated with a given load balancer.\n\nThe system should provide the following functionalities:\n1. Describe the backend servers associated with a specific load balancer, including details such as VM name, weight, port, and network type.\n2. Support asynchronous operations to describe backend servers, allowing for non-blocking calls.\n3. Allow filtering of backend servers based on tags.\n4. Provide a clear and structured response that includes success status, message, and request ID, along with the backend server details.\n\nUse the provided code snippet as a starting point to implement the system. Ensure that the system is robust and handles errors gracefully.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure interface."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named calculate_punish."}, {"type": "function", "instruction": "The function names in your code should follow the lowercase_separated_by_underscores. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named submit_tys."}, {"type": "class", "instruction": "Your code should define a class named RetrieveKmsProduct."}, {"type": "class", "instruction": "The class names in your code should follow the lowercase_separated_by_underscores naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['strconv', 'bytes']."}, {"type": "combination", "instruction": "The function calculate_punish should take ['room', 'tys'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 24 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 14], "8": [0, 1, 2, 7, 14], "11": [0, 1, 2, 10, 14], "13": [0, 1, 2, 7, 14]}, "question_id": 540}
{"question": "Please write a Java method that loads a set of students' grades into a graphical user interface (GUI) table. Assume you already have a table named `StudentScoreTable`, and you need to populate this table with students' names and their scores. The student information is provided via a list of student objects, with each student object containing the student's name and score. Ensure that your code can create an appropriate table model and correctly populate the table with student data.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableModel;\nimport java.util.List;\npublic class ScoreLoader {\n    private JTable studentScoreTable;\n    public ScoreLoader(JTable table) {\n    }\n    public void loadScoresToTable(List<Student> students) {\n    }\n    public static class Student {\n        private String name;\n        private int score;\n        public Student(String name, int score) {\n        }\n        public String getName() {\n            return name;\n        }\n        public int getScore() {\n            return score;\n        }\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not use the catch keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Your code should define an enumeration named Department"}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable item, type should be double."}, {"type": "variable", "instruction": "Variable item, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named add_item."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named handle_credit."}, {"type": "class", "instruction": "Your code should define a class named Item."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_product."}, {"type": "combination", "instruction": "You should initialize an object named message as an instance of the Item class using ['credit'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named handle_credit that includes these methods ['modify_inventory', 'handle_form', 'delete_user']."}, {"type": "combination", "instruction": "Your code should define a class named Item that implements the handle_credit interface."}, {"type": "global", "instruction": "Your function should not exceed 11 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 17], "7": [0, 1, 2, 4, 17], "8": [0, 1, 2, 4, 17], "10": [0, 1, 2, 9, 17], "14": [0, 1, 2, 12, 17], "15": [0, 1, 2, 11, 17], "16": [0, 1, 2, 11, 12, 17]}, "question_id": 541}
{"question": "\n\nDesign a Python program that simulates a simple text-based user interface for creating invoice lines in a billing system. The program should use the provided code snippet as a basis for creating a `FactuurInputRegel` class, which represents an input line for a single invoice item, and a `FactuurInputHeader` class, which represents the header of the invoice input section.\n\nThe `FactuurInputRegel` class should allow the user to input the following information for an invoice item:\n- Product name or description\n- Quantity\n- Price per unit\n- Total price\n\nThe `FactuurInputHeader` class should display the corresponding labels for each input field in a bold font using the curses library.\n\nThe program should also include a `parseMoney` function that takes a string representing a monetary value and returns a tuple indicating whether the parsing was successful and the parsed value in cents.\n\nThe program should be able to handle the following scenarios:\n- If the product name or description is empty, the invoice line should not be created.\n- If the quantity is negative and `invertAmount` is `True`, the quantity should be inverted.\n- If the price per unit or total price is not a valid monetary value, an error message should be returned.\n\nWrite a Python script that creates an instance of `FactuurInputRegel` and `FactuurInputHeader`, simulates user input for an invoice line, and prints the result or error message to the console. Include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named dwa."}, {"type": "variable", "instruction": "Variable dwa, the initial value should be info."}, {"type": "function", "instruction": "Your code should include a function named calculate_customer."}, {"type": "interface", "instruction": "Your code should define an interface named search_request."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named Message."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named execute_cut."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pytorch', 'scikit-learn', 'Django']."}, {"type": "combination", "instruction": "You should define an interface named search_request that includes these methods ['modify_report', 'get_tys']."}, {"type": "combination", "instruction": "Your code should define a class named Message that implements the search_request interface."}, {"type": "combination", "instruction": "In your code, the class Message should have these methods ['modify_report', 'get_tys']."}, {"type": "combination", "instruction": "The function calculate_customer should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named execute_cut, which should contain these classes ['DisplayStatusItem', 'AddItem', 'NotificationLog']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "9": [0, 1, 2, 8], "11": [0, 1, 2, 10], "14": [0, 1, 2, 8], "15": [0, 1, 2, 8, 10], "16": [0, 1, 2, 10], "17": [0, 1, 2, 7], "18": [0, 1, 2, 10, 12]}, "question_id": 542}
{"question": "\n\nImplement a Python class `KMeans` that performs K-means clustering on a given dataset. The class should be able to cluster data points into a specified number of clusters and predict the cluster membership of new data points.\n\nThe `KMeans` class should have the following methods:\n\n- `__init__(self, n_clusters)`: Constructor that initializes the KMeans instance with the specified number of clusters.\n- `fit(self, features)`: Method that fits the KMeans model to the given data, clustering the data into `n_clusters` clusters. The method should iterate until the cluster means do not change significantly anymore.\n- `predict(self, features)`: Method that predicts the cluster membership for each data point in `features`.\n\nThe class should use only NumPy for calculations and should not rely on any external libraries for the K-means algorithm implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use data structure heapq."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, type should be int."}, {"type": "variable", "instruction": "Variable order, should not be a global variable."}, {"type": "function", "instruction": "Your code should not use any functions from the ['transform_kms', 'calculate_request', 'calculate_account']."}, {"type": "class", "instruction": "Your code should define a class named CustomerBill."}, {"type": "file", "instruction": "Your code should be organized in a package named set_bill."}, {"type": "combination", "instruction": "In your code, the class CustomerBill should have these properties ['form', 'info', 'transaction']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_bill, which should contain these classes ['CustomerDwa', 'Event', 'Profile']."}], "instruction_dependence": {"7": [0, 1, 2, 6], "8": [0, 1, 2, 6], "12": [0, 1, 2, 10], "13": [0, 1, 2, 10, 11]}, "question_id": 543}
{"question": "\n\nDesign a Go program that demonstrates the manipulation of custom data structures and maps, including sorting, updating, and referencing. The program should include the following functionalities:\n\n1. Define two custom struct types: `User` and `Player`.\n2. Create a map called `userDirectory` that maps a string key to `User` values and populate it with at least four entries.\n3. Write a function `sortUserDirectoryByKey` that sorts the `userDirectory` by its keys and prints out the sorted users in the format \"Key: Name Surname\".\n4. Create a map called `playerScores` that maps a string key to `Player` values and populate it with at least two entries.\n5. Write a function `incrementPlayerScore` that takes a player's key and increments their score by 1. This function should handle the inability to take the address of a map element directly.\n6. Demonstrate that maps are reference types by writing a function `deleteUserFromDirectory` that deletes a user from `userDirectory` and shows that the change affects any references to the original map.\n7. Write a function `doublePlayerScore` that doubles the score of a given player in `playerScores`.\n8. Provide test cases to verify the correctness of each function.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the break keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define an enumeration named Ranking"}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_account', 'display_view', 'configure_report']."}, {"type": "file", "instruction": "Your code should import the following libraries ['bytes']."}, {"type": "file", "instruction": "Your code should use the function display_account from the library strings."}, {"type": "file", "instruction": "Your code should not use the following libraries ['os', 'io']."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"8": [0, 1, 2, 7, 10]}, "question_id": 544}
{"question": "\n\nWrite a Python script that acts as a command-line utility to manage a simple To-Do list. The To-Do list should be stored in a file named `todo.txt` in the current working directory. The script should be able to add tasks, list all tasks, and mark a task as done.\n\nThe script should support the following command-line arguments:\n\n- `add \"task description\"`: Adds a new task with the given description to the To-Do list.\n- `list`: Lists all the tasks in the To-Do list with their status (done or not done).\n- `done task_number`: Marks the task with the given task number as done.\n\nAssume that the tasks are stored in the `todo.txt` file, one task per line, with a `[ ]` prefix for not done tasks and a `[x]` prefix for done tasks.\n\nFor example, the `todo.txt` file might look like this:\n\n```\n[ ] Task 1 description\n[x] Task 2 description\n[ ] Task 3 description\n```\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "interface", "instruction": "Your code should define an interface named insert_info."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeInventory."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['matplotlib', 'numpy', 'Django']."}, {"type": "combination", "instruction": "You should define an interface named insert_info that includes these methods ['analyze_cut', 'delete_user', 'display_info']."}], "instruction_dependence": {"6": [0, 1, 5], "8": [0, 1, 4]}, "question_id": 545}
{"question": "\n\nCreate a Java class that simulates a simple game environment where players can move and swim. The game should have a `Player` class with the ability to check if the player is in the air, in fluid, can start swimming, and can swim in a specific fluid type. The game environment should be able to dispatch events when the player attempts to swim, and these events can alter the player's ability to perform swimming actions.\n\nThe `Player` class should have the following methods:\n- `isInAir()`: Returns a boolean indicating if the player is in the air.\n- `isInFluid()`: Returns a boolean indicating if the player is in a fluid.\n- `canStartSwimming()`: Returns a boolean indicating if the player can start swimming.\n- `canSwimInFluidType(String fluidType)`: Returns a boolean indicating if the player can swim in the specified fluid type.\n\nThe `GameEnvironment` class should have the following method:\n- `onPlayerSwim(Player player)`: This method should be called whenever the player attempts to swim. It should return a boolean indicating if the player is allowed to swim based on the game's rules.\n\nThe `Player` class should use the `GameEnvironment` to check if the player can perform swimming actions. The `GameEnvironment` should be able to modify the player's abilities based on the game's rules.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure LinkedList."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, type should be Map."}, {"type": "variable", "instruction": "Variable info, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named transform_log."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named TokenBill."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.awt', 'java.sql']."}, {"type": "combination", "instruction": "You should initialize an object named notification as an instance of the TokenBill class using ['customer', 'view'] for initialization."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"5": [0, 4, 12], "6": [0, 4, 12], "8": [0, 7, 12], "11": [0, 9, 12]}, "question_id": 546}
{"question": "Please write a Java method that processes a string array, converts each string in the array to uppercase, and adds these uppercase strings to a new ArrayList. Make sure your method can handle the case of an empty array, and return this new ArrayList at the end of the method. Follow these guidelines to complete this task:\n\n- The method should be public and static.\n- The method's parameter should be a string array.\n- The method's return type should be ArrayList<String>.\n- Ensure that the code snippet is completely self-contained, with all necessary packages imported at the start of the code.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class UpperCaseConverter {\n    public static ArrayList<String> convertToUpper(ArrayList<String> strings) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the throws keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, type should be boolean."}, {"type": "variable", "instruction": "Variable shipment, should be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named handle_item."}, {"type": "class", "instruction": "Your code should define a class named UpdateBillData."}, {"type": "file", "instruction": "Your code should be organized in a package named search_credit."}, {"type": "combination", "instruction": "You should initialize an object named profile as an instance of the UpdateBillData class using ['info'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named handle_item that includes these methods ['execute_room', 'remove_data', 'retrieve_room']."}, {"type": "combination", "instruction": "In your code, the class UpdateBillData should have these properties ['record', 'profile']."}, {"type": "combination", "instruction": "Your code should be organized in a package named search_credit, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 11 lines."}], "instruction_dependence": {"5": [0, 1, 4, 14], "6": [0, 1, 4, 14], "10": [0, 1, 8, 14], "11": [0, 1, 7, 14], "12": [0, 1, 8, 14], "13": [0, 1, 9, 14]}, "question_id": 547}
{"question": "\n\nCreate a Flask web application that allows users to register, log in, and reset their password. The application should connect to a MySQL database to store and retrieve user information. The application should have the following endpoints:\n\n1. `/` (root): A welcome page that allows users to navigate to the login or registration page.\n2. `/login`: A login page where users can enter their username and password to access their account.\n3. `/signin`: A registration page where new users can create an account by providing a username, password, and email.\n4. `/forgetPassword`: A page where users can reset their password by entering their email. A new password will be generated and sent to the user's email.\n\nThe application should handle GET and POST requests appropriately for each endpoint and provide feedback to the user. Use the given code snippet as a starting point and enhance it to include the required functionality. Ensure that the application handles potential errors, such as database connection issues or user input validation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the not keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named token."}, {"type": "variable", "instruction": "Your code should define an enumeration named Mode"}, {"type": "variable", "instruction": "Variable token, should be a global variable."}, {"type": "variable", "instruction": "Variable token, the initial value should be room."}, {"type": "interface", "instruction": "Your code should define an interface named filter_account."}, {"type": "class", "instruction": "Your code should define a class named Token."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas']."}, {"type": "file", "instruction": "Your code should use the function get_cut from the library scikit-learn."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pytorch', 'pandas', 'scikit-learn']."}, {"type": "combination", "instruction": "Your code should define a class named Token that implements the filter_account interface."}, {"type": "combination", "instruction": "In your code, the class Token should have these properties ['notification', 'bill']."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}], "instruction_dependence": {"6": [0, 1, 2, 4, 16], "7": [0, 1, 2, 4, 16], "10": [0, 1, 2, 9, 16], "12": [0, 1, 2, 11, 16], "14": [0, 1, 2, 8, 9, 16], "15": [0, 1, 2, 9, 16]}, "question_id": 548}
{"question": "\n\nDesign a Fast Food Ordering System using the Builder Pattern. The system should allow the creation of a `Meal` which consists of items such as `Burgers` and `ColdDrinks`. Each item in the meal should implement the `Item` interface, which defines methods for `name()`, `packing()`, and `price()`. The `Packing` interface should have a method `pack()` which is implemented by the concrete classes `Wrapper` for burgers and `Bottle` for cold drinks.\n\nThe `ColdDrink` class provided in the snippet should be extended by two concrete classes `Coke` and `Pepsi`. Similarly, create an abstract class `Burger` that implements the `Item` interface and provides the `packing()` method which uses a `Wrapper`. Then, create two concrete classes `VegBurger` and `ChickenBurger` that extend `Burger`.\n\nFinally, create a `MealBuilder` class that can construct different types of `Meal` objects such as a `VegMeal` or a `NonVegMeal` by combining different `Item` objects. The `Meal` class should have methods to `addItem(Item item)`, `getCost()`, and `showItems()` which displays all the items in the meal and their packing.\n\nProvide test cases to demonstrate the construction of a `VegMeal` and a `NonVegMeal` using the `MealBuilder`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "function", "instruction": "Your code should include a function named execute_inventory."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "class", "instruction": "Your code should define a class named SortTys."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_bill."}, {"type": "combination", "instruction": "You should initialize an object named form as an instance of the SortTys class using ['inventory', 'form'] for initialization."}, {"type": "combination", "instruction": "The function execute_inventory should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_bill, which should contain these functions ."}, {"type": "global", "instruction": "Your answer in total should not exceed 12 lines."}], "instruction_dependence": {"4": [0, 1, 3, 10], "7": [0, 1, 5, 10], "8": [0, 1, 3, 10], "9": [0, 1, 6, 10]}, "question_id": 549}
{"question": "\n\nDesign a university system where `LabAsistani` (Lab Assistant) is a type of `Asistan` (Assistant). The `LabAsistani` class should inherit from the `Asistan` class and add specific behavior for lab assistants. The system should allow lab assistants to enter labs and classes, and display messages when they do so.\n\nThe `Asistan` class should have the following attributes: `adSoyad` (name and surname), `telefon` (phone number), `eposta` (email), `bolum` (department), `unvan` (title), and `ofisSaati` (office hours). It should also provide a method to get the name and surname of the assistant.\n\nThe `LabAsistani` class should override the `derseGir` method to indicate that the lab assistant has entered a class and should implement the `lablaraGir` method to indicate that the lab assistant has entered a lab.\n\nWrite a program that creates an instance of `LabAsistani` and demonstrates the functionality of entering a lab and a class. Ensure that all classes and methods are well-documented, and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named account."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "variable", "instruction": "Variable account, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named generate_room."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Kms."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_product."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.io']."}, {"type": "file", "instruction": "Your code should use the function configure_credit from the library java.lang."}, {"type": "combination", "instruction": "In your code, the class Kms should have these methods ['submit_bill']."}], "instruction_dependence": {"7": [0, 5], "9": [0, 8], "11": [0, 10], "14": [0, 13], "15": [0, 10]}, "question_id": 550}
{"question": "\n\nWrite a Python function named `load_yaml_config` that reads a YAML configuration file and returns the data as a Python dictionary. The function should handle any exceptions that may occur during file reading or YAML parsing, and return an appropriate error message if an exception is caught.\n\nThe function should follow these specifications:\n\n1. The function should accept a single argument, which is the path to the YAML file.\n2. Use the `ruamel.yaml` library to parse the YAML content.\n3. If the file does not exist or is not accessible, the function should return the string `\"File not found or inaccessible\"`.\n4. If the YAML content is invalid, the function should return the string `\"Invalid YAML content\"`.\n5. If the file is read and parsed successfully, the function should return the data as a dictionary.\n\nInclude a docstring that describes the function's behavior, its argument, and its return value.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named profile."}, {"type": "variable", "instruction": "Variable profile, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named analyze_status."}, {"type": "function", "instruction": "The function names in your code should follow the snake_case. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['create_log', 'add_shipment']."}, {"type": "file", "instruction": "Your code should import the following libraries ['numpy']."}, {"type": "file", "instruction": "Your code should use the function analyze_status from the library seaborn."}, {"type": "file", "instruction": "Your code should not use the following libraries ['scikit-learn', 'tensorflow', 'seaborn']."}, {"type": "combination", "instruction": "The function analyze_status should return a set as its result."}], "instruction_dependence": {"5": [0, 1, 2, 4], "7": [0, 1, 2, 6], "10": [0, 1, 2, 9], "12": [0, 1, 2, 6]}, "question_id": 551}
{"question": "Please write a Java method to add a timestamp to log information. The method takes a string parameter representing the original log information and returns a new string that includes the current timestamp (formatted as `yyyy-MM-dd HH:mm:ss`) and the original log information. The timestamp and log information should be separated by a space. Ensure to import the necessary packages in the code.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\npublic class LogHelper {\n    public static String addTimestamp(String originalLog) {\n    }\n    public static void checkFunction() {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "The variable names in your code should follow the camelCase naming convention"}, {"type": "variable", "instruction": "Variable room, type should be int."}, {"type": "function", "instruction": "Your code should include a function named set_token."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_account', 'calculate_request', 'process_record']."}, {"type": "class", "instruction": "Your code should define a class named KmsRoom."}, {"type": "file", "instruction": "Your code should be organized in a package named retrieve_form."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.text', 'java.math']."}, {"type": "combination", "instruction": "You should initialize an object named view as an instance of the KmsRoom class using ['event', 'credit'] for initialization."}, {"type": "combination", "instruction": "The function set_token should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named retrieve_form, which should contain these functions ."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7], "9": [0, 1, 2, 3, 7], "15": [0, 1, 2, 3, 12], "16": [0, 1, 2, 3, 10], "17": [0, 1, 2, 3, 13]}, "question_id": 552}
{"question": "I have the following code: Using Newton's method to solve for the zeros of a function. Please check the code for any issues. If there are, please correct them and provide the revised code.\n\n```python\nimport math\ndef newton(f, df, x0):\n    x = x0\n    while True: \n        x_new = x - f(x) / df(x)\n        # Return when x does not change\n        if x == x_new:\n            return x_new\n        else:\n            x = x_new\n```", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "structural control", "instruction": "Your code should use data structure set."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, type should be float."}, {"type": "function", "instruction": "Your code should not use any functions from the ['get_notification', 'handle_msg']."}, {"type": "interface", "instruction": "Your code should define an interface named get_inventory."}, {"type": "class", "instruction": "Your code should define a class named HandleMessage."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib', 'pytorch']."}, {"type": "file", "instruction": "Your code should use the function filter_cut from the library scikit-learn."}, {"type": "combination", "instruction": "In your code, the class HandleMessage should have these methods ['set_credit', 'check_credit', 'configure_status']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "11": [0, 1, 2, 10], "12": [0, 1, 2, 9]}, "question_id": 553}
{"question": "\n\nCreate a Python program using the Tkinter library that simulates a simple drawing application. The application should allow users to draw freehand paths on a canvas by clicking and dragging the mouse. The user should be able to control the following aspects of the drawing:\n\n1. The color of the path (options: \"Black\", \"Red\", \"Blue\", \"Green\").\n2. The speed of the drawing (options: \"Speed X 1\", \"Speed X 2\", \"Speed X 3\"), which affects the density of points in the path.\n3. The ability to start and stop the drawing process.\n\nThe program should have a GUI with the following elements:\n\n- A canvas area where the user can draw.\n- A label displaying the current path color.\n- A dropdown menu to select the path color.\n- A label displaying the current drawing speed.\n- A dropdown menu to select the drawing speed.\n- A button to start the drawing process.\n- A button to stop the drawing process and clear the canvas.\n\nThe program should initialize the global variables as provided in the given code snippet and use them to manage the state of the application.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, type should be tuple."}, {"type": "interface", "instruction": "Your code should define an interface named calculate_cut."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_status."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn']."}, {"type": "file", "instruction": "Your code should use the function set_event from the library numpy."}, {"type": "global", "instruction": "Your answer in total should not exceed 23 lines."}], "instruction_dependence": {"4": [0, 3, 9], "8": [0, 7, 9]}, "question_id": 554}
{"question": "\n\nDesign a class `MyMath` that overloads the function call operator to perform different mathematical operations based on the number and type of arguments passed. The class should support the following operations:\n\n1. Addition of two integers.\n2. Subtraction of two integers.\n3. Multiplication of two integers.\n4. Division of two integers (return a floating-point result).\n5. Concatenation of two strings.\n\nThe class should be able to distinguish between the operations based on the argument types and count, and perform the corresponding operation. If the operation cannot be performed (e.g., division by zero or incorrect types), the class should print an error message.\n\nWrite a main function that demonstrates the use of the `MyMath` class with various test cases, ensuring that all supported operations are showcased and that the error handling works as expected.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 3 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure bitset."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named cut."}, {"type": "variable", "instruction": "Your code should define an enumeration named City"}, {"type": "variable", "instruction": "Variable cut, should not be a global variable."}, {"type": "variable", "instruction": "Variable cut, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named retrieve_info."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named sort_info."}, {"type": "class", "instruction": "Your code should define a class named GetProfileTransaction."}, {"type": "file", "instruction": "Your code should be organized in a package named set_account."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_account, which should contain these classes ['DwaToken', 'UpdateRecord', 'DeleteView']."}], "instruction_dependence": {"9": [0, 1, 2, 3, 7], "10": [0, 1, 2, 3, 7], "12": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 14, 15]}, "question_id": 555}
{"question": "\n\nDesign a C++ program that sorts a list of athletes based on their performance in a decathlon event. The decathlon consists of 10 different track and field events, and each athlete's performance in an event is represented by a score. The total score for an athlete is the sum of their scores in all events.\n\nThe program should define a `struct` named `Athlete` that contains an array of 10 integers representing the scores for each event and a string representing the athlete's name. Implement a custom comparison function that sorts the athletes primarily by their total score in descending order, and in case of a tie, by their name in ascending alphabetical order.\n\nThe program should read a predefined number of athletes from input, sort them using the custom comparison function, and then print the sorted list of athletes, showing their name and total score.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "structural control", "instruction": "Your code should use data structure bitset."}, {"type": "variable", "instruction": "Your code should define a variable named log."}, {"type": "variable", "instruction": "Variable log, should be a global variable."}, {"type": "variable", "instruction": "Variable log should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named add_profile."}, {"type": "function", "instruction": "Your code should not use any functions from the ['sort_data', 'submit_inventory']."}, {"type": "class", "instruction": "Your code should define a class named ConfigureInventory."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named calculate_profile."}, {"type": "file", "instruction": "Your code should import the following libraries ['string', 'iostream']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['stdlib', 'map', 'cmath']."}, {"type": "combination", "instruction": "You should initialize an object named order as an instance of the ConfigureInventory class using ['profile', 'view', 'status'] for initialization."}, {"type": "combination", "instruction": "In your code, the class ConfigureInventory should have these properties ['notification', 'form']."}, {"type": "combination", "instruction": "The function add_profile should take ['notification', 'info', 'event'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named calculate_profile, which should contain these classes ['Token', 'Order']."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"4": [0, 1, 3, 17], "5": [0, 1, 3, 17], "9": [0, 1, 8, 17], "13": [0, 1, 8, 17], "14": [0, 1, 8, 17], "15": [0, 1, 6, 17], "16": [0, 1, 8, 10, 17]}, "question_id": 556}
{"question": "\n\nDesign a Java program that simulates a simple flower shop inventory system. The system should be able to manage a collection of `FlowerItem` objects, which represent different flowers available in the shop. Each `FlowerItem` has a name, price, area of origin, and image IDs for the flower and its associated account.\n\nYour task is to implement the `FlowerShopInventory` class with the following functionalities:\n\n1. Add a new `FlowerItem` to the inventory.\n2. Remove a `FlowerItem` from the inventory by name.\n3. Update the price of a `FlowerItem` by name.\n4. Retrieve a `FlowerItem` by name.\n5. List all `FlowerItems` in the inventory.\n6. Find all `FlowerItems` from a specific area.\n\nMake sure to handle cases where a `FlowerItem` does not exist when attempting to remove, update, or retrieve it.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "structural control", "instruction": "Your code should not use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named msg."}, {"type": "variable", "instruction": "Variable msg, type should be ArrayList."}, {"type": "variable", "instruction": "Variable msg should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named configure_message."}, {"type": "function", "instruction": "Your code should not use any functions from the ['manage_token', 'calculate_room']."}, {"type": "interface", "instruction": "Your code should define an interface named configure_data."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named NotificationUser."}, {"type": "file", "instruction": "Your code should be organized in a package named analyze_dwa."}, {"type": "combination", "instruction": "Your code should define a class named NotificationUser that implements the configure_data interface."}, {"type": "combination", "instruction": "The function configure_message should take ['shipment'] as parameters."}, {"type": "combination", "instruction": "Your code should be organized in a package named analyze_dwa, which should contain these classes ['ProfileNotification', 'AddInfo']."}, {"type": "global", "instruction": "Your function should not exceed 25 lines."}], "instruction_dependence": {"7": [0, 1, 6, 18], "8": [0, 1, 6, 18], "12": [0, 1, 11, 18], "15": [0, 1, 11, 13, 18], "16": [0, 1, 9, 18], "17": [0, 1, 13, 14, 18]}, "question_id": 557}
{"question": "Please design a Java method that is used to update the user's task ID. The task ID is an integer used to identify the user's current task.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\npublic class UserTaskManager {\n    private Map<Integer, Integer> userTasks;\n    public UserTaskManager() {\n    }\n    public void updateTaskId(int userId, int taskId) {\n    }\n    public boolean checkTaskId(int userId, int expectedTaskId) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 12 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not use the default keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, type should be double."}, {"type": "interface", "instruction": "Your code should define an interface named update_room."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Order."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.awt', 'java.lang']."}, {"type": "global", "instruction": "Your answer in total should not exceed 13 lines."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6, 13], "9": [0, 1, 2, 3, 4, 8, 13], "11": [0, 1, 2, 3, 4, 10, 13]}, "question_id": 558}
{"question": "\nDesign a class `Image` that represents a simple image with basic functionalities. The `Image` class should support loading an image from a file path or from a buffer, creating an image filled with a single color, and copying and moving image data efficiently. The class should also provide methods to query the image's dimensions, check if the image is valid, and clear the image data.\n\nThe `Image` class should be platform-independent, but for the purpose of this question, assume that there are two platforms: `VERNA_ANDROID` and `VERNA_DESKTOP`. For `VERNA_ANDROID`, use the Android Image Decoder API to load images from a buffer. For `VERNA_DESKTOP`, use the STB Image library to load images from a buffer.\n\nThe `Image` class should have the following public interface:\n- Constructors: Default, Copy, Move\n- Assignment Operators: Copy, Move\n- Destructor\n- `Width()`: Returns the width of the image\n- `Height()`: Returns the height of the image\n- `Area()`: Returns the total number of pixels in the image\n- `Size()`: Returns the dimensions of the image as a `Vec2i` (a simple struct with `int` members `x` and `y`)\n- `Pixels()`: Returns a pointer to the pixel data\n- `IsValid()`: Checks if the image has valid dimensions and pixel data\n- `Clear()`: Clears the image data and resets dimensions\n- `Load(const std::filesystem::path&)`: Static method to load an image from a file path\n- `LoadFromColor(color_t, int, int)`: Static method to create an image filled with a single color\n- `LoadFromBuffer(const uint8_t*, size_t)`: Static method to load an image from a buffer\n\nThe `Image` class should also have a private method `ClearPixels()` to free the pixel data, and a private member `pixels` to store the pixel data. The pixel data type `color_t` is assumed to be defined elsewhere in the codebase.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should not use any functions from the ['update_transaction', 'process_room', 'filter_form']."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_cut."}, {"type": "class", "instruction": "Your code should define a class named GetEvent."}, {"type": "file", "instruction": "Your code should not use the following libraries ['string', 'vector']."}, {"type": "combination", "instruction": "You should define an interface named retrieve_cut that includes these methods ['generate_inventory', 'get_product', 'set_cut']."}, {"type": "combination", "instruction": "In your code, the class GetEvent should have these properties ['record']."}], "instruction_dependence": {"9": [0, 1, 2, 6], "10": [0, 1, 2, 7]}, "question_id": 559}
{"question": "\n\nCreate a Python program that manages flight schedules for an airport. The program should be able to display the flight schedule sorted by flight number and by departure time. Each flight record contains the airline name, flight number, destination airport code, gate number, and departure time in decimal hours.\n\nThe program should include two functions: `schedule_by_flight` and `schedule_by_time`. The `schedule_by_flight` function should print the flight schedule sorted by flight number, and the `schedule_by_time` function should print the flight schedule sorted by departure time. Both functions should display the schedule in a tabular format with the columns: Flight, Destination, Gate, and Time.\n\nThe destination airport code should be converted to a full airport name using a provided dictionary of airport codes and their corresponding full names.\n\nUse the provided code snippet as a starting point to implement the two functions and provide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named status."}, {"type": "variable", "instruction": "Variable status, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named update_user."}, {"type": "file", "instruction": "Your code should import the following libraries ['matplotlib']."}, {"type": "file", "instruction": "Your code should use the function update_user from the library tensorflow."}, {"type": "combination", "instruction": "The function update_user should return a set as its result."}], "instruction_dependence": {"3": [0, 2], "6": [0, 5], "7": [0, 4]}, "question_id": 560}
{"question": "\n\nWrite a Python class `Calculadora` that performs basic arithmetic operations: addition, subtraction, multiplication, and division. The class should handle inputs that are either integers or floats and should raise appropriate exceptions for invalid operations, such as division by zero.\n\nThe class should have the following methods:\n- `soma(self, a, b)`: Returns the sum of `a` and `b`.\n- `sub(self, a, b)`: Returns the difference when `b` is subtracted from `a`.\n- `mult(self, a, b)`: Returns the product of `a` and `b`.\n- `div(self, a, b)`: Returns the quotient when `a` is divided by `b`. If `b` is zero, it should raise a `ZeroDivisionError`.\n\nAdditionally, provide test cases to verify the correctness of each method in the `Calculadora` class.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should use the await keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure array."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "The variable names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention"}, {"type": "variable", "instruction": "Variable product, type should be float."}, {"type": "variable", "instruction": "Variable product should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['submit_request', 'retrieve_request', 'insert_message']."}, {"type": "interface", "instruction": "Your code should define an interface named check_account."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named SetBillRecord."}, {"type": "file", "instruction": "Your code should be organized in a package named get_customer."}, {"type": "file", "instruction": "Your code should import the following libraries ['scikit-learn', 'tensorflow']."}, {"type": "file", "instruction": "Your code should use the function transform_bill from the library requests."}, {"type": "combination", "instruction": "In your code, the class SetBillRecord should have these methods ['submit_status']."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "8": [0, 1, 2, 3, 6], "9": [0, 1, 2, 3, 6], "12": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 15], "17": [0, 1, 2, 3, 13]}, "question_id": 561}
{"question": "\n\nIn the game Factorio, players often need to manage their power grid efficiently to ensure that their defenses, such as laser turrets, are operational when needed, while conserving energy when the threat level is low. To simulate this scenario, you are tasked with implementing a `PowerSwitch` system that controls the power supply to various defense and energy structures based on signals received from a circuit network.\n\nThe `PowerSwitch` should perform the following functions:\n\n1. Receive signals from a circuit network channel, which indicate the current threat level or other relevant conditions.\n2. Evaluate the received signal against a predefined logical operation and a switch value to determine whether to turn on or off the power supply.\n3. Control the power supply to connected structures, such as laser turrets and accumulators, based on the evaluation result.\n\nThe logical operation is a function that takes two `int64` values (the signal value and the switch value) and returns a `bool` indicating whether the power should be on or off.\n\nYour task is to complete the implementation of the `PowerSwitch` struct and its methods, ensuring that it can handle different types of connections and perform the required logic to control the power supply.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "variable", "instruction": "Your code should define a variable named user."}, {"type": "variable", "instruction": "The variable names in your code should follow the CamelCase naming convention"}, {"type": "variable", "instruction": "Variable user, should not be a global variable."}, {"type": "variable", "instruction": "Variable user, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['retrieve_bill', 'get_form', 'display_tys', 'add_request']."}, {"type": "interface", "instruction": "Your code should define an interface named set_order."}, {"type": "class", "instruction": "Your code should define a class named GetPunishLog."}, {"type": "combination", "instruction": "You should define an interface named set_order that includes these methods ['search_record', 'filter_status', 'transform_order']."}, {"type": "combination", "instruction": "Your code should define a class named GetPunishLog that implements the set_order interface."}, {"type": "combination", "instruction": "In your code, the class GetPunishLog should have these properties ['form']."}], "instruction_dependence": {"2": [0, 1], "3": [0, 1], "4": [0, 1], "8": [0, 6], "9": [0, 6, 7], "10": [0, 7]}, "question_id": 562}
{"question": " Implement a Car Rental Management System in Java\n\nDesign and implement a Car Rental Management System using Java and Spring Boot. The system should allow users to add new cars, retrieve information about all cars, get details of a specific car, list available cars, delete cars (with admin privileges), and upload car images. The system should also provide an endpoint to retrieve car images.\n\n### Requirements:\n\n1. Implement a `Car` model with at least the following fields:\n   - `id` (Long)\n   - `make` (String)\n   - `model` (String)\n   - `year` (int)\n   - `color` (String)\n   - `status` (String) - to indicate if the car is available or rented\n\n2. Implement a `User` model with at least the following fields:\n   - `id` (Long)\n   - `username` (String)\n   - `password` (String)\n   - `role` (String) - to indicate if the user is an admin or a customer\n\n3. Implement an `ICarService` interface with methods to create, retrieve, update, delete, and list available cars.\n\n4. Implement a `CarController` with RESTful endpoints to:\n   - Add a new car (`POST /car`)\n   - Get all cars (`GET /car`)\n   - Get a specific car by ID (`GET /car/{id}`)\n   - Get a list of available cars (`GET /availablecar`)\n   - Delete a car (with admin check) (`POST /car/delete/{id}/{userId}`)\n   - Delete a car by ID (`DELETE /car/{id}`)\n   - Upload a car image (`POST /car/upload`)\n   - Retrieve a car image (`GET /car/image/{name}`)\n\n5. Implement exception handling for cases such as file not found, empty file uploads, and unauthorized deletion attempts.\n\n6. Write test cases to verify the functionality of each endpoint.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should use the int keyword."}, {"type": "structural control", "instruction": "Your code should use data structure ArrayList."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named remove_room."}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_message', 'transform_credit']."}, {"type": "interface", "instruction": "Your code should define an interface named get_room."}, {"type": "class", "instruction": "Your code should define a class named Shipment."}, {"type": "file", "instruction": "Your code should be organized in a package named insert_event."}, {"type": "combination", "instruction": "You should define an interface named get_room that includes these methods ['add_inventory']."}, {"type": "combination", "instruction": "The function remove_room should return a boolean as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named insert_event, which should contain these classes ['ViewShipment', 'ModifyMessage', 'TransformDataForm']."}], "instruction_dependence": {"11": [0, 1, 2, 8], "12": [0, 1, 2, 6], "13": [0, 1, 2, 9, 10]}, "question_id": 563}
{"question": "\n\nDesign a Java class named `HTMLUtils` that provides a method to sanitize HTML content by escaping special HTML characters and replacing them with their corresponding HTML entities. The method should handle the following HTML characters: ampersand (&), double quote (\"), greater than (>), less than (<), and the Euro symbol (€).\n\nThe class should include the following method:\n\n- `escapeHTML(String input)`: Takes a string containing HTML content and returns a new string with special characters replaced by their corresponding HTML entities.\n\nThe HTML entities for the special characters are as follows:\n\n- Ampersand (&) becomes `&amp;`\n- Double Quote (\") becomes `&quot;`\n- Greater Than (>) becomes `&gt;`\n- Less Than (<) becomes `&lt;`\n- Euro (€) becomes `&euro;`\n\nAdditionally, provide a main method that demonstrates the usage of `escapeHTML` with various test cases to ensure the correctness of the implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not use the void keyword."}, {"type": "structural control", "instruction": "Your code should use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named room."}, {"type": "variable", "instruction": "Variable room, type should be double."}, {"type": "class", "instruction": "Your code should define a class named ItemMsg."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.math', 'java.net', 'java.sql']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "8": [0, 1, 2, 7]}, "question_id": 564}
{"question": "\n\nDesign a simple inventory management system for a store using C++. The system should be able to handle items in the store, where each item has a type, name, and price. Use the provided `StoreItem` class as a starting point.\n\nThe system should have the following functionalities:\n1. Add a new item to the inventory.\n2. Remove an item from the inventory by name.\n3. Update the price of an item.\n4. List all items in the inventory.\n5. Find an item by name and display its details.\n\nYou should create a class `Inventory` that uses `StoreItem` objects to manage the store's inventory. The `Inventory` class should have methods corresponding to the functionalities listed above.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should use data structure map."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named shipment."}, {"type": "variable", "instruction": "Variable shipment, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named display_dwa."}, {"type": "interface", "instruction": "Your code should define an interface named manage_account."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named delete_event."}, {"type": "file", "instruction": "Your code should import the following libraries ['queue', 'map']."}, {"type": "combination", "instruction": "The function display_dwa should return a bool as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named delete_event, which should contain these functions ."}], "instruction_dependence": {"6": [0, 1, 5], "9": [0, 1, 8], "12": [0, 1, 7], "13": [0, 1, 10]}, "question_id": 565}
{"question": "\n\nCreate a Python game using the `turtle` module where the player controls a snake that moves around the screen, collecting food items to grow in size and increase the score. The game ends if the snake collides with the screen edges or itself.\n\nThe game should have the following features:\n- The snake is initially one segment long and grows by one segment each time it eats food.\n- Food items appear randomly on the screen, and the snake must move over them to eat them.\n- The snake is controlled using the 'W', 'A', 'S', 'D' keys for up, left, down, and right movement, respectively.\n- The game keeps track of the score, which increases by one each time the snake eats food.\n- The game ends with a \"Game over!\" message if the snake hits the screen edges or itself.\n- The game should be visually appealing by using custom shapes for the snake and food items.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "global", "instruction": "Your code should not use the break keyword."}, {"type": "structural control", "instruction": "Your code should use data structure collections."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_event."}, {"type": "interface", "instruction": "Your code should define an interface named delete_bill."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named DeletePunishUser."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pytorch', 'Django']."}, {"type": "file", "instruction": "Your code should use the function execute_event from the library scikit-learn."}, {"type": "combination", "instruction": "You should initialize an object named transaction as an instance of the DeletePunishUser class using ['transaction', 'account'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named DeletePunishUser that implements the delete_bill interface."}, {"type": "combination", "instruction": "The function execute_event should return a tuple as its result."}], "instruction_dependence": {"6": [0, 1, 2, 3, 5], "9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 10], "13": [0, 1, 2, 3, 12], "14": [0, 1, 2, 3, 10], "15": [0, 1, 2, 3, 8, 10], "16": [0, 1, 2, 3, 7]}, "question_id": 566}
{"question": "\n\nDesign a cloud resource management system that interacts with a cloud service provider to perform various operations on cloud resources such as virtual machines (CVM), disks, and elastic IPs (EIP). The system should be able to query resources, describe specific resources, inquire about pricing, and describe available zones and instance types. Implement the system for a hypothetical cloud provider's SDK, which follows a similar interface to the Tencent Cloud SDK used in the given code snippet.\n\nThe system should provide the following functionalities:\n\n1. Query all hosts (CVMs) with pagination support.\n2. Query all disks with pagination support.\n3. Query all EIPs with pagination support.\n4. Describe a specific host (CVM) by its ID.\n5. Inquire about the price for running a new instance with specific parameters.\n6. Describe all available zones.\n7. Describe all available instance types.\n\nFor each functionality, provide a method that simulates the interaction with the cloud provider's SDK. Assume that the SDK provides similar methods to those used in the given code snippet (e.g., `QueryHost`, `QueryDisk`, `QueryEip`, `DescribeHost`, `InquiryPriceRunInstances`, `DescribeZones`, `DescribeInstanceType`).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should use the goto keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "The variable names in your code should follow the lowercase_separated_by_underscores naming convention"}, {"type": "variable", "instruction": "Variable credit, should not be a global variable."}, {"type": "variable", "instruction": "Variable credit should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named search_info."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeUser."}, {"type": "combination", "instruction": "In your code, the class AnalyzeUser should have these properties ['data', 'token']."}, {"type": "combination", "instruction": "In your code, the class AnalyzeUser should have these methods ['update_status', 'set_inventory', 'manage_item']."}, {"type": "global", "instruction": "Your function should not exceed 19 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 14], "8": [0, 1, 2, 6, 14], "9": [0, 1, 2, 6, 14], "12": [0, 1, 2, 11, 14], "13": [0, 1, 2, 11, 14]}, "question_id": 567}
{"question": "Please write a Java program to calculate the interest for a bank account. The program should include a class named `BankAccount`, which contains a method named `calculateInterest`. This method accepts two parameters: `amount` (principal amount) and `duration` (deposit period in years), and returns the calculated interest value. Assume the annual interest rate is 5%.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.text.DecimalFormat;\npublic class BankAccount {\n    public double calculateInterest(double amount, int duration) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 15 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a global variable."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named filter_notification."}, {"type": "interface", "instruction": "Your code should define an interface named filter_item."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Credit."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql']."}, {"type": "combination", "instruction": "Your code should define a class named Credit that implements the filter_item interface."}, {"type": "combination", "instruction": "In your code, the class Credit should have these methods ['add_data', 'get_status', 'process_user']."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "10": [0, 1, 2, 9], "13": [0, 1, 2, 9, 11], "14": [0, 1, 2, 11]}, "question_id": 568}
{"question": "\nCreate a C++ program that uses OpenGL to draw a dynamic pattern of lines on the screen. The pattern should change over time, creating a visual effect of moving lines. The program should allow the user to control the speed of the line movement and the color of the lines using keyboard input.\n\nThe following requirements should be met:\n\n1. The program should initialize a 480x480 window using GLUT.\n2. The lines should be drawn randomly across the screen.\n3. The speed of the line movement should be adjustable by pressing the '+' and '-' keys, increasing or decreasing the timer interval respectively.\n4. The color of the lines should be changeable by pressing the 'R', 'G', or 'B' keys to switch between red, green, and blue colors.\n5. The program should continuously update the display to create a dynamic effect.\n6. Include test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should not use the auto keyword."}, {"type": "structural control", "instruction": "Your code should use data structure stack."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, type should be float."}, {"type": "variable", "instruction": "Variable event should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named add_form."}, {"type": "function", "instruction": "Your code should not use any functions from the ['insert_status', 'calculate_log', 'modify_msg', 'transform_room']."}, {"type": "class", "instruction": "Your code should define a class named AnalyzeDwaAccount."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_notification."}, {"type": "file", "instruction": "Your code should import the following libraries ['string']."}, {"type": "file", "instruction": "Your code should use the function add_form from the library iostream."}, {"type": "combination", "instruction": "In your code, the class AnalyzeDwaAccount should have these properties ['dwa', 'punish']."}, {"type": "combination", "instruction": "The function add_form should take ['view', 'bill'] as parameters."}], "instruction_dependence": {"8": [0, 1, 2, 7], "9": [0, 1, 2, 7], "15": [0, 1, 2, 14], "16": [0, 1, 2, 12], "17": [0, 1, 2, 10]}, "question_id": 569}
{"question": "Create a simple user dialog using PyQt5, with the following features:\n1. The initial dialog displays \"Hello, User!\"\n2. After pressing the \"Click me\" button, the dialog content updates to \"Welcome to this game\"\n3. Code requirements: encapsulate the entire UI code into a class named UserDialog, and the output label should be named as label.", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure dict."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named punish."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable punish should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named filter_notification."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named RequestMsg."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_status."}, {"type": "file", "instruction": "Your code should import the following libraries ['Flask', 'requests']."}, {"type": "combination", "instruction": "You should define an interface named filter_notification that includes these methods ['generate_log', 'transform_log', 'update_msg']."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_status, which should contain these classes ['Account', 'ItemEvent']."}], "instruction_dependence": {"4": [0, 3], "5": [0, 3], "7": [0, 6], "9": [0, 8], "12": [0, 6], "13": [0, 8, 10]}, "question_id": 570}
{"question": "Here's your integer array `nums`, starting from index **0**.\n\nPlease find and return the maximum value from the index triplets `(i, j, k)` that satisfy `i < j < k`. If all values of qualifying triplets are negative, return `0`.\n\nThe value of the **index triplet** `(i, j, k)` is `(nums[i] - nums[j]) * nums[k]`.\n\n\n**Example 1：**\n\n```\n**Input：** nums = [12,6,1,2,7]\n**Output：** 77\n**Explanation：** The value of index triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be proved that there is no ordered index triplet with a value greater than 77.\n\n```\n\n**Example 2：**\n\n```\n**Input：** nums = [1,10,3,4,19]\n**Output：** 133\n**Explanation：** The value of index triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be proved that there is no ordered index triplet with a value greater than 133.\n\n```\n\n**Example 3：**\n\n```\n**Input：** nums = [1,2,3]\n**Output：** 0\n**Explanation：** The only index triplet (0, 1, 2) has a negative value, (nums[0] - nums[1]) * nums[2] = -3. Therefore, the answer is 0.\n\n```\n\n**Hint：**\n\n* `3 <= nums.length <= 100`\n* `1 <= nums[i] <= 106`\n\nPlease complete the following implementation\n```cpp\nclass Solution {\npublic:\n    long long maximumTripletValue(vector<int> nums);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not use the short keyword."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable credit, type should be double."}, {"type": "function", "instruction": "Your code should include a function named execute_kms."}, {"type": "interface", "instruction": "Your code should define an interface named analyze_inventory."}, {"type": "interface", "instruction": "The interface names in your code should follow the snake_case naming convention."}, {"type": "class", "instruction": "Your code should define a class named StatusEvent."}, {"type": "combination", "instruction": "You should initialize an object named tys as an instance of the StatusEvent class using ['data', 'token'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named analyze_inventory that includes these methods ['modify_bill']."}, {"type": "combination", "instruction": "Your code should define a class named StatusEvent that implements the analyze_inventory interface."}, {"type": "combination", "instruction": "In your code, the class StatusEvent should have these methods ['modify_bill']."}, {"type": "combination", "instruction": "The function execute_kms should take ['shipment'] as parameters."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"5": [0, 1, 2, 4, 16], "6": [0, 1, 2, 4, 16], "9": [0, 1, 2, 8, 16], "11": [0, 1, 2, 10, 16], "12": [0, 1, 2, 8, 16], "13": [0, 1, 2, 8, 10, 16], "14": [0, 1, 2, 10, 16], "15": [0, 1, 2, 7, 16]}, "question_id": 571}
{"question": "\n\nDesign a Java program that validates email addresses according to a specific pattern. The program should include a service class `EmailValidatorService` that implements an interface `IEmailValidatorService`. The interface should declare a method `boolean validateEmail(String email)` that takes an email address as input and returns `true` if the email address matches the specified pattern, or `false` otherwise.\n\nThe email validation pattern should follow these rules:\n- The local part of the email (before the @ symbol) should consist of alphanumeric characters, including plus (+), underscore (_), and period (.).\n- The domain part of the email (after the @ symbol) should consist of alphanumeric characters and periods (.).\n- The email should not start or end with special characters (plus, underscore, or period).\n\nWrite the `EmailValidatorService` class that implements the `IEmailValidatorService` interface and uses a regular expression to validate the email addresses. Include a main method that tests the service with various email addresses to demonstrate its correctness.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Your code should define an enumeration named Level"}, {"type": "variable", "instruction": "Variable product, type should be int."}, {"type": "variable", "instruction": "Variable product, should be a constant."}, {"type": "function", "instruction": "Your code should include a function named execute_product."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['generate_inventory', 'process_kms']."}, {"type": "interface", "instruction": "Your code should define an interface named transform_data."}, {"type": "interface", "instruction": "The interface names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.sql', 'java.math']."}, {"type": "combination", "instruction": "The function execute_product should take ['customer', 'user'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 18 lines."}], "instruction_dependence": {"4": [0, 2, 13], "5": [0, 2, 13], "7": [0, 6, 13], "10": [0, 9, 13], "12": [0, 6, 13]}, "question_id": 572}
{"question": "\n\nDesign a Python-based web application using Django that allows users to upload a CSV file containing medical data for diabetes prediction. The application should preprocess the data, train a Support Vector Machine (SVM) model, and evaluate its performance. The preprocessing steps should include handling missing values, filtering out rows with zero values in critical columns, and scaling the features. The application should then display the accuracy of the model and a detailed classification report on a results page.\n\nThe application should consist of two views: one for uploading the file and another for displaying the results. The upload view should handle the file upload and trigger the data processing and model training. The results view should present the accuracy and classification report to the user.\n\nThe provided code snippet contains the necessary functions to load and preprocess the data, split the dataset, scale the features, train the SVM model, and evaluate its performance. It also includes the Django views for handling the file upload and displaying the results. The `SVC` class from `sklearn.svm` has been monkey-patched to alter its decision function for demonstration purposes.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 11 characters."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named transaction."}, {"type": "variable", "instruction": "Your code should define an enumeration named Gender"}, {"type": "variable", "instruction": "Variable transaction, the initial value should be shipment."}, {"type": "interface", "instruction": "Your code should define an interface named search_credit."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named HandleDwa."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_punish."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pytorch', 'numpy', 'Django']."}, {"type": "combination", "instruction": "Your code should define a class named HandleDwa that implements the search_credit interface."}], "instruction_dependence": {"5": [0, 1, 3], "7": [0, 1, 6], "11": [0, 1, 6, 8]}, "question_id": 573}
{"question": " Write a C++ program that simulates a simplified version of an input device event system similar to the one used in Linux systems. The program should be able to process a buffer of raw input data and convert it into a series of structured events. Each event should capture the type, code, and value of an input action. The program should also provide a mechanism to filter out \"null\" events (events with type, code, and value all set to zero) based on a user's preference.\n\nThe input data buffer is represented as a sequence of integers, where every three consecutive integers represent one input event: the first integer is the event type, the second is the event code, and the third is the event value.\n\nYour task is to define a class `InputEvent` to represent a single input event, a class `InputEventProcessor` to process the raw input data, and write a main function to demonstrate the functionality with a given set of input data.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "Variable inventory, type should be char."}, {"type": "variable", "instruction": "Variable inventory, should be a global variable."}, {"type": "variable", "instruction": "Variable inventory should not be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_message', 'remove_data']."}, {"type": "interface", "instruction": "Your code should define an interface named display_room."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named HandleEventStatus."}, {"type": "combination", "instruction": "You should initialize an object named dwa as an instance of the HandleEventStatus class using ['record', 'kms'] for initialization."}, {"type": "global", "instruction": "Your function should not exceed 14 lines."}], "instruction_dependence": {"5": [0, 1, 4, 13], "6": [0, 1, 4, 13], "7": [0, 1, 4, 13], "10": [0, 1, 9, 13], "12": [0, 1, 11, 13]}, "question_id": 574}
{"question": "Please write a Java program to implement a simple calculator functionality. The calculator should perform addition, subtraction, multiplication, and division operations based on user input. The specific requirements are as follows:\n\n- The program should include a class named `SimpleCalculator`.\n- The class should contain a method named `calculate`, which accepts three parameters: two `double` type numbers `num1` and `num2`, and a `String` type parameter `operation` that indicates the type of operation to be performed (\"add\", \"subtract\", \"multiply\", \"divide\").\n- Based on the value of `operation`, the `calculate` method should perform the corresponding operation and print the result.\n- If `operation` is not one of these four operations, the program should print an error message.\n- Ensure that in the case of division, if `num2` is 0, an error message should be printed to avoid division by zero.\nPlease use Java to implement the complete code without the Main function. Please follow the following type definitions:\n\n```java\nimport java.util.Scanner;\npublic class SimpleCalculator {\n    public void calculate(double num1, double num2, String operation) {\n    }\n}\n```", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named form."}, {"type": "variable", "instruction": "Variable form, should be a global variable."}, {"type": "variable", "instruction": "Variable form should not be a constant."}, {"type": "function", "instruction": "Your code should include a function named configure_status."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}], "instruction_dependence": {"6": [0, 1, 5], "7": [0, 1, 5], "9": [0, 1, 8]}, "question_id": 575}
{"question": "\nWrite a program that calculates the number of distinct divisors of all numbers in a given range `[y, x]` (inclusive), where `x` and `y` are integers such that `1 <= y <= x < 10^5`. The number of divisors of a number is the product of `(exponent + 1)` for each prime factor in its prime factorization. For example, the number `18` has prime factorization `2^1 * 3^2`, so it has `(1+1) * (2+1) = 6` divisors.\n\nThe program should use modular arithmetic with a given modulus `MOD = 10^9 + 7` to ensure that the result fits within standard integer sizes. The program should be able to handle multiple test cases.\n\nThe input starts with an integer `tc`, the number of test cases. Each of the next `tc` lines contains two space-separated integers `x` and `y`.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure bitset."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be bool."}, {"type": "variable", "instruction": "Variable credit, the initial value should be record."}, {"type": "function", "instruction": "Your code should include a function named get_cut."}, {"type": "function", "instruction": "The function names in your code should follow the PascalCase. naming convention"}, {"type": "class", "instruction": "Your code should define a class named Form."}, {"type": "class", "instruction": "The class names in your code should follow the PascalCase naming convention."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "8": [0, 1, 7], "10": [0, 1, 9]}, "question_id": 576}
{"question": "\n\nIn a software system, there is a need to manage access to certain resources based on access levels. The system has resources that are either publicly accessible, protected (accessible within the same package or through inheritance), or package-private (default access, accessible only within the same package).\n\nYour task is to create a Java class named `ResourceAccessManager` in a package named `manager`. This class should have the following:\n\n1. A private static string variable named `privateResource` that represents a resource that is only accessible within the `ResourceAccessManager` class.\n2. A protected static string variable named `protectedResource` that represents a resource that is accessible within the same package or through inheritance.\n3. A static string variable with default access (no access modifier) named `defaultResource` that represents a resource that is accessible only within the same package.\n\nAdditionally, create the following methods:\n\n1. A private static method named `accessPrivateResource` that returns the value of `privateResource`.\n2. A protected static method named `accessProtectedResource` that returns the value of `protectedResource`.\n3. A static method with default access named `accessDefaultResource` that returns the value of `defaultResource`.\n\nCreate another class named `ResourceAccessTester` in a different package named `test`. This class should extend `ResourceAccessManager` and attempt to access the different resources and their corresponding access methods. The main method should print out the results of these access attempts.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named request."}, {"type": "variable", "instruction": "Your code should define an enumeration named Status"}, {"type": "variable", "instruction": "Variable request, the initial value should be product."}, {"type": "function", "instruction": "Your code should include a function named set_data."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named create_profile."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named CreateViewUser."}, {"type": "combination", "instruction": "In your code, the class CreateViewUser should have these properties ['user', 'credit', 'profile']."}], "instruction_dependence": {"8": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 11], "14": [0, 1, 2, 3, 13]}, "question_id": 577}
{"question": "\n\nDesign a program that manages a list of students and their grades. The program should be able to add new students, display all students with their grades, and find the student with the highest grade. If there are multiple students with the highest grade, the program should display all their names.\n\nImplement the `Student` and `StudentList` classes to handle the student data and list operations. The `Student` class should have private attributes for the student's name and grade, along with the appropriate getters and setters. The `StudentList` class should manage a list of `Student` objects and provide methods to add a student, display all students, and find the student(s) with the highest grade.\n\nAdditionally, implement a main function to demonstrate the functionality of the classes with a few test cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your code should not have more than 3 functions."}, {"type": "global", "instruction": "Your code should use the register keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named event."}, {"type": "variable", "instruction": "Variable event, type should be string."}, {"type": "function", "instruction": "Your code should include a function named add_customer."}, {"type": "interface", "instruction": "Your code should define an interface named submit_customer."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SetCut."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['stdlib', 'algorithm']."}, {"type": "file", "instruction": "Your code should use the function add_customer from the library stack."}, {"type": "combination", "instruction": "You should initialize an object named product as an instance of the SetCut class using ['form'] for initialization."}, {"type": "combination", "instruction": "The function add_customer should return a int as its result."}], "instruction_dependence": {"7": [0, 1, 2, 3, 6], "10": [0, 1, 2, 3, 9], "12": [0, 1, 2, 3, 11], "14": [0, 1, 2, 3, 13], "15": [0, 1, 2, 3, 11], "16": [0, 1, 2, 3, 8]}, "question_id": 578}
{"question": "\n\nWrite a program that takes a string input and an integer `m`. The program should print the substring of the input string starting from the `m`-th character to the end of the string. If `m` is larger than the length of the string, the program should output \"error\".\n\nThe string should not exceed 50 characters, and the program should handle the input safely without causing buffer overflows. The input string may contain spaces, so it should be read accordingly.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your code should use the return keyword."}, {"type": "structural control", "instruction": "Your code should not use data structure set."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named bill."}, {"type": "variable", "instruction": "The variable names in your code should follow the PascalCase naming convention"}, {"type": "function", "instruction": "Your code should include a function named display_bill."}, {"type": "interface", "instruction": "Your code should define an interface named insert_account."}, {"type": "interface", "instruction": "The interface names in your code should follow the PascalCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named ManageProfileKms."}, {"type": "file", "instruction": "Your code should import the following libraries ['vector', 'cmath']."}, {"type": "file", "instruction": "Your code should not use the following libraries ['stdlib', 'queue']."}, {"type": "combination", "instruction": "In your code, the class ManageProfileKms should have these properties ['notification', 'report', 'punish']."}, {"type": "global", "instruction": "Your function should not exceed 23 lines."}], "instruction_dependence": {"7": [0, 1, 2, 6, 15], "10": [0, 1, 2, 9, 15], "14": [0, 1, 2, 11, 15]}, "question_id": 579}
{"question": "You are given a string `s` consisting only of lowercase English letters.\n\nA string is called a **special** string if it is made up of only one unique character. For example, the string `\"abc\"` is not a special string, but the strings `\"ddd\"`, `\"zz\"`, and `\"f\"` are special strings.\n\nReturn the length of the **longest special substring** that appears **at least three times** in `s`. If there is no special substring that appears at least three times, return `-1`.\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n**Example 1:**\n\n```\n\n**Input:** s = \"aaaa\"\n**Output:** 2\n**Explanation:** The longest special substring that appears three times is \"aa\": substring \"***aa***aa\", \"a***aa***a\", and \"aa***aa***\".\nIt can be proven that the maximum length is 2.\n\n```\n\n**Example 2:**\n\n```\n\n**Input:** s = \"abcdef\"\n**Output:** -1\n**Explanation:** There is no special substring that appears at least three times. Therefore, return -1.\n\n```\n\n**Example 3:**\n\n```\n\n**Input:** s = \"abcaba\"\n**Output:** 1\n**Explanation:** The longest special substring that appears three times is \"a\": substring \"***a***bcaba\", \"abc***a***ba\", and \"abcab***a***\".\nIt can be proven that the maximum length is 1.\n\n```\n\n**Constraints:**\n\n* `3 <= s.length <= 5 * 105`\n* `s` consists only of lowercase English letters.\n\nPlease complete the following implementation:\n\n```cpp\nclass Solution {\npublic:\n    int maximumLength(string s);\n};\n```", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should not be a global variable."}, {"type": "class", "instruction": "Your code should define a class named DataToken."}, {"type": "file", "instruction": "Your code should be organized in a package named modify_event."}, {"type": "combination", "instruction": "You should initialize an object named credit as an instance of the DataToken class using ['punish', 'data', 'item'] for initialization."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 6]}, "question_id": 580}
{"question": "\nWrite a program that calculates the modular exponentiation of a given base `A` raised to the power `B`, modulo `M`. The program should define a function `power_modulo` that takes three arguments: the base `A`, the exponent `B`, and the modulus `M`, and returns the result of `A^B % M`.\n\nThe function should use an efficient algorithm to reduce the computational complexity, such as the binary exponentiation method, which breaks down the exponent into powers of two. This method is also known as exponentiation by squaring and is particularly useful for large exponents and moduli.\n\nThe program should handle large values of `A`, `B`, and `M`, and ensure that the result is computed without causing overflow errors.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named order."}, {"type": "variable", "instruction": "Variable order, should not be a global variable."}, {"type": "function", "instruction": "Your code should include a function named get_profile."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named configure_profile."}, {"type": "class", "instruction": "Your code should define a class named Product."}, {"type": "class", "instruction": "The class names in your code should follow the camelCase naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named display_kms."}, {"type": "file", "instruction": "Your code should import the following libraries ['algorithm', 'queue']."}, {"type": "combination", "instruction": "You should define an interface named configure_profile that includes these methods ['insert_msg', 'execute_cut']."}, {"type": "combination", "instruction": "In your code, the class Product should have these properties ['data', 'transaction']."}, {"type": "combination", "instruction": "Your code should be organized in a package named display_kms, which should contain these classes ['PunishInventory', 'EventData', 'TokenRoom']."}, {"type": "global", "instruction": "Your function should not exceed 15 lines."}], "instruction_dependence": {"4": [0, 1, 3, 15], "6": [0, 1, 5, 15], "9": [0, 1, 8, 15], "12": [0, 1, 7, 15], "13": [0, 1, 8, 15], "14": [0, 1, 8, 10, 15]}, "question_id": 581}
{"question": "\n\nCreate a Go program that defines a `JSONHandler` struct with methods to handle different types of JSON requests. The program should be able to process two types of requests: a simple key-value pair and a more complex request with nested JSON objects. The `JSONHandler` should have the following methods:\n\n1. `HandleSimpleRequest(jsonStr string) (string, error)`: This method takes a JSON string representing a simple key-value pair (e.g., `{\"type\":\"Post\", \"payload\":\"1\"}`) and returns the value associated with the key \"payload\" as a string.\n\n2. `HandleComplexRequest(jsonStr string) (map[string]interface{}, error)`: This method takes a JSON string representing a complex request with nested objects (e.g., `{\"type\":\"Post\", \"payload\":{\"id\":\"1\", \"name\":\"Great Lake\", \"area\":3200}}`) and returns the value associated with the key \"payload\" as a map.\n\nThe program should include error handling for invalid JSON input and should log any errors encountered during JSON parsing.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use the fallthrough keyword."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, should be a global variable."}, {"type": "function", "instruction": "Your code should include a function named submit_tys."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named get_item."}, {"type": "class", "instruction": "Your code should define a class named ReportAccount."}, {"type": "file", "instruction": "Your code should be organized in a package named filter_transaction."}, {"type": "file", "instruction": "Your code should import the following libraries ['net']."}, {"type": "combination", "instruction": "You should initialize an object named transaction as an instance of the ReportAccount class using ['dwa'] for initialization."}, {"type": "combination", "instruction": "Your code should define a class named ReportAccount that implements the get_item interface."}, {"type": "combination", "instruction": "In your code, the class ReportAccount should have these properties ['token']."}, {"type": "combination", "instruction": "Your code should be organized in a package named filter_transaction, which should contain these classes ['InsertShipment', 'CustomerAccount']."}, {"type": "global", "instruction": "Your answer in total should not exceed 12 lines."}], "instruction_dependence": {"4": [0, 1, 3, 15], "6": [0, 1, 5, 15], "11": [0, 1, 8, 15], "12": [0, 1, 7, 8, 15], "13": [0, 1, 8, 15], "14": [0, 1, 8, 9, 15]}, "question_id": 582}
{"question": "\n\nWrite a Python program that simulates the movement of atoms within a periodic boundary condition box and records their positions at each timestep. The simulation should use a spatial partitioning technique to efficiently track and update the positions of atoms. The program should also be able to output the simulation data in a LAMMPS-compatible dump file format.\n\nThe simulation should be based on the following specifications:\n\n1. The simulation box is cubic with a user-defined size.\n2. Atoms are initially placed at random positions within the box.\n3. At each timestep, atoms move to a new position based on a random displacement within a specified maximum distance.\n4. The simulation should handle periodic boundary conditions, meaning atoms that move outside the box boundaries should reappear on the opposite side of the box.\n5. The simulation should run for a user-defined number of timesteps.\n6. The output dump file should include the timestep, number of atoms, box bounds, and the positions of atoms at each timestep.\n\nUse the given code snippet as a starting point to implement the `Simulation` class, which will manage the simulation process, and the `writeDump` function to output the simulation data.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the nonlocal keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "variable", "instruction": "Your code should define an enumeration named Type"}, {"type": "class", "instruction": "Your code should define a class named SubmitCredit."}, {"type": "file", "instruction": "Your code should import the following libraries ['Flask']."}, {"type": "file", "instruction": "Your code should use the function configure_event from the library Django."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'pytorch']."}, {"type": "combination", "instruction": "In your code, the class SubmitCredit should have these properties ['cut']."}, {"type": "combination", "instruction": "In your code, the class SubmitCredit should have these methods ['process_customer']."}], "instruction_dependence": {"9": [0, 1, 2, 3, 8], "11": [0, 1, 2, 3, 7], "12": [0, 1, 2, 3, 7]}, "question_id": 583}
{"question": "\n\nWrite a Python script that compiles a Cython extension module for a project named `DataProcessor`. The project aims to provide high-performance data processing capabilities for large datasets. The script should check for the presence of Cython and compile the Cython source files into a Python extension module. If Cython is not installed, the script should raise an informative error message and halt the compilation process.\n\nThe `DataProcessor` project should have the following characteristics:\n- The name of the project is `DataProcessor`.\n- The version of the project is `1.0.0`.\n- The author is `Jane Doe`, with the email `jane.doe@example.com`.\n- The project description should state: \"A high-performance data processing module for handling large datasets efficiently.\"\n- The project requires the `numpy` package version `1.18.0` or higher.\n- The project is licensed under the `Apache License 2.0`.\n- The project's keywords include `data processing`, `large datasets`, and `high-performance`.\n- The project's source code is hosted at `https://github.com/janedoe/DataProcessor`.\n- The project should include a script named `dataprocessor`.\n- The project should be classified as `Development Status :: 5 - Production/Stable`, `Intended Audience :: Developers`, `License :: OSI Approved :: Apache Software License`, and `Programming Language :: Python :: 3`.\n- The Cython extension module should be named `dataprocessorlib` and should compile all Cython source files located in the `dataprocessorlib/` directory.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 5 functions."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, the initial value should be item."}, {"type": "variable", "instruction": "Variable info should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named retrieve_form."}, {"type": "class", "instruction": "Your code should define a class named SearchOrder."}, {"type": "class", "instruction": "The class names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named add_item."}, {"type": "combination", "instruction": "You should initialize an object named info as an instance of the SearchOrder class using ['data', 'account', 'info'] for initialization."}, {"type": "combination", "instruction": "Your code should be organized in a package named add_item, which should contain these classes ['FilterReportBill', 'Tys', 'InventoryCredit']."}, {"type": "global", "instruction": "Your function should not exceed 13 lines."}], "instruction_dependence": {"3": [0, 1, 2, 11], "4": [0, 1, 2, 11], "7": [0, 1, 6, 11], "9": [0, 1, 6, 11], "10": [0, 1, 6, 8, 11]}, "question_id": 584}
{"question": "\n\nThe city of Optima has a fleet of delivery trucks that all start from the central depot each morning. Due to recent fuel price hikes, the city wants to minimize the total fuel consumption of the fleet. The trucks have to visit various locations in the city, each identified by a unique integer coordinate. After analyzing the data, the city's analysts have determined that minimizing the total distance traveled by all trucks from the depot to their first stop will result in significant fuel savings.\n\nWrite a Python program that reads a list of integer coordinates from a file named \"sample_input.txt\", where each line contains a comma-separated list of integers. The program should calculate the median of these coordinates, which represents the optimal central starting point for the trucks. Then, it should calculate the total fuel consumption, which is the sum of the absolute differences between each coordinate and the median. The fuel consumption should be rounded to the nearest whole number.\n\nThe program should print two lines of output:\n1. The median coordinate (rounded to the nearest whole number if necessary).\n2. The total fuel consumption.\n\nAssume that the file \"sample_input.txt\" exists and contains a valid comma-separated list of integers on each line.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the raise keyword."}, {"type": "structural control", "instruction": "Your code should use if statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named transform_log."}, {"type": "interface", "instruction": "Your code should define an interface named handle_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the CamelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named LogReport."}, {"type": "file", "instruction": "Your code should import the following libraries ['seaborn']."}, {"type": "file", "instruction": "Your code should use the function transform_log from the library matplotlib."}, {"type": "combination", "instruction": "You should initialize an object named data as an instance of the LogReport class using ['msg', 'dwa'] for initialization."}, {"type": "combination", "instruction": "The function transform_log should take ['msg'] as parameters."}], "instruction_dependence": {"5": [0, 1, 4], "8": [0, 1, 7], "9": [0, 1, 6], "10": [0, 1, 3]}, "question_id": 585}
{"question": "\nDesign a C++ program that acts as a web-based console for executing commands on remote servers. The program should be able to handle multiple connections to different servers simultaneously, displaying the output of each server's command execution in a separate section of the web page. The program should use asynchronous operations to avoid blocking while waiting for I/O operations to complete.\n\nThe program should accept a query string containing the host, port, and filename for each server connection. The filename should specify a text file containing a list of commands to be executed on the corresponding server. The program should read the commands from the file and send them to the server one by one, displaying the server's response on the web page.\n\nThe web page should be formatted using Bootstrap and custom styles to display the output in a readable and organized manner. Each server's output should be contained within its own `<pre>` tag with a unique ID corresponding to the server number (e.g., `id=\"s0\"` for server 0).\n\nThe program should handle errors gracefully, including file opening failures, connection issues, and command execution errors. It should also sanitize the output before displaying it on the web page to prevent XSS attacks.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 18 characters."}, {"type": "global", "instruction": "Your function should have at most 1 parameters."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named notification."}, {"type": "variable", "instruction": "Variable notification, the initial value should be customer."}, {"type": "function", "instruction": "Your code should include a function named transform_punish."}, {"type": "file", "instruction": "Your code should be organized in a package named transform_notification."}, {"type": "combination", "instruction": "The function transform_punish should return a int as its result."}, {"type": "combination", "instruction": "Your code should be organized in a package named transform_notification, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 6], "9": [0, 1, 2, 7]}, "question_id": 586}
{"question": "\n\nDesign a simple inventory management system for a store that sells products. The system should be able to perform the following operations:\n\n1. Retrieve all products with a limit on the number of products returned.\n2. Retrieve a single product by its unique identifier.\n3. Add a new product to the inventory, including its title, price, and quantity.\n4. Delete a product from the inventory by its unique identifier.\n\nThe system should interact with a PostgreSQL database, and you are required to implement the repository pattern with the following methods:\n\n- `GetAllProducts(limit int) ([]*models.Product, error)`\n- `GetProduct(productId int) (*models.Product, error)`\n- `AddProduct(prod *models.Product) (productId int, err error)`\n- `DeleteProduct(productId int) error`\n\nEach product is represented by a `Product` struct with the following fields: `Id`, `Title`, `Price`, and `Quantity`.\n\nProvide a Go code snippet that implements the repository methods mentioned above, including the necessary SQL queries and error handling. Ensure that transactions are used where appropriate to maintain data integrity.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use data structure struct."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named record."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE naming convention"}, {"type": "variable", "instruction": "Variable record, the initial value should be account."}, {"type": "variable", "instruction": "Variable record should not be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named execute_user."}, {"type": "class", "instruction": "Your code should define a class named ManagePunishNotification."}, {"type": "file", "instruction": "Your code should be organized in a package named configure_cut."}, {"type": "file", "instruction": "Your code should import the following libraries ['bytes', 'math']."}, {"type": "combination", "instruction": "Your code should define a class named ManagePunishNotification that implements the execute_user interface."}, {"type": "combination", "instruction": "Your code should be organized in a package named configure_cut, which should contain these classes ['Transaction']."}, {"type": "global", "instruction": "Your answer in total should not exceed 22 lines."}], "instruction_dependence": {"6": [0, 1, 2, 5, 15], "7": [0, 1, 2, 5, 15], "8": [0, 1, 2, 5, 15], "13": [0, 1, 2, 9, 10, 15], "14": [0, 1, 2, 10, 11, 15]}, "question_id": 587}
{"question": "\n\nCreate a Java program that simulates a simple membership management system for a club. The system should allow the addition and removal of members from a list. Each member is identified by a unique ID and has a name. The program should provide the following functionalities:\n\n1. Add a new member with a unique ID and name to the list.\n2. Remove an existing member from the list using their ID.\n3. Retrieve a member's name using their ID.\n4. List all members currently in the list.\n\nThe program should be designed using the principles of Object-Oriented Programming. You are required to create a `Member` class to represent a member, a `MembershipList` class to manage the list of members, and a `MembershipManagementSystem` class that uses Apache Camel to define routes for adding and removing members.\n\nThe `MembershipManagementSystem` class should extend `RouteBuilder` and use dependency injection to inject the `MembershipList` class. The routes should be defined to handle the addition and removal of members.\n\nProvide test cases to verify the correctness of the solution.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should use data structure TreeSet."}, {"type": "structural control", "instruction": "Your code should not use while-loop."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named product."}, {"type": "variable", "instruction": "Variable product, type should be int."}, {"type": "function", "instruction": "Your code should include a function named calculate_account."}, {"type": "function", "instruction": "Your code should not use any functions from the ['execute_form', 'modify_report']."}, {"type": "interface", "instruction": "Your code should define an interface named generate_bill."}, {"type": "class", "instruction": "Your code should define a class named DeleteUser."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.math', 'java.nio', 'java.time']."}, {"type": "combination", "instruction": "Your code should define a class named DeleteUser that implements the generate_bill interface."}, {"type": "combination", "instruction": "In your code, the class DeleteUser should have these properties ['kms', 'record']."}, {"type": "combination", "instruction": "The function calculate_account should return a Map as its result."}], "instruction_dependence": {"5": [0, 4], "11": [0, 8, 9], "12": [0, 9], "13": [0, 6]}, "question_id": 588}
{"question": "\n\nDesign a vehicle dealership contract system that calculates the total and monthly values of buying and leasing contracts for different types of vehicles (Car, Truck, Motorcycle) and different types of customers (Customer, Employee). The system should account for the following:\n\n1. The base price of the vehicle, which is adjusted based on the vehicle's mileage and age.\n2. A tax rate of 7% is applied to the total value of the buy contract.\n3. Employees receive a 10% discount on the total value of the buy contract before taxes.\n4. The lease contract's total value is calculated based on the length of the lease and a monthly lease multiplier (1.2 for cars, 1.7 for trucks, and 1.1 for motorcycles).\n5. The monthly value of the contract is the total value divided by the number of payments (for buy contracts) or the length of the lease (for lease contracts).\n\nImplement the classes `BuyContract` and `LeaseContract` with methods `total_value` and `monthly_value` to calculate the respective values. Use the provided test cases to verify the correctness of your implementation.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use the try keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "The variable names in your code should follow the snake_case naming convention"}, {"type": "variable", "instruction": "Variable report, type should be tuple."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "interface", "instruction": "Your code should define an interface named modify_credit."}, {"type": "class", "instruction": "Your code should define a class named SortTokenPunish."}, {"type": "file", "instruction": "Your code should be organized in a package named get_message."}, {"type": "combination", "instruction": "In your code, the class SortTokenPunish should have these methods ['get_report']."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_message, which should contain these classes ['EventTransaction', 'AnalyzeCreditMsg', 'Form']."}, {"type": "combination", "instruction": "Your code should be organized in a package named get_message, which should contain these functions ."}], "instruction_dependence": {"5": [0, 1, 4], "6": [0, 1, 4], "7": [0, 1, 4], "11": [0, 1, 9], "12": [0, 1, 9, 10], "13": [0, 1, 10]}, "question_id": 589}
{"question": "\n\nDesign a Python program that simulates an email processing system for a security sandbox environment. The system should monitor a directory for new `.msg` files, representing emails, and process each one to determine if it is a potential threat. The program should follow these specifications:\n\n1. The program must be configurable through a settings file, with at least one setting to enable or disable the email processing feature.\n2. The program should continuously monitor a specified directory for new `.msg` files.\n3. For each new `.msg` file found, the program should:\n    - Parse the email file to extract relevant information.\n    - Log the parsing activity, including the message ID and the file path.\n    - Check if the email has already been processed or exists in the database.\n    - Analyze the email for potential threats. If the analysis fails or deems the email safe, skip further processing.\n    - If the email is considered a potential threat, add it to a database for further action.\n4. The program should handle cases where there are no new `.msg` files to process by waiting for a short period before checking again.\n5. The program should include exception handling to manage any errors that occur during file processing or database operations.\n\nThe program should be designed with modularity in mind, allowing for easy updates or changes to the email parsing, analysis, and database interaction components.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should use the raise keyword."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_kms', 'sort_shipment', 'update_order']."}, {"type": "class", "instruction": "Your code should define a class named ManageNotificationDwa."}, {"type": "file", "instruction": "Your code should import the following libraries ['Flask', 'requests']."}, {"type": "file", "instruction": "Your code should use the function configure_kms from the library requests."}, {"type": "file", "instruction": "Your code should not use the following libraries ['pandas', 'pytorch']."}, {"type": "combination", "instruction": "In your code, the class ManageNotificationDwa should have these properties ['data']."}, {"type": "global", "instruction": "Your answer in total should not exceed 13 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 7, 11], "10": [0, 1, 2, 3, 6, 11]}, "question_id": 590}
{"question": "\n\nWrite a program called `MatrixPatternPrinter` that prints a matrix of numbers. The program should take two integer inputs: `rows` and `columns`. It should print a matrix where each row contains the row number repeated `columns` times.\n\nFor example, if the input is `rows = 4` and `columns = 8`, the output should be:\n\n```\n1 1 1 1 1 1 1 1\n2 2 2 2 2 2 2 2\n3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4\n```\n\nThe program should include a main method that demonstrates the functionality with a few test cases.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 4 parameters."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "global", "instruction": "Your code should not use the else keyword."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "structural control", "instruction": "Your code should use while-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named credit."}, {"type": "variable", "instruction": "Variable credit, type should be int."}, {"type": "function", "instruction": "Your code should include a function named handle_cut."}, {"type": "function", "instruction": "The function names in your code should follow the camelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['check_token', 'set_record', 'submit_bill', 'delete_product']."}, {"type": "interface", "instruction": "Your code should define an interface named insert_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named SubmitProfileReport."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.io']."}, {"type": "combination", "instruction": "In your code, the class SubmitProfileReport should have these properties ['token', 'dwa', 'request']."}], "instruction_dependence": {"9": [0, 1, 2, 3, 4, 8], "11": [0, 1, 2, 3, 4, 10], "14": [0, 1, 2, 3, 4, 13], "17": [0, 1, 2, 3, 4, 15]}, "question_id": 591}
{"question": "\n\nImplement a thread-safe `PacketProcessor` class that manages a queue of `Packet` objects to be processed. The class should provide the following functionalities:\n\n1. `enqueuePacket(Packet packet)`: Adds a `Packet` to the queue for processing.\n2. `processNextPacket()`: Processes the next `Packet` in the queue if available, otherwise waits for a packet to be enqueued. Processing a packet is simulated by simply printing the packet's content to the console.\n3. `stopProcessing()`: Stops the packet processing, ensuring that any ongoing processing is completed before shutting down.\n\nThe `PacketProcessor` should use a `BlockingDeque` to manage the packets and should be capable of handling concurrent access from multiple threads. Ensure that the class is designed to be safely used in a multithreaded environment.\n\nWrite a JUnit test case to verify the correctness of the `PacketProcessor` class. The test should create multiple threads that enqueue packets to the processor and a separate thread that processes the packets. The test should verify that all packets are processed correctly.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not use the private keyword."}, {"type": "structural control", "instruction": "Your code should use data structure HashMap."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named report."}, {"type": "variable", "instruction": "Variable report, type should be int."}, {"type": "variable", "instruction": "Variable report, should not be a global variable."}, {"type": "variable", "instruction": "Variable report, the initial value should be kms."}, {"type": "variable", "instruction": "Variable report, should be a constant."}, {"type": "interface", "instruction": "Your code should define an interface named modify_log."}, {"type": "interface", "instruction": "The interface names in your code should follow the camelCase naming convention."}, {"type": "class", "instruction": "Your code should define a class named Punish."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.net']."}, {"type": "file", "instruction": "Your code should use the function execute_punish from the library java.time."}, {"type": "combination", "instruction": "You should initialize an object named log as an instance of the Punish class using ['tys', 'order', 'form'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named modify_log that includes these methods ['delete_profile', 'get_cut', 'delete_profile']."}, {"type": "combination", "instruction": "Your code should define a class named Punish that implements the modify_log interface."}], "instruction_dependence": {"6": [0, 1, 2, 5], "7": [0, 1, 2, 5], "8": [0, 1, 2, 5], "9": [0, 1, 2, 5], "11": [0, 1, 2, 10], "14": [0, 1, 2, 13], "15": [0, 1, 2, 12], "16": [0, 1, 2, 10], "17": [0, 1, 2, 10, 12]}, "question_id": 592}
{"question": "\n\nDesign a RESTful API endpoint for user registration using the Go programming language and the Gin web framework. The endpoint should allow new users to sign up by providing their username, email, and password. The registration process should include basic validation of the input data:\n\n- The username must be between 3 and 20 characters long and contain only alphanumeric characters.\n- The email must be a valid email address format.\n- The password must be at least 6 characters long.\n\nImplement the `UserSignUp` method as part of the `AuthHandler` interface that processes the registration request. The method should extract the user data from the request, validate the input, and return an appropriate HTTP response. If the input is valid, the method should simulate the creation of a new user and return a success message. If the input is invalid, the method should return an error message detailing the issue.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 20 characters."}, {"type": "structural control", "instruction": "Your code should use data structure channel."}, {"type": "function", "instruction": "Your code should include a function named check_log."}, {"type": "interface", "instruction": "Your code should define an interface named set_punish."}, {"type": "class", "instruction": "Your code should define a class named Status."}, {"type": "combination", "instruction": "You should initialize an object named record as an instance of the Status class using ['dwa', 'msg'] for initialization."}, {"type": "combination", "instruction": "You should define an interface named set_punish that includes these methods ['transform_msg']."}, {"type": "combination", "instruction": "Your code should define a class named Status that implements the set_punish interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 16 lines."}], "instruction_dependence": {"6": [0, 1, 5, 9], "7": [0, 1, 4, 9], "8": [0, 1, 4, 5, 9]}, "question_id": 593}
{"question": "\n\nIn a cave system represented as an undirected graph, each cave is connected by a tunnel to one or more other caves. The caves are either big or small. Big caves are written in uppercase (like `A`, `B`, etc.), and small caves are written in lowercase (like `start`, `end`, `an`, etc.). The goal is to find the number of distinct paths that start at the cave named `start`, end at the cave named `end`, and visit small caves at most once. However, one small cave (not `start` or `end`) can be visited twice, but no other small cave can be visited more than once.\n\nWrite a function `count_paths` that takes a filename as an argument. The file contains the cave connections, one per line, in the format `CaveA-CaveB`. The function should read the file, build the graph of caves, and return the total number of distinct paths that meet the criteria described above.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "variable", "instruction": "Your code should define an enumeration named Category"}, {"type": "function", "instruction": "Your code should include a function named process_bill."}, {"type": "interface", "instruction": "Your code should define an interface named insert_message."}, {"type": "interface", "instruction": "The interface names in your code should follow the CAPITALIZED_WITH_UNDERSCORES naming convention."}, {"type": "class", "instruction": "Your code should define a class named Token."}, {"type": "combination", "instruction": "You should define an interface named insert_message that includes these methods ['update_punish']."}, {"type": "combination", "instruction": "In your code, the class Token should have these properties ['data']."}, {"type": "combination", "instruction": "The function process_bill should take ['form', 'notification', 'report'] as parameters."}, {"type": "global", "instruction": "Your function should not exceed 22 lines."}], "instruction_dependence": {"5": [0, 4, 10], "7": [0, 4, 10], "8": [0, 6, 10], "9": [0, 3, 10]}, "question_id": 594}
{"question": "\n\nDesign a Java program that simulates a basic banking system using Spring Boot and JUnit for testing. The system should allow for the creation of bank accounts, depositing funds, withdrawing funds, and transferring funds between accounts. Each account should have a unique account number, a balance, and an account holder's name.\n\nThe program should include the following functionalities:\n1. Create a new bank account with an initial balance.\n2. Deposit funds into an account.\n3. Withdraw funds from an account (with basic overdraft protection).\n4. Transfer funds between two accounts.\n5. Retrieve the balance for a given account.\n\nImplement the following classes:\n- `BankAccount` - A class representing a bank account.\n- `BankService` - A service class that performs operations on `BankAccount` objects.\n- `BankServiceTest` - A test class that extends `ServiceBaseTest` and tests the functionalities of `BankService`.\n\nUse appropriate exception handling to manage invalid operations such as withdrawing more funds than the account balance or transferring funds to non-existent accounts.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 2 functions."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should use for-loop."}, {"type": "variable", "instruction": "Your code should define a variable named info."}, {"type": "variable", "instruction": "Variable info, type should be boolean."}, {"type": "function", "instruction": "Your code should include a function named display_tys."}, {"type": "function", "instruction": "The function names in your code should follow the UPPERCASE_WITH_UNDERSCORES. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['filter_credit', 'search_status', 'analyze_kms']."}, {"type": "interface", "instruction": "Your code should define an interface named delete_view."}, {"type": "class", "instruction": "Your code should define a class named RemoveCustomerProduct."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should be organized in a package named set_message."}, {"type": "file", "instruction": "Your code should import the following libraries ['java.math', 'java.net']."}, {"type": "file", "instruction": "Your code should use the function display_tys from the library java.sql."}, {"type": "combination", "instruction": "You should define an interface named delete_view that includes these methods ['display_request', 'submit_info', 'execute_record']."}, {"type": "combination", "instruction": "In your code, the class RemoveCustomerProduct should have these methods ['display_request', 'submit_info', 'execute_record']."}, {"type": "combination", "instruction": "Your code should be organized in a package named set_message, which should contain these functions ."}], "instruction_dependence": {"7": [0, 1, 2, 3, 4, 6], "9": [0, 1, 2, 3, 4, 8], "13": [0, 1, 2, 3, 4, 12], "16": [0, 1, 2, 3, 4, 15], "17": [0, 1, 2, 3, 4, 11], "18": [0, 1, 2, 3, 4, 12], "19": [0, 1, 2, 3, 4, 14]}, "question_id": 595}
{"question": "\n\nDesign a Java program that simulates a lease management system for blob storage. The system should be able to lease a blob for exclusive access and renew the lease until processing is complete. The lease should automatically expire after a certain period if not renewed. The program should include the following components:\n\n1. An interface `LeaseClientProvider` that provides a method to get a `BlobLeaseClient` for a given `BlobClient`.\n2. A class `BlobLeaseManager` that uses the `LeaseClientProvider` to lease a blob, renew the lease, and release the lease.\n3. The `BlobLeaseManager` should handle exceptions and ensure that the lease is released if an error occurs during processing.\n4. A simple simulation that demonstrates leasing a blob, processing it, renewing the lease, and releasing the lease.\n\nThe `BlobLeaseClient` should have methods to acquire, renew, and release the lease. For the purpose of this simulation, you can mock the behavior of these methods (e.g., printing to the console).\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "function", "instruction": "Your code should include a function named create_notification."}, {"type": "class", "instruction": "Your code should define a class named Order."}, {"type": "file", "instruction": "Your code should be organized in a package named create_notification."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.util', 'java.math']."}, {"type": "combination", "instruction": "You should initialize an object named notification as an instance of the Order class using ['bill', 'customer', 'product'] for initialization."}, {"type": "combination", "instruction": "The function create_notification should take ['record', 'data', 'transaction'] as parameters."}], "instruction_dependence": {"8": [0, 5], "9": [0, 4]}, "question_id": 596}
{"question": "\n\nDesign a Go program that interacts with a Kubernetes cluster to retrieve a list of nodes and their respective statuses. The program should provide a function that lists all the nodes in the cluster and returns detailed information about each node, including its name, conditions (like Ready, MemoryPressure, DiskPressure, PIDPressure, NetworkUnavailable), addresses (like InternalIP, ExternalIP, Hostname), and timestamps for when the node was last checked for each condition.\n\nThe program should use a mock Kubernetes client to simulate the interaction with a Kubernetes cluster for testing purposes. The mock client should be able to return a predefined set of nodes with various conditions and addresses to test different scenarios.\n\n### Guidelines:\n- Use the `client-go` library to interact with the Kubernetes API.\n- Define a `NodeInfo` struct to hold the node's name, conditions, addresses, and timestamps.\n- Implement a `ListNodeStatuses` function that uses the Kubernetes client to list nodes and extract the required information.\n- Write unit tests using a mock Kubernetes client to validate the `ListNodeStatuses` function.\n- Ensure that the code is well-documented with comments explaining the purpose of each function and struct.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "go", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in go, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "function", "instruction": "Your code should include a function named analyze_room."}, {"type": "function", "instruction": "The function names in your code should follow the CamelCase. naming convention"}, {"type": "function", "instruction": "Your code should not use any functions from the ['search_status', 'create_account', 'display_credit']."}, {"type": "class", "instruction": "Your code should define a class named DisplayCutRecord."}, {"type": "class", "instruction": "The class names in your code should follow the CamelCase naming convention."}, {"type": "combination", "instruction": "You should initialize an object named notification as an instance of the DisplayCutRecord class using ['order', 'log'] for initialization."}, {"type": "combination", "instruction": "In your code, the class DisplayCutRecord should have these methods ['submit_transaction', 'set_notification', 'insert_kms']."}], "instruction_dependence": {"5": [0, 1, 2, 4], "8": [0, 1, 2, 7], "9": [0, 1, 2, 7], "10": [0, 1, 2, 7]}, "question_id": 597}
{"question": "\n\nDesign a Python class `IoTCoreLoRaWAN` that represents a simplified interface for managing AWS IoT Core for LoRaWAN resources. The class should provide methods to create, delete, associate, disassociate, and retrieve information about different IoT resources such as wireless devices, multicast groups, fuota tasks, and service profiles.\n\nThe class should implement the following methods:\n- `create_wireless_device(name: str, device_profile_id: str) -> dict`: Creates a new wireless device with the given name and device profile ID, returning a dictionary with the device details.\n- `delete_wireless_device(device_id: str) -> bool`: Deletes the wireless device with the given device ID, returning `True` if successful.\n- `associate_device_with_thing(device_id: str, thing_name: str) -> bool`: Associates a wireless device with an AWS IoT thing, returning `True` if successful.\n- `disassociate_device_from_thing(device_id: str) -> bool`: Disassociates a wireless device from an AWS IoT thing, returning `True` if successful.\n- `get_wireless_device(device_id: str) -> dict`: Retrieves the details of a wireless device with the given device ID, returning a dictionary with the device details.\n\nFor simplicity, assume that the actual communication with AWS IoT Core for LoRaWAN is abstracted away and that these methods simulate the behavior by interacting with an in-memory database represented as a dictionary.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "python", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in python, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not have more than 2 classes."}, {"type": "structural control", "instruction": "Your code should not use if statement for decision making."}, {"type": "structural control", "instruction": "Your code should not use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named view."}, {"type": "variable", "instruction": "Your code should define an enumeration named Mode"}, {"type": "variable", "instruction": "Variable view, type should be float."}, {"type": "function", "instruction": "Your code should not use any functions from the ['analyze_customer', 'transform_bill', 'search_report', 'set_item']."}, {"type": "interface", "instruction": "Your code should define an interface named display_item."}, {"type": "class", "instruction": "Your code should define a class named RemoveOrder."}, {"type": "class", "instruction": "The class names in your code should follow the snake_case naming convention."}, {"type": "file", "instruction": "Your code should import the following libraries ['pandas', 'matplotlib']."}, {"type": "file", "instruction": "Your code should use the function handle_inventory from the library Django."}, {"type": "combination", "instruction": "Your code should define a class named RemoveOrder that implements the display_item interface."}, {"type": "combination", "instruction": "In your code, the class RemoveOrder should have these properties ['view', 'tys', 'credit']."}, {"type": "global", "instruction": "Your answer in total should not exceed 19 lines."}], "instruction_dependence": {"6": [0, 1, 4, 15], "10": [0, 1, 9, 15], "12": [0, 1, 11, 15], "13": [0, 1, 8, 9, 15], "14": [0, 1, 9, 15]}, "question_id": 598}
{"question": "\n\nDesign a Java Android application fragment that serves as a navigation bar for a lifestyle app. The fragment, named `BottomNavigationFragment`, should contain six buttons that represent different sections of the app: Profile, Goals, BMI Calculator, Hikes, Weather, and Help. Each button should have a unique identifier.\n\nWhen a button is clicked, the fragment should use a callback interface to communicate with the hosting activity, passing an integer that uniquely identifies which button was pressed. The hosting activity must implement this callback interface to handle the button click events.\n\nWrite the `BottomNavigationFragment` class, ensuring it extends the `Fragment` class and implements the `View.OnClickListener` interface. Define the callback interface within the `BottomNavigationFragment` class, and ensure proper communication between the fragment and the hosting activity.\n\nAdditionally, provide a simple implementation of an activity that hosts the `BottomNavigationFragment` and demonstrates how to handle the button click events.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "java", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in java, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code lines should not exceed 17 characters."}, {"type": "global", "instruction": "Your code should use global variables."}, {"type": "global", "instruction": "Your function should have at most 2 parameters."}, {"type": "global", "instruction": "Your code should not have more than 3 classes."}, {"type": "structural control", "instruction": "Your code should not use for-loop."}, {"type": "structural control", "instruction": "Your code should use switch statement for decision making."}, {"type": "variable", "instruction": "Your code should define a variable named inventory."}, {"type": "variable", "instruction": "The variable names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention"}, {"type": "interface", "instruction": "Your code should define an interface named generate_credit."}, {"type": "class", "instruction": "Your code should define a class named Product."}, {"type": "class", "instruction": "The class names in your code should follow the UPPERCASE_WITH_UNDERSCORES naming convention."}, {"type": "file", "instruction": "Your code should not use the following libraries ['java.io']."}, {"type": "combination", "instruction": "Your code should define a class named Product that implements the generate_credit interface."}, {"type": "global", "instruction": "Your answer in total should not exceed 24 lines."}], "instruction_dependence": {"8": [0, 1, 2, 3, 4, 7, 14], "11": [0, 1, 2, 3, 4, 10, 14], "13": [0, 1, 2, 3, 4, 9, 10, 14]}, "question_id": 599}
{"question": "\n\nDesign a C++ program that models a contact's status in a messaging application. The program should be able to provide the following functionalities:\n\n1. Retrieve the textual representation of a contact's status (e.g., \"online\", \"away\", \"busy\", \"offline\", \"blocked\", \"negotiating\").\n2. Determine if a contact is considered online.\n3. Generate the file path for the status icon, with an optional notification suffix for statuses that have associated notifications.\n\nThe `Status` class should be an `enum class` with the following statuses: `Online`, `Away`, `Busy`, `Offline`, `Blocked`, `Negotiating`.\n\nImplement the following functions:\n\n- `QString getTitle(Status status)`: Returns a localized string representing the contact's status.\n- `bool isOnline(Status status)`: Returns `true` if the status is considered online, `false` otherwise.\n- `QString getIconPath(Status status, bool event)`: Returns the file path for the status icon. If `event` is `true`, append \"_notification\" to the file name (except for `Blocked` status).\n\nEnsure that the program handles invalid status values gracefully.\n\n", "meta_info": {"date": "2025-01-16", "programming_language": "cpp", "language": "en", "item_set": "hard", "gen_type": "random"}, "instruction_list": [{"type": "global", "instruction": "Your entire response should be written in cpp, the use of other programming languages is not allowed."}, {"type": "global", "instruction": "Your code should not use global variables."}, {"type": "global", "instruction": "Your code should not have more than 1 classes."}, {"type": "variable", "instruction": "Your code should define a variable named item."}, {"type": "variable", "instruction": "Variable item, should be a constant."}, {"type": "function", "instruction": "Your code should not use any functions from the ['calculate_profile', 'insert_customer', 'filter_customer']."}, {"type": "class", "instruction": "Your code should define a class named RemoveEvent."}, {"type": "file", "instruction": "Your code should be organized in a package named sort_shipment."}, {"type": "combination", "instruction": "In your code, the class RemoveEvent should have these methods ['check_kms', 'handle_room', 'calculate_msg']."}, {"type": "combination", "instruction": "Your code should be organized in a package named sort_shipment, which should contain these functions ."}], "instruction_dependence": {"4": [0, 1, 2, 3], "8": [0, 1, 2, 6], "9": [0, 1, 2, 7]}, "question_id": 600}
